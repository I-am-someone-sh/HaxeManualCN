{"index":{"version":"2.1.0","fields":["title","body"],"fieldVectors":[["title/index.html",[0,0.126]],["body/index.html",[0,0.35,1,7.147,2,5.199,3,7.147,4,1.274,5,1.092,6,0.426,7,2.964,8,2.964,9,2.915]],["title/index.html#关于本文档",[10,4.077]],["body/index.html#关于本文档",[0,0.273,1,7.179,2,5.222,3,7.179,4,1.275,5,1.097,6,0.428,7,2.977,8,2.977,9,2.928,11,7.875,12,7.875,13,7.875,14,7.875,15,7.875,16,7.875,17,7.875,18,7.875,19,7.875,20,7.875,21,7.875,22,7.179,23,7.875,24,7.875,25,7.875,26,7.875,27,7.875,28,7.179,29,5.681,30,7.179,31,7.179,32,7.179,33,7.179,34,7.179,35,4.45,36,7.179,37,7.179]],["title/1.Haxe介绍/1.Haxe介绍.html",[]],["body/1.Haxe介绍/1.Haxe介绍.html",[0,0.315,4,1.174,38,9.111,39,8.305,40,7.062,41,8.305,42,7.378,43,4.84,44,5.646,45,8.305]],["title/1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍",[46,4.473]],["body/1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍",[10,8.349,39,8.349,40,7.099,41,8.349,42,7.417,43,4.865,44,5.675,45,8.349,47,7.816,48,9.159,49,9.159,50,9.159]],["title/10.标准库/10.标准库.html",[]],["body/10.标准库/10.标准库.html",[0,0.338,51,1.461,52,6.485,53,7.14,54,7.14,55,7.627,56,5.549,57,7.627,58,5.549,59,7.14,60,5.417,61,6.036,62,6.776,63,7.627,64,4.321,65,7.627,66,5.081,67,7.627,68,7.627,69,7.627,70,7.14,71,7.14]],["title/10.标准库/10.标准库.html#10-标准库",[72,4.473]],["body/10.标准库/10.标准库.html#10-标准库",[47,7.174,52,6.516,53,7.174,54,7.174,55,7.664,56,5.575,57,7.664,58,5.575,59,7.174,60,5.443,61,6.065,62,6.809,63,7.664,64,4.342,65,7.664,66,5.106,67,7.664,68,7.664,69,7.664,70,7.174,71,7.174,73,8.407,74,8.407,75,8.407,76,8.407,77,8.407,78,8.407,79,8.407,80,8.407]],["title/2.类型/2.类型.html",[]],["body/2.类型/2.类型.html",[0,0.348,4,1.228,6,0.508,81,0.681,82,1.123,83,6.723,84,2.7,85,10.121,86,5.503,87,9.335,88,2.698,89,4.775,90,4.891,91,4.168,92,5.32]],["title/2.类型/2.类型.html#2-类型",[93,4.473]],["body/2.类型/2.类型.html#2-类型",[0,0.324,4,1.192,6,0.509,29,5.343,81,0.541,82,1.126,83,6.752,84,2.706,85,10.134,86,5.526,87,9.353,88,2.709,90,4.912,94,7.406,95,7.406,96,7.406,97,7.406,98,6.32,99,7.406,100,7.406,101,7.406,102,7.406,103,7.406,104,7.406,105,7.406,106,7.406,107,7.406,108,7.406,109,7.406,110,7.406,111,7.406,112,7.406,113,7.406,114,7.406,115,5.741,116,7.406,117,6.752,118,2.848]],["title/3.类型系统/3.类型系统.html",[]],["body/3.类型系统/3.类型系统.html",[0,0.341,81,0.655,91,5.069,119,0.669,120,6.953,121,4.243,122,4.987,123,5.807]],["title/3.类型系统/3.类型系统.html#3-类型系统",[124,4.473]],["body/3.类型系统/3.类型系统.html#3-类型系统",[115,6.989,121,4.265,125,9.017,126,8.219,127,9.017,128,7.694,129,9.017,130,9.017,131,9.017,132,9.017,133,7.694,134,9.017,135,9.017,136,9.017,137,9.017]],["title/4.类字段/4.类字段.html",[]],["body/4.类字段/4.类字段.html",[0,0.301,4,1.061,7,2.089,138,0.482,139,2.473,140,3.356,141,1.275,142,2.144,143,5.252,144,3.313,145,4.716,146,3.384,147,1.381,148,5.038,149,4.353,150,3.867,151,4.353,152,5.39,153,2.936,154,5.527,155,4.476,156,3.498,157,1.506,158,3.123,159,2.089,160,3.308,161,2.373,162,5.038,163,3.522,164,2.614,165,2.35,166,4.476,167,3.874,168,3.665,169,2.207,170,0.518,171,5.038,172,3.123,173,2.327,174,3.498,175,4.283,176,4.773,177,5.038,178,2.854,179,1.543,180,4.876,181,5.038,182,2.816,183,3.987,184,2.854,185,3.498,186,2.667,187,3.665,188,4.124,189,3.232,190,1.087,191,1.913,192,3.665,193,5.038,194,3.874,195,3.761,196,5.038,197,1.626,198,4.476,199,3.665,200,5.038,201,4.476,202,2.71,203,2.072,204,3.123,205,5.242,206,4.124,207,5.038,208,5.038,209,2.262,210,2.584]],["title/4.类字段/4.类字段.html#4-类字段",[211,4.473]],["body/4.类字段/4.类字段.html#4-类字段",[4,0.982,7,2.096,29,3.999,139,2.481,141,1.275,142,2.15,144,3.316,145,4.722,146,3.387,147,1.382,148,5.054,149,4.363,150,3.879,151,4.363,152,5.402,153,2.945,155,4.49,156,3.509,157,1.509,158,3.133,159,2.096,160,3.315,161,2.381,162,5.054,163,3.53,164,2.622,165,2.358,166,4.49,167,3.882,168,3.677,169,2.212,170,0.52,171,5.054,172,3.133,173,2.335,175,3.082,176,3.435,177,5.054,178,2.863,179,1.548,180,4.887,181,5.054,182,2.825,183,3.999,185,3.509,186,2.673,187,3.677,188,4.137,189,3.243,190,1.089,191,1.92,192,3.677,193,5.054,194,3.882,196,5.054,197,1.631,198,4.49,199,3.677,200,5.054,201,4.49,202,2.718,203,2.079,204,3.133,205,3.773,206,4.137,207,5.054,208,5.054,209,2.269,210,2.592,212,5.544,213,5.544,214,3.367,215,5.256,216,5.544,217,5.544,218,4.137,219,5.544,220,4.731,221,5.544,222,4.731,223,5.544,224,2.863,225,5.544,226,3.773,227,5.544]],["title/5.表达式/5.表达式.html",[]],["body/5.表达式/5.表达式.html",[0,0.318,4,1.161,8,1.942,82,0.618,84,1.354,121,2.429,139,2.298,140,5.174,141,0.582,143,2.429,144,1.629,146,2.37,147,0.703,150,3.593,157,1.665,158,2.902,159,1.942,161,2.205,169,2.66,170,0.482,173,3.08,176,3.182,184,2.652,190,0.829,210,3.42,228,5.136,229,3.004,230,2.951,231,4.279,232,3.406,233,2.045,234,2.689,235,3.125,236,5.456,237,5.136,238,5.136,239,6.195,240,5.67,241,4.134,242,5.458,243,4.077,244,5.924,245,3.832,246,2.805,247,4.004,248,6.668,249,2.728,250,1.531,251,0.779,252,2.457,253,2.902,254,3.406,255,2.55,256,2.728,257,2.348,258,3.251,259,4.159,260,3.004,261,1.415,262,4.681,263,4.681,264,1.965,265,2.676,266,5.136,267,3.832,268,4.681,269,4.681,270,5.136,271,2.902,272,2.951,273,4.681,274,4.159,275,3.119,276,3.08,277,2.25,278,3.251,279,2.902,280,3.406,281,3.251,282,2.122,283,2.102,284,1.849,285,2.228,286,3.004,287,2.298,288,2.617,289,1.834,290,2.374,291,2.811,292,1.738,293,2.768,294,2.518,295,2.811,296,0.877,297,1.266,298,2.083,299,3.004,300,1.909,301,2.902,302,4.159]],["title/5.表达式/5.表达式.html#5-表达式",[303,4.473]],["body/5.表达式/5.表达式.html#5-表达式",[0,0.24,4,1.087,8,1.947,82,0.62,84,1.358,121,2.436,139,2.305,141,0.584,144,1.633,146,2.375,147,0.705,150,3.604,157,1.668,158,2.911,159,1.947,161,2.212,169,2.664,173,3.087,176,3.192,190,0.831,210,3.427,214,5.183,215,2.436,224,2.66,229,3.013,230,2.96,231,4.288,232,3.416,233,2.051,234,2.697,235,3.009,239,5.966,240,3.992,241,4.142,242,5.47,243,4.084,244,5.936,245,3.843,246,2.809,247,4.012,248,6.682,249,2.736,250,1.535,251,0.781,252,2.461,253,2.911,254,3.416,255,2.557,256,2.736,257,2.355,258,3.26,259,4.171,260,3.013,261,1.42,262,4.695,263,4.695,264,1.968,265,2.681,267,3.843,268,4.695,269,4.695,271,2.911,272,2.96,273,4.695,274,4.171,275,3.128,276,3.087,277,2.257,278,3.26,279,2.911,280,3.416,281,3.26,282,2.128,283,2.108,284,1.854,285,2.234,286,3.013,287,2.305,288,2.624,289,1.84,290,2.381,291,2.819,292,1.743,293,2.777,294,2.525,295,2.819,296,0.879,297,1.27,298,2.089,299,3.013,300,1.915,301,2.911,302,4.171,304,5.151,305,5.151,306,5.151,307,5.151,308,5.151,309,5.151,310,5.151,311,5.463,312,5.151,313,5.151,314,5.151,315,5.151,316,5.151,317,5.151,318,5.151,319,5.151,320,5.151,321,5.151,322,3.843,323,5.151]],["title/6.语言特性/6.语言特性.html",[]],["body/6.语言特性/6.语言特性.html",[0,0.34,4,0.95,5,0.805,6,0.532,7,2.185,43,1.987,51,0.653,81,0.691,82,0.956,84,1.711,88,1.789,91,2.114,119,0.641,138,0.693,141,1.052,143,2.734,144,1.186,145,1.749,147,0.67,153,1.165,157,1.85,159,1.414,160,3.239,165,0.933,169,1.401,170,0.663,175,2.08,179,1.614,180,1.388,182,1.118,184,1.133,185,2.368,186,2.446,190,1.029,191,1.295,197,2.078,203,0.822,205,2.546,209,1.531,210,1.025,231,1.283,233,0.873,235,1.146,243,1.05,246,0.663,250,1.458,254,1.454,256,1.165,261,2.285,264,1.597,265,0.802,277,2.144,282,0.906,284,1.761,286,2.188,288,1.118,290,2.261,291,2.047,296,0.375,297,0.922,298,0.889,324,0.639,325,2.546,326,1.239,327,1.2,328,1.454,329,1.79,330,1.535,331,1.776,332,1.05,333,2.08,334,2.699,335,1.089,336,1.607,337,4.2,338,1.776,339,1.388,340,1.776,341,2.481,342,2.791,343,3.446,344,1.637,345,1.776,346,1.776,347,1.999,348,1.776,349,1.062,350,0.731,351,0.992,352,1.999,353,2.791,354,1.957,355,1.454,356,1.165,357,1.999,358,3.41,359,1.283,360,1.535,361,1.999,362,1.776,363,2.318,364,2.193,365,2.481,366,1.133,367,1.103,368,1.776,369,3.381,370,1.103,371,1.535,372,2.114,373,2.46,374,1.118,375,1.932,376,1.2,377,2.791,378,1.987,379,1.2,380,2.834,381,1.637,382,1.999,383,1.535,384,1.103,385,1.089,386,1.388,387,1.359,388,1.999,389,1.637,390,1.454,391,1.999,392,1.103,393,2.618,394,2.193,395,3.41,396,2.047,397,1.999,398,1.454,399,1.999,400,1.999,401,1.133,402,1.999,403,0.796,404,1.999,405,1.721,406,1.999,407,1.42,408,1.776,409,2.368,410,2.368,411,0.873,412,1.535,413,1.999,414,1.454,415,2.193,416,1.332,417,2.193,418,1.776,419,1.999,420,1.637,421,1.535,422,1.283,423,3.029,424,2.873,425,1.307,426,2.533,427,2.047,428,1.283,429,1.454,430,1.999,431,1.373,432,3.029,433,1.403,434,1.165,435,1.637,436,0.606,437,3.961,438,3.961,439,1.357,440,1.846,441,1.118,442,1.637,443,2.368,444,2.598,445,1.165,446,1.999,447,2.114,448,1.454,449,1.454,450,0.701,451,1.999,452,1.776,453,2.546,454,2.047,455,1.637,456,1.2,457,1.776,458,1.283,459,1.999,460,3.192,461,1.637,462,1.2,463,1.637,464,1.332,465,0.915,466,2.193,467,3.192,468,3.029,469,1.776,470,1.103,471,1.165,472,0.836,473,1.454,474,1.637,475,2.193,476,1.637,477,1.987,478,1.776,479,4.459,480,1.332,481,0.984,482,2.791,483,1.881,484,1.639,485,2.618,486,1.283,487,1.999,488,0.942,489,2.193,490,1.239,491,2.193,492,1.999,493,2.526,494,1.454,495,1.999,496,3.41,497,1.999,498,1.999,499,3.029,500,1.332,501,1.535,502,2.791,503,1.776,504,1.165,505,1.454,506,1.332,507,1.075,508,1.075]],["title/6.语言特性/6.语言特性.html#6-语言特性",[509,4.473]],["body/6.语言特性/6.语言特性.html#6-语言特性",[0,0.337,4,0.824,5,0.792,6,0.528,7,2.15,43,1.945,51,0.64,81,0.686,82,0.946,84,1.686,88,1.34,91,1.209,119,0.635,138,0.685,141,1.044,144,1.161,145,1.712,147,0.657,153,1.136,157,1.836,159,1.385,160,3.2,165,0.91,169,1.376,170,0.654,175,1.189,179,1.587,180,1.354,182,1.09,185,2.318,186,2.413,190,1.02,191,1.268,197,2.05,203,0.802,205,1.456,209,1.499,210,1,215,2.689,220,1.826,224,1.105,231,1.251,233,0.852,235,1.122,243,1.024,246,0.646,250,1.431,254,1.419,256,1.136,261,2.261,264,1.577,265,0.783,277,2.104,282,0.884,284,1.728,286,2.142,288,1.09,290,2.22,291,2.004,296,0.365,297,0.903,298,0.868,324,0.531,325,1.456,326,1.209,327,1.171,328,1.419,329,1.753,330,1.497,331,1.733,332,1.024,333,2.036,334,1.543,335,1.062,336,1.573,338,1.733,339,1.354,340,1.733,341,1.419,342,2.733,343,3.396,344,1.596,345,1.733,346,1.733,347,1.95,348,1.733,349,1.036,350,0.713,351,0.968,352,1.95,353,1.596,354,1.925,355,1.419,356,1.136,357,1.95,358,3.338,359,1.251,360,1.497,361,1.95,362,1.733,363,1.326,365,2.429,366,1.105,367,1.076,368,1.733,369,3.326,370,1.076,371,1.497,372,2.07,373,2.415,374,1.09,375,1.891,376,1.171,377,1.596,378,1.945,379,1.171,380,2.788,381,1.596,382,1.95,383,1.497,384,1.076,385,1.062,386,1.354,387,1.326,388,1.95,389,1.596,390,1.419,391,1.95,392,1.076,393,1.497,395,3.338,396,2.004,397,1.95,398,1.419,399,1.95,400,1.95,401,1.105,402,1.95,403,0.78,404,1.95,405,1.7,406,1.95,407,1.385,408,1.733,409,1.354,410,2.318,411,0.852,412,1.497,413,1.95,414,1.419,416,1.299,418,1.733,419,1.95,420,1.596,421,1.497,422,1.251,423,1.733,424,2.83,425,1.274,426,2.104,427,2.004,428,1.251,429,1.419,430,1.95,431,1.355,432,2.966,433,1.373,434,1.136,435,1.596,436,0.595,437,3.888,438,3.888,439,1.329,440,1.816,441,1.09,442,1.596,443,1.354,444,2.551,445,1.136,446,1.95,447,2.07,448,1.419,449,1.419,450,0.688,451,1.95,452,1.733,453,1.456,454,2.004,455,1.596,456,1.171,457,1.733,458,1.251,459,1.95,460,1.826,461,1.596,462,1.171,463,1.596,464,1.299,465,0.892,467,1.826,468,2.966,469,1.733,470,1.076,471,1.136,472,0.816,473,1.419,474,1.596,476,1.596,477,1.945,478,1.733,479,4.377,480,1.299,481,0.965,482,1.596,483,1.842,484,1.605,485,2.563,486,1.251,487,1.95,488,0.919,490,1.209,492,1.95,493,2.48,494,1.419,495,1.95,496,3.338,497,1.95,498,1.95,499,1.733,500,1.299,501,1.497,502,2.733,503,1.733,504,1.136,505,1.419,506,1.299,507,1.049,508,1.049,510,1.826,511,2.139,512,2.139,513,2.139,514,2.139,515,2.139,516,4.138,517,1.95,518,2.139,519,2.139,520,2.139,521,2.139,522,1.456,523,2.139,524,2.139,525,2.139,526,2.139,527,2.139,528,2.139,529,2.139,530,2.139,531,2.139,532,2.139,533,2.139,534,2.139,535,2.139,536,2.139,537,2.139,538,2.139,539,2.139,540,2.139,541,2.139,542,2.139,543,2.139,544,1.733,545,2.139,546,2.139,547,1.95,548,2.139,549,2.139,550,2.139,551,2.139,552,2.139,553,2.139,554,2.139,555,2.139,556,2.139,557,2.139,558,2.139,559,2.139,560,2.139,561,2.139,562,2.139,563,2.139,564,2.139,565,2.139,566,2.139,567,2.139,568,2.139,569,2.139,570,2.139,571,2.139,572,2.139]],["title/7.编译器用法/7.1.hxml.html",[]],["body/7.编译器用法/7.1.hxml.html",[0,0.282,4,1.026,5,1.353,6,0.428,7,2.498,9,2.457,51,0.78,81,0.574,119,0.587,138,0.686,141,1.101,153,2.371,170,0.62,172,2.523,189,2.611,191,2.288,192,2.96,197,3.037,199,2.96,202,3.24,233,1.778,246,1.349,251,0.677,261,1.23,264,2.057,293,2.407,324,0.494,356,2.371,366,2.306,376,2.443,380,2.189,384,3.323,385,2.216,386,2.826,387,5.387,418,3.615,436,0.553,438,3.615,450,0.64,472,2.999,474,3.331,481,0.898,573,4.069,574,3.615,575,9.612,576,6.843,577,3.378,578,4.069,579,7.041,580,4.069,581,4.069,582,5.682,583,7.869,584,3.615,585,4.069,586,3.033,587,4.069,588,7.171,589,4.069,590,8.46,591,4.317,592,5.503,593,5.351,594,5.351,595,4.382,596,6.023,597,3.24,598,5.319,599,2.136,600,3.52,601,2.96,602,4.069,603,3.615,604,3.615,605,0.873,606,1.043,607,1.177,608,1.238,609,1.304,610,1.446,611,4.069,612,4.069,613,4.069,614,4.069,615,5.216,616,4.069,617,3.124,618,2.041,619,4.069,620,4.069,621,4.069,622,4.464,623,4.464,624,4.464,625,3.124,626,3.124,627,2.611,628,2.371,629,3.615,630,1.998,631,4.069,632,3.124]],["title/7.编译器用法/7.1.hxml.html#7-1HXML",[573,4.077]],["body/7.编译器用法/7.1.hxml.html#7-1HXML",[0,0.283,4,1.027,5,1.355,6,0.429,7,2.503,9,2.461,51,0.782,81,0.575,119,0.588,138,0.687,141,1.102,153,2.378,170,0.621,172,2.529,189,2.618,191,2.292,192,2.968,197,3.039,199,2.968,202,3.246,233,1.782,246,1.352,251,0.679,261,1.234,264,2.059,293,2.413,324,0.495,356,2.378,366,2.312,376,2.45,380,2.194,384,3.329,385,2.222,386,2.833,387,5.394,418,3.625,436,0.555,438,3.625,450,0.641,472,3.004,474,3.34,481,0.9,574,3.625,575,9.619,576,6.848,577,3.383,578,4.08,579,7.05,580,4.08,581,4.08,582,5.687,583,7.877,584,3.625,585,4.08,586,3.037,587,4.08,588,7.181,589,4.08,590,8.469,591,4.322,592,5.51,593,5.361,594,5.361,595,4.39,596,6.035,597,3.246,598,5.324,599,2.142,600,3.525,601,2.968,602,4.08,603,3.625,604,3.625,605,0.875,606,1.046,607,1.18,608,1.241,609,1.308,610,1.45,611,4.08,612,4.08,613,4.08,614,4.08,615,5.224,616,4.08,617,3.132,618,2.046,619,4.08,620,4.08,621,4.08,625,3.132,626,3.132,627,2.618,628,2.378,629,3.625,630,2.003,631,4.08,632,3.132,633,4.476,634,4.476,635,4.476]],["title/7.编译器用法/7.编译器用法.html",[]],["body/7.编译器用法/7.编译器用法.html",[0,0.319,4,0.966,5,1.335,7,3.625,9,2.686,86,4.434,88,2.174,119,0.443,141,0.918,159,3.834,179,1.083,197,2.983,209,1.587,210,1.813,229,2.268,235,1.188,255,1.925,264,1.848,271,3.358,282,1.602,294,1.901,298,1.573,336,3.103,337,2.511,370,1.95,374,4.126,379,2.122,387,5.708,421,4.158,426,1.699,436,0.481,445,2.06,471,3.157,472,3.512,591,4.574,599,1.856,600,1.735,605,0.758,618,2.717,626,5.666,627,2.268,629,6.558,636,2.122,637,2.894,638,2.191,639,3.761,640,4.812,641,1.699,642,4.791,643,2.688,644,7.382,645,3.878,646,2.268,647,3.069,648,3.535,649,3.535,650,2.122,651,7.155,652,3.14,653,8.741,654,5.708,655,3.878,656,3.878,657,2.122,658,2.455,659,2.894,660,2.894,661,3.14,662,3.535,663,8.852,664,2.355,665,6.515,666,3.97,667,2.572,668,5.417,669,3.878,670,5.417,671,3.535,672,6.922,673,2.06,674,4.287,675,3.14,676,3.535,677,3.761,678,3.535,679,3.878,680,3.878,681,3.878,682,3.878,683,3.878,684,4.434,685,3.878,686,4.812,687,3.878,688,3.878,689,4.791,690,3.878,691,3.535,692,9.245,693,2.455,694,1.878,695,3.535,696,3.535,697,2.355,698,3.535,699,3.535,700,2.572,701,3.535,702,3.535,703,3.535]],["title/7.编译器用法/7.编译器用法.html#7-编译器用法",[704,4.473]],["body/7.编译器用法/7.编译器用法.html#7-编译器用法",[0,0.203,4,0.8,5,1.336,7,3.628,9,2.213,86,4.442,88,2.177,118,1.494,119,0.29,141,0.919,159,3.837,179,1.085,197,2.985,209,1.591,210,1.817,229,2.273,235,1.19,255,1.93,264,1.85,271,3.364,282,1.606,294,1.905,298,1.576,336,3.107,370,1.954,374,4.131,379,2.127,387,5.416,421,4.165,426,1.703,445,2.065,471,3.162,472,3.515,516,2.516,591,4.578,599,1.86,600,1.739,605,0.76,618,2.722,626,5.673,627,2.273,629,6.566,636,2.127,637,2.9,638,2.196,639,3.768,640,4.821,641,1.703,642,4.798,643,2.692,644,7.391,647,3.074,649,3.543,650,2.127,652,3.147,653,8.748,654,5.713,657,2.127,658,2.46,659,2.9,660,2.9,661,3.147,662,3.543,663,8.762,664,2.36,665,6.522,666,3.975,667,2.577,668,5.426,670,5.426,671,3.543,672,6.927,673,2.065,674,4.294,675,3.147,676,3.543,677,3.768,678,3.543,684,4.442,686,4.821,689,4.798,691,3.543,693,2.46,694,1.882,695,3.543,696,3.543,697,2.36,698,3.543,699,3.543,700,2.577,701,3.543,702,3.543,703,3.543,705,3.887,706,3.887,707,3.887,708,3.887,709,3.887,710,3.887,711,3.887,712,2.273,713,3.543,714,7.161,715,3.887,716,3.887,717,3.887,718,3.887,719,3.887,720,3.887,721,3.887,722,3.209,723,3.887,724,3.887,725,3.887,726,3.887,727,3.887,728,3.147,729,3.887,730,3.887,731,3.887,732,3.887,733,3.887,734,3.887,735,3.887,736,3.887,737,3.887,738,3.887,739,3.887,740,3.887,741,9.251]],["title/8.编译器功能/8.编译器功能.html",[]],["body/8.编译器功能/8.编译器功能.html",[0,0.338,450,1.299,742,6.763,743,6.763,744,7.734,745,7.34,746,7.734,747,7.734]],["title/8.编译器功能/8.编译器功能.html#8-编译器功能",[748,4.473]],["body/8.编译器功能/8.编译器功能.html#8-编译器功能",[47,7.775,742,6.798,743,6.798,744,7.775,745,7.378,746,7.775,747,7.775,749,8.305,750,9.111,751,9.111,752,9.111,753,9.111,754,9.111]],["title/9.宏/9.宏.html",[]],["body/9.宏/9.宏.html",[0,0.342,4,0.958,251,1.313,265,3.167,582,4.893,755,7.893,756,8.658,757,7.893,758,8.658,759,8.658,760,7.893,761,5.742,762,8.658]],["title/9.宏/9.宏.html#9-宏",[763,4.473]],["body/9.宏/9.宏.html#9-宏",[582,4.917,757,7.932,761,5.77,764,8.701,765,8.701,766,8.701,767,8.701,768,8.701,769,8.701,770,8.701,771,8.701,772,8.701,773,8.701,774,8.701,775,7.425,776,8.701,777,8.701,778,8.701,779,5.633,780,8.701,781,8.701,782,8.701]],["title/7.编译器用法/7.1.编译器标记.html",[]],["body/7.编译器用法/7.1.编译器标记.html",[0,0.295,2,2.733,4,1.019,7,2.011,64,2.129,82,0.296,86,3.075,88,2.277,139,2.785,141,0.467,142,1.599,145,1.927,146,0.797,157,0.806,159,2.621,163,1.125,165,2.647,169,0.705,179,0.687,186,1.427,190,0.279,191,0.852,197,2.555,199,1.631,204,2.329,210,1.927,234,2.158,235,1.262,241,1.39,249,1.307,251,0.373,256,2.189,257,1.884,261,1.466,264,2.134,265,2.914,271,2.329,272,4.31,282,1.703,289,0.878,290,1.905,293,2.222,294,1.206,295,1.346,296,0.42,329,1.177,336,2.673,359,2.411,367,2.073,372,1.39,374,2.711,375,1.27,376,3.407,377,3.075,379,1.346,383,1.721,386,5.678,387,4.647,390,1.631,405,0.561,407,1.592,412,1.721,424,1.089,426,2.331,431,1.034,432,1.992,436,0.305,444,2.189,454,1.346,471,1.307,477,2.826,483,2.073,484,1.806,490,1.39,500,2.503,576,4.717,591,2.046,592,2.609,595,1.631,600,1.101,626,4.355,628,2.189,636,1.346,643,3.779,654,2.554,657,1.346,663,1.992,665,7.848,666,3.052,672,5.574,677,1.557,684,3.075,693,1.557,694,3.858,700,1.631,743,3.075,755,2.242,783,2.46,784,2.668,785,3.172,786,1.163,787,1.631,788,2.129,789,2.242,790,1.992,791,2.242,792,2.46,793,1.835,794,2.46,795,2.242,796,2.733,797,2.515,798,1.774,799,2.46,800,2.242,801,2.242,802,2.242,803,2.099,804,3.444,805,3.757,806,1.992,807,5.674,808,2.242,809,5.674,810,2.46,811,1.992,812,1.906,813,2.46,814,3.757,815,2.46,816,2.884,817,3.757,818,6.074,819,3.338,820,1.992,821,1.835,822,3.78,823,3.338,824,1.835,825,2.242,826,4.849,827,3.757,828,1.125,829,3.906,830,3.757,831,3.757,832,1.346,833,3.722,834,2.242,835,3.338,836,2.242,837,2.242,838,2.46,839,2.242,840,1.906,841,3.757,842,2.242,843,2.242,844,1.631,845,3.528,846,2.884,847,2.242,848,3.757,849,1.992,850,3.338,851,3.757,852,1.992,853,2.242,854,1.631,855,2.242,856,1.835,857,2.242,858,3.757,859,3.757,860,3.757,861,1.346,862,1.992,863,2.242,864,2.242,865,3.338,866,3.757,867,1.671,868,6.694,869,1.592,870,2.242,871,1.494,872,2.884,873,1.835,874,3.075,875,1.721,876,1.439,877,2.242,878,1.992,879,1.835,880,2.242,881,3.075,882,1.992,883,2.242,884,1.992,885,5.674,886,1.721,887,1.557,888,2.242,889,2.242,890,3.338,891,2.242,892,1.721,893,2.256,894,1.992,895,3.075,896,3.757,897,2.242,898,2.242,899,5.674,900,2.242,901,2.242,902,1.835,903,1.992,904,2.242,905,1.835,906,2.189,907,1.439,908,3.757,909,2.242,910,2.242,911,3.757,912,3.757,913,2.242,914,2.242,915,2.242,916,2.242,917,2.242,918,3.757,919,1.439,920,1.494,921,1.992,922,3.075,923,3.338,924,2.242,925,1.39,926,2.242,927,2.242,928,2.242,929,3.757,930,2.242,931,1.557,932,1.557,933,2.884,934,3.757,935,1.721,936,1.557,937,2.242]],["title/7.编译器用法/7.1.编译器标记.html#7-2-编译器标记",[938,4.473]],["body/7.编译器用法/7.1.编译器标记.html#7-2-编译器标记",[0,0.069,2,2.736,4,0.925,7,2.013,64,1.272,82,0.296,86,1.838,88,1.509,139,2.788,141,0.468,142,1.6,145,1.929,146,0.798,157,0.807,159,2.623,163,1.126,165,2.264,169,0.706,179,0.688,186,1.429,190,0.279,191,0.853,197,2.556,199,1.633,204,2.332,210,1.929,234,1.29,235,1.264,241,1.392,249,1.308,251,0.374,256,2.192,257,1.887,261,1.468,264,2.135,265,2.916,271,2.332,272,4.313,282,1.705,289,0.88,290,1.908,293,2.224,294,1.208,295,1.348,296,0.421,329,1.179,336,2.675,359,2.414,367,2.075,372,1.392,374,2.103,375,1.272,376,3.41,377,1.838,379,1.348,383,1.723,386,5.501,387,4.651,390,1.633,405,0.562,407,1.595,412,1.723,424,1.091,426,2.334,431,0.802,432,1.995,436,0.305,444,2.192,454,1.348,471,1.308,477,2.829,483,2.075,484,1.808,490,1.392,500,2.506,576,4.721,591,2.049,592,2.612,595,1.633,600,1.102,626,4.359,628,2.192,636,1.348,643,3.781,654,1.526,657,1.348,663,1.995,665,7.78,666,3.054,672,5.578,677,1.559,684,3.079,693,1.559,694,3.635,700,1.633,728,1.995,784,1.595,785,3.174,786,1.165,788,2.131,789,2.245,790,1.995,791,2.245,793,1.838,795,2.245,796,2.736,797,2.261,798,1.777,800,2.245,801,2.245,802,2.245,804,3.447,805,3.762,806,1.995,807,5.679,808,2.245,809,4.854,811,1.995,812,1.909,814,3.762,816,2.887,817,3.762,818,5.618,819,3.342,820,1.995,821,1.838,822,3.783,823,3.342,824,1.838,825,2.245,826,4.854,827,3.762,828,1.126,829,3.908,830,3.762,831,3.762,832,1.348,833,3.726,834,2.245,835,1.995,836,2.245,837,2.245,839,2.245,840,1.909,841,3.762,842,2.245,843,2.245,844,1.633,845,3.531,846,2.887,847,2.245,848,3.762,849,1.995,850,3.342,851,3.762,852,1.995,853,2.245,854,1.633,855,2.245,856,1.838,857,2.245,858,3.762,859,3.762,860,3.762,861,1.348,862,1.995,863,2.245,864,2.245,865,3.342,866,3.762,867,1.673,868,6.697,869,1.595,870,2.245,871,1.496,872,2.887,873,1.838,874,3.079,875,1.723,876,1.441,877,2.245,878,1.995,879,1.838,880,2.245,881,3.079,882,1.995,883,2.245,884,1.995,885,5.679,886,1.723,887,1.559,888,2.245,889,2.245,890,3.342,891,2.245,892,1.723,893,2.258,894,1.995,895,3.079,896,3.762,897,2.245,898,2.245,899,5.679,900,2.245,901,2.245,902,1.838,903,1.995,904,2.245,905,1.838,906,2.192,907,1.441,908,3.762,909,2.245,910,2.245,911,3.762,912,3.762,913,2.245,914,2.245,915,2.245,916,2.245,917,2.245,918,3.762,919,1.441,920,1.496,921,1.995,922,3.079,923,3.342,924,2.245,925,1.392,926,2.245,927,2.245,928,2.245,929,3.762,930,2.245,931,1.559,932,1.559,933,2.887,934,3.762,935,1.723,936,1.559,937,2.245,939,1.633,940,2.463,941,1.995,942,2.463,943,2.245,944,2.463,945,2.245,946,2.463,947,2.463,948,2.463,949,2.463,950,2.463,951,2.463,952,2.463,953,2.463,954,2.463,955,2.245,956,2.463,957,2.463,958,2.463,959,2.463,960,2.463,961,2.245,962,2.463,963,2.463,964,4.126,965,2.463,966,2.463,967,2.463,968,2.463,969,2.463,970,2.463,971,2.463,972,2.463,973,2.463,974,2.463,975,2.463,976,2.463,977,2.463,978,2.463,979,0.939,980,2.463,981,2.463,982,2.463,983,2.463,984,2.463,985,2.463,986,2.245,987,2.463,988,2.463]],["title/1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html",[]],["body/1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html",[0,0.346,4,1.307,9,2.295,51,1.078,81,0.451,88,3.04,119,0.62,138,0.538,170,0.579,251,0.936,324,0.683,374,3.145,436,0.765,450,0.885,481,1.241,654,3.825,666,3.026,689,4.093,693,3.907,694,2.99,862,6.729,989,6.173,990,5.627,991,10.063,992,7.607,993,10.231,994,9.56,995,8.556,996,6.173,997,6.173]],["title/1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么",[998,4.473]],["body/1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么",[4,1.292,9,2.303,88,3.047,118,2.382,119,0.462,126,5.647,374,3.156,654,3.839,666,3.037,689,4.108,693,3.921,694,3,862,6.745,990,5.647,991,10.072,992,7.621,993,10.239,994,9.572,995,8.564,999,6.195,1000,6.195,1001,6.195,1002,6.195,1003,6.195,1004,6.195,1005,5.647,1006,6.195,1007,6.195,1008,6.195,1009,6.195,1010,6.195,1011,6.195,1012,6.195,1013,6.195,1014,6.195,1015,6.195,1016,5.286,1017,6.195,1018,6.195,1019,4.335,1020,6.195,1021,6.195,1022,6.195,1023,6.195,1024,6.195,1025,6.195,1026,6.195,1027,6.195,1028,6.195,1029,6.195,1030,6.195,1031,6.195,1032,6.195,1033,4.622,1034,6.195,1035,6.195,1036,6.195,1037,5.647,1038,6.195,1039,6.195,1040,6.195,1041,6.195,1042,6.195,1043,6.195,1044,6.195]],["title/1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html",[]],["body/1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html",[0,0.328,4,0.977,1045,8.834,1046,8.053,1047,7.154,1048,8.053,1049,8.834,1050,8.053,1051,8.834,1052,8.834,1053,8.834,1054,8.053,1055,8.834,1056,5.591,1057,8.834]],["title/1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者",[1058,4.473]],["body/1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者",[4,0.982,1046,8.094,1047,7.19,1048,8.094,1050,8.094,1054,8.094,1056,5.62,1059,8.879,1060,8.879,1061,8.879,1062,8.879,1063,8.879,1064,8.879,1065,8.879,1066,8.879,1067,8.879,1068,8.879,1069,8.879]],["title/1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html",[]],["body/1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html",[0,0.347,4,1.305,5,1.149,6,0.449,7,3.118,8,3.118,9,3.067,40,6.393,119,0.616]],["title/1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档",[1070,4.473]],["body/1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档",[0,0.233,4,1.306,5,1.154,6,0.451,7,3.133,8,3.133,9,3.081,22,7.555,28,7.555,29,5.978,30,7.555,31,7.555,32,7.555,33,7.555,34,7.555,35,4.683,36,7.555,37,7.555,119,0.618,1071,8.287,1072,8.287,1073,8.287,1074,8.287,1075,8.287,1076,8.287,1077,8.287]],["title/1.Haxe介绍/1.2.关于本文档/1.2.2.License.html",[]],["body/1.Haxe介绍/1.2.关于本文档/1.2.2.License.html",[0,0.325,4,1.174,272,5.236,370,4.582,1078,8.305,1079,8.305,1080,5.767,1081,7.378,1082,8.305]],["title/1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License",[1078,4.077]],["body/1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License",[4,1.013,272,5.264,370,4.606,1079,8.349,1080,5.797,1081,7.417,1082,8.349,1083,9.159,1084,9.159,1085,9.159,1086,9.159,1087,9.159]],["title/1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html",[]],["body/1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html",[0,0.345,4,1.325,6,0.437,9,2.99,81,0.669,88,2.941,119,0.77,374,2.997,654,3.644,666,2.883,674,4.243,693,5.09,694,2.848,923,4.763,1047,4.763,1056,5.8,1088,5.881,1089,5.881,1090,7.33,1091,5.881,1092,7.33,1093,5.361,1094,5.881,1095,5.361,1096,5.361,1097,5.881,1098,5.881,1099,4.388,1100,5.361,1101,5.881,1102,4.763,1103,5.881,1104,5.361,1105,5.881,1106,5.018,1107,5.361,1108,5.881,1109,5.881,1110,5.361,1111,5.361,1112,5.361,1113,5.881,1114,7.33,1115,5.881,1116,5.881,1117,5.361,1118,5.361,1119,4.763,1120,5.881,1121,5.881,1122,5.361,1123,5.881,1124,5.881]],["title/1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史",[1125,4.473]],["body/1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史",[4,1.305,6,0.438,9,2.997,81,0.588,88,2.948,118,3.099,119,0.771,654,3.656,666,2.893,693,5.101,694,2.858,923,4.779,979,3.5,1019,4.129,1047,4.779,1056,5.81,1090,5.379,1092,7.347,1093,5.379,1095,5.379,1096,5.379,1099,4.403,1100,5.379,1102,4.779,1104,5.379,1106,5.035,1107,5.379,1110,5.379,1111,5.379,1112,5.379,1114,7.347,1117,5.379,1118,5.379,1119,4.779,1122,5.379,1126,5.901,1127,5.901,1128,5.901,1129,5.901,1130,5.901,1131,5.901,1132,5.901,1133,5.901,1134,5.901,1135,5.901,1136,5.901,1137,5.901,1138,5.901,1139,5.901,1140,5.901,1141,5.901,1142,5.901,1143,5.901,1144,5.901,1145,5.901,1146,5.901,1147,5.901,1148,5.901,1149,5.901,1150,5.901,1151,5.901,1152,5.901,1153,5.901,1154,5.901,1155,5.901,1156,5.901,1157,5.901,1158,5.901,1159,5.901,1160,5.901,1161,5.901,1162,5.901,1163,5.901,1164,5.901,1165,5.901,1166,5.901,1167,5.901,1168,5.901,1169,5.901,1170,5.901,1171,5.901,1172,5.901,1173,5.901,1174,5.901,1175,5.901,1176,5.901,1177,5.901]],["title/1.Haxe介绍/1.3Hello World/1.3Hello World.html",[]],["body/1.Haxe介绍/1.3Hello World/1.3Hello World.html",[0,0.343,4,1.231,5,1.583,6,0.405,43,5.461,44,6.69,81,0.543,119,0.555,138,0.648,141,0.843,147,1.018,170,0.698,190,0.843,271,4.203,296,1.27,324,0.823,431,1.446,835,7.599,1178,6.78,1179,3.478,1180,5.699,1181,6.78,1182,7.438]],["title/1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World",[44,1.797,1178,2.643]],["body/1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World",[0,0.324,4,1.19,5,1.58,6,0.401,43,5.44,44,6.345,81,0.538,119,0.55,138,0.643,141,0.836,147,1.01,170,0.692,190,0.836,271,4.168,296,1.259,324,0.816,431,1.433,835,7.559,979,2.812,1179,3.448,1180,5.668,1181,6.723,1183,7.375,1184,5.161,1185,6.723,1186,7.375,1187,7.375,1188,7.375,1189,7.375,1190,7.375,1191,7.375,1192,7.375,1193,7.375,1194,7.375,1195,7.375,1196,7.375,1197,7.375,1198,7.375]],["title/10.标准库/10.1.字符串/10.1.2.Unicode.html",[]],["body/10.标准库/10.1.字符串/10.1.2.Unicode.html",[4,1.109,7,2.664,149,3.982,165,2.997,197,2.073,233,2.806,247,4.962,264,1.492,272,4.05,282,2.911,327,3.857,336,4.545,375,5.177,376,3.857,405,2.499,422,4.122,424,3.12,426,3.088,465,2.939,471,3.743,577,3.026,627,4.122,636,3.857,666,3.455,785,3.591,797,2.557,861,3.857,867,2.858,893,3.857,1199,6.424,1200,4.562,1201,3.857,1202,7.661,1203,5.707,1204,5.707,1205,6.344,1206,3.982,1207,5.707,1208,6.424,1209,6.424,1210,8.118,1211,4.122,1212,5.084,1213,5.258,1214,3.857,1215,4.673,1216,6.424,1217,5.707,1218,4.931,1219,4.279]],["title/10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode",[1199,4.077]],["body/10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode",[4,1.111,7,2.675,149,3.998,165,3.009,197,2.081,233,2.818,247,4.975,264,1.498,272,4.066,282,2.923,327,3.873,336,4.552,375,5.187,376,3.873,405,2.502,422,4.138,424,3.133,426,3.101,465,2.951,471,3.759,577,3.039,627,4.138,636,3.873,666,3.469,785,3.605,797,2.567,861,3.873,867,2.869,893,3.873,1200,4.581,1201,3.873,1202,7.671,1203,5.73,1204,5.73,1205,6.361,1206,3.998,1207,5.73,1208,6.45,1209,6.45,1210,8.133,1211,4.138,1212,5.104,1213,5.279,1214,3.873,1215,4.692,1216,6.45,1217,5.73,1218,4.951,1219,4.297]],["title/10.标准库/10.1.字符串/10.1.1.字符串字面值.html",[]],["body/10.标准库/10.1.字符串/10.1.1.字符串字面值.html",[0,0.314,6,0.429,51,1,81,0.418,82,0.95,84,2.082,119,0.589,138,0.499,233,2.281,247,3.134,250,2.903,251,0.869,261,1.578,300,2.129,324,0.633,332,2.74,405,1.802,431,1.113,440,2.521,461,4.273,462,4.946,463,7.624,606,1.338,615,3.797,618,3.61,641,2.509,832,3.134,1202,6.815,1204,7.318,1205,5.524,1218,5.524,1220,5.726,1221,4.795,1222,7.197,1223,3.01,1224,3.477,1225,9.314,1226,4.637,1227,8.878,1228,2.322,1229,5.22,1230,7.197,1231,5.22,1232,4.618,1233,5.22,1234,5.22,1235,2.808,1236,5.22,1237,5.22,1238,4.007,1239,5.22,1240,6.394,1241,5.22,1242,5.22,1243,5.22,1244,5.22,1245,7.197,1246,6.119,1247,5.22,1248,8.878,1249,7.197,1250,7.197,1251,7.197,1252,5.22,1253,5.22,1254,5.22,1255,5.22,1256,5.22,1257,5.22,1258,5.22,1259,5.22,1260,5.22,1261,5.22,1262,5.22]],["title/10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值",[1263,4.473]],["body/10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值",[0,0.315,6,0.43,51,1.003,81,0.419,82,0.952,84,2.087,119,0.591,138,0.501,233,2.288,247,3.145,250,2.907,251,0.872,261,1.583,300,2.136,324,0.635,332,2.749,405,1.806,431,1.117,440,1.835,461,4.287,462,4.954,463,7.633,606,1.342,615,3.81,618,3.618,641,2.518,832,3.145,1202,6.825,1204,7.33,1205,5.537,1218,5.537,1221,4.805,1222,7.213,1223,3.017,1224,3.489,1225,9.325,1226,4.653,1227,8.891,1228,2.33,1229,5.237,1230,7.213,1231,5.237,1232,4.628,1233,5.237,1234,5.237,1235,2.817,1236,5.237,1237,5.237,1238,4.02,1239,5.237,1240,4.653,1241,5.237,1242,5.237,1243,5.237,1244,5.237,1245,7.213,1246,6.133,1247,5.237,1248,8.891,1249,7.213,1250,7.213,1251,7.213,1252,5.237,1253,5.237,1254,5.237,1255,5.237,1256,5.237,1257,5.237,1258,5.237,1259,5.237,1260,5.237,1261,5.237,1262,5.237,1264,5.745,1265,4.453]],["title/10.标准库/10.1.字符串/10.1.字符串.html",[]],["body/10.标准库/10.1.字符串/10.1.字符串.html",[0,0.339,6,0.483,7,3.952,52,6.882,197,2.612,405,2.386,797,3.222,1246,6.882,1266,5.888]],["title/10.标准库/10.1.字符串/10.1.字符串.html#10-1-字符串",[1267,4.473]],["body/10.标准库/10.1.字符串/10.1.字符串.html#10-1-字符串",[0,0.269,405,2.182,1268,5.495,1269,9.561]],["title/10.标准库/10.1.字符串/10.1.字符串.html#字符编码",[1270,4.473]],["body/10.标准库/10.1.字符串/10.1.字符串.html#字符编码",[0,0.257,6,0.498,7,4.025,197,2.694,405,2.09,522,6.232,797,3.323,1266,6.074,1271,9.159,1272,6.607,1273,9.159]],["title/10.标准库/10.1.字符串/10.1.3.Encoding.html",[]],["body/10.标准库/10.1.字符串/10.1.3.Encoding.html",[0,0.15,4,0.834,6,0.291,9,1.992,81,0.391,88,2.757,119,0.4,138,0.467,149,3.027,165,2.278,197,1.576,250,1.597,261,1.476,264,1.846,272,5.011,292,3.375,327,2.932,332,2.563,336,4.282,343,2.845,374,2.729,376,2.932,385,2.659,405,1.99,426,2.347,450,1.08,609,3.265,630,2.397,654,3.319,666,2.626,689,3.552,693,3.391,694,2.594,697,5.295,785,2.729,796,3.552,797,2.735,846,3.748,992,4.338,1201,2.932,1202,5.273,1203,4.338,1205,5.273,1207,4.338,1210,4.338,1211,3.133,1217,4.338,1218,3.748,1246,4.152,1274,4.883,1275,9.731,1276,6.87,1277,8.075,1278,3.748,1279,4.338,1280,3.391,1281,4.883,1282,3.997,1283,3.748,1284,4.883,1285,11.078,1286,3.997,1287,4.883,1288,4.883,1289,6.87,1290,4.883,1291,4.883,1292,4.883,1293,4.883,1294,4.883]],["title/10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding",[1274,4.077]],["body/10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding",[0,0.151,4,0.835,6,0.292,9,1.998,81,0.392,88,2.763,119,0.401,138,0.468,149,3.036,165,2.285,197,1.58,250,1.602,261,1.481,264,1.849,272,5.02,292,3.379,327,2.941,332,2.571,336,4.287,343,2.854,374,2.738,376,2.941,385,2.668,405,1.993,426,2.355,450,1.082,609,3.267,630,2.404,654,3.329,666,2.634,689,3.563,693,3.401,694,2.602,697,5.304,785,2.738,796,3.563,797,2.741,846,3.76,992,4.351,1201,2.941,1202,5.285,1203,4.351,1205,5.285,1207,4.351,1210,4.351,1211,3.143,1217,4.351,1218,3.76,1246,4.165,1275,9.737,1276,6.885,1277,8.084,1278,3.76,1279,4.351,1280,3.401,1281,4.898,1282,4.009,1283,3.76,1284,4.898,1285,11.081,1286,4.009,1287,4.898,1288,4.898,1289,6.885,1290,4.898,1291,4.898,1292,4.898,1293,4.898,1294,4.898]],["title/10.标准库/10.10.Json/10.10.1.解析JSON.html",[]],["body/10.标准库/10.10.Json/10.10.1.解析JSON.html",[0,0.341,4,1.039,5,1.399,6,0.452,51,1.078,66,3.749,81,0.606,82,1.3,119,0.62,121,2.92,138,0.724,141,0.942,147,1.137,170,0.943,190,0.942,235,2.545,250,1.84,251,0.936,283,2.527,324,0.919,341,4.093,354,2.813,405,2.293,431,1.826,436,1.03,439,3.015,450,0.885,481,1.241,605,1.206,606,1.442,607,1.628,608,1.712,609,1.804,610,2,819,6.729,1295,6.173,1296,7.575,1297,6.2,1298,7.009,1299,7.575,1300,7.575,1301,6.729,1302,5.627,1303,5.627]],["title/10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON",[1304,4.473]],["body/10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON",[0,0.343,4,1.019,5,1.378,6,0.44,51,1.038,66,3.608,81,0.591,82,1.285,119,0.604,121,2.81,138,0.706,141,0.918,147,1.108,170,0.864,190,0.918,235,2.48,250,1.771,251,0.901,283,2.432,324,0.895,354,2.741,405,2.258,431,1.79,436,1.004,439,2.938,450,0.851,481,1.195,522,4.043,605,1.161,606,1.388,607,1.567,608,1.648,609,1.736,610,1.925,819,6.557,1265,6.276,1296,5.416,1297,4.433,1298,6.873,1299,7.381,1300,7.381,1301,6.557,1302,5.416,1303,5.416,1305,5.416,1306,5.941,1307,5.941,1308,5.941,1309,5.941,1310,5.941,1311,5.941,1312,5.941,1313,5.941]],["title/10.标准库/10.10.Json/10.10.2.编码JSON.html",[]],["body/10.标准库/10.10.Json/10.10.2.编码JSON.html",[0,0.336,4,0.904,5,1.385,6,0.444,66,4.962,81,0.596,82,1.197,119,0.61,138,0.712,141,0.926,147,1.118,170,0.933,190,0.926,324,0.904,431,1.588,436,1.013,439,3.609,1297,6.097,1298,6.097,1314,8.171,1315,7.448,1316,7.448,1317,8.171]],["title/10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON",[1318,4.473]],["body/10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON",[0,0.335,4,0.891,5,1.373,6,0.438,66,4.893,81,0.588,82,1.187,119,0.601,138,0.702,141,0.913,147,1.103,170,0.925,190,0.913,324,0.891,431,1.566,436,0.999,439,3.579,522,5.483,1297,6.012,1298,6.012,1315,7.345,1316,7.345,1319,8.057,1320,8.057,1321,8.057,1322,8.057]],["title/10.标准库/10.10.Json/10.10.3.实现细节.html",[]],["body/10.标准库/10.10.Json/10.10.3.实现细节.html",[0,0.321,4,0.967,9,3.252,66,6.292,654,5.419,694,4.235,797,3.173,906,5.504,1323,8.745,1324,8.39,1325,7.972,1326,8.745,1327,8.745,1328,8.745,1329,7.972]],["title/10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节",[1330,4.473]],["body/10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节",[9,3.268,66,5.337,797,3.189,906,5.52,1324,7.118,1325,8.012,1329,8.012,1331,8.789,1332,8.789,1333,8.789,1334,8.789,1335,8.789,1336,8.789,1337,8.789,1338,8.789,1339,8.789,1340,8.789,1341,8.789,1342,8.789]],["title/10.标准库/10.10.Json/10.10.Json.html",[]],["body/10.标准库/10.10.Json/10.10.Json.html",[0,0.32,4,1.04,66,5.712,1324,7.617,1343,8.574]],["title/10.标准库/10.10.Json/10.10.Json.html#10-10-Json",[1343,4.077]],["body/10.标准库/10.10.Json/10.10.Json.html#10-10-Json",[4,1.046,66,5.743,1324,7.659,1344,7.33,1345,9.457,1346,9.457]],["title/10.标准库/10.12.Sys/10.12.1.Threading.html",[]],["body/10.标准库/10.12.Sys/10.12.1.Threading.html",[0,0.324,4,0.932,5,1.322,6,0.459,51,1.101,81,0.46,119,0.629,138,0.55,141,0.715,144,2,147,0.863,165,2.682,170,0.592,186,2.184,190,0.955,197,1.855,251,0.957,261,1.738,294,3.092,296,1.077,300,2.345,324,0.698,326,3.564,332,3.018,336,2.709,367,3.172,378,3.35,390,4.182,392,3.172,426,2.764,428,3.689,431,1.226,436,0.782,450,0.904,471,3.35,481,1.268,577,2.709,605,1.233,606,1.474,627,3.689,632,4.413,785,3.214,788,3.257,796,4.182,797,3.446,871,3.83,1179,2.949,1200,4.083,1206,4.764,1215,4.182,1219,3.83,1347,5.749,1348,3.131,1349,8.988,1350,4.614,1351,7.685,1352,4.413,1353,5.749,1354,5.749,1355,7.685,1356,5.749,1357,4.706,1358,5.749,1359,5.107,1360,5.107,1361,5.749,1362,5.749,1363,5.749,1364,5.749,1365,5.749,1366,5.749]],["title/10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading",[1347,4.077]],["body/10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading",[0,0.336,4,0.919,5,1.308,6,0.452,51,1.078,81,0.451,119,0.62,138,0.538,141,0.7,144,1.957,147,0.845,165,2.625,170,0.579,186,2.137,190,0.942,197,1.816,251,0.936,261,1.701,294,3.026,296,1.054,300,2.295,324,0.683,326,3.488,332,2.954,336,2.651,367,3.104,378,3.279,390,4.093,392,3.104,426,2.705,428,3.61,431,1.2,436,0.765,450,0.885,471,3.279,481,1.241,577,2.651,605,1.206,606,1.442,627,3.61,632,4.319,785,3.145,788,3.188,796,4.093,797,3.408,871,3.749,1179,2.886,1200,3.996,1206,4.696,1215,4.093,1219,3.749,1348,3.065,1349,8.939,1350,4.548,1351,7.575,1352,4.319,1353,5.627,1354,5.627,1355,7.575,1356,5.627,1357,4.606,1358,5.627,1359,4.999,1360,4.999,1361,5.627,1362,5.627,1363,5.627,1364,5.627,1365,5.627,1366,5.627]],["title/10.标准库/10.11.InputOutput/10.11.InputOutput.html",[]],["body/10.标准库/10.11.InputOutput/10.11.InputOutput.html",[0,0.272,1367,8.812]],["title/10.标准库/10.11.InputOutput/10.11.InputOutput.html#10-11-Input-Output",[1367,4.077]],["body/10.标准库/10.11.InputOutput/10.11.InputOutput.html#10-11-Input-Output",[1368,9.721]],["title/10.标准库/10.12.Sys/10.12.Sys.html",[]],["body/10.标准库/10.12.Sys/10.12.Sys.html",[4,1.07,9,3.596,119,0.582,141,0.884,149,4.41,186,2.702,191,2.702,209,3.194,294,3.827,329,3.735,332,3.735,336,4.717,371,5.461,375,4.994,384,4.863,385,3.875,390,7.283,630,3.492,693,4.94,694,3.78,788,4.031,797,3.813,865,6.32,895,5.824,931,4.94,936,4.94,1349,6.32,1369,7.115,1370,7.115,1371,7.115,1372,5.824,1373,7.115,1374,6.32]],["title/10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys",[1369,4.077]],["body/10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys",[4,1.072,9,3.606,119,0.585,141,0.888,149,4.43,186,2.714,191,2.714,209,3.209,294,3.844,329,3.752,332,3.752,336,4.724,371,5.486,375,5.008,384,4.877,385,3.892,390,6.982,630,3.508,693,4.962,694,3.797,788,4.049,797,3.821,865,6.349,895,5.85,931,4.962,936,4.962,1349,6.349,1370,7.147,1371,7.147,1372,5.85,1373,7.147,1374,6.349,1375,7.84]],["title/10.标准库/10.13.远程处理/10.13.1.远程连接.html",[]],["body/10.标准库/10.13.远程处理/10.13.1.远程连接.html",[0,0.346,4,1.052,5,1.135,6,0.376,9,2.569,51,0.828,62,3.842,64,2.45,81,0.504,82,0.831,84,2.149,119,0.516,138,0.602,141,0.783,147,0.946,170,0.648,190,1.078,191,1.642,251,0.72,297,1.703,324,0.764,343,2.52,350,2.304,351,3.125,387,2.939,401,2.45,431,1.584,436,0.856,440,2.206,450,0.99,481,0.954,605,0.927,606,1.108,607,1.251,608,1.316,609,1.386,610,1.537,666,3.387,694,4.608,797,3.248,995,7.696,1376,4.744,1377,5.404,1378,5.895,1379,4.324,1380,4.324,1381,4.744,1382,4.324,1383,6.298,1384,4.324,1385,4.324,1386,4.324,1387,4.324,1388,4.324,1389,4.744,1390,4.324,1391,4.324,1392,4.744,1393,4.324,1394,4.744,1395,4.324,1396,4.324,1397,4.744,1398,4.744,1399,4.324,1400,4.744,1401,4.744,1402,4.324,1403,4.324,1404,4.324,1405,4.324,1406,3.319,1407,3.319,1408,3.842,1409,4.324,1410,4.324,1411,4.324,1412,4.324,1413,4.324,1414,6.298,1415,2.123,1416,4.324,1417,4.324,1418,4.744,1419,3.842,1420,4.744,1421,4.744,1422,4.324]],["title/10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接",[1423,4.473]],["body/10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接",[1377,6.204,1378,7.983,1379,8.528,1424,9.356,1425,9.356,1426,9.356,1427,9.356,1428,9.356]],["title/10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接",[1429,4.473]],["body/10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接",[4,0.833,9,2.802,450,1.08,666,3.694,694,4.582,722,6.024,779,4.878,979,2.873,1378,6.429,1380,6.868,1382,6.868,1383,8.624,1384,6.868,1385,6.868,1386,6.868,1387,6.868,1388,6.868,1390,6.868,1391,6.868,1393,6.868,1395,6.868,1396,6.868,1399,6.868,1430,7.535,1431,7.535,1432,7.535,1433,7.535,1434,7.535,1435,7.535,1436,7.535,1437,7.535,1438,7.535,1439,7.535,1440,7.535,1441,7.535,1442,7.535,1443,7.535,1444,7.535,1445,7.535,1446,7.535,1447,7.535,1448,7.535,1449,7.535,1450,7.535,1451,7.535,1452,7.535,1453,7.535]],["title/10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文",[1454,4.473]],["body/10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文",[0,0.344,4,0.77,5,0.97,6,0.379,51,1.216,81,0.508,82,0.838,84,2.628,119,0.52,138,0.607,141,0.789,147,0.953,170,0.653,190,1.129,251,1.056,297,2.218,324,0.77,350,3,351,4.069,431,1.353,436,0.863,440,2.223,450,0.998,481,1.4,605,1.361,606,1.627,607,1.836,608,1.931,609,2.034,610,2.255,722,3.753,995,8.165,1377,4.617,1402,6.347,1403,6.347,1404,6.347,1405,6.347,1406,4.872,1407,4.872,1408,5.638,1455,6.962,1456,6.962]],["title/10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接",[1457,4.473]],["body/10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接",[0,0.333,5,1.307,6,0.405,81,0.543,82,0.895,118,2.86,119,0.555,138,0.648,141,0.843,147,1.018,170,0.698,190,1.063,191,2.575,324,0.823,343,3.951,401,3.842,431,1.446,436,0.922,666,3.647,995,7.273,1184,5.205,1265,5.765,1409,6.78,1410,6.78,1411,6.78,1412,6.78,1413,6.78,1414,6.78,1416,6.78,1417,6.78,1419,6.024,1422,6.78,1458,7.438,1459,7.438,1460,7.438,1461,7.438,1462,7.438,1463,7.438,1464,7.438,1465,7.438,1466,7.438,1467,7.438,1468,7.438,1469,7.438]],["title/10.标准库/10.13.远程处理/10.13.1.远程连接.html#错误处理",[1470,4.473]],["body/10.标准库/10.13.远程处理/10.13.1.远程连接.html#错误处理",[1471,9.667,1472,9.667]],["title/10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化",[1473,4.473]],["body/10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化",[4,1.04,1377,6.238,1474,9.406,1475,9.406,1476,9.406,1477,9.406,1478,9.406]],["title/10.标准库/10.13.远程处理/10.13.远程处理.html",[]],["body/10.标准库/10.13.远程处理/10.13.远程处理.html",[0,0.304,4,1.196,70,8.027,797,3.413,1377,6.238]],["title/10.标准库/10.13.远程处理/10.13.远程处理.html#10-13-远程处理",[1479,4.473]],["body/10.标准库/10.13.远程处理/10.13.远程处理.html#10-13-远程处理",[4,1.046,1377,6.272,1480,9.457,1481,9.457,1482,9.457,1483,9.457]],["title/10.标准库/10.13.远程处理/10.13.2.实现细节.html",[]],["body/10.标准库/10.13.远程处理/10.13.2.实现细节.html",[0,0.342,4,1.128,6,0.52,9,2.38,81,0.621,119,0.635,138,0.742,146,2.073,186,3.53,261,2.926,350,3.4,403,1.362,426,4.192,440,2.044,493,4.94,694,4.123,1377,5.645,1408,5.183,1484,6.4,1485,6.4,1486,5.834,1487,5.834,1488,6.4,1489,5.388,1490,5.183,1491,5.834,1492,8.46,1493,5.834,1494,5.834,1495,5.834,1496,6.894,1497,9.677,1498,7.76,1499,4.775,1500,5.183,1501,5.183]],["title/10.标准库/10.13.远程处理/10.13.2.实现细节.html#10-13-2-实现细节",[1502,4.473]],["body/10.标准库/10.13.远程处理/10.13.2.实现细节.html#10-13-2-实现细节",[]],["title/10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节",[9,1.078,1503,2.9]],["body/10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节",[0,0.272,4,1.07,6,0.526,81,0.57,119,0.582,138,0.68,146,2.528,186,3.638,261,2.896,350,3.225,426,4.605,493,5.427,1272,5.63,1377,5.176,1486,7.115,1487,7.115,1489,4.94,1490,6.32,1491,7.115,1492,8.513,1493,7.115,1494,7.115,1504,7.805,1505,7.805,1506,7.805,1507,7.805,1508,7.805,1509,7.805,1510,7.805,1511,7.805]],["title/10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节",[1512,4.473]],["body/10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节",[0,0.335,4,1.085,6,0.434,81,0.583,119,0.596,138,0.696,186,2.764,261,2.703,350,3.27,694,3.867,1408,6.465,1492,7.601,1495,7.278,1496,7.942,1497,10.359,1498,8.939,1499,5.957,1500,6.465,1513,7.984,1514,7.984,1515,7.984,1516,7.984]],["title/10.标准库/10.13.远程处理/10.13.2.实现细节.html#不确保参数类型",[1517,4.473]],["body/10.标准库/10.13.远程处理/10.13.2.实现细节.html#不确保参数类型",[1501,7.743,1518,9.561,1519,9.561,1520,9.561]],["title/10.标准库/10.14.单元测试/10.14.单元测试.html",[]],["body/10.标准库/10.14.单元测试/10.14.单元测试.html",[0,0.346,4,0.996,5,0.972,6,0.585,8,1.818,51,1.219,71,4.104,81,0.751,82,0.988,84,1.84,119,0.768,138,0.785,141,1.021,147,0.658,170,0.77,179,2.292,190,1.084,250,1.434,251,1.059,285,3.027,287,2.152,293,2.593,296,1.538,300,1.788,324,0.772,405,1.098,436,0.865,440,2.228,445,3.707,450,1,605,0.94,788,3.604,797,1.745,869,3.114,1235,2.358,1521,5.955,1522,5.955,1523,4.13,1524,7.296,1525,5.409,1526,7.747,1527,4.384,1528,7.296,1529,4.384,1530,4.384,1531,4.384,1532,4.384,1533,3.189,1534,2.718,1535,3.589,1536,4.384,1537,4.809,1538,4.384,1539,4.384,1540,6.651,1541,6.361,1542,4.384,1543,4.384,1544,4.384,1545,2.358,1546,4.384]],["title/10.标准库/10.14.单元测试/10.14.单元测试.html#10-14-单元测试",[1547,4.473]],["body/10.标准库/10.14.单元测试/10.14.单元测试.html#10-14-单元测试",[1521,8.204,1548,9.614,1549,9.614]],["title/10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例",[1550,4.473]],["body/10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例",[0,0.338,4,0.934,6,0.46,81,0.617,119,0.63,138,0.737,141,0.957,170,0.793,190,0.957,285,3.665,296,1.443,1522,7.209,1524,6.842,1525,6.548,1526,6.842,1527,7.701,1528,6.842,1551,8.448,1552,8.448,1553,8.448]],["title/10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试",[1554,4.473]],["body/10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试",[0,0.332,4,0.802,5,1.286,6,0.582,8,2.742,51,1.266,81,0.674,82,0.873,84,2.435,119,0.689,138,0.632,141,1.047,147,0.993,170,0.68,190,0.822,250,2.162,251,1.1,324,0.802,436,0.899,445,4.906,450,1.039,788,4.769,869,4.695,1235,3.556,1523,4.644,1524,7.478,1526,7.478,1529,6.611,1530,6.611,1531,6.611,1532,6.611,1533,4.809,1534,4.098,1535,5.411,1555,7.252,1556,7.252,1557,7.252,1558,7.252,1559,7.252,1560,7.252]],["title/10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数",[1561,4.473]],["body/10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数",[287,4.077,300,3.388,1522,7.775,1536,8.305,1538,8.305,1539,8.305,1562,9.111,1563,9.111,1564,9.111,1565,10.613,1566,9.111,1567,6.375]],["title/10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸",[1568,4.473]],["body/10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸",[0,0.34,4,0.823,6,0.405,51,1.299,81,0.543,82,0.895,118,2.86,119,0.555,138,0.648,141,0.843,170,0.698,179,2.87,190,1.063,251,1.128,285,3.227,293,4.01,296,1.602,324,0.823,405,1.698,436,0.922,440,2.997,450,1.066,605,1.454,979,2.836,1524,6.024,1525,5.765,1526,6.024,1528,6.024,1540,8.325,1541,8.554,1542,6.78,1569,7.438,1570,6.78,1571,7.438,1572,7.438]],["title/10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象",[1573,4.473]],["body/10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象",[0,0.337,6,0.584,81,0.784,82,0.988,119,0.802,138,0.716,190,0.93,296,1.402,1521,7.005,1528,6.648,1543,7.483,1544,7.483,1545,4.025,1546,7.483,1574,8.209,1575,8.209,1576,8.209,1577,8.209,1578,8.209,1579,8.209]],["title/10.标准库/10.2.数据结构/10.2.1.数组.html",[]],["body/10.标准库/10.2.数据结构/10.2.1.数组.html",[0,0.347,4,0.946,5,1.337,6,0.588,9,1.606,51,1.599,81,0.746,82,1.258,84,1.139,91,2.441,119,0.742,138,0.746,141,0.874,147,1.056,157,1.508,170,0.803,190,0.97,197,1.271,250,2.55,251,1.17,261,1.191,283,1.768,287,1.933,296,1.317,300,1.606,324,0.946,353,3.224,354,2.896,423,3.499,431,1.499,436,1.061,450,1.226,500,2.624,605,0.844,797,2.34,1266,4.276,1415,1.933,1580,3.687,1581,3.499,1582,4.32,1583,3.938,1584,4.32,1585,3.687,1586,8.057,1587,5.878,1588,5.878,1589,6.83,1590,3.938,1591,2.527,1592,6.248,1593,3.938,1594,3.938,1595,3.938,1596,3.349,1597,5.222,1598,5.878,1599,2.865,1600,3.938,1601,3.938,1602,3.938,1603,4.32]],["title/10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组",[1604,4.473]],["body/10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组",[0,0.347,4,0.834,5,1.318,6,0.582,9,1.545,35,2.348,51,1.572,81,0.738,82,1.245,84,1.096,119,0.706,138,0.732,141,0.854,147,1.032,157,1.473,170,0.787,190,0.951,197,1.222,250,2.501,251,1.143,261,1.145,283,1.701,287,1.859,296,1.287,300,1.545,324,0.928,354,2.84,431,1.465,436,1.04,450,1.203,500,2.523,605,0.812,722,4.063,797,1.508,1266,4.153,1415,1.859,1586,7.953,1587,5.709,1588,5.709,1589,6.717,1590,3.788,1591,2.43,1592,6.104,1593,3.788,1594,3.788,1595,3.788,1597,5.072,1598,5.709,1599,2.756,1600,3.788,1601,3.788,1602,3.788,1605,4.155,1606,4.155,1607,4.155,1608,4.155,1609,4.155,1610,4.155,1611,4.155,1612,4.155,1613,4.155,1614,4.155,1615,4.155,1616,4.155,1617,4.155,1618,4.155,1619,4.155,1620,4.155,1621,4.155,1622,4.155,1623,4.155,1624,4.155,1625,3.365,1626,4.155,1627,4.155,1628,4.155,1629,4.155]],["title/10.标准库/10.2.数据结构/10.2.2.向量.html",[]],["body/10.标准库/10.2.数据结构/10.2.2.向量.html",[0,0.335,4,0.819,5,1.303,6,0.403,51,1.634,81,0.541,82,0.891,84,1.953,119,0.553,138,0.646,141,0.839,147,1.014,170,0.963,190,0.839,250,3.058,251,1.556,324,0.819,431,1.994,436,0.918,450,1.061,481,1.489,605,1.448,606,1.731,797,2.688,1630,6.32,1631,7.406,1632,7.406,1633,9.826,1634,6.752,1635,6.752,1636,6.752,1637,6.752,1638,7.406,1639,7.406]],["title/10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量",[1640,4.473]],["body/10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量",[0,0.341,4,0.802,5,1.286,6,0.394,51,1.613,81,0.529,82,0.873,84,1.913,119,0.541,138,0.632,141,0.822,147,0.993,170,0.953,190,0.822,250,3.029,251,1.541,324,0.802,431,1.975,436,0.899,450,1.039,481,1.458,605,1.417,606,1.695,797,2.632,1633,9.751,1634,6.611,1635,6.611,1636,6.611,1637,6.611,1641,7.252,1642,7.252,1643,7.252,1644,7.252,1645,7.252]],["title/10.标准库/10.2.数据结构/10.2.3.列表.html",[]],["body/10.标准库/10.2.数据结构/10.2.3.列表.html",[0,0.34,5,1.339,6,0.523,81,0.702,82,0.931,84,2.04,119,0.718,138,0.838,141,0.877,147,1.059,170,0.902,190,0.877,250,3.12,296,1.321,324,0.855,403,1.647,431,1.503,436,0.959,450,1.109,786,4.548,797,2.807,1646,6.601,1647,8.767,1648,6.264,1649,7.051]],["title/10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表",[1650,4.473]],["body/10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表",[0,0.332,5,1.328,6,0.519,81,0.696,82,0.919,84,2.013,119,0.712,138,0.832,141,0.865,147,1.045,170,0.895,190,0.865,250,3.101,296,1.303,324,0.844,403,1.625,431,1.484,436,0.946,450,1.094,786,3.61,797,2.77,1647,8.695,1648,6.182,1649,6.959,1651,7.634,1652,7.634,1653,7.634,1654,7.634,1655,7.634,1656,7.634,1657,7.634,1658,7.634,1659,7.634]],["title/10.标准库/10.2.数据结构/10.2.5.Map.html",[]],["body/10.标准库/10.2.数据结构/10.2.5.Map.html",[0,0.345,5,0.879,6,0.412,51,0.733,81,0.553,82,1.143,84,1.106,119,0.471,138,0.366,141,0.475,146,1.359,147,0.574,157,1.233,170,0.394,172,2.371,179,2.651,186,1.453,190,0.475,203,1.573,251,0.636,264,1.785,282,1.733,296,0.716,324,0.464,354,2.566,355,2.782,403,1.614,405,1.44,420,3.13,424,2.793,425,3.758,431,1.639,436,0.52,450,0.601,477,5.774,481,0.844,488,1.802,508,2.057,605,0.82,606,0.98,607,1.106,608,1.164,609,1.226,610,1.359,641,2.764,785,2.138,797,1.522,856,3.13,867,2.558,1221,2.548,1228,3.074,1232,3.69,1238,2.936,1240,3.398,1266,2.782,1415,1.877,1660,3.824,1661,1.51,1662,1.56,1663,1.671,1664,1.733,1665,1.918,1666,1.962,1667,2.057,1668,2.167,1669,2.167,1670,2.454,1671,2.656,1672,2.782,1673,2.548,1674,2.782,1675,2.782,1676,2.782,1677,3.13,1678,3.398,1679,3.824,1680,3.824,1681,3.824,1682,2.936,1683,3.824,1684,3.824,1685,3.824,1686,3.824,1687,3.824,1688,3.824,1689,2.296,1690,6.687,1691,3.824,1692,3.824,1693,3.824,1694,3.824,1695,3.824,1696,3.398,1697,3.824,1698,4.195,1699,4.195,1700,2.936,1701,6.911,1702,6.291,1703,6.911,1704,5.75,1705,3.824,1706,5.75,1707,2.296,1708,5.75,1709,6.911,1710,2.855,1711,3.13,1712,3.13,1713,3.824,1714,3.13,1715,4.195]],["title/10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map",[1660,4.077]],["body/10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map",[0,0.345,5,0.868,6,0.408,51,0.72,81,0.548,82,1.136,84,1.088,119,0.465,138,0.36,141,0.468,146,1.337,147,0.565,157,1.218,170,0.387,172,2.331,179,2.634,186,1.428,190,0.468,203,1.547,251,0.626,264,1.77,282,1.705,296,0.704,324,0.456,354,2.54,355,2.736,403,1.598,405,1.422,420,3.079,424,2.758,425,3.711,431,1.625,436,0.511,450,0.591,477,5.483,481,0.83,488,1.772,508,2.023,605,0.806,606,0.964,607,1.088,608,1.144,609,1.206,610,1.337,641,2.73,722,4.046,785,2.102,797,1.497,856,3.079,867,2.526,1221,2.505,1228,3.043,1232,3.644,1238,2.887,1240,3.341,1266,2.736,1415,1.846,1661,1.485,1662,1.534,1663,1.643,1664,1.705,1665,1.886,1666,1.929,1667,2.023,1668,2.131,1669,2.131,1670,2.413,1671,2.612,1672,2.736,1673,2.505,1674,2.736,1675,2.736,1676,2.736,1677,3.079,1678,3.341,1679,3.761,1680,3.761,1681,3.761,1682,2.887,1683,3.761,1684,3.761,1685,3.761,1686,3.761,1687,3.761,1688,3.761,1689,2.258,1690,6.659,1691,3.761,1692,3.761,1693,3.761,1694,3.761,1695,3.761,1696,3.341,1697,3.761,1700,2.887,1701,6.841,1702,6.238,1703,6.841,1704,5.679,1705,3.761,1706,5.679,1707,2.258,1708,5.679,1709,6.841,1710,2.808,1711,3.079,1712,3.079,1713,3.761,1714,3.079,1716,4.126,1717,4.126,1718,4.126,1719,4.126,1720,4.126,1721,4.126,1722,4.126,1723,4.126,1724,4.126,1725,3.341]],["title/10.标准库/10.2.数据结构/10.2.4.GenericStack.html",[]],["body/10.标准库/10.2.数据结构/10.2.4.GenericStack.html",[0,0.335,4,1.013,5,1.276,6,0.498,51,1.251,81,0.737,82,0.862,84,1.889,119,0.754,138,0.881,141,0.812,147,0.98,159,3.464,170,0.86,190,0.812,250,2.731,251,1.087,289,2.558,296,1.223,324,0.792,403,1.525,431,1.781,436,0.888,450,1.027,605,1.4,797,2.599,1648,5.801,1726,6.529,1727,7.163,1728,6.529,1729,8.352,1730,8.623,1731,6.529,1732,6.529,1733,8.352,1734,7.163]],["title/10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack",[1726,4.077]],["body/10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack",[0,0.331,5,1.266,6,0.494,35,3.998,51,1.236,81,0.663,82,0.852,84,1.866,119,0.678,138,0.876,141,0.802,147,0.969,159,3.437,170,0.853,190,0.802,250,2.71,251,1.073,289,2.527,296,1.208,324,0.783,403,1.506,431,1.767,436,0.877,450,1.014,605,1.383,797,2.567,1570,6.45,1625,5.73,1648,5.73,1725,5.73,1728,6.45,1729,8.286,1730,7.361,1731,6.45,1732,6.45,1733,8.286,1735,5.279,1736,7.076,1737,7.076,1738,7.076,1739,7.076,1740,7.076,1741,7.076,1742,7.076,1743,7.076,1744,7.076]],["title/10.标准库/10.2.数据结构/10.2.数据结构.html",[]],["body/10.标准库/10.2.数据结构/10.2.数据结构.html",[0,0.324,53,7.734,477,4.815,1580,7.734,1630,7.734,1646,7.734,1730,7.34,1745,8.262,1746,8.262,1747,8.262,1748,4.746]],["title/10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构",[1749,4.473]],["body/10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构",[477,4.84,1580,7.775,1630,7.775,1646,7.775,1730,7.378,1745,8.305,1746,8.305,1747,8.305,1748,4.771,1750,7.062,1751,9.111,1752,9.111,1753,9.111]],["title/10.标准库/10.2.数据结构/10.2.6.Option.html",[]],["body/10.标准库/10.2.数据结构/10.2.6.Option.html",[0,0.334,4,0.746,5,1.228,6,0.479,51,1.178,81,0.643,82,0.812,119,0.658,138,0.768,141,0.765,147,1.207,170,0.633,179,1.883,190,0.999,246,2.663,251,1.023,284,2.429,289,2.409,296,1.152,297,2.173,298,2.736,324,0.746,401,4.552,405,1.54,431,1.713,436,0.836,439,2.448,450,0.967,481,1.357,605,1.319,606,1.576,607,1.779,608,1.871,609,1.971,610,2.186,1228,3.574,1535,5.034,1661,2.429,1662,2.509,1663,2.687,1664,2.787,1748,5.141,1754,6.15,1755,6.15,1756,7.767,1757,6.15,1758,8.035,1759,6.15,1760,4.721,1761,5.034]],["title/10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option",[1754,4.077]],["body/10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option",[0,0.343,5,1.191,6,0.465,51,1.126,81,0.624,82,0.776,119,0.638,138,0.746,141,0.731,147,1.171,170,0.605,179,1.8,190,0.969,246,2.585,251,0.978,284,2.321,289,2.302,296,1.101,297,2.109,298,2.615,324,0.713,401,4.418,405,1.471,431,1.663,436,0.799,439,2.339,450,0.924,481,1.296,605,1.26,606,1.506,607,1.7,608,1.788,609,1.884,610,2.088,1228,3.469,1535,4.811,1661,2.321,1662,2.397,1663,2.568,1664,2.664,1735,4.811,1748,5.028,1755,5.877,1756,7.63,1757,5.877,1758,7.798,1759,5.877,1760,4.511,1761,4.811,1762,6.447,1763,6.447,1764,6.447]],["title/10.标准库/10.3.正则表达式/10.3.2.分组.html",[]],["body/10.标准库/10.3.正则表达式/10.3.2.分组.html",[0,0.343,5,1.452,6,0.52,51,1.339,81,0.698,82,1.211,88,2.009,119,0.66,138,0.834,141,1.002,147,1.21,170,0.897,190,1.002,239,3.335,250,2.634,251,1.451,300,2.042,324,0.977,350,1.831,431,2.079,436,1.096,450,1.267,484,2.407,846,5.366,1056,4.854,1223,2.924,1235,4.333,1669,3.961,1765,5.492,1766,5.006,1767,5.219,1768,6.211,1769,4.447,1770,6.211,1771,7.509,1772,5.492,1773,6.991,1774,5.006,1775,2.762,1776,5.006,1777,3.476,1778,5.006,1779,6.991,1780,6.991,1781,5.006]],["title/10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组",[1782,4.473]],["body/10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组",[0,0.345,5,1.433,6,0.511,51,1.302,81,0.686,82,1.193,88,1.93,119,0.645,138,0.819,141,0.98,147,1.184,170,0.882,190,0.98,239,3.204,250,2.578,251,1.426,324,0.956,431,2.056,436,1.072,450,1.239,484,2.312,846,5.217,979,2.011,1056,4.719,1223,2.843,1235,4.24,1669,3.851,1766,4.809,1767,5.074,1768,6.038,1769,4.272,1770,6.038,1771,7.398,1773,6.797,1774,4.809,1775,2.653,1776,4.809,1777,3.339,1778,4.809,1779,4.809,1780,6.797,1781,4.809,1783,5.275,1784,4.502,1785,5.275,1786,5.275,1787,5.275,1788,5.275,1789,5.275,1790,5.275,1791,5.275]],["title/10.标准库/10.3.正则表达式/10.3.1.匹配.html",[]],["body/10.标准库/10.3.正则表达式/10.3.1.匹配.html",[0,0.338,5,1.351,6,0.426,43,5.151,44,6.524,81,0.572,82,1.167,119,0.585,138,0.683,141,0.888,147,1.073,170,0.736,190,0.888,229,4.585,251,1.189,287,3.508,300,2.915,324,0.867,405,1.789,431,1.885,436,0.972,450,1.124,484,3.436,1235,3.844,1767,5.335,1770,6.349,1771,5.85,1792,7.84]],["title/10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配",[1793,4.473]],["body/10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配",[0,0.34,5,1.339,6,0.421,43,5.109,44,5.959,81,0.565,82,1.157,119,0.577,138,0.674,141,0.877,147,1.059,170,0.726,190,0.877,229,4.524,251,1.173,287,3.461,300,2.876,324,0.855,405,1.765,431,1.869,436,0.959,450,1.109,484,3.39,1235,3.793,1767,5.264,1770,6.264,1771,5.772,1794,7.735,1795,7.735,1796,7.735]],["title/10.标准库/10.3.正则表达式/10.3.3.替换.html",[]],["body/10.标准库/10.3.正则表达式/10.3.3.替换.html",[0,0.34,5,1.465,6,0.541,43,4.767,81,0.655,82,1.266,119,0.67,138,0.782,141,1.017,147,1.228,170,0.842,190,1.017,250,2.675,251,1.052,324,0.992,350,2.313,431,1.744,436,1.112,450,1.286,887,4.389,1235,4.399,1767,6.106,1797,6.935,1798,6.321,1799,4.389,1800,3.206,1801,6.321,1802,6.321,1803,8.18,1804,6.321,1805,6.279,1806,6.935]],["title/10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换",[1807,4.473]],["body/10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换",[0,0.343,5,1.45,6,0.534,43,4.682,81,0.643,82,1.253,119,0.658,138,0.768,141,0.999,147,1.207,170,0.827,190,0.999,250,2.627,251,1.023,324,0.975,350,2.25,431,1.713,436,1.093,450,1.263,887,4.27,1235,4.321,1767,5.998,1798,6.15,1799,4.27,1800,3.119,1801,6.15,1802,6.15,1803,8.035,1804,6.15,1805,6.167,1808,6.747,1809,6.747,1810,6.747,1811,6.747]],["title/10.标准库/10.3.正则表达式/10.3.4.分割.html",[]],["body/10.标准库/10.3.正则表达式/10.3.4.分割.html",[0,0.329,5,1.409,6,0.457,81,0.614,82,1.218,119,0.627,138,0.733,141,0.953,147,1.151,170,0.789,190,0.953,324,0.93,431,1.634,436,1.042,450,1.205,1235,4.122,1767,5.721,1812,8.407,1813,7.664,1814,7.664,1815,8.407,1816,7.664]],["title/10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割",[1817,4.473]],["body/10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割",[0,0.337,5,1.397,6,0.451,81,0.605,82,1.207,119,0.618,138,0.723,141,0.939,147,1.134,170,0.778,190,0.939,324,0.917,431,1.611,436,1.027,450,1.188,1235,4.063,1767,5.639,1813,7.555,1814,7.555,1816,7.555,1818,8.287,1819,8.287]],["title/10.标准库/10.3.正则表达式/10.3.6.实现细节.html",[]],["body/10.标准库/10.3.正则表达式/10.3.6.实现细节.html",[0,0.324,9,3.37,88,3.315,324,1.002,450,1.299,666,4.444,694,4.39,1820,9.064,1821,8.262,1822,8.262,1823,9.064]],["title/10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节",[1824,4.473]],["body/10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节",[324,1.008,450,1.306,1821,8.305,1822,8.305,1825,9.111,1826,9.111,1827,9.111,1828,9.111,1829,9.111,1830,9.111,1831,9.111,1832,9.111,1833,9.111]],["title/10.标准库/10.3.正则表达式/10.3.5.Map.html",[]],["body/10.标准库/10.3.正则表达式/10.3.5.Map.html",[0,0.341,5,1.209,6,0.359,51,1.151,81,0.481,82,1.242,90,4.372,119,0.492,138,0.575,141,0.747,147,0.903,170,0.619,190,0.984,246,2.623,250,1.965,251,1,282,2.724,297,2.141,298,2.674,299,3.856,324,0.729,425,5.172,436,0.817,439,2.393,450,0.945,477,3.502,481,1.326,484,4.254,605,1.289,606,1.541,607,1.739,608,1.829,1235,4.257,1771,4.92,1834,6.01,1835,6.01,1836,7.915,1837,7.915,1838,9.404,1839,7.915,1840,7.915,1841,9.404,1842,5.339,1843,6.01,1844,6.01,1845,6.01]],["title/10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map",[1834,4.077]],["body/10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map",[0,0.338,5,1.194,6,0.352,51,1.13,81,0.472,82,1.232,90,4.291,119,0.483,138,0.564,141,0.733,147,0.886,170,0.607,190,0.972,246,2.591,250,1.929,251,0.982,282,2.673,297,2.114,298,2.624,299,3.785,324,0.716,425,5.109,436,0.802,439,2.348,450,0.927,477,3.437,481,1.301,484,4.215,605,1.265,606,1.512,607,1.706,608,1.795,1235,4.204,1265,8.658,1771,4.828,1835,5.899,1836,7.817,1837,7.817,1838,8.768,1839,7.817,1840,7.817,1841,8.768,1842,5.24,1843,5.899,1844,5.899,1845,5.899,1846,6.471,1847,6.471,1848,6.471,1849,6.471]],["title/10.标准库/10.4.Math/10.4.1.特殊数值.html",[]],["body/10.标准库/10.4.Math/10.4.1.特殊数值.html",[0,0.333,6,0.485,56,5.918,250,3.126,1850,8.924,1851,6.245,1852,7.227,1853,8.924,1854,8.135,1855,7.227,1856,8.924]],["title/10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值",[1857,4.473]],["body/10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值",[56,5.949,118,3.449,250,3.135,722,4.836,1852,7.264,1854,8.177,1855,7.264,1858,8.97,1859,8.97,1860,8.97,1861,8.97,1862,8.97,1863,8.97,1864,8.97,1865,8.97]],["title/10.标准库/10.3.正则表达式/10.3.正则表达式.html",[]],["body/10.标准库/10.3.正则表达式/10.3.正则表达式.html",[0,0.35,4,1.076,6,0.562,54,5.648,82,1.048,84,1.745,88,2.421,250,1.973,251,1.32,374,3.372,439,2.402,797,2.402,1235,4.267,1275,5.648,1702,4.938,1799,4.189,1866,6.619,1867,7.049,1868,6.619,1869,7.876,1870,6.619,1871,6.033,1872,6.033,1873,7.934,1874,6.033,1875,6.619,1876,5.13,1877,6.619]],["title/10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式",[1878,4.473]],["body/10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式",[0,0.336,4,0.963,6,0.529,82,1.048,84,1.745,251,1.32,439,2.402,797,2.402,979,3.319,1235,4.267,1702,4.938,1725,5.36,1799,4.189,1867,5.36,1869,7.876,1871,6.033,1872,6.033,1873,7.934,1874,6.033,1876,5.13,1879,6.619,1880,6.619,1881,6.619,1882,6.619,1883,6.619,1884,6.619,1885,6.619,1886,6.619,1887,6.619,1888,6.619,1889,6.619,1890,6.619,1891,6.619,1892,6.619,1893,6.619,1894,6.619,1895,6.033,1896,6.619,1897,8.704,1898,6.619,1899,6.619,1900,6.619,1901,6.619,1902,6.619,1903,6.033,1904,6.619,1905,6.619,1906,6.619,1907,6.619,1908,6.619,1909,6.619,1910,6.619,1911,6.619,1912,6.619,1913,6.619,1914,6.619,1915,6.619,1916,6.619,1917,6.619,1918,6.619]],["title/10.标准库/10.4.Math/10.4.3.整数数学.html",[]],["body/10.标准库/10.4.Math/10.4.3.整数数学.html",[0,0.33,4,1.002,6,0.493,82,1.091,334,6.538,1919,9.064,1920,9.645,1921,8.262,1922,8.262]],["title/10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学",[1923,4.473]],["body/10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学",[0,0.315,6,0.496,82,1.097,334,6.573,1920,9.675,1921,8.305,1922,8.305,1924,9.111,1925,8.305,1926,9.111]],["title/10.标准库/10.4.Math/10.4.2.数学错误.html",[]],["body/10.标准库/10.4.Math/10.4.2.数学错误.html",[0,0.32,250,2.819,666,4.637,1927,9.457]],["title/10.标准库/10.4.Math/10.4.2.数学错误.html#10-4-2-数学错误",[1928,4.473]],["body/10.标准库/10.4.Math/10.4.2.数学错误.html#10-4-2-数学错误",[250,2.835,666,4.662,1929,8.114,1930,9.509,1931,9.509]],["title/10.标准库/10.4.Math/10.4.4.扩展.html",[]],["body/10.标准库/10.4.Math/10.4.4.扩展.html",[0,0.332,5,1.293,6,0.505,51,1.277,56,4.85,81,0.678,82,0.88,119,0.546,138,0.638,141,1.052,147,1.271,170,0.686,190,1.052,251,1.109,264,1.548,290,3.381,296,1.585,297,1.803,324,0.809,431,1.421,436,0.907,450,1.048,481,1.47,605,1.429,606,1.709,607,1.929,1932,7.313,1933,8.463,1934,6.666,1935,5.922,1936,9.298,1937,6.666,1938,6.666,1939,4.027,1940,6.666,1941,8.463,1942,6.666,1943,6.666,1944,6.666]],["title/10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展",[1945,4.473]],["body/10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展",[0,0.34,5,1.269,6,0.496,51,1.241,56,4.711,81,0.665,82,0.855,119,0.53,138,0.619,141,1.033,147,1.248,170,0.667,190,1.033,251,1.078,264,1.504,290,3.284,296,1.556,297,1.752,324,0.786,431,1.381,436,0.881,450,1.018,481,1.428,605,1.389,606,1.66,607,1.874,1933,8.308,1934,6.476,1935,5.753,1936,9.173,1937,6.476,1938,6.476,1939,3.953,1940,6.476,1941,8.308,1942,6.476,1943,6.476,1944,6.476,1946,7.104,1947,7.104]],["title/10.标准库/10.4.Math/10.4.Math.html",[]],["body/10.标准库/10.4.Math/10.4.Math.html",[0,0.343,4,0.68,5,1.154,6,0.587,51,1.074,56,5.497,81,0.732,82,1.128,119,0.459,138,0.536,141,0.697,147,0.842,170,0.88,190,0.697,239,3.735,250,2.471,251,0.933,296,1.05,324,0.68,336,2.642,350,2.051,351,2.782,379,3.367,403,1.31,431,2.143,436,0.763,450,0.882,481,1.237,605,1.202,606,1.437,607,1.622,608,1.706,609,1.797,610,1.993,643,2.782,664,3.735,666,3.016,797,2.232,932,3.893,1661,2.214,1662,2.287,1663,2.45,1664,2.541,1851,4.304,1852,4.981,1939,2.668,1948,5.607,1949,6.151,1950,6.151,1951,5.607,1952,5.607,1953,5.607,1954,5.607,1955,4.981,1956,5.607,1957,5.607,1958,5.607,1959,7.557]],["title/10.标准库/10.4.Math/10.4.Math.html#10-4-Math",[1948,4.077]],["body/10.标准库/10.4.Math/10.4.Math.html#10-4-Math",[0,0.342,4,0.673,5,1.146,6,0.585,51,1.063,56,4.036,81,0.729,82,1.122,119,0.454,138,0.531,141,0.69,147,0.833,170,0.875,190,0.69,239,3.696,250,2.454,251,0.923,296,1.039,324,0.673,336,2.614,350,2.03,351,2.753,379,3.331,403,1.296,431,2.138,436,0.755,450,0.872,481,1.224,605,1.19,606,1.422,607,1.605,608,1.688,609,1.778,610,1.972,643,2.753,664,3.696,666,2.984,797,2.209,932,3.853,1268,3.498,1272,4.391,1567,4.259,1661,2.191,1662,2.263,1663,2.424,1664,2.515,1851,4.259,1852,4.929,1939,2.64,1951,5.548,1952,5.548,1953,5.548,1954,5.548,1955,4.929,1956,5.548,1957,5.548,1958,5.548,1959,7.503,1960,6.087,1961,6.087,1962,6.087,1963,6.087,1964,6.087,1965,5.548]],["title/10.标准库/10.5.Lambda/10.5.Lambda.html",[]],["body/10.标准库/10.5.Lambda/10.5.Lambda.html",[0,0.347,4,0.442,5,1.145,6,0.447,51,1.061,58,7.131,81,0.444,82,1.065,119,0.614,138,0.641,141,0.689,147,1.007,170,0.69,172,2.257,190,1.132,249,3.908,250,1.812,251,0.922,259,3.234,264,1.557,287,2.719,297,2.181,300,1.485,324,0.909,333,2.22,354,2.783,424,3.641,431,1.811,436,0.912,450,1.054,477,2.121,481,1.222,605,1.188,606,0.933,607,1.053,608,1.108,609,1.167,610,1.294,786,4.582,797,1.449,884,3.234,1523,2.008,1589,4.535,1663,2.93,1673,2.425,1966,3.64,1967,3.993,1968,3.993,1969,3.64,1970,3.64,1971,2.062,1972,2.535,1973,3.993,1974,5.54,1975,3.434,1976,3.64,1977,3.64,1978,3.64,1979,3.64,1980,3.64,1981,3.64,1982,3.64,1983,3.64,1984,3.64,1985,3.993,1986,3.64,1987,3.64,1988,7.495,1989,3.993,1990,3.993,1991,3.993,1992,3.993,1993,3.64,1994,3.64,1995,5.54,1996,3.64,1997,3.64,1998,3.64,1999,3.993,2000,3.234,2001,3.64,2002,3.64,2003,3.64,2004,3.64,2005,5.54,2006,4.646,2007,5.54,2008,5.54,2009,3.64]],["title/10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda",[1966,4.077]],["body/10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda",[58,5.949,118,3.449,264,1.899,354,3.036,424,4.657,786,4.243,979,3.42,1344,6.953,2010,8.97,2011,8.97,2012,8.97,2013,8.97,2014,8.97,2015,8.97,2016,8.97]],["title/10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数",[58,1.923,2017,2.247]],["body/10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数",[0,0.342,5,1.16,6,0.453,51,1.082,58,5.524,81,0.452,82,1.077,118,2.873,119,0.622,138,0.651,141,0.702,147,1.023,170,0.701,172,2.315,190,1.141,249,3.969,250,1.221,251,0.94,259,3.318,264,1.312,287,2.772,297,2.206,300,1.523,324,0.921,354,2.097,424,1.814,431,1.829,436,0.926,450,1.071,477,2.176,481,1.246,605,1.211,606,0.957,607,1.08,608,1.136,609,1.197,610,1.327,779,2.652,786,4.232,797,1.487,884,3.318,979,2.849,1272,2.955,1523,2.06,1567,2.867,1589,4.623,1663,2.976,1673,2.488,1965,3.734,1969,3.734,1970,3.734,1971,2.116,1972,2.584,1974,5.648,1975,2.315,1976,3.734,1977,3.734,1978,3.734,1979,3.734,1980,3.734,1981,3.734,1982,3.734,1983,3.734,1984,3.734,1986,3.734,1987,3.734,1988,7.594,1993,3.734,1994,3.734,1995,5.648,1996,3.734,1997,3.734,1998,3.734,2001,3.734,2002,3.734,2003,3.734,2004,3.734,2005,5.648,2006,4.708,2007,5.648,2008,5.648,2009,3.734,2018,4.097,2019,4.097,2020,4.097,2021,4.097,2022,4.097,2023,4.097,2024,4.097,2025,4.097,2026,4.097,2027,4.097,2028,4.097,2029,3.496,2030,4.097,2031,4.097,2032,4.097,2033,4.097,2034,4.097,2035,4.097,2036,4.097,2037,4.097,2038,4.097,2039,4.097,2040,4.097,2041,4.097,2042,4.097,2043,4.097,2044,4.097,2045,4.097,2046,4.097,2047,4.097,2048,4.097,2049,4.097,2050,4.097,2051,4.097,2052,4.097,2053,4.097,2054,4.097,2055,4.097,2056,4.097,2057,4.097]],["title/10.标准库/10.6.模板/10.6.模板.html",[]],["body/10.标准库/10.6.模板/10.6.模板.html",[0,0.35,4,0.309,5,1.174,6,0.496,51,1.016,59,2.381,60,4.809,81,0.615,82,1.265,84,2.223,119,0.596,121,1.32,122,1.552,138,0.648,141,0.659,147,0.796,165,2.474,170,0.697,190,0.842,235,2.872,251,1.021,265,1.674,283,1.142,296,0.477,297,0.688,300,1.038,324,0.822,349,1.352,389,2.082,392,4.239,401,1.441,405,0.637,431,0.889,436,0.921,450,1.065,481,0.92,605,0.894,606,0.652,607,0.736,608,1.613,609,0.815,610,0.904,643,3.043,650,2.505,745,2.26,787,1.851,797,1.013,804,2.963,846,3.202,861,1.527,1661,1.005,1673,1.695,1768,3.706,1939,1.211,2000,4.711,2058,4.709,2059,4.341,2060,2.544,2061,2.544,2062,5.208,2063,5.835,2064,4.711,2065,4.711,2066,4.964,2067,5.216,2068,2.544,2069,2.544,2070,2.244,2071,3.415,2072,3.415,2073,3.415,2074,4.172,2075,2.544,2076,2.544,2077,2.544,2078,2.26,2079,1.766,2080,2.26,2081,2.544,2082,3.415,2083,6.134,2084,2.544,2085,2.544,2086,2.544,2087,2.544,2088,2.381,2089,2.544,2090,2.544,2091,4.172,2092,2.791,2093,2.544,2094,2.544,2095,3.905,2096,2.544,2097,2.791,2098,2.544,2099,2.544,2100,2.544,2101,2.26,2102,4.172,2103,2.544,2104,4.172,2105,4.172,2106,2.544,2107,2.544,2108,2.544,2109,2.544,2110,2.082,2111,2.544,2112,3.706,2113,2.544,2114,2.544,2115,2.544,2116,2.381]],["title/10.标准库/10.6.模板/10.6.模板.html#10-6-模板",[2117,4.473]],["body/10.标准库/10.6.模板/10.6.模板.html#10-6-模板",[0,0.335,4,0.812,5,1.296,6,0.399,60,4.754,81,0.536,82,1.293,84,1.937,119,0.548,138,0.64,141,0.832,147,1.005,170,0.689,190,0.832,235,3.13,251,1.114,324,0.812,431,1.427,436,0.91,450,1.052,643,3.321,722,3.959,846,6.514,1673,4.46,1768,7.538,2058,5.139,2059,5.48,2060,6.695,2061,6.695,2062,3.901,2063,6.173,2064,5.947,2065,5.947,2066,6.267,2067,5.692,2068,6.695,2118,7.344,2119,7.344,2120,7.344,2121,6.695]],["title/10.标准库/10.6.模板/10.6.模板.html#表达式",[2122,3.622]],["body/10.标准库/10.6.模板/10.6.模板.html#表达式",[235,2.678,979,3.334,2069,7.972,2070,5.08,2071,7.731,2072,7.731,2073,7.731,2074,9.445,2122,7.082,2123,8.745,2124,7.972,2125,8.745,2126,7.972,2127,8.745,2128,8.745,2129,8.745]],["title/10.标准库/10.6.模板/10.6.模板.html#条件",[2130,4.473]],["body/10.标准库/10.6.模板/10.6.模板.html#条件",[0,0.348,6,0.561,51,1.151,81,0.634,118,3.733,119,0.492,235,2.019,300,2.452,349,3.193,389,4.92,392,5.188,779,4.269,861,3.609,1184,4.614,2063,5.758,2075,6.01,2076,6.01,2077,6.01,2078,5.339,2079,4.173,2080,5.339,2081,6.01,2131,6.01,2132,6.593,2133,6.593,2134,6.593,2135,6.593,2136,8.39,2137,6.01,2138,6.593,2139,6.593,2140,6.593,2141,6.593]],["title/10.标准库/10.6.模板/10.6.模板.html#迭代",[2142,4.077]],["body/10.标准库/10.6.模板/10.6.模板.html#迭代",[0,0.314,6,0.447,51,1.434,81,0.599,118,3.157,119,0.613,138,0.716,170,0.77,251,1.245,324,0.908,392,5.016,436,1.018,450,1.176,481,1.651,605,1.604,2000,8.078,2062,4.361,2082,7.443,2083,10.189,2084,7.483,2085,7.483,2086,7.483,2087,7.483,2143,8.209,2144,8.209]],["title/10.标准库/10.6.模板/10.6.模板.html#子模板",[2145,4.473]],["body/10.标准库/10.6.模板/10.6.模板.html#子模板",[0,0.342,6,0.391,60,4.656,81,0.525,82,1.326,84,2.422,119,0.537,138,0.627,170,0.675,235,3.1,324,0.795,392,3.617,436,0.892,450,1.031,643,3.253,722,3.877,787,4.77,2000,5.825,2058,6.428,2062,5.986,2063,4.77,2064,5.825,2067,5.575,2088,6.137,2089,6.556,2090,6.556,2091,8.374,2093,6.556,2094,6.556,2121,6.556,2146,7.192,2147,7.192,2148,7.192]],["title/10.标准库/10.6.模板/10.6.模板.html#模板宏",[2149,4.473]],["body/10.标准库/10.6.模板/10.6.模板.html#模板宏",[0,0.342,5,1.285,6,0.324,51,1.041,60,3.859,81,0.435,82,1.192,84,2.433,119,0.445,121,2.82,122,3.315,138,0.52,141,0.676,147,0.816,165,3.924,170,0.559,190,1.046,235,1.826,251,0.904,265,2.181,283,2.44,296,1.018,297,1.47,324,0.659,401,3.079,405,1.361,436,0.739,450,0.854,481,1.199,605,1.165,606,1.393,607,1.572,608,2.559,609,1.742,610,1.931,643,2.696,650,4.442,722,3.214,804,5.254,1661,2.146,2059,4.448,2062,4.902,2063,5.382,2065,4.828,2067,4.621,2095,5.087,2096,5.434,2098,5.434,2099,5.434,2100,5.434,2101,4.828,2102,7.398,2103,5.434,2104,7.398,2105,7.398,2106,5.434,2107,5.434,2150,5.962,2151,5.962,2152,5.962,2153,5.962,2154,5.962,2155,5.962,2156,5.962,2157,5.962,2158,5.962,2159,5.962,2160,5.962]],["title/10.标准库/10.6.模板/10.6.模板.html#全局",[2161,4.473]],["body/10.标准库/10.6.模板/10.6.模板.html#全局",[522,6.401,2058,6.582,2095,8.027,2108,8.574,2162,9.406,2163,9.406,2164,9.406]],["title/10.标准库/10.6.模板/10.6.模板.html#利用资源",[2165,4.473]],["body/10.标准库/10.6.模板/10.6.模板.html#利用资源",[0,0.334,5,1.283,6,0.393,60,5.963,81,0.527,82,1.285,84,1.905,119,0.539,138,0.63,141,0.818,147,0.989,170,0.678,190,0.818,235,2.212,251,1.096,324,0.799,431,1.404,436,0.895,450,1.035,643,3.266,779,4.676,797,2.621,1272,5.21,1725,5.849,2059,5.389,2062,3.836,2063,4.789,2064,5.849,2065,5.849,2066,6.163,2067,5.598,2109,6.584,2110,5.389,2111,6.584,2112,7.459,2113,6.584,2114,6.584,2115,6.584,2116,6.163,2166,7.222,2167,7.222,2168,7.222,2169,7.222,2170,7.222,2171,7.222,2172,7.222,2173,7.222]],["title/10.标准库/10.8.序列化/10.8.1.格式化序列化.html",[]],["body/10.标准库/10.8.序列化/10.8.1.格式化序列化.html",[0,0.346,6,0.283,81,0.538,84,1.37,88,2.698,141,0.589,160,2.232,170,0.488,250,2.556,251,1.119,284,1.871,292,3.839,300,1.932,350,2.46,351,3.336,354,1.759,403,1.106,405,1.684,436,0.644,439,1.886,450,0.745,786,3.489,856,3.878,906,2.761,1201,2.844,1223,1.981,1232,3.04,1235,3.617,1283,3.636,1298,3.878,1702,5.504,1710,3.536,1711,3.878,1714,3.878,1769,4.208,1799,4.669,1851,3.636,1869,4.208,1876,4.028,1939,2.254,1971,2.684,1972,2.167,2006,2.937,2174,4.737,2175,5.197,2176,5.197,2177,5.322,2178,3.749,2179,5.197,2180,5.197,2181,7.377,2182,5.197,2183,5.197,2184,5.197,2185,4.208,2186,5.197,2187,8.576,2188,4.737,2189,5.974,2190,4.737,2191,6.725,2192,5.197,2193,5.197,2194,4.737,2195,5.197,2196,5.197,2197,4.435,2198,4.737,2199,5.197,2200,5.197,2201,5.197,2202,5.197,2203,4.737,2204,4.737,2205,5.197,2206,6.725,2207,5.197,2208,7.377,2209,4.737,2210,5.197,2211,4.737,2212,5.197,2213,5.197]],["title/10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化",[2214,4.473]],["body/10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化",[0,0.262,81,0.537,88,2.693,141,0.587,160,2.225,170,0.486,251,0.786,284,1.865,292,3.562,350,2.455,351,2.343,354,1.754,403,1.103,405,1.68,439,1.88,722,3.968,786,2.451,856,3.866,906,2.752,979,1.975,1005,6.71,1201,2.836,1223,1.975,1232,3.031,1235,3.609,1283,3.625,1298,3.866,1567,5.151,1702,3.866,1710,3.526,1711,3.866,1714,3.866,1769,4.196,1799,3.28,1851,3.625,1869,4.196,1939,2.248,1971,2.676,1972,2.161,2006,2.928,2029,4.421,2126,4.723,2136,5.31,2185,4.196,2188,4.723,2189,5.961,2190,4.723,2191,6.71,2194,4.723,2203,4.723,2204,4.723,2206,4.723,2209,4.723,2211,4.723,2215,5.181,2216,5.181,2217,5.181,2218,5.181,2219,5.181,2220,5.181,2221,5.181,2222,5.181,2223,4.723,2224,5.181,2225,5.181,2226,5.181,2227,5.181,2228,5.181,2229,5.181,2230,5.181,2231,5.181,2232,5.181,2233,4.723,2234,5.181,2235,4.723,2236,9.323,2237,5.181,2238,5.181,2239,5.181,2240,5.181,2241,5.181,2242,5.181,2243,5.181,2244,5.181,2245,5.181,2246,5.181,2247,5.181,2248,5.181,2249,5.181,2250,5.181,2251,5.181,2252,5.181,2253,5.181,2254,5.181,2255,5.181,2256,5.181,2257,5.181,2258,5.181,2259,5.181,2260,5.181,2261,5.181,2262,5.181,2263,5.181,2264,5.181,2265,5.181,2266,5.181,2267,5.181,2268,5.181,2269,5.181,2270,5.181,2271,5.181,2272,5.181,2273,5.181,2274,5.181,2275,4.723,2276,5.181,2277,5.181,2278,5.181,2279,5.181,2280,5.181,2281,7.361,2282,7.361,2283,5.181,2284,5.181,2285,5.181,2286,5.181,2287,5.181,2288,5.181,2289,5.181,2290,5.181,2291,5.181,2292,5.181,2293,5.181]],["title/10.标准库/10.7.反射/10.7.反射.html",[]],["body/10.标准库/10.7.反射/10.7.反射.html",[0,0.344,4,0.545,5,1.478,6,0.496,8,1.865,51,1.241,61,3.558,81,0.665,82,0.594,119,0.68,121,2.333,138,0.795,141,1.033,147,1.378,157,1.628,170,0.855,179,1.377,190,1.14,191,1.708,235,2.176,250,1.47,251,1.078,283,2.909,292,2.405,297,1.752,324,0.921,343,3.775,349,2.389,403,1.05,405,1.622,431,1.619,436,0.881,450,1.018,465,2.057,481,1.429,605,1.389,606,1.66,607,1.301,608,1.368,609,1.441,610,1.598,743,3.68,797,3.506,1586,5.755,1661,1.775,1662,1.834,1971,4.708,2058,4.972,2294,8.597,2295,6.478,2296,4.496,2297,4.932,2298,4.496,2299,3.994,2300,6.478,2301,2.787,2302,4.496,2303,3.68,2304,6.216,2305,3.451,2306,3.451]],["title/10.标准库/10.7.反射/10.7.反射.html#10-7-反射",[2307,4.473]],["body/10.标准库/10.7.反射/10.7.反射.html#10-7-反射",[0,0.344,4,0.512,5,1.453,6,0.481,8,1.751,51,1.185,81,0.646,82,0.557,118,2.61,119,0.66,121,2.19,138,0.771,141,1.003,147,1.348,157,1.571,170,0.83,179,1.293,190,1.116,235,2.079,250,1.38,251,1.03,283,1.895,292,2.297,297,1.673,324,0.889,343,3.606,349,2.243,403,0.986,405,1.549,431,1.562,436,0.841,450,0.973,465,1.931,481,1.365,605,1.327,606,1.586,607,1.221,608,1.284,609,1.353,610,1.5,722,3.659,979,1.765,1586,5.497,1661,1.667,1662,1.722,1971,4.15,2058,4.749,2294,8.449,2295,6.187,2296,4.221,2298,4.221,2299,3.75,2300,6.187,2301,2.617,2302,4.221,2303,3.455,2304,5.996,2305,3.24,2306,3.24,2308,4.63,2309,4.63,2310,4.63,2311,4.63,2312,4.63,2313,4.63,2314,4.63,2315,4.63,2316,4.63,2317,4.63,2318,4.63,2319,4.63,2320,4.63,2321,4.63,2322,4.63,2323,4.63,2324,4.63,2325,4.63,2326,4.63,2327,4.63,2328,4.63,2329,4.63,2330,4.63]],["title/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html",[]],["body/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html",[0,0.346,4,0.57,6,0.555,43,3.894,44,3.192,51,0.899,64,5.791,81,0.745,82,1.182,119,0.637,138,0.639,170,0.688,235,2.245,251,0.781,324,0.811,424,4.117,426,3.212,427,4.012,431,2.042,436,0.639,450,0.738,481,1.036,605,1.007,797,1.869,879,8.269,1080,3.26,2062,4.533,2080,4.171,2088,4.395,2331,5.151,2332,6.615,2333,4.171,2334,5.936,2335,4.695,2336,5.438,2337,4.695,2338,4.695,2339,4.695,2340,5.151,2341,4.695,2342,5.151,2343,5.151,2344,4.695,2345,4.695,2346,4.171,2347,4.695,2348,6.682,2349,3.843,2350,4.171,2351,4.695,2352,4.695,2353,4.171,2354,4.171]],["title/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#10-9-1-开始使用Xml",[2355,4.473]],["body/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#10-9-1-开始使用Xml",[]],["title/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素",[2356,4.473]],["body/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素",[0,0.331,6,0.544,64,4.26,81,0.73,82,1.204,431,1.944,879,8.699,1265,6.393,2332,7.754,2333,6.68,2334,6.68,2357,8.248,2358,8.248,2359,7.519,2360,8.248,2361,8.248,2362,8.248]],["title/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素",[2363,4.473]],["body/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素",[0,0.331,6,0.541,64,4.22,81,0.726,82,0.983,119,0.61,426,4.359,431,1.933,879,7.422,2131,9.067,2332,6.333,2335,7.448,2336,5.818,2337,7.448,2338,7.448,2339,7.448,2364,8.171,2365,8.171,2366,8.171,2367,7.448,2368,8.171,2369,8.171]],["title/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值",[2370,4.473]],["body/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值",[0,0.331,4,0.867,6,0.426,43,4.165,44,4.858,64,5.838,81,0.572,82,1.167,119,0.585,138,0.683,170,0.736,324,0.867,431,2.046,2080,6.349,2341,7.147,2344,7.147,2345,7.147,2346,6.349,2347,7.147,2367,7.147,2371,7.84,2372,7.84,2373,7.84,2374,7.84,2375,7.84,2376,7.84,2377,7.84,2378,7.84,2379,7.84,2380,6.077]],["title/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素",[64,1.108,2142,1.955,2381,2.145]],["body/10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素",[0,0.34,6,0.417,51,1.339,64,4.94,81,0.56,119,0.572,138,0.668,170,0.719,251,1.163,324,0.848,424,4.833,427,5.235,436,0.951,450,1.099,481,1.542,605,1.499,797,2.782,1080,4.853,1272,5.531,2062,5.537,2336,4.485,2348,6.989,2349,5.721,2350,6.209,2351,6.989,2352,6.989,2353,6.209,2354,6.209,2382,7.667,2383,7.667]],["title/10.标准库/10.9.Xml/10.9.2.解析Xml.html",[]],["body/10.标准库/10.9.Xml/10.9.2.解析Xml.html",[0,0.332,4,0.972,6,0.478,64,5.367,81,0.641,82,1.058,431,1.708,2333,8.415,2334,7.118,2346,7.118,2384,8.789,2385,8.789,2386,8.789]],["title/10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml",[2387,4.473]],["body/10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml",[0,0.248,4,0.977,6,0.48,64,5.383,81,0.645,82,1.063,431,1.717,1305,8.053,2333,8.441,2334,7.154,2346,7.154,2388,8.834,2389,8.834,2390,8.834,2391,8.834,2392,8.834,2393,8.834]],["title/10.标准库/10.8.序列化/10.8.序列化.html",[]],["body/10.标准库/10.8.序列化/10.8.序列化.html",[0,0.347,4,0.44,5,1.296,6,0.526,51,1.058,62,3.219,81,0.535,82,1.164,84,2.163,88,1.454,119,0.452,138,0.528,141,0.686,147,0.829,170,0.568,190,1.001,251,0.919,289,2.93,292,1.346,300,2.252,324,0.67,350,2.944,351,4.207,354,1.346,403,1.562,405,1.382,431,1.716,436,0.751,439,3.375,440,1.934,450,0.868,481,1.649,605,1.184,606,1.415,607,1.597,608,1.68,609,1.77,610,1.288,650,2.176,786,1.88,788,2.053,797,1.442,798,6.369,845,4.865,1283,2.782,1661,1.431,1662,1.478,1663,1.583,1664,1.642,1665,1.818,1666,1.859,1667,1.949,1668,2.053,1669,2.053,1670,2.325,1671,2.516,1672,2.636,1673,2.414,1674,2.636,1710,2.705,1711,2.966,1714,2.966,1851,2.782,1876,3.081,1939,1.724,1972,1.658,2174,3.624,2189,3.219,2198,3.624,2394,6.643,2395,5.686,2396,7.217,2397,5.521,2398,3.624,2399,3.624,2400,5.521,2401,3.975,2402,3.975,2403,3.624,2404,3.624,2405,3.624,2406,3.975,2407,3.975,2408,5.521,2409,6.687,2410,3.624,2411,3.624,2412,3.624,2413,3.624,2414,3.624,2415,3.624]],["title/10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化",[2416,4.473]],["body/10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化",[0,0.337,5,1.215,6,0.361,51,1.16,81,0.485,82,1.173,84,2.301,119,0.496,138,0.579,141,0.753,147,0.909,170,0.623,190,0.753,251,1.008,289,3.116,324,0.735,431,1.894,436,0.824,439,3.536,440,2.787,450,0.952,481,1.959,605,1.299,606,1.552,607,1.752,608,1.843,609,1.941,788,3.431,798,7.029,979,2.533,2394,7.066,2395,6.763,2396,7.27,2397,7.954,2398,6.056,2399,6.056,2400,7.954,2417,6.644,2418,6.644,2419,6.644,2420,6.644,2421,6.644,2422,6.644,2423,6.644,2424,6.644,2425,6.644,2426,6.644,2427,6.644,2428,6.644,2429,6.644]],["title/10.标准库/10.8.序列化/10.8.序列化.html#支持的值",[2430,4.473]],["body/10.标准库/10.8.序列化/10.8.序列化.html#支持的值",[4,0.958,292,2.931,354,2.931,403,1.843,405,1.976,517,7.893,786,4.095,979,4.192,1283,6.058,1711,6.46,1714,6.46,1939,3.756,2189,7.012,2275,7.893,2431,8.658,2432,8.658,2433,8.658,2434,8.658,2435,8.658,2436,8.658,2437,8.658]],["title/10.标准库/10.8.序列化/10.8.序列化.html#序列化配置",[2438,4.473]],["body/10.标准库/10.8.序列化/10.8.序列化.html#序列化配置",[300,3.388,722,5.721,2394,7.378,2439,9.111,2440,9.111,2441,9.111,2442,10.613,2443,9.111,2444,9.111,2445,9.111,2446,9.111]],["title/10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为",[2447,4.473]],["body/10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为",[650,4.811,2396,6.558,2403,8.012,2404,8.012,2405,8.012,2448,8.789,2449,8.789,2450,8.789,2451,8.789,2452,8.789,2453,8.789,2454,8.789,2455,8.789,2456,8.789,2457,8.789,2458,8.789,2459,8.789,2460,8.789,2461,8.789,2462,8.789]],["title/10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化",[2463,4.473]],["body/10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化",[0,0.341,5,1.351,6,0.573,51,0.99,81,0.572,82,1.167,84,2.068,88,2.074,119,0.423,138,0.494,141,0.643,147,0.776,170,0.532,190,1.099,251,0.86,289,2.801,324,0.627,350,3.395,351,4.605,403,1.669,431,1.524,436,0.703,439,2.846,450,0.813,481,1.14,605,1.108,606,1.325,607,1.495,608,1.573,609,1.657,610,1.837,797,2.058,798,5.657,845,5.961,979,2.162,1272,4.091,1661,2.041,1662,2.108,1663,2.258,1664,2.343,1665,2.593,1666,2.651,1667,2.78,1668,2.929,1669,2.929,1670,3.317,1671,3.589,1672,3.76,1673,3.443,1674,3.76,1876,4.395,2394,4.592,2395,4.395,2396,5.851,2408,5.169,2409,5.169,2410,5.169,2411,5.169,2412,5.169,2413,5.169,2414,5.169,2415,5.169,2464,5.67,2465,5.67,2466,5.67,2467,5.67,2468,5.67,2469,5.67,2470,5.67,2471,5.67,2472,5.67]],["title/10.标准库/10.9.Xml/10.9.Xml.html",[]],["body/10.标准库/10.9.Xml/10.9.Xml.html",[0,0.267,4,1.052,64,4.911,2473,8.668,2474,8.668]],["title/10.标准库/10.9.Xml/10.9.Xml.html#10-9-Xml",[2473,4.077]],["body/10.标准库/10.9.Xml/10.9.Xml.html#10-9-Xml",[4,1.057,1344,7.411,2474,8.716,2475,9.561]],["title/10.标准库/10.9.Xml/10.9.3.编码Xml.html",[]],["body/10.标准库/10.9.Xml/10.9.3.编码Xml.html",[0,0.331,6,0.469,64,4.45,81,0.629,82,1.037,119,0.643,138,0.751,170,0.808,431,1.674,879,6.428,2332,6.678,2476,8.615,2477,9.361,2478,9.361,2479,6.215,2480,6.215,2481,7.854]],["title/10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml",[2482,4.473]],["body/10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml",[0,0.326,6,0.471,64,4.472,81,0.632,82,1.042,119,0.646,138,0.755,170,0.812,431,1.683,2332,6.711,2359,7.893,2477,9.389,2478,9.389,2481,7.893,2483,8.658,2484,8.658,2485,8.658]],["title/2.类型/2.1.基本类型/2.1.1.数值类型.html",[]],["body/2.类型/2.1.基本类型/2.1.1.数值类型.html",[0,0.343,403,2.499,1939,5.091,2486,7.244,2487,7.739,2488,7.739]],["title/2.类型/2.1.基本类型/2.1.1.数值类型.html#2-1-1-数值类型",[2489,4.473]],["body/2.类型/2.1.基本类型/2.1.1.数值类型.html#2-1-1-数值类型",[]],["title/2.类型/2.1.基本类型/2.1.1.数值类型.html#Float",[1939,1.94]],["body/2.类型/2.1.基本类型/2.1.1.数值类型.html#Float",[1939,4.102,2487,8.621,2488,8.621,2490,8.621,2491,9.457,2492,9.457]],["title/2.类型/2.1.基本类型/2.1.1.数值类型.html#Int",[403,0.952]],["body/2.类型/2.1.基本类型/2.1.1.数值类型.html#Int",[403,2.365,1939,4.976,2490,8.094,2493,8.879,2494,8.879,2495,8.879,2496,8.879,2497,8.879,2498,8.879,2499,8.879,2500,8.879,2501,8.879,2502,8.879]],["title/2.类型/2.1.基本类型/2.1.3.数值运算符.html",[]],["body/2.类型/2.1.基本类型/2.1.3.数值运算符.html",[0,0.347,4,0.541,6,0.451,81,0.605,403,2.618,458,2.86,1939,5.301,1972,4.185,2503,4.89,2504,8.217,2505,8.368,2506,3.96,2507,3.96]],["title/2.类型/2.1.基本类型/2.1.3.数值运算符.html#2-1-3-数值运算符",[2508,4.473]],["body/2.类型/2.1.基本类型/2.1.3.数值运算符.html#2-1-3-数值运算符",[2509,9.721]],["title/2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符",[2510,4.473]],["body/2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符",[0,0.3,403,2.616,1939,5.384,2504,8.752,2511,5.542,2512,5.542,2513,5.542,2514,5.542,2515,5.542,2516,6.495,2517,6.495,2518,6.495,2519,6.495,2520,6.495,2521,6.495,2522,6.495,2523,6.495]],["title/2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符",[2524,4.473]],["body/2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符",[0,0.314,1972,4.862,2505,9.074,2511,7.038,2512,7.038,2513,7.038,2514,7.038,2515,7.038,2525,8.248,2526,8.248,2527,8.248,2528,8.248,2529,8.248,2530,8.248]],["title/2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算",[2531,4.473]],["body/2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算",[0,0.306,118,2.935,403,2.618,458,4.465,722,5.142,2504,6.514,2506,6.182,2507,6.182,2511,6.514,2512,6.514,2513,6.514,2514,6.514,2515,6.514,2532,7.634,2533,7.634,2534,7.634,2535,7.634,2536,7.634,2537,7.634,2538,7.634,2539,7.634,2540,7.634,2541,7.634,2542,7.634,2543,7.634,2544,7.634,2545,7.634]],["title/2.类型/2.1.基本类型/2.1.2.溢出.html",[]],["body/2.类型/2.1.基本类型/2.1.2.溢出.html",[0,0.325,4,1.008,403,1.94,450,1.306,2546,9.111,2547,9.111,2548,9.111,2549,9.111,2550,8.305,2551,8.305]],["title/2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出",[2552,4.473]],["body/2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出",[403,1.95,979,3.492,2550,8.349,2551,8.349,2553,9.159,2554,9.159,2555,9.159,2556,9.159,2557,9.159,2558,9.159,2559,9.159,2560,9.159]],["title/2.类型/2.1.基本类型/2.1.4.Bool类型.html",[]],["body/2.类型/2.1.基本类型/2.1.4.Bool类型.html",[0,0.35,4,0.786,6,0.496,287,3.179,292,3.406,300,3.741,367,5.06,1223,4.282,1972,4.197,2079,6.369,2561,7.104,2562,6.476,2563,6.476,2564,7.381]],["title/2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型",[2565,4.473]],["body/2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型",[0,0.331,4,0.783,6,0.494,287,3.166,292,3.399,300,3.734,367,5.051,979,2.698,1019,4.951,1223,4.278,1268,4.066,1567,4.951,1972,4.189,2079,6.357,2562,6.45,2563,6.45,2564,7.361,2566,7.076,2567,7.076,2568,6.038,2569,7.076,2570,7.076,2571,7.076,2572,7.076,2573,7.076,2574,7.076,2575,7.076,2576,7.076,2577,7.076,2578,7.076,2579,7.076,2580,7.076,2581,7.076,2582,7.076,2583,7.076,2584,7.076,2585,7.076,2586,7.076,2587,5.484,2588,7.076,2589,7.076,2590,7.076]],["title/2.类型/2.1.基本类型/2.1.5.Void类型.html",[]],["body/2.类型/2.1.基本类型/2.1.5.Void类型.html",[0,0.343,4,0.802,5,1.49,6,0.502,43,4.906,44,5.722,81,0.674,82,1.111,92,5.232,119,0.541,138,0.632,141,0.822,142,2.813,147,0.993,157,1.417,170,0.68,190,0.822,267,5.411,296,1.238,350,2.419,431,1.409,1179,5.561,2591,7.252,2592,6.611,2593,7.252,2594,7.252]],["title/2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型",[2595,4.473]],["body/2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型",[0,0.331,5,1.483,6,0.498,43,3.805,44,4.438,81,0.669,82,1.103,117,6.529,118,2.754,119,0.535,138,0.624,141,0.812,147,0.98,157,1.4,170,0.672,190,0.812,267,5.345,296,1.223,350,2.389,431,1.392,1019,5.012,1179,5.515,1268,4.117,2592,6.529,2596,7.163,2597,7.163,2598,7.163,2599,6.529,2600,7.163,2601,7.163,2602,6.112,2603,7.163,2604,7.163,2605,7.163,2606,7.163,2607,7.163,2608,7.163,2609,7.163,2610,7.163,2611,7.163,2612,7.163]],["title/2.类型/2.1.基本类型/2.1.基本类型.html",[]],["body/2.类型/2.1.基本类型/2.1.基本类型.html",[0,0.347,4,0.883,6,0.533,250,2.38,287,3.572,300,2.968,325,5.433,363,4.947,403,2.088,1102,7.942,1939,3.463,1972,3.33,2613,7.984,2614,7.984,2615,6.465,2616,5.586,2617,7.278]],["title/2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型",[2618,4.473]],["body/2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型",[0,0.32,4,0.887,6,0.535,250,2.391,287,3.589,300,2.982,403,1.707,979,4.055,1019,5.612,1102,7.964,1939,3.479,1972,3.345,2233,9.696,2615,6.495,2616,5.612,2617,7.311,2619,8.02,2620,8.02,2621,8.02,2622,8.613,2623,8.02,2624,8.02,2625,8.02,2626,8.02,2627,8.02,2628,7.311,2629,8.02]],["title/2.类型/2.2.为空性/2.2.1.可选参数和为空性.html",[]],["body/2.类型/2.2.为空性/2.2.1.可选参数和为空性.html",[0,0.346,4,1.024,6,0.504,81,0.532,91,4.115,119,0.543,138,0.635,170,0.683,190,1.154,239,5.623,250,2.171,324,0.805,350,3.088,351,4.188,380,4.991,403,2.281,436,0.903,440,2.326,441,3.711,450,1.044,472,3.881,878,5.898,2630,7.283,2631,7.498]],["title/2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性",[2632,4.473]],["body/2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性",[0,0.341,4,1.019,6,0.501,35,4.081,81,0.527,115,5.598,118,2.777,119,0.539,138,0.63,170,0.678,190,1.149,239,4.386,250,2.153,324,0.799,350,2.409,351,3.266,380,4.972,403,2.159,436,0.895,440,2.306,441,3.68,450,1.035,878,5.849,979,3.512,2631,5.849,2633,7.222,2634,7.222,2635,7.222,2636,7.222,2637,7.222,2638,7.222,2639,7.222,2640,7.222,2641,7.222,2642,7.222,2643,7.222,2644,7.222,2645,7.222,2646,7.222]],["title/2.类型/2.2.为空性/2.2.为空性.html",[]],["body/2.类型/2.2.为空性/2.2.为空性.html",[0,0.351,4,0.921,6,0.453,81,0.608,82,1.211,88,1.804,119,0.622,122,2.742,138,0.726,170,0.463,250,2.717,283,2.019,287,2.207,292,4.026,324,0.786,403,2.208,431,1.381,436,0.611,450,0.707,694,3.442,1223,3.176,1232,4.872,1851,3.451,1939,2.139,1972,2.057,2616,3.451,2631,5.755,2647,3.558,2648,4.932,2649,4.932,2650,4.496,2651,4.496,2652,4.496]],["title/2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性",[2653,4.473]],["body/2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性",[0,0.341,4,0.541,6,0.451,29,6.55,81,0.605,82,1.208,88,1.789,118,2.716,119,0.619,133,4.173,138,0.723,170,0.459,250,2.707,283,2.002,287,2.188,292,4.022,324,0.781,403,2.203,431,1.373,436,0.606,450,0.701,694,3.421,728,3.96,779,3.166,979,2.693,1019,3.422,1223,3.161,1232,4.849,1851,3.422,1925,4.458,1939,2.121,1972,2.04,2616,3.422,2628,7.557,2631,5.72,2650,4.458,2651,4.458,2652,4.458,2654,4.89,2655,4.89,2656,4.89,2657,4.89,2658,4.89,2659,4.89,2660,4.89,2661,4.89,2662,4.89,2663,4.89,2664,4.89,2665,4.89,2666,4.89,2667,4.89,2668,4.89,2669,4.89,2670,4.89,2671,4.89,2672,4.89,2673,4.89,2674,4.89,2675,4.89,2676,6.438,2677,4.89,2678,4.89,2679,4.89,2680,4.89,2681,4.89,2682,7.063,2683,7.063,2684,4.89,2685,4.89,2686,4.89,2687,4.89,2688,4.89,2689,4.89,2690,4.89,2691,4.89,2692,4.89,2693,4.89,2694,4.89,2695,4.89,2696,4.458,2697,4.89,2698,4.89,2699,4.89]],["title/2.类型/2.3.类实例/2.3.1.类的构造函数.html",[]],["body/2.类型/2.3.类实例/2.3.1.类的构造函数.html",[0,0.346,6,0.58,82,0.97,84,2.601,349,5.162,350,2.687,351,3.644,363,4.993,393,5.638,2178,7.114,2700,8.057,2701,7.987,2702,8.057]],["title/2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数",[2703,4.473]],["body/2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数",[0,0.312,6,0.581,82,0.974,84,2.608,349,5.172,350,2.7,351,3.661,979,3.771,2178,7.135,2701,8.009,2704,8.095,2705,8.095,2706,8.095,2707,8.095,2708,8.095,2709,8.095,2710,8.095,2711,8.095,2712,8.095,2713,8.095,2714,8.095,2715,8.095,2716,8.095,2717,8.095,2718,8.095,2719,8.095]],["title/2.类型/2.3.类实例/2.3.3.接口.html",[]],["body/2.类型/2.3.类实例/2.3.3.接口.html",[0,0.345,4,1.012,5,1.117,6,0.56,51,1.024,81,0.718,82,1.184,119,0.683,138,0.511,141,1.115,147,0.802,170,0.55,190,0.909,251,0.889,285,3.968,288,5.549,291,5.383,296,1.816,324,0.648,349,4.764,350,2.675,351,3.628,374,2.987,405,1.338,436,0.727,450,0.84,784,3.795,1939,4.267,2720,4.373,2721,9.697,2722,4.373,2723,4.228,2724,7.313,2725,7.313,2726,5.343]],["title/2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口",[2727,4.473]],["body/2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口",[0,0.334,4,0.992,5,1.09,6,0.553,35,3.194,51,0.987,81,0.707,82,1.166,119,0.67,138,0.493,141,1.098,147,0.774,170,0.53,190,0.887,251,0.857,285,3.893,288,5.495,291,5.301,296,1.796,322,4.217,324,0.625,349,4.691,350,2.609,351,3.539,374,2.88,405,1.29,436,0.701,450,0.81,522,3.846,784,3.659,979,2.155,1939,4.201,2721,9.589,2722,4.217,2724,7.132,2725,7.132,2726,5.152,2728,5.652,2729,5.652,2730,5.652,2731,5.652,2732,5.652,2733,5.652,2734,5.652,2735,5.652,2736,5.152,2737,5.652,2738,5.652,2739,5.652,2740,5.652,2741,5.652,2742,5.652,2743,5.652,2744,5.652,2745,5.652,2746,5.152,2747,5.652,2748,5.652,2749,5.652,2750,5.652,2751,5.652,2752,5.652,2753,5.652]],["title/2.类型/2.3.类实例/2.3.2.继承.html",[]],["body/2.类型/2.3.类实例/2.3.2.继承.html",[0,0.346,4,0.773,6,0.38,81,0.51,82,0.841,84,1.843,119,0.522,138,0.609,141,1.022,170,0.656,176,4.331,190,0.792,239,6.064,285,4.332,293,3.768,296,1.194,324,0.773,349,5.511,350,2.331,351,3.161,403,1.488,436,0.867,2754,4.891,2755,9.618,2756,6.372,2757,6.73,2758,5.661,2759,6.99,2760,6.372,2761,6.372,2762,5.216]],["title/2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承",[2763,4.473]],["body/2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承",[0,0.318,4,0.761,6,0.374,81,0.502,82,0.828,84,1.814,118,2.646,119,0.513,138,0.6,141,1.012,170,0.645,190,0.78,239,6.018,285,4.299,293,3.709,296,1.175,324,0.761,349,5.49,350,2.294,351,3.112,403,1.465,436,0.853,2755,9.56,2756,6.272,2757,6.661,2758,5.571,2760,6.272,2761,6.272,2764,6.88,2765,6.88,2766,6.88,2767,6.88,2768,6.272,2769,6.88,2770,6.88,2771,6.88,2772,6.88,2773,6.88,2774,6.88,2775,6.88,2776,6.88,2777,6.88,2778,6.88,2779,6.88,2780,6.88,2781,6.88,2782,6.88,2783,6.88,2784,6.88,2785,6.272,2786,6.88,2787,6.88,2788,6.88,2789,6.88]],["title/2.类型/2.3.类实例/2.3.类实例.html",[]],["body/2.类型/2.3.类实例/2.3.类实例.html",[0,0.348,4,1.138,6,0.356,51,1.143,61,4.721,81,0.478,82,1.04,84,2.278,119,0.488,138,0.753,141,1.166,170,0.614,190,0.979,251,0.993,296,1.475,297,1.613,324,0.724,349,4.684,350,3.566,351,4.836,363,4.055,403,2.059,436,0.811,450,0.938,605,1.279,797,3.135,2722,6.446,2758,5.299]],["title/2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例",[2790,4.473]],["body/2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例",[0,0.338,4,1.129,6,0.349,51,1.122,81,0.469,82,1.027,84,2.25,119,0.479,138,0.56,141,1.086,170,0.603,190,0.967,251,0.974,296,1.457,297,1.584,322,4.793,324,0.71,349,4.641,350,3.545,351,4.807,403,2.04,436,0.796,450,0.921,605,1.255,797,2.331,979,2.449,1016,5.481,1019,4.494,1268,3.692,2722,6.367,2758,5.202,2791,6.423,2792,6.423,2793,6.423,2794,6.423,2795,6.423,2796,6.423,2797,6.423,2798,6.423,2799,6.423,2800,6.423,2801,6.423,2802,6.423,2803,6.423,2804,6.423,2805,6.423,2806,6.423,2807,6.423,2808,6.423,2809,6.423,2810,6.423,2811,6.423,2812,6.423,2813,6.423,2814,6.423]],["title/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html",[]],["body/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html",[0,0.347,4,0.627,5,1.092,6,0.427,51,0.99,81,0.572,82,1.267,88,3.288,89,3.671,119,0.585,138,0.494,141,0.643,147,0.776,170,0.532,190,0.643,250,1.69,251,0.86,284,3.886,296,0.968,324,0.627,350,1.891,403,1.914,436,0.703,450,0.813,481,1.14,494,6.983,605,1.108,606,1.325,607,1.495,608,1.573,609,1.657,610,1.837,797,2.058,1223,3.427,1415,2.537,1712,7.597,1799,3.589,2815,5.67,2816,7.345,2817,5.657,2818,5.851,2819,6.351,2820,4.231,2821,4.231,2822,5.169,2823,4.592,2824,7.148,2825,4.592]],["title/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数",[2826,4.473]],["body/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数",[0,0.326,6,0.44,81,0.591,82,1.285,88,3.907,118,3.113,119,0.604,250,2.413,494,5.368,522,5.508,979,3.086,1223,3.771,1712,6.04,2136,5.84,2602,6.908,2816,5.84,2817,5.84,2818,7.38,2819,8.009,2827,8.095,2828,8.095,2829,8.095,2830,8.095,2831,8.095,2832,8.095]],["title/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue",[1712,3.337]],["body/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue",[0,0.333,4,0.746,5,1.228,6,0.367,51,1.178,81,0.492,82,1.181,119,0.503,138,0.588,141,0.765,147,0.924,170,0.633,190,0.765,251,1.023,284,3.534,296,1.152,324,0.746,350,2.25,403,2.09,436,0.836,450,0.967,481,1.357,494,6.903,605,1.319,606,1.576,607,1.779,608,1.871,609,1.971,610,2.186,797,2.448,1223,2.572,1268,3.877,1415,3.019,1712,6.577,1799,4.27,2816,7.509,2817,4.867,2820,5.034,2821,5.034,2822,6.15,2823,5.464,2824,8.035,2833,6.747,2834,6.747,2835,6.747,2836,6.747,2837,6.747,2838,6.747,2839,8.035,2840,6.747,2841,6.747,2842,6.747,2843,6.747]],["title/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum",[284,1.61]],["body/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum",[35,5.122,98,7.734,284,3.809,494,6.01,979,3.456,2825,7.34,2844,9.064,2845,9.064,2846,9.064,2847,9.064,2848,9.064,2849,9.064,2850,9.064]],["title/2.类型/2.4.枚举实例/2.4.枚举实例.html",[]],["body/2.类型/2.4.枚举实例/2.4.枚举实例.html",[0,0.346,4,1.032,6,0.401,81,0.538,119,0.55,138,0.643,170,0.692,284,4.083,324,0.816,393,5.161,403,2.291,494,6.19,1223,3.559,1235,3.616,1799,5.908,2816,6.733,2817,6.733,2818,6.964,2820,6.964,2821,5.503,2851,7.375]],["title/2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例",[2852,4.473]],["body/2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例",[0,0.314,4,1.046,6,0.41,81,0.55,119,0.562,138,0.657,170,0.707,284,3.723,322,5.622,324,0.833,403,2.309,494,6.274,979,3.607,1223,3.607,1235,3.694,1799,5.988,2136,6.825,2816,6.825,2817,6.825,2818,7.059,2820,7.059,2821,5.622,2853,7.535,2854,7.535,2855,7.535,2856,7.535,2857,7.535,2858,7.535,2859,7.535,2860,7.535,2861,7.535,2862,7.535,2863,7.535,2864,7.535]],["title/2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum",[284,1.61]],["body/2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum",[284,3.423,1268,5.465,2865,9.509,2866,9.509,2867,9.509]],["title/2.类型/2.4.枚举实例/2.4.2.使用枚举.html",[]],["body/2.类型/2.4.枚举实例/2.4.2.使用枚举.html",[0,0.344,5,1.092,6,0.308,51,0.99,81,0.414,82,0.944,119,0.423,138,0.494,141,0.643,147,1.073,170,0.532,179,1.583,190,0.889,246,3.076,250,1.69,251,0.86,284,2.041,296,0.968,297,1.398,298,3.646,324,0.627,403,1.914,431,1.885,436,0.703,450,0.813,481,1.14,482,4.231,494,7.573,605,1.108,606,1.325,607,1.495,608,1.573,609,1.657,610,1.837,1223,2.162,1235,2.78,1661,2.041,1662,2.108,1663,2.258,1664,2.343,1665,2.593,1666,2.651,1667,2.78,1668,2.929,1799,3.589,2816,7.345,2817,6.997,2818,4.231,2819,6.351,2820,7.237,2821,4.231,2868,5.67,2869,4.395,2870,8.194,2871,7.148,2872,4.395,2873,4.091]],["title/2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举",[2874,4.473]],["body/2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举",[0,0.34,5,1.078,6,0.303,51,0.971,81,0.406,82,0.931,119,0.415,138,0.485,141,0.63,147,1.059,170,0.522,179,1.553,190,0.877,246,3.055,250,1.658,251,0.844,284,2.002,296,0.95,297,1.371,298,3.608,324,0.615,403,1.894,431,1.869,436,0.69,450,0.797,481,1.118,494,7.546,605,1.087,606,1.3,607,1.467,608,1.543,609,1.625,610,1.802,979,2.121,1223,2.121,1235,2.727,1661,2.002,1662,2.068,1663,2.215,1664,2.298,1665,2.543,1666,2.6,1667,2.727,1668,2.872,1799,3.52,2136,4.012,2816,7.293,2817,6.939,2818,4.15,2819,6.266,2820,7.177,2821,4.15,2870,8.111,2871,7.053,2875,5.562,2876,5.562,2877,5.562,2878,5.562,2879,5.562,2880,5.562,2881,5.562,2882,5.562,2883,5.562,2884,5.562,2885,5.562,2886,5.562,2887,5.562,2888,5.562,2889,5.562,2890,5.562,2891,5.562,2892,5.562]],["title/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html",[]],["body/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html",[0,0.344,4,1.039,6,0.452,81,0.606,82,1.209,119,0.62,120,4.784,121,4.443,138,0.819,141,0.7,142,3.897,144,1.957,157,2.05,160,4.315,164,2.92,203,2.314,209,2.527,252,1.78,261,2.29,264,1.307,335,3.065,349,4.867,350,3.351,351,4.545,403,2.3,433,3.115,785,3.145,869,6.505,1200,3.996,1212,4.453,1348,3.065,2893,5.627,2894,5.267,2895,3.996,2896,2.481,2897,3.996]],["title/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法",[2893,2.643,2898,2.9]],["body/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法",[0,0.337,4,0.915,6,0.45,81,0.604,82,1.206,119,0.617,121,4.427,128,5.23,138,0.721,141,0.695,142,3.886,144,1.944,157,2.045,160,4.303,164,2.899,203,2.298,209,2.509,252,1.767,261,2.279,264,1.297,335,3.043,349,4.853,350,3.342,351,4.532,403,2.295,433,3.101,722,3.304,785,3.123,869,6.487,979,2.337,1016,5.23,1200,3.968,1212,4.422,1348,3.043,2894,5.23,2895,3.968,2896,2.463,2897,3.968,2899,6.129,2900,6.129,2901,5.587,2902,6.129,2903,6.129,2904,6.129,2905,6.129,2906,5.23,2907,6.129,2908,5.587,2909,5.587,2910,5.587]],["title/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types",[157,0.333,160,0.731,2894,1.453,2895,1.102]],["body/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types",[0,0.333,4,1.011,6,0.388,81,0.521,82,1.1,119,0.532,121,4.322,138,0.622,141,0.808,142,4.123,144,2.262,157,2.078,160,4.33,164,3.374,203,2.674,209,2.92,252,2.057,261,2.518,264,1.51,335,3.542,349,4.426,350,3.047,351,4.133,403,2.146,433,3.426,785,3.635,869,6.883,1200,4.618,1212,5.146,1348,3.542,2896,2.867,2897,4.618,2908,6.503,2909,6.503,2910,6.503]],["title/2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html",[]],["body/2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html",[0,0.342,4,1.158,6,0.57,9,3.311,61,4.944,82,1.072,142,3.454,157,1.339,160,2.943,163,3.133,169,1.963,170,0.928,186,2.373,194,3.446,203,2.569,209,2.805,261,2.454,264,2.094,349,4.312,350,2.97,351,4.027,367,3.446,396,3.751,405,2.032,577,2.943,829,3.36,861,3.751,1221,5.407,1690,4.338,2294,5.55,2895,4.436,2911,6.853,2912,8.117,2913,8.117,2914,4.338,2915,3.751,2916,4.795]],["title/2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式",[2917,4.473]],["body/2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式",[0,0.335,4,1.092,6,0.569,9,3.302,82,1.069,118,2.625,142,3.445,157,1.334,160,2.931,163,3.121,169,1.956,170,0.833,186,2.363,194,3.433,203,2.559,209,2.794,261,2.448,264,2.09,349,4.301,350,2.962,351,4.017,367,3.433,396,3.736,405,2.027,577,2.931,829,3.347,861,3.736,979,2.602,1221,5.393,1690,4.321,2294,5.528,2895,4.419,2912,8.096,2913,8.096,2914,4.321,2915,3.736,2916,4.776,2918,6.826,2919,6.826,2920,6.826,2921,6.826,2922,6.222,2923,6.826,2924,6.826,2925,6.826,2926,6.826]],["title/2.类型/2.5.匿名结构/2.5.4.性能影响.html",[]],["body/2.类型/2.5.匿名结构/2.5.4.性能影响.html",[0,0.328,2647,7.775,2723,6.749,2927,7.983]],["title/2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响",[2928,4.473]],["body/2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响",[2929,9.406,2930,9.406,2931,9.406,2932,9.406,2933,9.406,2934,9.406,2935,9.406]],["title/2.类型/2.5.匿名结构/2.5.3.可选字段.html",[]],["body/2.类型/2.5.匿名结构/2.5.3.可选字段.html",[0,0.345,4,0.685,6,0.512,81,0.687,82,1.301,119,0.702,121,4.451,138,0.82,141,0.944,142,3.65,157,1.211,160,2.66,170,0.883,235,3.082,264,1.311,403,2.003,405,2.468,444,3.291,642,4.108,787,6.24,829,3.037,833,4.335,1081,5.017,1219,3.762,1707,3.391,1748,5.499,2062,4.999,2063,4.108,2895,6.092,2936,5.647,2937,4.335,2938,7.621]],["title/2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields",[142,0.832,1748,1.123,2936,1.955]],["body/2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields",[0,0.344,4,0.678,6,0.509,81,0.683,82,1.297,119,0.699,121,4.427,138,0.816,141,0.695,142,3.208,157,1.198,160,2.632,170,0.878,235,3.069,264,1.297,403,1.993,405,2.46,444,3.256,642,4.065,787,6.207,829,3.005,833,4.289,1081,4.964,1219,3.722,1707,3.355,1748,5.247,2062,4.972,2063,4.065,2895,6.059,2937,4.289,2938,7.58,2939,6.129,2940,6.129,2941,6.129,2942,6.129,2943,6.129,2944,4.964,2945,6.129,2946,6.129]],["title/2.类型/2.5.匿名结构/2.5.5.扩展.html",[]],["body/2.类型/2.5.匿名结构/2.5.5.扩展.html",[0,0.344,4,0.629,5,1.254,6,0.511,51,1.373,81,0.657,82,1.2,119,0.701,121,4.444,138,0.685,141,0.891,142,2.705,145,3.261,147,0.955,157,1.536,160,2.995,169,1.05,170,0.798,182,3.553,190,1.021,202,1.797,239,3.455,246,1.108,251,1.192,252,1.057,264,1.204,282,2.351,285,2.468,292,1.926,296,1.191,324,0.869,349,1.775,350,1.898,351,2.573,354,3.048,356,1.947,403,2.3,411,1.46,434,1.947,436,0.975,450,1.127,454,3.817,456,3.114,458,4.977,471,1.947,481,1.402,488,1.574,586,1.279,597,1.797,600,1.64,605,1.536,606,0.857,607,0.967,608,1.017,609,1.071,822,3.455,828,1.676,1200,2.373,1228,3.451,1975,5.089,2895,2.373,2896,1.473,2897,2.373,2947,3.666,2948,6.357,2949,6.441,2950,3.342,2951,2.969,2952,3.455,2953,2.444,2954,1.947,2955,2.006,2956,2.565,2957,3.342,2958,2.144,2959,7.166,2960,6.357,2961,4.625,2962,3.342,2963,2.969,2964,3.342,2965,5.187,2966,5.187]],["title/2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展",[2967,4.473]],["body/2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展",[0,0.344,4,0.607,5,1.23,6,0.502,51,1.338,81,0.645,82,1.183,118,1.344,119,0.689,121,4.367,138,0.668,141,0.868,142,2.624,145,3.164,147,0.926,157,1.497,160,2.906,169,1.002,170,0.781,182,3.448,190,1.001,202,1.714,220,2.984,239,3.33,246,1.056,251,1.162,252,1.008,264,1.161,282,2.266,285,2.379,292,1.856,296,1.155,324,0.847,349,1.693,350,1.829,351,2.48,354,2.989,356,1.857,403,2.277,411,1.392,434,1.857,436,0.95,450,1.098,454,3.703,456,3.002,458,4.868,471,1.857,481,1.36,488,1.502,586,1.22,597,1.714,600,1.565,605,1.497,606,0.817,607,0.922,608,0.97,609,1.022,822,3.33,828,1.599,1033,2.609,1200,2.264,1228,3.375,1975,4.99,2895,2.264,2896,1.405,2897,2.264,2906,2.984,2948,6.168,2949,6.34,2950,3.187,2951,2.831,2952,3.33,2953,2.355,2954,1.857,2955,1.914,2956,2.447,2957,3.187,2958,2.045,2959,6.984,2960,6.168,2961,4.487,2962,3.187,2963,2.831,2964,3.187,2965,4.999,2966,4.999,2968,3.496,2969,3.496,2970,3.496,2971,3.496,2972,5.484,2973,3.496,2974,3.496,2975,3.496,2976,3.496,2977,3.496,2978,3.496,2979,3.496,2980,3.496,2981,3.496,2982,3.496,2983,3.496]],["title/2.类型/2.5.匿名结构/2.5.匿名结构.html",[]],["body/2.类型/2.5.匿名结构/2.5.匿名结构.html",[0,0.35,4,0.458,5,1.048,6,0.549,81,0.69,82,1.244,89,2.684,119,0.706,120,3.213,121,1.961,138,0.856,141,0.95,147,0.856,170,0.887,190,0.708,235,2.567,239,3.796,241,3.533,250,2.681,296,1.067,324,0.832,336,2.685,341,2.749,349,4.892,350,3.568,351,4.675,403,2.15,436,0.933,440,1.997,450,0.594,464,3.796,481,1.513,591,3.104,787,4.146,1056,3.957,1523,2.085,1675,2.749,1676,4.146,1777,2.624,1939,3.265,2062,2.202,2101,3.357,2304,3.093,2984,3.779,2985,3.779]],["title/2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构",[2986,4.473]],["body/2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构",[0,0.348,4,0.435,5,1.015,6,0.54,81,0.676,82,1.225,98,3.354,119,0.691,121,1.859,128,3.354,138,0.84,141,0.924,147,0.822,170,0.824,190,0.68,235,2.498,239,3.646,241,3.393,250,2.619,296,1.025,324,0.806,336,2.578,349,4.812,350,3.523,351,4.605,403,2.115,436,0.903,440,1.917,450,0.563,464,3.646,481,1.465,591,2.981,787,3.981,979,2.778,1056,3.8,1184,2.75,1185,3.583,1268,2.259,1523,1.977,1675,2.606,1676,3.981,1777,2.488,1939,3.16,2062,2.088,2101,3.183,2122,3.183,2304,2.933,2746,3.583,2922,3.583,2984,3.583,2985,3.583,2987,3.93,2988,3.93,2989,3.93,2990,3.93,2991,3.93,2992,3.93,2993,3.93,2994,3.583,2995,3.93,2996,3.93,2997,3.93,2998,3.93,2999,3.93,3000,3.93,3001,3.93,3002,3.93,3003,3.93,3004,3.93,3005,3.93,3006,3.93,3007,3.93,3008,3.93,3009,3.93,3010,3.93,3011,3.93,3012,3.93,3013,3.93,3014,3.93,3015,3.93,3016,3.93,3017,3.93,3018,3.93]],["title/2.类型/2.6.函数类型/2.6.1.可选参数.html",[]],["body/2.类型/2.6.函数类型/2.6.1.可选参数.html",[0,0.348,4,0.655,5,1.125,6,0.594,51,1.034,81,0.432,119,0.442,138,0.516,141,0.671,147,1.106,170,0.556,190,0.915,251,0.898,292,3.696,296,1.011,297,1.46,324,0.655,403,1.958,405,2.254,431,1.92,436,0.734,439,4.09,440,3.408,450,0.849,481,1.191,605,1.157,606,1.384,1523,5.492,2647,5.828,3019,5.397,3020,4.418,3021,5.921]],["title/2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数",[3022,4.473]],["body/2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数",[0,0.34,5,1.117,6,0.592,51,1.024,81,0.428,119,0.437,138,0.511,141,0.664,147,1.098,170,0.55,190,0.909,251,0.889,292,3.686,296,1.001,297,1.445,324,0.648,403,1.708,405,2.245,431,1.912,436,0.727,439,4.082,440,3.397,450,0.84,481,1.179,605,1.146,606,1.37,979,3.059,1184,6.4,1523,5.477,2017,4.543,2901,5.343,2906,6.846,3020,4.373,3023,5.861,3024,5.861,3025,5.861,3026,5.861,3027,5.861,3028,5.861,3029,5.861,3030,5.861,3031,5.861,3032,5.343,3033,5.861,3034,5.861,3035,5.861,3036,5.861,3037,5.861,3038,5.861,3039,5.861,3040,5.861,3041,5.861]],["title/2.类型/2.6.函数类型/2.6.2.默认值.html",[]],["body/2.类型/2.6.函数类型/2.6.2.默认值.html",[0,0.348,4,0.856,5,1.078,6,0.569,51,0.971,81,0.565,119,0.577,138,0.675,141,0.63,147,1.218,170,0.726,190,1.008,251,0.844,292,3.256,296,0.95,297,1.908,324,0.615,403,1.184,405,1.766,409,3.52,431,1.869,436,0.69,439,4.224,440,3.072,441,5.333,450,0.797,481,2.159,605,1.087,606,1.3,1523,5.264,3019,5.07,3020,4.15,3042,5.562]],["title/2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值",[3043,4.473]],["body/2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值",[0,0.346,4,0.609,5,1.07,6,0.568,51,0.962,81,0.561,119,0.574,138,0.67,141,0.624,147,1.212,170,0.721,190,1.003,251,0.836,292,3.242,296,0.941,297,1.895,324,0.609,403,1.173,405,1.754,431,1.862,436,0.683,439,4.218,440,3.059,441,5.317,450,0.79,481,2.153,605,1.077,606,1.287,979,2.93,1184,3.855,1523,5.248,3020,4.111,3044,5.509,3045,5.509,3046,5.509,3047,5.509,3048,5.509,3049,5.509,3050,5.509,3051,5.509,3052,4.701,3053,5.509,3054,5.509,3055,5.509]],["title/2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html",[]],["body/2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html",[0,0.346,6,0.423,81,0.567,82,0.935,91,4.391,119,0.58,138,0.677,170,0.729,250,2.316,283,3.947,324,0.859,405,2.393,436,0.963,1056,4.918,1415,3.477,1596,6.022,1669,4.013,2353,6.292,2354,6.292,3056,7.77,3057,7.083,3058,7.083,3059,7.083,3060,7.083]],["title/2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数",[3061,4.473]],["body/2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数",[0,0.338,6,0.425,81,0.57,82,0.939,115,6.049,119,0.582,138,0.68,170,0.732,250,2.326,283,3.958,324,0.863,405,2.398,436,0.968,1056,4.94,1268,5.558,1669,4.031,2353,6.32,2354,6.32,2839,7.115,3057,7.115,3058,7.115,3059,7.115,3060,7.115,3062,7.805,3063,7.805,3064,7.805,3065,7.805,3066,7.805,3067,7.805,3068,7.805,3069,7.805]],["title/2.类型/2.6.函数类型/2.6.函数类型.html",[]],["body/2.类型/2.6.函数类型/2.6.函数类型.html",[0,0.348,4,1.037,5,1.154,6,0.51,51,1.074,81,0.449,92,4.437,119,0.459,138,0.536,141,0.697,147,1.135,157,1.833,170,0.577,190,0.939,251,0.933,296,1.05,297,1.517,300,2.287,324,0.68,403,2.387,405,2.29,436,0.763,439,3.008,440,2.647,450,0.882,1179,4.691,1523,5.046,1972,4.369,3020,6.186,3070,4.079,3071,5.607]],["title/2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型",[3072,4.473]],["body/2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型",[0,0.335,4,0.906,5,1.141,6,0.505,51,1.056,81,0.441,118,2.324,119,0.451,138,0.527,141,0.685,147,1.121,157,1.816,170,0.567,190,0.928,251,0.917,296,1.032,297,1.49,300,2.247,324,0.668,403,2.378,405,2.274,436,0.749,439,2.973,440,2.616,450,0.866,1179,4.658,1184,5.732,1523,5.01,1972,4.343,2017,4.685,2380,4.685,3020,6.113,3071,5.51,3073,6.044,3074,5.51,3075,6.044,3076,6.044,3077,6.044,3078,6.044,3079,6.044,3080,6.044,3081,6.044,3082,6.044,3083,6.044,3084,6.044,3085,6.044,3086,6.044,3087,6.044,3088,6.044,3089,6.044,3090,6.044,3091,6.044,3092,6.044,3093,8.192,3094,6.044,3095,6.044,3096,6.044,3097,6.044,3098,6.044,3099,6.044,3100,6.044]],["title/2.类型/2.7.动态类型/2.7.2.实现Dynamic.html",[]],["body/2.类型/2.7.动态类型/2.7.2.实现Dynamic.html",[0,0.343,5,1.327,6,0.518,51,1.33,81,0.642,82,1.147,84,2.512,88,2.787,119,0.569,138,0.664,141,1.08,142,2.955,147,1.043,170,0.715,175,3.025,190,1.137,251,1.156,283,4.254,288,3.882,296,1.775,297,1.341,301,3.074,324,0.843,403,1.872,405,2.289,431,1.481,436,0.945,440,1.737,450,1.092,481,1.532,605,1.489,606,1.78,607,2.009,608,2.113,609,2.226,650,5.689,2720,4.059,3101,5.44,3102,6.945,3103,7.121,3104,8.015,3105,4.959,3106,4.959,3107,4.959]],["title/2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic",[3108,4.473]],["body/2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic",[0,0.344,5,1.302,6,0.508,51,1.291,81,0.627,82,1.125,84,2.465,88,2.704,119,0.552,138,0.645,141,1.059,142,2.867,147,1.012,170,0.694,190,1.118,251,1.121,283,4.196,288,3.767,296,1.75,297,1.285,301,2.945,324,0.818,403,1.574,405,2.253,431,1.437,436,0.916,440,1.665,450,1.059,481,1.486,605,1.445,606,1.727,607,1.95,608,2.05,609,2.16,650,5.611,3102,6.739,3103,5.987,3104,7.831,3105,4.751,3106,4.751,3107,4.751,3109,5.212,3110,5.212,3111,5.212,3112,5.212,3113,5.212,3114,5.212,3115,5.212,3116,5.212,3117,5.212,3118,5.212,3119,5.212,3120,5.212,3121,5.212,3122,5.212,3123,5.212]],["title/2.类型/2.7.动态类型/2.7.动态类型.html",[]],["body/2.类型/2.7.动态类型/2.7.动态类型.html",[0,0.349,4,1.214,5,1.036,6,0.539,51,0.918,61,3.794,66,5.699,81,0.63,82,1.13,119,0.789,122,2.924,138,0.459,141,0.596,147,0.72,170,0.493,186,1.821,190,0.596,250,2.218,251,0.798,261,1.45,283,4.779,300,1.956,324,0.582,341,3.488,354,2.518,403,1.12,431,1.022,436,0.652,440,2.376,450,0.754,481,1.058,605,1.028,694,2.547,743,3.924,797,1.908,906,2.794,1975,2.972,3070,3.488,3124,3.794,3125,4.794,3126,4.794,3127,4.794,3128,4.794,3129,3.924,3130,6.782,3131,4.794,3132,4.794,3133,4.794]],["title/2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型",[3134,4.473]],["body/2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型",[0,0.333,4,1.163,5,1.023,6,0.535,35,4.151,51,0.902,66,5.654,81,0.624,82,1.12,119,0.734,133,4.408,138,0.45,141,0.585,147,0.707,170,0.485,186,1.789,190,0.585,250,2.19,251,0.784,261,1.424,283,4.637,300,1.921,324,0.571,354,2.486,403,1.1,431,1.004,436,0.64,440,2.346,450,0.74,481,1.039,522,3.515,605,1.01,694,2.502,906,2.744,1019,3.615,1268,2.969,1567,3.615,1929,4.408,1975,2.919,2380,4.004,3074,4.709,3125,4.709,3126,4.709,3127,4.709,3128,4.709,3129,3.855,3130,6.696,3131,4.709,3132,4.709,3133,4.709,3135,5.166,3136,5.166,3137,5.166,3138,5.166,3139,5.166,3140,5.166,3141,5.166,3142,5.166,3143,5.166,3144,5.166,3145,5.166,3146,5.166,3147,5.166,3148,5.166,3149,5.166,3150,5.166,3151,5.166,3152,5.166,3153,5.166,3154,5.166,3155,5.166,3156,5.166,3157,5.166,3158,5.166,3159,5.166,3160,5.166,3161,5.166,3162,5.166,3163,5.166,3164,5.166,3165,5.166,3166,5.166,3167,5.166,3168,6.268,3169,5.166,3170,5.166,3171,5.166,3172,5.166,3173,5.166,3174,5.166,3175,5.166,3176,5.166,3177,5.166,3178,5.166,3179,5.166,3180,5.166,3181,5.166,3182,5.166,3183,5.166,3184,5.166]],["title/2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html",[]],["body/2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html",[0,0.344,5,1.165,6,0.441,7,0.664,9,1.148,51,1.174,81,0.592,82,1.214,84,2.49,88,3.453,119,0.714,138,0.586,141,0.851,142,1.198,144,1.576,146,1,147,1.072,157,1.755,164,0.831,170,0.704,173,1.739,179,0.862,189,1.028,190,1.217,191,1.069,233,0.7,250,1.858,251,1.02,252,1.191,253,0.993,261,1.969,264,1.32,277,4.34,279,5.255,290,2.615,296,1.654,297,1.93,324,0.897,332,0.841,354,1.398,403,2.316,405,0.705,409,1.112,410,1.112,411,0.7,412,1.23,421,1.23,431,0.6,433,1.863,436,0.773,439,1.12,444,0.934,450,0.893,465,1.288,472,0.67,481,1.574,507,0.862,586,1.733,591,0.872,605,1.218,606,1.161,607,1.31,608,1.378,609,1.452,610,1.609,618,0.803,625,1.23,641,0.77,643,1.396,785,3.176,861,2.719,867,0.713,871,1.067,872,1.23,902,2.304,907,2.416,920,1.067,1206,1.745,1223,4.13,1348,0.872,1352,2.161,1415,1.382,1499,1.311,1534,0.993,1661,1.788,1662,1.847,1663,1.979,1664,2.053,1665,2.272,1666,1.444,1667,0.862,1668,0.908,1669,0.908,1670,1.028,2896,2.505,2953,0.755,2955,0.962,3185,1.311,3186,6.4,3187,1.757,3188,4.529,3189,2.501,3190,4.529,3191,1.5,3192,2.815,3193,2.815,3194,2.815,3195,2.815,3196,2.815,3197,2.815,3198,2.815,3199,1.067,3200,4.221,3201,0.962,3202,2.739,3203,1.311,3204,1.028,3205,1.64,3206,1.423,3207,1.423,3208,1.23,3209,2.501,3210,1.423,3211,1.423,3212,1.112,3213,1.23,3214,0.884,3215,1.423,3216,2.501,3217,3.476,3218,2.815,3219,2.161,3220,2.304,3221,2.501,3222,1.23,3223,2.501,3224,1.23,3225,1.423,3226,1.602]],["title/2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换",[3227,4.473]],["body/2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换",[0,0.343,5,1.138,6,0.415,7,0.627,9,1.091,51,1.137,81,0.557,82,1.197,84,2.446,88,3.393,118,1.128,119,0.692,138,0.525,141,0.828,142,1.138,144,1.512,146,0.951,147,1.044,157,1.72,164,0.784,170,0.651,173,1.662,179,0.819,189,0.97,190,1.204,191,1.016,233,0.661,250,1.795,251,0.988,252,1.138,253,0.937,261,1.911,264,1.275,277,4.275,279,5.16,290,2.519,296,1.628,297,1.88,324,0.767,332,0.794,354,1.336,403,2.293,405,0.67,410,1.05,411,0.661,412,1.161,421,1.161,431,0.57,433,1.787,436,0.747,439,1.065,444,0.881,450,0.863,465,1.224,472,0.632,481,1.534,507,0.813,586,1.663,591,0.823,605,1.177,606,1.114,607,1.257,608,1.322,609,1.393,610,1.544,618,0.758,625,1.161,641,0.727,643,1.327,722,0.894,785,3.068,861,2.609,867,0.673,871,1.007,872,1.161,902,2.189,907,2.308,920,1.007,979,0.632,1033,2.189,1184,1.161,1206,1.658,1223,4.07,1348,0.823,1352,2.053,1415,1.313,1499,1.238,1534,0.937,1661,1.716,1662,1.773,1663,1.899,1664,1.97,1665,2.18,1666,1.372,1667,0.813,1668,0.857,1669,0.857,1670,0.97,2896,2.42,2953,0.712,2955,0.908,3032,1.512,3052,1.415,3186,6.278,3188,4.346,3189,2.376,3190,4.346,3192,2.675,3193,2.675,3194,2.675,3195,2.675,3196,2.675,3197,2.675,3198,2.675,3199,1.007,3200,4.066,3201,0.908,3202,2.617,3203,1.238,3204,0.97,3205,1.559,3206,1.343,3207,1.343,3208,1.161,3209,2.376,3210,1.343,3211,1.343,3212,1.05,3213,1.161,3214,0.834,3215,1.343,3216,2.376,3217,3.336,3218,2.675,3219,2.053,3220,2.189,3221,2.376,3222,1.161,3223,2.376,3224,1.161,3225,1.343,3226,1.512,3228,1.659,3229,1.659,3230,1.659,3231,1.659,3232,1.659,3233,1.659,3234,1.659,3235,1.659,3236,1.659,3237,1.659,3238,1.659,3239,1.659,3240,4.967,3241,3.597,3242,2.934,3243,1.659,3244,1.659,3245,1.659,3246,1.659,3247,1.659,3248,1.512,3249,1.659,3250,1.659,3251,1.659,3252,1.659,3253,1.512,3254,1.659,3255,1.659,3256,1.659,3257,1.659,3258,1.659,3259,1.659,3260,1.659,3261,1.659,3262,1.659,3263,1.659,3264,1.659,3265,1.659,3266,2.934,3267,1.659,3268,1.659,3269,2.934,3270,1.659,3271,1.659,3272,1.659,3273,1.659,3274,1.659,3275,1.659,3276,1.659,3277,1.659,3278,1.659,3279,1.659]],["title/2.类型/2.8.抽象类型/2.8.2.运算符重载.html",[]],["body/2.类型/2.8.抽象类型/2.8.2.运算符重载.html",[0,0.347,5,1.285,6,0.442,9,1.448,51,1.265,81,0.529,82,0.977,84,2.434,119,0.653,138,0.632,141,0.821,147,1.198,170,0.68,190,1.151,250,1.777,251,1.099,277,3.175,288,1.985,290,2.757,296,1.64,297,1.786,324,0.801,362,3.154,403,2.276,405,1.853,431,1.578,436,0.898,439,3.175,440,1.904,450,1.038,465,1.625,481,1.457,488,1.673,603,5.867,605,1.416,606,1.693,607,1.911,608,2.009,609,2.117,610,2.347,1223,2.273,1661,2.146,1662,1.448,1663,1.551,1682,2.726,1972,1.625,2072,4.449,3185,2.906,3186,7.482,3280,3.551,3281,6.604,3282,5.436,3283,5.436,3284,3.551,3285,3.551,3286,3.551,3287,3.551,3288,3.551,3289,3.154,3290,3.551,3291,5.436,3292,5.436,3293,3.551,3294,3.551,3295,6.604,3296,3.324,3297,3.551,3298,3.551,3299,3.551,3300,3.154]],["title/2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载",[3301,4.473]],["body/2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载",[0,0.346,5,1.257,6,0.429,9,1.372,51,1.223,81,0.511,82,0.949,84,2.381,119,0.637,138,0.61,141,0.794,147,1.168,170,0.657,190,1.133,250,1.705,251,1.062,277,3.068,290,2.643,296,1.608,297,1.726,324,0.774,362,2.987,403,2.174,405,1.8,431,1.533,436,0.868,439,3.097,440,1.826,450,1.003,481,1.408,488,1.584,603,5.67,605,1.369,606,1.636,607,1.847,608,1.942,609,2.046,610,1.852,979,2.18,1223,2.18,1661,2.058,1662,1.372,1663,1.469,1682,2.581,1972,1.539,2072,4.267,3186,7.387,3281,6.383,3282,5.212,3283,5.212,3284,3.363,3285,3.363,3286,3.363,3287,3.363,3288,3.363,3289,2.987,3290,3.363,3291,5.212,3292,5.212,3293,3.363,3294,3.363,3295,5.212,3297,3.363,3298,3.363,3299,3.363,3300,2.987,3302,3.689,3303,3.689,3304,3.689,3305,3.689,3306,3.689,3307,3.689,3308,3.689,3309,3.689,3310,3.689,3311,3.689,3312,3.689,3313,3.689,3314,3.689,3315,3.689,3316,3.689,3317,3.689,3318,3.689,3319,3.689,3320,3.689,3321,3.689,3322,3.689,3323,3.689,3324,3.689,3325,3.689,3326,3.689,3327,3.689,3328,3.689,3329,3.689,3330,3.689,3331,3.689,3332,3.689,3333,3.689,3334,3.689,3335,3.689,3336,3.689]],["title/2.类型/2.8.抽象类型/2.8.3.数组访问.html",[]],["body/2.类型/2.8.抽象类型/2.8.3.数组访问.html",[0,0.346,4,0.907,5,1.253,6,0.559,51,1.432,81,0.657,82,0.838,84,2.162,91,4.633,119,0.612,138,0.715,141,0.789,147,0.953,170,0.769,190,1.166,250,1.43,251,1.056,277,2.102,290,3.22,296,1.536,297,2.218,324,0.907,403,1.021,405,1.095,426,3.052,431,1.353,436,1.017,439,2.527,440,3.052,450,0.998,477,5.295,481,0.964,605,0.937,606,1.121,607,1.265,608,1.33,609,1.401,1106,4.093,1690,4.408,1971,3.597,2006,5.4,2177,6.491,3185,3.579,3337,3.884,3338,8.329,3339,6.348,3340,3.036,3341,3.036,3342,4.372,3343,6.348,3344,4.372,3345,4.372,3346,4.372,3347,4.372,3348,4.372,3349,4.372]],["title/2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问",[3350,4.473]],["body/2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问",[0,0.343,4,0.745,5,1.226,6,0.551,51,1.176,81,0.643,82,0.811,84,2.106,91,4.513,118,2.59,119,0.596,138,0.696,141,0.763,147,0.922,170,0.749,190,1.149,250,1.366,251,1.022,277,2.008,290,3.114,296,1.503,297,2.171,324,0.883,403,0.975,405,1.046,426,2.951,431,1.309,436,0.99,439,2.444,440,2.996,450,0.965,477,5.21,481,0.921,605,0.895,606,1.071,607,1.208,608,1.271,609,1.339,979,1.747,1037,4.177,1690,4.263,1971,3.478,2006,5.301,2177,6.351,2676,4.177,2696,6.14,3338,8.211,3339,6.14,3340,2.9,3341,2.9,3342,4.177,3343,6.14,3344,4.177,3345,4.177,3346,4.177,3347,4.177,3348,4.177,3349,4.177,3351,4.582,3352,4.582,3353,4.582,3354,4.582,3355,4.582,3356,4.582,3357,4.582,3358,4.582,3359,4.582,3360,4.582,3361,4.582,3362,4.582,3363,4.582,3364,4.582,3365,4.582,3366,4.582,3367,4.582,3368,4.582,3369,4.582,3370,4.582,3371,4.582,3372,4.582,3373,4.582]],["title/2.类型/2.8.抽象类型/2.8.4.选择函数.html",[]],["body/2.类型/2.8.抽象类型/2.8.4.选择函数.html",[0,0.345,5,1.157,6,0.452,51,1.078,81,0.451,82,1,84,2.477,119,0.461,138,0.538,141,0.7,147,1.137,170,0.579,190,1.139,251,0.936,277,2.705,296,1.604,297,2.049,324,0.683,403,1.314,405,1.897,436,0.765,440,1.971,450,0.885,453,4.2,477,3.279,481,1.241,605,1.206,606,1.442,607,2.191,608,1.712,609,1.804,610,2,1223,3.581,1228,4.381,1661,2.222,1662,2.295,2006,4.696,3186,7.853,3191,5.267,3374,4.999,3375,6.729,3376,5.627,3377,5.627,3378,5.627]],["title/2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数",[3379,4.473]],["body/2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数",[0,0.341,5,1.138,6,0.445,35,3.404,51,1.052,81,0.44,82,0.984,84,2.446,118,3.143,119,0.45,138,0.525,141,0.683,147,1.119,170,0.565,190,1.127,251,0.914,277,2.64,296,1.584,297,2.015,324,0.666,403,1.282,405,1.865,436,0.747,440,1.924,450,0.863,477,3.2,481,1.211,510,5.14,605,1.177,606,1.407,607,1.588,608,1.671,609,1.76,610,1.951,1223,3.537,1228,4.349,1661,2.168,1662,2.24,2006,4.619,2602,5.14,3186,7.809,3374,4.878,3375,6.619,3376,5.491,3377,5.491,3378,5.491,3380,6.023,3381,6.023,3382,6.023,3383,6.023,3384,6.023,3385,6.023,3386,6.023,3387,6.023,3388,6.023,3389,6.023,3390,6.023,3391,6.023]],["title/2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html",[]],["body/2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html",[0,0.345,4,0.848,5,1.068,6,0.417,9,2.042,51,1.339,81,0.56,82,1.255,119,0.572,138,0.669,141,0.622,146,2.484,147,1.05,170,0.72,190,1.084,229,4.486,246,2.89,251,1.163,261,2.114,277,2.407,284,2.761,296,0.938,297,2.179,298,3.11,324,0.848,403,1.169,409,3.476,436,0.951,450,1.099,481,1.542,482,4.098,605,1.499,606,1.283,607,1.448,608,1.523,609,1.605,610,1.779,784,3.555,1591,3.212,1661,1.977,1662,2.042,1663,2.187,1664,2.269,3392,5.492,3393,8.056,3394,6.991,3395,8.056,3396,6.991,3397,6.991,3398,9.503,3399,5.006,3400,6.991,3401,5.006,3402,5.006,3403,5.006,3404,5.006,3405,4.447]],["title/2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型",[3406,4.473]],["body/2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型",[0,0.344,4,0.828,5,1.043,6,0.407,9,1.973,51,1.308,81,0.547,82,1.241,118,2.041,119,0.559,138,0.653,141,0.601,146,2.426,147,1.025,170,0.703,190,1.068,229,4.38,246,2.847,251,1.136,261,2.064,277,2.326,284,2.695,296,0.906,297,2.139,298,3.037,324,0.828,403,1.13,436,0.928,450,1.073,481,1.506,605,1.464,606,1.24,607,1.4,608,1.472,609,1.551,610,1.719,1591,3.104,1661,1.911,1662,1.973,1663,2.114,1664,2.193,3052,4.529,3248,4.838,3393,7.909,3394,6.826,3395,7.909,3396,6.826,3397,6.826,3398,9.4,3399,4.838,3400,6.826,3401,4.838,3402,4.838,3403,4.838,3404,4.838,3407,4.838,3408,5.308,3409,5.308,3410,5.308,3411,5.308,3412,5.308,3413,5.308,3414,5.308,3415,5.308,3416,5.308,3417,5.308,3418,5.308,3419,5.308]],["title/2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html",[]],["body/2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html",[0,0.346,4,1.028,5,1.294,6,0.446,9,2.247,51,1.056,81,0.598,82,0.986,84,2.16,119,0.611,138,0.714,141,0.685,142,2.344,147,0.827,170,0.769,190,1.053,251,0.917,277,2.649,284,2.176,290,2.794,296,1.399,324,0.668,354,2.773,436,0.749,439,2.193,450,0.866,481,1.869,605,1.181,606,1.412,607,1.594,608,1.676,609,1.766,784,3.913,1591,3.535,1599,7.119,1975,4.629,2961,4.008,3420,6.044,3421,7.434,3422,5.51,3423,6.634,3424,7.468,3425,7.468,3426,5.51,3427,5.51,3428,5.51]],["title/2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段",[3429,4.473]],["body/2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段",[0,0.341,4,0.889,5,1.276,6,0.437,9,2.187,35,3.323,51,1.027,81,0.587,82,0.968,84,2.121,119,0.6,138,0.701,141,0.666,142,2.281,147,0.805,170,0.754,190,1.038,251,0.892,277,2.577,284,2.117,290,2.719,296,1.373,324,0.65,354,1.991,436,0.729,439,2.134,450,0.843,481,1.842,605,1.149,606,1.374,607,1.551,608,1.631,609,1.718,979,3.066,1591,3.44,1599,7.061,1975,4.544,2961,3.9,3407,5.361,3421,7.35,3422,5.361,3423,6.512,3424,7.33,3425,7.33,3426,5.361,3427,5.361,3430,5.881,3431,5.881,3432,5.881,3433,5.881,3434,5.881,3435,5.881,3436,5.881,3437,5.881,3438,5.881,3439,5.881,3440,5.881,3441,5.881,3442,5.881,3443,5.881,3444,5.881,3445,5.881,3446,5.881,3447,5.881,3448,5.881,3449,5.881]],["title/2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html",[]],["body/2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html",[0,0.346,4,1.282,3280,7.815,3337,6.943,3450,7.316,3451,6.943,3452,6.943]],["title/2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象",[3453,4.473]],["body/2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象",[4,1.284,3451,6.977,3452,6.977,3454,8.615,3455,8.615,3456,8.615,3457,8.615,3458,8.615,3459,8.615,3460,8.615,3461,8.615,3462,8.615,3463,8.615,3464,8.615,3465,8.615,3466,8.615,3467,8.615,3468,8.615,3469,8.615,3470,8.615]],["title/2.类型/2.8.抽象类型/2.8.抽象类型.html",[]],["body/2.类型/2.8.抽象类型/2.8.抽象类型.html",[0,0.341,4,0.762,5,1.132,6,0.442,7,2.26,9,2.562,81,0.593,82,0.829,84,2.144,119,0.514,138,0.601,141,1.102,142,2.672,145,1.357,146,1.531,147,0.818,149,2.67,151,3.377,157,2.153,159,1.786,160,1.246,161,1.246,165,2.542,167,1.459,168,1.925,169,1.354,170,0.646,175,1.614,176,1.798,179,1.668,187,1.925,190,1.013,197,1.758,203,1.088,209,1.188,230,1.668,233,1.156,235,0.889,252,0.837,256,1.542,264,1.265,272,1.668,276,1.222,277,4.906,284,1.045,286,2.764,288,2.408,290,3.962,295,1.588,296,1.176,324,0.523,325,1.975,327,1.588,329,1.389,336,1.246,356,1.542,366,1.499,367,1.459,372,2.67,373,1.459,387,2.928,398,1.925,403,2.111,409,1.837,411,1.882,425,1.729,431,0.918,433,1.772,434,1.542,455,2.166,456,1.588,472,1.802,476,2.166,481,1.635,504,1.542,505,1.925,507,1.423,586,1.013,617,2.031,628,2.51,630,1.299,632,2.031,636,2.586,643,1.313,647,1.499,785,2.408,788,1.499,867,1.916,871,1.762,886,2.031,919,1.698,920,1.762,1348,1.441,1406,2.031,1545,2.317,1800,1.342,1939,2.988,2305,2.031,2306,2.031,2336,1.698,2896,1.899,2914,1.837,2952,1.762,2954,1.542,2956,2.031,3186,3.306,3191,2.477,3201,1.588,3203,5.659,3205,1.542,3208,2.031,3471,7.411,3472,2.902,3473,4.307,3474,4.307,3475,4.307,3476,3.306,3477,2.646,3478,1.588,3479,2.646,3480,2.87,3481,1.837,3482,3.306,3483,3.306,3484,null,3485,3.63,3486,2.646,3487,1.837,3488,1.64,3489,1.925,3490,4.307,3491,1.542,3492,2.031,3493,2.166,3494,2.166,3495,2.031,3496,2.35,3497,2.87,3498,2.35,3499,2.646,3500,2.166,3501,2.646,3502,2.646,3503,1.762,3504,2.646,3505,2.031,3506,2.166,3507,2.646,3508,2.35,3509,2.166,3510,1.762,3511,2.031,3512,2.646,3513,2.35,3514,2.646,3515,1.542,3516,2.646,3517,2.646,3518,2.166,3519,2.35,3520,1.542,3521,2.646,3522,2.35]],["title/2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型",[3523,4.473]],["body/2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型",[0,0.334,4,0.65,5,1.119,6,0.437,7,2.221,9,2.185,29,2.043,35,1.6,81,0.587,82,0.817,84,2.119,118,1.089,119,0.507,138,0.592,141,1.068,142,2.633,145,1.324,146,1.5,147,0.804,149,2.617,151,3.32,157,2.144,159,1.751,160,1.216,161,1.216,165,2.499,167,1.424,168,1.878,169,1.327,170,0.637,179,1.293,187,1.878,190,1.003,197,1.728,203,1.062,209,1.159,233,1.128,235,0.867,252,0.816,256,1.504,264,1.244,276,1.192,277,4.887,284,1.019,286,2.709,288,2.36,290,3.921,295,1.55,296,1.159,322,2.113,324,0.512,327,1.55,329,1.355,336,1.216,356,1.504,366,1.462,367,1.424,372,2.617,373,1.424,387,2.87,398,1.878,403,2.054,411,1.844,431,0.9,433,1.736,434,1.504,455,2.113,456,1.55,472,1.766,476,2.113,481,1.616,504,1.504,505,1.878,507,1.388,510,2.416,586,0.988,617,1.981,628,2.46,630,1.267,632,1.981,636,2.535,643,1.281,647,1.462,722,1.526,785,2.36,788,1.462,867,1.878,871,1.719,886,1.981,919,1.656,920,1.719,1348,1.406,1406,1.981,1545,2.271,1800,1.309,1939,2.945,2305,1.981,2306,1.981,2622,2.293,2785,2.581,2896,1.861,2914,1.792,2952,1.719,2954,1.504,2956,1.981,3186,3.24,3201,1.55,3203,5.586,3205,1.504,3208,1.981,3253,2.581,3471,7.326,3473,4.222,3474,4.222,3475,4.222,3476,3.24,3477,2.581,3478,1.55,3479,2.581,3480,2.812,3481,1.792,3482,3.24,3483,3.24,3484,null,3485,3.568,3486,2.581,3487,1.792,3488,1.6,3489,1.878,3490,4.222,3491,1.504,3492,1.981,3493,2.113,3494,2.113,3495,1.981,3496,2.293,3497,2.812,3498,2.293,3499,2.581,3500,2.113,3501,2.581,3502,2.581,3503,1.719,3504,2.581,3505,1.981,3506,2.113,3507,2.581,3508,2.293,3509,2.113,3510,1.719,3511,1.981,3512,2.581,3513,2.293,3514,2.581,3515,1.504,3516,2.581,3517,2.581,3518,2.113,3519,2.293,3520,1.504,3521,2.581,3522,2.293,3524,2.831,3525,2.831,3526,2.831,3527,2.831,3528,2.831,3529,2.831,3530,2.831,3531,2.831,3532,2.831,3533,2.831,3534,2.831,3535,2.831,3536,2.831,3537,2.831,3538,2.831,3539,2.831,3540,2.831,3541,2.831,3542,2.831,3543,2.831,3544,2.831,3545,2.831,3546,2.831,3547,2.831,3548,2.831,3549,2.831,3550,2.831,3551,2.831,3552,2.581,3553,2.831,3554,2.831,3555,2.831,3556,2.831,3557,2.831,3558,2.831,3559,2.831,3560,2.831,3561,2.831,3562,2.831,3563,2.831,3564,2.831,3565,2.831,3566,2.831,3567,2.581]],["title/2.类型/2.9.单形/2.9.单形.html",[]],["body/2.类型/2.9.单形/2.9.单形.html",[89,5.69,122,4.887,157,2.235,161,3.775,232,5.829,233,3.5,253,4.967,385,4.364,396,4.811,476,6.558,3070,5.829,3568,6.891,3569,8.415,3570,8.012,3571,7.118]],["title/2.类型/2.9.单形/2.9.单形.html#2-9-单形",[3572,4.473]],["body/2.类型/2.9.单形/2.9.单形.html#2-9-单形",[157,2.238,161,3.794,232,5.858,233,3.518,253,4.992,385,4.386,396,4.835,476,6.591,3568,5.858,3569,7.154,3570,8.053,3571,7.154,3573,8.834,3574,8.834,3575,8.834,3576,8.834]],["title/3.类型系统/3.2.类型参数/3.2.1.约束.html",[]],["body/3.类型系统/3.2.类型参数/3.2.1.约束.html",[0,0.341,5,0.958,6,0.257,51,0.824,81,0.344,82,0.568,119,0.352,120,3.657,121,3.255,138,0.6,141,0.535,145,3.798,146,2.229,147,1.112,157,2.05,170,0.443,175,3.826,182,2.404,190,0.921,235,1.445,250,1.406,251,1.232,257,2.157,264,0.999,282,1.949,292,1.597,296,1.175,297,1.697,324,0.522,354,2.329,380,3.374,392,2.373,403,2.021,405,1.854,424,3.047,431,1.337,436,1.007,440,1.507,441,2.404,450,1.164,458,2.76,465,1.968,472,1.799,481,0.949,501,4.815,504,2.506,505,4.563,586,1.646,597,2.313,605,0.922,606,1.102,607,1.244,608,1.309,609,1.379,610,1.528,618,3.714,630,2.111,638,2.666,785,2.404,821,3.521,822,5.422,919,4.025,1228,2.791,1523,4.984,1534,2.666,1661,1.698,1662,1.754,1663,1.879,1664,1.949,1665,2.157,1975,5.783,2949,4.563,2953,2.026,3214,2.373,3300,3.821,3497,2.865,3577,3.821,3578,7.405,3579,8.654,3580,4.718,3581,4.301,3582,4.301,3583,4.301,3584,4.301,3585,4.301,3586,4.301,3587,4.301,3588,3.821,3589,3.521,3590,3.821,3591,5.135,3592,3.521]],["title/3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束",[3593,4.473]],["body/3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束",[0,0.337,5,0.943,6,0.251,51,0.806,81,0.337,82,0.556,118,1.776,119,0.345,121,3.204,138,0.591,141,0.523,145,3.751,146,2.195,147,1.098,157,2.038,170,0.433,175,2.568,182,2.353,190,0.909,222,3.941,235,1.414,250,1.377,251,1.028,257,2.111,264,0.978,282,1.908,292,1.563,296,1.157,297,1.67,324,0.511,354,2.293,380,3.321,392,2.322,403,2.004,405,1.831,424,3,431,1.317,436,0.84,440,1.475,441,2.353,450,0.971,458,2.701,465,1.926,472,1.761,481,0.929,501,4.74,504,2.453,505,4.492,586,1.611,597,2.264,605,0.903,606,1.079,607,1.218,608,1.281,609,1.349,610,1.496,618,3.668,630,2.066,638,2.61,785,2.353,821,3.446,822,5.367,919,3.962,979,1.761,1228,2.747,1268,2.654,1523,4.947,1534,2.61,1661,1.662,1662,1.717,1663,1.839,1664,1.908,1665,2.111,1975,5.744,2949,4.492,2953,1.983,3214,2.322,3300,3.74,3497,2.804,3578,7.314,3579,8.579,3581,4.21,3582,4.21,3583,4.21,3584,4.21,3585,4.21,3586,4.21,3587,4.21,3588,3.74,3589,3.446,3590,3.74,3591,5.055,3592,3.446,3594,4.618,3595,4.618,3596,4.618,3597,4.618,3598,4.618,3599,4.618,3600,4.618,3601,4.618,3602,4.618,3603,4.618,3604,4.618,3605,4.618,3606,4.618,3607,4.618,3608,4.618,3609,4.618,3610,4.618,3611,4.618]],["title/3.类型系统/3.1.Typedef/3.1.Typedef.html",[]],["body/3.类型系统/3.1.Typedef/3.1.Typedef.html",[0,0.348,4,0.937,6,0.553,81,0.696,82,1.274,91,3.59,119,0.711,121,5.464,138,0.739,170,0.596,190,0.72,235,2.595,341,5.618,354,2.15,403,2.029,405,2.175,424,4.22,787,5.618,1228,2.576,1748,4.436,2062,4.5,2938,5.145,2949,4.213,3211,5.145,3612,5.791,3613,7.722]],["title/3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef",[3612,4.077]],["body/3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef",[0,0.341,4,0.926,6,0.549,81,0.689,82,1.267,115,4.836,119,0.705,121,5.446,138,0.73,170,0.585,190,0.707,235,2.563,354,2.112,403,2.011,405,2.155,424,4.182,787,5.55,1228,2.53,1735,4.655,1748,4.383,2062,4.446,2938,5.053,2949,4.137,3211,5.053,3552,5.687,3613,7.629,3614,6.239,3615,8.369,3616,6.239,3617,6.239,3618,6.239,3619,6.239,3620,6.239,3621,6.239,3622,6.239,3623,6.239,3624,6.239,3625,6.239,3626,6.239,3627,6.239,3628,6.239,3629,6.239,3630,6.239,3631,6.239,3632,6.239,3633,5.687]],["title/3.类型系统/3.2.类型参数/3.2.类型参数.html",[]],["body/3.类型系统/3.2.类型参数/3.2.类型参数.html",[0,0.339,4,0.592,5,0.745,6,0.446,7,1.281,51,0.592,81,0.39,84,1.748,89,3.463,91,1.914,119,0.399,138,0.466,140,2.057,141,0.929,143,2.53,146,2.147,147,0.732,153,1.8,157,2.262,159,1.281,160,1.455,164,1.602,165,1.441,169,0.97,170,0.318,184,1.75,186,1.173,190,0.987,191,2.295,197,2.411,202,1.661,203,1.27,209,1.387,234,1.774,235,1.038,249,1.8,251,0.514,252,0.977,258,2.144,261,1.474,264,0.717,279,1.914,284,2.386,296,0.578,324,0.375,329,1.621,330,2.37,350,2.211,354,2.949,356,2.842,380,5.207,403,1.603,405,1.718,411,2.64,414,2.246,428,1.981,431,0.658,434,1.8,436,0.42,440,2.117,441,2.726,450,0.485,472,3.125,480,2.057,481,0.681,488,1.455,501,2.37,503,2.743,505,2.246,508,1.661,577,2.297,586,1.182,597,1.661,600,1.516,605,0.662,606,0.792,607,0.893,608,0.94,615,2.246,627,1.981,638,3.023,641,1.485,642,2.246,657,1.854,697,2.057,854,2.246,867,2.169,920,2.057,1206,1.914,1219,2.057,1228,3.533,1280,2.144,1352,3.743,1415,2.966,1545,3.692,1800,2.473,1935,2.743,2082,2.528,2869,2.626,2956,2.37,2961,2.246,3070,3.547,3202,2.246,3205,1.8,3212,2.144,3214,3.786,3480,2.057,3484,null,3485,3.248,3492,2.37,3497,2.057,3515,1.8,3520,1.8,3568,2.246,3577,4.332,3591,2.528,3634,3.388,3635,1.914,3636,2.528,3637,3.088,3638,2.528,3639,3.743,3640,1.981,3641,1.8,3642,3.088,3643,3.388,3644,3.388,3645,3.088,3646,3.388,3647,3.991,3648,2.528,3649,2.626,3650,2.891,3651,2.37,3652,2.743,3653,4.946,3654,3.088,3655,2.528,3656,5.155,3657,4.876,3658,3.088,3659,3.088,3660,4.121,3661,3.388,3662,2.743,3663,3.088,3664,3.088,3665,2.743,3666,3.088,3667,4.876,3668,3.088,3669,2.246]],["title/3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数",[3670,4.473]],["body/3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数",[0,0.328,4,0.584,5,0.735,6,0.442,7,1.259,35,1.881,51,0.581,81,0.385,84,1.728,89,2.155,118,2.029,119,0.394,138,0.46,141,0.921,146,2.123,147,0.722,153,1.769,157,2.257,159,1.259,160,1.43,164,1.575,165,1.416,169,0.954,170,0.312,186,1.153,190,0.98,191,2.269,197,2.391,202,1.632,203,1.248,209,1.363,214,2.022,215,2.496,224,1.719,234,1.744,235,1.02,249,1.769,251,0.505,252,0.96,258,2.107,261,1.454,264,0.705,279,1.881,284,1.899,296,0.568,324,0.368,329,1.593,330,2.33,350,2.186,354,2.524,356,2.803,380,5.187,403,1.587,405,1.702,411,2.61,414,2.208,428,1.947,431,0.647,434,1.769,436,0.413,440,2.093,441,2.689,450,0.477,472,3.099,480,2.022,481,0.669,488,1.43,501,2.33,503,2.696,505,2.208,508,1.632,577,2.266,586,1.162,597,1.632,600,1.49,605,0.651,606,0.778,607,0.878,608,0.923,615,2.208,627,1.947,638,2.982,641,1.459,642,2.208,657,1.822,697,2.022,854,2.208,867,2.14,920,2.022,979,1.269,1206,1.881,1219,2.022,1228,3.507,1280,2.107,1352,3.692,1415,2.933,1545,3.213,1800,2.439,1903,3.035,1935,2.696,2017,2.581,2082,2.484,2869,2.581,2956,2.33,2961,2.208,3070,2.208,3202,2.208,3205,1.769,3212,2.107,3214,3.75,3480,2.022,3484,null,3485,3.204,3492,2.33,3497,2.022,3515,1.769,3520,1.769,3568,2.208,3577,2.696,3591,2.484,3635,1.881,3636,2.484,3637,3.035,3638,2.484,3639,3.692,3640,1.947,3641,1.769,3642,3.035,3645,3.035,3647,3.937,3648,2.484,3649,2.581,3650,2.841,3651,2.33,3652,2.696,3653,4.89,3654,3.035,3655,2.484,3656,5.121,3657,4.81,3658,3.035,3659,3.035,3660,3.587,3662,2.696,3663,3.035,3664,3.035,3665,2.696,3666,3.035,3667,4.81,3668,3.035,3669,2.208,3671,3.329,3672,3.329,3673,3.329,3674,3.035,3675,3.329,3676,3.329,3677,3.329,3678,3.329,3679,3.329,3680,3.329,3681,3.329,3682,3.329,3683,3.329,3684,7.457,3685,3.329,3686,3.329,3687,3.329,3688,3.329,3689,3.329,3690,3.329,3691,3.329,3692,3.329,3693,3.329,3694,3.329,3695,3.329,3696,3.329,3697,3.329,3698,3.329,3699,3.329,3700,3.329,3701,3.329,3702,3.329,3703,3.329]],["title/3.类型系统/3.3.泛型/3.3.泛型.html",[]],["body/3.类型系统/3.3.泛型/3.3.泛型.html",[0,0.34,4,0.614,5,1.168,6,0.484,7,2.585,8,1.343,9,2.542,43,2.95,51,1.194,81,0.564,82,1.189,84,2.212,89,2.301,119,0.577,138,0.674,141,1.008,146,1.799,147,1.058,157,1.879,159,3.82,170,0.787,179,2.821,190,1.251,197,2.011,231,2.078,235,1.088,246,1.074,251,1.037,257,1.625,258,2.249,264,1.176,277,1.557,296,1.32,324,0.855,326,2.008,336,2.385,337,2.301,366,1.835,369,2.078,380,3.352,401,2.868,403,0.757,405,0.811,414,2.356,416,4.694,436,0.958,440,1.774,443,3.515,444,1.888,450,1.108,462,1.945,481,1.375,506,2.158,508,1.742,605,1.336,606,1.298,607,1.465,630,1.59,643,3.092,647,2.868,664,2.158,816,3.886,850,2.878,854,2.356,1080,2.249,1223,2.118,1228,3.401,1280,2.249,1282,2.651,1523,1.787,1591,3.249,1682,2.486,1707,1.945,1805,2.486,2647,4.007,2914,2.249,2953,1.526,3205,1.888,3212,2.249,3213,2.486,3487,2.249,3488,2.008,3520,1.888,3641,1.888,3650,3.032,3704,2.008,3705,2.651,3706,5.063,3707,2.651,3708,2.878,3709,3.239,3710,3.239,3711,3.239,3712,3.239,3713,3.239,3714,3.239,3715,8.105,3716,3.554,3717,3.239,3718,3.239,3719,3.239,3720,2.008,3721,3.239,3722,5.063,3723,7.046,3724,7.046,3725,3.554,3726,3.239,3727,5.063,3728,5.063]],["title/3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型",[3729,4.473]],["body/3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型",[0,0.344,4,0.372,5,1.138,6,0.473,7,2.497,8,1.273,9,1.98,43,2.829,51,1.153,81,0.548,82,1.169,84,2.156,89,2.18,119,0.56,138,0.654,141,0.985,146,1.725,147,1.027,157,1.844,159,3.761,170,0.767,179,2.777,190,1.238,197,1.942,231,1.97,235,1.032,246,1.018,251,1.002,257,1.54,258,2.132,264,1.127,277,1.476,296,1.281,324,0.83,326,1.903,336,2.287,366,1.739,369,1.97,380,3.238,401,2.75,403,0.717,405,0.769,414,2.233,416,4.01,436,0.93,440,1.701,443,2.132,444,1.789,450,1.076,462,1.843,481,1.328,506,2.045,508,1.651,516,2.18,605,1.291,606,1.244,607,1.404,630,1.507,643,2.987,647,2.75,664,2.045,816,3.726,850,2.727,854,2.233,1080,2.132,1223,2.03,1228,3.315,1280,2.132,1282,2.513,1523,1.694,1591,3.114,1682,2.357,1707,1.843,1805,2.357,2647,2.43,2914,2.132,2953,1.446,3205,1.789,3212,2.132,3213,2.357,3487,2.132,3488,1.903,3520,1.789,3641,1.789,3704,1.903,3705,2.513,3706,4.854,3707,2.513,3708,2.727,3709,3.07,3710,3.07,3711,3.07,3712,3.07,3713,3.07,3714,3.07,3715,7.923,3717,3.07,3718,3.07,3719,3.07,3720,1.903,3721,3.07,3722,4.854,3723,6.841,3724,6.02,3726,3.07,3727,4.854,3728,4.854,3730,3.368,3731,3.368,3732,3.368,3733,3.368,3734,3.368,3735,3.368,3736,3.368,3737,3.368,3738,3.368,3739,3.368,3740,3.368,3741,3.368,3742,3.368,3743,3.368]],["title/3.类型系统/3.5.一致性检查/3.5.1.类与接口.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.1.类与接口.html",[0,0.318,141,1.34,153,4.919,159,2.753,167,3.662,184,3.761,252,2.1,261,2.007,288,4.718,289,2.601,291,6.187,332,3.485,384,3.662,507,3.571,832,3.986,861,3.986,907,4.26,2336,5.954,2896,4.091,3204,4.26,3223,5.898,3744,7.283,3745,6.301,3746,6.639,3747,5.898,3748,5.623,3749,6.639,3750,5.712,3751,6.639,3752,6.639]],["title/3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口",[3753,4.473]],["body/3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口",[141,1.341,153,4.932,159,2.765,167,3.678,224,3.777,252,2.109,261,2.016,288,4.731,289,2.612,291,6.194,332,3.5,384,3.678,507,3.586,832,4.003,861,4.003,907,4.277,2336,5.966,2896,4.099,3204,4.277,3223,5.922,3746,6.666,3747,5.922,3748,5.638,3749,6.666,3750,5.72,3751,6.666,3752,6.666,3754,7.313,3755,6.317,3756,7.313,3757,7.313,3758,7.313,3759,7.313,3760,7.313]],["title/3.类型系统/3.4.变异/3.4.变异.html",[]],["body/3.类型系统/3.4.变异/3.4.变异.html",[0,0.336,4,0.351,5,1.179,6,0.345,8,1.199,51,1.108,81,0.463,82,1.019,84,2.344,119,0.474,121,1.5,138,0.553,139,2.272,140,3.083,141,1.107,146,2.35,147,0.869,150,3.552,153,1.685,157,2.069,159,1.919,160,1.362,168,2.103,170,0.595,178,1.638,182,2.587,183,4.579,184,1.638,190,1.007,194,2.553,251,0.963,256,1.685,261,1.749,264,1.343,279,2.869,285,3.147,296,1.518,324,0.702,332,1.518,337,2.053,339,3.213,354,3.583,380,2.489,411,1.263,421,2.219,424,1.404,427,1.736,428,1.855,429,3.366,431,0.616,436,0.787,445,1.685,450,0.91,481,1.276,502,4.736,579,2.569,605,1.241,606,1.483,607,1.674,608,1.76,609,1.483,610,1.027,617,3.552,618,1.45,658,2.008,811,2.569,822,1.926,867,1.286,1214,1.736,1215,2.103,1223,2.42,1228,1.286,1279,2.569,1415,2.272,1489,3.213,1599,5.263,1661,1.142,1662,1.179,1800,1.466,2336,5.715,2349,6.633,2723,2.288,2896,3.572,2937,2.219,2961,5.263,3201,1.736,3202,2.103,3217,2.219,3423,5.14,3506,2.367,3510,3.083,3511,2.219,3649,2.458,3651,2.219,3669,2.103,3704,1.792,3750,5.577,3761,2.707,3762,2.367,3763,2.219,3764,2.569,3765,2.219,3766,2.891,3767,2.569,3768,2.891,3769,3.172,3770,2.891,3771,2.367,3772,2.891,3773,2.891,3774,7.234,3775,3.788,3776,4.111,3777,2.891,3778,3.172,3779,3.172,3780,2.569,3781,2.891,3782,2.891,3783,2.891,3784,2.891,3785,3.172,3786,3.172,3787,4.628,3788,2.219,3789,2.569,3790,2.891,3791,3.172,3792,5.14,3793,3.552,3794,5.875,3795,3.213,3796,3.083,3797,4.111]],["title/3.类型系统/3.4.变异/3.4.变异.html#3-4-变异",[3798,4.473]],["body/3.类型系统/3.4.变异/3.4.变异.html#3-4-变异",[0,0.34,4,0.33,5,1.147,6,0.331,8,1.127,51,1.063,81,0.444,82,0.991,84,2.286,119,0.454,121,1.41,138,0.531,139,2.161,141,1.086,146,2.268,147,0.833,150,3.38,153,1.584,157,2.04,159,1.826,160,1.281,168,1.977,170,0.571,178,1.54,182,2.461,183,4.392,190,0.982,194,2.429,214,2.933,224,1.54,251,0.924,256,1.584,261,1.678,264,1.289,279,2.729,285,3.036,296,1.48,324,0.673,332,1.427,339,3.057,354,3.439,380,2.368,411,1.187,421,2.086,424,1.32,427,1.632,428,1.744,429,3.203,431,0.579,436,0.755,445,1.584,450,0.873,481,1.224,502,4.543,516,1.93,579,2.415,605,1.19,606,1.423,607,1.606,608,1.689,609,1.411,610,0.966,617,3.38,618,1.363,658,1.887,811,2.415,822,1.811,867,1.209,1214,1.632,1215,1.977,1223,2.321,1228,1.209,1279,2.415,1415,2.161,1489,3.057,1599,4.642,1661,1.073,1662,1.109,1800,1.378,2336,5.605,2349,6.468,2587,2.311,2723,2.151,2896,3.484,2937,2.086,2961,5.1,3201,1.632,3202,1.977,3217,2.086,3423,4.93,3506,2.225,3510,2.933,3511,2.086,3649,2.311,3651,2.086,3669,1.977,3704,1.685,3750,5.507,3762,2.225,3763,2.086,3764,2.415,3765,2.086,3766,2.718,3767,2.415,3768,2.718,3770,2.718,3771,2.225,3772,2.718,3773,2.718,3774,6.381,3775,3.604,3776,3.912,3777,2.718,3780,2.415,3781,2.718,3782,2.718,3783,2.718,3784,2.718,3787,4.403,3788,2.086,3789,2.415,3790,2.718,3792,4.93,3793,3.38,3794,5.669,3795,3.057,3796,2.933,3797,3.912,3799,2.982,3800,2.982,3801,2.982,3802,2.982,3803,2.982,3804,2.982,3805,2.982,3806,2.982,3807,2.982,3808,2.982,3809,2.982,3810,2.982,3811,2.982,3812,2.982,3813,2.982,3814,2.982,3815,2.982,3816,2.982,3817,2.982,3818,2.982,3819,2.982,3820,2.982,3821,2.982,3822,2.982,3823,2.982,3824,2.982,3825,2.982,3826,2.982]],["title/3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html",[0,0.332,4,1.182,6,0.324,58,5.382,81,0.435,119,0.445,139,2.668,140,3.62,141,0.92,146,2.629,147,1.111,157,2.09,160,4.698,161,2.56,163,2.726,164,2.82,173,2.51,184,3.079,190,0.676,191,2.064,194,2.998,252,1.719,257,2.726,261,2.237,264,1.262,296,1.018,297,1.47,336,2.56,341,5.382,363,5.029,371,4.171,383,4.171,385,2.96,416,4.929,424,4.588,427,3.263,428,3.487,454,3.263,470,2.998,472,2.273,586,2.08,627,4.747,673,3.167,832,3.263,919,5.794,1219,4.929,1348,2.96,2723,4.301,2927,6.926,2949,3.953,3200,4.448,3201,3.263,3478,3.263,3489,3.953,3589,4.448,3705,4.448,3720,3.369,3789,6.572,3827,5.434,3828,5.434,3829,5.434,3830,3.953,3831,4.301,3832,4.448,3833,4.448]],["title/3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型",[3834,4.473]],["body/3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型",[0,0.278,4,1.094,6,0.323,58,5.37,81,0.434,119,0.443,139,2.658,141,0.918,146,2.623,147,1.108,157,2.088,160,4.694,161,2.551,163,2.716,164,2.81,173,2.502,190,0.673,191,2.057,194,2.988,214,3.608,224,3.068,252,1.713,257,2.716,261,2.232,264,1.258,296,1.014,297,1.465,336,2.551,341,3.94,363,3.681,371,4.157,383,4.157,385,2.95,416,4.917,424,4.583,427,3.252,428,3.475,454,3.252,470,2.988,472,2.265,586,2.073,627,4.736,673,3.156,832,3.252,919,5.786,1219,4.917,1348,2.95,2927,5.07,2949,3.94,3200,4.433,3201,3.252,3478,3.252,3489,3.94,3589,4.433,3705,4.433,3720,3.357,3789,6.557,3827,5.416,3828,5.416,3829,5.416,3830,3.94,3832,4.433,3833,4.433,3835,5.941,3836,5.941,3837,5.941,3838,5.941,3839,5.941,3840,5.941,3841,5.416,3842,5.941,3843,5.941,3844,5.941,3845,5.941,3846,5.941,3847,5.941,3848,5.941,3849,5.941,3850,5.941,3851,5.941,3852,4.286,3853,5.941]],["title/3.类型系统/3.5.一致性检查/3.5.3.单形.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.3.单形.html",[0,0.299,157,2.081,385,4.547,411,3.648,1215,6.074,3745,6.232,3854,9.159,3855,9.159,3856,8.349,3857,8.349]],["title/3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形",[3858,4.473]],["body/3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形",[157,2.087,385,4.571,411,3.667,1215,6.106,1735,6.87,3755,6.265,3856,8.393,3857,8.393,3859,8.393,3860,9.207]],["title/3.类型系统/3.5.一致性检查/3.5.4.函数返回.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.4.函数返回.html",[0,0.341,6,0.416,81,0.4,82,0.921,140,3.324,144,1.736,149,3.094,157,2.194,190,1.212,197,1.61,261,1.509,283,4.263,297,2.689,332,2.62,335,2.718,339,3.465,405,1.249,433,2.869,434,2.908,440,1.748,470,2.753,828,2.503,907,3.202,1179,5.644,1280,3.465,1767,3.725,2301,3.094,2303,7.977,2896,3.839,2953,2.351,3640,3.202,3704,3.094,3745,5.207,3831,3.949,3861,5.474,3862,6.976,3863,3.465,3864,4.99,3865,4.99,3866,4.433,3867,4.99,3868,4.433,3869,4.433,3870,4.99,3871,4.99,3872,4.433,3873,4.99]],["title/3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回",[3874,4.473]],["body/3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回",[0,0.293,6,0.417,81,0.401,82,0.923,118,2.112,144,1.741,149,3.103,157,2.195,190,1.213,197,1.615,214,3.335,261,1.514,283,4.267,297,2.691,332,2.628,335,2.726,339,3.476,405,1.253,433,2.875,434,2.917,440,1.754,470,2.762,828,2.511,907,3.212,1179,5.645,1280,3.476,1784,4.686,2301,3.103,2303,7.984,2380,4.257,2896,3.844,2953,2.358,3241,5.006,3640,3.212,3704,3.103,3755,5.219,3852,3.962,3862,5.006,3863,3.476,3864,5.006,3865,5.006,3866,4.447,3867,5.006,3868,4.447,3869,4.447,3870,5.006,3871,5.006,3872,4.447,3873,5.006,3875,5.492,3876,5.492,3877,5.492,3878,5.492,3879,5.492,3880,5.492,3881,5.492,3882,5.492,3883,5.492,3884,5.492,3885,5.492,3886,5.492,3887,5.492,3888,5.492,3889,5.492,3890,5.492,3891,5.492,3892,5.492,3893,5.492,3894,5.492,3895,5.492]],["title/3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html",[0,0.335,4,1.123,5,1.177,6,0.344,51,1.105,81,0.462,82,0.762,84,2.509,119,0.472,138,0.552,141,1.15,147,0.866,157,1.984,170,0.594,173,2.666,190,0.958,197,2.486,246,2.553,251,0.96,252,1.825,285,3.666,296,1.443,298,3.427,324,0.7,354,2.143,370,4.25,426,3.703,433,2.373,436,0.785,450,0.907,481,1.273,486,3.702,508,3.103,597,3.103,605,1.237,606,1.479,828,2.894,1348,3.143,1372,4.723,2479,6.863,2480,7.323,2916,4.429,3495,4.429,3745,4.307,3750,5.62,3767,5.126,3896,4.906,3897,5.77,3898,5.77,3899,5.77,3900,5.77,3901,5.126,3902,5.77]],["title/3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型",[3903,4.473]],["body/3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型",[0,0.339,4,0.91,5,1.146,6,0.331,51,1.063,81,0.444,82,0.733,84,2.459,119,0.454,138,0.531,141,1.132,147,0.833,157,1.953,170,0.571,173,2.563,190,0.933,197,2.421,246,2.487,251,0.923,252,1.755,285,3.57,296,1.405,298,3.338,324,0.673,354,2.06,370,4.139,426,3.607,433,2.282,436,0.755,450,0.872,481,1.224,486,3.56,508,2.984,597,2.984,605,1.19,606,1.422,828,2.783,979,2.321,1348,3.022,1372,4.542,1929,5.194,2479,6.728,2480,7.207,2916,4.259,3495,4.259,3750,5.556,3755,4.142,3767,4.929,3897,5.548,3898,5.548,3899,5.548,3900,5.548,3901,4.929,3902,5.548,3904,6.087,3905,6.087,3906,6.087,3907,6.087,3908,5.548,3909,6.087,3910,6.087]],["title/3.类型系统/3.5.一致性检查/3.5.一致性检查.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.一致性检查.html",[0,0.343,4,0.76,5,0.778,6,0.304,81,0.261,82,0.431,119,0.267,122,1.992,138,0.312,139,1.603,140,3.394,141,0.406,143,2.644,144,1.136,147,0.49,150,2.507,156,2.268,157,2.246,158,2.025,159,1.354,161,1.539,169,2.224,170,0.336,179,1,180,3.538,190,1.011,191,1.24,197,2.476,246,1.689,256,1.903,257,1.638,261,0.987,296,0.612,297,2.297,301,4.388,324,0.396,335,1.779,346,2.901,354,1.892,366,1.85,367,2.811,370,1.802,385,1.779,403,1.984,405,2.2,416,2.176,428,2.096,429,2.376,433,2.911,439,1.3,472,3.21,486,4.02,488,2.401,508,2.741,599,1.714,600,2.501,640,2.901,641,1.57,642,2.376,646,3.269,657,3.059,822,2.176,828,4.079,832,3.059,867,2.267,907,2.096,925,3.159,931,2.268,1223,4.18,1348,2.775,1406,2.507,1415,2.501,1775,4.486,1800,1.656,1972,2.331,2079,3.538,2896,3.585,3070,3.707,3201,1.961,3214,1.802,3520,1.903,3568,3.707,3638,2.673,3641,1.903,3660,4.25,3707,2.673,3745,6.341,3750,1.85,3765,3.911,3831,6.436,3866,2.901,3896,4.332,3911,3.266,3912,3.266,3913,3.266,3914,3.266,3915,5.095,3916,2.507,3917,2.673,3918,2.901,3919,3.583,3920,2.507,3921,3.266,3922,3.266,3923,3.266,3924,3.266,3925,2.901,3926,3.057]],["title/3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查",[3927,4.473]],["body/3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查",[0,0.31,4,0.611,5,0.77,6,0.301,81,0.258,82,0.425,118,2.126,119,0.264,138,0.308,139,1.58,141,0.4,144,1.12,147,0.483,150,2.471,156,2.236,157,2.241,158,1.996,159,1.335,161,1.517,169,2.207,170,0.331,179,0.986,180,3.499,190,1.005,191,1.223,197,2.46,214,3.357,215,2.614,246,1.67,256,1.876,257,1.615,261,0.973,296,0.603,297,2.285,301,4.354,324,0.391,335,1.753,346,2.86,354,1.871,366,1.824,367,2.78,370,1.776,385,1.753,403,1.888,405,2.115,416,2.145,428,2.066,429,2.342,433,2.888,439,1.282,472,3.188,486,3.233,488,2.374,508,2.71,599,1.69,600,2.473,640,2.86,641,1.548,642,2.342,657,3.025,712,3.233,822,2.145,828,4.055,832,3.025,867,2.242,907,2.066,925,3.124,931,2.236,979,1.347,1223,4.087,1268,2.03,1348,2.744,1406,2.471,1415,2.473,1775,4.46,1800,1.633,1972,2.305,2079,3.499,2622,2.86,2768,3.22,2896,3.564,3070,3.666,3201,1.933,3214,1.776,3520,1.876,3568,2.342,3638,2.635,3641,1.876,3660,4.217,3707,2.635,3750,1.824,3755,6.307,3765,3.868,3841,5.039,3852,6.397,3859,3.22,3866,2.86,3896,2.738,3908,3.22,3911,3.22,3912,3.22,3913,3.22,3914,3.22,3915,3.22,3916,2.471,3917,2.635,3918,2.86,3920,2.471,3921,3.22,3922,3.22,3923,3.22,3924,3.22,3925,2.86,3928,5.528,3929,3.532,3930,3.532,3931,3.532,3932,3.532,3933,3.532,3934,3.532,3935,3.532,3936,3.532,3937,3.532,3938,3.532,3939,3.532,3940,3.532,3941,3.532,3942,3.532,3943,3.532,3944,3.532,3945,3.532,3946,3.532,3947,5.528,3948,3.532,3949,3.532,3950,3.532,3951,3.22,3952,3.532,3953,3.532,3954,3.532,3955,3.532,3956,3.532,3957,3.532,3958,3.532,3959,3.532,3960,3.532,3961,3.532,3962,3.532,3963,3.532,3964,3.532,3965,3.532,3966,3.532,3967,3.532,3968,3.532,3969,3.532,3970,3.532,3971,3.014,3972,3.532,3973,3.532,3974,3.532,3975,3.532,3976,3.532,3977,5.528,3978,3.532,3979,3.532,3980,3.532]],["title/3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html",[]],["body/3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html",[0,0.328,4,0.49,5,1.206,6,0.503,8,1.675,51,0.774,60,2.869,81,0.48,82,0.943,84,1.733,90,4.357,119,0.49,121,2.096,138,0.573,139,1.983,140,2.691,141,0.745,144,1.405,146,1.435,147,1.072,152,3.1,153,2.354,156,2.805,157,2.261,159,2.484,161,1.903,167,2.228,169,2.482,170,0.616,190,1.048,191,2.275,197,2.304,251,0.672,264,1.658,283,3.967,296,1.337,297,1.931,324,0.626,326,3.713,354,2.932,366,4.474,370,2.228,373,2.228,380,2.172,396,2.425,405,2.212,427,4.286,436,0.549,439,2.384,440,2.766,447,2.504,450,0.635,465,1.848,472,1.689,480,2.691,481,0.891,486,2.592,506,1.629,508,4.751,577,1.903,586,1.546,605,0.866,606,1.035,607,1.168,608,1.229,609,0.784,628,2.354,638,2.504,647,2.288,659,6.464,829,2.172,1179,2.072,1228,3.513,1534,2.504,1597,3.588,2058,5.48,2896,1.781,2916,3.1,3124,3.196,3201,2.425,3224,3.1,3495,3.1,3496,3.588,3641,2.354,3655,3.306,3660,5.064,3665,3.588,3720,3.713,3745,3.015,3750,2.288,3763,3.1,3831,4.74,3896,5.093,3920,3.1,3981,5.427,3982,4.039,3983,4.039,3984,4.039,3985,5.99,3986,5.067,3987,4.431,3988,3.306,3989,4.039,3990,5.844,3991,4.039,3992,4.431,3993,4.039,3994,5.99,3995,4.039,3996,4.431,3997,4.039,3998,2.683]],["title/3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断",[3999,4.473]],["body/3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断",[0,0.331,4,0.476,5,1.189,6,0.497,8,1.628,51,0.752,60,2.787,81,0.469,82,0.927,84,1.696,90,4.265,118,1.655,119,0.48,121,2.036,138,0.561,139,1.926,141,0.729,144,1.365,146,1.395,147,1.054,152,3.012,153,2.287,156,2.725,157,2.252,159,2.431,161,1.849,167,2.165,169,2.447,170,0.603,190,1.036,191,2.227,197,2.264,214,2.614,251,0.653,264,1.63,283,3.741,296,1.315,297,1.898,324,0.611,326,3.634,354,2.606,366,3.976,370,2.165,373,2.165,380,2.111,396,2.356,405,1.949,427,4.214,436,0.534,439,2.334,440,2.054,447,2.433,450,0.617,465,1.796,472,1.641,480,2.614,481,0.866,486,2.518,506,1.574,508,4.701,577,1.849,586,1.502,605,0.841,606,1.006,607,1.135,608,1.194,609,0.757,628,2.287,638,2.433,647,2.223,659,6.373,829,2.111,1179,2.013,1228,3.122,1268,2.474,1534,2.433,1597,3.486,2058,5.387,2896,1.73,2916,3.012,3124,3.106,3201,2.356,3224,3.012,3495,3.012,3496,3.486,3641,2.287,3655,3.212,3660,5.003,3665,3.486,3720,3.634,3750,2.223,3755,2.929,3763,3.012,3852,4.639,3896,3.337,3920,3.012,3981,3.212,3982,3.924,3983,3.924,3984,3.924,3986,4.995,3988,3.212,3989,3.924,3990,5.745,3991,3.924,3993,3.924,3994,3.924,3995,3.924,3997,3.924,4000,4.305,4001,5.863,4002,4.305,4003,4.305,4004,4.305,4005,4.305,4006,4.305,4007,4.799,4008,4.305,4009,4.305,4010,4.305,4011,4.305,4012,4.305,4013,4.305,4014,4.305,4015,4.305,4016,4.305,4017,4.305,4018,4.305,4019,4.305,4020,2.591]],["title/3.类型系统/3.6.类型推断/3.6.类型推断.html",[]],["body/3.类型系统/3.6.类型推断/3.6.类型推断.html",[0,0.342,5,1.157,6,0.336,81,0.451,82,0.743,89,2.64,92,4.454,119,0.461,138,0.538,139,1.825,141,0.7,144,1.293,145,1.906,147,0.845,156,2.581,157,2.29,161,1.751,163,1.864,165,1.734,169,2.135,170,0.579,190,0.844,191,1.412,197,1.816,233,1.624,235,1.249,252,1.176,281,2.581,283,1.669,289,1.456,292,1.38,296,1.054,324,0.683,326,3.489,349,1.975,350,3.714,354,3.022,373,2.051,405,2.294,411,1.624,427,2.232,436,0.765,440,2.654,450,0.885,462,2.232,465,1.701,472,2.354,507,1.999,508,3.653,586,2.154,598,2.232,618,1.864,630,1.825,643,1.844,824,3.043,876,2.385,882,3.302,919,2.385,920,3.749,936,2.581,1221,2.476,1348,2.024,1352,2.853,1689,2.232,2896,1.639,2954,2.166,2961,2.704,3070,2.704,3129,4.607,3204,2.385,3205,2.166,3212,2.581,3221,3.302,3495,2.853,3497,2.476,3508,3.302,3520,2.166,3568,5.511,3569,5,3591,5.56,3638,3.043,3648,3.043,3720,3.489,3745,2.775,3763,2.853,3780,3.302,3793,2.853,3920,2.853,4021,1.906,4022,3.717,4023,7.576,4024,3.043,4025,3.717,4026,3.717,4027,4.078,4028,3.717,4029,3.717,4030,1.951,4031,3.717,4032,4.078,4033,5.628,4034,3.717,4035,3.302,4036,3.302,4037,6.792,4038,3.717,4039,3.717,4040,3.717]],["title/3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断",[4041,4.473]],["body/3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断",[0,0.334,5,1.148,6,0.332,81,0.445,82,0.734,92,2.894,118,2.345,119,0.455,138,0.532,139,1.795,141,0.691,144,1.272,145,1.876,147,0.835,156,2.539,157,2.278,161,1.723,163,1.834,165,1.706,169,2.114,170,0.572,190,0.836,191,1.389,197,1.794,218,2.993,233,1.598,235,1.229,252,1.157,281,2.539,283,1.642,289,1.433,292,1.358,296,1.041,324,0.674,326,3.446,349,1.943,350,3.703,354,3.001,373,2.017,405,2.282,411,1.598,427,2.196,436,0.756,440,2.632,450,0.874,462,2.196,465,1.673,472,2.325,507,1.967,508,3.617,586,2.128,598,2.196,618,1.834,630,1.795,643,1.814,728,3.249,824,2.993,876,2.347,882,3.249,919,2.347,920,3.703,936,2.539,1221,2.436,1348,1.992,1352,2.807,1689,2.196,2896,1.612,2954,2.131,2961,2.66,3129,4.55,3204,2.347,3205,2.131,3212,2.539,3221,3.249,3495,2.807,3497,2.436,3508,3.249,3520,2.131,3568,5.466,3569,4.939,3591,5.505,3638,2.993,3648,2.993,3720,3.446,3755,2.73,3763,2.807,3780,3.249,3793,2.807,3920,2.807,4021,1.876,4022,3.657,4023,7.513,4024,2.993,4025,3.657,4026,3.657,4028,3.657,4029,3.657,4030,1.92,4031,3.657,4033,3.657,4034,3.657,4035,3.249,4036,3.249,4037,6.725,4038,3.657,4039,3.657,4040,3.657,4042,4.012,4043,4.012,4044,4.012,4045,4.012,4046,4.012,4047,4.012,4048,4.012,4049,4.012,4050,4.012,4051,4.012,4052,4.012,4053,4.012,4054,4.012,4055,4.012,4056,4.012,4057,4.012,4058,4.012,4059,4.012,4060,4.012,4061,4.012,4062,4.012,4063,4.012,4064,4.012,4065,4.012,4066,4.012,4067,4.012,4068,4.012,4069,4.012]],["title/3.类型系统/3.6.类型推断/3.6.2.局限.html",[]],["body/3.类型系统/3.6.类型推断/3.6.2.局限.html",[0,0.246,7,2.521,143,3.154,144,2.115,145,3.118,146,2.16,157,2.31,158,3.769,163,3.049,173,2.808,174,4.221,175,3.708,190,0.756,191,2.309,210,3.118,233,2.656,234,3.493,246,2.015,254,5.801,300,2.48,301,3.769,373,3.354,422,3.901,465,2.782,508,5.517,832,3.65,871,4.05,907,3.901,931,4.221,1206,3.769,1214,3.65,1286,4.976,1689,3.65,2299,5.401,3204,3.901,3489,4.423,3641,3.543,3647,4.976,3704,3.769,3764,5.401,3832,4.976,3863,5.537,3926,5.691,3988,4.976,4070,6.669,4071,6.669,4072,6.079,4073,6.527,4074,6.079,4075,6.079,4076,6.527,4077,3.769,4078,5.401,4079,6.079,4080,6.669,4081,3.769,4082,5.401,4083,4.05,4084,6.079,4085,6.079,4086,6.079]],["title/3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限",[4087,4.473]],["body/3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限",[7,2.531,144,2.123,145,3.13,146,2.169,157,2.311,158,3.783,163,3.061,173,2.819,174,4.238,175,3.722,190,0.759,191,2.318,210,3.13,215,3.166,233,2.666,234,3.506,246,2.023,254,5.816,300,2.489,301,3.783,373,3.367,422,3.916,465,2.792,508,5.522,832,3.664,871,4.066,907,3.916,931,4.238,1206,3.783,1214,3.664,1286,4.995,1689,3.664,2299,5.422,3204,3.916,3489,4.44,3641,3.556,3647,4.995,3704,3.783,3764,5.422,3832,4.995,3863,5.551,3971,5.713,3988,4.995,4072,6.103,4073,6.544,4074,6.103,4075,6.103,4076,6.544,4077,3.783,4078,5.422,4079,6.103,4081,3.783,4082,5.422,4083,4.066,4084,6.103,4085,6.103,4086,6.103,4088,6.695,4089,6.695,4090,6.695,4091,6.695]],["title/3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html",[]],["body/3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html",[0,0.338,4,0.788,5,0.992,6,0.496,51,0.864,81,0.609,82,1.098,84,2.551,88,1.809,119,0.623,121,2.339,123,3.202,138,0.727,140,3.003,141,1.034,147,0.677,151,2.795,157,2.115,170,0.668,184,2.554,186,3.16,190,0.946,195,3.366,233,1.97,235,1.515,251,0.75,261,1.363,264,1.766,271,4.024,277,2.167,284,1.78,289,2.98,294,4.091,295,6.012,296,1.558,324,0.788,384,2.487,433,1.854,436,0.613,450,0.709,462,2.707,493,3.678,499,4.005,504,3.783,597,2.425,605,0.967,651,3.69,673,3.783,861,2.707,867,2.006,1180,3.003,1223,3.181,1228,2.006,1707,2.707,1775,3.581,2953,2.124,3199,3.003,3212,3.131,3509,3.69,4092,4.22,4093,4.509,4094,5.892,4095,3.833,4096,3.12,4097,4.509,4098,4.509,4099,2.627,4100,5.766,4101,4.509,4102,6.491,4103,4.509,4104,4.509,4105,4.509,4106,4.509,4107,4.509,4108,4.509,4109,4.005,4110,2.893]],["title/3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型",[4111,4.473]],["body/3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型",[0,0.337,4,0.53,5,0.97,6,0.489,51,0.838,81,0.598,82,1.083,84,2.52,88,1.754,118,1.844,119,0.612,121,2.268,123,3.105,138,0.715,141,1.02,147,0.657,151,2.71,157,2.099,170,0.653,186,3.115,190,0.929,214,2.913,224,2.477,226,3.264,233,1.91,235,1.469,251,0.728,261,1.322,264,1.736,271,3.935,277,2.102,284,1.726,289,2.928,294,3.414,295,5.878,296,1.536,324,0.77,384,2.412,433,1.798,436,0.595,450,0.687,462,2.625,493,3.597,504,3.699,597,2.351,605,0.937,673,3.699,714,3.579,861,2.625,867,1.945,1180,2.913,1223,3.126,1228,1.945,1707,2.625,1775,3.502,2953,2.06,3199,2.913,3212,3.036,3509,3.579,4093,4.372,4094,5.83,4096,3.052,4097,4.372,4098,4.372,4099,2.548,4100,5.64,4101,4.372,4102,6.348,4103,4.372,4104,4.372,4105,4.372,4106,4.372,4107,4.372,4108,4.372,4109,3.884,4110,2.805,4112,4.796,4113,4.796,4114,4.796,4115,3.717,4116,4.796,4117,4.796,4118,4.796,4119,4.796,4120,4.796,4121,4.796,4122,4.796,4123,4.796,4124,4.796,4125,4.796,4126,4.796,4127,4.796]],["title/3.类型系统/3.7.模块和路径/3.7.2.Import.html",[]],["body/3.类型系统/3.7.模块和路径/3.7.2.Import.html",[0,0.333,4,0.934,5,1.367,6,0.405,8,1.06,81,0.544,82,0.896,84,1.212,119,0.556,138,0.697,141,0.999,143,3.522,144,1.851,146,0.908,147,1.286,153,1.49,157,1.836,158,1.585,159,1.06,161,1.204,163,2.101,164,1.326,165,2.482,168,1.86,170,0.699,173,1.181,184,1.448,186,1.591,190,0.907,197,1.985,204,2.596,210,2.729,229,2.687,234,1.468,235,2.45,236,2.554,251,0.425,252,0.809,255,2.281,261,2.43,264,2.115,271,2.596,276,1.181,284,2.101,285,1.216,289,4.074,292,1.555,294,4.475,296,0.997,324,0.824,330,1.962,332,1.342,337,2.974,366,1.448,384,1.41,385,1.392,393,1.962,398,1.86,405,0.64,411,1.117,425,1.67,431,0.545,433,1.051,436,0.923,450,0.836,453,3.126,454,1.535,462,2.515,464,1.703,507,1.375,577,1.204,586,2.036,591,1.392,597,1.375,599,1.342,630,1.255,643,1.268,646,1.64,650,1.535,651,2.092,664,1.703,673,1.49,788,1.448,829,1.375,925,1.585,1350,2.515,1496,3.721,1534,1.585,1545,1.375,1696,2.271,1710,4.592,1760,1.962,1775,1.41,1971,3.846,2070,3.922,2701,2.271,2825,2.271,2869,2.173,2937,1.962,2954,1.49,3204,1.64,3296,2.393,3484,null,3497,1.703,3510,1.703,3518,2.092,3519,2.271,3640,1.64,3662,2.271,3720,1.585,3832,2.092,4021,1.311,4081,1.585,4094,6.089,4095,3.561,4096,2.013,4099,2.441,4100,4.727,4110,1.64,4128,2.556,4129,2.804,4130,2.556,4131,2.271,4132,1.962,4133,6.031,4134,2.556,4135,6.152,4136,5.321,4137,2.804,4138,2.804,4139,2.556,4140,2.556,4141,2.092,4142,3.126,4143,2.804,4144,2.556,4145,3.215,4146,3.721,4147,1.775,4148,2.271,4149,2.804,4150,2.271,4151,4.188,4152,1.64,4153,2.556,4154,2.804,4155,5.321,4156,5.321,4157,2.556,4158,2.556,4159,4.188,4160,2.271,4161,2.556,4162,2.556,4163,4.188,4164,4.188,4165,2.556,4166,4.188,4167,4.188,4168,4.188,4169,2.271,4170,1.86,4171,2.092,4172,1.64]],["title/3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import",[4128,4.077]],["body/3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import",[0,0.328,4,0.81,5,1.355,6,0.399,8,1.029,81,0.535,82,0.882,84,1.182,118,1.724,119,0.547,138,0.687,141,0.987,144,1.812,146,0.881,147,1.273,153,1.445,157,1.817,158,1.538,159,1.029,161,1.168,163,2.049,164,1.287,165,2.43,168,1.804,170,0.688,173,1.146,186,1.552,190,0.894,197,1.949,204,1.538,210,2.672,215,3.466,224,1.405,229,2.622,234,1.425,235,2.415,251,0.413,252,0.785,255,2.225,261,2.401,264,2.098,271,2.533,276,1.146,284,2.057,285,1.18,289,4.058,292,1.517,294,4.426,296,0.976,311,2.492,324,0.81,330,1.904,332,1.302,366,1.405,384,1.368,385,1.351,393,1.904,398,1.804,405,0.621,411,1.084,425,1.621,431,0.529,433,1.02,436,0.909,450,0.819,453,1.851,454,1.489,462,2.453,464,1.652,507,1.334,516,2.902,577,1.168,586,1.994,591,1.351,597,1.334,599,1.302,630,1.217,643,1.231,650,1.489,664,1.652,673,1.445,712,1.591,714,2.03,788,1.405,829,1.334,925,1.538,979,1.037,1268,1.564,1350,2.453,1496,3.63,1534,1.538,1545,1.334,1696,2.203,1710,3.889,1760,1.904,1775,1.368,1971,3.423,2070,3.866,2701,2.203,2869,2.109,2937,1.904,2954,1.445,3204,1.591,3296,2.322,3484,null,3497,1.652,3510,1.652,3518,2.03,3519,2.203,3640,1.591,3662,2.203,3720,1.538,3832,2.03,4021,1.272,4081,1.538,4094,6.046,4096,1.964,4099,1.445,4100,4.628,4110,1.591,4115,3.474,4130,2.48,4131,2.203,4132,1.904,4133,5.367,4134,2.48,4135,6.041,4136,5.21,4139,2.48,4140,2.48,4141,2.03,4142,1.851,4144,2.48,4145,3.136,4146,3.63,4147,1.722,4148,2.203,4150,2.203,4152,1.591,4153,2.48,4155,5.21,4156,4.086,4157,2.48,4158,2.48,4159,4.086,4160,2.203,4161,2.48,4162,2.48,4163,4.086,4164,4.086,4165,2.48,4166,2.48,4167,4.086,4168,2.48,4169,2.203,4170,1.804,4171,2.03,4172,1.591,4173,2.721,4174,2.721,4175,2.721,4176,2.721,4177,2.721,4178,2.721,4179,2.721,4180,2.721,4181,2.721,4182,2.721,4183,2.721,4184,2.721,4185,2.721,4186,2.721,4187,2.721,4188,2.721,4189,2.721,4190,2.721,4191,2.721,4192,2.721,4193,2.721,4194,4.086,4195,2.721,4196,2.721,4197,2.721,4198,2.721,4199,2.721,4200,2.721,4201,2.721,4202,2.721,4203,2.721,4204,2.721,4205,2.721,4206,2.721,4207,2.721,4208,2.721,4209,2.721,4210,2.721,4211,2.721,4212,2.721,4213,2.721,4214,2.721]],["title/3.类型系统/3.7.模块和路径/3.7.模块和路径.html",[]],["body/3.类型系统/3.7.模块和路径/3.7.模块和路径.html",[0,0.336,4,0.621,7,2.123,123,3.636,139,3.485,140,4.73,157,2.145,159,2.123,163,3.561,164,2.656,186,1.944,194,2.824,234,2.941,235,2.958,236,3.122,246,1.697,253,3.173,255,2.788,260,4.556,261,1.548,264,1.649,271,3.173,285,2.436,289,2.006,294,3.819,295,4.263,327,3.074,403,1.196,410,3.554,420,4.19,504,4.751,591,5.037,599,2.687,600,2.513,637,4.19,651,4.19,673,2.983,677,5.661,832,3.074,873,4.19,1211,4.556,1224,3.41,2953,2.412,2954,2.983,3489,3.724,3588,4.548,3656,3.173,3708,4.548,3720,3.173,4081,4.402,4094,6.42,4095,4.353,4131,4.548,4132,3.929,4133,6.308,4142,3.821,4147,3.554,4215,5.616,4216,5.119,4217,8.152,4218,5.119,4219,8.805,4220,7.101,4221,5.119,4222,5.119,4223,5.119,4224,5.119,4225,3.929,4226,5.119,4227,5.119,4228,3.929,4229,5.119]],["title/3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径",[4230,4.473]],["body/3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径",[0,0.158,4,0.623,7,2.13,118,2.166,139,3.493,157,2.147,159,2.13,163,3.569,164,2.665,186,1.951,194,2.833,214,4.741,234,2.95,235,2.962,246,1.702,253,3.184,255,2.797,260,4.566,261,1.553,264,1.652,271,3.184,285,2.444,289,2.012,294,3.828,295,4.273,311,3.132,327,3.083,403,1.199,410,3.566,420,4.204,504,4.759,591,5.043,599,2.696,600,2.521,637,4.204,673,2.993,677,5.67,714,4.204,832,3.083,873,4.204,1211,4.566,1224,3.421,2953,2.419,2954,2.993,3489,3.736,3588,4.562,3656,3.184,3708,4.562,3720,3.184,4081,4.412,4094,6.425,4115,4.367,4131,4.562,4132,3.942,4133,6.322,4142,3.834,4147,3.566,4216,5.136,4217,8.166,4218,5.136,4219,8.817,4220,7.116,4221,5.136,4222,5.136,4223,5.136,4224,5.136,4225,3.942,4226,5.136,4227,5.136,4228,3.942,4229,5.136,4231,5.634,4232,5.634,4233,5.634,4234,5.634,4235,5.634,4236,5.634,4237,5.634,4238,5.634,4239,5.634,4240,5.634,4241,4.807,4242,5.634,4243,5.634,4244,5.634,4245,5.634,4246,5.634,4247,5.634,4248,5.634,4249,5.634]],["title/3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html",[]],["body/3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html",[0,0.329,4,0.411,6,0.202,8,1.404,51,1.003,122,2.064,141,1.07,143,4.465,144,2.229,147,1.447,151,3.247,157,1.999,159,1.404,163,1.697,169,1.646,170,0.348,173,1.563,184,1.917,186,1.285,190,0.421,204,2.098,209,1.52,210,3.287,235,3.281,236,3.909,241,2.098,245,2.77,246,1.122,247,2.032,252,1.657,257,3.214,264,0.786,284,2.069,287,1.661,289,3.484,292,1.257,294,1.82,300,1.38,302,4.654,324,0.636,335,1.843,376,3.145,379,2.032,411,2.8,433,2.967,434,1.972,436,0.46,453,4.784,454,4.685,464,5.923,472,2.68,484,3.468,504,1.972,591,1.843,605,0.726,607,0.979,646,4.112,650,5.787,658,2.35,828,3.214,840,2.878,867,2.33,902,5.246,1350,3.848,1534,3.247,1707,3.145,1710,2.526,2757,2.77,2873,4.145,2954,4.204,2955,2.032,3217,4.919,3484,null,3640,2.171,3656,3.973,3660,2.032,3748,3.49,3830,2.462,3831,2.678,3863,2.35,3917,2.77,3981,4.288,3986,4.629,4094,5.295,4095,4.454,4096,2.518,4110,2.171,4142,2.526,4147,5.009,4250,3.713,4251,3.713,4252,3.384,4253,3.007,4254,3.384,4255,3.384,4256,2.77,4257,3.384,4258,5.238,4259,3.713,4260,3.713,4261,3.713,4262,3.713,4263,3.637,4264,9.765,4265,3.384,4266,5.693,4267,3.713,4268,3.713,4269,3.713,4270,4.45,4271,2.77]],["title/3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序",[4272,4.473]],["body/3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序",[0,0.16,4,0.405,6,0.199,8,1.383,51,0.639,122,2.034,141,1.064,144,2.209,147,1.42,151,3.21,157,1.991,159,1.383,163,1.672,169,1.627,170,0.343,173,1.54,186,1.267,190,0.415,204,2.067,209,1.497,210,3.256,215,4.441,224,1.889,235,3.27,241,2.067,245,2.729,246,1.105,247,2.002,252,1.638,257,3.184,264,0.774,284,2.045,287,1.637,289,3.467,292,1.238,294,1.793,300,1.36,302,4.6,311,3.872,324,0.405,335,1.816,376,3.109,379,2.002,411,2.774,433,2.944,434,1.943,436,0.453,453,3.866,454,4.653,464,5.894,472,2.655,484,3.441,504,1.943,591,1.816,605,0.715,607,0.965,650,5.767,658,2.315,712,4.074,828,3.184,840,2.835,867,2.304,902,5.197,1350,3.812,1534,3.21,1707,3.109,1710,2.489,2757,2.729,2873,2.639,2954,4.171,2955,2.002,3217,4.873,3484,null,3640,2.14,3656,3.936,3660,2.002,3748,3.45,3830,2.426,3852,2.639,3863,2.315,3917,2.729,3981,2.729,3986,4.593,4094,5.263,4096,2.489,4110,2.14,4115,4.403,4147,4.97,4252,3.335,4253,2.962,4254,3.335,4255,3.335,4256,2.729,4257,3.335,4258,3.335,4263,3.596,4264,9.732,4265,3.335,4266,5.64,4270,4.408,4271,2.729,4273,3.658,4274,3.658,4275,3.658,4276,3.658,4277,3.658,4278,3.658,4279,3.658,4280,3.658,4281,3.658,4282,3.658,4283,3.658,4284,3.658,4285,3.658,4286,3.658,4287,3.658,4288,3.658,4289,3.658,4290,3.658,4291,3.658,4292,3.658,4293,3.658,4294,3.658,4295,6.965,4296,3.658,4297,3.658,4298,3.658,4299,3.658,4300,3.658,4301,3.658,4302,3.658,4303,3.658,4304,3.658,4305,3.658,4306,3.658,4307,3.658,4308,5.681,4309,3.658,4310,3.658,4311,3.658,4312,3.658,4313,3.658,4314,3.658,4315,3.658,4316,3.658,4317,3.658,4318,3.658,4319,3.658]],["title/4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html",[]],["body/4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html",[0,0.345,5,1.482,6,0.564,8,1.293,9,2.004,51,0.941,81,0.668,82,1.203,84,2.575,119,0.565,138,0.66,141,0.611,143,2.55,144,1.085,145,1.599,146,1.746,147,0.738,159,2.862,163,1.564,169,1.544,170,0.626,179,0.955,182,1.743,186,2.852,189,2.001,190,1.155,191,1.866,197,1.586,209,1.4,210,1.599,231,2.001,234,1.791,236,1.902,246,1.034,251,0.818,252,0.986,282,2.227,292,1.825,296,1.62,297,2.031,324,0.738,326,1.933,328,2.269,344,2.553,350,3.55,351,2.438,370,1.72,403,1.753,411,2.147,426,2.362,436,0.668,450,0.773,458,2.001,481,0.688,485,3.772,490,1.933,586,1.881,598,1.872,605,1.054,606,0.799,607,0.902,608,0.949,609,1,610,1.108,643,1.547,646,2.001,692,3.118,881,2.553,1591,2.001,1592,4.366,1661,1.231,1662,1.272,1663,1.362,1664,1.413,1665,1.564,1666,1.599,1667,1.677,1668,1.767,1669,1.767,1670,2.001,1671,2.165,1672,2.269,1673,2.077,1674,2.269,1675,2.269,1676,2.269,2006,3.046,2896,1.375,2956,2.394,3205,1.817,3340,3.412,3341,2.165,3510,2.077,3796,2.077,4021,1.599,4081,1.933,4320,3.421,4321,3.118,4322,3.118,4323,6.529,4324,6.131,4325,3.118,4326,4.914,4327,3.421,4328,3.118,4329,2.77,4330,3.118,4331,3.421,4332,3.421,4333,6.081,4334,3.421,4335,3.118,4336,2.394,4337,3.118,4338,3.118]],["title/4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合",[4339,4.473]],["body/4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合",[0,0.344,5,1.433,6,0.56,8,1.259,9,1.962,51,0.921,81,0.661,82,1.193,84,2.552,119,0.556,138,0.65,141,0.598,144,1.056,145,1.557,146,1.709,147,0.722,159,2.819,163,1.522,169,1.512,170,0.615,179,0.929,182,1.696,186,2.814,189,1.947,190,1.147,191,1.827,197,1.552,209,1.363,210,1.557,215,2.496,231,1.947,234,1.744,246,1.006,251,0.8,252,0.96,282,2.18,292,1.786,296,1.605,297,2.004,311,1.851,324,0.725,326,1.881,328,2.208,344,2.484,350,3.528,351,2.386,370,1.674,403,1.731,411,2.101,426,2.312,436,0.654,450,0.756,458,1.947,481,0.669,485,3.692,490,1.881,586,1.841,598,1.822,605,1.031,606,0.778,607,0.878,608,0.923,609,0.973,610,1.079,643,1.506,712,1.947,741,3.035,881,2.484,979,1.269,1344,4.09,1567,2.33,1591,1.947,1592,4.273,1661,1.198,1662,1.238,1663,1.326,1664,1.376,1665,1.522,1666,1.557,1667,1.632,1668,1.719,1669,1.719,1670,1.947,1671,2.107,1672,2.208,1673,2.022,1674,2.208,1675,2.208,1676,2.208,2006,2.982,2568,2.841,2896,1.338,2956,2.33,3205,1.769,3340,3.34,3341,2.107,3510,2.022,3796,2.022,4021,1.557,4081,1.881,4321,3.035,4322,3.035,4323,6.065,4324,6.039,4325,3.035,4326,4.81,4328,3.035,4329,2.696,4330,3.035,4333,5.974,4335,3.035,4336,2.33,4337,3.035,4338,3.035,4340,3.329,4341,3.329,4342,3.329,4343,3.329,4344,3.329,4345,6.554,4346,5.974,4347,3.329,4348,3.329,4349,3.329,4350,3.329,4351,3.329,4352,3.329,4353,3.329,4354,2.841,4355,3.329,4356,3.329]],["title/4.类字段/4.1.变量/4.1.变量.html",[]],["body/4.类字段/4.1.变量/4.1.变量.html",[0,0.319,5,1.146,6,0.331,7,2.301,8,3.777,81,0.444,82,0.733,84,1.605,89,3.94,119,0.454,138,0.531,141,0.933,143,4.411,144,2.957,145,2.846,147,1.277,151,6.215,156,3.853,157,1.609,161,3.535,170,0.571,172,3.439,173,2.563,174,3.853,178,3.143,179,2.789,186,2.85,190,0.69,195,5.601,197,1.79,202,2.984,232,4.036,235,1.864,246,1.839,251,0.923,296,1.039,324,0.673,405,2.129,426,2.667,431,1.6,436,0.755,440,2.978,441,4.752,450,0.872,508,2.984,586,2.872,599,2.913,628,3.233,646,3.56,824,6.142,1360,6.666,1689,5.104,2953,2.614,2955,3.331,3505,4.259,3641,3.233,4021,2.846,4263,3.853,4357,4.542,4358,5.548,4359,6.087,4360,4.718,4361,5.548,4362,3.331]],["title/4.类字段/4.1.变量/4.1.变量.html#4-1-变量",[4363,4.473]],["body/4.类字段/4.1.变量/4.1.变量.html#4-1-变量",[0,0.318,5,1.138,6,0.328,7,2.277,8,3.761,81,0.44,82,0.725,84,1.588,89,3.9,119,0.45,138,0.525,141,0.926,144,2.942,145,2.816,147,1.27,151,5.877,156,3.813,157,1.597,161,3.51,170,0.565,172,3.404,173,2.537,178,3.111,179,2.777,186,2.83,190,0.683,197,1.772,202,2.953,215,4.387,226,5.562,232,3.994,235,1.845,246,1.82,251,0.914,296,1.028,324,0.666,405,1.865,426,2.64,431,1.588,436,0.747,440,2.61,441,3.069,450,0.863,508,2.953,586,2.852,599,2.882,628,3.2,712,3.523,824,6.098,1360,6.619,1689,5.077,2953,2.587,2955,3.297,3505,4.215,3641,3.2,4007,4.494,4021,2.816,4263,3.813,4357,4.494,4358,5.491,4360,4.669,4361,5.491,4362,3.297,4364,6.023,4365,6.023,4366,6.023,4367,6.023,4368,6.023,4369,6.023,4370,6.023,4371,6.023,4372,6.023,4373,6.023]],["title/4.类字段/4.2.属性/4.2.3.getter和setter的规则.html",[]],["body/4.类字段/4.2.属性/4.2.3.getter和setter的规则.html",[0,0.335,4,0.381,5,1.223,6,0.478,51,0.947,81,0.489,82,0.807,84,1.768,119,0.5,138,0.585,139,3.699,140,2.094,141,0.76,142,2.104,143,4.629,144,1.72,145,3.865,146,2.463,147,0.918,157,1.06,158,1.948,169,0.988,170,0.629,173,1.452,174,3.433,175,3.728,179,0.963,182,1.757,184,2.801,186,3.18,187,2.287,190,1.078,194,1.734,197,2.236,236,3.016,251,1.017,261,0.95,264,1.148,282,2.77,292,1.836,295,2.969,296,1.625,297,2.264,324,0.742,333,1.917,343,1.832,350,3.629,351,3.739,384,1.734,396,1.887,401,1.781,403,1.155,411,2.16,426,2.377,436,0.831,443,4.244,444,2.881,450,0.961,481,1.091,490,1.948,500,3.294,577,1.481,605,1.06,606,1.267,607,1.43,625,2.413,642,2.287,664,2.094,828,1.576,829,1.69,867,1.398,886,2.413,1080,2.182,1179,3.135,1214,1.887,1228,2.719,1280,2.182,1415,1.543,1700,5.32,1707,1.887,2062,1.832,2306,2.413,2896,2.18,2953,1.481,2954,1.832,3214,1.734,3217,2.413,3340,5.557,3341,6.195,3487,2.182,3493,6.55,3506,2.573,3510,2.094,3515,1.832,3520,1.832,4021,1.612,4030,1.65,4076,2.573,4077,1.948,4083,2.094,4096,2.377,4323,4.047,4324,5.43,4374,3.448,4375,2.792,4376,3.143,4377,1.832,4378,3.448,4379,5.424,4380,7.109,4381,3.143,4382,3.143,4383,3.143,4384,3.143,4385,3.448,4386,3.448,4387,3.448,4388,3.143,4389,3.143,4390,3.448,4391,3.143,4392,3.143,4393,3.143,4394,3.143,4395,2.672,4396,3.143]],["title/4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则",[4397,4.473]],["body/4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则",[0,0.336,4,0.368,5,1.204,6,0.47,35,1.881,51,0.921,81,0.478,82,0.789,84,1.728,119,0.489,138,0.571,139,3.637,141,0.743,142,2.047,144,1.673,145,3.801,146,2.416,147,0.897,157,1.031,158,1.881,169,0.954,170,0.615,173,1.402,174,2.107,175,2.934,179,0.929,182,1.696,186,3.137,187,2.208,190,1.065,194,1.674,197,2.193,214,2.022,215,4.578,224,2.725,251,0.994,261,0.918,264,1.117,282,2.708,292,1.786,295,1.822,296,1.605,297,2.234,311,2.934,324,0.725,333,1.851,343,1.769,350,3.604,351,3.676,384,1.674,396,1.822,401,1.719,403,1.123,411,2.101,426,2.312,436,0.813,443,3.34,444,2.803,450,0.939,481,1.061,490,1.881,500,3.204,577,1.43,605,1.031,606,1.233,607,1.391,625,2.33,642,2.208,664,2.022,828,1.522,829,1.632,867,1.35,886,2.33,1080,2.107,1179,2.467,1214,1.822,1228,2.658,1268,1.913,1280,2.107,1415,1.49,1700,5.218,1707,1.822,2062,1.769,2306,2.33,2896,2.12,2953,1.43,2954,1.769,3214,1.674,3217,2.33,3340,5.145,3341,5.736,3487,2.107,3493,6.453,3506,2.484,3510,2.022,3515,1.769,3520,1.769,3633,3.035,4021,1.557,4030,1.593,4076,2.484,4077,1.881,4083,2.022,4096,2.312,4323,3.937,4324,5.308,4375,2.696,4376,3.035,4377,1.769,4380,7.003,4381,3.035,4382,3.035,4383,3.035,4384,3.035,4388,3.035,4389,3.035,4391,3.035,4392,3.035,4393,3.035,4394,3.035,4395,2.581,4396,3.035,4398,3.329,4399,3.329,4400,3.329,4401,3.329,4402,3.329,4403,3.329,4404,3.329,4405,3.329,4406,3.329,4407,3.329,4408,3.329,4409,3.329,4410,3.329,4411,3.329,4412,3.329,4413,3.329,4414,3.329,4415,3.329,4416,3.329,4417,3.329,4418,3.329,4419,3.329,4420,3.329,4421,3.329,4422,3.329,4423,3.329,4424,3.329]],["title/4.类字段/4.2.属性/4.2.2.对类型系统的影响.html",[]],["body/4.类字段/4.2.属性/4.2.2.对类型系统的影响.html",[0,0.327,5,1.321,6,0.476,81,0.552,82,0.911,119,0.565,138,0.66,141,1.206,143,2.549,145,4.673,146,2.834,147,1.036,157,1.479,165,2.292,170,0.71,184,3.909,186,3.029,190,0.991,195,3.668,197,2.573,251,0.818,252,1.554,257,2.464,283,3.883,285,2.338,292,2.562,296,1.77,297,1.329,324,0.596,333,4.208,350,2.918,372,3.046,373,2.71,403,1.611,426,4.158,433,2.838,436,0.668,450,0.772,465,2.248,470,2.71,506,3.273,599,2.579,931,3.411,1099,4.022,1213,4.022,1286,4.022,1533,3.574,1545,2.643,1700,3.771,2896,2.166,2953,3.251,3340,4.791,3341,4.791,3510,3.273,3511,3.771,3648,4.022,3748,4.597,3750,3.909,3788,3.771,3830,3.574,4077,3.046,4081,3.046,4323,7.457,4377,2.863,4425,5.39,4426,4.913,4427,4.913,4428,4.913,4429,4.365,4430,4.913,4431,5.39,4432,5.648,4433,4.365]],["title/4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响",[4434,4.473]],["body/4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响",[0,0.333,5,1.305,6,0.469,81,0.542,82,0.893,119,0.554,138,0.647,141,1.197,145,4.625,146,2.792,147,1.016,157,1.451,165,2.23,170,0.697,186,2.984,190,0.977,197,2.535,215,2.48,222,4.475,224,3.834,226,3.568,251,0.795,252,1.512,257,2.397,283,3.528,285,2.275,292,2.513,296,1.754,297,1.293,324,0.58,333,4.128,350,2.874,372,2.963,373,2.637,403,1.581,426,3.253,433,2.783,436,0.65,450,0.751,465,2.187,470,2.637,506,3.184,599,2.509,779,3.395,931,3.319,1099,3.913,1213,3.913,1286,3.913,1533,3.477,1545,2.571,1700,3.669,2896,2.107,2953,3.188,3340,3.319,3341,3.319,3510,3.184,3511,3.669,3648,3.913,3748,4.508,3750,3.834,3788,3.669,3830,3.477,4077,2.963,4081,2.963,4323,7.381,4377,2.785,4426,4.78,4427,4.78,4428,4.78,4429,4.246,4430,4.78,4432,5.54,4433,4.246,4435,5.244,4436,5.244,4437,5.244,4438,5.244,4439,5.244,4440,5.244,4441,5.244,4442,5.244,4443,5.244]],["title/4.类字段/4.3.方法/4.3.1.重写方法.html",[]],["body/4.类字段/4.3.方法/4.3.1.重写方法.html",[0,0.328,5,1.346,6,0.329,8,2.286,51,1.056,81,0.441,82,0.728,84,2.326,119,0.451,138,0.527,141,1.256,143,2.859,144,1.917,146,2.857,147,0.828,157,1.432,161,2.596,165,1.687,170,0.567,186,2.093,190,1.18,191,2.093,194,1.995,197,1.167,232,2.63,233,1.58,251,0.917,252,1.144,264,1.28,283,1.623,285,3.178,289,2.159,293,5.01,296,1.743,297,2.175,324,0.669,329,2.893,356,3.211,365,2.63,373,1.995,381,2.959,410,2.51,411,1.58,431,1.175,433,1.487,436,0.749,450,0.866,481,1.216,483,1.995,586,1.384,605,1.182,606,1.413,607,1.594,608,1.677,609,1.766,610,1.958,636,2.171,650,2.171,1214,2.171,1661,2.176,1662,2.248,1663,1.58,1664,1.639,1665,1.813,1666,1.854,1800,1.834,2336,6.622,2754,5.126,2757,4.511,2762,2.959,2896,1.594,2953,1.703,2954,2.107,3484,null,3640,2.32,3641,2.107,3655,2.959,3748,2.409,3750,5.723,3794,3.212,3926,3.384,4096,1.738,4444,3.212,4445,2.51,4446,3.212,4447,9.905,4448,3.615,4449,3.966,4450,3.966,4451,2.959,4452,3.966,4453,3.615,4454,3.615,4455,3.615,4456,5.511,4457,3.615,4458,3.615,4459,3.615,4460,3.966]],["title/4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法",[4461,4.473]],["body/4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法",[0,0.34,5,1.316,6,0.313,8,2.176,51,1.005,81,0.42,82,0.693,84,2.26,119,0.43,138,0.502,141,1.24,144,1.825,146,2.776,147,0.788,157,1.376,161,2.472,165,1.582,170,0.54,186,1.993,190,1.16,191,1.993,194,1.871,197,1.094,215,2.722,218,2.776,232,2.467,233,1.482,251,0.873,252,1.073,264,1.218,283,1.523,285,3.054,289,2.056,293,4.619,296,1.711,297,2.113,324,0.637,329,2.754,356,3.058,365,2.467,373,1.871,381,2.776,410,2.355,411,1.482,431,1.119,433,1.395,436,0.714,450,0.825,481,1.157,483,1.871,586,1.298,605,1.125,606,1.345,607,1.518,608,1.596,609,1.682,610,1.865,636,2.036,650,2.036,1214,2.036,1661,2.072,1662,2.14,1663,1.482,1664,1.537,1665,1.701,1666,1.74,1800,1.72,2336,6.554,2754,4.028,2757,4.295,2896,1.495,2953,1.598,2954,1.976,3484,null,3640,2.176,3641,1.976,3655,2.776,3748,2.259,3750,5.598,3794,3.013,3971,3.175,4096,1.63,4444,3.013,4445,2.355,4446,3.013,4447,9.331,4448,3.391,4451,2.776,4453,3.391,4454,3.391,4455,3.391,4456,3.391,4457,3.391,4458,3.391,4459,3.391,4462,3.72,4463,3.72,4464,3.72,4465,3.72,4466,3.72,4467,3.72,4468,3.72,4469,3.72,4470,3.72,4471,3.72,4472,3.72,4473,3.72,4474,3.72,4475,3.72,4476,3.72,4477,3.72]],["title/4.类字段/4.2.属性/4.2.属性.html",[]],["body/4.类字段/4.2.属性/4.2.属性.html",[0,0.336,4,0.803,5,0.708,6,0.173,8,1.922,81,0.464,82,0.382,119,0.474,138,0.277,139,2.843,140,3.859,141,0.823,142,1.972,143,4.95,144,2.015,145,2.971,146,2.745,147,0.435,157,1.242,159,2.746,163,2.324,164,1.503,167,1.598,169,1.821,173,2.141,174,2.011,175,2.827,179,2.217,182,4.71,183,3.667,184,3.282,185,2.011,186,3.911,190,0.36,191,1.76,197,0.935,202,1.558,203,2.382,209,1.301,231,1.859,235,2.831,236,5.299,246,0.96,252,1.466,258,3.218,260,1.859,261,2.189,264,1.345,278,2.011,282,3.282,283,2.081,288,2.59,289,1.135,292,3.011,296,1.085,333,1.767,336,1.365,343,1.688,350,1.06,370,1.598,376,2.783,384,1.598,403,0.676,416,1.93,447,1.796,470,1.598,488,1.365,490,4.104,493,1.641,507,1.558,576,2.162,586,1.109,598,1.739,628,1.688,638,2.873,641,1.392,646,1.859,657,2.783,832,1.739,867,1.289,876,1.859,1179,2.377,1224,3.087,1228,3.608,1278,2.223,1280,2.011,1282,3.793,1350,1.739,1407,2.223,1700,6.468,1707,1.739,1748,1.664,2301,1.796,2896,2.043,2915,1.739,2953,1.365,3199,1.93,3201,1.739,3204,3.717,3205,1.688,3219,2.223,3340,4.022,3341,4.022,3485,1.93,3487,2.011,3488,1.796,3491,1.688,3515,1.688,3635,1.796,3656,1.796,3763,4.447,3796,3.087,3869,2.573,4081,1.796,4083,1.93,4096,2.228,4110,1.859,4225,2.223,4336,2.223,4377,1.688,4478,2.897,4479,2.897,4480,5.423,4481,7.241,4482,3.178,4483,3.178,4484,3.087,4485,1.739,4486,6.62,4487,2.897,4488,4.634,4489,3.178,4490,3.178,4491,2.897,4492,3.178,4493,2.897,4494,4.634,4495,4.634,4496,3.178,4497,2.011,4498,2.573,4499,2.897,4500,2.897,4501,2.897,4502,2.897,4503,2.011,4504,2.897,4505,2.897,4506,2.573,4507,2.573,4508,2.897]],["title/4.类字段/4.2.属性/4.2.属性.html#4-2-属性",[4509,4.473]],["body/4.类字段/4.2.属性/4.2.属性.html#4-2-属性",[0,0.316,4,0.56,5,0.705,6,0.172,8,1.914,81,0.462,82,0.38,118,1.215,119,0.378,138,0.276,139,2.833,141,0.82,142,1.963,144,2.008,145,2.96,146,2.738,147,0.433,157,1.238,159,2.737,163,2.314,164,1.495,167,1.589,169,1.814,173,2.132,174,2,175,1.757,179,2.211,182,4.7,183,3.651,185,2,186,3.908,190,0.358,191,1.753,197,0.93,202,1.549,203,2.374,209,1.293,214,3.845,215,4.944,224,3.27,231,1.848,235,2.825,246,0.955,252,1.46,258,3.204,260,1.848,261,2.183,264,1.34,278,2,282,2.991,283,2.072,288,2.579,289,1.129,292,2.861,296,1.081,311,5.29,333,1.757,336,1.357,343,1.679,350,1.054,370,1.589,376,2.77,384,1.589,403,0.673,416,1.919,447,1.786,470,1.589,488,1.357,490,4.091,493,1.632,507,1.549,576,2.15,586,1.103,598,1.73,628,1.679,638,2.86,641,1.385,657,2.77,712,1.848,832,1.73,867,1.282,876,1.848,979,1.93,1033,2.358,1179,1.478,1224,3.074,1228,2.936,1278,2.211,1280,2,1282,3.777,1350,1.73,1407,2.211,1625,2.559,1700,6.455,1707,1.73,1748,1.655,2136,2.28,2301,1.786,2896,2.034,2915,1.73,2953,1.357,3199,1.919,3201,1.73,3204,3.703,3205,1.679,3219,2.211,3340,3.204,3341,3.204,3485,1.919,3487,2,3488,1.786,3491,1.679,3515,1.679,3635,1.786,3656,1.786,3763,4.43,3796,3.074,3869,2.559,4081,1.786,4083,1.919,4096,2.218,4110,1.848,4225,2.211,4336,2.211,4377,1.679,4478,2.881,4479,2.881,4480,4.319,4481,7.221,4484,3.074,4485,1.73,4486,5.772,4487,2.881,4488,4.614,4491,2.881,4493,2.881,4494,4.614,4495,4.614,4497,2,4498,2.559,4499,2.881,4500,2.881,4501,2.881,4502,2.881,4503,2,4504,2.881,4505,2.881,4506,2.559,4507,2.559,4510,3.16,4511,3.16,4512,3.16,4513,3.16,4514,3.16,4515,3.16,4516,3.16,4517,3.16,4518,3.16,4519,3.16,4520,3.16,4521,3.16,4522,3.16,4523,3.16,4524,3.16,4525,3.16,4526,3.16,4527,3.16,4528,3.16,4529,3.16,4530,3.16,4531,3.16,4532,3.16,4533,3.16,4534,3.16,4535,3.16,4536,3.16,4537,3.16,4538,3.16,4539,3.16,4540,3.16,4541,5.062,4542,3.16,4543,3.16,4544,3.16,4545,3.16,4546,3.16,4547,3.16,4548,3.16,4549,3.16,4550,3.16,4551,2.881]],["title/4.类字段/4.3.方法/4.3.方法.html",[]],["body/4.类字段/4.3.方法/4.3.方法.html",[0,0.336,5,1.44,6,0.429,7,1.696,8,3.516,42,3.634,43,3.523,44,5.401,81,0.484,92,4.785,119,0.495,138,0.578,141,0.752,143,3.137,144,1.423,146,3.154,147,1.273,156,2.84,157,2.064,158,2.536,161,1.927,167,2.257,169,2.26,170,0.818,174,2.84,176,2.78,178,2.317,184,2.317,186,1.554,189,2.625,190,1.103,191,1.554,195,3.053,197,1.32,202,2.2,235,2.031,236,2.495,251,0.681,264,0.95,276,1.89,296,1.488,297,2.483,300,2.466,324,0.496,330,3.14,335,2.228,337,4.294,343,2.384,384,2.257,405,1.514,431,0.872,436,0.556,440,1.433,447,2.536,450,0.643,456,2.456,472,3.84,504,2.384,508,3.252,586,3.041,598,2.456,641,1.966,646,2.625,657,2.456,786,3.137,828,2.052,867,2.69,919,3.879,936,2.84,1179,3.689,1689,2.456,1707,2.456,1971,3.425,1972,2.766,3214,2.257,3491,2.384,3503,2.725,3505,4.641,3571,3.634,3635,2.536,3640,2.625,3704,2.536,4073,3.348,4360,5.141,4484,4.028,4485,2.456,4552,4.487,4553,4.09,4554,6.633,4555,6.504,4556,4.487,4557,4.09,4558,2.536,4559,4.09]],["title/4.类字段/4.3.方法/4.3.方法.html#4-3-方法",[4560,4.473]],["body/4.类字段/4.3.方法/4.3.方法.html#4-3-方法",[0,0.332,5,1.392,6,0.423,7,1.658,8,3.483,42,3.552,43,3.464,44,4.041,81,0.476,92,3.164,118,1.686,119,0.487,138,0.569,141,0.739,144,1.391,146,3.128,147,1.261,156,2.776,157,2.051,158,2.478,161,1.883,167,2.205,169,2.23,170,0.73,174,2.776,178,2.265,186,1.518,189,2.565,190,1.094,191,1.518,197,1.29,202,2.15,215,3.084,224,2.265,226,2.984,235,1.997,251,0.665,264,0.928,276,1.847,296,1.329,297,2.38,300,2.425,311,2.438,324,0.485,330,3.069,335,2.177,343,2.33,384,2.205,405,1.488,431,0.852,436,0.544,440,1.401,447,2.478,450,0.629,456,2.4,472,3.812,504,2.33,508,3.197,516,4.222,586,3.007,598,2.4,641,1.922,657,2.4,712,2.565,786,3.084,828,2.005,867,2.644,919,2.565,936,2.776,1179,3.049,1689,2.4,1707,2.4,1971,3.368,1972,2.72,2599,3.998,3214,2.205,3491,2.33,3503,2.663,3505,4.563,3571,3.552,3635,2.478,3640,2.565,3704,2.478,4073,3.272,4360,3.399,4484,3.96,4485,2.4,4553,3.998,4555,6.431,4557,3.998,4558,2.478,4559,3.998,4561,4.386,4562,4.386,4563,4.386,4564,4.386,4565,4.386,4566,4.386,4567,4.386,4568,4.386,4569,4.386,4570,4.386,4571,4.386,4572,4.386,4573,4.386,4574,6.521,4575,4.386,4576,4.386,4577,4.386,4578,4.386,4579,4.386,4580,4.386,4581,4.386,4582,4.386,4583,4.386,4584,4.386,4585,4.386,4586,4.386]],["title/4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html",[]],["body/4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html",[0,0.296,5,1.09,6,0.307,51,0.987,81,0.413,84,1.491,119,0.422,138,0.493,141,1.098,143,4.581,146,2.535,147,0.774,157,1.893,165,2.403,170,0.53,179,1.578,182,2.88,183,4.077,190,1.152,191,1.957,230,3.248,251,0.857,252,1.63,261,2.156,285,3.394,290,3.617,292,1.913,293,5.482,295,4.912,296,1.736,297,2.388,324,0.625,328,3.748,329,2.705,337,5.065,384,2.842,409,4.952,433,2.119,436,0.701,450,0.81,472,2.983,481,1.136,502,4.217,507,2.771,577,2.427,586,1.972,605,1.105,606,1.321,607,1.491,608,1.568,609,1.651,610,1.831,650,3.093,876,3.306,1206,3.194,1661,2.035,1662,2.102,2336,5.665,3489,3.748,3750,4.635,3761,6.677,3792,4.577,3795,3.578,3797,4.577,3918,4.577,4083,3.432,4151,5.152,4558,3.194,4587,5.652,4588,5.152,4589,8.18,4590,7.132,4591,6.064,4592,5.152,4593,5.152,4594,4.577,4595,3.748,4596,5.152,4597,5.152,4598,5.152,4599,4.577]],["title/4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响",[4600,4.473]],["body/4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响",[0,0.335,5,1.05,6,0.291,51,0.935,81,0.391,84,1.413,119,0.4,138,0.467,141,1.072,146,2.441,147,0.733,157,1.849,165,2.278,170,0.503,179,1.495,190,1.13,191,1.855,215,4.475,230,3.078,251,0.813,252,1.545,261,2.077,285,3.269,290,3.484,292,1.813,293,5.375,295,4.125,296,1.703,297,2.333,324,0.592,328,3.552,329,2.563,384,2.694,409,3.391,433,2.008,436,0.664,450,0.768,472,2.873,481,1.077,502,3.997,507,2.626,516,4.879,577,2.3,586,1.869,605,1.047,606,1.252,607,1.413,608,1.486,609,1.565,610,1.735,650,2.932,876,3.133,1206,3.027,1661,1.928,1662,1.992,2336,5.534,3489,3.552,3750,4.503,3761,4.571,3792,4.338,3795,3.391,3797,4.338,3918,4.338,3951,4.883,4083,3.253,4194,4.883,4558,3.027,4588,4.883,4589,7.948,4590,6.87,4591,4.152,4592,4.883,4593,4.883,4594,4.338,4595,3.552,4596,4.883,4597,4.883,4598,4.883,4599,4.338,4601,5.357,4602,5.357,4603,5.357,4604,5.357,4605,5.357,4606,5.357,4607,5.357,4608,5.357]],["title/4.类字段/4.4.访问修饰符/4.4.1.可见性.html",[]],["body/4.类字段/4.4.访问修饰符/4.4.1.可见性.html",[0,0.323,4,0.655,5,1.281,6,0.322,8,1.46,51,1.034,81,0.432,82,0.465,84,1.562,88,1.412,119,0.442,138,0.516,139,1.727,141,1.224,142,2.794,143,4.791,147,1.193,151,2.182,167,4.063,170,0.556,184,1.994,186,3.507,190,1.12,195,4.03,233,1.538,236,2.146,251,0.898,252,1.113,261,2.402,264,0.817,276,1.626,282,2.447,285,2.569,286,3.464,291,2.113,293,2.081,295,5.913,296,1.845,324,0.655,332,1.847,365,2.56,367,1.941,368,3.126,369,2.258,370,1.941,373,1.941,374,1.967,396,2.113,411,1.538,433,2.22,436,0.734,448,4.778,450,0.849,481,1.191,507,1.893,586,2.066,605,1.157,606,1.384,607,1.562,608,1.071,609,1.128,610,1.251,630,1.727,647,1.994,673,2.051,829,1.893,886,2.701,922,6.502,1201,2.113,1350,3.241,1372,2.881,1545,1.893,1661,1.39,1662,1.435,1663,1.538,1664,1.595,1707,2.113,2479,5.828,2480,5.197,2720,4.419,2754,2.701,2762,4.419,2952,2.344,3212,2.444,3515,2.051,3640,2.258,3656,2.182,3704,2.182,3750,4.501,3771,2.881,3863,2.444,4082,3.126,4083,4.906,4096,3.819,4132,2.701,4558,3.347,4591,2.992,4609,3.126,4610,7.365,4611,3.519,4612,3.519,4613,3.861,4614,3.861,4615,3.126,4616,3.861,4617,2.56,4618,3.519,4619,6.568,4620,3.519,4621,6.568,4622,3.519,4623,3.861,4624,3.861,4625,3.519,4626,3.519,4627,3.519,4628,3.861,4629,3.519,4630,3.519,4631,3.861]],["title/4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性",[4632,4.473]],["body/4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性",[0,0.337,4,0.626,5,1.251,6,0.308,8,1.377,35,2.058,51,0.989,81,0.413,82,0.438,84,1.493,88,1.332,119,0.423,138,0.494,139,1.63,141,1.209,142,2.694,147,1.161,151,2.058,167,3.94,170,0.531,186,3.447,190,1.098,215,4.709,224,1.881,226,3.853,233,1.451,251,0.859,252,1.05,261,2.338,264,0.771,276,1.534,282,2.339,285,2.456,286,3.312,291,1.994,293,1.964,295,5.761,296,1.797,311,2.025,324,0.626,332,1.743,365,2.416,367,1.832,368,2.95,369,2.131,370,1.832,373,1.832,374,1.856,396,1.994,411,1.451,433,2.123,436,0.702,448,4.606,450,0.811,481,1.139,507,1.786,586,1.976,605,1.107,606,1.323,607,1.493,608,1.01,609,1.064,610,1.18,630,1.63,647,1.881,673,1.935,829,1.786,886,2.549,922,5.846,1201,1.994,1350,3.099,1372,2.718,1545,1.786,1661,1.311,1662,1.354,1663,1.451,1664,1.505,1707,1.994,2479,5.651,2480,5.011,2720,2.718,2754,2.549,2762,2.718,2952,2.212,3212,2.306,3515,1.935,3640,2.131,3656,2.058,3704,2.058,3750,4.046,3771,2.718,3863,2.306,4082,2.95,4083,4.757,4096,3.718,4132,2.549,4558,3.2,4609,2.95,4610,7.141,4611,3.321,4612,3.321,4615,2.95,4617,2.416,4618,3.321,4619,6.332,4620,3.321,4621,6.332,4622,3.321,4625,3.321,4626,3.321,4627,3.321,4629,3.321,4630,3.321,4633,3.643,4634,3.643,4635,3.643,4636,3.643,4637,3.643,4638,3.643,4639,3.643,4640,3.643,4641,3.643,4642,3.643,4643,3.643,4644,3.643,4645,3.643,4646,3.643,4647,3.643,4648,3.643,4649,3.321,4650,3.643,4651,3.643,4652,3.643,4653,3.643]],["title/4.类字段/4.4.访问修饰符/4.4.2.Inline.html",[]],["body/4.类字段/4.4.访问修饰符/4.4.2.Inline.html",[0,0.332,4,0.632,5,1.213,6,0.453,7,1.695,8,1.695,9,2.125,51,0.783,81,0.678,82,1.147,88,1.64,119,0.547,138,0.727,141,0.831,142,1.738,143,2.12,144,3.086,147,1.192,153,1.445,158,1.538,159,2.161,165,1.906,167,1.368,168,4.395,169,1.637,170,0.688,173,1.146,179,1.251,190,1.217,191,2.73,197,2.452,209,1.835,230,2.576,246,1.354,251,0.867,252,1.292,255,3.29,261,0.75,264,1.765,276,3.086,286,3.876,289,0.972,290,5.235,296,0.976,297,1.634,299,2.622,324,0.81,334,1.963,336,1.168,356,1.445,366,1.405,369,2.622,372,1.538,373,1.368,384,2.254,403,0.954,411,2.276,412,1.904,414,1.804,416,2.722,429,1.804,435,2.03,436,0.909,439,0.987,443,2.837,444,1.445,450,0.819,465,1.135,470,1.368,472,1.037,481,0.547,485,3.136,490,1.538,493,1.405,500,1.652,584,2.203,586,1.564,605,0.876,606,0.636,607,0.718,608,0.755,618,1.244,625,1.904,630,1.217,636,1.489,639,1.722,643,1.231,647,1.405,816,3.136,829,1.334,852,2.203,868,2.03,869,5.105,872,1.904,874,2.03,887,2.837,921,2.203,1201,1.489,1206,1.538,1214,1.489,1223,3.006,1415,3.528,1499,2.03,1523,1.368,1533,1.804,1534,1.538,1545,1.334,1591,3.876,1689,1.489,1760,1.904,1761,2.03,1842,5.367,2062,1.445,2896,1.093,2915,1.489,3103,3.63,3205,1.445,3497,1.652,3515,1.445,3669,1.804,3704,2.533,3705,2.03,3707,4.265,3747,2.203,3771,2.03,3776,2.203,3796,1.652,3988,3.344,4021,1.272,4077,1.538,4110,1.591,4148,2.203,4170,1.804,4225,1.904,4263,1.722,4362,1.489,4432,3.344,4433,2.203,4558,2.533,4595,2.972,4654,2.48,4655,2.48,4656,2.48,4657,4.086,4658,4.086,4659,6.041,4660,4.086,4661,2.03,4662,2.721,4663,2.721,4664,2.721,4665,2.721,4666,2.48,4667,2.48,4668,2.48,4669,2.48,4670,2.48,4671,2.48,4672,1.722,4673,2.48,4674,2.322,4675,1.904,4676,2.48,4677,2.721,4678,2.48,4679,2.48,4680,2.48,4681,2.721,4682,2.48,4683,2.109,4684,2.721,4685,2.48,4686,2.48,4687,2.48,4688,2.48,4689,2.203,4690,2.03,4691,2.48,4692,2.48,4693,2.48,4694,2.48,4695,2.03,4696,2.48]],["title/4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline",[4654,4.077]],["body/4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline",[0,0.34,4,0.611,5,1.189,6,0.444,7,1.628,8,0.98,9,1.601,51,0.752,81,0.667,82,1.129,88,1.575,119,0.533,138,0.711,141,0.809,142,1.67,144,2.974,147,1.169,153,1.377,158,1.464,159,2.088,165,1.831,167,1.303,168,4.265,169,1.582,170,0.67,173,1.091,179,1.202,190,1.205,191,2.666,197,2.4,209,1.762,215,2.036,230,2.474,246,1.301,251,0.838,252,1.241,255,3.193,261,0.714,264,1.727,276,3.005,286,3.762,289,0.925,290,5.178,296,0.943,297,1.586,299,2.518,324,0.789,334,1.869,336,1.113,356,1.377,366,1.338,369,2.518,372,1.464,373,1.303,384,2.165,403,0.916,411,2.199,412,1.813,414,1.718,416,2.614,429,1.718,435,1.934,436,0.885,439,0.94,443,1.64,444,1.377,450,0.791,465,1.081,470,1.303,472,0.988,481,0.521,485,3.012,490,1.464,493,1.338,500,1.574,584,2.099,586,1.502,605,0.841,606,0.606,607,0.683,608,0.719,618,1.185,625,1.813,630,1.16,636,1.418,639,1.64,643,1.172,647,1.338,816,3.012,829,1.271,852,2.099,868,1.934,869,4.984,872,1.813,874,1.934,887,2.725,921,2.099,1201,1.418,1206,1.464,1214,1.418,1223,2.935,1415,3.445,1499,1.934,1523,1.303,1533,1.718,1534,1.464,1545,1.271,1591,3.762,1689,1.418,1760,1.813,1761,1.934,1842,5.208,2062,1.377,2896,1.041,2915,1.418,3103,3.486,3205,1.377,3497,1.574,3515,1.377,3669,1.718,3704,2.433,3705,1.934,3707,4.12,3747,2.099,3771,1.934,3776,2.099,3796,1.574,3988,3.212,4021,1.212,4077,1.464,4110,1.516,4148,2.099,4170,1.718,4225,1.813,4263,1.64,4362,1.418,4432,3.212,4433,2.099,4558,2.433,4595,2.855,4655,2.362,4656,2.362,4657,3.924,4658,3.924,4659,5.863,4660,3.924,4661,1.934,4666,2.362,4667,2.362,4668,2.362,4669,2.362,4670,2.362,4671,2.362,4672,1.64,4673,2.362,4675,1.813,4676,2.362,4678,2.362,4679,2.362,4680,2.362,4682,2.362,4685,2.362,4686,2.362,4687,2.362,4688,2.362,4689,2.099,4690,1.934,4691,2.362,4692,2.362,4693,2.362,4694,2.362,4695,1.934,4696,2.362,4697,2.591,4698,2.591,4699,2.591,4700,2.591,4701,2.591,4702,2.591,4703,2.591,4704,2.211,4705,2.591,4706,4.305,4707,2.591,4708,2.591,4709,2.591,4710,2.591,4711,2.591,4712,2.591,4713,2.009,4714,2.591,4715,2.591]],["title/4.类字段/4.4.访问修饰符/4.4.4.Override.html",[]],["body/4.类字段/4.4.访问修饰符/4.4.4.Override.html",[0,0.211,141,1.069,143,5.278,146,3.056,153,3.985,161,3.222,176,4.649,186,2.597,195,6.42,235,2.298,261,2.068,293,6.36,333,4.171,383,5.249,385,3.725,433,2.813,1206,4.239,1215,4.975,1415,3.357,1545,3.678,2754,5.249,2762,5.598,2953,3.222,3213,5.249,3478,4.106,3748,4.556,3765,5.249,4021,3.508,4377,3.985,4444,6.075,4672,4.749,4716,6.839,4717,6.839,4718,5.598,4719,6.839,4720,6.839,4721,5.598,4722,6.075,4723,7.502]],["title/4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override",[4716,4.077]],["body/4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override",[141,1.072,146,3.065,153,4.002,161,3.236,176,4.669,186,2.609,215,5.285,226,6.437,235,2.308,261,2.077,293,6.309,333,4.189,383,5.272,385,3.741,433,2.825,1206,4.258,1215,4.997,1415,3.371,1545,3.694,2762,5.622,2953,3.236,3213,5.272,3478,4.124,3748,4.576,3765,5.272,4021,3.523,4377,4.002,4444,6.102,4672,4.769,4717,6.868,4718,5.622,4719,6.868,4720,6.868,4721,5.622,4722,6.102,4724,7.535,4725,7.535,4726,7.535,4727,7.535]],["title/4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html",[]],["body/4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html",[0,0.335,5,1.157,6,0.336,51,1.078,81,0.451,84,2.849,119,0.461,138,0.538,141,0.7,143,3.93,146,2,147,1.137,170,0.579,190,1.272,191,2.137,251,0.936,261,1.701,276,2.599,283,4.421,290,3.842,296,1.054,297,2.316,324,0.683,329,2.954,366,3.188,405,1.897,431,1.615,436,0.765,450,0.885,598,4.548,618,2.822,638,3.488,646,3.61,650,3.379,1489,6.36,1523,5.718,2896,3.339,2952,3.749,3213,4.319,3509,4.606,3653,4.606,3669,4.093,4109,4.999,4595,4.093,4599,4.999,4728,5.627,4729,5.627,4730,5.627,4731,6.173,4732,5.627,4733,5.627]],["title/4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic",[4728,4.077]],["body/4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic",[0,0.334,5,1.138,6,0.328,51,1.052,81,0.44,84,2.623,118,2.316,119,0.45,138,0.525,141,0.683,146,1.951,147,1.119,170,0.565,190,1.265,191,2.085,215,3.866,251,0.914,261,1.66,276,2.537,283,4.39,290,3.778,296,1.028,297,2.287,322,4.494,324,0.666,329,2.882,366,3.111,405,1.865,431,1.588,436,0.747,450,0.863,598,4.473,618,2.754,638,3.404,650,3.297,712,3.523,1489,5.872,1523,5.689,2896,3.284,2952,3.658,3213,4.215,3509,4.494,3653,4.494,3669,3.994,4109,4.878,4595,3.994,4599,4.878,4729,5.491,4730,5.491,4732,5.491,4733,5.491,4734,6.023,4735,6.023,4736,6.023,4737,6.023,4738,6.023,4739,6.023,4740,8.173,4741,6.023,4742,6.023]],["title/4.类字段/4.4.访问修饰符/4.4.访问修饰符.html",[]],["body/4.类字段/4.4.访问修饰符/4.4.访问修饰符.html",[0,0.304,147,1.288,283,3.85,290,4.349,293,5.071,4360,7.291]],["title/4.类字段/4.4.访问修饰符/4.4.访问修饰符.html#4-4-访问修饰符",[4743,4.473]],["body/4.类字段/4.4.访问修饰符/4.4.访问修饰符.html#4-4-访问修饰符",[1750,7.33,4744,9.457,4745,9.457,4746,9.457,4747,9.457,4748,9.457]],["title/4.类字段/4.4.访问修饰符/4.4.5.Static.html",[]],["body/4.类字段/4.4.访问修饰符/4.4.5.Static.html",[0,0.326,5,1.276,6,0.39,81,0.669,82,0.862,119,0.535,138,0.624,141,1.145,143,5.205,144,2.271,145,3.349,147,1.625,149,4.048,151,4.048,169,2.052,170,0.86,174,4.534,175,3.982,182,3.65,190,0.812,195,4.874,264,2.138,324,0.792,403,1.525,436,0.888,490,4.048,1689,3.92,1800,3.311,3647,5.345,4497,4.534,4749,6.529,4750,7.163,4751,5.801,4752,8.352,4753,6.529,4754,7.163]],["title/4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static",[4749,4.077]],["body/4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static",[0,0.33,5,1.259,6,0.382,81,0.66,82,0.845,119,0.524,138,0.612,141,1.025,144,2.226,145,3.281,147,1.609,149,3.966,151,3.966,169,2.011,170,0.848,174,4.442,175,3.902,182,3.576,190,0.795,215,5.172,226,4.776,264,2.118,324,0.776,403,1.494,436,0.87,490,3.966,1689,3.841,3567,6.398,3647,5.237,4497,4.442,4751,5.684,4752,8.243,4753,6.398,4755,9.043,4756,7.019,4757,7.019,4758,9.043,4759,7.019,4760,7.019]],["title/5.表达式/5.1.块/5.1.块.html",[]],["body/5.表达式/5.1.块/5.1.块.html",[0,0.334,4,0.826,6,0.471,51,0.924,81,0.545,82,1.133,119,0.558,138,0.651,144,1.678,153,2.811,157,1.46,159,2,164,2.503,169,3.033,170,0.701,179,2.086,188,5.575,190,1.125,203,1.984,205,5.084,210,3.493,241,2.99,251,0.803,252,2.155,255,2.627,264,1.12,297,1.305,324,0.826,329,2.532,392,2.661,433,3.862,434,2.811,436,0.656,450,0.758,454,2.896,470,2.661,473,3.509,481,1.064,493,2.733,504,3.969,507,2.594,586,1.846,599,2.532,600,2.368,605,1.034,628,2.811,673,4.999,1201,2.896,1214,2.896,1350,5.433,1415,3.343,1533,5.744,2873,3.817,3482,5.228,3483,5.228,3491,2.811,3510,3.213,3656,2.99,3986,3.095,4030,3.576,4096,3.274,4152,6.593,4256,3.948,4270,3.349,4485,2.896,4683,4.101,4761,4.101,4762,4.824,4763,4.824,4764,4.824,4765,4.824,4766,5.292,4767,5.292,4768,3.948,4769,4.824]],["title/5.表达式/5.1.块/5.1.块.html#5-1-块",[4770,4.473]],["body/5.表达式/5.1.块/5.1.块.html#5-1-块",[0,0.333,4,0.576,6,0.467,51,0.91,81,0.54,82,1.034,119,0.552,138,0.645,144,1.653,153,2.769,157,1.445,159,1.971,164,2.465,169,3.02,170,0.694,179,2.064,188,5.516,190,1.118,203,1.954,205,3.547,210,3.456,241,2.945,251,0.791,252,2.132,255,2.588,264,1.103,297,1.285,324,0.818,329,2.494,392,2.621,433,3.843,434,2.769,436,0.646,450,0.747,454,2.853,470,2.621,473,3.457,481,1.048,493,2.692,504,3.927,507,2.556,586,1.819,599,2.494,600,2.332,605,1.019,628,2.769,673,4.966,1201,2.853,1214,2.853,1350,5.402,1415,3.308,1533,5.697,2873,3.76,3482,5.173,3483,5.173,3491,2.769,3510,3.165,3656,2.945,3986,3.049,4030,3.538,4096,3.24,4152,6.574,4256,3.889,4270,3.299,4485,2.853,4713,4.04,4762,4.751,4763,4.751,4764,4.751,4765,4.751,4768,3.889,4769,4.751,4771,5.212,4772,5.212,4773,5.212,4774,5.212,4775,5.212,4776,5.212,4777,5.212,4778,5.212,4779,5.212,4780,5.212,4781,5.212]],["title/5.表达式/5.10.var/5.10.var.html",[]],["body/5.表达式/5.10.var/5.10.var.html",[0,0.335,6,0.527,81,0.707,82,1.323,88,3.168,119,0.49,138,0.573,144,3.608,157,1.693,161,2.821,167,3.303,170,0.909,179,2.705,202,3.22,210,4.049,236,3.652,252,1.894,261,1.81,276,2.766,324,0.726,335,3.261,403,1.844,433,4.014,436,0.814,488,2.821,597,3.22,600,2.939,861,3.595,892,4.596,906,3.489,1223,3.302,1689,4.74,1748,3.44,1775,3.303,2896,3.48,3635,3.712,3641,3.489,4073,4.901,4152,3.842,4761,6.713,4782,5.988,4783,5.988]],["title/5.表达式/5.10.var/5.10.var.html#5-10-var",[4782,4.077]],["body/5.表达式/5.10.var/5.10.var.html#5-10-var",[0,0.333,6,0.528,81,0.709,82,1.325,88,3.176,119,0.492,138,0.575,144,3.611,157,1.697,161,2.832,167,3.316,170,0.815,179,2.71,202,3.233,210,4.059,252,1.901,261,1.817,276,2.777,311,3.666,324,0.729,335,3.273,403,1.848,433,4.019,436,0.817,488,2.832,597,3.233,600,2.95,861,3.609,892,4.614,906,3.502,1223,3.31,1689,4.752,1748,3.453,1775,3.316,2896,3.489,3635,3.726,3641,3.502,4073,4.92,4152,3.856,4761,5.11,4783,6.01,4784,6.593,4785,6.593,4786,6.593]],["title/5.表达式/5.11.局部函数/5.11.局部函数.html",[]],["body/5.表达式/5.11.局部函数/5.11.局部函数.html",[0,0.345,4,0.736,5,1.217,6,0.475,81,0.578,82,1.122,91,4.472,119,0.591,138,0.58,141,0.99,143,3.149,144,2.111,146,1.461,147,0.617,152,3.156,157,1.547,163,2.062,169,1.907,170,0.625,176,4.126,179,2.439,184,2.33,188,3.366,190,1.293,194,2.268,203,1.691,205,3.069,210,4.085,233,1.796,235,2.424,251,0.684,252,1.301,258,2.855,261,1.243,296,0.77,297,1.112,324,0.736,350,1.504,371,3.156,375,2.33,380,3.88,407,2.92,431,0.877,433,2.967,436,0.559,445,2.396,450,0.646,472,1.72,490,2.549,615,2.991,646,2.638,867,1.829,892,4.659,1228,1.829,2303,4.968,2873,4.803,2896,2.676,2915,2.469,2953,1.937,3478,2.469,3652,8.17,3656,2.549,3868,8.17,4145,3.156,4152,2.638,4617,2.991,4761,5.16,4787,8.496,4788,4.112,4789,7.214,4790,7.965,4791,4.112,4792,4.51,4793,4.112]],["title/5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数",[4794,4.473]],["body/5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数",[0,0.334,4,0.727,5,1.206,6,0.471,81,0.572,82,1.113,91,2.503,119,0.584,138,0.573,141,0.982,144,2.083,146,1.435,147,0.606,152,3.1,157,1.531,163,2.026,169,1.882,170,0.616,176,2.745,179,2.418,188,3.306,190,1.29,194,2.228,203,1.661,210,4.05,215,3.107,224,2.288,233,1.764,235,2.398,251,0.672,252,1.277,258,2.804,261,1.221,296,0.756,297,1.092,324,0.727,371,3.1,375,2.288,380,3.839,407,2.868,431,0.861,433,2.936,436,0.549,445,2.353,450,0.635,472,1.689,490,2.503,615,2.938,712,2.591,867,1.797,892,4.597,1228,1.797,2017,6.714,2303,4.902,2568,3.78,2622,3.588,2873,3.196,2896,2.64,2915,2.425,2953,1.903,3478,2.425,3652,7.492,3656,2.503,3868,7.492,4145,3.1,4152,2.591,4346,4.038,4617,2.938,4761,3.434,4787,8.433,4788,4.038,4789,7.138,4790,7.896,4791,4.038,4793,4.038,4795,4.43,4796,4.43,4797,4.43,4798,4.43,4799,4.43,4800,4.43,4801,4.43,4802,4.43,4803,4.43,4804,4.43,4805,4.43,4806,4.43,4807,4.43,4808,4.43,4809,4.43,4810,4.43,4811,4.43,4812,4.43,4813,6.57,4814,4.43,4815,4.43,4816,4.43,4817,4.43,4818,4.43,4819,4.43,4820,4.43,4821,4.43,4822,4.43,4823,4.43,4824,4.43,4825,4.43,4826,4.43,4827,4.43,4828,4.43,4829,4.43,4830,4.43,4831,4.43]],["title/5.表达式/5.12.new/5.12.new.html",[]],["body/5.表达式/5.12.new/5.12.new.html",[0,0.33,5,1.455,6,0.332,81,0.446,84,2.639,91,4.662,119,0.456,123,3.954,138,0.533,141,0.935,146,1.979,147,0.836,152,4.274,157,1.956,170,0.573,190,1.059,191,2.857,202,4.045,203,3.093,252,2.379,276,2.572,277,2.677,296,1.043,324,0.676,325,4.156,363,3.785,370,3.072,380,4.045,392,3.072,403,1.989,405,1.394,411,2.432,428,3.573,436,0.757,439,2.216,440,2.984,472,3.146,481,1.879,591,3.032,630,2.733,786,2.889,1228,3.789,1800,2.824,1805,4.274,3480,3.709,3484,null,3488,3.452,3491,3.245,3494,6.971,3635,4.662,3641,4.383,4077,3.452,4096,2.677,4484,5.01,4485,3.343,4832,5.568,4833,6.108,4834,5.568,4835,6.108,4836,7.04]],["title/5.表达式/5.12.new/5.12.new.html#5-12-new",[4832,4.077]],["body/5.表达式/5.12.new/5.12.new.html#5-12-new",[0,0.334,5,1.447,6,0.326,81,0.438,84,2.62,91,3.392,119,0.448,123,3.886,138,0.523,141,0.924,146,1.945,147,0.822,152,4.2,157,1.942,170,0.563,190,1.049,191,2.078,202,3.998,203,3.057,252,2.351,276,2.528,277,2.63,296,1.025,324,0.664,325,4.085,363,3.719,370,3.019,380,3.998,392,3.019,403,1.971,405,1.37,411,2.391,428,3.511,436,0.744,439,2.178,440,1.917,472,3.109,481,1.64,591,2.98,630,2.686,786,2.839,1228,3.755,1800,2.775,1805,4.2,3480,3.645,3484,null,3488,3.392,3491,3.189,3494,6.91,3635,4.608,3641,4.331,4007,6.084,4077,3.392,4096,2.63,4484,4.952,4485,3.285,4834,5.472,4836,5.122,4837,6.003,4838,6.003,4839,6.003,4840,6.003,4841,6.003,4842,6.003,4843,6.003,4844,6.003,4845,6.003,4846,6.003]],["title/5.表达式/5.13.for/5.13.for.html",[]],["body/5.表达式/5.13.for/5.13.for.html",[0,0.329,4,0.982,6,0.42,51,0.968,88,2.028,144,2.448,146,1.796,157,1.509,169,2.893,178,2.863,179,2.155,230,4.437,236,3.082,246,1.675,250,2.301,251,0.841,252,2.226,264,1.634,275,3.367,276,3.251,278,3.509,281,3.509,297,1.903,332,2.653,359,5.618,373,2.788,375,2.863,403,1.18,424,4.844,425,4.599,427,3.034,431,1.077,449,3.677,488,3.315,493,2.863,637,4.137,641,2.43,697,3.367,849,6.252,1179,3.61,1350,3.034,1800,2.563,2006,5.019,2071,7.535,2073,6.628,2301,3.133,3204,3.243,3224,3.879,3491,2.945,3660,3.034,4077,3.133,4096,2.43,4145,3.879,4169,4.49,4336,3.879,4362,3.034,4377,2.945,4484,4.688,4485,3.034,4497,4.887,4672,3.509,4683,4.297,4847,5.054,4848,5.054,4849,5.054,4850,6.252,4851,5.544,4852,5.544,4853,4.137,4854,3.879,4855,5.544,4856,4.49,4857,7.038,4858,4.49,4859,5.054,4860,5.544,4861,5.544,4862,5.054,4863,4.49,4864,5.054]],["title/5.表达式/5.13.for/5.13.for.html#5-13-for",[4847,4.077]],["body/5.表达式/5.13.for/5.13.for.html#5-13-for",[0,0.293,4,0.85,6,0.418,51,0.962,88,2.015,144,2.437,146,1.785,157,1.502,169,2.886,178,2.845,179,2.146,218,4.111,230,4.417,246,1.664,250,2.291,251,0.836,252,2.216,264,1.627,275,3.345,276,3.237,278,3.487,281,3.487,297,1.895,311,3.063,332,2.636,359,5.603,373,2.77,375,2.845,403,1.173,424,4.742,425,4.579,427,3.015,431,1.071,449,3.653,488,3.301,493,2.845,637,4.111,641,2.414,697,3.345,849,6.224,1179,3.594,1350,3.015,1800,2.547,2006,5.002,2071,7.147,2073,6.605,2301,3.113,3204,3.222,3224,3.855,3491,2.926,3660,3.015,4077,3.113,4096,2.414,4145,3.855,4169,4.461,4336,3.855,4362,3.015,4377,2.926,4484,4.668,4485,3.015,4497,4.865,4672,3.487,4713,4.27,4848,5.022,4849,5.022,4850,6.224,4853,4.111,4854,3.855,4856,4.461,4857,7.007,4858,4.461,4859,5.022,4862,5.022,4863,4.461,4864,5.022,4865,5.509,4866,5.509,4867,5.509,4868,5.509,4869,5.509,4870,5.509,4871,5.509,4872,5.509,4873,5.509,4874,5.509,4875,5.509,4876,5.509,4877,5.509,4878,5.509,4879,5.509,4880,5.509,4881,5.509,4882,5.509,4883,5.509]],["title/5.表达式/5.14.while/5.14.while.html",[]],["body/5.表达式/5.14.while/5.14.while.html",[0,0.337,5,1.177,6,0.46,81,0.462,82,0.762,119,0.472,138,0.552,141,0.717,147,0.866,157,1.237,169,3.183,170,0.594,173,2.666,178,3.269,190,0.717,230,5.467,233,2.521,241,4.775,251,0.96,252,2.437,258,4.007,276,2.666,287,3.781,296,1.081,324,0.7,359,6.498,378,5.618,424,2.803,431,1.23,436,0.785,450,0.907,600,2.832,1407,4.429,1760,4.429,1761,4.723,1971,5.243,1972,3.525,2616,4.429,2915,3.464,3220,4.723,3491,3.362,3796,3.844,4030,5.061,4170,4.198,4484,3.844,4485,3.464,4884,5.77,4885,5.77,4886,6.33,4887,5.77]],["title/5.表达式/5.14.while/5.14.while.html#5-14-while",[4884,4.077]],["body/5.表达式/5.14.while/5.14.while.html#5-14-while",[0,0.332,5,1.16,6,0.453,81,0.452,82,0.746,119,0.462,138,0.54,141,0.702,147,0.848,157,1.211,169,3.165,170,0.581,173,2.609,178,3.199,190,0.702,230,5.408,233,2.467,241,4.707,251,0.94,252,2.402,258,3.921,276,2.609,287,3.727,296,1.058,324,0.685,359,6.462,378,5.578,424,2.743,431,1.204,436,0.768,450,0.888,600,2.772,1407,4.335,1760,4.335,1761,4.622,1971,5.197,1972,3.474,2380,4.801,2616,4.335,2915,3.391,3220,4.622,3491,3.291,3796,3.762,4030,5.025,4170,4.108,4484,3.762,4485,3.391,4885,5.647,4887,5.647,4888,6.195,4889,5.647,4890,6.195,4891,6.195,4892,6.195,4893,6.195,4894,6.195,4895,6.195,4896,6.195,4897,6.195]],["title/5.表达式/5.15.do-while/5.15.do-while.html",[]],["body/5.表达式/5.15.do-while/5.15.do-while.html",[0,0.334,6,0.425,157,1.525,169,3.234,203,2.926,230,5.558,241,4.41,252,2.789,276,4.072,359,6.424,378,5.582,1585,6.66,1972,4.033,2897,5.053,3199,4.74,3491,4.146,4030,3.735,4484,5.873,4485,4.272,4672,4.94,4898,7.115,4899,7.805,4900,5.824]],["title/5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while",[4898,4.077]],["body/5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while",[0,0.295,6,0.425,157,1.525,169,3.234,203,2.926,230,5.558,241,4.41,252,2.789,276,4.072,359,6.424,378,5.582,722,4.207,1585,6.66,1972,3.255,2897,5.053,3199,4.74,3491,4.146,4030,3.735,4484,5.873,4485,4.272,4672,4.94,4889,7.115,4900,5.824,4901,7.805,4902,7.805,4903,7.805,4904,7.805,4905,7.115,4906,7.805,4907,7.805]],["title/5.表达式/5.16.if/5.16.if.html",[]],["body/5.表达式/5.16.if/5.16.if.html",[0,0.335,6,0.518,8,2.402,81,0.464,82,0.765,119,0.474,122,4.71,157,1.863,169,3.31,178,4.375,179,1.773,246,1.919,252,1.832,260,3.716,275,3.858,276,3.567,350,2.825,378,5.907,434,3.375,508,3.115,658,4.021,828,2.905,1179,3.961,1211,3.716,1224,3.858,1348,3.154,1748,3.327,1972,3.533,3201,4.636,3480,3.858,3481,4.021,4030,4.054,4377,3.375,4908,5.791,4909,8.127,4910,8.429,4911,5.791,4912,5.791,4913,5.791,4914,6.86,4915,5.791,4916,5.791]],["title/5.表达式/5.16.if/5.16.if.html#5-16-if",[4908,4.077]],["body/5.表达式/5.16.if/5.16.if.html#5-16-if",[0,0.286,6,0.518,8,2.402,81,0.464,82,0.765,118,2.443,119,0.474,122,3.532,157,1.863,169,3.31,178,4.375,179,1.773,246,1.919,252,1.832,260,3.716,275,3.858,276,3.567,350,2.825,378,5.907,434,3.375,508,3.115,658,4.021,828,2.905,1179,3.961,1211,3.716,1224,3.858,1348,3.154,1748,3.327,1972,2.65,3201,4.636,3480,3.858,3481,4.021,4030,4.054,4377,3.375,4905,5.791,4909,7.902,4910,8.297,4911,5.791,4912,5.791,4913,5.791,4914,6.86,4915,5.791,4916,5.791,4917,6.353,4918,6.353,4919,6.353,4920,6.353,4921,6.353,4922,5.791,4923,6.353,4924,6.353,4925,5.791,4926,6.353,4927,6.353,4928,6.353,4929,6.353,4930,6.353]],["title/5.表达式/5.17.switch/5.17.switch.html",[]],["body/5.表达式/5.17.switch/5.17.switch.html",[0,0.324,4,0.662,6,0.442,81,0.594,119,0.446,122,3.326,138,0.522,157,1.169,169,3.37,170,0.561,179,1.67,203,2.243,230,5.963,241,4.597,246,3.614,252,2.346,253,3.38,264,1.266,276,4.177,278,3.786,282,4.098,298,4.519,375,3.09,385,4.039,434,3.178,482,4.464,483,4.649,636,3.274,832,3.274,1211,3.499,1348,2.97,1748,3.133,3214,3.008,3482,4.186,3483,4.186,3796,3.633,4863,4.844,4931,5.453,4932,5.453,4933,6.588,4934,5.453,4935,5.453,4936,5.453,4937,5.982,4938,5.982,4939,5.982,4940,5.982,4941,5.453]],["title/5.表达式/5.17.switch/5.17.switch.html#5-17-switch",[4931,4.077]],["body/5.表达式/5.17.switch/5.17.switch.html#5-17-switch",[0,0.313,4,0.659,6,0.441,81,0.592,119,0.445,122,3.315,138,0.52,157,1.165,169,3.368,170,0.559,179,1.664,203,2.235,230,5.956,241,4.586,246,3.532,252,2.34,253,3.369,264,1.262,276,4.171,278,3.773,282,4.093,298,4.515,375,3.079,385,4.029,434,3.167,483,4.64,636,3.263,832,3.263,1211,3.487,1348,2.96,1748,3.122,3214,2.998,3482,4.171,3483,4.171,3796,3.62,4863,4.828,4932,5.434,4933,6.572,4934,5.434,4935,5.434,4936,5.434,4941,5.434,4942,5.962,4943,5.962,4944,5.962,4945,5.962,4946,5.962,4947,5.962,4948,5.962,4949,5.962,4950,5.962,4951,5.962,4952,5.962,4953,5.962,4954,5.962,4955,5.962,4956,5.962]],["title/5.表达式/5.18.trycatch/5.18.trycatch.html",[]],["body/5.表达式/5.18.trycatch/5.18.trycatch.html",[0,0.303,4,1.07,6,0.425,81,0.57,119,0.42,122,4.34,141,0.885,144,1.787,157,2.106,165,2.396,167,2.833,169,2.236,173,2.372,178,2.91,179,2.835,192,3.736,197,1.657,199,3.736,203,2.112,235,1.726,246,1.702,254,3.736,257,3.569,261,2.152,264,1.193,277,2.469,280,7.564,283,3.195,284,2.028,299,3.295,301,5.466,329,4.287,333,3.132,337,3.647,363,3.491,365,3.736,380,2.762,393,3.942,411,2.244,599,2.696,646,3.295,796,3.736,822,3.421,867,2.285,875,3.942,925,3.184,1201,3.083,1211,3.295,1415,2.521,1596,4.367,1800,3.609,2070,4.392,3124,6.463,3450,4.807,3488,3.184,3520,2.993,3641,2.993,3745,3.834,3788,3.942,3925,4.562,3986,3.295,3990,4.204,4030,2.696,4152,5.24,4270,3.566,4271,4.204,4445,3.566,4451,4.204,4595,3.736,4957,5.136,4958,6.322,4959,5.136,4960,5.136,4961,5.136,4962,5.136,4963,5.634,4964,5.136,4965,4.204,4966,6.322,4967,5.634]],["title/5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch",[4957,4.077]],["body/5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch",[0,0.22,4,0.992,6,0.426,81,0.571,119,0.422,122,3.142,141,0.887,144,1.792,157,2.108,165,2.403,167,2.842,169,2.242,173,2.38,178,2.919,179,2.839,192,3.748,197,1.662,199,3.748,203,2.119,235,1.731,246,1.708,254,3.748,257,3.577,261,2.156,264,1.196,277,2.477,280,7.401,283,3.203,284,2.035,299,3.306,301,5.071,329,4.294,333,3.142,363,3.502,365,3.748,380,2.771,393,3.955,411,2.251,516,3.659,599,2.705,712,3.306,796,3.748,822,3.432,867,2.292,875,3.955,925,3.194,1201,3.093,1211,3.306,1415,2.529,1800,3.617,2070,4.4,3124,5.644,3450,4.823,3488,3.194,3520,3.002,3641,3.002,3755,3.846,3788,3.955,3925,4.577,3986,3.306,3990,4.217,4030,2.705,4152,5.249,4270,3.578,4271,4.217,4445,3.578,4451,4.217,4595,3.748,4958,6.336,4959,5.152,4960,5.152,4961,5.152,4962,5.152,4964,5.152,4965,4.217,4966,6.336,4968,5.652,4969,4.823,4970,5.652,4971,5.652,4972,5.652,4973,5.652,4974,5.652,4975,5.652,4976,5.652,4977,5.652,4978,5.652,4979,5.652,4980,5.652,4981,5.652]],["title/5.表达式/5.19.return/5.19.return.html",[]],["body/5.表达式/5.19.return/5.19.return.html",[0,0.308,6,0.524,81,0.627,119,0.485,138,0.566,157,1.883,169,3.252,170,0.609,179,2.69,190,1.267,198,5.26,205,5.85,210,4.019,264,1.375,275,5.22,297,2.933,324,0.718,332,3.108,433,2.435,436,0.805,473,5.701,493,3.354,508,3.184,658,4.111,828,2.97,893,4.705,1179,4.019,1214,3.555,1971,3.354,2955,3.555,3640,3.799,3863,4.111,4030,3.108,4377,3.45,4683,5.034,4982,5.921,4983,4.846,4984,6.962,4985,8.305,4986,6.495,4987,5.921,4988,6.495]],["title/5.表达式/5.19.return/5.19.return.html#5-19-return",[4982,4.077]],["body/5.表达式/5.19.return/5.19.return.html#5-19-return",[0,0.318,6,0.464,81,0.623,119,0.479,138,0.56,157,1.873,169,3.194,170,0.603,179,2.675,190,1.264,198,5.202,205,4.371,210,3.99,264,1.36,275,5.182,297,2.897,324,0.71,332,3.074,433,2.408,436,0.796,473,5.659,493,3.317,508,3.149,658,4.066,828,2.937,893,4.671,1179,3.003,1214,3.516,1971,3.317,2587,4.979,2955,3.516,3640,3.757,3863,4.066,4030,3.074,4377,3.412,4713,4.979,4983,4.793,4984,6.911,4985,7.76,4987,5.855,4989,6.423,4990,6.423,4991,6.423,4992,6.423,4993,6.423,4994,6.423,4995,6.423,4996,6.423,4997,6.423,4998,6.423]],["title/5.表达式/5.2.常量/5.2.常量.html",[]],["body/5.表达式/5.2.常量/5.2.常量.html",[0,0.333,4,0.811,6,0.399,52,3.992,119,0.547,144,1.633,157,1.433,160,3.148,169,1.476,170,0.483,179,2.85,190,0.584,203,3.2,209,3.493,236,2.864,247,4.012,249,2.736,250,1.535,251,1.112,252,1.485,264,1.09,265,2.681,272,4.213,282,2.128,284,2.639,287,2.305,290,2.381,292,3.456,300,1.915,349,3.55,375,2.66,398,4.861,403,1.979,405,2.242,440,1.645,441,2.624,465,3.057,472,3.254,481,1.474,586,1.797,1201,2.819,1202,3.604,1205,3.604,1221,4.452,1226,4.171,1228,2.973,1357,5.47,1682,3.604,1867,4.171,1939,4.033,1972,2.148,2486,6.255,2615,5.936,2616,3.604,2914,3.26,3484,null,3762,5.47,3795,3.26,4263,6.797,4362,2.819,4999,3.992,5000,5.151,5001,5.151,5002,6.682,5003,5.151,5004,5.151,5005,5.936,5006,4.695,5007,5.151,5008,4.695,5009,5.47,5010,4.695,5011,4.695,5012,4.695,5013,4.695,5014,4.695,5015,4.695,5016,4.695,5017,4.695,5018,4.695,5019,5.151,5020,4.395,5021,5.151,5022,4.695]],["title/5.表达式/5.2.常量/5.2.常量.html#5-2-常量",[5023,4.473]],["body/5.表达式/5.2.常量/5.2.常量.html#5-2-常量",[0,0.323,4,0.571,6,0.4,52,4.004,118,3.287,119,0.548,144,1.638,157,1.436,160,3.155,169,1.48,170,0.485,179,2.853,190,0.585,203,3.205,209,3.499,247,4.021,249,2.744,250,1.54,251,0.784,252,1.49,264,1.093,265,2.687,272,4.222,282,2.134,284,2.644,287,2.312,290,2.388,292,3.329,300,1.921,311,2.872,349,3.558,375,2.668,398,4.871,403,1.982,405,2.245,465,3.064,472,3.259,481,1.039,586,1.802,1201,2.827,1202,3.615,1205,3.615,1221,4.461,1226,4.183,1228,2.979,1357,5.481,1682,3.615,1867,4.183,1939,4.039,1972,2.155,2486,6.268,2615,5.949,2616,3.615,2914,3.27,3484,null,3762,5.481,3795,3.27,4007,3.855,4263,6.802,4362,2.827,5002,6.696,5005,5.949,5006,4.709,5008,4.709,5009,5.481,5010,4.709,5011,4.709,5012,4.709,5013,4.709,5014,4.709,5015,4.709,5016,4.709,5017,4.709,5018,4.709,5020,4.408,5022,4.709,5024,5.166,5025,5.166,5026,5.166,5027,5.166,5028,5.166,5029,5.166,5030,5.166,5031,5.166,5032,5.166,5033,5.166,5034,5.166,5035,5.166,5036,5.166,5037,5.166,5038,5.166]],["title/5.表达式/5.20.break/5.20.break.html",[]],["body/5.表达式/5.20.break/5.20.break.html",[0,0.292,4,0.841,6,0.413,81,0.555,119,0.567,138,0.663,170,0.713,246,2.296,253,4.295,275,4.615,276,4.006,278,6.887,298,3.857,300,2.826,359,5.564,375,3.925,378,5.053,424,3.365,433,2.849,473,5.04,493,3.925,600,3.401,2872,5.891,3220,5.671,4030,4.552,4096,3.331,4253,6.155,4377,4.037,4683,5.891,4689,6.155,4909,5.671,4910,5.671,4983,5.671,5039,6.928,5040,7.6,5041,6.928,5042,6.928,5043,6.928,5044,7.6,5045,7.6,5046,5.671]],["title/5.表达式/5.20.break/5.20.break.html#5-20-break",[5039,4.077]],["body/5.表达式/5.20.break/5.20.break.html#5-20-break",[0,0.314,4,0.837,6,0.412,81,0.552,119,0.565,138,0.66,170,0.71,246,2.286,253,4.276,275,4.595,276,3.995,278,6.559,298,3.847,300,2.814,359,5.548,375,3.908,378,5.039,424,3.351,433,2.837,473,5.018,493,3.908,600,3.386,2872,5.865,3220,5.646,4030,4.54,4096,3.316,4253,6.128,4377,4.02,4689,6.128,4713,5.865,4909,5.646,4910,5.646,4983,5.646,5041,6.898,5042,6.898,5043,6.898,5046,5.646,5047,7.567,5048,7.567,5049,7.567,5050,7.567]],["title/5.表达式/5.21.continue/5.21.continue.html",[]],["body/5.表达式/5.21.continue/5.21.continue.html",[0,0.306,6,0.413,8,2.873,81,0.555,119,0.567,138,0.663,170,0.713,178,3.925,257,3.475,275,4.615,276,3.201,278,4.811,281,6.887,300,2.826,359,6.073,378,5.515,392,3.822,424,4.96,433,2.849,464,5.776,598,4.16,600,3.401,3199,4.615,3520,4.037,4030,3.637,4096,3.331,4377,4.037,4909,7.098,4910,7.098,4983,5.671,5046,5.671,5051,6.928,5052,7.6,5053,6.928]],["title/5.表达式/5.21.continue/5.21.continue.html#5-21-continue",[5051,4.077]],["body/5.表达式/5.21.continue/5.21.continue.html#5-21-continue",[0,0.314,6,0.412,8,2.861,81,0.552,119,0.565,138,0.66,170,0.71,178,3.908,257,3.46,275,4.595,276,3.187,278,4.79,281,6.559,300,2.814,359,6.061,378,5.504,392,3.805,424,4.954,433,2.837,464,5.761,598,4.142,600,3.386,3199,4.595,3520,4.02,4030,3.621,4096,3.316,4377,4.02,4909,7.078,4910,7.078,4983,5.646,5046,5.646,5053,6.898,5054,7.567,5055,7.567,5056,7.567]],["title/5.表达式/5.22.throw/5.22.throw.html",[]],["body/5.表达式/5.22.throw/5.22.throw.html",[0,0.237,4,1.122,6,0.46,167,4.248,173,3.558,179,2.833,203,3.167,209,3.458,261,2.328,264,1.788,280,6.731,299,6.601,336,3.628,379,4.624,2070,4.142,4152,5.936,4768,6.304,4965,6.304,4966,6.842,5057,7.701,5058,8.448]],["title/5.表达式/5.22.throw/5.22.throw.html#5-22-throw",[5057,4.077]],["body/5.表达式/5.22.throw/5.22.throw.html#5-22-throw",[4,0.939,6,0.462,167,4.269,173,3.575,179,2.841,203,3.183,209,3.475,261,2.34,264,1.797,280,6.75,299,6.612,336,3.646,379,4.646,2070,4.162,4152,5.954,4768,6.334,4965,6.334,4966,6.875,4969,7.244,5059,8.489,5060,8.489]],["title/5.表达式/5.23.类型转换/5.23.2.安全转换.html",[]],["body/5.表达式/5.23.类型转换/5.23.2.安全转换.html",[0,0.314,4,0.591,5,1.047,6,0.29,51,0.933,81,0.39,82,0.905,84,2.296,119,0.399,138,0.466,141,1.228,147,0.731,157,1.701,159,2.019,164,2.526,167,2.685,170,0.501,184,2.758,190,0.852,197,2.212,246,2.272,251,0.81,255,2.651,261,1.472,264,1.13,279,6.227,280,3.541,285,3.262,289,1.907,296,1.284,301,4.25,324,0.591,329,3.599,339,5.51,405,1.716,422,3.123,436,0.662,445,2.837,450,0.765,481,1.074,586,1.863,605,1.044,606,1.248,607,1.408,608,1.481,609,1.56,610,1.73,646,3.123,933,3.737,1201,5.172,1415,2.389,1501,4.325,1534,3.018,1800,4.368,2336,3.123,2479,7.819,2480,7.454,2754,3.737,3199,3.243,3222,3.737,3750,5.483,4081,3.018,4152,3.123,4170,3.541,4171,3.985,4357,3.985,4615,4.325,4768,3.985,4958,6.09,4965,3.985,5061,4.557,5062,4.868,5063,4.868,5064,5.34,5065,5.34,5066,4.868,5067,5.34,5068,4.868,5069,5.34,5070,4.868,5071,4.868,5072,4.868,5073,4.868]],["title/5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换",[5074,4.473]],["body/5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换",[0,0.33,4,0.575,5,1.027,6,0.283,51,0.908,81,0.379,82,0.888,84,2.262,119,0.388,138,0.453,141,1.22,147,0.711,157,1.676,159,1.965,164,2.458,167,2.613,170,0.488,190,0.836,197,2.17,224,2.684,246,2.229,251,0.788,255,2.58,261,1.432,264,1.1,279,6.188,280,3.446,285,3.2,289,1.856,296,1.26,301,4.169,324,0.575,329,3.53,339,5.428,405,1.684,422,3.04,436,0.644,445,2.761,450,0.745,481,1.045,586,1.813,605,1.016,606,1.214,607,1.37,608,1.441,609,1.518,610,1.683,712,3.04,933,3.636,1201,5.109,1415,2.325,1501,4.208,1534,2.937,1800,4.316,2336,3.04,2479,7.765,2480,7.388,2754,3.636,3199,3.156,3222,3.636,3750,5.44,4081,2.937,4152,3.04,4170,3.446,4171,3.878,4357,3.878,4615,4.208,4768,3.878,4958,5.974,4965,3.878,5063,4.737,5066,4.737,5068,4.737,5070,4.737,5071,4.737,5072,4.737,5073,4.737,5075,5.197,5076,5.197,5077,5.197,5078,5.197,5079,5.197,5080,5.197,5081,5.197]],["title/5.表达式/5.23.类型转换/5.23.1.不安全转换.html",[]],["body/5.表达式/5.23.类型转换/5.23.1.不安全转换.html",[0,0.331,5,1.107,6,0.432,51,1.01,81,0.422,82,0.957,90,5.272,119,0.432,122,3.215,138,0.504,141,0.655,144,2.521,147,1.088,157,2.004,167,2.908,169,1.657,170,0.543,184,2.987,190,0.655,191,2.002,197,1.701,209,2.367,251,0.877,252,2.292,260,3.383,261,1.594,264,1.683,279,6.338,283,3.254,296,0.988,324,0.64,329,3.804,336,3.414,403,1.934,405,2.073,436,0.717,439,3.296,450,0.829,465,2.412,507,2.836,586,2.773,647,4.106,931,3.661,933,7.174,1415,2.588,1596,4.483,2070,2.836,2078,4.684,2647,5.735,2896,3.194,3070,3.835,3124,4.172,3129,4.315,3189,4.684,3205,3.072,3478,3.165,3520,3.072,3568,3.835,3639,4.047,3775,4.315,3920,4.047,4171,4.315,4329,4.684,5062,5.272,5082,4.684,5083,5.272,5084,7.246,5085,5.272,5086,5.783,5087,5.783,5088,5.783]],["title/5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换",[5089,4.473]],["body/5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换",[0,0.321,5,1.1,6,0.429,51,1,81,0.418,82,0.95,90,5.236,118,2.202,119,0.427,138,0.499,141,0.649,144,2.504,147,1.081,157,1.997,167,2.88,169,1.64,170,0.537,190,0.649,191,1.983,197,1.684,209,2.344,218,4.273,224,2.957,251,0.869,252,2.277,260,3.349,261,1.578,264,1.671,279,6.325,283,3.232,296,0.978,324,0.633,329,3.778,336,3.391,403,1.681,405,2.062,436,0.71,439,3.279,450,0.821,465,2.388,507,2.808,586,2.755,647,4.078,931,3.625,933,6.815,1415,2.562,2070,2.808,2078,4.637,2647,5.696,2896,3.173,3070,3.797,3124,4.131,3129,4.273,3189,4.637,3205,3.042,3478,3.134,3520,3.042,3568,3.797,3639,4.007,3674,5.22,3775,4.273,3920,4.007,4171,4.273,4329,4.637,5082,4.637,5083,5.22,5084,7.197,5085,5.22,5090,5.726,5091,5.726,5092,5.726,5093,5.726,5094,5.726,5095,5.726,5096,5.726,5097,5.726,5098,5.726,5099,5.726,5100,5.726,5101,5.726]],["title/5.表达式/5.23.类型转换/5.23.类型转换.html",[]],["body/5.表达式/5.23.类型转换/5.23.类型转换.html",[0,0.322,4,1.156,6,0.483,81,0.648,157,1.735,173,3.739,261,2.447,279,6.279,641,3.891,2070,5.125,3649,6.882]],["title/5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换",[5102,4.473]],["body/5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换",[0,0.295,4,0.987,6,0.485,81,0.651,157,1.744,173,3.758,261,2.46,279,6.292,641,3.911,2070,5.141,5103,8.924,5104,8.924,5105,8.924]],["title/5.表达式/5.24.类型检查/5.24.类型检查.html",[]],["body/5.表达式/5.24.类型检查/5.24.类型检查.html",[0,0.311,4,0.975,6,0.367,122,3.751,157,2.299,165,4.174,169,1.933,197,2.593,203,2.529,209,2.761,236,3.751,252,1.945,257,4.03,264,2.078,277,2.957,279,4.981,326,3.812,339,4.27,401,3.484,411,2.687,416,4.097,488,2.897,508,3.308,577,2.897,641,2.957,647,3.484,659,5.034,788,3.484,828,3.085,2070,4.813,2916,4.721,2958,5.155,3185,5.034,3199,4.097,3214,3.393,3481,4.27,3660,3.693,3745,4.591,3831,4.867,3833,5.034,3981,6.577,3986,3.946,4021,3.154,4095,5.229,4142,5.998,4147,4.27,5061,7.521,5106,6.747,5107,6.15,5108,6.15,5109,6.747]],["title/5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查",[5110,4.473]],["body/5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查",[0,0.248,4,0.749,6,0.368,122,3.766,157,2.301,165,4.182,169,1.94,197,2.599,203,2.539,209,2.772,252,1.953,257,4.04,264,2.082,277,2.968,279,4.993,311,3.766,326,3.827,339,4.287,401,3.498,411,2.697,416,4.113,488,2.909,508,3.321,577,2.909,641,2.968,647,3.498,659,5.054,788,3.498,828,3.097,939,4.491,1268,5.078,1567,4.739,2070,4.822,2916,4.739,2958,3.961,3185,5.054,3199,4.113,3214,3.406,3481,4.287,3660,3.707,3755,4.609,3833,5.054,3852,4.886,3981,5.054,3986,3.961,4021,3.167,4115,5.25,4142,4.609,4147,4.287,5061,5.779,5107,6.174,5108,6.174,5111,6.174,5112,6.773,5113,6.773,5114,6.773,5115,6.773,5116,6.773]],["title/5.表达式/5.3 操作符/5.3 操作符.html",[]],["body/5.表达式/5.3 操作符/5.3 操作符.html",[0,0.252,265,3.281,488,4.792,601,5.949,697,5.447,5117,8.177,5118,8.177,5119,7.264,5120,8.177,5121,8.177,5122,6.693,5123,8.177,5124,8.177,5125,6.277]],["title/5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符",[4354,2.474,5117,2.643]],["body/5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符",[265,3.315,488,4.813,601,6.01,697,5.504,5118,8.262,5119,7.34,5120,8.262,5121,8.262,5122,6.763,5123,8.262,5124,8.262,5125,6.342]],["title/5.表达式/5.3 操作符/5.3.1 一元操作符.html",[]],["body/5.表达式/5.3 操作符/5.3.1 一元操作符.html",[0,0.333,6,0.346,51,1.664,81,0.464,82,0.765,119,0.474,138,0.554,157,1.656,164,4.507,170,0.596,179,2.838,182,3.237,233,2.53,264,1.345,324,0.703,360,4.445,401,4.375,403,1.803,407,4.113,431,1.976,436,0.788,470,3.195,488,4.548,605,1.863,828,2.905,833,7.622,876,3.716,1489,4.021,1972,3.533,2505,7.111,3476,4.445,3750,3.281,4030,4.561,4854,7.113,5126,5.791,5127,4.74,5128,8.688,5129,5.145,5130,8.688,5131,7.111,5132,8.688,5133,5.791,5134,5.791]],["title/5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符",[5126,2.643,5135,2.9]],["body/5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符",[0,0.328,6,0.348,51,1.67,81,0.467,82,0.77,119,0.478,138,0.558,157,1.664,164,4.524,170,0.6,179,2.846,182,3.261,233,2.549,264,1.355,324,0.708,360,4.478,401,4.396,403,1.812,407,4.143,431,1.982,436,0.793,470,3.218,488,4.559,605,1.87,828,2.926,833,7.638,876,3.743,1489,4.051,1972,3.55,2505,7.137,3476,4.478,3750,3.305,4030,4.074,4854,7.134,5127,4.775,5128,8.719,5129,5.183,5130,8.719,5131,7.137,5132,8.719,5133,5.834,5134,5.834,5136,6.4,5137,6.4,5138,6.4]],["title/5.表达式/5.3 操作符/5.3.2 二元操作符.html",[]],["body/5.表达式/5.3 操作符/5.3.2 二元操作符.html",[0,0.337,4,0.648,6,0.518,81,0.667,82,0.705,88,1.392,119,0.437,138,0.195,141,0.254,142,0.868,144,0.71,149,1.265,151,1.265,155,1.813,157,1.922,160,0.961,163,1.023,164,2.771,165,1.619,169,1.881,170,0.21,179,1.993,182,1.141,186,0.775,190,0.254,194,1.126,209,0.916,246,1.5,257,1.023,260,1.309,264,0.806,277,0.981,283,1.558,284,1.788,287,1.002,289,0.799,292,1.681,297,0.552,300,2.178,324,0.549,327,1.225,336,0.961,355,1.484,360,3.475,367,2.497,380,1.866,401,5.003,403,2.422,405,2.372,414,2.524,424,1.685,431,1.276,440,1.586,441,1.141,449,1.484,456,2.083,458,2.226,465,0.934,477,2.022,486,1.309,488,4.7,493,1.156,597,1.866,628,2.022,630,1.703,641,0.981,657,1.225,673,1.189,785,1.141,788,1.966,828,1.74,845,1.484,867,1.544,893,1.225,895,1.67,920,3.016,932,1.417,1223,3.058,1348,1.111,1415,1.002,1690,1.417,1800,1.035,1939,3.756,1972,4.296,1975,1.265,2062,1.189,2079,3.143,2301,3.71,2505,8.49,2506,1.813,2507,1.813,2564,3.082,2722,1.67,2896,1.996,2915,1.225,2951,3.082,3210,1.813,3476,2.663,3485,1.359,3503,3.557,3656,5.167,3793,4.099,3795,2.409,3830,1.484,3863,1.417,3872,1.813,4030,3.646,4170,1.484,4225,2.663,4362,2.083,4672,4.156,4721,1.67,4853,1.67,4854,7.579,4856,1.813,5005,1.813,5009,1.67,5127,5.684,5129,1.813,5139,2.04,5140,4.021,5141,5.317,5142,2.84,5143,2.04,5144,1.813,5145,2.04,5146,1.813,5147,2.04,5148,3.47,5149,3.082,5150,3.082,5151,4.744,5152,2.04,5153,2.04,5154,5.783,5155,3.47,5156,3.47,5157,2.04,5158,1.813,5159,1.813,5160,2.04,5161,4.021,5162,5.34,5163,3.47,5164,1.67,5165,2.04,5166,2.04,5167,1.813]],["title/5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符",[5139,2.643,5168,2.9]],["body/5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符",[0,0.337,4,0.647,6,0.518,81,0.667,82,0.704,88,1.391,119,0.437,138,0.195,141,0.253,142,0.867,144,0.709,149,1.263,151,1.263,155,1.81,157,1.921,160,0.96,163,1.022,164,2.768,165,1.617,169,1.88,170,0.21,179,1.992,182,1.139,186,0.774,190,0.253,194,1.124,209,0.915,246,1.499,257,1.022,260,1.308,264,0.805,277,0.98,283,1.556,284,1.786,287,1,289,0.798,292,1.679,297,0.551,300,2.176,324,0.549,327,1.224,336,0.96,355,1.482,360,3.471,367,2.495,380,1.864,401,5.001,403,2.422,405,2.371,414,2.521,424,1.684,431,1.275,440,1.584,441,1.139,449,1.482,456,2.081,458,2.224,465,0.932,477,2.02,486,1.308,488,4.699,493,1.155,597,1.864,628,2.02,630,1.701,641,0.98,657,1.224,673,1.188,785,1.139,788,1.964,828,1.738,845,1.482,867,1.542,893,1.224,895,1.668,920,3.013,932,1.415,1223,3.056,1348,1.11,1415,1,1690,1.415,1800,1.033,1939,3.754,1972,4.295,1975,1.263,2062,1.188,2079,3.14,2301,3.708,2505,8.488,2506,1.81,2507,1.81,2564,3.079,2722,1.668,2896,1.994,2915,1.224,2951,3.079,3210,1.81,3476,2.66,3485,1.358,3503,3.554,3656,5.165,3793,4.096,3795,2.407,3830,1.482,3863,1.415,3872,1.81,4030,3.643,4170,1.482,4225,2.66,4362,2.081,4672,4.153,4721,1.668,4853,1.668,4854,7.578,4856,1.81,5005,1.81,5009,1.668,5127,5.681,5129,1.81,5140,4.018,5141,5.313,5142,2.837,5143,2.038,5144,1.81,5145,2.038,5146,1.81,5147,2.038,5148,3.466,5149,3.079,5150,3.079,5151,4.74,5152,2.038,5153,2.038,5154,5.779,5155,3.466,5156,3.466,5157,2.038,5158,1.81,5159,1.81,5160,2.038,5161,4.018,5162,5.336,5163,3.466,5164,1.668,5165,2.038,5166,2.038,5167,1.81,5169,2.236]],["title/5.表达式/5.3 操作符/5.3.4 优先级.html",[]],["body/5.表达式/5.3 操作符/5.3.4 优先级.html",[0,0.35,4,0.545,9,1.834,88,3.534,164,3.94,172,2.787,233,3.317,245,3.68,264,1.044,360,4.972,369,2.885,374,2.513,444,2.62,456,2.699,458,5.332,488,4.714,507,3.484,597,2.418,601,7.04,617,3.451,654,3.056,833,3.451,920,2.995,2079,3.122,2082,3.68,2301,5.687,2896,1.982,2954,2.62,3503,6.567,3793,3.451,4030,2.36,4362,2.699,4445,3.122,4853,3.68,5119,5.755,5122,3.68,5127,6.801,5131,3.68,5140,5.755,5141,3.994,5142,3.68,5154,3.994,5159,5.755,5161,5.755,5167,3.994,5170,4.496,5171,4.496,5172,5.755,5173,3.994,5174,4.496]],["title/5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级",[5170,2.643,5175,2.9]],["body/5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级",[0,0.35,4,0.549,9,1.844,88,3.542,164,3.952,172,2.803,233,3.328,245,3.701,264,1.05,360,4.993,369,2.901,374,2.527,444,2.635,456,2.715,458,5.346,488,4.72,507,3.498,597,2.432,601,7.051,617,3.471,654,3.073,833,3.471,920,3.012,2079,3.139,2082,3.701,2301,5.698,2896,1.993,2954,2.635,3503,6.576,3793,3.471,4030,2.374,4362,2.715,4445,3.139,4853,3.701,5119,5.778,5122,3.701,5127,6.819,5131,3.701,5140,5.778,5141,4.017,5142,3.701,5154,4.017,5159,5.778,5161,5.778,5167,4.017,5171,4.521,5172,5.778,5173,4.017,5174,4.521]],["title/5.表达式/5.3 操作符/5.3.3 三元操作符.html",[]],["body/5.表达式/5.3 操作符/5.3.3 三元操作符.html",[0,0.343,4,1.151,6,0.566,81,0.788,119,0.777,138,0.942,157,2.034,169,1.933,170,0.633,264,1.428,300,3.277,324,0.746,378,4.682,401,4.552,431,1.311,436,0.836,488,4.216,666,4.321,1224,4.097,1348,4.376,1972,2.814,4160,5.464,4617,4.474,4854,7.557,5122,5.034,5176,6.15,5177,6.15,5178,8.035]],["title/5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符",[5176,2.643,5179,2.9]],["body/5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符",[0,0.34,4,1.16,6,0.57,81,0.793,119,0.783,138,0.947,157,2.05,169,1.971,170,0.645,264,1.456,300,3.319,324,0.761,378,4.742,401,4.611,431,1.337,436,0.853,488,4.256,666,4.377,1224,4.178,1348,4.432,1972,2.869,4160,5.571,4617,4.562,4854,7.604,5122,5.134,5177,6.272,5178,8.138]],["title/5.表达式/5.3 操作符/5.3.5 重载与宏.html",[]],["body/5.表达式/5.3 操作符/5.3.5 重载与宏.html",[0,0.34,157,1.88,161,3.322,190,0.877,264,1.637,265,3.518,277,4.214,288,3.941,332,3.702,456,5.264,488,4.999,601,5.13,636,4.234,660,7.176,876,4.524,925,5.435,1350,4.234,2955,4.234,3917,5.772,5125,6.729,5131,5.772,5180,7.051]],["title/5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏",[5180,2.643,5181,2.9]],["body/5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏",[0,0.295,157,1.89,161,3.352,190,0.884,264,1.652,265,3.537,277,4.238,288,3.977,332,3.735,456,5.293,488,5.008,601,5.176,636,4.272,660,7.216,876,4.565,925,5.465,1350,4.272,2029,6.66,2955,4.272,3917,5.824,5125,6.767,5131,5.824,5182,7.805,5183,7.805,5184,7.805,5185,7.805,5186,7.805,5187,7.805,5188,7.805,5189,7.805]],["title/5.表达式/5.5.数组声明/5.5.数组声明.html",[]],["body/5.表达式/5.5.数组声明/5.5.数组声明.html",[0,0.33,6,0.565,7,3.704,81,0.759,82,0.809,84,1.772,119,0.776,138,0.586,159,2.541,161,2.886,172,3.798,179,1.876,189,3.931,190,0.762,194,3.38,202,3.295,203,2.52,209,2.751,290,4.065,327,3.678,335,3.337,353,6.56,354,3.745,355,4.457,375,3.471,384,3.38,409,5.565,427,3.678,790,5.443,919,3.931,932,4.254,1581,5.443,1689,5.904,3480,4.081,3500,5.015,3635,3.798,3636,5.015,3795,4.254,4083,4.081,4751,5.443,5190,6.721,5191,6.126,5192,6.126,5193,8.932,5194,5.443,5195,6.126]],["title/5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明",[5196,4.473]],["body/5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明",[0,0.325,6,0.566,7,3.711,81,0.76,82,0.812,84,1.779,119,0.777,138,0.588,159,2.551,161,2.897,172,3.812,179,1.883,189,3.946,190,0.765,194,3.393,202,3.308,203,2.529,209,2.761,290,4.075,327,3.693,335,3.35,353,5.034,354,3.749,355,4.474,375,3.484,384,3.393,409,4.27,427,3.693,790,5.464,919,3.946,932,4.27,1689,5.911,3480,4.097,3500,5.034,3635,3.812,3636,5.034,3795,4.27,4083,4.097,4751,5.464,5191,6.15,5192,6.15,5193,8.949,5194,5.464,5195,6.15,5197,6.747,5198,6.747,5199,6.747,5200,6.747,5201,6.747]],["title/5.表达式/5.6.对象声明/5.6.对象声明.html",[]],["body/5.表达式/5.6.对象声明/5.6.对象声明.html",[0,0.324,6,0.426,81,0.572,119,0.585,138,0.683,160,3.367,161,3.367,170,0.736,202,3.844,252,2.261,253,4.43,324,0.867,335,3.892,341,6.431,342,5.85,367,4.877,385,3.892,392,3.942,433,3.636,652,6.349,1218,5.486,3482,6.785,3483,6.785,3491,4.165,3635,4.43,4485,4.291,5202,6.69,5203,7.147,5204,7.147,5205,7.147,5206,7.147,5207,7.147,5208,7.147,5209,7.147]],["title/5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明",[5210,4.473]],["body/5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明",[0,0.328,6,0.425,81,0.57,119,0.582,138,0.68,160,3.352,161,3.352,170,0.732,202,3.827,252,2.251,253,4.41,324,0.863,335,3.875,341,5.176,342,5.824,367,4.863,385,3.875,392,3.925,433,3.626,652,6.32,1218,5.461,3482,6.767,3483,6.767,3491,4.146,3635,4.41,4485,4.272,5203,7.115,5204,7.115,5205,7.115,5206,7.115,5207,7.115,5208,7.115,5209,7.115,5211,7.805,5212,7.805]],["title/5.表达式/5.7.字段访问/5.7.字段访问.html",[]],["body/5.表达式/5.7.字段访问/5.7.字段访问.html",[0,0.309,6,0.426,142,3.041,143,5.203,157,1.532,169,2.246,186,3.809,203,2.939,234,4.106,235,2.401,252,2.261,264,2.053,275,4.761,294,3.844,333,4.359,379,4.291,470,3.942,664,4.761,1224,4.761,1545,3.844,2954,4.165,3225,6.349,4081,4.43,4096,3.436,4142,6.599,4147,4.962,4228,5.486,4377,4.165,4480,6.69,5213,7.147,5214,7.853,5215,5.486]],["title/5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问",[5216,4.473]],["body/5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问",[0,0.221,6,0.428,118,3.028,142,3.054,157,1.539,169,2.256,186,3.815,203,2.953,215,5.211,234,4.124,235,2.412,252,2.271,264,2.058,275,4.782,294,3.861,333,4.378,379,4.31,470,3.96,664,4.782,1224,4.782,1545,3.861,2954,4.183,3225,6.378,4081,4.45,4096,3.451,4142,5.359,4147,4.985,4228,5.511,4377,4.183,5213,7.179,5214,7.875,5215,5.511,5217,7.875,5218,7.875,5219,7.875]],["title/5.表达式/5.8.数组访问/5.8.数组访问.html",[]],["body/5.表达式/5.8.数组访问/5.8.数组访问.html",[0,0.33,6,0.415,157,1.864,169,2.98,180,4.832,184,3.943,186,3.302,204,4.314,231,4.465,252,2.201,261,2.104,264,1.616,277,3.345,283,3.904,325,5.194,354,3.689,403,1.625,484,3.345,1583,6.959,2070,5.101,2895,4.942,3219,5.341,3337,6.182,3491,4.055,3636,7.117,4485,4.178,4497,4.832,5220,5.696,5221,6.959,5222,7.634,5223,7.634,5224,6.959]],["title/5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问",[5225,4.473]],["body/5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问",[0,0.293,6,0.417,157,1.869,169,2.986,180,4.853,186,3.311,204,4.333,224,3.96,231,4.485,252,2.211,261,2.113,264,1.623,277,3.36,283,3.915,325,5.217,354,3.528,403,1.632,484,3.36,2070,5.111,2895,4.964,3219,5.365,3337,6.209,3491,4.073,3636,7.136,4485,4.196,4497,4.853,5220,5.721,5221,6.989,5224,6.989,5226,7.667,5227,7.667,5228,7.667,5229,7.667,5230,7.667,5231,7.667,5232,7.667,5233,7.667]],["title/5.表达式/5.9.函数调用/5.9.函数调用.html",[]],["body/5.表达式/5.9.函数调用/5.9.函数调用.html",[0,0.333,6,0.419,81,0.562,119,0.575,138,0.671,169,2.748,170,0.723,190,0.873,191,3.894,202,3.776,252,2.221,472,4.288,597,3.776,641,3.375,786,3.642,867,3.123,1211,4.504,2073,5.746,2823,6.237,3491,4.091,3635,4.352,4484,5.824,4485,4.215,4497,4.875,4836,6.572,4933,7.767,5234,9.521]],["title/5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用",[5235,4.473]],["body/5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用",[0,0.33,6,0.421,81,0.565,119,0.577,138,0.674,169,2.755,170,0.726,190,0.877,191,3.899,202,3.793,252,2.231,472,4.293,597,3.793,641,3.39,786,3.659,867,3.137,1211,4.524,2073,5.772,2823,6.264,3491,4.109,3635,4.371,4484,5.84,4485,4.234,4497,4.896,4933,7.788,5234,9.54,5236,7.735]],["title/6.语言特性/6.1.条件编译/6.1.条件编译.html",[]],["body/6.语言特性/6.1.条件编译/6.1.条件编译.html",[0,0.341,4,1.148,5,1.012,6,0.395,7,1.479,51,0.683,81,0.286,119,0.542,138,0.341,139,1.751,140,2.376,141,0.443,146,1.267,147,0.536,157,0.765,164,1.851,169,2.081,170,0.367,179,2.447,182,1.994,184,3.09,190,0.443,197,3.251,203,1.467,204,2.211,209,1.601,230,2.249,233,1.558,234,3.133,235,1.198,236,2.175,242,2.92,246,1.808,251,0.594,252,1.128,255,1.943,257,2.736,260,2.289,261,2.002,264,1.856,272,2.249,274,3.169,282,1.617,296,0.668,324,0.433,345,3.169,377,2.92,378,3.859,386,3.787,389,6.542,392,1.968,403,0.833,405,0.893,426,2.622,431,1.412,436,0.485,447,2.211,450,0.561,462,2.142,465,1.632,472,1.492,473,2.595,488,3.12,504,3.178,586,1.365,592,2.477,597,1.918,599,1.872,605,0.765,618,3.322,630,1.751,638,3.381,639,3.787,647,2.021,651,2.92,677,2.477,697,2.376,785,3.049,786,2.83,787,6.579,829,1.918,832,2.142,854,2.595,861,2.142,871,2.376,887,2.477,893,2.142,905,7.742,906,5.27,925,2.211,1214,2.142,1533,2.595,1690,2.477,1939,1.697,2079,3.787,3481,3.787,3492,4.187,3592,2.92,3660,2.142,3985,3.567,4110,2.289,4263,2.477,4266,3.169,4362,2.142,4558,2.211,5009,2.92,5142,2.92,5144,3.169,5164,2.92,5237,5.454,5238,3.913,5239,3.913,5240,3.567,5241,3.567,5242,5.983,5243,4.845,5244,3.913,5245,3.913,5246,6.622,5247,3.567,5248,4.845,5249,3.169,5250,2.92,5251,5.454]],["title/6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译",[5252,4.473]],["body/6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译",[0,0.328,4,0.968,5,1.009,6,0.324,7,1.473,51,0.68,81,0.284,119,0.541,138,0.34,139,1.743,141,0.441,146,1.262,147,0.533,157,0.761,164,1.842,169,2.075,170,0.365,179,2.442,182,1.985,190,0.441,197,3.248,203,1.46,204,2.201,209,1.594,214,2.365,224,3.08,230,2.239,233,1.551,235,1.193,242,2.906,246,1.802,251,0.591,252,1.123,255,1.934,257,2.726,260,2.278,261,1.997,264,1.852,272,2.239,274,3.154,282,1.609,296,0.665,311,2.166,324,0.431,345,3.154,378,3.848,386,3.774,389,5.406,392,1.959,403,0.829,405,0.889,426,2.613,431,1.408,436,0.483,447,2.201,450,0.558,462,2.132,465,1.625,472,1.485,473,2.583,488,3.111,504,3.167,586,1.359,592,2.466,597,1.91,599,1.864,605,0.761,618,3.312,630,1.743,638,3.37,639,3.774,647,2.012,677,2.466,697,2.365,714,2.906,779,2.522,785,3.038,786,2.82,829,1.91,832,2.132,854,2.583,861,2.132,871,2.365,887,2.466,893,2.132,905,7.578,906,5.262,925,2.201,941,4.829,943,9.031,979,1.485,1214,2.132,1533,2.583,1690,2.466,1939,1.69,2079,2.466,2137,3.551,3481,3.774,3492,4.172,3592,2.906,3660,2.132,4001,3.551,4110,2.278,4263,2.466,4266,3.154,4354,3.324,4362,2.132,4558,2.201,5009,2.906,5142,2.906,5144,3.154,5164,2.906,5237,5.436,5240,3.551,5241,3.551,5243,4.829,5246,6.604,5247,3.551,5248,4.829,5249,3.154,5250,2.906,5251,3.551,5253,3.895,5254,3.895,5255,3.895,5256,3.895,5257,3.895,5258,3.895,5259,3.895,5260,3.895,5261,3.895,5262,3.895,5263,3.895,5264,3.895,5265,5.963,5266,3.895,5267,3.895,5268,3.895,5269,3.895,5270,3.895,5271,3.895,5272,3.895,5273,3.895,5274,3.895,5275,3.895,5276,3.895,5277,3.895,5278,3.895,5279,3.895,5280,3.895,5281,3.895,5282,3.895,5283,3.895,5284,3.895,5285,3.324,5286,3.895,5287,3.895,5288,3.895]],["title/6.语言特性/6.10.访问控制/6.10.访问控制.html",[]],["body/6.语言特性/6.10.访问控制/6.10.访问控制.html",[0,0.333,4,0.994,5,1.41,6,0.378,8,1.114,51,1.214,81,0.507,82,0.837,119,0.519,123,1.907,138,0.606,139,1.318,141,1.236,143,4.393,146,1.956,147,1.23,157,1.6,163,1.347,170,0.652,173,1.241,186,3.682,187,1.954,190,0.788,195,2.005,203,3.234,204,2.703,229,1.723,235,0.902,246,1.445,251,1.054,256,1.565,261,2.256,264,1.733,265,1.078,276,1.241,277,2.096,285,3.015,288,3.542,289,1.052,291,2.618,294,2.961,295,4.183,296,1.187,300,1.096,301,1.665,324,0.769,336,3.516,337,1.907,369,4.066,372,3.928,373,1.482,403,1.48,422,1.723,436,0.862,440,2.87,443,3.822,444,4.934,445,2.541,448,5.72,450,0.996,454,2.618,456,3.804,465,1.995,469,2.386,481,0.592,485,2.062,490,1.665,493,3.119,499,2.386,500,3.667,506,1.789,577,1.265,591,2.998,599,1.41,605,0.576,636,1.613,641,1.291,648,2.686,677,1.865,784,3.097,828,2.187,829,2.345,875,4.226,907,1.723,936,1.865,1415,2.702,1690,1.865,1748,1.543,1800,1.362,2336,2.798,2720,2.198,2953,1.265,2958,2.798,2963,2.386,3214,1.482,3492,2.062,3505,2.062,3515,2.541,3651,2.062,3669,1.954,3704,1.665,3720,1.665,3748,1.789,3775,2.198,3916,2.062,4021,1.378,4035,2.386,4076,2.198,4083,2.905,4096,1.291,4228,3.347,4357,2.198,4432,2.198,4445,1.865,4591,3.708,4674,2.514,4675,2.062,4721,2.198,4722,2.386,5289,4.361,5290,4.361,5291,4.361,5292,2.686,5293,4.784,5294,5.505,5295,7.463,5296,5.505,5297,5.505,5298,4.361,5299,2.686,5300,2.946,5301,2.686,5302,2.946,5303,2.686,5304,2.686,5305,2.686,5306,2.686,5307,2.686,5308,2.686,5309,2.386,5310,2.686,5311,2.686]],["title/6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制",[5312,4.473]],["body/6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制",[0,0.327,4,0.888,5,1.395,6,0.369,8,1.069,35,1.597,51,1.184,81,0.495,82,0.816,119,0.506,123,1.83,138,0.591,139,1.265,141,1.226,146,1.901,147,1.211,157,1.569,163,1.292,170,0.636,173,1.19,186,3.65,187,1.875,190,0.769,203,3.178,204,2.614,215,4.329,226,1.924,229,1.653,235,0.866,246,1.397,251,1.029,256,1.502,261,2.213,264,1.7,265,1.034,276,1.19,277,2.027,285,2.942,288,3.456,289,1.01,291,2.531,294,2.878,295,4.094,296,1.158,300,1.051,301,1.597,324,0.75,336,3.449,369,3.967,372,3.832,373,1.422,403,1.444,422,1.653,436,0.841,440,2.824,443,2.927,444,4.862,445,2.457,448,5.621,450,0.972,454,2.531,456,3.712,465,1.929,469,2.289,481,0.568,485,1.978,490,1.597,493,3.031,500,3.564,506,1.717,516,1.83,577,1.214,591,2.296,599,1.353,605,0.553,636,1.547,641,1.239,677,1.789,713,2.577,784,1.83,828,2.115,829,2.268,875,4.107,907,1.653,936,1.789,1344,2.191,1415,2.626,1690,1.789,1748,1.48,1800,1.307,2336,2.705,2736,2.577,2953,1.214,2958,2.705,2963,2.289,3214,1.422,3492,1.978,3505,1.978,3515,2.457,3651,1.978,3669,1.875,3704,1.597,3720,1.597,3748,1.717,3775,2.109,3916,1.978,4021,1.322,4035,2.289,4076,2.109,4083,2.809,4096,1.239,4228,1.978,4357,2.109,4432,2.109,4445,1.789,4591,2.191,4675,1.978,4704,2.412,4721,2.109,4722,2.289,5289,4.216,5290,4.216,5291,4.216,5292,2.577,5294,5.35,5295,7.32,5296,5.35,5297,5.35,5298,2.577,5299,2.577,5301,2.577,5303,2.577,5304,2.577,5305,2.577,5306,2.577,5307,2.577,5308,2.577,5309,2.289,5310,2.577,5311,2.577,5313,2.827,5314,2.827,5315,2.827,5316,2.827,5317,2.827,5318,2.827,5319,2.827,5320,2.827,5321,2.827,5322,2.827,5323,2.827,5324,2.827,5325,2.827,5326,4.625,5327,2.827,5328,2.827,5329,2.827,5330,2.827,5331,2.827,5332,2.827,5333,2.827,5334,2.827,5335,2.827,5336,2.827,5337,2.827,5338,2.827,5339,2.827,5340,2.827,5341,2.827,5342,2.827,5343,2.827,5344,2.827,5345,2.827,5346,2.827,5347,2.827,5348,2.827,5349,2.412,5350,2.827,5351,2.827,5352,2.827,5353,2.827,5354,2.827,5355,2.827,5356,2.827]],["title/6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html",[]],["body/6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html",[0,0.339,4,0.871,5,1.097,6,0.428,9,2.929,40,6.106,51,0.997,81,0.575,82,1.228,84,2.077,119,0.588,138,0.687,141,0.893,143,3.726,144,1.81,147,0.781,169,1.635,170,0.535,180,3.613,189,3.338,190,1.022,191,1.976,197,1.679,210,2.669,240,6.106,251,0.866,252,1.646,290,4.17,296,1.661,301,3.225,324,0.631,349,3.815,350,3.244,351,4.399,401,2.948,409,4.986,433,2.14,436,0.708,450,0.818,465,2.381,481,1.148,504,3.032,586,1.991,599,2.731,605,1.116,606,1.334,607,1.505,608,1.583,643,2.581,872,3.994,1591,3.338,1939,4.219,2896,3.166,2953,2.451,2958,4.607,3484,null,3901,4.622,4021,2.669,4110,3.338,4558,3.225,4661,4.259,5357,5.708,5358,5.203,5359,5.203,5360,5.203,5361,5.203]],["title/6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数",[5362,4.473]],["body/6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数",[0,0.341,4,0.856,5,1.078,6,0.421,9,2.068,40,5.997,51,0.971,81,0.565,82,1.217,84,2.04,119,0.577,138,0.675,141,0.877,144,1.764,147,0.761,169,1.593,170,0.522,180,3.52,189,3.253,190,1.008,191,1.926,197,1.636,210,2.6,215,3.659,240,5.997,251,0.844,252,1.604,290,4.113,296,1.642,301,3.143,324,0.615,349,3.747,350,3.208,351,4.35,401,2.872,409,3.52,433,2.085,436,0.69,450,0.797,465,2.32,481,1.118,504,2.954,586,1.94,599,2.662,605,1.087,606,1.3,607,1.467,608,1.543,643,2.515,872,3.892,1591,3.253,1939,4.172,2896,3.109,2953,2.389,2958,4.526,3484,null,3901,4.504,4021,2.6,4110,3.253,4558,3.143,4661,4.15,5349,4.746,5358,5.07,5359,5.07,5360,5.07,5361,5.07,5363,5.562,5364,5.562,5365,5.562,5366,5.562,5367,5.562,5368,5.562]],["title/6.语言特性/6.2.Externs/6.2.Externs.html",[]],["body/6.语言特性/6.2.Externs/6.2.Externs.html",[0,0.329,4,1.025,5,1.016,6,0.434,7,1.933,9,1.901,51,0.893,56,3.391,81,0.582,82,0.615,88,1.171,119,0.595,138,0.557,141,1.05,143,1.514,144,1.015,145,1.497,146,2.069,147,1.164,157,2.022,159,1.21,161,2.196,169,0.917,170,0.599,175,1.78,176,3.169,184,2.641,186,1.771,190,0.963,191,1.108,197,0.941,204,1.809,209,2.093,232,2.123,233,1.275,234,1.676,249,1.7,251,0.486,255,1.589,261,2.343,264,1.688,276,2.153,282,1.322,286,5.958,289,2.605,292,1.083,294,1.569,296,0.547,297,1.261,324,0.566,327,1.752,328,2.123,335,2.539,336,3.832,337,4.134,338,2.592,339,3.237,340,4.141,370,1.61,374,1.631,379,1.752,380,2.507,381,2.388,384,1.61,385,3.17,403,1.81,405,1.664,410,2.026,433,2.394,436,0.634,439,1.161,440,2.039,441,1.631,447,1.809,450,0.459,456,2.799,465,1.335,471,2.716,472,3.402,474,6.658,477,1.7,481,1.466,505,2.123,506,3.105,586,1.117,601,2.123,605,0.999,606,0.748,607,0.844,608,0.888,609,0.935,610,1.037,618,1.463,627,4.266,630,1.432,639,2.026,641,2.241,658,2.026,674,2.309,675,4.141,689,2.123,694,2.477,700,5.287,797,1.856,844,2.123,907,1.872,1179,2.391,1201,1.752,1219,3.105,1235,1.569,1350,1.752,1407,2.24,1545,1.569,1661,1.152,1662,1.19,1775,1.61,1855,5.171,1939,2.218,1972,1.335,2006,1.809,2059,2.388,2825,2.592,2897,2.072,2953,1.375,3205,1.7,3208,2.24,3214,1.61,3592,2.388,3641,1.7,3651,2.24,3720,1.809,4094,1.872,4172,1.872,4445,3.237,4497,2.026,4558,1.809,4675,3.578,4858,2.592,4984,2.592,4985,2.592,5172,2.592,5369,2.918,5370,3.201,5371,3.201,5372,3.201,5373,2.918,5374,4.662,5375,3.201,5376,2.592,5377,2.918,5378,2.918,5379,3.201,5380,3.201,5381,2.918,5382,3.201,5383,3.201,5384,3.201,5385,2.918,5386,4.662,5387,3.201,5388,6.648,5389,2.918,5390,2.918,5391,4.662,5392,3.201,5393,4.662,5394,2.918,5395,2.918]],["title/6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs",[5369,4.077]],["body/6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs",[0,0.332,4,0.979,5,1.004,6,0.429,7,1.903,9,1.871,51,0.879,56,3.337,81,0.576,82,0.606,88,1.148,119,0.589,138,0.549,141,1.043,144,0.995,145,1.467,146,2.041,147,1.153,157,2.012,159,1.186,161,2.161,169,0.899,170,0.591,175,1.744,176,1.944,186,1.742,190,0.955,191,1.086,197,0.923,204,1.773,209,2.06,215,1.484,224,2.599,232,2.081,233,1.249,234,1.643,249,1.667,251,0.476,255,1.558,261,2.322,264,1.671,276,2.119,282,1.296,286,5.696,289,2.25,292,1.062,294,1.538,296,0.536,297,1.241,324,0.557,327,1.717,328,2.081,335,2.498,336,3.801,338,2.541,339,3.185,340,4.075,370,1.578,374,1.599,379,1.717,380,2.467,381,2.341,384,1.578,385,3.128,403,1.794,405,1.646,410,1.986,433,2.362,436,0.624,439,1.138,440,2.012,441,1.599,447,1.773,450,0.45,456,2.754,465,1.309,471,2.673,472,3.375,474,6.604,477,1.667,481,1.45,505,2.081,506,3.056,516,4.079,586,1.095,601,2.081,605,0.984,606,0.733,607,0.827,608,0.87,609,0.917,610,1.016,618,1.434,627,4.217,630,1.404,639,1.986,641,2.205,658,1.986,674,2.263,675,4.075,689,2.081,694,2.437,700,5.234,797,1.826,844,2.081,907,1.835,1179,2.353,1201,1.717,1219,3.056,1235,1.538,1350,1.717,1407,2.195,1545,1.538,1661,1.129,1662,1.167,1775,1.578,1855,5.103,1939,2.183,1972,1.309,2006,1.773,2059,2.341,2897,2.031,2953,1.347,3205,1.667,3208,2.195,3214,1.578,3592,2.341,3641,1.667,3651,2.195,3720,1.773,4094,1.835,4172,1.835,4445,3.185,4497,1.986,4558,1.773,4675,3.521,4858,2.541,4984,2.541,4985,2.541,5172,2.541,5373,2.86,5374,4.587,5376,2.541,5377,2.86,5378,2.86,5381,2.86,5385,2.86,5386,4.587,5388,6.572,5389,2.86,5390,2.86,5391,4.587,5393,4.587,5394,2.86,5395,2.86,5396,3.137,5397,3.137,5398,3.137,5399,3.137,5400,3.137,5401,3.137,5402,3.137,5403,3.137,5404,3.137,5405,3.137,5406,3.137,5407,3.137,5408,3.137,5409,3.137,5410,3.137,5411,3.137,5412,3.137,5413,3.137,5414,3.137,5415,3.137,5416,3.137,5417,3.137,5418,3.137]],["title/6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html",[]],["body/6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html",[0,0.331,4,0.933,5,1.006,6,0.393,9,2.686,58,4.791,81,0.527,119,0.539,138,0.44,139,2.258,141,0.956,146,1.635,147,1.334,157,0.986,161,2.167,170,0.473,180,3.194,190,1.149,191,1.747,209,2.065,233,2.01,246,1.525,252,1.455,255,3.586,264,2.491,265,1.846,276,2.125,284,2.6,285,2.189,296,0.862,324,0.558,366,2.606,369,2.952,370,2.538,372,2.852,405,1.926,410,3.194,422,2.952,424,2.234,436,0.626,447,2.852,454,5.335,457,8.213,465,2.105,471,5.178,586,1.761,598,2.762,599,2.415,627,4.225,630,2.258,643,2.282,647,2.606,867,2.046,887,5.341,906,3.837,1219,4.387,1223,2.754,1545,2.474,1591,2.952,1800,2.333,2305,3.531,3202,3.346,3205,3.837,3498,4.087,3511,3.531,3515,2.681,4021,2.359,4077,2.852,4445,3.194,4718,3.765,5194,4.087,5215,3.531,5419,5.046,5420,5.046,5421,6.585,5422,4.6,5423,6.585,5424,5.39,5425,6.164,5426,4.6,5427,4.087,5428,4.6,5429,4.6,5430,4.6]],["title/6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展",[5431,4.473]],["body/6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展",[0,0.33,4,0.791,5,0.996,6,0.389,9,1.849,35,2.811,58,4.741,81,0.522,119,0.534,138,0.434,139,2.226,141,0.949,146,1.611,147,1.327,157,0.972,161,2.136,170,0.467,180,3.148,190,1.144,191,1.722,209,2.036,233,1.981,246,1.503,252,1.434,255,3.55,264,2.252,265,1.82,276,2.095,284,1.791,285,2.158,296,0.849,324,0.55,366,2.569,369,2.909,370,2.501,372,2.811,405,1.632,410,3.148,422,2.909,424,2.202,436,0.617,447,2.811,454,5.306,457,8.173,465,2.075,471,5.149,586,1.735,598,2.722,599,2.38,627,4.182,630,2.226,643,2.25,647,2.569,779,3.22,867,2.017,887,5.298,906,3.798,1219,4.342,1223,2.726,1545,2.439,1591,2.909,1800,2.3,2305,3.481,3202,3.299,3205,3.798,3498,4.028,3511,3.481,3515,2.642,4021,2.326,4077,2.811,4445,3.148,4718,3.712,5194,4.028,5215,3.481,5421,6.518,5422,4.534,5423,6.518,5424,5.335,5425,4.245,5426,4.534,5427,4.028,5428,4.534,5429,4.534,5430,4.534,5432,4.974,5433,4.974,5434,4.974,5435,4.974,5436,4.974,5437,4.974,5438,4.974,5439,4.974,5440,4.974,5441,4.974,5442,4.974,5443,4.974,5444,4.974,5445,4.974,5446,4.974,5447,7.15,5448,7.15,5449,4.974,5450,4.974]],["title/6.语言特性/6.3.静态扩展/6.3.静态扩展.html",[]],["body/6.语言特性/6.3.静态扩展/6.3.静态扩展.html",[0,0.315,4,0.731,5,0.92,6,0.243,7,1.688,51,0.78,81,0.326,119,0.493,123,2.89,138,0.389,139,1.998,140,2.711,141,0.985,143,3.72,146,1.446,147,1.443,157,2.018,158,2.523,161,1.917,169,1.279,170,0.419,172,2.523,184,2.306,190,0.749,191,2.724,194,2.245,197,1.313,251,0.677,252,1.905,255,2.216,256,4.179,257,3.021,261,1.821,264,2.128,285,2.866,296,1.128,297,1.101,324,0.494,333,2.482,335,2.216,337,2.89,373,2.245,396,3.616,403,1.976,411,1.778,425,2.659,431,0.868,433,1.674,434,2.371,435,3.331,436,0.553,450,0.64,453,3.038,454,5.319,455,3.331,471,2.371,472,2.519,481,1.582,507,2.189,586,1.558,591,2.216,600,2.957,605,0.873,606,1.043,630,1.998,643,2.019,646,3.865,647,2.306,672,3.124,700,2.96,829,2.189,844,2.96,876,2.611,893,3.616,1221,2.711,1224,4.012,1545,2.189,1677,4.93,2937,3.124,2953,1.917,3214,2.245,3476,3.124,3487,2.826,3660,2.443,3986,3.865,4021,2.087,4024,3.331,4077,2.523,4078,3.615,4094,5.085,4096,2.896,4141,3.331,4145,3.124,4146,3.615,4147,2.826,4270,4.182,4362,2.443,4395,3.46,4558,2.523,5215,3.124,5427,3.615,5451,4.069,5452,6.023,5453,7.171,5454,7.171,5455,9.166,5456,6.023,5457,6.023,5458,4.069,5459,4.069,5460,4.464,5461,4.069,5462,4.069,5463,4.069,5464,4.464,5465,4.069,5466,4.069,5467,4.069,5468,4.069,5469,4.069,5470,4.464,5471,4.069,5472,4.069]],["title/6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展",[5473,4.473]],["body/6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展",[0,0.312,4,0.485,5,0.908,6,0.239,7,1.658,29,3.164,51,0.766,81,0.32,118,1.686,119,0.487,123,2.839,138,0.382,139,1.962,141,0.977,146,1.421,147,1.437,157,2.008,158,2.478,161,1.883,169,1.256,170,0.411,172,2.478,190,0.739,191,2.695,194,2.205,197,1.29,214,2.663,215,3.682,224,2.265,251,0.665,252,1.88,255,2.177,256,4.135,257,2.981,261,1.797,264,2.116,285,2.829,296,1.113,297,1.081,324,0.485,333,2.438,335,2.177,373,2.205,396,3.569,403,1.657,411,1.747,425,2.613,431,0.852,433,1.644,434,2.33,435,3.272,436,0.544,450,0.629,454,5.284,455,3.272,471,2.33,472,2.486,481,1.565,507,2.15,516,2.839,586,1.53,591,2.177,600,2.918,605,0.857,606,1.025,630,1.962,643,1.983,647,2.265,672,3.069,700,2.908,712,3.814,829,2.15,844,2.908,876,2.565,893,3.569,1221,2.663,1224,3.96,1545,2.15,1677,4.866,2937,3.069,2953,1.883,3214,2.205,3476,3.069,3487,2.776,3660,2.4,3986,3.814,4021,2.05,4024,3.272,4077,2.478,4078,3.552,4094,5.041,4096,2.858,4141,3.272,4145,3.069,4146,3.552,4147,2.776,4270,4.127,4362,2.4,4395,3.399,4558,2.478,5215,3.069,5427,3.552,5451,3.998,5452,5.944,5453,7.096,5454,5.944,5455,8.801,5456,5.944,5457,5.944,5458,3.998,5459,3.998,5461,3.998,5462,3.998,5463,3.998,5465,3.998,5466,3.998,5467,3.998,5468,3.998,5469,3.998,5471,3.998,5472,3.998,5474,4.386,5475,4.386,5476,4.386,5477,4.386,5478,4.386,5479,4.386,5480,4.386,5481,4.386,5482,4.386,5483,4.386,5484,4.386,5485,4.386,5486,4.386,5487,4.386,5488,4.386]],["title/6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html",[0,0.326,6,0.44,81,0.591,119,0.604,157,1.582,179,2.26,197,2.381,246,3.227,257,3.701,287,5.105,298,3.283,300,4.136,483,4.071,484,3.547,577,3.476,641,3.547,1972,4.125,3219,5.664,3405,6.555,4377,4.3,5489,7.379,5490,7.379]],["title/6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查",[5491,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查",[0,0.326,6,0.438,81,0.588,119,0.601,157,1.575,179,2.249,197,2.37,246,2.98,257,3.684,287,4.769,298,3.268,300,4.129,483,4.052,484,3.531,577,3.46,641,3.531,1972,4.113,3219,5.638,4377,4.28,5489,7.345,5490,7.345,5492,8.057,5493,8.057,5494,8.057,5495,8.057,5496,8.057]],["title/6.语言特性/6.4.模式匹配/6.4.1.介绍.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.1.介绍.html",[0,0.319,4,0.955,6,0.356,8,2.474,81,0.478,119,0.488,138,0.571,160,2.81,169,2.771,179,2.412,192,4.34,203,2.453,233,2.606,243,4.922,246,2.922,264,1.385,282,3.569,284,2.356,298,2.654,327,3.582,343,3.476,376,3.582,379,3.582,483,5.785,484,4.813,577,2.81,586,2.283,636,3.582,667,4.34,788,3.38,828,2.992,925,3.698,1228,4.171,1235,3.208,2872,5.072,3224,4.579,3478,3.582,3656,3.698,3986,3.828,4096,2.868,4270,4.142,4446,5.299,4595,4.34,4672,4.142,5243,5.299,5497,5.584,5498,6.544,5499,5.965,5500,6.767,5501,5.965,5502,5.965,5503,5.299,5504,5.965]],["title/6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍",[5505,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍",[0,0.271,4,0.721,6,0.355,8,2.465,81,0.476,119,0.487,138,0.568,160,2.8,169,2.766,179,2.406,192,4.323,203,2.444,233,2.596,243,4.915,246,2.917,264,1.38,282,3.56,284,2.347,298,2.644,327,3.568,343,3.463,376,3.568,379,3.568,483,5.781,484,4.808,577,2.8,586,2.275,636,3.568,667,4.323,788,3.367,828,2.981,925,3.684,1033,4.865,1228,4.165,1235,3.196,1735,4.865,2872,5.053,3224,4.562,3478,3.568,3656,3.684,3986,3.813,4096,2.857,4270,4.127,4446,5.28,4595,4.323,4672,4.127,5243,5.28,5499,5.943,5500,6.755,5501,5.943,5502,5.943,5503,5.28,5504,5.943,5506,6.519,5507,6.519,5508,6.519,5509,6.519,5510,6.519,5511,6.519,5512,6.519]],["title/6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html",[0,0.332,6,0.434,81,0.583,119,0.596,138,0.696,170,0.749,179,2.229,197,2.348,243,4.693,246,3.207,298,3.238,324,0.883,440,3.132,483,5.338,484,3.499,667,5.294,3488,4.511,3796,4.848,5513,6.813,5514,7.278,5515,7.278,5516,7.92,5517,8.939,5518,7.278]],["title/6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查",[5519,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查",[0,0.335,6,0.432,81,0.58,119,0.593,138,0.693,170,0.746,179,2.218,197,2.338,243,4.68,246,3.201,298,3.223,324,0.879,440,3.123,483,5.327,484,3.483,667,5.27,3488,4.491,3796,4.826,5514,7.244,5515,7.244,5516,7.904,5517,8.914,5518,7.244,5520,7.947]],["title/6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html",[0,0.342,6,0.387,8,1.87,51,0.864,81,0.609,82,0.857,119,0.531,138,0.431,170,0.464,179,1.381,234,2.59,243,4.821,246,3.515,250,1.474,251,0.75,252,1.426,257,3.256,284,1.78,298,2.006,324,0.547,328,3.28,422,2.893,436,0.613,440,1.58,441,4.251,442,3.69,450,0.709,481,1.432,483,2.487,484,4.874,507,2.425,600,3.186,605,0.967,606,1.156,618,2.261,646,2.893,664,3.003,667,3.28,673,2.627,867,2.006,925,2.795,1235,3.491,1534,4.024,2185,4.005,2301,2.795,2955,2.707,3201,3.897,3222,3.461,3478,2.707,3484,null,3986,2.893,4081,2.795,4270,3.131,4271,3.69,5500,3.461,5503,4.005,5516,8.075,5521,4.22,5522,7.833,5523,6.757,5524,8.895,5525,7.606,5526,6.491,5527,3.69,5528,4.509,5529,4.946,5530,4.946,5531,4.946]],["title/6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配",[5532,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配",[0,0.339,6,0.389,8,1.881,51,0.869,81,0.611,82,0.86,119,0.534,138,0.434,170,0.467,179,1.389,234,2.605,243,4.639,246,3.5,250,1.483,251,0.755,252,1.434,257,3.269,284,1.791,298,2.017,324,0.55,328,3.299,422,2.909,436,0.617,440,1.589,441,4.265,442,3.712,450,0.713,481,1.438,483,2.501,484,4.879,507,2.439,600,3.199,605,0.972,606,1.162,618,2.274,664,3.021,667,3.299,673,2.642,712,2.909,867,2.017,925,2.811,1235,3.505,1534,4.04,2185,4.028,2301,2.811,2955,2.722,3201,3.913,3222,3.481,3478,2.722,3484,null,3986,2.909,4081,2.811,4270,3.148,4271,3.712,5500,3.481,5503,4.028,5516,8.086,5522,7.85,5523,6.778,5524,8.907,5525,7.63,5526,6.518,5527,3.712,5528,4.534,5533,4.974,5534,4.974,5535,4.974,5536,4.974,5537,4.974,5538,4.974,5539,4.974,5540,4.974,5541,4.974,5542,4.974,5543,4.974]],["title/6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html",[0,0.342,6,0.396,8,2.754,81,0.532,82,1.022,119,0.544,138,0.635,144,1.619,170,0.683,179,2.371,235,2.836,236,4.05,243,4.686,246,3.342,252,1.472,253,2.885,264,1.081,280,3.386,297,2.51,298,2.954,324,0.565,350,3.395,431,0.992,436,0.633,439,2.643,440,2.957,441,2.601,442,3.809,465,2.129,470,2.567,480,3.1,483,2.567,484,4.291,486,2.986,577,3.128,667,3.386,673,3.87,867,2.07,1756,6.337,2915,2.794,3478,2.794,3488,2.885,3503,3.1,3639,3.572,4077,2.885,4451,3.809,5500,3.572,5516,6.337,5522,8.83,5523,5.899,5524,7.499,5544,3.957,5545,4.654,5546,4.654,5547,4.654,5548,5.105,5549,5.105,5550,4.654,5551,3.572,5552,4.654,5553,7.742,5554,4.654,5555,7.284]],["title/6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获",[5556,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获",[0,0.336,6,0.393,8,2.731,81,0.527,82,1.015,119,0.539,138,0.63,144,1.6,170,0.678,179,2.355,235,2.821,243,4.665,246,3.285,252,1.455,253,2.852,264,1.068,280,3.346,297,2.5,298,2.93,311,4.016,324,0.558,350,3.382,431,0.981,436,0.626,439,2.621,440,2.695,441,2.571,442,3.765,465,2.105,470,2.538,480,3.064,483,2.538,484,4.272,486,2.952,577,3.102,667,3.346,673,3.837,867,2.046,1756,3.765,2587,3.911,2915,2.762,3478,2.762,3488,2.852,3503,3.064,3639,3.531,4007,3.765,4077,2.852,4451,3.765,4922,4.6,5500,3.531,5516,6.296,5522,8.457,5523,5.85,5524,6.833,5545,4.6,5546,4.6,5547,4.6,5550,4.6,5551,3.531,5552,4.6,5553,7.692,5554,4.6,5557,5.046,5558,5.046,5559,7.224,5560,5.046,5561,5.046,5562,5.046,5563,5.046,5564,5.046,5565,5.046,5566,5.046,5567,5.046,5568,5.046,5569,5.046,5570,5.046,5571,5.046,5572,7.224,5573,5.046,5574,5.046,5575,5.046,5576,5.046,5577,5.046]],["title/6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html",[0,0.341,4,1.033,6,0.332,51,1.067,81,0.446,82,0.993,119,0.456,138,0.533,141,0.935,143,4.419,160,4.012,170,0.573,179,1.705,206,4.557,229,3.573,231,3.573,235,3.201,236,3.396,243,2.923,246,3.023,251,0.927,254,4.05,284,2.199,287,2.733,299,3.573,324,0.676,342,4.557,369,3.573,436,0.757,450,0.875,480,3.709,481,1.228,484,4.579,486,4.826,577,2.623,586,2.131,605,1.194,606,1.427,657,3.343,1232,5.852,1297,7.466,1301,8.463,1800,3.814,2304,4.557,2955,3.343,3748,3.709,3916,4.274,5500,5.773,5578,5.212,5579,5.568,5580,5.568,5581,5.568,5582,5.568]],["title/6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配",[5583,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配",[0,0.333,4,1.039,6,0.336,51,1.078,81,0.451,82,1,119,0.461,138,0.538,141,0.942,160,4.034,170,0.579,179,1.723,206,4.606,215,4.443,229,3.61,231,3.61,235,3.212,243,2.954,246,3.036,251,0.936,254,4.093,284,2.222,287,2.762,299,3.61,311,3.432,324,0.683,342,4.606,369,3.61,436,0.765,450,0.885,480,3.749,481,1.241,484,4.596,486,4.86,577,2.651,586,2.154,605,1.206,606,1.442,657,3.379,1232,5.494,1297,7.498,1301,7.607,1800,3.842,2304,4.606,2955,3.379,3748,3.749,3916,4.319,4649,5.627,5500,5.814,5579,5.627,5580,5.627,5581,5.627,5582,5.627,5584,6.173,5585,6.173,5586,6.173,5587,6.173,5588,6.173,5589,6.173,5590,6.173,5591,6.173]],["title/6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html",[]],["body/6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html",[0,0.341,6,0.376,81,0.504,82,1.077,119,0.515,138,0.602,170,0.648,178,3.567,187,4.58,203,2.59,229,4.04,243,3.305,246,3.428,251,1.048,253,3.903,281,4.372,298,2.801,324,0.99,378,4.754,436,1.11,439,2.506,450,0.99,456,3.78,483,3.473,484,3.027,577,2.966,598,3.78,646,4.04,1223,4.25,1599,5.935,2197,5.894,2915,3.78,3216,5.594,3788,4.833,4914,7.248,5158,5.594,5592,6.907,5593,5.594,5594,6.296,5595,6.907]],["title/6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard",[5596,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard",[0,0.337,6,0.376,81,0.504,82,1.077,118,2.656,119,0.515,138,0.602,170,0.648,178,3.567,187,4.58,203,2.59,229,4.04,243,3.305,246,3.428,251,1.048,253,3.903,281,4.372,298,2.801,324,0.99,378,4.754,436,1.11,439,2.506,450,0.99,456,3.78,483,3.473,484,3.027,577,2.966,598,3.78,712,4.04,1223,4.25,1599,5.935,1895,6.296,2197,5.894,2915,3.78,3216,5.594,3788,4.833,4914,7.248,4969,5.894,5158,5.594,5593,5.594,5594,6.296,5597,6.907,5598,6.907,5599,6.907]],["title/6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html",[0,0.343,6,0.607,81,0.726,82,1.08,119,0.67,138,0.782,170,0.651,243,5.341,246,3.292,250,2.067,251,1.052,261,1.911,298,2.812,324,1.163,354,2.347,431,1.348,436,0.86,450,0.994,484,4.359,1599,5.95,1975,3.919,3478,3.796,5527,5.174,5600,5.918,5601,6.321,5602,6.935,5603,6.321,5604,6.321]],["title/6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配",[5605,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配",[0,0.341,6,0.596,81,0.732,82,1.091,119,0.677,138,0.79,170,0.661,243,5.363,246,3.308,250,2.101,251,1.069,261,1.942,298,2.858,324,1.17,354,2.385,431,1.37,436,0.874,450,1.01,484,4.393,1599,6.012,1975,3.982,3478,3.857,5527,5.258,5603,6.424,5604,6.424,5606,7.047,5607,6.424,5608,7.047,5609,7.047]],["title/6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html",[0,0.341,6,0.562,81,0.71,82,0.797,119,0.494,138,0.577,170,0.621,179,2.43,203,2.481,233,3.466,243,5.273,246,3.329,249,3.516,250,1.973,264,1.401,287,4.352,298,3.944,300,2.461,324,0.732,350,2.903,354,3.292,427,3.622,439,2.402,440,2.114,441,3.372,483,3.328,484,3.814,577,2.842,597,3.245,647,3.418,1214,3.622,1975,3.74,3485,4.019,3488,3.74,4498,5.36,5551,4.631,5593,5.36,5601,6.033,5610,5.648,5611,6.033,5612,6.033]],["title/6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配",[5613,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配",[0,0.337,6,0.564,81,0.712,82,0.803,119,0.498,138,0.581,170,0.626,179,2.442,203,2.5,233,3.484,243,5.284,246,3.251,249,3.543,250,1.988,264,1.412,287,4.368,298,3.548,300,2.48,324,0.738,350,2.917,354,3.304,427,3.65,439,2.42,440,2.13,441,3.398,483,3.354,484,3.833,577,2.864,597,3.27,647,3.444,1214,3.65,1975,3.769,3485,4.05,3488,3.769,4498,5.401,5551,4.667,5593,5.401,5607,6.079,5611,6.079,5612,6.079,5614,6.669,5615,6.669,5616,6.669,5617,6.669,5618,6.669,5619,6.669]],["title/6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html",[0,0.344,6,0.585,81,0.679,82,0.884,119,0.548,138,0.812,144,2.329,170,0.689,243,3.514,246,3.088,250,2.189,264,1.555,298,2.978,324,1.029,335,3.646,436,1.154,483,5.404,484,3.218,488,3.154,597,3.601,673,3.901,3214,3.693,3485,4.46,4096,3.218,4609,5.947,5046,5.48,5527,5.48,5551,5.139,5620,6.695]],["title/6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式",[5620,2.643,5621,2.643]],["body/6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式",[0,0.34,6,0.587,81,0.685,82,0.895,119,0.555,138,0.818,144,2.359,170,0.698,243,3.559,246,3.106,250,2.217,264,1.574,298,3.016,324,1.038,335,3.693,436,1.163,483,5.429,484,3.26,488,3.194,597,3.647,673,3.951,3214,3.74,3485,4.517,4096,3.26,4609,6.024,5046,5.55,5527,5.55,5551,5.205,5622,7.438,5623,7.438,5624,7.438]],["title/6.语言特性/6.4.模式匹配/6.4.9.提取器.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.9.提取器.html",[0,0.34,4,0.556,5,1.28,6,0.458,7,1.184,8,1.184,51,1.099,81,0.526,82,0.757,119,0.686,138,0.688,141,0.816,144,1.594,147,1.152,159,1.184,163,1.432,169,0.897,170,0.676,178,1.617,179,2.35,190,0.954,191,1.74,197,1.478,202,1.535,203,1.174,236,1.741,243,4.233,246,2.866,251,0.955,252,0.903,261,1.385,264,1.332,281,1.982,284,2.266,287,2.816,296,1.23,297,1.239,298,3.414,300,1.868,324,0.797,348,2.536,401,3.25,403,1.792,405,1.147,411,1.247,431,0.977,436,0.893,440,2.825,441,1.596,445,3.343,450,1.032,464,3.052,470,1.575,472,1.194,481,1.586,483,3.966,484,4.157,486,1.832,488,2.703,504,1.664,577,2.158,586,1.753,605,1.23,606,1.471,607,1.66,608,1.746,609,1.839,610,1.015,628,1.664,641,2.202,657,1.714,844,2.077,887,1.982,893,1.714,1211,1.832,1489,1.982,1523,2.527,1535,2.337,1661,1.127,1775,3.622,2301,4.07,2306,2.191,2953,1.345,2955,2.75,2958,2.939,3201,1.714,3222,2.191,3481,1.982,3484,null,3488,1.77,3503,3.052,3513,2.536,4030,1.499,4096,1.372,4141,2.337,4336,5.89,4362,1.714,4375,2.536,4395,2.427,4507,2.536,4508,4.581,5215,2.191,5544,3.895,5551,3.516,5625,2.672,5626,8.647,5627,4.581,5628,4.581,5629,7.674,5630,2.855,5631,4.581,5632,4.581,5633,3.132,5634,3.132,5635,4.581,5636,4.581,5637,2.855,5638,2.855,5639,2.855,5640,2.855,5641,4.581,5642,5.833,5643,5.374,5644,3.132,5645,2.855,5646,2.855,5647,2.536]],["title/6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器",[5648,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器",[0,0.344,4,0.53,5,1.252,6,0.446,7,1.116,8,1.116,51,1.056,81,0.508,82,0.728,119,0.671,138,0.667,141,0.789,144,1.519,147,1.122,159,1.116,163,1.349,169,0.846,170,0.653,178,1.524,179,2.287,190,0.929,191,1.659,197,1.409,202,1.447,203,1.107,243,4.131,246,2.808,251,0.917,252,0.851,261,1.32,264,1.28,281,1.868,284,2.176,287,2.705,296,1.188,297,1.181,298,3.323,300,1.781,311,1.641,324,0.77,348,2.39,401,3.123,403,1.744,405,1.093,411,1.175,431,0.931,436,0.863,440,2.617,441,1.504,445,3.212,450,0.997,464,2.909,470,1.484,472,1.125,481,1.538,483,3.847,484,4.073,486,1.726,488,2.596,504,1.568,577,2.057,586,1.671,605,1.182,606,1.413,607,1.594,608,1.677,609,1.767,610,0.956,628,1.568,641,2.099,657,1.615,844,1.957,887,1.868,893,1.615,1211,1.726,1489,1.868,1523,2.409,1535,2.202,1661,1.062,1775,3.499,2301,3.932,2306,2.065,2953,1.267,2955,2.622,2958,1.726,3201,1.615,3222,2.065,3481,1.868,3484,null,3488,1.668,3503,2.909,3513,2.39,4007,2.202,4030,1.412,4096,1.293,4141,2.202,4336,5.733,4362,1.615,4375,2.39,4507,2.39,4551,4.367,5111,2.69,5215,2.065,5544,2.288,5551,3.352,5626,8.473,5627,4.367,5628,4.367,5629,6.974,5630,2.69,5631,4.367,5632,2.69,5635,4.367,5636,2.69,5637,2.69,5638,2.69,5639,2.69,5640,2.69,5641,4.367,5642,5.635,5643,5.192,5645,2.69,5646,2.69,5647,2.39,5649,2.951,5650,2.951,5651,2.951,5652,2.951,5653,2.951,5654,2.951,5655,2.951,5656,2.951,5657,2.951,5658,2.951,5659,2.951,5660,2.951,5661,2.951,5662,2.951,5663,2.951,5664,2.951,5665,2.951,5666,2.951,5667,2.951,5668,2.951]],["title/6.语言特性/6.5.字符串插值/6.5.字符串插值.html",[]],["body/6.语言特性/6.5.字符串插值/6.5.字符串插值.html",[0,0.34,4,1.139,6,0.447,81,0.6,82,0.841,84,1.272,119,0.815,139,2.158,159,1.823,163,2.205,165,2.051,169,2.003,179,1.952,197,2.057,201,3.906,203,1.808,206,3.599,236,3.887,244,5.662,247,3.827,264,2.027,265,1.764,329,2.308,331,3.906,350,3.587,372,3.951,376,2.64,398,3.198,405,2.493,411,2.785,422,4.09,431,1.599,460,4.115,461,7.687,462,3.827,463,5.217,481,1.814,577,2.071,586,1.683,608,1.338,628,2.562,677,3.053,861,3.827,893,2.64,1119,3.906,1206,2.725,1213,3.599,1545,2.364,1589,6.137,2070,4.423,2952,2.929,3204,2.821,3207,3.906,3214,2.425,3480,4.246,3497,2.929,3515,2.562,3518,3.599,3765,3.375,3795,3.053,3830,3.198,3833,3.599,3916,3.375,4030,2.308,4096,2.113,4150,3.906,4429,3.906,4617,3.198,5146,5.662,5151,6.661,5669,4.396,5670,6.992,5671,4.823,5672,6.374,5673,4.396,5674,4.396]],["title/6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值",[5675,4.473]],["body/6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值",[0,0.329,4,1,6,0.449,35,2.74,81,0.602,82,0.845,84,1.279,119,0.816,139,2.17,159,1.833,163,2.217,165,2.062,169,2.011,179,1.96,197,2.065,201,3.927,203,1.818,206,3.619,244,5.685,247,3.842,264,2.032,265,1.774,311,3.903,329,2.321,331,3.927,350,3.524,372,3.967,376,2.654,398,3.216,405,2.496,411,2.796,422,4.106,431,1.604,461,7.7,462,3.842,463,5.238,481,1.819,577,2.083,586,1.692,608,1.345,628,2.576,677,3.07,722,2.614,861,3.842,893,2.654,939,3.216,1119,3.927,1206,2.74,1213,3.619,1545,2.378,1589,6.157,2070,4.045,2952,2.945,3168,5.991,3204,2.836,3207,3.927,3214,2.439,3480,4.263,3497,2.945,3515,2.576,3518,3.619,3765,3.393,3795,3.07,3830,3.216,3833,3.619,3916,3.393,4030,2.321,4096,2.125,4150,3.927,4429,3.927,4617,3.216,4925,4.421,5146,5.685,5151,6.682,5669,4.421,5672,4.421,5673,4.421,5674,4.421,5676,4.85,5677,4.85,5678,4.85,5679,7.02,5680,4.85,5681,4.85,5682,4.421,5683,4.85,5684,4.85,5685,4.85,5686,4.85,5687,7.02,5688,4.85,5689,4.85]],["title/6.语言特性/6.6.数组推导/6.6.数组推导.html",[]],["body/6.语言特性/6.6.数组推导/6.6.数组推导.html",[0,0.344,4,0.788,5,1.271,6,0.526,7,3.154,51,1.759,81,0.706,82,1.249,119,0.623,138,0.727,141,0.807,144,2.258,147,0.975,159,1.87,164,2.339,169,1.417,170,0.668,178,2.554,179,1.988,190,0.807,197,1.455,203,1.854,233,1.97,236,2.75,249,2.627,250,3.003,251,1.266,252,2.406,261,1.363,264,1.507,296,1.216,324,0.788,326,2.795,333,2.75,353,3.69,354,3.274,355,4.722,359,4.165,378,2.627,396,2.707,424,2.19,431,1.622,436,0.883,445,2.627,450,1.02,465,2.063,481,0.994,600,2.213,605,1.392,829,2.425,844,3.28,1223,3.958,1689,4.567,1805,3.461,3500,3.69,3660,2.707,4617,4.722,5690,6.491,5691,4.946,5692,6.491,5693,4.509,5694,4.509,5695,4.509,5696,4.509,5697,4.509]],["title/6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导",[5698,4.473]],["body/6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导",[0,0.344,4,0.535,5,1.258,6,0.521,7,3.115,51,1.746,81,0.7,82,1.241,119,0.615,138,0.718,141,0.794,144,2.222,147,0.959,159,1.828,164,2.287,169,1.385,170,0.657,178,2.498,179,1.956,190,0.794,197,1.422,203,1.813,218,5.228,233,1.926,249,2.569,250,2.98,251,1.25,252,2.376,261,1.333,264,1.483,296,1.196,311,2.689,324,0.775,326,2.733,333,2.689,354,3.245,355,4.646,359,4.098,378,2.569,396,2.647,424,2.141,431,1.601,436,0.869,445,2.569,450,1.004,465,2.017,481,0.972,600,2.164,605,1.369,779,3.131,829,2.371,844,3.207,1223,3.931,1689,4.509,1805,3.384,3500,3.608,3660,2.647,4617,4.646,5690,6.387,5692,6.387,5693,4.408,5694,4.408,5695,4.408,5696,4.408,5697,4.408,5699,4.836,5700,4.836,5701,4.836,5702,4.836,5703,4.836,5704,4.836,5705,4.836]],["title/6.语言特性/6.4.模式匹配/6.4.模式匹配.html",[]],["body/6.语言特性/6.4.模式匹配/6.4.模式匹配.html",[0,0.343,482,6.428,3405,6.977,5497,7.352,5513,7.352,5521,7.352,5544,6.678,5578,7.352,5600,7.352,5610,7.352,5625,7.352,5647,6.977,5706,7.854]],["title/6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配",[5707,4.473]],["body/6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配",[1750,6.711,3405,7.012,5497,7.388,5513,7.388,5521,7.388,5544,6.711,5578,7.388,5600,7.388,5610,7.388,5621,7.893,5625,7.388,5647,7.012,5706,7.893,5708,8.658,5709,8.658,5710,8.658,5711,8.658,5712,8.658,5713,8.658,5714,8.658,5715,8.658,5716,8.658,5717,8.658]],["title/6.语言特性/6.7.迭代器/6.7.迭代器.html",[]],["body/6.语言特性/6.7.迭代器/6.7.迭代器.html",[0,0.335,4,0.651,5,1.209,6,0.437,8,1.447,51,1.027,81,0.587,82,1.045,84,2.121,119,0.6,121,2.782,138,0.625,141,1.038,146,3.092,147,0.805,157,1.865,160,1.643,170,0.672,184,4.483,185,2.422,190,1.169,194,2.958,250,1.141,251,0.892,296,1.63,297,2.353,324,0.792,327,2.094,343,2.033,354,2.425,363,2.371,366,1.976,403,0.815,405,1.835,423,3.099,424,5.09,425,3.504,428,2.238,429,2.538,431,1.143,436,0.888,439,2.918,450,1.027,481,1.183,484,1.677,506,2.324,586,2.052,592,2.422,598,4.75,605,1.15,606,1.374,607,1.551,608,1.632,609,1.719,610,1.906,822,2.324,829,1.876,867,1.552,1228,3.52,1540,3.099,1661,2.117,1662,2.187,1663,1.524,1664,1.581,1665,1.75,1666,1.789,1667,1.876,1668,1.976,1669,1.976,1972,2.453,2350,4.764,2723,4.243,2949,2.538,2955,2.094,3421,2.855,3494,2.855,3831,2.761,4021,1.789,4594,3.099,4674,3.265,5082,3.099,5718,3.488,5719,7.331,5720,3.488,5721,3.488,5722,3.488,5723,3.488,5724,3.488,5725,7.331,5726,3.488,5727,3.488,5728,5.362,5729,5.362,5730,3.827,5731,3.827,5732,3.827,5733,7.331,5734,3.488,5735,5.362,5736,3.827]],["title/6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器",[5737,4.473]],["body/6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器",[0,0.343,4,0.397,5,1.174,6,0.423,8,1.357,51,0.978,81,0.567,82,1.014,84,2.05,119,0.58,121,2.648,138,0.6,141,1.012,146,3.021,147,0.766,157,1.823,160,1.542,170,0.646,185,2.272,190,1.149,194,2.815,224,4.353,250,1.07,251,0.849,296,1.592,297,2.299,324,0.761,327,1.965,343,1.907,354,2.329,363,2.225,366,1.854,403,0.764,405,1.774,424,4.993,425,3.335,428,2.1,429,2.381,431,1.088,436,0.853,439,2.821,450,0.986,481,1.126,484,1.573,506,2.18,586,1.953,592,2.272,598,4.254,605,1.094,606,1.308,607,1.476,608,1.553,609,1.636,610,1.814,822,2.18,829,1.76,867,1.456,979,2.135,1228,3.418,1540,2.907,1661,2.015,1662,2.082,1663,1.43,1664,1.483,1665,1.641,1666,1.679,1667,1.76,1668,1.854,1669,1.854,1972,2.335,2350,4.534,2723,2.59,2949,2.381,2955,1.965,3421,2.679,3494,2.679,3852,2.59,4021,1.679,4594,2.907,4704,3.064,5082,2.907,5718,3.273,5719,7.086,5720,3.273,5721,3.273,5722,3.273,5723,3.273,5724,3.273,5725,7.086,5726,3.273,5727,3.273,5728,5.104,5729,5.104,5733,6.273,5734,3.273,5735,5.104,5738,3.59,5739,3.59,5740,3.59,5741,3.59,5742,3.59,5743,3.59,5744,3.59,5745,3.59,5746,3.59,5747,3.59,5748,3.59,5749,3.59,5750,3.59,5751,3.59,5752,3.59]],["title/6.语言特性/6.8.函数绑定/6.8.函数绑定.html",[]],["body/6.语言特性/6.8.函数绑定/6.8.函数绑定.html",[0,0.332,4,1.022,5,0.833,6,0.477,8,2.262,51,0.683,81,0.53,82,0.72,84,1.916,119,0.718,138,0.633,139,1.751,141,0.443,143,1.851,144,1.241,147,0.536,157,1.59,170,0.367,172,2.211,179,2.028,189,2.289,190,1.124,191,2.817,194,3.009,235,1.833,242,6.542,243,4.424,249,3.178,251,0.594,252,1.128,255,1.943,261,1.649,264,1.538,276,1.648,296,0.668,324,0.433,335,1.943,356,3.178,367,1.968,370,1.968,375,2.021,396,2.142,403,1.968,405,2.195,411,1.558,426,3.184,431,0.76,436,0.485,450,0.561,467,3.339,468,3.169,470,3.009,472,3.877,477,4.322,478,3.169,480,5.841,481,2.086,599,1.872,600,1.751,605,0.765,618,2.736,638,2.211,646,2.289,657,2.142,661,3.169,1179,4.638,1489,2.477,1545,1.918,1707,2.142,1756,2.92,1971,5.124,2301,2.211,2305,2.738,2952,2.376,2954,2.078,3206,3.169,3208,2.738,3215,3.169,3487,2.477,3503,2.376,3515,2.078,3590,3.169,3639,5.693,3653,2.92,3720,2.211,4021,1.829,4256,2.92,4558,2.211,4675,2.738,4695,2.92,4900,2.92,5164,2.92,5220,2.92,5753,3.567,5754,3.567,5755,7.417,5756,3.567,5757,5.454,5758,3.913,5759,5.454,5760,5.454,5761,3.567,5762,3.567,5763,3.567,5764,3.913,5765,3.567,5766,3.567,5767,3.567,5768,3.567,5769,7.992,5770,3.567,5771,3.567,5772,3.913,5773,3.567,5774,3.913]],["title/6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定",[5775,4.473]],["body/6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定",[0,0.322,4,1.02,5,0.829,6,0.441,8,1.469,51,0.679,81,0.528,82,0.716,84,1.908,118,1.494,119,0.688,138,0.519,139,1.739,141,0.44,144,1.232,147,0.532,157,1.585,170,0.365,172,2.196,179,2.02,189,2.273,190,1.122,191,2.807,194,2.993,215,1.838,235,1.823,242,6.522,243,4.412,249,3.162,251,0.59,252,1.121,255,1.93,261,1.641,264,1.531,276,1.637,296,0.664,324,0.43,335,1.93,356,3.162,367,1.954,370,1.954,375,2.007,396,2.127,403,1.963,405,2.19,411,1.548,426,3.17,431,0.755,436,0.482,450,0.557,468,3.147,470,2.993,472,3.869,477,4.307,478,3.147,480,5.599,481,1.93,599,1.86,600,1.739,605,0.76,618,2.722,638,2.196,657,2.127,661,3.147,712,2.273,979,1.482,1179,4.629,1489,2.46,1545,1.905,1707,2.127,1756,2.9,1971,4.956,2301,2.196,2305,2.719,2952,2.36,2954,2.065,3206,3.147,3208,2.719,3215,3.147,3487,2.46,3503,2.36,3515,2.065,3590,3.147,3639,5.673,3653,2.9,3720,2.196,4021,1.817,4256,2.9,4558,2.196,4675,2.719,4695,2.9,4900,2.9,5164,2.9,5220,2.9,5285,3.316,5753,3.543,5754,3.543,5755,6.595,5756,3.543,5757,5.426,5759,5.426,5760,5.426,5761,3.543,5762,3.543,5763,3.543,5765,3.543,5766,3.543,5767,3.543,5768,3.543,5769,7.391,5770,3.543,5771,3.543,5773,3.543,5776,3.887,5777,3.887,5778,3.887,5779,3.887,5780,3.887,5781,3.887,5782,3.887,5783,3.887,5784,3.887,5785,3.887,5786,3.887,5787,5.953,5788,3.887,5789,3.887,5790,3.887,5791,3.887,5792,3.887,5793,3.887,5794,3.887,5795,3.887,5796,3.887,5797,3.887,5798,3.887,5799,3.887]],["title/6.语言特性/6.9.元数据/6.9.元数据.html",[]],["body/6.语言特性/6.9.元数据/6.9.元数据.html",[0,0.336,4,0.658,5,1.008,6,0.394,51,0.679,81,0.284,82,0.468,119,0.29,138,0.339,141,0.991,143,4.539,144,1.232,146,2.831,147,0.99,151,2.196,160,1.669,169,1.113,170,0.365,173,1.637,179,2.763,184,2.007,185,2.46,186,1.346,190,0.675,197,2.128,202,1.905,234,3.117,235,2.216,241,2.196,247,2.127,249,2.065,251,0.59,252,1.121,260,2.273,261,1.071,264,0.823,284,2.143,289,1.388,292,2.744,296,0.664,324,0.43,326,2.196,329,1.86,343,2.065,344,2.9,354,2.015,367,1.954,373,1.954,386,5.132,396,2.127,403,1.267,405,0.887,411,1.548,427,3.258,431,1.406,433,2.712,434,3.162,436,0.482,443,2.46,444,6.063,447,2.196,448,4.798,449,4.798,450,1.037,452,3.147,462,2.127,472,3.774,481,0.781,599,1.86,600,1.739,605,0.76,606,0.908,607,1.025,608,1.078,609,1.136,610,1.259,618,1.777,630,1.739,639,2.46,641,1.703,643,1.758,742,4.442,786,2.815,788,2.007,797,2.625,854,2.577,867,1.576,893,3.96,1056,4.579,1080,2.46,1212,2.804,1581,4.821,1661,1.399,1662,1.445,1663,1.548,1664,1.606,1665,1.777,1666,1.817,1748,2.035,2914,2.46,2915,2.127,3209,4.821,3480,2.36,3481,2.46,3484,null,3635,2.196,4132,2.719,4263,3.768,4503,3.768,4661,2.9,4718,6.05,4999,4.614,5202,5.08,5248,3.147,5249,3.147,5250,5.398,5309,6.566,5800,6.595,5801,5.859,5802,3.543,5803,3.543,5804,3.543,5805,3.887,5806,3.887,5807,3.543,5808,3.887,5809,3.543]],["title/6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据",[5810,4.473]],["body/6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据",[0,0.328,4,0.646,5,0.992,6,0.388,51,0.662,81,0.277,82,0.457,119,0.283,138,0.331,141,0.98,144,1.203,146,2.593,147,0.975,151,2.144,160,1.629,169,1.087,170,0.356,173,1.597,179,2.742,185,2.401,186,1.313,190,0.662,197,2.096,202,1.86,215,4.5,224,1.959,235,2.183,241,2.144,247,2.076,249,2.015,251,0.575,252,1.094,260,2.219,261,1.045,264,0.803,284,2.103,289,1.355,292,2.71,296,0.648,324,0.42,326,2.144,329,1.815,343,2.015,344,2.83,354,1.978,367,1.908,373,1.908,386,5.067,396,2.076,403,1.244,405,0.866,411,1.511,427,3.198,431,1.385,433,2.672,434,3.104,436,0.47,444,6.041,447,2.144,448,4.726,449,4.726,450,1.021,452,3.072,462,2.076,472,3.745,481,0.763,599,1.815,600,1.697,605,0.741,606,0.886,607,1,608,1.052,609,1.108,610,1.229,618,1.734,630,1.697,639,2.401,641,1.662,643,1.716,742,2.83,749,3.458,786,2.763,788,1.959,797,2.12,854,2.516,867,1.538,893,3.9,941,4.732,955,3.458,1056,3.698,1080,2.401,1212,2.737,1581,3.072,1661,1.366,1662,1.41,1663,1.511,1664,1.567,1665,1.734,1666,1.774,1748,1.987,2122,3.072,2914,2.401,2915,2.076,2994,3.458,3209,4.732,3480,2.304,3481,2.401,3484,null,3635,2.144,4132,2.654,4263,3.698,4503,3.698,4661,2.83,4718,5.973,4999,2.94,5202,3.237,5248,3.072,5249,3.072,5250,5.317,5309,5.771,5800,6.496,5801,5.771,5802,3.458,5803,3.458,5804,3.458,5807,3.458,5809,3.458,5811,3.793,5812,3.793,5813,3.793,5814,3.793,5815,3.793,5816,3.793,5817,3.793,5818,3.793,5819,3.793,5820,3.793,5821,5.843,5822,3.793,5823,3.793,5824,3.793,5825,3.793,5826,3.793,5827,3.793,5828,3.793,5829,3.793,5830,3.793,5831,3.793,5832,3.793,5833,3.793,5834,3.793,5835,3.793,5836,3.793,5837,3.793,5838,3.793]],["title/8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html",[]],["body/8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html",[0,0.328,9,2.928,61,5.681,265,2.881,591,3.91,592,4.985,595,7.94,743,5.876,797,2.858,803,6.72,845,6.996,1596,6.104,4228,5.511,5839,7.875,5840,7.875,5841,7.875,5842,6.378,5843,6.378,5844,7.875,5845,7.179,5846,7.875,5847,7.875,5848,7.875,5849,7.875,5850,7.875,5851,7.179]],["title/8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除",[5852,4.473]],["body/8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除",[592,5.007,595,7.01,722,4.265,775,6.751,797,2.871,803,6.751,845,7.01,4228,5.536,5842,6.407,5843,6.407,5845,7.211,5851,7.211,5853,7.911,5854,7.911,5855,7.911,5856,7.911,5857,7.911,5858,7.911,5859,7.911,5860,7.911,5861,7.911,5862,7.911,5863,7.911,5864,7.911,5865,7.911,5866,7.911,5867,7.911,5868,7.911,5869,7.911,5870,7.911,5871,7.911,5872,7.911,5873,7.911,5874,7.911,5875,7.911,5876,7.911,5877,7.911,5878,7.911]],["title/8.编译器功能/8.3.编译器服务/8.3.1.概述.html",[]],["body/8.编译器功能/8.3.编译器服务/8.3.1.概述.html",[0,0.346,4,0.879,64,4.104,271,4.491,407,5.145,458,5.72,576,5.408,804,5.145,812,6.16,840,6.16,2116,6.781,5879,6.436,5880,7.947,5881,7.244,5882,6.436,5883,6.436,5884,6.436,5885,7.947,5886,7.947,5887,7.947,5888,7.947,5889,7.947,5890,5.561]],["title/8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述",[5891,4.473]],["body/8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述",[0,0.311,118,3.07,271,4.511,458,4.67,804,5.169,979,3.739,2136,5.759,5881,7.278,5890,5.586,5892,7.984,5893,7.984,5894,7.984,5895,7.984,5896,7.984,5897,7.984,5898,7.984,5899,7.984,5900,7.984,5901,7.984,5902,7.984,5903,7.984,5904,7.984,5905,7.984,5906,7.984,5907,7.984,5908,7.984,5909,7.984,5910,7.984,5911,7.984,5912,7.984,5913,7.984,5914,7.984,5915,7.984,5916,7.984,5917,7.984,5918,7.984]],["title/8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html",[]],["body/8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html",[0,0.341,4,0.802,5,1.01,6,0.46,7,3.2,43,2.696,51,0.886,64,2.621,81,0.529,119,0.541,138,0.632,141,0.575,147,0.695,165,2.158,170,0.681,190,0.575,197,1.493,247,5.562,249,2.696,251,0.77,264,1.074,290,2.346,292,2.455,296,0.867,297,2.277,324,0.561,385,2.52,403,1.966,405,2.319,407,4.696,431,0.986,436,0.629,450,0.727,462,2.778,465,2.117,481,1.021,605,0.992,606,1.186,607,1.339,608,1.408,609,1.483,610,1.644,786,3.431,804,4.696,829,2.489,906,5.683,919,2.969,1180,3.082,1221,3.082,1228,4.242,1232,5.402,1661,1.827,1662,1.887,1663,2.021,1664,2.097,1665,2.321,1666,2.373,1667,2.489,1668,2.621,1669,2.621,1975,4.099,2177,3.662,4172,2.969,4362,2.778,5149,5.874,5220,7.582,5250,3.787,5882,4.11,5890,3.552,5919,4.11,5920,4.627,5921,5.923,5922,6.613,5923,7.254,5924,4.627,5925,5.076]],["title/8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成",[5926,4.473]],["body/8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成",[0,0.334,4,0.792,5,0.998,6,0.456,7,3.169,43,2.65,51,0.871,81,0.523,119,0.535,138,0.625,141,0.565,147,0.683,165,2.121,170,0.672,190,0.565,197,1.467,247,5.529,249,2.65,251,0.757,264,1.056,290,2.306,292,2.425,296,0.852,297,2.259,324,0.552,403,1.951,405,2.306,407,4.638,431,0.969,436,0.618,450,0.715,462,2.73,465,2.081,481,1.003,605,0.975,606,1.166,607,1.316,608,1.384,609,1.458,610,1.616,786,3.389,804,3.229,829,2.446,906,5.657,919,2.918,961,4.547,1180,3.029,1221,3.029,1228,4.221,1232,5.36,1661,1.796,1662,1.855,1663,1.987,1664,2.061,1665,2.281,1666,2.332,1667,2.446,1668,2.576,1669,2.576,1975,4.049,2177,3.599,4172,2.918,4362,2.73,5020,4.257,5149,5.802,5220,5.346,5250,3.722,5890,3.491,5919,4.04,5920,4.547,5921,5.866,5922,6.531,5924,4.547,5927,4.988,5928,4.988,5929,4.988,5930,3.866,5931,4.988,5932,4.04,5933,4.988,5934,8.384,5935,9.163,5936,7.165,5937,4.988,5938,4.988,5939,4.988,5940,4.988,5941,4.988,5942,4.988,5943,3.722,5944,4.988,5945,4.988]],["title/8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html",[]],["body/8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html",[0,0.341,4,0.867,5,1.351,6,0.527,43,4.165,81,0.708,119,0.724,138,0.683,141,0.888,147,1.073,157,1.895,170,0.736,190,0.888,296,1.339,354,2.654,405,1.789,431,1.524,804,5.075,812,6.077,1180,4.761,5883,6.349,5919,6.349,5921,5.486,5946,5.85,5947,7.147,5948,7.147,5949,7.84]],["title/8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成",[5950,4.473]],["body/8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成",[0,0.33,4,0.855,5,1.339,6,0.523,35,4.371,43,4.109,81,0.702,119,0.718,138,0.674,141,0.877,147,1.059,157,1.88,170,0.726,190,0.877,296,1.321,405,1.765,431,1.503,812,5.996,1180,4.697,5919,6.264,5921,5.413,5930,5.996,5932,6.264,5946,5.772,5947,7.051,5948,7.051,5951,7.735,5952,7.735,5953,7.735,5954,7.735,5955,7.735,5956,7.735,5957,7.735,5958,7.735,5959,7.735]],["title/8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html",[]],["body/8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html",[0,0.347,4,0.685,5,0.57,6,0.337,51,0.923,60,1.579,66,1.481,81,0.452,82,0.294,84,1.079,119,0.395,138,0.461,141,0.702,146,1.326,147,0.334,157,1.21,170,0.496,179,1.476,185,1.544,190,0.464,191,1.831,235,1.253,251,0.802,264,1.119,265,0.892,282,1.008,283,2.164,284,1.903,286,1.427,289,1.888,296,0.416,297,0.601,324,0.585,350,0.813,356,2.809,405,0.934,408,1.975,426,1.069,436,0.655,437,1.975,450,0.758,453,1.66,470,1.227,471,1.296,481,0.823,501,1.707,605,0.8,606,0.956,607,1.079,608,1.135,609,1.196,610,1.326,641,1.069,650,2.894,786,3.532,788,1.26,797,0.885,798,1.759,823,1.975,828,1.115,876,1.427,906,6.357,935,1.707,1228,4.853,1232,6.592,1238,1.707,1266,1.617,1377,1.617,1419,1.975,1500,1.975,1525,1.89,1661,1.473,1662,1.522,1663,1.63,1664,1.691,1665,1.871,1666,1.913,1667,2.006,1668,2.114,1669,2.114,1670,2.394,1671,2.59,1672,2.714,1673,2.485,1674,2.714,1675,2.714,1676,2.714,1800,2.862,1955,1.975,2006,2.988,2110,1.82,2395,4.799,2396,5.921,2897,1.579,3589,1.82,3990,3.054,4021,1.14,4024,1.82,4036,1.975,4092,3.492,5884,1.975,5890,2.864,5921,3.7,5960,2.439,5961,2.223,5962,2.223,5963,2.223,5964,2.223,5965,2.223,5966,2.223,5967,2.223,5968,2.223,5969,2.223,5970,2.223,5971,2.223,5972,2.223,5973,2.439,5974,2.223,5975,2.223,5976,2.223,5977,2.223,5978,2.223,5979,2.223,5980,2.223,5981,2.223,5982,2.439,5983,2.439]],["title/8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成",[5984,4.473]],["body/8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成",[0,0.347,4,0.583,5,0.568,6,0.336,51,0.921,60,1.572,66,1.475,81,0.451,82,0.292,84,1.075,119,0.393,138,0.46,141,0.7,146,1.321,147,0.332,157,1.207,170,0.495,179,1.472,185,1.537,190,0.462,191,1.825,235,1.249,251,0.8,264,1.116,265,0.888,282,1.003,283,2.158,284,1.898,286,1.421,289,1.883,296,0.415,297,0.599,324,0.583,350,0.81,356,2.8,405,0.931,408,1.967,426,1.064,436,0.654,437,1.967,450,0.755,470,1.221,471,1.29,481,0.82,501,1.699,605,0.797,606,0.953,607,1.075,608,1.131,609,1.192,610,1.321,641,1.064,650,2.885,786,3.524,788,1.254,797,0.881,798,1.752,823,1.967,828,1.11,876,1.421,906,6.355,935,1.699,1228,4.852,1232,6.588,1238,1.699,1266,1.611,1377,1.611,1419,1.967,1500,1.967,1525,1.882,1661,1.468,1662,1.516,1663,1.624,1664,1.685,1665,1.865,1666,1.907,1667,1.999,1668,2.106,1669,2.106,1670,2.385,1671,2.581,1672,2.704,1673,2.477,1674,2.704,1675,2.704,1676,2.704,1800,2.855,1955,1.967,2006,1.372,2110,1.812,2395,4.086,2396,5.909,2897,1.572,3589,1.812,3990,3.043,4021,1.136,4024,1.812,4036,1.967,5890,2.854,5921,3.689,5961,2.214,5962,2.214,5963,2.214,5964,2.214,5965,2.214,5966,2.214,5967,2.214,5968,2.214,5969,2.214,5970,2.214,5971,2.214,5972,2.214,5974,2.214,5975,2.214,5976,2.214,5977,2.214,5978,2.214,5979,2.214,5980,2.214,5981,2.214,5985,2.429,5986,2.429,5987,2.429,5988,2.429,5989,2.429,5990,2.429,5991,2.429,5992,2.429,5993,2.429,5994,4.078,5995,2.429,5996,2.429,5997,2.429,5998,2.429]],["title/8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html",[]],["body/8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html",[0,0.341,4,0.998,5,1.256,6,0.594,51,1.221,81,0.729,82,1.085,119,0.673,138,0.786,141,0.792,147,0.957,170,0.846,190,0.792,247,5.465,251,1.06,255,3.47,296,1.194,324,0.773,431,1.359,436,1.118,450,1.293,786,4.266,804,4.526,1180,4.245,1223,2.665,1777,7.079,4172,4.089,5879,5.661,5999,5.965,6000,6.372,6001,6.372,6002,6.372,6003,6.372]],["title/8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成",[6004,4.473]],["body/8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成",[0,0.337,4,0.764,5,1.246,6,0.592,51,1.206,81,0.725,82,1.077,119,0.668,138,0.78,141,0.783,147,0.945,170,0.84,190,0.783,247,5.434,251,1.048,296,1.179,324,0.764,431,1.342,436,1.11,450,1.283,722,3.724,786,4.233,939,4.58,1180,4.194,1223,2.633,1777,7.056,4172,4.04,5349,5.894,5930,5.354,5932,5.594,6000,6.296,6001,6.296,6002,6.296,6003,6.296,6005,6.907,6006,6.907,6007,6.907,6008,6.907,6009,6.907,6010,6.907]],["title/8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html",[]],["body/8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html",[0,0.34,4,1.055,5,1.328,6,0.566,81,0.696,119,0.712,138,0.666,141,0.865,147,1.045,190,0.865,247,4.178,296,1.303,440,2.438,666,3.743,786,4.511,804,4.942,1180,4.636,1777,6.037,4172,4.465,5946,5.696,6011,6.514,6012,7.634,6013,6.959,6014,6.959,6015,6.959,6016,7.634,6017,6.959,6018,6.959,6019,6.959,6020,6.959]],["title/8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成",[6021,4.473]],["body/8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成",[0,0.321,4,0.837,5,1.321,6,0.564,81,0.692,119,0.708,138,0.66,141,0.858,147,1.036,190,0.858,247,4.142,296,1.292,440,2.417,666,3.71,786,4.487,939,5.018,1180,4.595,1777,6.004,4172,4.426,5930,5.865,5932,6.128,5943,5.646,5946,5.646,6013,6.898,6014,6.898,6015,6.898,6017,6.898,6018,6.898,6019,6.898,6020,6.898,6022,7.567,6023,7.567,6024,6.898,6025,7.567,6026,7.567,6027,7.567,6028,7.567,6029,7.567,6030,7.567,6031,7.567]],["title/8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html",[]],["body/8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html",[0,0.346,4,1.048,5,1.39,6,0.475,51,1.319,64,2.775,81,0.551,82,0.647,90,3.563,119,0.564,138,0.658,141,0.609,147,1.034,157,1.852,170,0.709,190,0.609,210,2.512,250,1.602,251,1.146,284,3.144,294,3.703,296,0.917,324,0.835,390,3.563,403,1.859,405,1.724,436,0.936,439,1.95,450,1.082,481,1.08,605,1.05,1179,2.512,1180,3.263,1228,4.048,1939,3.276,2177,8.156,2178,7.201,4172,3.143,5890,3.76,5921,6.111,6032,4.585,6033,9.1,6034,6.885,6035,4.898,6036,5.373,6037,4.898,6038,6.885,6039,4.898]],["title/8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成",[6040,4.473]],["body/8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成",[0,0.345,4,0.826,5,1.382,6,0.471,51,1.305,81,0.545,82,0.637,90,3.509,119,0.558,138,0.651,141,0.6,147,1.023,157,1.839,170,0.701,190,0.6,210,2.474,250,1.577,251,1.133,284,3.118,294,3.663,296,0.904,324,0.826,390,3.509,403,1.844,405,1.705,436,0.926,439,1.92,450,1.071,481,1.064,605,1.034,939,3.509,1179,2.474,1180,3.213,1228,3.816,1939,3.241,2177,8.132,2178,6.789,2223,4.824,4172,3.095,5890,3.703,5921,6.061,5930,4.101,5943,3.948,6024,4.824,6033,9.048,6034,6.811,6035,4.824,6037,4.824,6038,6.811,6039,4.824,6041,5.292,6042,5.292,6043,5.292,6044,5.292,6045,5.292,6046,5.292,6047,5.292,6048,5.292,6049,5.292,6050,5.292,6051,5.292]],["title/8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html",[]],["body/8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html",[0,0.347,4,1.114,5,0.689,6,0.548,51,0.864,81,0.361,82,1.004,84,2.802,119,0.369,138,0.431,141,0.561,147,0.677,165,2.103,170,0.464,190,0.561,246,2.151,250,2.123,251,1.08,282,2.043,287,2.213,298,2.006,300,1.839,324,0.547,436,0.613,439,1.795,450,0.709,481,0.994,605,0.967,606,1.156,607,1.304,608,1.372,609,1.445,610,1.602,618,4.746,666,4.475,674,5.137,1232,2.893,1359,5.766,1523,2.487,1661,1.78,1662,1.839,1663,1.97,1664,2.043,1665,2.261,1666,2.312,1667,2.425,2006,4.024,5946,3.69,6052,4.22,6053,7.606,6054,6.491,6055,6.491,6056,6.491,6057,4.946,6058,4.509,6059,4.946,6060,7.606,6061,4.509,6062,7.606,6063,4.509,6064,4.509,6065,4.509,6066,4.509,6067,7.606,6068,4.509,6069,4.509,6070,7.606,6071,4.509,6072,4.509,6073,4.509,6074,4.509,6075,4.509,6076,4.509,6077,4.509,6078,4.509]],["title/8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务",[6079,4.473]],["body/8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务",[0,0.34,4,0.914,5,0.677,6,0.545,51,0.849,81,0.355,82,0.995,84,2.789,119,0.363,138,0.424,141,0.551,147,0.666,170,0.456,190,0.551,246,2.125,250,2.097,251,0.738,282,2.009,287,2.176,298,1.972,300,1.808,324,0.538,436,0.603,439,1.765,450,0.697,481,0.978,522,3.309,605,0.95,606,1.136,607,1.282,608,1.349,609,1.421,610,1.575,618,4.722,666,4.44,674,3.508,986,4.433,1232,2.844,1359,3.938,1523,2.446,1661,1.751,1662,1.808,1663,1.937,1664,2.009,1665,2.223,1666,2.274,1667,2.384,2006,3.975,5285,4.15,5946,3.629,6053,7.534,6054,4.433,6055,6.412,6056,4.433,6058,4.433,6060,7.534,6061,4.433,6062,7.534,6063,4.433,6064,4.433,6065,4.433,6066,4.433,6067,7.534,6068,4.433,6069,4.433,6070,7.534,6071,4.433,6072,4.433,6073,4.433,6074,4.433,6075,4.433,6076,4.433,6077,4.433,6078,4.433,6080,4.863,6081,4.863,6082,4.863,6083,4.863,6084,4.863,6085,4.863,6086,4.863,6087,4.863,6088,4.863,6089,4.863,6090,4.863,6091,4.863,6092,4.863,6093,4.863,6094,4.863,6095,4.863,6096,4.863,6097,4.863,6098,4.863,6099,4.863,6100,4.863,6101,4.863,6102,4.863,6103,4.863,6104,4.863,6105,4.863,6106,4.863,6107,4.863,6108,4.863,6109,4.863,6110,4.863,6111,4.863,6112,4.863,6113,4.863,6114,4.863]],["title/8.编译器功能/8.4.资源/8.4.1.嵌入资源.html",[]],["body/8.编译器功能/8.4.资源/8.4.1.嵌入资源.html",[0,0.319,6,0.509,2110,8.042,6115,9.356,6116,8.528]],["title/8.编译器功能/8.4.资源/8.4.1.嵌入资源.html#8-4-1-嵌入资源",[6117,4.473]],["body/8.编译器功能/8.4.资源/8.4.1.嵌入资源.html#8-4-1-嵌入资源",[6,0.512,2110,8.067,6116,8.574,6118,9.406,6119,9.406,6120,9.406]],["title/8.编译器功能/8.3.编译器服务/8.3.编译器服务.html",[]],["body/8.编译器功能/8.3.编译器服务/8.3.编译器服务.html",[0,0.341,744,7.577,5879,7.19,5882,7.19,5883,7.19,5884,7.19,5999,7.577,6011,7.577,6032,7.577,6052,7.577]],["title/8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务",[6121,4.473]],["body/8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务",[1750,6.917,5879,7.227,5882,7.227,5883,7.227,5884,7.227,5999,7.615,6011,7.615,6032,7.615,6052,7.615,6122,8.924,6123,8.924,6124,8.924,6125,8.924,6126,8.924,6127,8.924,6128,8.924,6129,8.924]],["title/8.编译器功能/8.4.资源/8.4.2.检索文本资源.html",[]],["body/8.编译器功能/8.4.资源/8.4.2.检索文本资源.html",[0,0.336,5,1.422,6,0.464,81,0.623,119,0.637,138,0.744,141,0.967,147,1.168,170,0.8,190,0.967,431,1.658,2112,6.909,3375,6.909,6130,8.531,6131,6.365,6132,8.267,6133,7.777]],["title/8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源",[6134,4.473]],["body/8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源",[0,0.329,5,1.409,6,0.457,81,0.614,119,0.627,138,0.733,141,0.953,147,1.151,170,0.789,190,0.953,431,1.634,2112,6.809,3375,6.809,6131,6.273,6132,8.195,6133,7.664,6135,8.407,6136,7.664,6137,8.407,6138,8.407,6139,8.407,6140,8.407]],["title/8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html",[]],["body/8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html",[0,0.335,5,1.397,6,0.451,81,0.605,82,0.997,119,0.618,138,0.723,141,0.939,147,1.134,170,0.778,190,0.939,250,2.47,324,0.917,431,1.611,1277,6.711,1283,5.799,6131,6.184,6132,6.711,6141,8.287,6142,9.145,6143,7.555,6144,7.555,6145,7.555]],["title/8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源",[6146,4.473]],["body/8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源",[0,0.334,5,1.385,6,0.444,81,0.596,82,0.983,119,0.61,138,0.712,141,0.926,147,1.118,170,0.767,190,0.926,250,2.436,324,0.904,431,1.588,1277,6.617,1283,5.717,6131,6.097,6132,6.617,6136,7.448,6142,7.448,6143,7.448,6144,7.448,6145,7.448,6147,8.171,6148,8.171,6149,8.171,6150,8.171]],["title/8.编译器功能/8.4.资源/8.4.4.实现细节.html",[]],["body/8.编译器功能/8.4.资源/8.4.4.实现细节.html",[0,0.333,4,1.153,9,3.285,88,3.813,374,4.501,666,4.331,694,4.278,6131,7.777,6151,8.834,6152,8.834,6153,8.834]],["title/8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节",[6154,4.473]],["body/8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节",[9,3.301,88,3.824,374,4.524,666,4.353,694,4.3,6131,7.8,6155,8.879,6156,8.879,6157,8.879,6158,8.879,6159,8.879,6160,8.879,6161,8.879,6162,10.454,6163,8.879]],["title/8.编译器功能/8.4.资源/8.4.资源.html",[]],["body/8.编译器功能/8.4.资源/8.4.资源.html",[0,0.306,4,1.052,64,4.911,745,7.701]],["title/8.编译器功能/8.4.资源/8.4.资源.html#8-4-资源",[6164,4.473]],["body/8.编译器功能/8.4.资源/8.4.资源.html#8-4-资源",[4,1.057,6165,9.561,6166,9.561,6167,9.561]],["title/8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html",[]],["body/8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html",[0,0.345,2,6.196,4,0.676,91,3.452,123,3.954,143,2.889,147,0.836,157,1.194,175,4.587,235,2.527,271,3.452,291,3.343,292,3.645,325,4.156,334,5.952,377,6.971,426,2.677,591,4.096,604,6.681,618,2.793,651,4.557,906,4.963,932,5.914,2720,4.557,3185,6.156,3374,4.946,3484,null,3577,4.946,4092,5.212,4172,3.573,4503,5.914,5125,4.274,6168,5.568,6169,6.108,6170,6.108,6171,6.108,6172,6.108,6173,8.517,6174,5.568,6175,7.521,6176,5.568,6177,5.568,6178,6.108,6179,7.521,6180,5.568,6181,6.108,6182,5.568,6183,5.568,6184,6.108,6185,5.568,6186,6.108,6187,5.568]],["title/8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构",[2235,2.643,6168,2.643]],["body/8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构",[2,6.207,118,3.599,147,0.839,157,1.198,215,2.899,235,2.533,271,3.464,291,3.355,292,3.168,426,2.686,591,4.106,604,6.697,618,2.802,714,4.574,906,4.972,932,5.924,939,4.065,3374,4.964,3484,null,4172,3.585,4503,5.924,5125,4.289,6173,8.532,6174,5.587,6175,7.539,6176,5.587,6177,5.587,6180,5.587,6182,5.587,6183,5.587,6185,5.587,6187,5.587,6188,6.129,6189,6.129,6190,6.129,6191,6.129,6192,6.129,6193,6.129,6194,6.129,6195,6.129,6196,6.129,6197,6.129,6198,6.129,6199,6.129,6200,6.129,6201,6.129,6202,6.129,6203,6.129,6204,6.129,6205,6.129,6206,6.129,6207,6.129,6208,6.129,6209,6.129,6210,6.129,6211,6.129,6212,6.129,6213,6.129,6214,6.129,6215,6.129,6216,8.27,6217,6.129,6218,6.129,6219,6.129,6220,6.129,6221,6.129,6222,6.129,6223,6.129,6224,6.129,6225,6.129,6226,6.129,6227,6.129,6228,6.129,6229,6.129,6230,6.129,6231,6.129,6232,6.129,6233,6.129,6234,6.129,6235,6.129,6236,6.129,6237,6.129,6238,6.129,6239,6.129,6240,6.129,6241,6.129,6242,6.129]],["title/8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html",[]],["body/8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html",[0,0.334,4,1.072,5,1.351,6,0.426,64,4.049,81,0.572,82,1.167,119,0.585,138,0.683,141,0.888,147,1.073,170,0.736,190,0.888,324,0.867,350,2.615,405,1.789,431,1.524,436,0.972,450,1.124,746,6.69,935,8.168,4172,4.585,6179,7.147,6243,7.84,6244,7.147,6245,7.147,6246,7.147]],["title/8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息",[6247,4.473]],["body/8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息",[0,0.327,4,0.855,5,1.339,6,0.421,64,3.995,81,0.565,82,1.157,119,0.577,138,0.674,141,0.877,147,1.059,170,0.726,190,0.877,324,0.855,350,2.58,405,1.765,431,1.503,436,0.959,450,1.109,935,7.879,1268,4.446,2944,6.264,4172,4.524,5943,5.772,6244,7.051,6245,7.051,6246,7.051,6248,7.735,6249,7.735,6250,7.735,6251,7.735,6252,7.735,6253,7.735,6254,7.735,6255,7.735]],["title/8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html",[]],["body/8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html",[0,0.344,4,1.107,6,0.449,81,0.602,88,2.234,119,0.616,138,0.719,141,0.935,142,3.2,157,1.194,170,0.573,190,0.935,204,5.28,210,2.856,267,6.156,324,0.676,374,3.112,436,0.757,595,4.05,618,3.772,639,5.222,694,2.958,742,4.557,747,5.212,793,8.035,868,6.971,906,5.848,1490,6.681,1971,4.261,4094,6.112,4690,6.156,6256,6.108,6257,6.108,6258,8.517,6259,8.517,6260,5.568,6261,5.568,6262,7.521,6263,5.568,6264,5.568]],["title/8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪",[6265,4.473]],["body/8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪",[0,0.337,4,1.096,6,0.441,81,0.592,88,2.181,119,0.606,138,0.708,141,0.92,142,3.148,157,1.165,170,0.559,190,0.92,204,5.214,210,2.787,267,6.056,324,0.659,436,0.739,595,3.953,618,3.711,639,5.137,793,7.978,868,6.885,906,5.811,1490,6.572,1971,4.192,2944,4.828,4094,5.794,4690,6.056,6258,7.398,6259,8.412,6260,5.434,6261,5.434,6262,7.398,6263,5.434,6264,5.434,6266,5.962,6267,5.962,6268,5.962,6269,5.962,6270,5.962,6271,5.962,6272,5.962,6273,5.962,6274,5.962,6275,5.962,6276,5.962,6277,5.962,6278,5.962,6279,5.962,6280,5.962,6281,5.962,6282,5.962,6283,5.962,6284,5.962,6285,5.962,6286,5.962,6287,5.962,6288,5.962]],["title/9.宏/9.1.宏上下文/9.1.宏上下文.html",[]],["body/9.宏/9.1.宏上下文/9.1.宏上下文.html",[0,0.344,4,0.939,292,3.445,797,3.956,6289,7.244,6290,5.155,6291,7.739,6292,6.875,6293,7.739,6294,6.875,6295,8.489,6296,7.739]],["title/9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文",[6297,4.473]],["body/9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文",[4,0.943,118,3.28,292,3.455,797,3.704,1784,7.28,6290,5.181,6291,7.777,6292,6.909,6293,7.777,6294,6.909,6296,7.777,6298,8.531,6299,8.531,6300,7.777,6301,8.531,6302,8.531,6303,8.531,6304,8.531,6305,8.531,6306,8.531,6307,8.531,6308,8.531,6309,8.531,6310,8.531]],["title/9.宏/9.2.参数/9.2.1.ExprOf.html",[]],["body/9.宏/9.2.参数/9.2.1.ExprOf.html",[0,0.333,5,1.393,6,0.544,51,1.226,81,0.512,119,0.524,138,0.612,141,0.795,142,2.722,147,1.238,170,0.658,190,1.025,251,1.065,264,1.914,265,2.567,289,2.507,296,1.198,297,1.73,324,0.776,403,1.925,405,1.602,436,0.87,440,2.888,450,1.006,481,1.411,605,1.372,606,1.64,607,1.851,608,1.947,609,2.051,1775,4.548,4099,3.728,6311,6.398,6312,7.019,6313,6.398,6314,7.019,6315,10.206,6316,8.243,6317,7.323,6318,7.019,6319,7.019,6320,7.019,6321,6.398]],["title/9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf",[6311,4.077]],["body/9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf",[0,0.331,5,1.38,6,0.539,51,1.201,81,0.502,119,0.513,138,0.6,141,0.78,142,2.668,147,1.222,170,0.645,190,1.012,251,1.044,264,1.89,265,2.517,289,2.457,296,1.175,297,1.696,324,0.761,403,1.465,405,1.57,436,0.853,440,2.851,450,0.986,481,1.383,605,1.345,606,1.608,607,1.814,608,1.908,609,2.01,979,2.623,1775,4.489,4099,3.655,6313,6.272,6315,10.151,6316,8.138,6317,7.229,6321,6.272,6322,6.88,6323,6.88,6324,6.88,6325,6.88,6326,6.88,6327,6.88,6328,6.88,6329,6.88,6330,6.88,6331,6.88,6332,6.88]],["title/9.宏/9.2.参数/9.2.2.常数表达式.html",[]],["body/9.宏/9.2.参数/9.2.2.常数表达式.html",[0,0.335,5,1.3,6,0.508,51,1.288,81,0.538,119,0.55,138,0.643,141,0.836,147,1.278,170,0.692,190,1.058,251,1.119,265,3.414,292,2.496,296,1.259,297,1.818,300,2.742,324,0.816,403,1.57,405,1.683,431,2.092,436,0.914,439,3.387,440,2.355,450,1.057,481,1.483,605,1.441,606,1.723,1223,3.559,1939,3.199,1971,4.82,1972,3.076,4999,5.716,6333,7.375,6334,7.559,6335,6.723]],["title/9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式",[6336,4.473]],["body/9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式",[0,0.341,5,1.283,6,0.501,51,1.261,81,0.527,119,0.539,138,0.63,141,0.818,147,1.261,170,0.678,190,1.044,251,1.096,265,3.369,292,2.445,296,1.233,297,1.781,300,2.685,324,0.799,403,1.538,405,1.648,431,2.076,436,0.895,439,3.342,440,2.306,450,1.035,481,1.452,605,1.412,606,1.688,1223,3.512,1939,3.133,1971,4.757,1972,3.012,6334,7.459,6335,6.584,6337,7.222,6338,7.222]],["title/9.宏/9.2.参数/9.2.3.其它的参数.html",[]],["body/9.宏/9.2.参数/9.2.3.其它的参数.html",[0,0.316,5,1.332,6,0.417,51,1.339,81,0.56,88,2.805,119,0.572,138,0.668,141,0.869,147,1.309,170,0.719,190,1.084,251,1.163,265,3.499,289,2.738,292,2.595,296,1.309,297,1.89,324,0.848,354,3.237,431,1.49,436,0.951,440,2.449,450,1.099,481,1.542,605,1.499,606,1.792,607,2.022,1223,2.923,1775,4.81,2070,4.689,2071,5.721,4099,4.073,6339,7.667,6340,7.745,6341,8.719]],["title/9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数",[6342,4.473]],["body/9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数",[0,0.337,5,1.307,6,0.405,51,1.299,81,0.543,88,2.721,119,0.555,138,0.648,141,0.843,147,1.285,170,0.698,190,1.063,251,1.128,265,3.433,289,2.656,292,2.518,296,1.27,297,1.834,324,0.823,354,2.518,431,1.446,436,0.922,440,2.375,450,1.066,481,1.496,605,1.454,606,1.738,607,1.962,1223,2.836,1775,4.719,2070,4.601,2071,5.55,4099,3.951,6340,7.599,6341,8.554,6343,7.438,6344,7.438]],["title/9.宏/9.2.参数/9.2.参数.html",[]],["body/9.宏/9.2.参数/9.2.参数.html",[0,0.339,5,1.283,6,0.393,51,1.261,81,0.672,82,1.108,119,0.539,138,0.63,141,0.818,147,1.261,170,0.678,190,1.044,250,2.153,251,1.096,265,3.369,284,2.6,289,2.579,296,1.233,297,1.781,324,0.799,350,3.679,431,1.404,436,0.895,445,4.893,450,1.035,481,1.452,605,1.412,606,1.688,1223,2.754,1775,5.1,2070,3.541,4099,3.836,6345,7.222,6346,7.222,6347,6.584,6348,6.584,6349,7.222]],["title/9.宏/9.2.参数/9.2.参数.html#9-2-参数",[6350,4.473]],["body/9.宏/9.2.参数/9.2.参数.html#9-2-参数",[0,0.338,5,1.266,6,0.385,51,1.236,81,0.663,82,1.094,119,0.528,138,0.617,141,0.802,147,1.244,170,0.664,190,1.03,250,2.109,251,1.073,265,3.325,284,2.547,289,2.527,296,1.208,297,1.744,324,0.783,350,3.656,431,1.375,436,0.877,445,4.829,450,1.014,481,1.423,605,1.383,606,1.653,1223,2.698,1775,5.051,2070,3.469,4099,3.759,6347,6.45,6348,6.45,6351,7.076,6352,7.076,6353,7.076,6354,7.076,6355,7.076,6356,7.076,6357,7.076,6358,7.076]],["title/9.宏/9.3.具体化/9.3.1.表达式具体化.html",[]],["body/9.宏/9.3.具体化/9.3.1.表达式具体化.html",[0,0.348,4,0.783,6,0.494,82,0.852,84,1.866,190,0.802,235,3.076,301,3.998,354,2.395,1775,4.571,2070,5.595,2178,5.104,2958,4.138,6359,7.076,6360,7.076,6361,7.076,6362,6.45,6363,6.45,6364,6.45,6365,6.45,6366,6.45,6367,7.076,6368,6.45,6369,6.45,6370,6.45,6371,6.45,6372,6.45]],["title/9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化",[6373,4.473]],["body/9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化",[0,0.325,6,0.496,82,0.855,84,1.874,190,0.805,235,3.082,301,4.015,354,2.405,939,4.711,979,2.709,1775,4.583,2070,5.6,2124,6.476,2178,5.125,2958,4.155,5943,5.301,6362,6.476,6363,6.476,6364,6.476,6365,6.476,6366,6.476,6368,6.476,6369,6.476,6370,6.476,6371,6.476,6372,6.476,6374,7.104,6375,7.104,6376,7.104,6377,7.104,6378,7.104,6379,7.104,6380,7.104,6381,7.104,6382,7.104,6383,7.104,6384,7.104,6385,7.104,6386,7.104,6387,7.104,6388,7.104,6389,7.104,6390,7.104,6391,7.104,6392,7.104,6393,7.104,6394,7.104,6395,7.104,6396,7.104,6397,7.104]],["title/9.宏/9.3.具体化/9.3.2.类型具体化.html",[]],["body/9.宏/9.3.具体化/9.3.2.类型具体化.html",[0,0.342,82,0.935,142,3.74,157,2.277,265,4.262,297,1.916,5214,6.292,6398,7.77,6399,7.083,6400,7.083,6401,6.63,6402,7.083,6403,7.083,6404,7.083,6405,7.083,6406,7.083,6407,7.083,6408,7.083,6409,7.083]],["title/9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化",[6410,4.473]],["body/9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化",[0,0.338,82,0.939,118,3.001,142,3.751,157,2.248,265,4.266,297,1.924,5214,6.32,6399,7.115,6400,7.115,6402,7.115,6403,7.115,6404,7.115,6405,7.115,6406,7.115,6407,7.115,6408,7.115,6409,7.115,6411,7.805,6412,7.805,6413,7.805,6414,7.805,6415,7.805]],["title/9.宏/9.3.具体化/9.3.3.类具体化.html",[]],["body/9.宏/9.3.具体化/9.3.3.类具体化.html",[0,0.339,5,1.243,6,0.374,51,1.201,81,0.502,82,1.074,84,2.354,88,3.265,119,0.513,138,0.6,141,1.012,147,1.222,170,0.645,190,1.188,191,2.382,251,1.044,265,3.836,296,1.692,297,1.696,324,0.761,405,1.57,431,1.337,436,0.853,448,5.92,450,0.986,481,1.383,605,1.345,606,1.608,607,1.814,608,1.908,609,2.01,610,2.229,4555,5.134,6416,6.88,6417,6.272,6418,8.138,6419,8.138,6420,6.88,6421,6.272,6422,6.272,6423,6.272,6424,6.272,6425,6.88]],["title/9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化",[6426,4.473]],["body/9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化",[0,0.342,5,1.209,6,0.359,51,1.151,81,0.481,82,1.045,84,2.29,88,3.176,119,0.492,138,0.575,141,0.984,147,1.188,170,0.619,190,1.169,191,2.283,251,1,265,3.774,296,1.658,297,1.626,324,0.729,405,1.505,431,1.281,436,0.817,448,5.758,450,0.945,481,1.326,605,1.289,606,1.541,607,1.739,608,1.829,609,1.927,610,2.136,4555,4.92,6417,6.01,6418,7.915,6419,7.915,6421,6.01,6422,6.01,6423,6.01,6424,6.01,6427,6.593,6428,6.593,6429,6.593,6430,6.593,6431,6.593,6432,6.593,6433,6.593,6434,6.593,6435,6.593]],["title/9.宏/9.3.具体化/9.3.具体化.html",[]],["body/9.宏/9.3.具体化/9.3.具体化.html",[4,1.199,240,7.33,265,3.459,2070,5.317]],["title/9.宏/9.3.具体化/9.3.具体化.html#9-3-具体化",[6436,4.473]],["body/9.宏/9.3.具体化/9.3.具体化.html#9-3-具体化",[265,3.478,2070,4.662,5682,8.668,6437,9.509,6438,9.509]],["title/9.宏/9.4.工具/9.4.工具.html",[]],["body/9.宏/9.4.工具/9.4.工具.html",[0,0.346,4,1.075,120,6.104,122,4.378,157,1.901,2070,3.861,5424,5.876,5425,6.72,6401,9.003,6439,7.179,6440,7.179,6441,7.179,6442,7.179,6443,7.875,6444,9.617,6445,7.875,6446,7.179,6447,7.179]],["title/9.宏/9.4.工具/9.4.工具.html#9-4-工具",[6448,4.473]],["body/9.宏/9.4.工具/9.4.工具.html#9-4-工具",[118,3.042,157,1.546,722,5.949,979,3.016,1033,5.903,1735,5.903,2070,3.879,5424,5.903,6401,8.321,6439,7.211,6440,7.211,6441,7.211,6442,7.211,6444,7.211,6446,7.211,6447,7.211,6449,7.911,6450,7.911,6451,7.911,6452,10.572,6453,7.911,6454,7.911,6455,7.911,6456,7.911,6457,7.911,6458,7.911,6459,7.911,6460,7.911,6461,7.911,6462,7.911,6463,7.911,6464,7.911,6465,7.911,6466,7.911,6467,7.911,6468,7.911]],["title/9.宏/9.5.类型构建/9.5.1.枚举构建.html",[]],["body/9.宏/9.5.类型构建/9.5.1.枚举构建.html",[0,0.34,2,3.416,5,1.189,6,0.399,51,0.899,81,0.535,82,1.119,119,0.547,138,0.639,141,0.831,142,1.998,147,1.168,170,0.483,173,3.594,179,1.438,186,1.783,190,1.054,235,2.245,243,3.508,246,2.809,251,0.781,265,2.681,284,2.639,287,2.305,289,2.618,292,3.147,296,1.252,297,1.807,298,2.089,299,3.013,324,0.57,354,1.743,403,1.817,436,0.639,450,0.738,481,1.036,582,4.142,605,1.007,606,1.204,607,1.358,608,1.429,609,1.505,610,1.669,1223,2.795,1238,3.604,1266,3.416,1661,1.854,1662,1.915,1663,2.051,1664,2.128,1665,2.355,1666,2.408,1667,2.525,1668,2.66,1669,2.66,1670,3.013,1671,3.26,1672,3.416,1673,3.128,1674,3.416,1675,3.416,1676,3.416,1677,3.843,1678,4.171,1775,4.292,1777,3.26,1971,3.786,4099,2.736,4503,3.26,6290,3.128,6469,5.151,6470,5.936,6471,4.695,6472,4.695,6473,6.682,6474,6.682,6475,4.695,6476,4.695,6477,4.695,6478,4.695,6479,6.682,6480,4.695,6481,4.695,6482,4.171,6483,4.695,6484,4.695,6485,4.695,6486,4.695,6487,4.695,6488,4.695]],["title/9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建",[6489,4.473]],["body/9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建",[0,0.343,2,3.234,5,1.153,6,0.383,51,0.852,81,0.514,82,1.091,118,2.71,119,0.526,138,0.615,141,0.799,142,1.891,147,1.133,170,0.458,173,3.486,179,1.361,186,1.688,190,1.028,235,2.159,243,3.373,246,2.74,251,0.74,265,2.578,284,2.537,287,2.182,289,2.517,292,2.802,296,1.204,297,1.738,298,1.978,299,2.852,324,0.539,354,1.651,403,1.762,436,0.605,450,0.699,481,0.981,582,3.983,605,0.953,606,1.14,607,1.286,608,1.353,609,1.425,610,1.58,979,1.859,1223,2.687,1238,3.412,1266,3.234,1661,1.755,1662,1.813,1663,1.942,1664,2.015,1665,2.23,1666,2.28,1667,2.391,1668,2.519,1669,2.519,1670,2.852,1671,3.087,1672,3.234,1673,2.961,1674,3.234,1675,3.234,1676,3.234,1677,3.639,1678,3.949,1775,4.163,1777,3.087,1971,3.64,4099,2.591,4503,3.087,6290,2.961,6470,3.949,6471,4.445,6472,4.445,6473,6.425,6474,6.425,6475,4.445,6476,4.445,6477,4.445,6478,4.445,6479,6.425,6480,4.445,6481,4.445,6482,3.949,6483,4.445,6484,4.445,6485,4.445,6486,4.445,6487,4.445,6488,4.445,6490,4.877,6491,4.877,6492,4.877,6493,4.877,6494,4.877,6495,4.877,6496,4.877,6497,4.877,6498,4.877,6499,4.877,6500,4.877]],["title/9.宏/9.5.类型构建/9.5.2.@autoBuild.html",[]],["body/9.宏/9.5.类型构建/9.5.2.@autoBuild.html",[0,0.341,5,1.349,6,0.426,51,0.987,81,0.571,119,0.584,138,0.682,141,1.017,142,3.035,147,1.228,170,0.734,190,1.017,251,0.857,265,2.862,285,3.394,288,2.88,289,2.794,291,4.282,292,2.648,296,1.532,297,1.929,324,1.071,354,2.648,431,1.521,436,0.701,450,0.81,481,1.136,582,5.071,605,1.529,606,1.321,607,1.491,608,1.568,609,1.651,610,1.831,761,5.951,1661,2.035,1662,2.102,1663,2.251,1664,2.335,1665,2.584,1666,2.643,1667,2.771,1668,2.919,1669,2.919,1670,3.306,3750,4.041,4099,3.002,5643,6.696,6290,3.432,6501,5.152,6502,5.152,6503,8.829,6504,6.336,6505,8.18,6506,5.152,6507,5.152,6508,8.18,6509,7.267,6510,4.577]],["title/9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild",[6501,4.077]],["body/9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild",[0,0.341,5,1.325,6,0.414,51,0.947,81,0.555,119,0.567,138,0.663,141,0.995,142,2.949,147,1.202,170,0.713,190,0.995,251,0.823,265,2.781,285,3.298,288,2.763,289,2.715,291,4.161,292,2.573,296,1.499,297,1.874,324,1.052,354,2.573,431,1.477,436,0.672,450,0.777,481,1.09,544,4.392,582,4.96,605,1.486,606,1.267,607,1.43,608,1.504,609,1.585,610,1.757,761,5.821,1661,1.952,1662,2.016,1663,2.16,1664,2.241,1665,2.48,1666,2.536,1667,2.659,1668,2.801,1669,2.801,1670,3.172,3240,4.944,3750,3.926,4099,2.881,5643,6.55,6290,3.293,6502,4.944,6503,8.672,6504,6.157,6505,8.002,6506,4.944,6507,4.944,6508,8.002,6509,7.109,6511,5.423,6512,7.602,6513,5.423,6514,5.423,6515,5.423,6516,5.423,6517,5.423,6518,5.423,6519,5.423,6520,5.423]],["title/9.宏/9.5.类型构建/9.5.3.@genericBuild.html",[]],["body/9.宏/9.5.类型构建/9.5.3.@genericBuild.html",[0,0.339,4,0.893,5,1.237,6,0.371,51,1.192,81,0.498,82,0.972,91,2.638,119,0.51,138,0.595,141,1.185,147,1.216,170,0.641,173,1.966,190,1.007,243,4.251,246,2.684,251,1.036,256,3.627,265,1.707,289,3.526,292,2.311,296,1.166,297,1.683,298,2.769,324,0.755,350,2.692,403,0.994,405,1.558,431,1.327,436,0.846,439,1.694,450,0.978,481,1.373,582,4.562,605,1.334,606,1.595,607,1.801,608,1.894,609,1.995,610,2.212,821,3.483,1228,3.274,1415,3.055,1661,2.458,1662,2.539,1663,2.719,1664,2.821,1665,3.122,1666,3.192,1667,2.288,1668,2.411,2958,2.73,3660,3.737,4099,3.627,4999,3.618,6290,4.146,6334,5.529,6482,5.529,6504,5.529,6509,6.538,6521,4.255,6522,6.538,6523,7.359,6524,4.255,6525,6.224,6526,4.255,6527,9.001,6528,4.255,6529,3.983,6530,4.668,6531,4.255,6532,4.668,6533,4.255,6534,4.255,6535,4.668,6536,4.255,6537,4.255]],["title/9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild",[6521,4.077]],["body/9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild",[0,0.342,5,1.2,6,0.355,51,1.139,81,0.476,82,0.937,91,2.478,119,0.487,138,0.569,141,1.164,147,1.18,170,0.612,173,1.847,190,0.977,243,4.125,246,2.604,251,0.989,256,3.464,265,1.604,289,3.448,292,2.207,296,1.113,297,1.608,298,2.644,324,0.721,350,2.596,403,0.934,405,1.488,431,1.267,436,0.808,439,1.591,450,0.935,481,1.311,582,4.399,605,1.274,606,1.524,607,1.72,608,1.809,609,1.905,610,2.112,821,3.272,939,2.908,979,1.672,1228,3.157,1415,2.918,1625,3.552,1661,2.347,1662,2.425,1663,2.597,1664,2.694,1665,2.981,1666,3.049,1667,2.15,1668,2.265,2958,2.565,3660,3.569,4099,3.464,4241,3.742,6290,3.96,6334,5.281,6482,5.281,6504,5.281,6509,6.304,6522,6.304,6523,7.096,6524,3.998,6525,5.944,6526,3.998,6527,8.397,6528,3.998,6531,3.998,6533,3.998,6534,3.998,6536,3.998,6537,3.998,6538,4.386,6539,4.386,6540,4.386,6541,4.386,6542,4.386,6543,4.386,6544,4.386,6545,4.386,6546,4.386,6547,4.386,6548,4.386,6549,4.386,6550,4.386,6551,4.386,6552,4.386,6553,4.386,6554,4.386,6555,4.386,6556,4.386]],["title/9.宏/9.5.类型构建/9.5.类型构建.html",[]],["body/9.宏/9.5.类型构建/9.5.类型构建.html",[0,0.347,2,3.541,5,1.212,6,0.29,51,0.933,81,0.39,82,0.905,84,1.983,119,0.399,138,0.466,141,0.852,142,3.863,147,1.192,170,0.501,173,3.167,186,2.604,190,0.852,235,1.636,251,0.81,256,2.837,265,3.456,282,3.596,289,2.686,292,2.545,296,1.486,297,1.317,324,0.591,354,1.808,405,1.987,431,1.038,436,0.662,443,3.38,450,0.765,481,1.074,582,5.34,605,1.044,606,1.248,607,1.408,608,1.481,609,1.56,610,1.73,761,3.541,1661,1.922,1662,1.986,1663,2.127,1664,2.206,1665,2.442,1666,2.497,1667,2.618,1777,3.38,3428,4.868,4099,2.837,4503,3.38,4555,3.985,6289,4.557,6290,3.243,6292,7.049,6470,4.325,6557,4.868,6558,4.868,6559,6.855,6560,6.855,6561,4.868,6562,4.868,6563,4.868,6564,4.868,6565,5.34,6566,6.855,6567,4.868,6568,4.868]],["title/9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建",[6569,4.473]],["body/9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建",[0,0.335,2,3.446,5,1.027,6,0.283,51,0.908,81,0.379,82,0.888,84,1.945,118,2.837,119,0.388,138,0.453,141,0.836,142,3.824,147,1.174,170,0.488,173,3.107,186,2.554,190,0.836,235,1.592,251,0.788,256,2.761,265,3.415,282,3.048,289,2.635,292,1.759,296,1.464,297,1.281,324,0.575,354,1.759,405,1.684,431,1.01,436,0.644,450,0.745,481,1.045,544,4.208,582,5.275,605,1.016,606,1.214,607,1.37,608,1.441,609,1.518,610,1.683,761,3.446,779,3.364,1661,1.871,1662,1.932,1663,2.07,1664,2.147,1665,2.376,1666,2.43,1667,2.548,1777,3.289,4099,2.761,4503,3.289,4555,3.878,6290,3.156,6292,6.945,6300,4.737,6470,4.208,6557,4.737,6558,4.737,6559,6.725,6560,6.725,6561,4.737,6562,4.737,6563,4.737,6564,4.737,6566,6.725,6567,4.737,6568,4.737,6570,5.197,6571,5.197,6572,5.197,6573,5.197,6574,5.197,6575,5.197,6576,5.197,6577,5.197,6578,5.197,6579,5.197,6580,5.197,6581,7.377,6582,5.197,6583,5.197,6584,5.197,6585,5.197,6586,5.197,6587,5.197,6588,5.197,6589,5.197,6590,5.197,6591,5.197,6592,5.197,6593,5.197,6594,5.197,6595,5.197,6596,5.197,6597,5.197,6598,5.197,6599,5.197,6600,5.197,6601,5.197,6602,5.197,6603,5.197,6604,5.197]],["title/9.宏/9.7.初始化宏/9.7.初始化宏.html",[]],["body/9.宏/9.7.初始化宏/9.7.初始化宏.html",[0,0.336,4,0.982,5,1.237,265,4.064,760,8.094,797,3.222,6289,7.577,6294,7.19,6605,8.094,6606,8.094]],["title/9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏",[6607,4.473]],["body/9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏",[5,1.243,775,9.502,797,3.238,2587,6.917,6294,7.227,6605,8.135,6606,8.135,6608,8.924,6609,8.924,6610,8.924,6611,8.924,6612,8.924,6613,8.924,6614,8.924,6615,8.924]],["title/9.宏/9.6.限制/9.6.1Macro-in-Macro.html",[]],["body/9.宏/9.6.限制/9.6.1Macro-in-Macro.html",[4,1.061,7,2.911,138,0.671,141,1.087,169,2.992,197,2.265,209,3.152,256,5.548,264,2.03,265,4.389,332,3.685,356,4.091,375,3.977,471,4.091,577,3.307,582,5.42,615,5.107,632,5.389,638,5.42,881,5.746,1200,4.986,1278,5.389,3515,4.091,3520,4.091,3522,6.237,4695,5.746,6616,7.02,6617,7.02,6618,7.02]],["title/9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro",[265,1.061,6616,2.643]],["body/9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro",[4,1.067,7,2.937,138,0.677,141,1.093,169,3.004,197,2.285,209,3.18,256,5.571,264,2.041,265,4.371,332,3.718,356,4.127,375,4.013,471,4.127,577,3.337,582,5.45,615,5.153,632,5.437,638,5.45,881,5.798,1200,5.03,1278,5.437,3515,4.127,3520,4.127,3522,6.292,4695,5.798,6617,7.083,6618,7.083]],["title/9.宏/9.6.限制/9.6.2.静态扩展.html",[]],["body/9.宏/9.6.限制/9.6.2.静态扩展.html",[0,0.338,4,0.985,5,1.378,6,0.373,51,1.197,81,0.5,82,0.825,119,0.511,138,0.597,141,0.777,147,1.219,170,0.643,190,1.009,251,1.04,264,1.885,265,3.257,289,3.18,296,1.17,297,1.69,324,0.758,392,3.446,405,1.564,431,1.731,436,0.85,440,2.188,450,0.982,481,1.378,605,1.339,606,1.601,607,1.807,608,1.901,609,2.002,610,2.22,784,4.436,1523,3.446,1661,2.467,1662,2.548,1663,2.729,1664,2.831,1775,4.478,2958,5.208,4099,3.64,5424,5.113,6290,4.161,6317,5.55,6529,5.848,6619,5.848,6620,6.853,6621,6.247,6622,6.247,6623,6.247]],["title/9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展",[6624,4.473]],["body/9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展",[0,0.336,4,0.743,5,1.365,6,0.366,51,1.174,81,0.491,82,0.809,119,0.502,138,0.586,141,0.762,147,1.203,170,0.631,190,0.996,251,1.02,264,1.861,265,3.216,289,3.14,296,1.148,297,1.657,324,0.743,392,3.38,405,1.534,431,1.709,436,0.833,440,2.146,450,0.963,481,1.351,605,1.314,606,1.57,607,1.772,608,1.864,609,1.964,610,2.177,784,4.351,1523,3.38,1661,2.419,1662,2.499,1663,2.676,1664,2.777,1775,4.421,2944,5.443,2958,5.142,4099,3.57,5424,5.015,5943,5.015,6290,4.081,6317,5.443,6529,5.735,6621,6.126,6622,6.126,6623,6.126,6625,6.721,6626,6.721,6627,6.721,6628,6.721,6629,6.721,6630,6.721,6631,6.721]],["title/9.宏/9.6.限制/9.6.3.构建顺序.html",[]],["body/9.宏/9.6.限制/9.6.3.构建顺序.html",[0,0.338,5,1.163,6,0.338,8,2.35,51,1.086,81,0.454,82,0.748,88,3.448,119,0.464,138,0.542,141,1.068,142,2.411,147,1.143,170,0.583,190,0.946,251,0.943,265,3.448,288,4.254,289,2.982,291,4.57,292,2.826,296,1.426,297,2.058,324,0.688,354,2.104,392,4.199,436,0.771,450,0.891,481,1.25,582,3.513,605,1.215,606,1.453,607,1.639,608,1.724,609,1.816,610,2.014,761,4.123,925,5.695,1661,2.238,1662,2.312,1663,2.476,1664,2.569,1665,2.842,1666,2.907,1667,3.048,1668,3.211,1669,3.211,1670,3.636,1671,3.935,4099,3.302,5642,7.634,5643,7.034,6290,3.775,6340,5.035,6510,5.035,6632,7.611,6633,5.667,6634,5.667,6635,5.667,6636,5.667]],["title/9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序",[6637,4.473]],["body/9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序",[0,0.342,5,1.128,6,0.323,8,2.246,51,1.038,81,0.434,82,0.715,88,3.369,119,0.443,138,0.518,141,1.044,142,2.304,147,1.108,170,0.557,190,0.918,251,0.901,265,3.369,288,4.126,289,2.892,291,4.432,292,2.741,296,1.383,297,1.996,324,0.657,354,2.011,392,4.072,436,0.737,450,0.851,481,1.195,582,3.357,605,1.161,606,1.388,607,1.567,608,1.648,609,1.736,610,1.925,761,3.94,925,5.59,979,2.265,1661,2.139,1662,2.209,1663,2.366,1664,2.455,1665,2.716,1666,2.778,1667,2.913,1668,3.068,1669,3.068,1670,3.475,1671,3.761,4099,3.156,5642,7.459,5643,6.873,6290,3.608,6340,4.811,6632,7.381,6633,5.416,6634,5.416,6635,5.416,6636,5.416,6638,5.941,6639,5.941,6640,5.941,6641,5.941,6642,5.941,6643,5.941]],["title/9.宏/9.6.限制/9.6.4.类型参数.html",[]],["body/9.宏/9.6.限制/9.6.4.类型参数.html",[0,0.272,6644,8.249]],["title/9.宏/9.6.限制/9.6.4.类型参数.html#9-6-4-类型参数",[6645,4.473]],["body/9.宏/9.6.限制/9.6.4.类型参数.html#9-6-4-类型参数",[6646,9.721]],["title/9.宏/9.6.限制/9.6.限制.html",[]],["body/9.宏/9.6.限制/9.6.限制.html",[0,0.326,265,3.906,6510,7.456,6619,7.857,6644,7.857,6647,9.207,6648,8.393]],["title/9.宏/9.6.限制/9.6.限制.html#9-6-限制",[6649,4.473]],["body/9.宏/9.6.限制/9.6.限制.html#9-6-限制",[265,3.918,547,8.438,1750,7.174,4241,7.899,6510,7.496,6619,7.899,6644,7.899,6648,8.438,6650,9.256]],["title/8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html",[]],["body/8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html",[0,0.169,4,0.721,7,2.278,9,1.092,64,0.857,88,1.074,141,1.235,142,4.122,144,0.526,145,3.046,146,0.951,147,0.402,149,0.938,157,2.067,159,3.794,160,0.713,163,0.759,166,1.344,169,1.367,179,1.682,186,2.83,190,0.897,191,2.086,192,1.101,197,2.244,199,1.101,231,0.971,233,0.661,234,0.869,235,1.846,255,1.458,257,1.805,261,1.912,264,1.823,265,2.204,272,3.133,276,0.699,277,3.775,279,2.696,282,0.686,283,1.202,284,1.963,285,3.31,286,4.273,288,2.778,289,1.704,291,1.607,292,0.562,293,0.895,294,1.44,295,2.611,296,0.674,297,0.409,299,1.718,329,1.89,336,2.341,343,1.56,354,0.562,356,0.882,365,1.101,366,0.857,367,1.477,372,1.66,374,4.859,376,2.984,379,0.909,380,1.44,386,3.451,387,2.447,392,0.835,405,0.67,411,2.91,426,2.091,433,2.601,444,2.896,445,2.534,447,2.231,449,1.101,464,1.008,472,1.506,480,1.008,488,2.341,493,1.517,500,3.659,574,1.344,576,4.721,582,3.682,583,1.344,591,3.788,592,1.051,593,1.344,594,1.344,595,3.615,600,0.743,626,3.338,628,0.882,630,3.414,643,1.328,660,5.177,665,4.496,672,1.162,684,7.355,686,7.268,689,1.947,694,3.696,697,1.008,700,5.574,742,1.239,761,1.947,784,1.075,785,0.846,786,0.785,793,2.191,796,1.947,797,1.066,806,1.344,816,1.162,818,2.378,820,1.344,828,3.172,845,1.947,867,0.673,869,1.901,871,1.008,873,2.947,874,2.947,875,6.027,890,2.378,892,1.162,893,0.909,894,1.344,903,4.415,905,3.56,922,2.191,932,2.499,933,2.055,935,2.055,936,1.051,1080,1.051,1099,1.239,1179,1.373,1278,1.162,1348,0.824,1350,0.909,1357,2.947,1374,1.344,1406,1.162,1492,2.276,1748,2.068,1800,0.768,2062,0.882,2063,5.421,2072,1.239,2349,1.239,2914,3.02,2915,0.909,2952,1.008,2953,2.049,3200,2.191,3202,2.619,3203,2.947,3289,2.378,3338,1.344,3340,1.859,3341,1.859,3421,2.947,3451,1.344,3452,1.344,3478,1.607,3485,1.008,3493,1.239,3520,2.534,3704,3.081,3762,1.239,4021,1.846,4094,0.971,4110,0.971,4152,0.971,4380,1.344,4503,1.859,4506,1.344,4690,1.239,4850,2.378,4900,1.239,5125,2.055,5150,2.378,5173,2.378,5376,2.378,5801,1.344,5842,1.344,5843,1.344,6522,1.344,6651,1.513,6652,1.513,6653,4.97,6654,3.6,6655,1.513,6656,1.513,6657,1.513,6658,1.513,6659,4.97,6660,1.513,6661,1.513,6662,1.513,6663,1.513,6664,1.66,6665,1.513,6666,1.513,6667,1.513,6668,1.513,6669,1.513,6670,1.513,6671,2.677,6672,3.6,6673,2.677,6674,1.513,6675,1.513,6676,1.513,6677,1.513,6678,1.513,6679,2.677,6680,1.513,6681,1.513,6682,1.513,6683,1.513,6684,1.513,6685,1.513,6686,1.513,6687,1.513,6688,1.513,6689,1.513,6690,1.513,6691,1.513,6692,1.513,6693,3.6,6694,1.513,6695,1.513,6696,1.513,6697,1.513,6698,1.513,6699,1.513,6700,1.513,6701,1.513,6702,1.513,6703,1.513,6704,1.513,6705,1.513,6706,1.513,6707,1.513,6708,1.513,6709,1.513,6710,1.513,6711,1.513,6712,1.513,6713,1.513,6714,1.513,6715,1.513,6716,1.513,6717,1.513,6718,1.513,6719,1.513,6720,1.513,6721,1.513,6722,1.513,6723,1.513,6724,1.513,6725,1.513,6726,1.513,6727,1.513,6728,1.513,6729,3.6,6730,1.513,6731,1.66,6732,2.677,6733,2.677,6734,2.677,6735,1.513,6736,1.513,6737,1.66,6738,1.513]],["title/8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据",[6739,4.473]],["body/8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据",[4,0.667,7,2.279,9,1.093,64,0.858,88,1.075,141,1.235,142,4.123,144,0.527,145,3.048,146,0.952,147,0.402,149,0.939,157,2.067,159,3.795,160,0.714,163,0.76,166,1.346,169,1.368,179,1.683,186,2.743,190,0.898,191,2.087,192,1.102,197,2.245,199,1.102,231,0.972,233,0.662,235,1.847,255,1.459,257,1.807,261,1.913,264,1.824,265,2.205,272,3.135,276,0.7,277,3.776,279,2.698,282,0.687,283,1.203,284,1.964,285,3.311,286,4.275,288,2.78,289,1.705,291,1.609,292,0.562,293,0.896,294,1.441,295,2.613,296,0.675,297,0.41,299,1.719,329,1.891,336,2.343,343,1.561,354,0.562,356,0.883,365,1.102,366,0.858,367,1.478,372,1.661,374,4.86,376,2.986,379,0.91,380,1.441,386,3.453,387,2.449,392,0.836,405,0.671,411,2.911,426,2.092,433,2.602,444,2.898,445,2.536,447,2.233,449,1.102,464,1.009,472,1.507,480,1.009,488,2.343,493,1.518,500,3.661,544,1.346,574,1.346,576,4.723,582,3.683,583,1.346,591,3.79,592,1.052,593,1.346,594,1.346,595,3.618,600,0.744,626,3.341,628,0.883,630,3.416,643,1.329,660,5.179,665,4.499,672,1.163,684,7.356,686,7.271,689,1.949,694,3.697,697,1.009,700,5.576,761,1.949,785,0.847,786,0.786,793,2.193,796,1.949,797,1.067,806,1.346,816,1.163,818,2.38,820,1.346,828,3.174,845,1.949,867,0.674,869,1.903,871,1.009,873,2.949,874,2.949,875,6.03,890,2.38,892,1.163,893,0.91,894,1.346,903,4.418,905,3.562,922,2.193,932,2.501,933,2.057,935,2.057,936,1.052,939,1.102,941,1.346,945,1.515,1080,1.052,1099,1.24,1179,0.777,1278,1.163,1348,0.825,1350,0.91,1357,2.949,1374,1.346,1406,1.163,1492,2.278,1748,2.07,1800,0.768,2062,0.883,2063,5.423,2072,1.24,2349,1.24,2914,3.022,2915,0.91,2952,1.009,2953,2.05,3168,1.418,3200,2.193,3202,2.621,3203,2.949,3289,2.38,3338,1.346,3340,1.86,3341,1.86,3421,2.949,3451,1.346,3452,1.346,3478,1.609,3485,1.009,3493,1.24,3520,2.536,3704,3.083,3762,1.24,4021,1.848,4094,0.972,4110,0.972,4152,0.972,4380,1.346,4503,1.86,4506,1.346,4690,1.24,4850,2.38,4900,1.24,5125,2.057,5150,2.38,5173,2.38,5376,2.38,5801,1.346,5842,1.346,5843,1.346,6522,1.346,6651,1.515,6652,1.515,6653,4.973,6654,3.602,6655,1.515,6656,1.515,6657,1.515,6658,1.515,6659,4.973,6660,1.515,6661,1.515,6662,1.515,6663,1.515,6665,1.515,6666,1.515,6667,1.515,6668,1.515,6669,1.515,6670,1.515,6671,2.679,6672,3.602,6673,2.679,6674,1.515,6675,1.515,6676,1.515,6677,1.515,6678,1.515,6679,2.679,6680,1.515,6681,1.515,6682,1.515,6683,1.515,6684,1.515,6685,1.515,6686,1.515,6687,1.515,6688,1.515,6689,1.515,6690,1.515,6691,1.515,6692,1.515,6693,3.602,6694,1.515,6695,1.515,6696,1.515,6697,1.515,6698,1.515,6699,1.515,6700,1.515,6701,1.515,6702,1.515,6703,1.515,6704,1.515,6705,1.515,6706,1.515,6707,1.515,6708,1.515,6709,1.515,6710,1.515,6711,1.515,6712,1.515,6713,1.515,6714,1.515,6715,1.515,6716,1.515,6717,1.515,6718,1.515,6719,1.515,6720,1.515,6721,1.515,6722,1.515,6723,1.515,6724,1.515,6725,1.515,6726,1.515,6727,1.515,6728,1.515,6729,3.602,6730,1.515,6732,2.679,6733,2.679,6734,2.679,6735,1.515,6736,1.515,6738,1.515,6740,1.662,6741,1.662,6742,1.662,6743,1.662,6744,1.662,6745,1.662,6746,1.662,6747,1.662,6748,1.662]]],"invertedIndex":[["",{"_index":0,"title":{"index.html":{}},"body":{"index.html":{},"index.html#关于本文档":{},"1.Haxe介绍/1.Haxe介绍.html":{},"10.标准库/10.标准库.html":{},"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"3.类型系统/3.类型系统.html":{},"4.类字段/4.类字段.html":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"8.编译器功能/8.编译器功能.html":{},"9.宏/9.宏.html":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.字符串.html":{},"10.标准库/10.1.字符串/10.1.字符串.html#10-1-字符串":{},"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"10.标准库/10.10.Json/10.10.Json.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.11.InputOutput/10.11.InputOutput.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.13.远程处理/10.13.远程处理.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.数据结构.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.4.Math/10.4.3.整数数学.html":{},"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{},"10.标准库/10.4.Math/10.4.2.数学错误.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"10.标准库/10.9.Xml/10.9.Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.4.性能影响.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{},"8.编译器功能/8.4.资源/8.4.资源.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"9.宏/9.6.限制/9.6.4.类型参数.html":{},"9.宏/9.6.限制/9.6.限制.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{}}}],["0",{"_index":250,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.4.Math/10.4.2.数学错误.html":{},"10.标准库/10.4.Math/10.4.2.数学错误.html#10-4-2-数学错误":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["0&#x2026;10",{"_index":1609,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["0&#x4e3a;z&#xff0c;&#x6216;&#x8005",{"_index":2216,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["0)&#xff09;&#xff08;&#x6709;&#x4e24;&#x4e2a;&#x6574;&#x6570;&#x5b57;&#x6bb5",{"_index":2273,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["0,1,2,3,4,5,6,7,8,9",{"_index":5690,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["0.0",{"_index":2616,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["0.32",{"_index":5013,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["0.5",{"_index":1761,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["000",{"_index":6069,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["01",{"_index":2191,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["0x00",{"_index":1250,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0x0000",{"_index":1257,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0x000000",{"_index":1261,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0x01",{"_index":6073,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["0x02",{"_index":6076,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["0x09",{"_index":1231,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0x0a",{"_index":1234,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0x0d",{"_index":1237,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0x10ffff",{"_index":1262,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0x22",{"_index":1239,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0x27",{"_index":1241,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0x5c",{"_index":1244,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0x7f",{"_index":1251,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0xff0000",{"_index":2615,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["0xff42",{"_index":5012,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["0xffff",{"_index":1258,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["0…10",{"_index":1582,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{}}}],["0为z",{"_index":2175,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["0到9",{"_index":5691,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html":{}}}],["0或者1",{"_index":1868,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{}}}],["0或者多个表达式（第5章）并返回一个表达式。如果一个宏被调用，它实际上从它调用的位置插入代码。在这方面，它可以被跟一个预处理，如c",{"_index":758,"title":{},"body":{"9.宏/9.宏.html":{}}}],["0的2字节，s10:sgvsbg8giq",{"_index":2200,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["1",{"_index":6,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.字符串.html":{},"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.4.Math/10.4.3.整数数学.html":{},"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html":{},"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html#8-4-1-嵌入资源":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["1&#xff09;&#x6765;&#x7406;&#x89e3;identity&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x3002;&#x8fd9;&#x4f7f;&#x5b83;&#x53ef;&#x4ee5;&#x68c0;&#x67e5;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x5bf9;&#x5e94;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x4f7f",{"_index":6330,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["1&#xff0c;&#x610f;&#x5473;&#x7740",{"_index":4993,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["1)&#x3002",{"_index":1860,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{}}}],["1,&#x201d;foo&#x201d;]&#xff0c;&#x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#x662f",{"_index":4009,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["1,2,3",{"_index":5190,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html":{}}}],["1,8",{"_index":452,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["1,”foo",{"_index":3992,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{}}}],["1.&#x5982;&#x679c",{"_index":3265,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["1.0",{"_index":1102,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["1.1",{"_index":39,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html":{},"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{}}}],["1.1.hax",{"_index":989,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{}}}],["1.1.haxe&#x662f;&#x4ec0;&#x4e48",{"_index":998,"title":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}},"body":{}}],["1.2",{"_index":40,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html":{},"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["1.2.&#x5173;&#x4e8e;&#x672c;&#x6587;&#x6863",{"_index":1070,"title":{"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}},"body":{}}],["1.2.1",{"_index":1045,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{}}}],["1.2.1.&#x4f5c;&#x8005;&#x53ca;&#x8d21;&#x732e;&#x8005",{"_index":1058,"title":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}},"body":{}}],["1.2.2.licens",{"_index":1078,"title":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{}},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html":{}}}],["1.3",{"_index":42,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html":{},"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["1.3hello",{"_index":1178,"title":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{}}}],["1.4",{"_index":45,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html":{},"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{}}}],["1.4.hax",{"_index":1088,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["1.4.haxe&#x7684;&#x5386;&#x53f2",{"_index":1125,"title":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}},"body":{}}],["1.5",{"_index":6335,"title":{},"body":{"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{}}}],["1.hax",{"_index":38,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html":{}}}],["1.haxe&#x4ecb;&#x7ecd",{"_index":46,"title":{"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{}},"body":{}}],["1.ident",{"_index":6316,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["1.x",{"_index":864,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["10",{"_index":51,"title":{},"body":{"10.标准库/10.标准库.html":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["10.&#x6807;&#x51c6;&#x5e93",{"_index":72,"title":{"10.标准库/10.标准库.html#10-标准库":{}},"body":{}}],["10.1",{"_index":52,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.1.字符串/10.1.字符串.html":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["10.1.&#x5b57;&#x7b26;&#x4e32",{"_index":1267,"title":{"10.标准库/10.1.字符串/10.1.字符串.html#10-1-字符串":{}},"body":{}}],["10.1.1",{"_index":1220,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{}}}],["10.1.1.&#x5b57;&#x7b26;&#x4e32;&#x5b57;&#x9762;&#x503c",{"_index":1263,"title":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}},"body":{}}],["10.1.2.unicod",{"_index":1199,"title":{"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{}},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{}}}],["10.1.3.encod",{"_index":1274,"title":{"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{}}}],["10.10",{"_index":65,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{}}}],["10.10.1.&#x89e3;&#x6790;json",{"_index":1304,"title":{"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}},"body":{}}],["10.10.1.解析json",{"_index":1295,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html":{}}}],["10.10.2.&#x7f16;&#x7801;json",{"_index":1318,"title":{"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{}},"body":{}}],["10.10.2.编码json",{"_index":1314,"title":{},"body":{"10.标准库/10.10.Json/10.10.2.编码JSON.html":{}}}],["10.10.3",{"_index":1323,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html":{}}}],["10.10.3.&#x5b9e;&#x73b0;&#x7ec6;&#x8282",{"_index":1330,"title":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}},"body":{}}],["10.10.json",{"_index":1343,"title":{"10.标准库/10.10.Json/10.10.Json.html#10-10-Json":{}},"body":{"10.标准库/10.10.Json/10.10.Json.html":{}}}],["10.11",{"_index":67,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{}}}],["10.11.input/output",{"_index":1367,"title":{"10.标准库/10.11.InputOutput/10.11.InputOutput.html#10-11-Input-Output":{}},"body":{"10.标准库/10.11.InputOutput/10.11.InputOutput.html":{}}}],["10.12",{"_index":68,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{}}}],["10.12.1.thread",{"_index":1347,"title":{"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{}}}],["10.12.si",{"_index":1369,"title":{"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{}},"body":{"10.标准库/10.12.Sys/10.12.Sys.html":{}}}],["10.13",{"_index":70,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.13.远程处理/10.13.远程处理.html":{}}}],["10.13.&#x8fdc;&#x7a0b;&#x5904;&#x7406",{"_index":1479,"title":{"10.标准库/10.13.远程处理/10.13.远程处理.html#10-13-远程处理":{}},"body":{}}],["10.13.1",{"_index":1376,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["10.13.1.&#x8fdc;&#x7a0b;&#x8fde;&#x63a5",{"_index":1423,"title":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接":{}},"body":{}}],["10.13.2",{"_index":1484,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{}}}],["10.13.2.&#x5b9e;&#x73b0;&#x7ec6;&#x8282",{"_index":1502,"title":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#10-13-2-实现细节":{}},"body":{}}],["10.14",{"_index":71,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{}}}],["10.14.&#x5355;&#x5143;&#x6d4b;&#x8bd5",{"_index":1547,"title":{"10.标准库/10.14.单元测试/10.14.单元测试.html#10-14-单元测试":{}},"body":{}}],["10.1节），如””，“foo”，’’，’bar",{"_index":5003,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{}}}],["10.2",{"_index":53,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.2.数据结构/10.2.数据结构.html":{}}}],["10.2.&#x6570;&#x636e;&#x7ed3;&#x6784",{"_index":1749,"title":{"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}},"body":{}}],["10.2.1",{"_index":1580,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}}}],["10.2.1.&#x6570;&#x7ec4",{"_index":1604,"title":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}},"body":{}}],["10.2.1节），它只有一种类型参数（第3.2",{"_index":1631,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html":{}}}],["10.2.2",{"_index":1630,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}}}],["10.2.2.&#x5411;&#x91cf",{"_index":1640,"title":{"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}},"body":{}}],["10.2.3",{"_index":1646,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}}}],["10.2.3.&#x5217;&#x8868",{"_index":1650,"title":{"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}},"body":{}}],["10.2.4",{"_index":1745,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.数据结构.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}}}],["10.2.4.genericstack",{"_index":1726,"title":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{}}}],["10.2.5",{"_index":1746,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.数据结构.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}}}],["10.2.5.map",{"_index":1660,"title":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{}}}],["10.2.6",{"_index":1747,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.数据结构.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}}}],["10.2.6.option",{"_index":1754,"title":{"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{}},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html":{}}}],["10.3",{"_index":54,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{}}}],["10.3.&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f",{"_index":1878,"title":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}},"body":{}}],["10.3.1",{"_index":1792,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{}}}],["10.3.1.&#x5339;&#x914d",{"_index":1793,"title":{"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{}},"body":{}}],["10.3.2",{"_index":1765,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{}}}],["10.3.2.&#x5206;&#x7ec4",{"_index":1782,"title":{"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}},"body":{}}],["10.3.3",{"_index":1797,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html":{}}}],["10.3.3.&#x66ff;&#x6362",{"_index":1807,"title":{"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{}},"body":{}}],["10.3.4",{"_index":1812,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.4.分割.html":{}}}],["10.3.4.&#x5206;&#x5272",{"_index":1817,"title":{"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{}},"body":{}}],["10.3.5.map",{"_index":1834,"title":{"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{}}}],["10.3.6",{"_index":1820,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{}}}],["10.3.6.&#x5b9e;&#x73b0;&#x7ec6;&#x8282",{"_index":1824,"title":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}},"body":{}}],["10.4",{"_index":55,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{}}}],["10.4.1",{"_index":1850,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html":{}}}],["10.4.1.&#x7279;&#x6b8a;&#x6570;&#x503c",{"_index":1857,"title":{"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{}},"body":{}}],["10.4.2",{"_index":1927,"title":{},"body":{"10.标准库/10.4.Math/10.4.2.数学错误.html":{}}}],["10.4.2.&#x6570;&#x5b66;&#x9519;&#x8bef",{"_index":1928,"title":{"10.标准库/10.4.Math/10.4.2.数学错误.html#10-4-2-数学错误":{}},"body":{}}],["10.4.3",{"_index":1919,"title":{},"body":{"10.标准库/10.4.Math/10.4.3.整数数学.html":{}}}],["10.4.3.&#x6574;&#x6570;&#x6570;&#x5b66",{"_index":1923,"title":{"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{}},"body":{}}],["10.4.4",{"_index":1932,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{}}}],["10.4.4.&#x6269;&#x5c55",{"_index":1945,"title":{"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}},"body":{}}],["10.4.math",{"_index":1948,"title":{"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}},"body":{"10.标准库/10.4.Math/10.4.Math.html":{}}}],["10.5",{"_index":57,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{}}}],["10.5.lambda",{"_index":1966,"title":{"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{}},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{}}}],["10.6",{"_index":59,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.6.模板/10.6.模板.html":{}}}],["10.6.&#x6a21;&#x677f",{"_index":2117,"title":{"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{}},"body":{}}],["10.7",{"_index":61,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.7.反射/10.7.反射.html":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["10.7.&#x53cd;&#x5c04",{"_index":2307,"title":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}},"body":{}}],["10.8",{"_index":62,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.8.序列化/10.8.序列化.html":{}}}],["10.8.&#x5e8f;&#x5217;&#x5316",{"_index":2416,"title":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}},"body":{}}],["10.8.1",{"_index":2174,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html":{}}}],["10.8.1.&#x683c;&#x5f0f;&#x5316;&#x5e8f;&#x5217;&#x5316",{"_index":2214,"title":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}},"body":{}}],["10.9",{"_index":63,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{}}}],["10.9.1.&#x5f00;&#x59cb;&#x4f7f;&#x7528;xml",{"_index":2355,"title":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#10-9-1-开始使用Xml":{}},"body":{}}],["10.9.1.开始使用xml",{"_index":2331,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{}}}],["10.9.2.&#x89e3;&#x6790;xml",{"_index":2387,"title":{"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}},"body":{}}],["10.9.2.解析xml",{"_index":2384,"title":{},"body":{"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{}}}],["10.9.3.&#x7f16;&#x7801;xml",{"_index":2482,"title":{"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{}},"body":{}}],["10.9.3.编码xml",{"_index":2476,"title":{},"body":{"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{}}}],["10.9.xml",{"_index":2473,"title":{"10.标准库/10.9.Xml/10.9.Xml.html#10-9-Xml":{}},"body":{"10.标准库/10.9.Xml/10.9.Xml.html":{}}}],["100",{"_index":362,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["11",{"_index":605,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["110",{"_index":1587,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["1114111",{"_index":1260,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["12",{"_index":481,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["12&#x8ddf",{"_index":4843,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["12&#xff0c",{"_index":5026,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["12&#xff1a;45&#xff1a;10&#xff09",{"_index":2251,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["12.1",{"_index":691,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["12.2",{"_index":695,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["12.3",{"_index":696,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["12.4",{"_index":698,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["12.6",{"_index":702,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["12.7",{"_index":701,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["12.8",{"_index":703,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["12.tripl",{"_index":5456,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["127",{"_index":1249,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["127.0.0.1",{"_index":6066,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["12和第一个参数都是已知的int",{"_index":5460,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{}}}],["12：45：10",{"_index":2192,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["13",{"_index":606,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["135",{"_index":2074,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#表达式":{}}}],["14",{"_index":607,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["15",{"_index":608,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["16",{"_index":609,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["17",{"_index":610,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["170",{"_index":1588,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["18",{"_index":1661,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["180",{"_index":1940,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["19",{"_index":1662,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["1=\"cat",{"_index":1699,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{}}}],["1=\"dog",{"_index":1698,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{}}}],["1=cat",{"_index":1720,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["1=dog",{"_index":1719,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["1andfoo.field",{"_index":4255,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["1e10",{"_index":2617,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["1开始，r.matched(0",{"_index":1772,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{}}}],["1）来理解ident",{"_index":6320,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{}}}],["2",{"_index":81,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"3.类型系统/3.类型系统.html":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["2&#x4e2d;&#xff0c",{"_index":1737,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["2&#x4e2d;&#xff0c;&#x4efb;&#x610f;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#x5141;&#x8bb8;&#x4f5c;&#x4e3a;&#x8bbf;&#x95ee;&#x6807;&#x8bc6;&#x7b26;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x5b9a;&#x5236;&#x7684;&#x5b58;&#x53d6;&#x5668;&#x65b9;&#x6cd5;&#x540d;&#x662f;&#x88ab;&#x8ba4;&#x53ef;&#x7684;&#x3002;&#x8fd9;&#x4f7f;&#x5f97;&#x90e8;&#x5206;&#x5b9e;&#x73b0;&#x975e;&#x5e38;&#x96be;&#x4ee5;&#x5904;&#x7406;&#x3002;&#x7279;&#x522b;&#x662f;&#xff0c;reflect.getproperti",{"_index":4546,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["2&#x4e2d;&#xff0c;&#x6df7;&#x5408;&#x7c7b;&#x578b;&#x7684;&#x6570;&#x7ec4;&#x58f0;&#x660e;&#x662f;&#x88ab;&#x5141;&#x8bb8;&#x7684;&#x3002;&#x5728;hax",{"_index":1626,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["2&#x7f16;&#x8bd1;&#x5668",{"_index":1128,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["2.&#x5982;&#x679c",{"_index":3267,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["2.&#x7c7b;&#x578b",{"_index":93,"title":{"2.类型/2.类型.html#2-类型":{}},"body":{}}],["2.0",{"_index":1107,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["2.04",{"_index":1114,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["2.07&#x4e2d;&#x5b9e;&#x73b0;&#x3002;&#x8fd9;&#x4e2a;&#x5b9e;&#x73b0;&#x8003;&#x8651;&#x8fc7;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#xff0c;&#x88ab;&#x7528;&#x5728;&#x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x5316;&#x65f6;&#x3002;&#x4f46;&#x662f;&#x95ee;&#x9898;&#x662f;&#x4e00;&#x4e9b;&#x529f;&#x80fd;&#xff0c;&#x591a;&#x6570;&#x91cd;&#x8981;&#x7684;&#x63a5;&#x53e3;&#xff0c;&#x4f1a;&#x4f7f;&#x6240;&#x6709;&#x7684;&#x7c7b;&#x5b57;&#x6bb5;&#x88ab;&#x7c7b;&#x578b;&#x5316;&#x4ee5;&#x9a8c;&#x8bc1;&#x7c7b;&#x578b;&#x5b89;&#x5168;&#x3002;&#x8fd9;&#x6709;&#x6548;&#x7684;&#x5b8c;&#x5168;&#x98a0;&#x8986;&#x4e86;dce&#xff0c;&#x6fc0;&#x52b1;&#x4e86;haxe2.10&#x4e2d;&#x7684;&#x91cd;&#x5199;&#x3002",{"_index":5874,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["2.07中实现。这个实现考虑过一个函数，被用在显式的类型化时。但是问题是一些功能，多数重要的接口，会使所有的类字段被类型化以验证类型安全。这有效的完全颠覆了dce，激励了haxe2.10",{"_index":5848,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["2.08",{"_index":1118,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["2.09",{"_index":1119,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["2.09&#x4e4b;&#x540e;&#x5b57;&#x7b26;&#x4e32;&#x63d2;&#x503c;&#x5c31;&#x4f5c;&#x4e3a;&#x4e00;&#x4e2a;haxe&#x529f;&#x80fd;&#x88ab;&#x5f15;&#x5165;&#x3002;&#x5728;&#x90a3;&#x4e4b;&#x524d;&#xff0c;&#x5fc5;&#x987b;&#x4f7f;&#x7528;&#x5b8f",{"_index":5688,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["2.09&#x7248;&#x672c;&#x4e4b;&#x540e;&#xff0c;simon",{"_index":1166,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["2.09之后字符串插值就作为一个hax",{"_index":5671,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{}}}],["2.09版本之后，simon",{"_index":1120,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2.1",{"_index":2613,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{}}}],["2.1.&#x57fa;&#x672c;&#x7c7b;&#x578b",{"_index":2618,"title":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}},"body":{}}],["2.1.1",{"_index":2486,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["2.1.1.&#x6570;&#x503c;&#x7c7b;&#x578b",{"_index":2489,"title":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#2-1-1-数值类型":{}},"body":{}}],["2.1.1节），例如0，1，97121",{"_index":5000,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{}}}],["2.1.1节），如0.0，1.，.3",{"_index":5001,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{}}}],["2.1.2",{"_index":2546,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{}}}],["2.1.2.&#x6ea2;&#x51fa",{"_index":2552,"title":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}},"body":{}}],["2.1.3",{"_index":2503,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{}}}],["2.1.3.&#x6570;&#x503c;&#x8fd0;&#x7b97;&#x7b26",{"_index":2508,"title":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#2-1-3-数值运算符":{}},"body":{}}],["2.1.4",{"_index":5010,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["2.1.4.bool",{"_index":2561,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{}}}],["2.1.4.bool&#x7c7b;&#x578b",{"_index":2565,"title":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}},"body":{}}],["2.1.5",{"_index":3862,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["2.1.5.void",{"_index":2591,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{}}}],["2.1.5.void&#x7c7b;&#x578b",{"_index":2595,"title":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}},"body":{}}],["2.10",{"_index":1122,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["2.1e5",{"_index":5014,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["2.2",{"_index":2647,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.5.匿名结构/2.5.4.性能影响.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["2.2.&#x4e3a;&#x7a7a;&#x6027",{"_index":2653,"title":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}},"body":{}}],["2.2.1",{"_index":2630,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{}}}],["2.2.1.&#x53ef;&#x9009;&#x53c2;&#x6570;&#x548c;&#x4e3a;&#x7a7a;&#x6027",{"_index":2632,"title":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}},"body":{}}],["2.2节）可能可以工作，但是在静态目标语言（第2.2",{"_index":5087,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{}}}],["2.3",{"_index":363,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["2.3.&#x7c7b;&#x5b9e;&#x4f8b",{"_index":2790,"title":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}},"body":{}}],["2.3.1",{"_index":2700,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{}}}],["2.3.1.&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":2703,"title":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}},"body":{}}],["2.3.2",{"_index":2754,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["2.3.2.&#x7ee7;&#x627f",{"_index":2763,"title":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}},"body":{}}],["2.3.2节）中解释了super",{"_index":4460,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{}}}],["2.3.3",{"_index":2720,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["2.3.3.&#x63a5;&#x53e3",{"_index":2727,"title":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}},"body":{}}],["2.3节）或者一个抽象类型（第2.8节）被实例化。后面跟着将要被实例化的类型的类型路径（第3.7",{"_index":4833,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html":{}}}],["2.3节），enum实例（第2.4节），抽象核心类型（第2.8.7",{"_index":4967,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{}}}],["2.4",{"_index":393,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["2.4.&#x679a;&#x4e3e;&#x5b9e;&#x4f8b",{"_index":2852,"title":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}},"body":{}}],["2.4.1",{"_index":2869,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["2.4.1.enum",{"_index":2815,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{}}}],["2.4.1.enum&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":2826,"title":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}},"body":{}}],["2.4.2",{"_index":2868,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{}}}],["2.4.2.&#x4f7f;&#x7528;&#x679a;&#x4e3",{"_index":2874,"title":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}},"body":{}}],["2.4.2class",{"_index":2894,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["2.5",{"_index":341,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["2.5.&#x533f;&#x540d;&#x7ed3;&#x6784",{"_index":2986,"title":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}},"body":{}}],["2.5.1.&#x7ed3;&#x6784;&#x503c;&#x7684;json&#x5f62;&#x5f0f",{"_index":2917,"title":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}},"body":{}}],["2.5.1.结构值的json",{"_index":2911,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{}}}],["2.5.2",{"_index":2893,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{}}}],["2.5.3",{"_index":2936,"title":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{}}}],["2.5.4",{"_index":2927,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["2.5.4.&#x6027;&#x80fd;&#x5f71;&#x54cd",{"_index":2928,"title":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}},"body":{}}],["2.5.5",{"_index":2947,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{}}}],["2.5.5.&#x6269;&#x5c55",{"_index":2967,"title":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}},"body":{}}],["2.6",{"_index":92,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["2.6.&#x51fd;&#x6570;&#x7c7b;&#x578b",{"_index":3072,"title":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}},"body":{}}],["2.6.1",{"_index":3019,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{}}}],["2.6.1.&#x53ef;&#x9009;&#x53c2;&#x6570",{"_index":3022,"title":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}},"body":{}}],["2.6.2",{"_index":3042,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html":{}}}],["2.6.2.&#x9ed8;&#x8ba4;&#x503c",{"_index":3043,"title":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}},"body":{}}],["2.7",{"_index":3124,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["2.7.&#x52a8;&#x6001;&#x7c7b;&#x578b",{"_index":3134,"title":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}},"body":{}}],["2.7.1.dynam",{"_index":3056,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{}}}],["2.7.1.dynamic&#x4f7f;&#x7528;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":3061,"title":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}},"body":{}}],["2.7.2.&#x5b9e;&#x73b0;dynam",{"_index":3108,"title":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}},"body":{}}],["2.7.2.实现dynam",{"_index":3101,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{}}}],["2.8",{"_index":325,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["2.8.&#x62bd;&#x8c61;&#x7c7b;&#x578b",{"_index":3523,"title":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}},"body":{}}],["2.8.1",{"_index":3185,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["2.8.1.&#x9690;&#x5f0f;&#x7c7b;&#x578b;&#x8f6c;&#x6362",{"_index":3227,"title":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}},"body":{}}],["2.8.2",{"_index":3280,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{}}}],["2.8.2.&#x8fd0;&#x7b97;&#x7b26;&#x91cd;&#x8f7d",{"_index":3301,"title":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}},"body":{}}],["2.8.3",{"_index":3337,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["2.8.3.&#x6570;&#x7ec4;&#x8bbf;&#x95e",{"_index":3350,"title":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}},"body":{}}],["2.8.4",{"_index":3191,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{}}}],["2.8.4.&#x9009;&#x62e9;&#x51fd;&#x6570",{"_index":3379,"title":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}},"body":{}}],["2.8.5",{"_index":3392,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{}}}],["2.8.5.&#x679a;&#x4e3e;&#x62bd;&#x8c61;&#x7c7b;&#x578b",{"_index":3406,"title":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}},"body":{}}],["2.8.6",{"_index":3420,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{}}}],["2.8.6.&#x8f6c;&#x53d1;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5b57;&#x6bb5",{"_index":3429,"title":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}},"body":{}}],["2.8.7",{"_index":3450,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["2.8.7.&#x6838;&#x5fc3;&#x7c7b;&#x578b;&#x62bd;&#x8c61",{"_index":3453,"title":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}},"body":{}}],["2.9",{"_index":3070,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.9.单形/2.9.单形.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["2.9.&#x5355;&#x5f62",{"_index":3572,"title":{"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}},"body":{}}],["2.9节）的类型的一致性检查行为在类型推断（第3.6",{"_index":3855,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{}}}],["2.x",{"_index":825,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["2/2,3/3,4/2,6/2,6/3,8/2,9/3,10/2",{"_index":5697,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["20",{"_index":1663,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["20.2",{"_index":1951,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["2005",{"_index":996,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{}}}],["2005年8月22",{"_index":1089,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2006年2",{"_index":1097,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2006年5",{"_index":1101,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2006年8",{"_index":1103,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2007年3",{"_index":1105,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2007年7",{"_index":1113,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2008年7",{"_index":1108,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2011年1月，hax",{"_index":1115,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2012&#x5e74;&#x5e95;&#xff0c;hax",{"_index":1172,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["2012年7",{"_index":1121,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2012年底，hax",{"_index":1123,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["2013年5",{"_index":1124,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["21",{"_index":1664,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["22",{"_index":1665,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["23",{"_index":1666,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["24",{"_index":1667,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["25",{"_index":1668,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["250",{"_index":853,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["252",{"_index":2549,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{}}}],["255",{"_index":2819,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["26",{"_index":1669,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["27",{"_index":1670,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["28",{"_index":1671,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["29",{"_index":1672,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["2中，任意的标识符允许作为访问标识符，可以使定制的存取器方法名是被认可的。这使得部分实现非常难以处理。特别是，reflect.getproperti",{"_index":4492,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{}}}],["2中，混合类型的数组声明是被允许的。在hax",{"_index":1603,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{}}}],["3",{"_index":119,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["3&#x4e2d;&#x4fee;&#x6539;&#x4e86;&#x540d;&#x5b57;&#x3002",{"_index":1740,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["3&#x4e2d;&#xff0c;&#x6570;&#x7ec4;&#x53ea;&#x6709;&#x663e;&#x5f0f;&#x58f0;&#x660e;&#x4e3a",{"_index":1627,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["3&#x4e4b;&#x524d;&#x7684",{"_index":3152,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["3&#x4e4b;&#x95f4;&#x4e00;&#x4e2a;&#x963b;&#x65ad;&#x5f0f;&#x7684;&#x53d8;&#x66f4;&#x3002",{"_index":4550,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["3&#x4ee5;&#x524d;&#xff0c;&#x66fe;&#x7ecf;&#x4f7f;&#x7528;&#x4e00;&#x4e2a",{"_index":5794,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["3&#x6e90;&#x4ee3;&#x7801;&#x5230;&#x6307;&#x5b9a;&#x76ee;&#x5f55;&#x3002",{"_index":731,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["3&#x7684;&#x7248;&#x672c;&#x88ab;&#x51cf;&#x5c11;&#x3002",{"_index":3184,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["3.&#x5982;&#x679c",{"_index":3270,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["3.&#x7c7b;&#x578b;&#x7cfb;&#x7edf",{"_index":124,"title":{"3.类型系统/3.类型系统.html#3-类型系统":{}},"body":{}}],["3.0",{"_index":784,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{}}}],["3.0&#x4ee5;&#x540e;&#x3002;&#x5f53;&#x7f16;&#x5199;&#x8fd9;&#x672c;&#x624b;&#x518c;&#x65f6;&#x53d1;&#x73b0;&#x8fd9;&#x90e8;&#x5206;&#x7684;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#x5b9e;&#x73b0;&#x662f;&#x5bb9;&#x6613;&#x7f3a;&#x5931;&#x7684;&#x3002",{"_index":5356,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["3.0&#x5f00;&#x59cb;&#xff0c;&#x4f60;&#x53ef;&#x4ee5;&#x8fd0;&#x884c",{"_index":6740,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["3.0&#x5f00;&#x59cb;&#xff0c;&#x4f60;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x8fd0;&#x884c",{"_index":940,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["3.0&#x7248;&#x672c;&#x4e4b;&#x540",{"_index":3407,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["3.1",{"_index":821,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["3.1.0",{"_index":2958,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["3.1.0&#x4ee5;&#x540",{"_index":5111,"title":{},"body":{"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["3.1.typedef",{"_index":3612,"title":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html":{}}}],["3.1415",{"_index":1856,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html":{}}}],["3.1415&#x2026",{"_index":1865,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{}}}],["3.2",{"_index":91,"title":{},"body":{"2.类型/2.类型.html":{},"3.类型系统/3.类型系统.html":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["3.2.&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":3670,"title":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}},"body":{}}],["3.2.0",{"_index":4172,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["3.2.0&#x8d77;&#xff0c;&#x8fd9;&#x4e0d;&#x5305;&#x62ec;&#x7ea6;&#x675f;&#xff08;&#x7b2c;3.2.1&#x8282;&#xff09;&#x3002",{"_index":6195,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["3.2.0起，这不包括约束（第3.2.1",{"_index":6172,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["3.2.1",{"_index":3577,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["3.2.1.&#x7ea6;&#x675f",{"_index":3593,"title":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}},"body":{}}],["3.2节）的名称。自hax",{"_index":6171,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["3.3",{"_index":3650,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{}}}],["3.3.&#x6cdb;&#x578b",{"_index":3729,"title":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}},"body":{}}],["3.3.0",{"_index":267,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["3.3.1",{"_index":3994,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["3.4",{"_index":3761,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["3.4.&#x53d8;&#x5f02",{"_index":3798,"title":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}},"body":{}}],["3.5",{"_index":122,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.9.单形/2.9.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"9.宏/9.4.工具/9.4.工具.html":{}}}],["3.5.&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5",{"_index":3927,"title":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}},"body":{}}],["3.5.1",{"_index":3744,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{}}}],["3.5.1.&#x7c7b;&#x4e0e;&#x63a5;&#x53e3",{"_index":3753,"title":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}},"body":{}}],["3.5.2",{"_index":2723,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.5.匿名结构/2.5.4.性能影响.html":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["3.5.2.&#x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b",{"_index":3834,"title":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}},"body":{}}],["3.5.3",{"_index":3854,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{}}}],["3.5.3.&#x5355;&#x5f62",{"_index":3858,"title":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{}},"body":{}}],["3.5.4",{"_index":3861,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{}}}],["3.5.4.&#x51fd;&#x6570;&#x8fd4;&#x56de",{"_index":3874,"title":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}},"body":{}}],["3.5.5",{"_index":3896,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["3.5.5.&#x901a;&#x7528;&#x57fa;&#x672c;&#x7c7b;&#x578b",{"_index":3903,"title":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}},"body":{}}],["3.5节）为type",{"_index":5109,"title":{},"body":{"5.表达式/5.24.类型检查/5.24.类型检查.html":{}}}],["3.5节）它的类型为它所返回的函数的返回类型（显式指定或者通过前面的return",{"_index":4986,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html":{}}}],["3.6",{"_index":89,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.9.单形/2.9.单形.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["3.6.&#x7c7b;&#x578b;&#x63a8;&#x65ad",{"_index":4041,"title":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}},"body":{}}],["3.6.1",{"_index":3981,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["3.6.1.&#x7531;&#x4e0a;&#x800c;&#x4e0b;&#x63a8;&#x65ad",{"_index":3999,"title":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}},"body":{}}],["3.6.2",{"_index":4070,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{}}}],["3.6.2.&#x5c40;&#x9650",{"_index":4087,"title":{"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}},"body":{}}],["3.7",{"_index":123,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["3.7.&#x6a21;&#x5757;&#x548c;&#x8def;&#x5f84",{"_index":4230,"title":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}},"body":{}}],["3.7.1",{"_index":4092,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["3.7.1.&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b",{"_index":4111,"title":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}},"body":{}}],["3.7.2",{"_index":4258,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["3.7.2.import",{"_index":4128,"title":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["3.7.2节）、use",{"_index":5960,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{}}}],["3.7.3",{"_index":4142,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{}}}],["3.7.3.&#x89e3;&#x6790;&#x987a;&#x5e8f",{"_index":4272,"title":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}},"body":{}}],["3.7.3节），多个使用的表达式从底部到头部检查，而在每个模块的类型以及在每个类型中的字段从头至尾检查。使用一个模块（而不是一个模块中的特定类型，查看模块和路径（第3.7",{"_index":5470,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{}}}],["30",{"_index":1673,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["31",{"_index":1674,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["315",{"_index":1590,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["32",{"_index":1675,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["33",{"_index":1676,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["34",{"_index":1238,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["35",{"_index":1266,"title":{},"body":{"10.标准库/10.1.字符串/10.1.字符串.html":{},"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["36",{"_index":1677,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["37",{"_index":1678,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["38",{"_index":1679,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["39",{"_index":1240,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["393",{"_index":1291,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["39;x&#39;.code",{"_index":5021,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{}}}],["39;xxx&#39",{"_index":5019,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{}}}],["3行的函数类型输出直接反映出来。这个例子程序调用了4",{"_index":3021,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html":{}}}],["4",{"_index":138,"title":{},"body":{"4.类字段/4.类字段.html":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["4.&#x5982;&#x679c",{"_index":3271,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["4.&#x7c7b;&#x5b57;&#x6bb5",{"_index":211,"title":{"4.类字段/4.类字段.html#4-类字段":{}},"body":{}}],["4.0",{"_index":1081,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["4.0.0",{"_index":1200,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["4.1",{"_index":174,"title":{},"body":{"4.类字段/4.类字段.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["4.1.&#x53d8;&#x91cf",{"_index":4363,"title":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}},"body":{}}],["4.1节）和属性（第4.2节）字段可以使用任意的初始化表达式（第5",{"_index":4754,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{}}}],["4.1节）或者属性（第4.2",{"_index":4071,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{}}}],["4.2",{"_index":175,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["4.2.&#x5c5e;&#x6027",{"_index":4509,"title":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}},"body":{}}],["4.2.1",{"_index":4320,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{}}}],["4.2.1.&#x5e38;&#x89c1;&#x8bbf;&#x95ee;&#x6807;&#x8bc6;&#x7b26;&#x7ec4;&#x5408",{"_index":4339,"title":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}},"body":{}}],["4.2.2",{"_index":4425,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{}}}],["4.2.2.&#x5bf9;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x7684;&#x5f71;&#x54cd",{"_index":4434,"title":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}},"body":{}}],["4.2.3",{"_index":3472,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{}}}],["4.2.3.getter&#x548c;setter&#x7684;&#x89c4;&#x5219",{"_index":4397,"title":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}},"body":{}}],["4.2.3.getter和sett",{"_index":4374,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{}}}],["4.3",{"_index":176,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["4.3.&#x65b9;&#x6cd5",{"_index":4560,"title":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}},"body":{}}],["4.3.1",{"_index":2762,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["4.3.1.&#x91cd;&#x5199;&#x65b9;&#x6cd5",{"_index":4461,"title":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}},"body":{}}],["4.3.1节）详述。这个修饰符只允许用于方法（第4.3",{"_index":4723,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{}}}],["4.3.2",{"_index":4587,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{}}}],["4.3.2.&#x53d8;&#x5f02;&#x548c;&#x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26;&#x7684;&#x5f71;&#x54cd",{"_index":4600,"title":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}},"body":{}}],["4.4",{"_index":4360,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html":{}}}],["4.4.&#x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26",{"_index":4743,"title":{"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html#4-4-访问修饰符":{}},"body":{}}],["4.4.1",{"_index":4591,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["4.4.1.&#x53ef;&#x89c1;&#x6027",{"_index":4632,"title":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}},"body":{}}],["4.4.2",{"_index":409,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["4.4.2.inlin",{"_index":4654,"title":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{}}}],["4.4.3.dynam",{"_index":4728,"title":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{}}}],["4.4.4",{"_index":6186,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["4.4.4.overrid",{"_index":4716,"title":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{}}}],["4.4.5.static",{"_index":4749,"title":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{}}}],["4.4节）（static",{"_index":4359,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html":{}}}],["4.7",{"_index":1922,"title":{},"body":{"10.标准库/10.4.Math/10.4.3.整数数学.html":{},"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{}}}],["40",{"_index":1680,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["404",{"_index":3395,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["405",{"_index":3397,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["41",{"_index":1681,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["42",{"_index":1682,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["43",{"_index":1683,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["44",{"_index":1684,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["45",{"_index":856,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["46",{"_index":1685,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["47",{"_index":1686,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["48",{"_index":1687,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["49",{"_index":1688,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["4=null",{"_index":2196,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["4章）列表，描述为类字段信息（第8.5.1",{"_index":6178,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["5",{"_index":170,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["5.&#x505c;&#x6b62;&#xff0c;&#x7edf;&#x4e00;&#x5931;&#x8d25",{"_index":3273,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["5.&#x8868;&#x8fbe;&#x5f0f",{"_index":303,"title":{"5.表达式/5.表达式.html#5-表达式":{}},"body":{}}],["5.1",{"_index":4761,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["5.1.&#x5757",{"_index":4770,"title":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}},"body":{}}],["5.10",{"_index":2873,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["5.10.var",{"_index":4782,"title":{"5.表达式/5.10.var/5.10.var.html#5-10-var":{}},"body":{"5.表达式/5.10.var/5.10.var.html":{}}}],["5.11",{"_index":205,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["5.11.&#x5c40;&#x90e8;&#x51fd;&#x6570",{"_index":4794,"title":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}},"body":{}}],["5.12.new",{"_index":4832,"title":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}},"body":{"5.表达式/5.12.new/5.12.new.html":{}}}],["5.13.for",{"_index":4847,"title":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}},"body":{"5.表达式/5.13.for/5.13.for.html":{}}}],["5.13节）迭代，并使用数组访问（第2.8.3",{"_index":1632,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html":{}}}],["5.14",{"_index":1585,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{}}}],["5.14.while",{"_index":4884,"title":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{}},"body":{"5.表达式/5.14.while/5.14.while.html":{}}}],["5.15",{"_index":4887,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["5.15.do",{"_index":4898,"title":{"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{}},"body":{"5.表达式/5.15.do-while/5.15.do-while.html":{}}}],["5.16.if",{"_index":4908,"title":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}},"body":{"5.表达式/5.16.if/5.16.if.html":{}}}],["5.17",{"_index":2872,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["5.17.switch",{"_index":4931,"title":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}},"body":{"5.表达式/5.17.switch/5.17.switch.html":{}}}],["5.18",{"_index":4768,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["5.18.try/catch",{"_index":4957,"title":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{}}}],["5.18节）或者返回表达式（第5.19",{"_index":4767,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html":{}}}],["5.19",{"_index":4769,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["5.19.return",{"_index":4982,"title":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}},"body":{"5.表达式/5.19.return/5.19.return.html":{}}}],["5.2",{"_index":4999,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{}}}],["5.2.&#x5e38;&#x91cf",{"_index":5023,"title":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}},"body":{}}],["5.20",{"_index":4863,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["5.20.break",{"_index":5039,"title":{"5.表达式/5.20.break/5.20.break.html#5-20-break":{}},"body":{"5.表达式/5.20.break/5.20.break.html":{}}}],["5.21",{"_index":4864,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["5.21.continu",{"_index":5051,"title":{"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{}},"body":{"5.表达式/5.21.continue/5.21.continue.html":{}}}],["5.22",{"_index":4685,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["5.22.throw",{"_index":5057,"title":{"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{}},"body":{"5.表达式/5.22.throw/5.22.throw.html":{}}}],["5.23",{"_index":3649,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{}}}],["5.23.&#x7c7b;&#x578b;&#x8f6c;&#x6362",{"_index":5102,"title":{"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{}},"body":{}}],["5.23.1",{"_index":5062,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{}}}],["5.23.1.&#x4e0d;&#x5b89;&#x5168;&#x8f6c;&#x6362",{"_index":5089,"title":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}},"body":{}}],["5.23.2",{"_index":5061,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["5.23.2.&#x5b89;&#x5168;&#x8f6c;&#x6362",{"_index":5074,"title":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}},"body":{}}],["5.23）为一个类型参数类型。也不可能为一个类型参数创建新的实例，除非类型参数是泛型（第3.3",{"_index":3644,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["5.24",{"_index":5106,"title":{},"body":{"5.表达式/5.24.类型检查/5.24.类型检查.html":{}}}],["5.24.&#x7c7b;&#x578b;&#x68c0;&#x67e5",{"_index":5110,"title":{"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}},"body":{}}],["5.3",{"_index":5117,"title":{"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{}},"body":{"5.表达式/5.3 操作符/5.3 操作符.html":{}}}],["5.3.1",{"_index":5126,"title":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{}},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{}}}],["5.3.2",{"_index":5139,"title":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{}}}],["5.3.3",{"_index":5176,"title":{"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{}},"body":{"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{}}}],["5.3.4",{"_index":5170,"title":{"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}},"body":{"5.表达式/5.3 操作符/5.3.4 优先级.html":{}}}],["5.3.5",{"_index":5180,"title":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}},"body":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{}}}],["5.4.1",{"_index":5118,"title":{},"body":{"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{}}}],["5.4.2",{"_index":5120,"title":{},"body":{"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{}}}],["5.4.3",{"_index":5121,"title":{},"body":{"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{}}}],["5.4.4",{"_index":5123,"title":{},"body":{"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{}}}],["5.4.5",{"_index":5124,"title":{},"body":{"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{}}}],["5.5",{"_index":1581,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["5.5.&#x6570;&#x7ec4;&#x58f0;&#x660",{"_index":5196,"title":{"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}},"body":{}}],["5.6",{"_index":5202,"title":{},"body":{"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["5.6.&#x5bf9;&#x8c61;&#x58f0;&#x660e",{"_index":5210,"title":{"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}},"body":{}}],["5.7",{"_index":4480,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{}}}],["5.7.&#x5b57;&#x6bb5;&#x8bbf;&#x95ee",{"_index":5216,"title":{"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{}},"body":{}}],["5.8",{"_index":1583,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{}}}],["5.8.&#x6570;&#x7ec4;&#x8bbf;&#x95e",{"_index":5225,"title":{"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}},"body":{}}],["5.9",{"_index":4836,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{}}}],["5.9.&#x51fd;&#x6570;&#x8c03;&#x7528",{"_index":5235,"title":{"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{}},"body":{}}],["54",{"_index":6015,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["5}&apo",{"_index":1310,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["5部第7",{"_index":4268,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["6",{"_index":324,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["6.&#x505c;&#x6b62;&#xff0c;&#x7edf;&#x4e00;&#x6210;&#x529f",{"_index":3274,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["6.&#x8bed;&#x8a00;&#x7279;&#x6027",{"_index":509,"title":{"6.语言特性/6.语言特性.html#6-语言特性":{}},"body":{}}],["6.1",{"_index":377,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["6.1.&#x6761;&#x4ef6;&#x7f16;&#x8bd1",{"_index":5252,"title":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}},"body":{}}],["6.10",{"_index":499,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{}}}],["6.10.&#x8bbf;&#x95ee;&#x63a7;&#x5236",{"_index":5312,"title":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}},"body":{}}],["6.11",{"_index":5357,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{}}}],["6.11.&#x5185;&#x8054;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":5362,"title":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}},"body":{}}],["6.2",{"_index":334,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.4.Math/10.4.3.整数数学.html":{},"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["6.2.extern",{"_index":5369,"title":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["6.3",{"_index":453,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{}}}],["6.3.&#x9759;&#x6001;&#x6269;&#x5c55",{"_index":5473,"title":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}},"body":{}}],["6.3.1",{"_index":5419,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{}}}],["6.3.1.&#x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684;&#x9759;&#x6001;&#x6269;&#x5c55",{"_index":5431,"title":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}},"body":{}}],["6.3节）和宏的概念有一些冲突：前者需要一个已知类型来确定使用的函数，而宏在类型化简单的语法之前执行。因此毫不奇怪，结合使用这两个特性可能导致问题。hax",{"_index":6620,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html":{}}}],["6.3节），如果名字相同并且第一个参数统一（第3.5",{"_index":4269,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["6.4",{"_index":482,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"5.表达式/5.17.switch/5.17.switch.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{}}}],["6.4.&#x6a21;&#x5f0f;&#x5339;&#x914d",{"_index":5707,"title":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}},"body":{}}],["6.4.1",{"_index":5497,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.1.&#x4ecb;&#x7ecd",{"_index":5505,"title":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}},"body":{}}],["6.4.10",{"_index":3405,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.10.&#x7a77;&#x5c3d;&#x6027;&#x68c0;&#x67e5",{"_index":5491,"title":{"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{}},"body":{}}],["6.4.11",{"_index":5513,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.11.&#x65e0;&#x6548;&#x7684;&#x6a21;&#x5f0f;&#x68c0;&#x67e5",{"_index":5519,"title":{"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{}},"body":{}}],["6.4.2",{"_index":5521,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.2.&#x679a;&#x4e3e;&#x5339;&#x914d",{"_index":5532,"title":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}},"body":{}}],["6.4.3",{"_index":5544,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.3.&#x53d8;&#x91cf;&#x6355;&#x83b7",{"_index":5556,"title":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}},"body":{}}],["6.4.4",{"_index":5578,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.4.&#x7ed3;&#x6784;&#x5339;&#x914d",{"_index":5583,"title":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}},"body":{}}],["6.4.5",{"_index":5600,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.5.&#x6570;&#x7ec4;&#x5339;&#x914d",{"_index":5605,"title":{"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{}},"body":{}}],["6.4.6",{"_index":5647,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.6.or",{"_index":5620,"title":{"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{}},"body":{"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{}}}],["6.4.7",{"_index":5706,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.7.&#x5b88;&#x62a4;(guard",{"_index":5596,"title":{"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}},"body":{}}],["6.4.7.守护(guard",{"_index":5592,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{}}}],["6.4.8",{"_index":5610,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.8.&#x591a;&#x4e2a;&#x503c;&#x7684;&#x5339;&#x914d",{"_index":5613,"title":{"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}},"body":{}}],["6.4.9",{"_index":5625,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["6.4.9.&#x63d0;&#x53d6;&#x5668",{"_index":5648,"title":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}},"body":{}}],["6.5",{"_index":460,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{}}}],["6.5.&#x5b57;&#x7b26;&#x4e32;&#x63d2;&#x503c",{"_index":5675,"title":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}},"body":{}}],["6.6",{"_index":353,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{}}}],["6.6.&#x6570;&#x7ec4;&#x63a8;&#x5bfc",{"_index":5698,"title":{"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}},"body":{}}],["6.7",{"_index":423,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{}}}],["6.7.&#x8fed;&#x4ee3;&#x5668",{"_index":5737,"title":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}},"body":{}}],["6.8",{"_index":467,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{}}}],["6.8.&#x51fd;&#x6570;&#x7ed1;&#x5b9a",{"_index":5775,"title":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}},"body":{}}],["6.9",{"_index":443,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{}}}],["6.9.&#x5143;&#x6570;&#x636e",{"_index":5810,"title":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}},"body":{}}],["6.9节）定义。在每次类型化时执行，在类型被设置之后（包括跟其它类型的关系，比如类的继承），但是在它的字段被类型化之前（查看类型构建（第9.5",{"_index":762,"title":{},"body":{"9.宏/9.宏.html":{}}}],["6000",{"_index":6053,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["64",{"_index":2488,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{}}}],["65",{"_index":2701,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["65535",{"_index":1256,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["66",{"_index":4165,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["6=7",{"_index":2197,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["6=7}&#xff09",{"_index":2260,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["7",{"_index":436,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["7&#xff0c",{"_index":2248,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["7.&#x7f16;&#x8bd1;&#x5668;&#x7528;&#x6cd5",{"_index":704,"title":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}},"body":{}}],["7.1",{"_index":5251,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["7.1hxml",{"_index":573,"title":{"7.编译器用法/7.1.hxml.html#7-1HXML":{}},"body":{"7.编译器用法/7.1.hxml.html":{}}}],["7.1节）来启用，由多个模块（第8.6节）组成，可以被用编译器标记（第7.1",{"_index":6256,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{}}}],["7.2",{"_index":783,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{}}}],["7.2.&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0",{"_index":938,"title":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}},"body":{}}],["8",{"_index":450,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"8.编译器功能/8.编译器功能.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["8&#x5339;&#x914d;&#xff08;neko",{"_index":1916,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["8&#xff09",{"_index":2226,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["8&#xff1a;&#x6ca1;&#x6709;&#x539f;&#x751f;&#x7684",{"_index":2557,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["8.&#x7f16;&#x8bd1;&#x5668;&#x529f;&#x80fd",{"_index":748,"title":{"8.编译器功能/8.编译器功能.html#8-编译器功能":{}},"body":{}}],["8.1",{"_index":742,"title":{},"body":{"8.编译器功能/8.编译器功能.html":{},"8.编译器功能/8.编译器功能.html#8-编译器功能":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{}}}],["8.1.&#x5185;&#x5efa;&#x7f16;&#x8bd1;&#x5668;&#x5143;&#x6570;&#x636",{"_index":6739,"title":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}},"body":{}}],["8.2",{"_index":743,"title":{},"body":{"8.编译器功能/8.编译器功能.html":{},"8.编译器功能/8.编译器功能.html#8-编译器功能":{},"7.编译器用法/7.1.编译器标记.html":{},"10.标准库/10.7.反射/10.7.反射.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["8.2.&#x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664",{"_index":5852,"title":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}},"body":{}}],["8.3",{"_index":744,"title":{},"body":{"8.编译器功能/8.编译器功能.html":{},"8.编译器功能/8.编译器功能.html#8-编译器功能":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{}}}],["8.3.&#x7f16;&#x8bd1;&#x5668;&#x670d;&#x52a1",{"_index":6121,"title":{"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}},"body":{}}],["8.3.1",{"_index":5879,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["8.3.1.&#x6982;&#x8ff0",{"_index":5891,"title":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}},"body":{}}],["8.3.2",{"_index":5882,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["8.3.2.&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x5b8c;&#x6210",{"_index":5926,"title":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}},"body":{}}],["8.3.3",{"_index":5883,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["8.3.3.&#x8c03;&#x7528;&#x53c2;&#x6570;&#x5b8c;&#x6210",{"_index":5950,"title":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}},"body":{}}],["8.3.4",{"_index":5884,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["8.3.4.&#x7c7b;&#x578b;&#x8def;&#x5f84;&#x5b8c;&#x6210",{"_index":5984,"title":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}},"body":{}}],["8.3.5",{"_index":5999,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["8.3.5.&#x4f7f;&#x7528;&#x5b8c;&#x6210",{"_index":6004,"title":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}},"body":{}}],["8.3.5节）：列出所有编译的文件中所有指定类型、字段或者变量的出现。（模式：usag",{"_index":5885,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{}}}],["8.3.6",{"_index":6011,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["8.3.6.&#x4f4d;&#x7f6e;&#x5b8c;&#x6210",{"_index":6021,"title":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}},"body":{}}],["8.3.6节）：报告指定类型、字段或变量被定义的位置。（模式：posit",{"_index":5886,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{}}}],["8.3.7",{"_index":6032,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["8.3.7.&#x9876;&#x7ea7;&#x5b8c;&#x6210",{"_index":6040,"title":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}},"body":{}}],["8.3.7节）：列出所有在指定位置有效的标识符。（模式：toplevel",{"_index":5887,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{}}}],["8.3.8",{"_index":6052,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["8.3.8.&#x5b8c;&#x6210;&#x670d;&#x52a1",{"_index":6079,"title":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}},"body":{}}],["8.4",{"_index":745,"title":{},"body":{"8.编译器功能/8.编译器功能.html":{},"8.编译器功能/8.编译器功能.html#8-编译器功能":{},"10.标准库/10.6.模板/10.6.模板.html":{},"8.编译器功能/8.4.资源/8.4.资源.html":{}}}],["8.4.&#x8d44;&#x6e90",{"_index":6164,"title":{"8.编译器功能/8.4.资源/8.4.资源.html#8-4-资源":{}},"body":{}}],["8.4.1",{"_index":6115,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html":{}}}],["8.4.1.&#x5d4c;&#x5165;&#x8d44;&#x6e90",{"_index":6117,"title":{"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html#8-4-1-嵌入资源":{}},"body":{}}],["8.4.2",{"_index":6130,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{}}}],["8.4.2.&#x68c0;&#x7d22;&#x6587;&#x672c;&#x8d44;&#x6e90",{"_index":6134,"title":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{}},"body":{}}],["8.4.3",{"_index":6141,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{}}}],["8.4.3.&#x68c0;&#x7d22;&#x4e8c;&#x8fdb;&#x5236;&#x8d44;&#x6e90",{"_index":6146,"title":{"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}},"body":{}}],["8.4.4",{"_index":6151,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{}}}],["8.4.4.&#x5b9e;&#x73b0;&#x7ec6;&#x8282",{"_index":6154,"title":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}},"body":{}}],["8.5",{"_index":746,"title":{},"body":{"8.编译器功能/8.编译器功能.html":{},"8.编译器功能/8.编译器功能.html#8-编译器功能":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{}}}],["8.5.&#x8fd0;&#x884c;&#x65f6;&#x7c7b;&#x578b;&#x4fe1;&#x606f",{"_index":6247,"title":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}},"body":{}}],["8.5.1",{"_index":6179,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{}}}],["8.5.1.rtti",{"_index":6168,"title":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["8.6",{"_index":747,"title":{},"body":{"8.编译器功能/8.编译器功能.html":{},"8.编译器功能/8.编译器功能.html#8-编译器功能":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{}}}],["8.6.&#x9759;&#x6001;&#x5206;&#x6790;&#x4eea",{"_index":6265,"title":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}},"body":{}}],["84",{"_index":6019,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["8匹配（neko",{"_index":1877,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{}}}],["9",{"_index":251,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"9.宏/9.宏.html":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["9.&#x5b8f",{"_index":763,"title":{"9.宏/9.宏.html#9-宏":{}},"body":{}}],["9.1",{"_index":6289,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html":{}}}],["9.1.&#x5b8f;&#x4e0a;&#x4e0b;&#x6587",{"_index":6297,"title":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}},"body":{}}],["9.2",{"_index":6345,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html":{}}}],["9.2.&#x53c2;&#x6570",{"_index":6350,"title":{"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}},"body":{}}],["9.2.1.exprof",{"_index":6311,"title":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{}}}],["9.2.2",{"_index":6333,"title":{},"body":{"9.宏/9.2.参数/9.2.2.常数表达式.html":{}}}],["9.2.2.&#x5e38;&#x6570;&#x8868;&#x8fbe;&#x5f0f",{"_index":6336,"title":{"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{}},"body":{}}],["9.2.3",{"_index":6339,"title":{},"body":{"9.宏/9.2.参数/9.2.3.其它的参数.html":{}}}],["9.2.3.&#x5176;&#x5b83;&#x7684;&#x53c2;&#x6570",{"_index":6342,"title":{"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{}},"body":{}}],["9.2节）中解释的一个合乎逻辑的结论：参数表达式从不被类型化，所以它不可能让编译器使用合一（第3.5",{"_index":6318,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{}}}],["9.3",{"_index":240,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"9.宏/9.3.具体化/9.3.具体化.html":{}}}],["9.3.&#x5177;&#x4f53;&#x5316",{"_index":6436,"title":{"9.宏/9.3.具体化/9.3.具体化.html#9-3-具体化":{}},"body":{}}],["9.3.1",{"_index":6359,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{}}}],["9.3.1.&#x8868;&#x8fbe;&#x5f0f;&#x5177;&#x4f53;&#x5316",{"_index":6373,"title":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}},"body":{}}],["9.3.2",{"_index":6398,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{}}}],["9.3.2.&#x7c7b;&#x578b;&#x5177;&#x4f53;&#x5316",{"_index":6410,"title":{"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}},"body":{}}],["9.3.3",{"_index":6416,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html":{}}}],["9.3.3.&#x7c7b;&#x5177;&#x4f53;&#x5316",{"_index":6426,"title":{"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}},"body":{}}],["9.4",{"_index":5425,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"9.宏/9.4.工具/9.4.工具.html":{}}}],["9.4.&#x5de5;&#x5177",{"_index":6448,"title":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}},"body":{}}],["9.5",{"_index":3428,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{}}}],["9.5.&#x7c7b;&#x578b;&#x6784;&#x5efa",{"_index":6569,"title":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}},"body":{}}],["9.5.1",{"_index":6469,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{}}}],["9.5.1.&#x679a;&#x4e3e;&#x6784;&#x5efa",{"_index":6489,"title":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}},"body":{}}],["9.5.2.@:autobuild",{"_index":6501,"title":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{}}}],["9.5.3.@:genericbuild",{"_index":6521,"title":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{}}}],["9.6",{"_index":6647,"title":{},"body":{"9.宏/9.6.限制/9.6.限制.html":{}}}],["9.6.&#x9650;&#x5236",{"_index":6649,"title":{"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{}},"body":{}}],["9.6.1",{"_index":6648,"title":{},"body":{"9.宏/9.6.限制/9.6.限制.html":{},"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{}}}],["9.6.1macro",{"_index":6616,"title":{"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}},"body":{"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{}}}],["9.6.2",{"_index":6619,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.限制.html":{},"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{}}}],["9.6.2.&#x9759;&#x6001;&#x6269;&#x5c55",{"_index":6624,"title":{"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}},"body":{}}],["9.6.3",{"_index":6510,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.限制.html":{},"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{}}}],["9.6.3.&#x6784;&#x5efa;&#x987a;&#x5e8f",{"_index":6637,"title":{"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}},"body":{}}],["9.6.4",{"_index":6644,"title":{},"body":{"9.宏/9.6.限制/9.6.4.类型参数.html":{},"9.宏/9.6.限制/9.6.限制.html":{},"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{}}}],["9.6.4.&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":6645,"title":{"9.宏/9.6.限制/9.6.4.类型参数.html#9-6-4-类型参数":{}},"body":{}}],["9.7",{"_index":760,"title":{},"body":{"9.宏/9.宏.html":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html":{}}}],["9.7.&#x521d;&#x59cb;&#x5316;&#x5b8f",{"_index":6607,"title":{"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}},"body":{}}],["9.7节）中详述。而这个api可以用于所有宏的种类，必须注意初始化宏的任何外部修改。这源于未定义的构建顺序（第9.6.3",{"_index":6295,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html":{}}}],["9._",{"_index":1872,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["90",{"_index":1944,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["92",{"_index":1243,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["93.2",{"_index":5002,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["97121",{"_index":5006,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["98",{"_index":6020,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["9]&#xff09",{"_index":2249,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["9和10",{"_index":3187,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{}}}],["_",{"_index":243,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["_**&#xff1a;&#x4e0d;&#x88ab;&#x68c0;&#x67e5;&#xff0c;&#x56e0;&#x4e3a;&#x524d;&#x4e00;&#x884c;&#x5df2;&#x7ecf;&#x5339;&#x914d;&#x6210;&#x529f",{"_index":5542,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["__rtti",{"_index":6243,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{}}}],["__rtti&#xff0c;&#x5e76;&#x53ef;&#x4ee5;&#x901a;&#x8fc7",{"_index":6251,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["_emb",{"_index":6655,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["_g",{"_index":1592,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["_g.set_x(_g.get_x",{"_index":4326,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["_hx_",{"_index":268,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{}}}],["_implicitcastfield.myabstract_impl_.fromstr",{"_index":3192,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["_implicitcastfield.myabstract_impl_.toarray(a",{"_index":3193,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["a&#x201d;&#x5173;&#x7cfb;&#xff0c;&#x5373;&#x6bcf;&#x4e2a",{"_index":2740,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["a&#x201d;&#xff08;subsumption&#xff0c;&#x5305;&#x542b;&#x67b6;&#x6784;&#xff0c;&#x6307;&#x7684;&#x662f;&#x7c7b;&#x7684;&#x7236;&#x5b50;&#x7ee7;&#x627f;&#x5173;&#x7cfb;&#xff09;&#xff1a;&#x4efb;&#x4f55",{"_index":2769,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["a.a",{"_index":4102,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["a.a.b",{"_index":4105,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["a.b",{"_index":4104,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["a.equals(b",{"_index":2506,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["a.getstr",{"_index":3376,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["a.iter",{"_index":5734,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["a.iterator().next",{"_index":3587,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["a.length",{"_index":3586,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["a.push",{"_index":5193,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["a.push(i",{"_index":5692,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["a.test",{"_index":6621,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["a.tob",{"_index":3197,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["a/a.hx",{"_index":4101,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["a:myabstractint",{"_index":3298,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["a[0",{"_index":3348,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["aaabcbcbcbz",{"_index":1798,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{}}}],["aaabcbcbcxx",{"_index":1802,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{}}}],["ab",{"_index":3296,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["ab]+/g",{"_index":1814,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{}}}],["abc",{"_index":1781,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["abcdeeeeefghi",{"_index":1774,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["abi",{"_index":6651,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["abi/cal",{"_index":6652,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["abov",{"_index":3497,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["absenc",{"_index":3865,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["absolut",{"_index":789,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["abstract",{"_index":277,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["abstractint",{"_index":3471,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["abstract）（第2.8",{"_index":1638,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html":{}}}],["acceler",{"_index":910,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["accept",{"_index":3485,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["access",{"_index":186,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["access(&#x2018;.&#x2019",{"_index":6745,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["access(myclass.foo",{"_index":5297,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["access(target",{"_index":5290,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["accessed/generated/modi&#xfb01;",{"_index":5348,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["accessed/generated/modiﬁ",{"_index":5302,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{}}}],["accessidenti&#xfb01;er,th",{"_index":4440,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["accessidentiﬁer,th",{"_index":4431,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{}}}],["accessor",{"_index":1700,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["accord",{"_index":5980,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["accordingli",{"_index":3651,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["acesss",{"_index":5298,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["achiev",{"_index":2937,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["action",{"_index":1093,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["actionscript",{"_index":693,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{}}}],["actual",{"_index":1545,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["actual:t",{"_index":3659,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["ad",{"_index":3202,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["adc",{"_index":5421,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["add",{"_index":445,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["add(3",{"_index":5645,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["add(3,1)&#x7684;&#x7ed3;&#x679c;&#xff0c;3&#x662f;&#x5339;&#x914d;&#x7684;&#x503c;&#xff0c;mul(4,3)&#x4e2d;4&#x662f;add&#x8c03;&#x7528;&#x7684;&#x7ed3;&#x679c;&#x3002;&#x9700;&#x8981;&#x6ce8;&#x610f;&#x7684;&#x662f;&#xff0c;a&#x5728;&#x7b2c;&#x4e8c;&#x4e2a",{"_index":5664,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["add(3,1)的结果，3是匹配的值，mul(4,3)中4是add调用的结果。需要注意的是，a",{"_index":5644,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{}}}],["add(x",{"_index":6348,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["addchild",{"_index":2335,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}}}],["addit",{"_index":456,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["addition",{"_index":1279,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["address",{"_index":4217,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["addsaclasspathwher",{"_index":671,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["adher",{"_index":4588,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["admit",{"_index":3219,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{}}}],["adt",{"_index":397,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["adt）描述，如haxe语言中的枚举。除此之外，haxe支持它们的广义的变体如gadt",{"_index":394,"title":{},"body":{"6.语言特性/6.语言特性.html":{}}}],["advanc",{"_index":790,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["advent",{"_index":3516,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["affect",{"_index":4862,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["afterward",{"_index":4036,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["ag",{"_index":787,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{}}}],["again",{"_index":1805,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["against",{"_index":486,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["age:30",{"_index":2064,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["age:45",{"_index":2089,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{}}}],["ai1i2u4i7ni9h",{"_index":2188,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["algebra",{"_index":395,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["algorithm",{"_index":902,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["alia",{"_index":4159,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["allow",{"_index":261,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["allow(i",{"_index":5308,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["allow(main",{"_index":5294,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["allow(main.main",{"_index":5296,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["allow(target",{"_index":5289,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["allowed&#x201d;&#x3002;&#x3010;&#x73af;&#x5883;&#xff1a;hax",{"_index":2611,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["allowed”。【环境：hax",{"_index":2593,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{}}}],["along",{"_index":649,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["alreadi",{"_index":4357,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["altern",{"_index":2963,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["although",{"_index":1372,"title":{},"body":{"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["alway",{"_index":4672,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["ambigu",{"_index":3225,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{}}}],["amf",{"_index":1389,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["amf&#x8fdc;&#x7a0b;&#x670d;&#x52a1;&#x5668",{"_index":1439,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["amfconnection.connect(cnx",{"_index":1387,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["amfconnection.urlconnect(url:str",{"_index":1386,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["amfphp",{"_index":1390,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["amount",{"_index":898,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["amp",{"_index":458,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["amp;&#xff0c",{"_index":5914,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["amp;&amp",{"_index":2079,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["amp;&amp;&#xff0c",{"_index":5274,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["amp;gt",{"_index":5921,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["amp;lt",{"_index":5890,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["analog",{"_index":5762,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["analyz",{"_index":793,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["analyzer(modul",{"_index":6258,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["analyzer(module)&#x3002;&#x8981;&#x7981;&#x7528;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#xff0c;&#x4f7f;&#x7528",{"_index":6276,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["analyzer(no_modul",{"_index":6259,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["ancestor",{"_index":4626,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["andha",{"_index":4338,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["ang",{"_index":1942,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["ang.todegre",{"_index":1943,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["angl",{"_index":1935,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["anim",{"_index":1844,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["annot",{"_index":875,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["anonym",{"_index":342,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["anoth",{"_index":3201,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["answer",{"_index":640,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["anymor",{"_index":4689,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["anyth",{"_index":3478,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["anything,includ",{"_index":5695,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["anywher",{"_index":4609,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{}}}],["anywhere,but",{"_index":4479,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["api",{"_index":797,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.字符串.html":{},"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.远程处理.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["api&#x4e2d;&#x8be6;&#x7ec6;&#x4ecb;&#x7ecd;&#x3002",{"_index":2313,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["api&#x4e2d;&#x90e8;&#x5206;&#x4f7f;&#x7528;&#x4e86",{"_index":3163,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["api&#xff1a",{"_index":5816,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["apo",{"_index":1265,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{}}}],["apos;boat&apo",{"_index":2050,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["apos;called&apo",{"_index":2323,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["apos;car&apo",{"_index":2049,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["apos;cat&apo",{"_index":2051,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["apos;child&apo",{"_index":2365,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}}}],["apos;child1&apo",{"_index":2484,"title":{},"body":{"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{}}}],["apos;child2&apo",{"_index":2485,"title":{},"body":{"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{}}}],["apos;dog&apo",{"_index":1848,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["apos;error",{"_index":1462,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["apos;foo&apo",{"_index":1264,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["apos;fox",{"_index":1849,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["apos;frog&apo",{"_index":2052,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["apos;hello",{"_index":2375,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["apos;john&apo",{"_index":2368,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}}}],["apos;name&apo",{"_index":2367,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["apos;root",{"_index":2362,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{}}}],["apos;root&apo",{"_index":2359,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{}}}],["apos;roothax",{"_index":2392,"title":{},"body":{"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}}}],["apos;str&apo",{"_index":3891,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["apos;world&apo",{"_index":1796,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{}}}],["apos;x&apos;.cod",{"_index":5038,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["apos;xxx&apo",{"_index":5037,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["apos;{r",{"_index":1309,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["appar",{"_index":3512,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["apparently,an",{"_index":3770,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["appear",{"_index":5046,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{}}}],["append",{"_index":438,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["appli",{"_index":470,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["applic",{"_index":469,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["appropri",{"_index":1499,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["apubl",{"_index":6562,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["arbitrari",{"_index":4497,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["arg",{"_index":6187,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["arg1",{"_index":6404,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["arg2",{"_index":6405,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["argument",{"_index":472,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["arguments,a",{"_index":5807,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["arguments,so",{"_index":5767,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["arguments,th",{"_index":5809,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["arithmet",{"_index":5129,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["around",{"_index":4593,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["array",{"_index":354,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["array&#x3002",{"_index":5957,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["array&#x3002;&#x5b83;&#x7684",{"_index":3435,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["array&#x3002;&#x8fd9;&#x4f7f;&#x7684;&#x63a8;&#x9001;&#x53e6;&#x4e00;&#x4e2a;&#x517c;&#x5bb9;base&#x7684;&#x7c7b;&#x578b;&#xff08;otherchild&#xff09;&#x5230;&#x4e86;&#x6570;&#x7ec4;&#x3002;&#x7136;&#x800c;&#xff0c;&#x6211;&#x4eec;&#x539f;&#x59cb;&#x7684;&#x5f15;&#x7528",{"_index":3809,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["array&#x7c7b;&#x578b;&#xff0c;&#x5b8f;&#x53ef;&#x4ee5;&#x4ee5;&#x6570;&#x7ec4;&#x5f62;&#x5f0f;&#x63a5;&#x53d7;&#x4e00;&#x4e2a;&#x4efb;&#x610f;&#x6570;&#x91cf;&#x7684;&#x989d;&#x5916;&#x53c2;&#x6570;&#xff1a",{"_index":6344,"title":{},"body":{"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{}}}],["array&#x7c7b;&#x578b;&#xff0c;&#x5f53;&#x6211;&#x4eec;&#x5728;&#x8fed;&#x4ee3;&#x5b83;&#x7684;&#x4e00;&#x4e2a;&#x5143;&#x7d20;&#x7684;&#x65f6;&#x5019;&#x9047;&#x5230",{"_index":3811,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["array&#xff0c;&#x5373;&#x4f7f",{"_index":3802,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["array&#xff0c;&#x6240;&#x4ee5;&#x5143;&#x7d20;&#x7c7b;&#x578b;&#x662f",{"_index":4010,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["array&#xff1a",{"_index":3672,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["array&amp;lt;string&amp;gt",{"_index":5948,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["array[0",{"_index":5604,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{}}}],["array[1",{"_index":5603,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{}}}],["array[1]&#x5339;&#x914d;6&#xff0c;array[0]&#x5141;&#x8bb8;&#x662f;&#x4efb;&#x4f55;&#x5185;&#x5bb9;&#x3002",{"_index":5609,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{}}}],["array[1]匹配6，array[0",{"_index":5602,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{}}}],["arrayaccess",{"_index":3338,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["arraybas",{"_index":3767,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["arraychild",{"_index":3766,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["arraydynam",{"_index":1598,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["arrayhaxe.macro.expr.field",{"_index":6557,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["arrayinstance.push(&#x201c;foo&#x201d",{"_index":3677,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["arrayinstance.push(foo",{"_index":3637,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["arrayinstance.push(“foo",{"_index":3643,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["arrayint",{"_index":3211,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["arraystr",{"_index":3591,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["arrayunknown0",{"_index":4037,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["arraywrit",{"_index":3339,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["array。这使的推送另一个兼容base的类型（otherchild",{"_index":3779,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["array的位置（如调用参数，块元素），$a",{"_index":6361,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{}}}],["array类型的iter",{"_index":5736,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{}}}],["arrow",{"_index":5167,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["as3",{"_index":86,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["as3&#x6e90;&#x4ee3;&#x7801;&#x65f6;&#x5b9a;&#x4e49",{"_index":950,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["ascii",{"_index":1246,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.字符串.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["aspect",{"_index":3519,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["assertequ",{"_index":1528,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["assertequals(a,b",{"_index":1536,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{}}}],["assertfalse(a",{"_index":1539,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{}}}],["asserttrue(a",{"_index":1538,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{}}}],["assign",{"_index":2896,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["associ",{"_index":5173,"title":{},"body":{"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["assum",{"_index":1280,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["ast",{"_index":755,"title":{},"body":{"9.宏/9.宏.html":{},"7.编译器用法/7.1.编译器标记.html":{}}}],["ast&#x5230;&#x4e00;&#x4e2a;&#x8f6c;&#x50a8;&#x5b50;&#x76ee;&#x5f55",{"_index":969,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["ast&#x662f;&#x89e3;&#x6790;haxe&#x4ee3;&#x7801;&#x5230;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x5316;&#x7684;&#x7ed3;&#x6784;&#x7684;&#x7ed3;&#x679c;&#x3002;&#x8fd9;&#x4e2a;&#x7ed3;&#x6784;&#x88ab;&#x901a;&#x8fc7;&#x5728;haxe&#x6807;&#x51c6;&#x5e93;&#x7684",{"_index":766,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["astat",{"_index":6561,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["astr",{"_index":3343,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["ast是解析haxe代码到一个类型化的结构的结果。这个结构被通过在hax",{"_index":756,"title":{},"body":{"9.宏/9.宏.html":{}}}],["atcompil",{"_index":4596,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["athi",{"_index":6182,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["att",{"_index":2353,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["att.ag",{"_index":3059,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["att.incom",{"_index":3060,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["att.nam",{"_index":3057,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["attempt",{"_index":3665,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["attribut",{"_index":1080,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["augment",{"_index":455,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["author",{"_index":4718,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["autobuild",{"_index":761,"title":{},"body":{"9.宏/9.宏.html":{},"9.宏/9.宏.html#9-宏":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["autobuild(autobuildingmacro.frombaseclass",{"_index":6507,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["autobuild(autobuildingmacro.frominterfac",{"_index":6506,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["autobuild(mymacro.build",{"_index":6632,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["autobuildingmacro",{"_index":6502,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["autobuildingmacro.hx",{"_index":6508,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["automat",{"_index":6672,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["avail",{"_index":1350,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["available,resolv",{"_index":4265,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["avm",{"_index":1104,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["avm2&#xff08;adob",{"_index":1137,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["avm2（adob",{"_index":1098,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["avoid",{"_index":625,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["awar",{"_index":4719,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["away",{"_index":5358,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["awesom",{"_index":1301,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["awkward",{"_index":5429,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["a”（subsumpt",{"_index":2759,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{}}}],["a和b相等则成功，a是测试的值，b",{"_index":1537,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{}}}],["b",{"_index":1223,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["b&#x3002;&#x5f53;&#x4e24;&#x8005;&#x4e2d;&#x6709;&#x4e00;&#x4e2a",{"_index":3935,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["b&#xff0c;&#x5e76;&#x4e14;&#x81f3;&#x5c11;&#x5b83;&#x4eec;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x4e3a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x65f6;&#xff0c;&#x9009;&#x62e9;&#x7684;&#x89c4;&#x5219;&#x5f88;&#x7b80;&#x5355;&#xff1a",{"_index":3264,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["b&#xff0c;&#x7c7b;&#x578b",{"_index":3954,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["b(v",{"_index":6485,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["b(valu",{"_index":6488,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["b.getstr",{"_index":3378,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["b.toc",{"_index":3198,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["b:myabstractint",{"_index":3299,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["b[^c]/g",{"_index":1801,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{}}}],["back",{"_index":3207,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["background",{"_index":498,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["backslash",{"_index":1242,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["bad",{"_index":3783,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["balanc",{"_index":4086,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["bar",{"_index":441,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["base",{"_index":3750,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["base&#xff0c;&#x4f46;&#x662f;&#x8fd0;&#x884c;&#x65f6;&#x4ecd;&#x7136;&#x67e5;&#x627e;&#x6b63;&#x786e;&#x7684;&#x65b9;&#x6cd5;&#x5373;&#x7c7b;child&#x4e2d;&#x7684",{"_index":4473,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["base,but",{"_index":4454,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["base,which",{"_index":5066,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["base64",{"_index":2198,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html":{}}}],["base64&#x7f16;&#x7801;&#x5b57;&#x8282;&#x957f;&#x5ea6;&#xff0c;&#x7136;&#x540e;&#x5192;&#x53f7",{"_index":2262,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["base64&#xff09",{"_index":2435,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["basefield",{"_index":4618,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["bases.push",{"_index":3777,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["base，但是运行时仍然查找正确的方法即类child",{"_index":4452,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{}}}],["basic",{"_index":636,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["be",{"_index":411,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["becom",{"_index":3212,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["befor",{"_index":628,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["begin",{"_index":652,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["behavior",{"_index":167,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["belong",{"_index":208,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{}}}],["bene&#xfb01;t",{"_index":537,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["beneﬁt",{"_index":417,"title":{},"body":{"6.语言特性/6.语言特性.html":{}}}],["beta",{"_index":1096,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["between",{"_index":832,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["bin/contact.j",{"_index":613,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["bin/gallery.j",{"_index":611,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["bin/homepage.j",{"_index":588,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["binari",{"_index":697,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["bind",{"_index":480,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["bindabl",{"_index":4730,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["binop",{"_index":4135,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["bitmap",{"_index":6654,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["bitwis",{"_index":5127,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["blit",{"_index":908,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["block",{"_index":4152,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["blue",{"_index":2820,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["blurri",{"_index":4221,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["bmp",{"_index":1210,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["boat",{"_index":1990,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{}}}],["bob",{"_index":1600,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["bodi",{"_index":230,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["bool",{"_index":1972,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{}}}],["bool&#xff0c",{"_index":2431,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["bool&#xff0c;float",{"_index":2620,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["boolean",{"_index":5009,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["bool，float",{"_index":2614,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{}}}],["boost",{"_index":3711,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["boot",{"_index":827,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["both",{"_index":3214,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["bottom",{"_index":4270,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["bottommost",{"_index":4144,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["bound",{"_index":3639,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["box",{"_index":928,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["brace",{"_index":3483,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["bracket",{"_index":3636,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["branch",{"_index":5243,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["break",{"_index":278,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{}}}],["break&#x5173;&#x952e;&#x5b57;&#x4f1a;&#x79bb;&#x5f00;&#x5b83;&#x6240;&#x58f0;&#x660e;&#x7684;&#x63a7;&#x5236;&#x6d41;&#x6700;&#x6df1;&#x7684;&#x5faa;&#x73af;&#xff0c;&#x505c;&#x6b62;&#x8fdb;&#x4e00;&#x6b65;&#x7684;&#x8fed;&#x4ee3;&#xff1a",{"_index":5047,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["break&#xff08;&#x7b2c;5.20&#x8282;&#xff09;&#x5173;&#x952e;&#x5b57;&#x5728;haxe&#x662f;&#x4e0d;&#x652f;&#x6301;&#x7684;&#x3002",{"_index":4952,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["break&#xff08;&#x7b2c;5.20&#x8282;&#xff09;&#x8868;&#x8fbe;&#x5f0f;&#x5f71;&#x54cd;&#xff0c;&#x4e5f;&#x53d7",{"_index":4882,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["break关键字在hax",{"_index":5044,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html":{}}}],["break（第5.20",{"_index":4860,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{}}}],["break（第5.20节）关键字在hax",{"_index":4937,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html":{}}}],["bridg",{"_index":166,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["bridgeproperti",{"_index":6657,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["brie&#xfb02;i",{"_index":3960,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["brieﬂi",{"_index":3919,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{}}}],["bring",{"_index":5452,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["broken",{"_index":5309,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["brought",{"_index":5461,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["brown",{"_index":1837,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["browser",{"_index":992,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["bruno",{"_index":1116,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["buffer",{"_index":437,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["bug",{"_index":1106,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{}}}],["bug&#xff0c;&#x68c0;&#x67e5",{"_index":3364,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["build",{"_index":582,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"9.宏/9.宏.html":{},"9.宏/9.宏.html#9-宏":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["build(enumbuildingmacro.build",{"_index":6483,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["build(typebuildingmacro.build(\"myfunc",{"_index":6565,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{}}}],["build(typebuildingmacro.build(myfunc",{"_index":6579,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["build.hxml",{"_index":585,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["build.xml",{"_index":6660,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["buildxml",{"_index":6658,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["built",{"_index":5248,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["byte",{"_index":1277,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["bytearray",{"_index":6152,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{}}}],["bytecod",{"_index":862,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["bytes.length",{"_index":6145,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["bytes.readstr",{"_index":6144,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["b{}:array",{"_index":6362,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["c",{"_index":88,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["c#&#x2019;",{"_index":6747,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["c#/java",{"_index":847,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["c#’",{"_index":6737,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{}}}],["c#中的serializ",{"_index":799,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{}}}],["c&#x2019",{"_index":566,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["c++&#x76ee;&#x6807;&#xff09",{"_index":1917,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["c++&#xff08;&#x7b2c;12.5&#x8282;&#xff09;&#x6e90;&#x4ee3;&#x7801;&#x5230;&#x6307;&#x5b9a;&#x76ee;&#x5f55;&#xff0c;&#x5e76;&#x4f7f;&#x7528;&#x539f;&#x751f;c++&#x7f16;&#x8bd1;&#x5668;&#x7f16;&#x8bd1;&#x3002",{"_index":737,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["c++&#xff0c;java&#xff0c;c#&#xff0c;neko&#xff0c;flash&#xff1a;32&#x4f4d;&#x5e26;&#x7b26;&#x53f7;&#x6574;&#x6570;&#x6709;&#x901a;&#x5e38;&#x7684;&#x6ea2;&#x51fa;&#x60ef;&#x4f8b;&#x3002",{"_index":2555,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["c++(12.5",{"_index":699,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["c++（第12.5节）源代码到指定目录，并使用原生c",{"_index":685,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["c++，java，c#，neko，flash：32",{"_index":2547,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{}}}],["c.i",{"_index":2413,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["c.intfield",{"_index":3106,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["c.it",{"_index":4849,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["c.meta.add",{"_index":6635,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["c.meta.ha",{"_index":6634,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["c.myfunc",{"_index":6422,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["c.po",{"_index":6636,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["c.present",{"_index":3104,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["c.resolvem",{"_index":3107,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["c.stringfield",{"_index":3105,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["c.x",{"_index":2412,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["c1",{"_index":4163,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["c2",{"_index":4164,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["cach",{"_index":881,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["caleb",{"_index":1050,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["call",{"_index":191,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.7.反射/10.7.反射.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["callabl",{"_index":6661,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["callback",{"_index":5769,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["callback&#x5173;&#x952e;&#x5b57;&#xff0c;&#x53ef;&#x4ee5;&#x88ab;&#x8c03;&#x7528;&#x4e3a;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x53c2;&#x6570;&#x7136;&#x540e;&#x540e;&#x9762;&#x8ddf;&#x4efb;&#x4f55;&#x6570;&#x91cf;&#x7684;&#x7ed1;&#x5b9a;&#x53c2;&#x6570;&#x3002;&#x8fd9;&#x4e2a;&#x540d;&#x5b57;&#x6e90;&#x4e8e;&#x4e00;&#x4e2a;&#x5e38;&#x89c1;&#x7684;&#x7528;&#x6cd5;&#xff0c;&#x662f;&#x4e00;&#x4e2a;&#x56de;&#x8c03;&#x51fd;&#x6570;&#x88ab;&#x521b;&#x5efa;&#x548c",{"_index":5795,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["callexpr(arg",{"_index":6605,"title":{},"body":{"9.宏/9.7.初始化宏/9.7.初始化宏.html":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["callhom",{"_index":4458,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["callmethod",{"_index":2298,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["calls&#x201d",{"_index":4846,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["callstack",{"_index":5961,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["cancel",{"_index":852,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["candid",{"_index":4657,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["cannass",{"_index":1090,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["cannasse&#xff0c;&#x76ee;&#x524d;&#x4ecd;&#x662f",{"_index":1141,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["cannasse&#xff1a;hax",{"_index":1068,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["cannasse：hax",{"_index":1057,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{}}}],["canon",{"_index":6698,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["capit",{"_index":1995,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["captur",{"_index":5551,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["car",{"_index":1989,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{}}}],["car,cat",{"_index":1998,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["care",{"_index":3518,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["case",{"_index":246,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["case&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5.17&#x8282;&#xff09;&#x3002",{"_index":5050,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["case,access",{"_index":4381,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["case体表达式的类型和default表达式的类型必须是统一的（第3.5",{"_index":4940,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html":{}}}],["case才被采用，否则匹配继续下一个cas",{"_index":5595,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{}}}],["case表达式（第5.17",{"_index":5045,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html":{}}}],["cast",{"_index":279,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["cast&#xff08;&#x7b2c;5.23&#x8282;&#xff09;&#x7834;&#x574f;&#x4e86;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#xff0c;&#x56e0;&#x6b64;&#x5141;&#x8bb8;&#x4e86;&#x6ce8;&#x91ca;&#x884c;&#x540e;&#x7684;&#x8d4b;&#x503c;&#x3002;&#x6211;&#x4eec;&#x4fdd;&#x5b58;&#x4e00;&#x4e2a;&#x5f15;&#x7528",{"_index":3807,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["casts(5.23.1),th",{"_index":5063,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["cast（第5.23",{"_index":3778,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["cat",{"_index":1991,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{}}}],["catch",{"_index":280,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["catch&#x5757;&#x6355;&#x6349;&#x5230;&#x3002;&#x8fd9;&#x4e9b;&#x5757;&#x7531;&#x4e0b;&#x9762;&#x90e8;&#x5206;&#x7ec4;&#x6210;&#xff1a",{"_index":4972,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["catch($name:dynam",{"_index":6370,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["catch块（第5.18",{"_index":5058,"title":{},"body":{"5.表达式/5.22.throw/5.22.throw.html":{}}}],["caught",{"_index":4965,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["caus",{"_index":3520,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["certain",{"_index":180,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["chain",{"_index":4395,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{}}}],["chang",{"_index":876,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["chapter",{"_index":675,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["charact",{"_index":247,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["characterist",{"_index":4358,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["charat",{"_index":5920,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["charat(k",{"_index":3345,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["charat(k).touppercas",{"_index":3347,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["charcodeat",{"_index":5924,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["check",{"_index":257,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["checker",{"_index":3776,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["checks,e.g",{"_index":5071,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["checks,so",{"_index":5070,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["chid1",{"_index":3899,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["child",{"_index":2336,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["child&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5230;base&#x3002;&#x539f;&#x56e0;&#x53ef;&#x80fd;&#x6bd4;&#x8f83;&#x610f;&#x5916;&#xff1a;&#x56e0;&#x4e3a",{"_index":3803,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["child&#x7c7b;&#xff0c;&#x7ee7;&#x627f;base&#x7c7b;&#x4e5f;&#x6709;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5",{"_index":4466,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["child.callhom",{"_index":4459,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["child.mymethod",{"_index":4448,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["child1",{"_index":2479,"title":{},"body":{"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["child1.basefield",{"_index":4621,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["child1.child1field",{"_index":4622,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["child1field",{"_index":4619,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["child1field&#x4e0d;&#x80fd;&#x88ab;&#x4ece;child2&#x4e2d;&#x8bbf;&#x95ee;&#x3002",{"_index":4642,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["child1field不能被从child2",{"_index":4624,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{}}}],["child1类的实例为base，因为child1是一个base的子类（第2.3.2",{"_index":5064,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{}}}],["child2",{"_index":2480,"title":{},"body":{"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["child2&#xff0c;&#x8fd9;&#x662f;&#x4e0d;&#x88ab;&#x5141;&#x8bb8;&#x7684;&#xff0c;&#x56e0;&#x4e3a;child2&#x7684;&#x5b9e;&#x4f8b;&#x5e76;&#x4e0d;&#x662f;child1&#x7c7b;&#x578b;&#x7684;&#x3002",{"_index":5077,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["child2field",{"_index":4620,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["child2类中访问，即使child1是不同的类型，child1",{"_index":4623,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{}}}],["child2，这是不被允许的，因为child2的实例并不是child1",{"_index":5065,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{}}}],["childchild",{"_index":4590,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["children",{"_index":2349,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["child可以被分配到bas",{"_index":3769,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["child类，继承bas",{"_index":4449,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{}}}],["choic",{"_index":4675,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["choos",{"_index":6703,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["chr",{"_index":5729,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["circuit",{"_index":5157,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["class",{"_index":141,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["class&#x201d",{"_index":3567,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["class&#x5173;&#x952e;&#x5b57;&#x88ab;extern",{"_index":5397,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["class(2.3.2",{"_index":4717,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["class,an",{"_index":3751,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["class/funct",{"_index":3709,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["class/packag",{"_index":5305,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["classcod",{"_index":6662,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["classes,it",{"_index":3746,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["classic",{"_index":837,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["class关键字被extern",{"_index":5371,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["clean",{"_index":3501,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["clear",{"_index":3864,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["clearli",{"_index":3870,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["clearly,int",{"_index":5458,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["client",{"_index":1409,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["client中的url",{"_index":1420,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["close",{"_index":4485,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{}}}],["closur",{"_index":432,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["cnx",{"_index":1410,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["cnx.server.foo.call([1,2",{"_index":1416,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["cnx.seterrorhandl",{"_index":1413,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["code",{"_index":7,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.字符串.html":{},"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["codepoint",{"_index":1205,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["collect",{"_index":4850,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["colon",{"_index":4934,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["color",{"_index":494,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["combin",{"_index":231,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["come",{"_index":658,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["comfort",{"_index":5674,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["comma",{"_index":3635,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["command",{"_index":639,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["comment",{"_index":579,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["common",{"_index":370,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["commun",{"_index":446,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["commut",{"_index":3289,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["compact",{"_index":860,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["compar",{"_index":5164,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["comparison",{"_index":5161,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["compat",{"_index":822,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["compil",{"_index":197,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.字符串.html":{},"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["compiler&#xff09;&#x548c;&#x5185;&#x90e8;&#x7684;mtypes&#x8bed;&#x8a00;&#x7ee7;&#x4efb;&#x8005;&#xff0c;&#x5c1d;&#x8bd5;&#x5c06;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x7684;&#x5e94;&#x7528;&#x6210;&#x4e3a;&#x4e00;&#x4e2a;&#x9762;&#x5411;&#x5bf9;&#x8c61;&#x8bed;&#x8a00;&#x3002;nicola",{"_index":1130,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["compiler.defin",{"_index":6296,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["compilergener",{"_index":6663,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["compiler）和内部的mtypes语言继任者，尝试将类型推断的应用成为一个面向对象语言。nicola",{"_index":1094,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["compiletim",{"_index":4733,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["complet",{"_index":871,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["complex",{"_index":485,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["complextyp",{"_index":6401,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["complextype&#x7684",{"_index":6455,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["complextype&#x7684;&#x6bcf;&#x4e2a;&#x6784;&#x9020;&#x51fd;&#x6570;&#x90fd;&#x6709;&#x4e0d;&#x540c;&#x7684;&#x8bed;&#x6cd5;&#xff1a",{"_index":6415,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["complextypetool",{"_index":6439,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["compliant",{"_index":842,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["compon",{"_index":3794,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["composit",{"_index":913,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["compound",{"_index":3793,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["comprehens",{"_index":355,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["compress",{"_index":885,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["con&#xfb01;gur",{"_index":5261,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["con&#xfb02;ict",{"_index":4194,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["concaten",{"_index":5151,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["concept",{"_index":4594,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["concis",{"_index":3500,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["conclud",{"_index":162,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{}}}],["concret",{"_index":3475,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["condit",{"_index":378,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["condition1",{"_index":4911,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["condition2",{"_index":4912,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["configur",{"_index":583,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["conform",{"_index":3479,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["connect",{"_index":6054,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["consequ",{"_index":3648,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["consid",{"_index":194,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["consist",{"_index":1211,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["consol",{"_index":2068,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{}}}],["console.log(_abstractoperatoroverload.myabstract_impl_.repeat(a",{"_index":3288,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["console.log(a",{"_index":3474,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["console.log(map",{"_index":3342,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["console.log(root/program/main.hx:5:,hax",{"_index":4691,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["console.log(sum",{"_index":1595,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["const",{"_index":6334,"title":{},"body":{"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["const&#xff0c;hax",{"_index":6552,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["const_propag",{"_index":6260,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["constant",{"_index":4263,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["constrain",{"_index":505,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["constraint",{"_index":501,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["construct",{"_index":326,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["constructor",{"_index":3484,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["const，hax",{"_index":6532,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{}}}],["contain",{"_index":504,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["content",{"_index":895,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["context",{"_index":256,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["context.currentpo",{"_index":6482,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["context.getbuildfield",{"_index":6292,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["context.getloc",{"_index":6291,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["context.getlocalclass",{"_index":6633,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["context.getlocalmethod",{"_index":6293,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["context.getlocaltyp",{"_index":6504,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["context.typeof(",{"_index":6623,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["continu",{"_index":281,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["continue&#x5173;&#x952e;&#x5b57;&#x7ed3;&#x675f;&#x5b83;&#x6240;&#x58f0;&#x660e;&#x7684;&#x6700;&#x6df1;&#x5904;&#x7684;&#x5f53;&#x524d;&#x8fed;&#x4ee3;&#xff0c;&#x4f7f;&#x5faa;&#x73af;&#x6761;&#x4ef6;&#x88ab;&#x68c0;&#x67e5;&#x4e8e;&#x4e0b;&#x4e00;&#x6b21;&#x8fed;&#x4ee3;&#xff1a",{"_index":5054,"title":{},"body":{"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{}}}],["continue&#xff08;&#x7b2c;5.21&#x8282;&#xff09;&#x8868;&#x8fbe;&#x5f0f;&#x5f71;&#x54cd;&#x3002",{"_index":4883,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["continue（第5.21",{"_index":4861,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{}}}],["contrari",{"_index":4627,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["contravari",{"_index":3797,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["contribut",{"_index":3912,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["control",{"_index":493,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["controversi",{"_index":5770,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["conveni",{"_index":3589,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["convent",{"_index":4506,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["convers",{"_index":3218,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["convert",{"_index":1934,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["conﬁgur",{"_index":5239,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{}}}],["conﬂict",{"_index":4151,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{}}}],["copt",{"_index":870,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["copy_propag",{"_index":6261,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["cor",{"_index":1491,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["core",{"_index":796,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["coreapi",{"_index":6665,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["coretyp",{"_index":3451,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["correct",{"_index":4455,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["correctli",{"_index":4682,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["correspond",{"_index":1212,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["cors（cross",{"_index":1488,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{}}}],["cost",{"_index":850,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["count&#xff0c;ha",{"_index":2055,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["count，ha",{"_index":1999,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{}}}],["coupl",{"_index":5174,"title":{},"body":{"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["cours",{"_index":3916,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["courtesi",{"_index":430,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["covari",{"_index":3792,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["cp",{"_index":629,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["cpp",{"_index":684,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["cppfilecod",{"_index":6666,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["cppia",{"_index":800,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["cppinclud",{"_index":6667,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["cppnamespacecod",{"_index":6668,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["cr",{"_index":1236,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["creat",{"_index":356,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["creation",{"_index":1353,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["creativ",{"_index":1079,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{}}}],["critic",{"_index":3706,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["cross",{"_index":1496,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["crossdomain.xml",{"_index":1495,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{}}}],["crypto",{"_index":5970,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["cs",{"_index":686,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["ctx",{"_index":1402,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{}}}],["ctx.addobject",{"_index":1404,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{}}}],["ctx:context",{"_index":1383,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["curli",{"_index":3482,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["current",{"_index":464,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["currentpo",{"_index":6563,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["custom",{"_index":185,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["cut",{"_index":5756,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["cwd",{"_index":6056,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["d",{"_index":906,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["d,e",{"_index":4783,"title":{},"body":{"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{}}}],["d.foo",{"_index":3125,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["d1.45e",{"_index":2179,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["daemon",{"_index":1358,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["dan",{"_index":1048,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["data",{"_index":343,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["date",{"_index":2189,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["dce",{"_index":595,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["dce&#x548c;try.haxe.org",{"_index":5876,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["dce&#x6700;&#x521d;&#x5728;hax",{"_index":5873,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["dce&#x6709;&#x4e09;&#x4e2a;&#x6a21;&#x5f0f;&#xff0c;&#x5f53;&#x8c03;&#x7528;&#x547d;&#x4ee4;&#x884c;&#x7684;&#x65f6;&#x5019;&#x8bbe;&#x7f6e;&#xff1a",{"_index":5854,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["dce&#x7b97;&#x6cd5;&#x548c;&#x7c7b;&#x578b;&#x5316;&#x7b97;&#x6cd5;&#x8fd0;&#x4f5c;&#x826f;&#x597d;&#xff0c;&#x4f46;&#x662f;&#x5f53",{"_index":5858,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["dce=[mode:std",{"_index":801,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["dce和try.haxe.org",{"_index":5849,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["dce是一个编译器功能，它从输出中删除未使用的代码。在类型检查之后，编译器执行dce入口点（通常是main",{"_index":5839,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["dce最初在hax",{"_index":5847,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["dce的影响。如果用在字段上，那个字段不受dc",{"_index":5841,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["de&#xfb01;n",{"_index":224,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["de&#xfb01;nit",{"_index":214,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html#5-表达式":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["dead",{"_index":593,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["deadlock",{"_index":1363,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["deal",{"_index":1282,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["debug",{"_index":386,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["debug&#x7f16;&#x8bd1;&#x65f6;&#x6fc0;&#x6d3b",{"_index":962,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["debug_level",{"_index":5240,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["debugg",{"_index":2726,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["decid",{"_index":5194,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["decim",{"_index":1226,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["decl",{"_index":6669,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["declar",{"_index":433,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["decod",{"_index":1216,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{}}}],["decrement",{"_index":5132,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{}}}],["dedic",{"_index":662,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["deep",{"_index":5499,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["defalut",{"_index":4932,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["default",{"_index":282,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["default&#x201d;&#xff08;&#x6765;&#x81ea;&#x4e8",{"_index":6587,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["default&#xff09;&#xff0c",{"_index":4526,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["default_resolv",{"_index":5975,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["default或者nul",{"_index":4379,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{}}}],["defin",{"_index":785,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["define&#x5bf9;&#x6bd4;&#xff0c;&#x4f46;&#x662f;&#x4e00;&#x4e2a;hax",{"_index":770,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["define对比，但是一个hax",{"_index":759,"title":{},"body":{"9.宏/9.宏.html":{}}}],["definit",{"_index":6653,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["defparam",{"_index":6670,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["degre",{"_index":1937,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["deleg",{"_index":6671,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["delimit",{"_index":5947,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["delimiter&#x7684;string&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff0c;&#x8fd4;&#x56de;&#x4e00;&#x4e2a",{"_index":5956,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["delimiter的str",{"_index":5949,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{}}}],["demonstr",{"_index":4558,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["denot",{"_index":2952,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["depend",{"_index":379,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["deprec",{"_index":874,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["deriv",{"_index":3477,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["descend",{"_index":5171,"title":{},"body":{"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["describ",{"_index":335,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["design",{"_index":410,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["desir",{"_index":661,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["desktop",{"_index":993,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["desplay",{"_index":6036,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{}}}],["detail",{"_index":385,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{}}}],["details&#x7f16;&#x8bd1;&#x65f6;&#xff0c;&#x6bcf;&#x4e2a;&#x5b57;&#x6bb5;&#x53e6;&#x5916;&#x6709;&#x4e00;&#x4e2a",{"_index":5944,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["detect",{"_index":5515,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{}}}],["determin",{"_index":3990,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["detriment",{"_index":3705,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["deﬁn",{"_index":184,"title":{},"body":{"4.类字段/4.类字段.html":{},"5.表达式/5.表达式.html":{},"6.语言特性/6.语言特性.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{}}}],["deﬁnit",{"_index":140,"title":{},"body":{"4.类字段/4.类字段.html":{},"5.表达式/5.表达式.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.属性.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{}}}],["dialog",{"_index":927,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["dif&#xfb01;cult",{"_index":4091,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["differ",{"_index":233,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["differences,but",{"_index":382,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["difﬁcult",{"_index":4080,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{}}}],["digit",{"_index":1248,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["direct",{"_index":907,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["directli",{"_index":4110,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["directori",{"_index":663,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["directory&#x2019;",{"_index":634,"title":{},"body":{"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["directory&#x7528;&#x4e8e;php&#x3002;&#x6839;&#x636e;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x6027;&#x8d28;&#xff0c;&#x53c2;&#x6570;&#x503c;&#x53ef;&#x80fd;&#x662f;&#x4e00;&#x4e2a;&#x6587;&#x4ef6;&#x540d;&#xff08;&#x5bf9;&#x4e8",{"_index":717,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["directory&#xff1a;&#x751f;&#x6210",{"_index":736,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["directory&#xff1a;&#x751f;&#x6210;actionscript",{"_index":730,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["directory&#xff1a;&#x751f;&#x6210;c#&#xff08;&#x7b2c;12.7&#x8282;&#xff09;&#x6e90;&#x4ee3;&#x7801;&#x5230;&#x6307;&#x5b9a;&#x76ee;&#x5f55;&#x3002",{"_index":738,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["directory&#xff1a;&#x751f;&#x6210;java&#xff08;&#x7b2c;12.6&#x8282;&#xff09;&#x6e90;&#x4ee3;&#x7801;&#x5230;&#x6307;&#x5b9a;&#x76ee;&#x5f55;&#xff0c;&#x5e76;&#x4f7f;&#x7528;java&#x7f16;&#x8bd1;&#x5668;&#x7f16;&#x8bd1;&#x3002",{"_index":739,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["directory&#xff1a;&#x751f;&#x6210;php&#xff08;&#x7b2c;12.4&#x8282;&#xff09;&#x6e90;&#x4ee3;&#x7801;&#x5230;&#x6307;&#x5b9a;&#x76ee;&#x5f55;&#x3002",{"_index":735,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["directory’",{"_index":623,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{}}}],["directory用于php",{"_index":655,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["directory：生成actionscript",{"_index":680,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["directory：生成c#（第12.7",{"_index":687,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["directory：生成java（第12.6节）源代码到指定目录，并使用java",{"_index":688,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["directory：生成php（第12.4",{"_index":683,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["disabl",{"_index":868,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["disallow",{"_index":1278,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["disambigu",{"_index":4161,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["disappear",{"_index":3502,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["discard",{"_index":5144,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["display",{"_index":804,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{}}}],["display(resolve:str",{"_index":2098,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["distance:3500",{"_index":2096,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["distance:int",{"_index":2107,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["distinct",{"_index":3708,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["distinguish",{"_index":198,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["dito",{"_index":3058,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["dividend",{"_index":5147,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["divis",{"_index":5141,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["divisor",{"_index":5148,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["dll",{"_index":805,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["doabc",{"_index":929,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["doabcdefin",{"_index":930,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["doc",{"_index":2,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["document",{"_index":936,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["dog",{"_index":1841,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["dog|fox)/g",{"_index":1835,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["dollar",{"_index":244,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["domain",{"_index":1497,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{}}}],["don&#x2019;t",{"_index":985,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["done",{"_index":4595,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["done,th",{"_index":4686,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["don’t",{"_index":838,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{}}}],["dot",{"_index":4228,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["dot_path",{"_index":644,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["doubl",{"_index":1222,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["down",{"_index":659,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["dramat",{"_index":5467,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["draw",{"_index":914,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["drawback",{"_index":5303,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["drop",{"_index":6618,"title":{},"body":{"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["ds",{"_index":5971,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["ds.intmap",{"_index":478,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["ds.vector",{"_index":1634,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}}}],["due",{"_index":1206,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["dump",{"_index":809,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["dumps移除变量的ids（有助于diff",{"_index":813,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{}}}],["duplic",{"_index":420,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["dure",{"_index":199,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["dyanmic&#xff08;&#x7b2c;2.7&#x8282;&#xff09",{"_index":2320,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["dyanmic（第2.7",{"_index":2297,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{}}}],["dynam",{"_index":283,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["dynamic&#x3002",{"_index":4012,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["dynamic&#x4fee;&#x9970;&#x7b26",{"_index":4746,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html#4-4-访问修饰符":{}}}],["dynamic&#xff08;&#x7b2c;2.7&#x8282;&#xff09",{"_index":3064,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["dynamic&#xff08;&#x7b2c;2.7&#x8282;&#xff09;&#x3002",{"_index":4981,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["dynamic&#xff08;&#x7b2c;2.7&#x8282;&#xff09;&#x4e2d;&#x63d0;&#x5230;&#x7684;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x62d2;&#x7edd;[1,&#x201d;foo&#x201d;]&#x56e0;&#x4e3a;&#x5b83;&#x4e0d;&#x80fd;&#x786e;&#x5b9a;&#x5143;&#x7d20;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x4f7f;&#x7528;&#x81ea;&#x4e0a;&#x800c;&#x4e0b;&#x7684;&#x63a8;&#x65ad;&#xff0c;&#x8fd9;&#x4e2a;&#x95ee;&#x9898;&#x53ef;&#x4ee5;&#x88ab;&#x514b;&#x670d;&#xff1a",{"_index":4006,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["dynamic&#xff08;&#x7b2c;2.7&#x8282;&#xff09;&#x6216;&#x8005",{"_index":5859,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["dynamic&#xff08;&#x7b2c;2.7&#x8282;&#xff09;&#x7684;&#x7c7b;&#x578b;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x4e00;&#x4e2a;&#x5355;&#x5f62;&#x65f6;&#xff0c;&#x8fd9;&#x4e2a;&#x5355;&#x5f62;&#x4fbf;&#x4f1a;&#x53d8;&#x5f62;&#xff08;morph&#xff09;&#x4e3a;&#x8be5;&#x7c7b;&#x578b;&#xff0c;&#x5e76;&#x4e14;&#x5728;&#x6b64;&#x4e4b;&#x540e;&#x5b83;&#x5c31;&#x4e0d;&#x80fd;&#x518d;&#x53d8;&#x5f62;&#x4e3a;&#x53e6;&#x5916;&#x7684;&#x7c7b;&#x578b;&#x4e86;&#x3002;&#x8fd9;&#x4e00;&#x7279;&#x6027;&#x6b63;&#x5982;&#x5176;&#x540d;&#x5b57;&#x4e2d;&#x7684",{"_index":4061,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["dynamic&#xff08;&#x7b2c;2.7&#x8282;&#xff09;&#x7c7b;&#x578b;&#xff0c;&#x5982;&#x4e0b;&#x9762;&#x4f8b;&#x5b50;&#x5c55;&#x793a;&#x7684;&#xff1a",{"_index":5091,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["dynamic&#xff08;&#x7b2c;2.7&#x8282;&#xff09;&#xff1a",{"_index":1623,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["dynamic&#xff0c;&#x8fd9;&#x4f1a;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x88ab;&#x4fa6;&#x6d4b;&#x5230;&#x3002",{"_index":3150,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["dynamic&#xff0c;&#x8fd9;&#x53ef;&#x4ee5;&#x5728;&#x5982;&#x4e0b;&#x4f8b;&#x5b50;&#x4e2d;&#x5e26;&#x6765;&#x4ee4;&#x4eba;&#x60ca;&#x559c;&#x7684;&#x7ed3;&#x679c;&#xff1a",{"_index":3167,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["dynamicaccess",{"_index":5962,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["dynamic（第2.7",{"_index":1596,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["dynamic（第2.7节）中提到的，编译器拒绝[1,”foo",{"_index":3987,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{}}}],["dynamic（第2.7节）的类型被统一为一个单形时，这个单形便会变形（morph",{"_index":4032,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{}}}],["e",{"_index":1775,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["e.g",{"_index":153,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["e.tostr",{"_index":6622,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["e1",{"_index":2071,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#表达式":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{}}}],["e2",{"_index":2073,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#表达式":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{}}}],["each",{"_index":600,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["eagerli",{"_index":4158,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["easi",{"_index":429,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["easier",{"_index":580,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["easili",{"_index":344,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["ec",{"_index":2822,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["ecmascript",{"_index":990,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["eeeee",{"_index":1776,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["effect",{"_index":4021,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["efunc",{"_index":6475,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["efunc.expr",{"_index":6477,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["efunct",{"_index":6478,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["eithertyp",{"_index":5388,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["eithertypeint",{"_index":5395,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["eld",{"_index":143,"title":{},"body":{"4.类字段/4.类字段.html":{},"5.表达式/5.表达式.html":{},"6.语言特性/6.语言特性.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["element",{"_index":427,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["element.style.backgroundcolor",{"_index":496,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["elimin",{"_index":594,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["elseif",{"_index":389,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["elseif&#x4e4b;&#x540e;&#x7684;&#x6761;&#x4ef6;&#x5141;&#x8bb8;&#x5982;&#x4e0b;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#xff1a",{"_index":5268,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["elsewher",{"_index":3521,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["elt",{"_index":2350,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["em::age::/em",{"_index":2061,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{}}}],["email",{"_index":1871,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["emb",{"_index":6681,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["emit",{"_index":3707,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["employ",{"_index":2916,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["empti",{"_index":919,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["empty()&#xff09",{"_index":4568,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["emptyt(it",{"_index":3827,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["en",{"_index":2823,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{}}}],["enabl",{"_index":1490,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["enclos",{"_index":3480,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["encod",{"_index":1284,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["encount",{"_index":3784,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["encrypt",{"_index":900,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["end",{"_index":392,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["enforc",{"_index":273,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{}}}],["english",{"_index":5430,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["enough",{"_index":5301,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["ensur",{"_index":4377,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{}}}],["entir",{"_index":4153,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["enum",{"_index":284,"title":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{}},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["enum&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":3686,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["enum&#xff08;&#x7b2c;2.4&#x8282;&#xff09;&#x58f0;&#x660e;&#xff0c;&#x56e0;&#x6b64;&#x5728;&#x8fd9;&#x4e2a;&#x6a21;&#x5757;&#x88ab;&#x5bfc;&#x5165;&#x4e4b;&#x540e;&#x5c31;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x4e86;&#x3002;&#x5982;&#x679c;&#x6211;&#x4eec;&#x53ea;&#x8981;&#x5bfc;&#x5165;&#x6a21;&#x5757;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7c7b;&#x578b;&#xff0c;&#x4f8b;&#x5982;&#xff0c;import",{"_index":4182,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["enumbuildingmacro",{"_index":6472,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["enumcolor",{"_index":2824,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["enumflag",{"_index":5963,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["enumtool",{"_index":5964,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["enumvalu",{"_index":1712,"title":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["enum被导入（直接或作为模块的一部分被导入），所有它的enum构造函数（第2.4.1",{"_index":4143,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["enum（第2.4节）声明，因此在这个模块被导入之后就可以使用了。如果我们只要导入模块中的一个特定类型，例如，import",{"_index":4137,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["enum），它实际上是一个代数数据类型（adt",{"_index":2851,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html":{}}}],["equal",{"_index":3656,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["equalst(expected:t",{"_index":3658,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["equival",{"_index":4617,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["ereg",{"_index":1867,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["err",{"_index":1414,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["err&apo",{"_index":1463,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["error",{"_index":1415,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["error(s:str",{"_index":4680,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["error,&#x503c;&#x4e0d;&#x662f",{"_index":3069,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["error是内联的，程序编译正确，因为控制流检查器满意内联的throw（第5.22节）表达式。如果内联部执行，编译器只发现一个error",{"_index":4681,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{}}}],["es5",{"_index":841,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["escap",{"_index":1225,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["essenc",{"_index":4218,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["essenti",{"_index":5192,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["etc",{"_index":5159,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["eval",{"_index":1293,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["evalu",{"_index":4030,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["evaluatedfor",{"_index":5053,"title":{},"body":{"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{}}}],["even",{"_index":3704,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["evennumb",{"_index":361,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["event",{"_index":6673,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["everyth",{"_index":3490,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["everywher",{"_index":4687,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["evid",{"_index":4666,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["exact",{"_index":3721,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["exactli",{"_index":1213,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["exampl",{"_index":586,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["example,but",{"_index":5637,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["exce",{"_index":5922,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["except",{"_index":1201,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["excerpt",{"_index":5373,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["exclus",{"_index":4169,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["execut",{"_index":192,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["exhaust",{"_index":5249,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["exibl",{"_index":5300,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{}}}],["exist",{"_index":333,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["existsa",{"_index":1969,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["expect",{"_index":3660,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["expected&#x2019",{"_index":3691,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["explain",{"_index":232,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["explan",{"_index":4025,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["explic",{"_index":1691,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["explicit",{"_index":3641,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["explicitli",{"_index":3640,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["explor",{"_index":4446,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["export",{"_index":806,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["expos",{"_index":890,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["expr",{"_index":2070,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#表达式":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.3.具体化/9.3.具体化.html":{},"9.宏/9.3.具体化/9.3.具体化.html#9-3-具体化":{},"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["expr&#x662f;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.8&#x8282;&#xff09;&#xff0c;&#x5b9a;&#x4e49;&#x8981;&#x7ed9;&#x5339;&#x914d;&#x7684;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#xff08;&#x7b2c;2.8.3&#x8282;&#xff09",{"_index":5233,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["expr&#x7684;&#x5b9e;&#x4f8b;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x3002;&#x8fd9;&#x6837;&#xff0c;&#x5b83;&#x4eec;&#x88ab;&#x89e3;&#x6790;&#x4f46;&#x6ca1;&#x6709;&#x7c7b;&#x578b;&#x5316;&#xff0c;&#x610f;&#x5473;&#x7740;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x662f;&#x7b26;&#x5408;haxe&#x7684;&#x8bed;&#x6cd5;&#x89c4;&#x5219;&#x7684;&#x4efb;&#x4f55;&#x5185;&#x5bb9;&#x3002;&#x5b8f;&#x7136;&#x540e;&#x53ef;&#x4ee5;&#x68c0;&#x89c6;&#x5b83;&#x4eec;&#x7684;&#x7ed3;&#x6784;&#xff0c;&#x6216;&#x8005;&#x4f7f;&#x7528",{"_index":6352,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["expr.field",{"_index":2069,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#表达式":{}}}],["expr1",{"_index":4763,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["expr2",{"_index":4764,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["expr:exprdef",{"_index":4157,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["expr[indexexpr",{"_index":5221,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["exprdef",{"_index":4100,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["express",{"_index":169,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["expression&#x4ecd;&#x7136;&#x4f1a;&#x88ab;&#x6267;&#x884c;&#x3002",{"_index":4994,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["expression,th",{"_index":4987,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["expression,wher",{"_index":5638,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["expression1",{"_index":4909,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{}}}],["expression1每个迭代都会被执行，但是当条件满足，expression2",{"_index":5040,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html":{}}}],["expression1每次迭代都被执行，但是如果条件满足，expression2不再为当前迭代执行。不像break",{"_index":5052,"title":{},"body":{"5.表达式/5.21.continue/5.21.continue.html":{}}}],["expression2",{"_index":4910,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{}}}],["expression3",{"_index":4913,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["expressions(5)intheformoffoo(),foo",{"_index":4254,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["exprn",{"_index":4765,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["exprof",{"_index":6317,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["exprtool",{"_index":6440,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["expr兼容任何可能的输入，hax",{"_index":6312,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{}}}],["expr完全相同的，但是它允许限制接受的表达式的类型。这在结合宏和静态扩展（第6.3",{"_index":6314,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{}}}],["expr是一个抽象类型（第2.8节），定义要给匹配的数组访问（第2.8.3",{"_index":5223,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html":{}}}],["expr的实例的表达式。这样，它们被解析但没有类型化，意味着它们可以是符合hax",{"_index":6346,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html":{}}}],["extend",{"_index":285,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["extens",{"_index":454,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["extern",{"_index":286,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["extern&#xff08;&#x7b2c;6.2&#x8282;&#xff09;&#x6216;&#x8005;&#x5982;&#x679c;&#x6cea;&#x5b57;&#x6bb5;&#x6709",{"_index":4708,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["externalconnect",{"_index":1384,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["externalconnection.flashconnect(name:str",{"_index":1395,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["externalconnection.jsconnect(name:str",{"_index":1382,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["extern（第6.2",{"_index":4677,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{}}}],["extra",{"_index":6341,"title":{},"body":{"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{}}}],["extract",{"_index":487,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["extractor",{"_index":5626,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["extractorexpress",{"_index":5636,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["extren",{"_index":5370,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["extren&#x53ef;&#x4ee5;&#x7528;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x5b89;&#x5168;&#x7684;&#x65b9;&#x5f0f;&#x6765;&#x63cf;&#x8ff0;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7279;&#x5b9a;&#x7684;&#x4ea4;&#x4e92;&#x3002;&#x5b83;&#x4eec;&#x50cf;&#x666e;&#x901a;&#x7c7b;&#x4e00;&#x6837;&#x5b9a;&#x4e49;&#xff0c;&#x9664;&#x4e86;&#xff1a",{"_index":5396,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["f",{"_index":1971,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["f&#xff0c;&#x4f7f;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":4210,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["f(1",{"_index":5757,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["f(2",{"_index":5759,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["f(3",{"_index":5760,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["f(65",{"_index":4167,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["f(66",{"_index":4168,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["f(66)&#x3002;&#x8fbe;&#x5230;&#x548c;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x4e00;&#x6837;&#x7684;&#x4f7f;&#x7528;&#xff0c;&#x8fd9;&#x4e2a;&#x65b9;&#x6cd5;&#x662f;&#x7f16;&#x8bd1;&#x65f6;&#x529f;&#x80fd;&#xff0c;&#x4e0d;&#x4f1a;&#x6709;&#x8fd0;&#x884c;&#x65f6;&#x5f00;&#x9500;&#x3002",{"_index":4211,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["f1",{"_index":4984,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["f1(f2(f3(f4(x",{"_index":5468,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["f1(f2(f3(f4(x))))，使用链式调用形式如x.f4().f3().f2().f1",{"_index":5464,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{}}}],["f2",{"_index":4985,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["f2&#xff0c;&#x4f46;&#x4e0d;&#x4f1a;&#x79bb;&#x5f00",{"_index":4992,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["fact",{"_index":3489,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["fail",{"_index":1534,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["fakeenum",{"_index":6676,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["fall",{"_index":4938,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html":{}}}],["fals",{"_index":287,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["far",{"_index":155,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["fashion",{"_index":5514,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{}}}],["fastlist",{"_index":1733,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["fdb",{"_index":814,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["fdb交互调试启用完整的flash",{"_index":815,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{}}}],["featur",{"_index":372,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["few",{"_index":3983,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["ffun",{"_index":6471,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["ffun(fint",{"_index":6480,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["field",{"_index":142,"title":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["field/class",{"_index":6695,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["fieldnam",{"_index":6560,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["fields.push",{"_index":6564,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["file",{"_index":576,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["file&#xff1a;&#x8981;&#x68c0;&#x67e5;&#x5b8c;&#x6210;&#x7684;&#x6587;&#x4ef6;&#x3002;&#x5fc5;&#x987b;&#x662f;&#x4e00;&#x4e2a",{"_index":5895,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["file(fil",{"_index":6677,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["file.xml",{"_index":916,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["file:///c:/example/path/index.html",{"_index":1494,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["file@position[@mod",{"_index":5881,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["file_nam",{"_index":653,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["file_name&#xff1a;&#x751f;&#x6210;&#x6307;&#x5b9a;&#x6587;&#x4ef6;&#x4e3a;flash&#xff08;&#x7b2c;12.2&#x8282;&#xff09",{"_index":732,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["file_name&#xff1a;&#x751f;&#x6210;python&#xff08;&#x7b2c;12.8&#x8282;&#xff09;&#x6e90;&#x4ee3;&#x7801;&#x5230;&#x6307;&#x5b9a;&#x6587;&#x4ef6;&#x3002",{"_index":740,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["file_name：生成python（第12.8",{"_index":690,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["file_name：生成指定文件为flash（第12.2",{"_index":681,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["filenam",{"_index":6728,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["filename&#xff1a;&#x751f;&#x6210;javascript&#xff08;&#x7b2c;12.1&#x8282;&#xff09;&#x6e90;&#x4ee3;&#x7801;&#x5230;&#x6307;&#x5b9a;&#x6587;&#x4ef6;&#x3002",{"_index":729,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["filename：生成javascript（第12.1",{"_index":679,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["filesystem",{"_index":1371,"title":{},"body":{"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{}}}],["filter",{"_index":884,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["final",{"_index":869,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["find",{"_index":5977,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["fine",{"_index":3300,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["finit",{"_index":6674,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["fint",{"_index":6476,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["first",{"_index":920,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["firstchild",{"_index":2347,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["firstel",{"_index":2334,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}}}],["flag",{"_index":905,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["flag&#x4e3a;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x4ee4;&#x724c;&#xff0c;&#x800c;&#x662f;&#x5c06;&#x5979;&#x8bfb;&#x4e3a;&#x4e00;&#x4e2a;&#x51cf;&#x6cd5;&#x4e8c;&#x9662;&#x64cd;&#x4f5c;&#x7b26",{"_index":5280,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["flag&#xff0c;somin_flag&#x88ab;&#x5b9a;&#x4e49;&#x3002",{"_index":5271,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["flag1",{"_index":2075,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["flag2",{"_index":2076,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["flag，somin_flag",{"_index":5244,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{}}}],["flash",{"_index":694,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["flash&#x5185;&#x5bb9;&#x5fc5;&#x987b;&#x88ab;&#x52a0;&#x8f7d;&#xff0c;&#x5e76;&#x4e14;&#x5b83;&#x5fc5;&#x987b;&#x5305;&#x542b",{"_index":1447,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["flash&#x5b89;&#x5168;&#x7ec6;&#x8282",{"_index":1512,"title":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{}},"body":{}}],["flash&#x76ee;&#x6807;&#x7684;&#x4e25;&#x683c;&#x7c7b;&#x578b",{"_index":976,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["flash&#xff0c;c++&#xff0c;java",{"_index":2665,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["flash&#xff0c;java&#x548c;c#&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x5141;&#x8bb8;&#x901a;&#x8fc7;&#x547d;&#x4ee4;&#x884c;&#xff08;&#x7b2c;7&#x7ae0;&#xff09;&#x76f4;&#x63a5;&#x5305;&#x62ec;&#x539f;&#x751f;&#x7684;&#x5e93;&#x3002;&#x76ee;&#x6807;&#x7279;&#x5b9a;&#x7684;&#x7ec6;&#x8282;&#x5728;&#x6bcf;&#x4e2a;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7ec6;&#x8282;&#xff08;&#x7b2c;12&#x7ae0;&#xff09;&#x7b49;&#x5404;&#x81ea;&#x7684;&#x7ae0;&#x8282;&#x3002",{"_index":5407,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["flash.display.bitmapdata",{"_index":6656,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["flash.media.sound",{"_index":6726,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["flash.text.font",{"_index":6683,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["flash.utils.bytearray",{"_index":6678,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["flash8",{"_index":1398,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["flash9",{"_index":794,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{}}}],["flash、php、c#和java",{"_index":1823,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{}}}],["flash对象。hax",{"_index":1397,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["flash，c++，java",{"_index":2648,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{}}}],["flash，java和c#目标语言允许通过命令行（第7章）直接包括原生的库。目标特定的细节在每个目标语言细节（第12",{"_index":5382,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["float",{"_index":1939,"title":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{}},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{}}}],["float&#xff08;&#x67e5;&#x770b;&#x6570;&#x503c;&#x8fd0;&#x7b97;&#x7b26;&#xff08;&#x7b2c;2.1.3&#xff09;&#x4e86;&#x89e3;&#x66f4;&#x591a;&#xff09;&#x3002",{"_index":1963,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["float/int",{"_index":2505,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["float（查看数值运算符（第2.1.3",{"_index":1950,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{}}}],["floor",{"_index":5374,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["floor方法返回类型声明为int",{"_index":5379,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["fold",{"_index":2001,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["follow",{"_index":252,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["font",{"_index":6679,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["foo",{"_index":440,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["foo()&#x3002",{"_index":1461,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["foo()&#xff0c;foo=1&#xff0c;foo.field&#x7b49;&#x8fd9;&#x4e9b;&#x662f;&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5&#x7ae0;&#xff09;&#x3002;&#x7279;&#x522b;&#x662f;&#x6700;&#x540e;&#x4e00;&#x4e2a;&#x5305;&#x62ec;&#x7c7b;&#x4f3c",{"_index":4275,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["foo()，foo=1，foo.field等这些是表达式（第5",{"_index":4250,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["foo.a",{"_index":2206,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["foo.b(4",{"_index":2208,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["foobar",{"_index":442,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["foofoofoo",{"_index":3286,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["foopost",{"_index":3294,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["for&#x5173;&#x952e;&#x5b57;&#x671f;&#x671b;&#x4e00;&#x4e2a;&#x5f00;&#x53e3;&#x7684;&#x5706;&#x62ec;&#x53f7",{"_index":4868,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["for&#x5faa;&#x73af;&#x8fed;&#x4ee3;&#x3002;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x5982;&#x679c;&#x7c7b;&#x5b9a;&#x4e49;&#x4e86;&#x65b9;&#x6cd5",{"_index":5741,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["for&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x603b;&#x662f",{"_index":4879,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["forc",{"_index":500,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["foreach",{"_index":2000,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{}}}],["forgotten",{"_index":5489,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{}}}],["form",{"_index":1224,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["format",{"_index":823,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["former",{"_index":4396,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["forvar",{"_index":4916,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["forward",{"_index":3421,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["forward(push",{"_index":3422,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["found",{"_index":229,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["four",{"_index":4223,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["fox",{"_index":1838,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["fraction",{"_index":5145,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["frame",{"_index":918,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["framework",{"_index":859,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["franco",{"_index":1109,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["frequenc",{"_index":4668,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["friday",{"_index":1709,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["frog",{"_index":1992,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{}}}],["from&#x201d",{"_index":4605,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["frombaseclass",{"_index":6505,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["fromcharcod",{"_index":4162,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["frominterfac",{"_index":6503,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["fromstr",{"_index":3188,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["fulfil",{"_index":2957,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["full",{"_index":592,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["fulli",{"_index":5292,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["func",{"_index":2303,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["funcnac",{"_index":6567,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["funcnam",{"_index":6419,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["function",{"_index":190,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["function&#x2019;",{"_index":3699,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["function(data",{"_index":1417,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["function,with",{"_index":4029,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["functioncod",{"_index":6684,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["functiontailcod",{"_index":6685,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["function’",{"_index":3661,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["funfact",{"_index":4790,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["further",{"_index":253,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["furthermor",{"_index":398,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["fusion",{"_index":6262,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["futur",{"_index":4696,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["fvar",{"_index":6470,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["fvar&#x3002",{"_index":6492,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["fvar(nul",{"_index":6486,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["f，为string",{"_index":4556,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html":{}}}],["g",{"_index":1799,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["gadt",{"_index":400,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["game.hxml",{"_index":621,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["garcia",{"_index":1117,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["gen",{"_index":808,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["genc",{"_index":880,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["gencommon",{"_index":826,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["gencpp",{"_index":807,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["gener",{"_index":159,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["generateclass",{"_index":6418,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["generic&#xff08;&#x7b2c;3.3&#x8282;&#xff09;&#x4e86;&#x89e3;&#x8be6;&#x7ec6;&#x5185;&#x5bb9;&#x3002",{"_index":1743,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["genericbuild",{"_index":6522,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["genericbuild(genericbuildmacro1.build",{"_index":6526,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["genericbuild(genericbuildmacro2.build",{"_index":6536,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["genericbuildmacro1",{"_index":6524,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["genericbuildmacro2",{"_index":6533,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["genericstack",{"_index":1730,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.数据结构.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}}}],["genericstack&#x7c7b;&#x88ab;&#x79f0;&#x4e3a",{"_index":1738,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["genericstack&#xff0c;&#x5c31;&#x50cf;&#x6570;&#x7ec4;&#x548c;&#x5217;&#x8868;&#xff0c;&#x662f;&#x4e00;&#x4e2a;&#x5b58;&#x50a8;&#x5143;&#x7d20;&#x7684;&#x5bb9;&#x5668;&#x3002;&#x5b83;&#x6709;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x7b2c;3.2&#x8282;&#xff09;&#xff0c;&#x8fd9;&#x4e2a;&#x5806;&#x6808;&#x7684;&#x6240;&#x6709;&#x5143;&#x7d20;&#x5fc5;&#x987b;&#x662f;&#x7279;&#x5b9a;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x91cc;&#x6709;&#x4e00;&#x4e2a;&#x521d;&#x59cb;&#x5316;&#x548c;&#x4f7f;&#x7528;genericstack&#x7684;&#x5c0f;&#x793a;&#x4f8b;&#x7a0b;&#x5e8f;&#x3002",{"_index":1736,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["genericstack，就像数组和列表，是一个存储元素的容器。它有一个类型参数（第3.2节），这个堆栈的所有元素必须是特定类型。这里有一个初始化和使用genericstack",{"_index":1727,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{}}}],["generic（第3.3",{"_index":1734,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{}}}],["get,post,options,delete,put",{"_index":1493,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["get/set",{"_index":4486,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["get_",{"_index":4494,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["get_color",{"_index":495,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["get_field",{"_index":4488,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["get_i",{"_index":4325,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["get_x",{"_index":4323,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["getbyt",{"_index":6142,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["getbytes&#x65b9;&#x6cd5;&#x8fd4;&#x56de;&#x7684;&#x7c7b;&#x578b;&#x662f",{"_index":6149,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["getcolor",{"_index":2870,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["getint1",{"_index":3349,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["getint1(k:int",{"_index":3344,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["getint2(k:int",{"_index":3346,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["getstr",{"_index":3375,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{}}}],["getter",{"_index":3340,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["getter&#xff0c;&#x6216;&#x8005;t",{"_index":4542,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["getter，或者t",{"_index":4489,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{}}}],["give",{"_index":330,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["given",{"_index":828,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["global",{"_index":4690,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["go",{"_index":3217,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["good",{"_index":3988,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["gotnam",{"_index":4793,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["gotnamedt(x:t",{"_index":4791,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["gpu",{"_index":912,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["grain",{"_index":492,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["grant",{"_index":5291,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["graphic",{"_index":911,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["great",{"_index":2080,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["great!/hello",{"_index":2343,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{}}}],["great!/hello&apo",{"_index":2377,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["great!/root",{"_index":2386,"title":{},"body":{"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{}}}],["great!/root&apo",{"_index":2393,"title":{},"body":{"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}}}],["greater",{"_index":2951,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["greater/smal",{"_index":2004,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["greatli",{"_index":4507,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["green",{"_index":2817,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["group",{"_index":345,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["gt",{"_index":3297,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["guarante",{"_index":4170,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["guard",{"_index":5158,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["g（例如，cy5:pointy1:xzy1:yzg",{"_index":2202,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["h",{"_index":2187,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["h&#xff08;&#x4f8b;&#x5982;&#xff0c;by1:xi2y1:knh&#xff0c;{&#x201c;x&#x201d",{"_index":2254,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["hack",{"_index":6687,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["had,that",{"_index":5463,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["halt",{"_index":4264,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["hand",{"_index":3869,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["handl",{"_index":1406,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["happen",{"_index":2956,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["hardwar",{"_index":909,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["harper",{"_index":1051,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{}}}],["harper&#xff1a;&#x8ffd;&#x52a0;&#x5185;&#x5bb9;&#x548c;&#x7f16;&#x8f91",{"_index":1064,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["hasa",{"_index":3923,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["haserror",{"_index":6070,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["hash",{"_index":616,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["hashlink",{"_index":1294,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["hasnam",{"_index":4789,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["hasnet",{"_index":5720,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["hasnext",{"_index":5719,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["hasnext&#xff0c;&#x8fd4;&#x56de;bool&#xff0c;&#x548c;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5",{"_index":5747,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["hasnext，返回bool",{"_index":5730,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{}}}],["have",{"_index":1215,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["havea",{"_index":5462,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["hax",{"_index":4,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"1.Haxe介绍/1.Haxe介绍.html":{},"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"9.宏/9.宏.html":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"10.标准库/10.10.Json/10.10.Json.html":{},"10.标准库/10.10.Json/10.10.Json.html#10-10-Json":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化":{},"10.标准库/10.13.远程处理/10.13.远程处理.html":{},"10.标准库/10.13.远程处理/10.13.远程处理.html#10-13-远程处理":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.4.Math/10.4.3.整数数学.html":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{},"10.标准库/10.9.Xml/10.9.Xml.html":{},"10.标准库/10.9.Xml/10.9.Xml.html#10-9-Xml":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{},"8.编译器功能/8.4.资源/8.4.资源.html":{},"8.编译器功能/8.4.资源/8.4.资源.html#8-4-资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.具体化.html":{},"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["haxe#7683",{"_index":631,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["haxe&#x4e0d;&#x652f;&#x6301;&#x50cf",{"_index":4865,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["haxe&#x4e2d;&#x5f53;&#x4ee5;&#x4e0b;&#x60c5;&#x51b5;&#x53d1;&#x751f;&#x65f6;&#x5141;&#x8bb8;&#x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316;&#xff1a",{"_index":3837,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["haxe&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x5757;&#x7531;&#x4e00;&#x4e2a;&#x5f00;&#x53e3;&#x7684",{"_index":4771,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["haxe&#x4e2d;&#x7684;&#x51fd;&#x6570;&#x4e0d;&#x9650;&#x4e8e;&#x7c7b;&#x5b57;&#x6bb5;&#xff0c;&#x5e76;&#x53ef;&#x4ee5;&#x88ab;&#x58f0;&#x660e;&#x4e3a;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x5141;&#x8bb8;&#x5f3a;&#x5927;&#x7684;&#x95ed;&#x5305;&#x3002",{"_index":543,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["haxe&#x4e2d;&#x7684;&#x6570;&#x7ec4;&#x63a8;&#x5bfc;&#x4f7f;&#x7528;&#x73b0;&#x6709;&#x7684;&#x8bed;&#x6cd5;&#x4f7f;&#x6570;&#x7ec4;&#x53ef;&#x4ee5;&#x66f4;&#x7b80;&#x6d01;&#x7684;&#x521d;&#x59cb;&#x5316;&#x3002;&#x5b83;&#x901a;&#x8fc7",{"_index":5699,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["haxe&#x4e2d;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x5b9a;&#x4e49;&#x4e86;&#x7a0b;&#x5e8f;&#x9700;&#x8981;&#x505a;&#x4ec0;&#x4e48;&#x3002;&#x591a;&#x6570;&#x8868;&#x8fbe;&#x5f0f;&#x53ef;&#x4ee5;&#x5728;&#x65b9;&#x6cd5;&#xff08;&#x7b2c;4.3&#x8282;&#xff09;&#x4f53;&#x4e2d;&#x627e;&#x5230;&#xff0c;&#x5b83;&#x4eec;&#x88ab;&#x7ed3;&#x5408;&#x6765;&#x63cf;&#x8ff0;&#x65b9;&#x6cd5;&#x7684;&#x529f;&#x80fd;&#x3002;&#x672c;&#x8282;&#x89e3;&#x91ca;&#x4e0d;&#x540c;&#x7c7b;&#x578b;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x3002;&#x4e00;&#x4e9b;&#x5b9a;&#x4e49;&#x53ef;&#x4ee5;&#x63d0;&#x4f9b;&#x5e2e;&#x52a9;&#xff1a",{"_index":304,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["haxe&#x4ee3;&#x7801;&#x5fc5;&#x987b;&#x88ab;&#x5305;&#x542b",{"_index":1435,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["haxe&#x4fdd;&#x7559;&#x524d;&#x7f6",{"_index":319,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["haxe&#x5141;&#x8bb8;&#x4e24;&#x79cd;&#x7c7b;&#x578b;&#x8f6c;&#x6362;&#xff1a",{"_index":5103,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{}}}],["haxe&#x5141;&#x8bb8;&#x629b;&#x51fa;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x7684;&#x503c;&#xff0c;&#x4f7f;&#x7528",{"_index":5059,"title":{},"body":{"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{}}}],["haxe&#x5141;&#x8bb8;&#x6355;&#x83b7;&#x503c;&#xff0c;&#x4f7f;&#x7528",{"_index":4968,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["haxe&#x5141;&#x8bb8;&#x7528;&#x7c7b;&#x7ec4;&#x7ec7;&#x4ee3;&#x7801;&#xff0c;&#x4f7f;&#x5176;&#x6210;&#x4e3a;&#x4e00;&#x4e2a;&#x9762;&#x5411;&#x5bf9;&#x8c61;&#x8bed;&#x8a00;&#x3002;&#x901a;&#x5e38;&#x76f8;&#x5173;&#x7684;&#x529f;&#x80fd;&#x5982;jave&#x7b49;&#x8bed;&#x8a00;&#x6240;&#x652f;&#x6301;&#x7684;&#xff0c;&#x5305;&#x62ec;&#x7ee7;&#x627f;&#x548c;&#x63a5;&#x53e3;&#x3002",{"_index":526,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["haxe&#x5141;&#x8bb8;&#x8bb8;&#x591a;&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x5316;&#xff0c;&#x5c31;&#x50cf;&#x7c7b;&#x5b57;&#x6bb5;&#xff08;&#x7b2c;4&#x7ae0;&#xff09;&#x548c;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff08;&#x7b2c;2.4.1&#x8282;&#xff09;&#x3002;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x901a;&#x8fc7;&#x95ed;&#x5408;&#x7684;&#x5c16;&#x62ec;&#x53f7;&#x56ca;&#x62ec;&#x4ee5;&#x9017;&#x53f7;&#x5206;&#x9694;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x540d;&#x6765;&#x5b9a;&#x4e49;&#x3002;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x4f8b;&#x5b50;&#x6765;&#x81ea;&#x4e8e;haxe&#x6807;&#x51c6;&#x5e93;&#xff0c;&#x5c31;&#x662f",{"_index":3671,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["haxe&#x5141;&#x8bb8;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":5253,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["haxe&#x521b;&#x5efa;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x6709;&#x7279;&#x5b9a;&#x7684;&#x8bed;&#x6cd5;&#x3002;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x521b;&#x5efa;&#x4e00;&#x4e2a;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x5bf9;&#x8c61;&#x901a;&#x8fc7;&#x8f93;&#x5165;&#x5176;&#x5230",{"_index":1881,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["haxe&#x624b;&#x518c",{"_index":1084,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{}}}],["haxe&#x662f;&#x4ec0;&#x4e48",{"_index":48,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{}}}],["haxe&#x6709;&#x4e00;&#x4e2a;&#x7279;&#x522b;&#x7684;&#x8303;&#x56f4;&#x64cd;&#x4f5c;&#x7b26;&#x63a7;&#x5236;&#x8fed;&#x4ee3;&#x6b21;&#x6570;&#x3002;&#x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x4e8c;&#x9662;&#x64cd;&#x4f5c;&#x7b26;&#xff0c;&#x64cd;&#x4f5c;&#x4e24;&#x4e2a;&#x64cd;&#x4f5c;&#x6570;&#xff1a;min&#x2026;max&#xff0c;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x4ece;min&#xff08;&#x5305;&#x62ec;&#xff09;&#x5230;max&#xff08;&#x4e0d;&#x5305;&#x62ec;&#xff09;&#x7684;intiterator&#x7c7b;&#x578b;&#x7684;&#x5b9e;&#x4f8b;&#x3002;&#x6ce8;&#x610f;&#xff0c;max&#x4e0d;&#x80fd;&#x5c0f;&#x4e8e;min&#x3002",{"_index":4877,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["haxe&#x6807;&#x51c6;&#x5e93;&#x5728",{"_index":1548,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#10-14-单元测试":{}}}],["haxe&#x6807;&#x51c6;&#x5e93;&#x5e26;&#x6709;&#x8bb8;&#x591a;&#x5916;&#x90e8;&#x7c7b;&#xff0c;&#x5bf9;&#x4e8e;flash&#x548c;javascript&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x3002;&#x5b83;&#x4eec;&#x4f7f;&#x53ef;&#x4ee5;&#x4ee5;&#x7c7b;&#x578b;&#x5b89;&#x5168;&#x7684;&#x65b9;&#x5f0f;&#x8bbf;&#x95ee;&#x539f;&#x751f;&#x7684;apis&#xff0c;&#x5f53;&#x4f5c;&#x8bbe;&#x8ba1;&#x9ad8;&#x5c42;apis&#x7684;&#x5de5;&#x5177;&#x3002;externs&#x4e5f;&#x53ef;&#x4ee5;&#x5e94;&#x7528;haxelib&#xff08;&#x7b2c;11&#x7ae0;&#xff09;&#x4e2d;&#x8bb8;&#x591a;&#x6d41;&#x884c;&#x7684;&#x539f;&#x751f;&#x5e93;&#x3002",{"_index":5406,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["haxe&#x6807;&#x51c6;&#x5e93;&#x9644;&#x5e26;&#x4e00;&#x7ec4",{"_index":6449,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["haxe&#x6ca1;&#x6709;&#x7c7b;&#x4f3c;java&#x548c;c++&#x7b49;&#x5176;&#x5b83;&#x9762;&#x5411;&#x5bf9;&#x8c61;&#x8bed;&#x8a00;&#x4e2d;&#x7684;protected&#x6982;&#x5ff5;&#x3002;&#x7136;&#x800c;&#xff0c;&#x5b83;&#x7684;private&#x884c;&#x4e3a;&#x7b49;&#x540c;&#x4e8e;&#x90a3;&#x4e9b;&#x8bed;&#x8a00;&#x7684;protected&#x884c;&#x4e3a;&#xff0c;&#x6240;&#x4ee5;haxe&#x5b9e;&#x9645;&#x4e0a;&#x7f3a;&#x5c11;&#x7684;&#x662f;&#x90a3;&#x4e9b;&#x8bed;&#x8a00;&#x4e2d;&#x7684",{"_index":4651,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["haxe&#x7684;&#x5386;&#x53f2",{"_index":50,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{}}}],["haxe&#x7684;&#x6807;&#x8bc6;&#x7b26;&#x7531;&#x4e00;&#x4e2a;&#x4e0b;&#x5212;&#x7ebf;_&#x3001;&#x4e00;&#x4e2a;&#x7f8e;&#x5143;&#x7b26;&#x53f7;$&#xff0c;&#x4e00;&#x4e2a;&#x5c0f;&#x5199;&#x5b57;&#x6bcd;a",{"_index":313,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["haxe&#x7f16;&#x8bd1;&#x5668;&#x4e30;&#x5bcc;&#x7684;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#xff08;&#x7b2c;3&#x7ae0;&#xff09;&#x4f7f;&#x5f97;ides&#x548c;&#x7f16;&#x8f91;&#x5668;&#x96be;&#x4ee5;&#x63d0;&#x4f9b;&#x7cbe;&#x786e;&#x7684;&#x5b8c;&#x6210;&#x4fe1;&#x606f;&#x3002;&#x5728;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6&#x8282;&#xff09;&#x548c;&#x5b8f;&#xff08;&#x7b2c;9&#x7ae0;&#xff09;&#x4e4b;&#x95f4;&#xff0c;&#x9700;&#x8981;&#x5927;&#x91cf;&#x7684;&#x5de5;&#x4f5c;&#x6765;&#x53cd;&#x590d;&#x9700;&#x8981;&#x7684;&#x5904;&#x7406;&#x3002;&#x8fd9;&#x5c31;&#x662f;&#x4e3a;&#x4ec0;&#x4e48;haxe&#x7f16;&#x8bd1;&#x5668;&#x5e26;&#x6709;&#x4e00;&#x4e2a;&#x5185;&#x7f6e;&#x7684;&#x5b8c;&#x6210;&#x6a21;&#x5f0f;&#x4f9b;&#x7b2c;&#x4e09;&#x65b9;&#x8f6f;&#x4ef6;&#x4f7f;&#x7528;&#x3002",{"_index":5892,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["haxe&#x7f16;&#x8bd1;&#x5668;&#x4e3a;&#x6ce8;&#x89e3;&#x7684;&#x7c7b;&#x6216;&#x8005;&#x901a;&#x8fc7",{"_index":6248,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["haxe&#x7f16;&#x8bd1;&#x5668;&#x4fdd;&#x8bc1;&#x4e00;&#x4e2a;string&#x7c7b;&#x578b;&#x7684;&#x5f02;&#x5e38;&#xff0c;&#x5728;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#x88ab;&#x629b;&#x51fa;&#xff08;&#x7b2c;5.22&#x8282;&#xff09;&#x3002;&#x8fd9;&#x4e2a;&#x5f02;&#x5e38;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":5078,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["haxe&#x7f16;&#x8bd1;&#x5668;&#x5141;&#x8bb8;&#x5177;&#x4f53;&#x5316;&#x8868;&#x8fbe;&#x5f0f;&#x3001;&#x7c7b;&#x578b;&#x548c;&#x7c7b;&#x6765;&#x7b80;&#x5316;&#x5b8f;&#x7684;&#x4f7f;&#x7528;&#x3002;&#x5177;&#x4f53;&#x5316;&#x7684;&#x8bed;&#x6cd5;&#x662f",{"_index":6437,"title":{},"body":{"9.宏/9.3.具体化/9.3.具体化.html#9-3-具体化":{}}}],["haxe&#x7f16;&#x8bd1;&#x5668;&#x662f;&#x4e00;&#x4e2a;&#x547d;&#x4ee4;&#x884c;&#x5de5;&#x5177;&#xff0c;&#x53ef;&#x4ee5;&#x5728;&#x8c03;&#x7528;&#x65f6;&#x4f7f;&#x7528;&#x53c2;&#x6570",{"_index":1193,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["haxe&#x7f16;&#x8bd1;&#x5668;&#x901a;&#x5e38;&#x4ece;&#x547d;&#x4ee4;&#x884c;&#x8c03;&#x7528;&#xff0c;&#x4f7f;&#x7528;&#x4e00;&#x4e9b;&#x53c2;&#x6570;&#x6765;&#x56de;&#x7b54;&#x4e24;&#x4e2a;&#x95ee;&#x9898;&#xff1a",{"_index":706,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["haxe&#x81ea;&#x8eab;&#x5b9e;&#x73b0;&#x7684;&#x7528;&#x6cd5;&#x53ef;&#x4ee5;&#x5f3a;&#x5236;&#x4f7f;&#x7528",{"_index":1335,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["haxe&#x89e3;&#x6790;&#x5668;&#x4e0d;&#x89e3;&#x6790",{"_index":5279,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["haxe&#x8bed;&#x6cd5;&#x652f;&#x6301;&#x4e0b;&#x9762;&#x7684;&#x5e38;&#x91cf;&#xff1a",{"_index":5024,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["haxe&#xff0c;&#x4e4b;&#x540e;&#xff0c;&#x5b83;&#x7684",{"_index":1135,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["haxe.d",{"_index":4224,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["haxe.ds.enumvaluemap",{"_index":1713,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["haxe.ds.genericstack",{"_index":1728,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["haxe.ds.intmap",{"_index":1711,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["haxe.ds.objectmap",{"_index":1714,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["haxe.ds.opt",{"_index":1757,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{}}}],["haxe.ds.stringmap",{"_index":1710,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["haxe.ds.stringmap&#x7684;&#x6a21;&#x5757;&#x8def;&#x5f84;&#xff0c;haxe&#x662f;&#x4e00;&#x4e2a;&#x7edd;&#x5bf9;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#x3002",{"_index":4276,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["haxe.ds.stringmap&#xff0c",{"_index":2436,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["haxe.ds.stringmap.stringmapint",{"_index":4220,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["haxe.ds.stringmapint",{"_index":4219,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["haxe.ds.stringmap的模块路径，hax",{"_index":4251,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["haxe.ds.vector",{"_index":1637,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}}}],["haxe.enumtool",{"_index":5423,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["haxe.extern",{"_index":5386,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["haxe.int32",{"_index":2550,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["haxe.int64",{"_index":2551,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["haxe.io.byt",{"_index":1283,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["haxe.io.bytes.ofstring(“hello",{"_index":2201,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["haxe.json",{"_index":1324,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{},"10.标准库/10.10.Json/10.10.Json.html":{},"10.标准库/10.10.Json/10.10.Json.html#10-10-Json":{}}}],["haxe.json&#x5c1d;&#x8bd5;&#x4f7f;&#x7528;&#x539f;&#x751f",{"_index":1341,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["haxe.json.pars",{"_index":1296,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["haxe.json.parse(",{"_index":1299,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["haxe.json.parse(jsondata",{"_index":3127,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["haxe.json.stringifi",{"_index":1315,"title":{},"body":{"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{}}}],["haxe.json.stringify(o",{"_index":1316,"title":{},"body":{"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{}}}],["haxe.macro",{"_index":4156,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["haxe.macro.compil",{"_index":6294,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["haxe.macro.compiler.keep",{"_index":5845,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["haxe.macro.complextyp",{"_index":6531,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["haxe.macro.context",{"_index":6290,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["haxe.macro.context.definetyp",{"_index":6424,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["haxe.macro.context.definetype&#xff09;&#x6216;&#x8005;&#x5f15;&#x7528;&#x4e00;&#x4e2a;&#x5b58;&#x5728;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x65b9;&#x4fbf;&#x8d77;&#x89c1;&#xff0c;&#x6211;&#x4eec;&#x5728;&#x8fd9;&#x91cc;&#x8fd4;&#x56de;null&#xff0c;&#x8981;&#x6c42;&#x7f16;&#x8bd1;&#x5668;&#x63a8;&#x65ad;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x3002",{"_index":6545,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["haxe.macro.context.definetype(c",{"_index":6421,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["haxe.macro.context.definetype）或者引用一个存在的类型。方便起见，我们在这里返回nul",{"_index":6530,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{}}}],["haxe.macro.context.getbuildfield",{"_index":6558,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["haxe.macro.context.typeof",{"_index":6347,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["haxe.macro.expr",{"_index":4099,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["haxe.macro.expr,and",{"_index":4139,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["haxe.macro.expr.complextyp",{"_index":6399,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["haxe.macro.expr.exprdef",{"_index":4140,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["haxe.macro.expr.exprdef&#xff0c;&#x7a0b;&#x5e8f;&#x4f1a;&#x7f16;&#x8bd1;&#x5931;&#x8d25;&#xff0c;&#x63d0;&#x793a;binop&#x7c7b;&#x6ca1;&#x6709;&#x627e;&#x5230;&#x3002",{"_index":4183,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["haxe.macro.expr.exprdef，程序会编译失败，提示binop",{"_index":4138,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["haxe.macro.expr.field",{"_index":6568,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["haxe.macro.expr.field&#x7684;&#x5b9e;&#x4f8b;&#xff0c;&#x53ef;&#x4ece;&#x751f;&#x6210;&#x7684;typedefinition&#x7684;&#x5b57;&#x6bb5;&#x6570;&#x7ec4;&#x83b7;&#x5f97;&#x3002",{"_index":6435,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["haxe.macro.expr.field的实例，可从生成的typedefinit",{"_index":6425,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html":{}}}],["haxe.macro.expr.funct",{"_index":6487,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["haxe.macro.expr.typedefinit",{"_index":6417,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["haxe.macro.exprdef",{"_index":4108,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["haxe.macro.exprof",{"_index":6313,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["haxe.macro.expr的实例。haxe编译器接受通常的hax",{"_index":6360,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{}}}],["haxe.macro.print",{"_index":6443,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html":{}}}],["haxe.macro.tool",{"_index":5424,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["haxe.macro.typ",{"_index":6523,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["haxe.macro.typepath",{"_index":6371,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["haxe.remoting.asyncconnect",{"_index":1379,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接":{}}}],["haxe.remoting.connect",{"_index":1378,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["haxe.remoting.httpasyncconnection.urlconnect",{"_index":1411,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["haxe.remoting.httpconnection.handlerequest(ctx",{"_index":1405,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{}}}],["haxe.resourc",{"_index":6131,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["haxe.resource.getbyt",{"_index":6143,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["haxe.resource.getstr",{"_index":2112,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{}}}],["haxe.rtti.meta",{"_index":5800,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["haxe.rtti.meta.getfields(myclass).value.rang",{"_index":451,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["haxe.rtti.rtti",{"_index":6245,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["haxe.rtti.rtti.getrtti(main",{"_index":6246,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["haxe.rttixmlpars",{"_index":6244,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["haxe.seri",{"_index":2394,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["haxe.templ",{"_index":2058,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#全局":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["haxe.template(sampl",{"_index":2065,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["haxe.template在这里使用的，来确定mak",{"_index":3996,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{}}}],["haxe.typeresolv",{"_index":5976,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["haxe.unit",{"_index":1521,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#10-14-单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["haxe.unit.testcas",{"_index":1522,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{}}}],["haxe.unit.testrunn",{"_index":1529,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}}}],["haxe.unseri",{"_index":2395,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["haxe.xml",{"_index":2474,"title":{},"body":{"10.标准库/10.9.Xml/10.9.Xml.html":{},"10.标准库/10.9.Xml/10.9.Xml.html#10-9-Xml":{}}}],["haxe/gi",{"_index":5015,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["haxe/i",{"_index":1866,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{}}}],["haxe/macro/expr.hx",{"_index":757,"title":{},"body":{"9.宏/9.宏.html":{},"9.宏/9.宏.html#9-宏":{}}}],["haxe/neko示例展示的，你可以简单的连接到服务端口，并发送所有的命令（或者每行）以0",{"_index":6057,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{}}}],["haxe2",{"_index":4496,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{}}}],["haxe3",{"_index":5670,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{}}}],["haxe3&#x4e4b;&#x524d;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x63d2;&#x503c",{"_index":5687,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["haxe3.2.0",{"_index":2825,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["haxe3.2.0&#x4ee5;&#x540e;&#x5269;&#x4f59;&#x7684;&#x53c2;&#x6570;&#x548c;&#x7c7b;&#x578b;&#x9009;&#x62e9",{"_index":5412,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["haxe_v",{"_index":3581,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["haxejson",{"_index":1325,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["haxelib",{"_index":674,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["haxelib&#x5de5;&#x5177;&#x7684",{"_index":1148,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["haxelib&#xff08;&#x7b2c;11&#x7ae0;&#xff09",{"_index":1041,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["haxelib&#xff08;&#x7b2c;11&#x7ae0;&#xff09;&#x5e93;&#x3002;&#x9ed8;&#x8ba4;&#xff0c;&#x672c;&#x5730;haxelib&#x4ed3;&#x5e93;&#x4e2d;&#x6700;&#x65b0;&#x7684;&#x7248;&#x672c;&#x88ab;&#x4f7f;&#x7528;&#x3002;&#x8981;&#x4f7f;&#x7528;&#x7279;&#x5b9a;&#x7248;&#x672c;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":726,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["haxelib（第11",{"_index":997,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{}}}],["haxelib（第11章）库。默认，本地haxelib",{"_index":669,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["haxe中它允许你应用一个函数到一个列表或者迭代（第6.7节）。lambda",{"_index":1967,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{}}}],["haxe中的表达式定义了程序需要做什么。多数表达式可以在方法（第4.3",{"_index":228,"title":{},"body":{"5.表达式/5.表达式.html":{}}}],["haxe中，我们可以使用结构子类型化（第3.5.2",{"_index":3785,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["haxe也会在多数数值运算中转换int",{"_index":1949,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{}}}],["haxe代码组织在模块中，通过路径定位。本质上讲，每个.hx",{"_index":4215,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{}}}],["haxe允许用类组织代码，使其成为一个面向对象语言。通常相关的功能如jav",{"_index":364,"title":{},"body":{"6.语言特性/6.语言特性.html":{}}}],["haxe允许许多类型的参数化，就像类字段（第4章）和枚举构造函数（第2.4.1节）。类型参数通过闭合的尖括号囊括以逗号分隔的类型参数名来定义。一个简单的例子来自于hax",{"_index":3634,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["haxe提供声明这样的依赖关系在各自的目标语言向细节（第12",{"_index":5384,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["haxe是一个非常快的编译器，依赖普通编译器的完成调用通常就足以胜任。对于较大的项目，haxe提供一个确保只有那些实际上发生了变化，或者它们的依赖关系有任何变化的文件才会被重新编译的服务模式（第8.3.8",{"_index":5888,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{}}}],["haxe有一个特别的范围操作符控制迭代次数。这是一个二院操作符，操作两个操作数：min…max，返回一个从min（包括）到max（不包括）的intiterator类型的实例。注意，max不能小于min",{"_index":4852,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{}}}],["haxe标准库中的一些类适用于静态扩展用法。下面的例子展示了stringtool",{"_index":5420,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{}}}],["haxe标准库中的类被dc",{"_index":5840,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["haxe标准库带有许多外部类，对于flash和javascript目标语言。它们使可以以类型安全的方式访问原生的apis，当作设计高层apis的工具。externs也可以应用haxelib（第11",{"_index":5380,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["haxe标准库（第10章），math",{"_index":5372,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["haxe没有类似java和c++等其它面向对象语言中的protected概念。然而，它的private行为等同于那些语言的protected行为，所以hax",{"_index":4628,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{}}}],["haxe用户被setter的类型需要是t",{"_index":4385,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{}}}],["haxe的局部变量，它们会会阻挡整个hax",{"_index":4149,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["haxe的标识符由一个下划线_、一个美元符号$，一个小写字母a",{"_index":237,"title":{},"body":{"5.表达式/5.表达式.html":{}}}],["haxe程序如何构造的。这节关于类字段的将对构造部分做出结论，同时通往hax",{"_index":154,"title":{},"body":{"4.类字段/4.类字段.html":{}}}],["haxe编译器丰富的类型系统（第3章）使得ides和编辑器难以提供精确的完成信息。在类型推断（第3.6节）和宏（第9章）之间，需要大量的工作来反复需要的处理。这就是为什么hax",{"_index":5880,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{}}}],["haxe编译器保证一个string类型的异常，在这种情况被抛出（第5.22",{"_index":5067,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{}}}],["haxe编译器然后解析main",{"_index":645,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["header",{"_index":1492,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["headerclasscod",{"_index":6688,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["headercod",{"_index":6689,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["headernamespacecod",{"_index":6690,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["heart",{"_index":3911,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["hello",{"_index":43,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html":{},"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["hello_message.txt",{"_index":6133,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{}}}],["hello_message.txt@welcom",{"_index":6116,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html":{},"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html#8-4-1-嵌入资源":{}}}],["helloworld",{"_index":4552,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html":{}}}],["helloworld&#x793a;&#x4f8b;&#x5c31;&#x5305;&#x542b;&#x4e00;&#x4e2a",{"_index":4562,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["help",{"_index":234,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{}}}],["henc",{"_index":4694,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["here",{"_index":8,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["here&#x201d",{"_index":5799,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["here&#x3002",{"_index":4712,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["here,expression1",{"_index":5041,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["here,th",{"_index":3993,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["hexadecim",{"_index":1227,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["hexo",{"_index":1,"title":{},"body":{"index.html":{},"index.html#关于本文档":{}}}],["hi",{"_index":2081,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["hierarchi",{"_index":4444,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["higher",{"_index":5172,"title":{},"body":{"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["highlight",{"_index":4453,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["hint",{"_index":4073,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{}}}],["hold",{"_index":178,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["holds,expression2",{"_index":5043,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["home",{"_index":171,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{}}}],["horizont",{"_index":1229,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["host",{"_index":4553,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["however,our",{"_index":3781,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["htaccess",{"_index":1486,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["html",{"_index":2116,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{}}}],["html页面包含一个在互联网上的可用的json",{"_index":1328,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html":{}}}],["http",{"_index":1500,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["http://localhost",{"_index":1412,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["http://localhost:2000/remoting.n",{"_index":1421,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["http://localhost:2000/remoting.n&#x201d",{"_index":1467,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["http://try.haxe.org",{"_index":5851,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["httpasyncconnection.urlconnect(url:str",{"_index":1380,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["httpconnection.urlconnect(url:str",{"_index":1399,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["https://github.com/haxefoundation/haxemanu",{"_index":1082,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{}}}],["httpstatu",{"_index":3393,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["httpstatus.notfound",{"_index":3399,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["hugh",{"_index":1111,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["hx",{"_index":271,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["hxcpp",{"_index":831,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["hxgen",{"_index":6691,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["hxml",{"_index":575,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["hxserial",{"_index":2408,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["hxserialize&#xff0c;&#x8fd9;&#x4e2a;&#x65b9;&#x6cd5;&#x88ab;&#x5e8f;&#x5217;&#x5316;&#x5668;&#x8c03;&#x7528;&#xff0c;&#x5141;&#x8bb8;&#x5bf9;&#x7c7b;&#x7684;&#x81ea;&#x5b9a;&#x4e49;&#x5e8f;&#x5217;&#x5316;&#x3002;&#x540c;&#x6837;&#xff0c;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x5b9a;&#x4e49;&#x4e86;&#x6210;&#x5458;&#x65b9;&#x6cd5",{"_index":2465,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["hxunseri",{"_index":2409,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["hxunserialize&#x4e2d;&#x9ed8;&#x8ba4;&#x5b83;&#x4e3a",{"_index":2469,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["hxunserialize&#xff0c;&#x5b83;&#x88ab;&#x53cd;&#x5e8f;&#x5217;&#x5316;&#x5668;&#x8c03;&#x7528;&#xff1a",{"_index":2466,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["h（例如，by1:xi2y1:knh，{“x",{"_index":2193,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["h（例如，lnnh",{"_index":2186,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["i&#x4e3a;&#x53ef;&#x8bbf;&#x95ee;&#x7684;&#xff0c;&#x89e3;&#x6790;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":4292,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["i&#x548c;&#x7c7b;&#x578b;&#x540d;&#x4e3a;i&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":4313,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["i&#xff0c;&#x6bcf;&#x4e2a;&#x4ee3;&#x8868;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5",{"_index":5939,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["i&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":4295,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["i.",{"_index":617,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["i1",{"_index":5642,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["i2",{"_index":5643,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["i456",{"_index":2176,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["i456&#xff09",{"_index":2218,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["ia",{"_index":3613,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["id",{"_index":812,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["ident",{"_index":6315,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["identi&#xfb01;",{"_index":311,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["identifi",{"_index":2914,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["identiﬁ",{"_index":236,"title":{},"body":{"5.表达式/5.表达式.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{}}}],["ie7",{"_index":1327,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html":{}}}],["ieee",{"_index":2487,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{}}}],["if(5.16",{"_index":2562,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["if(ba",{"_index":5594,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["if(condit",{"_index":4914,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["if/els",{"_index":3902,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["iffeatur",{"_index":6692,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["ignor",{"_index":811,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["ii",{"_index":1648,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["il",{"_index":6038,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["immens",{"_index":3913,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["immut",{"_index":5011,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["impact",{"_index":3833,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["impl",{"_index":3374,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["implement",{"_index":288,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["implemented!&#x2019",{"_index":3332,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["implements,th",{"_index":3752,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["implementsdynam",{"_index":3102,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["impli",{"_index":3662,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["implic",{"_index":5108,"title":{},"body":{"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["implicit",{"_index":3200,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["implicitli",{"_index":3642,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["import",{"_index":289,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["import&#x53ef;&#x4ee5;&#x5bfc;&#x5165;&#x4e00;&#x4e2a;&#x5305;&#x4e2d;&#x6240;&#x6709;&#x7684;&#x6a21;&#x5757;&#x3001;&#x6a21;&#x5757;&#x4e2d;&#x7684;&#x6240;&#x6709;&#x7c7b;&#x578b;&#x6216;&#x8005;&#x7c7b;&#x578b;&#x4e2d;&#x7684;&#x6240;&#x6709;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x3002;&#x901a;&#x8fc7;&#x4ee5;&#x4e0b;&#x4f8b;&#x5b50;&#x91cd;&#x70b9;&#x4e86;&#x89e3;&#x6b64;&#x7c7b;&#x5bfc;&#x5165;&#x64cd;&#x4f5c;&#x53ea;&#x80fd;&#x8986;&#x76d6;&#x540c;&#x7ea7;&#x7684;&#x8bbf;&#x95ee;&#xff08;onli",{"_index":4198,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["import(3.7.2",{"_index":4226,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["importantli",{"_index":4427,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["import可以导入一个包中所有的模块、模块中的所有类型或者类型中的所有静态字段。通过以下例子重点了解此类导入操作只能覆盖同级的访问（onli",{"_index":4154,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["imposs",{"_index":3522,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["improv",{"_index":4671,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["in&#xfb01;nit",{"_index":4405,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["in&#xfb02;uenc",{"_index":4001,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["in&#xff0c;&#x548c;&#x4e00;&#x4e2a;&#x4efb;&#x610f;&#x8868;&#x8fbe;&#x5f0f;&#x4f5c;&#x4e3a;&#x8fed;&#x4ee3;&#x7684;&#x96c6;&#x5408;&#xff1b;&#x5728;&#x95ed;&#x53e3;&#x7684;&#x5706;&#x62ec;&#x53f7",{"_index":4870,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["in=\"xml",{"_index":5973,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{}}}],["in=xml",{"_index":5990,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["includ",{"_index":376,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["inclus",{"_index":4858,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["incompat",{"_index":3787,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["increment",{"_index":5130,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{}}}],["inde",{"_index":3487,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["indeed,th",{"_index":196,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{}}}],["index",{"_index":5220,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["indexexpr",{"_index":5224,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["indexexpr是int",{"_index":5222,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html":{}}}],["indic",{"_index":3590,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["individu",{"_index":3224,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["inf",{"_index":1959,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["infer",{"_index":508,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["inference(3.6",{"_index":3571,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["inference(section3.6",{"_index":3857,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{}}}],["inform",{"_index":447,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["inherit",{"_index":365,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["initi",{"_index":1689,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["initpackag",{"_index":6694,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["inject",{"_index":6659,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["inlin",{"_index":290,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["inline&#x4fee;&#x9970;&#x7b26",{"_index":4745,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html#4-4-访问修饰符":{}}}],["innermost",{"_index":4983,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{}}}],["input",{"_index":667,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["insert",{"_index":412,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["insid",{"_index":615,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["instanc",{"_index":1800,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["instance&#x201d",{"_index":4759,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["instanti",{"_index":3494,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["instead",{"_index":829,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["instrument",{"_index":381,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["int",{"_index":403,"title":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["int&#x201d;&#x7684;&#x9519;&#x8bef",{"_index":3336,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["int&#x3002;&#x5b83;&#x4eec;&#x5728;&#x8bed;&#x53e5;&#x4e2d;&#x53ef;&#x4ee5;&#x7b80;&#x5355;&#x7684;&#x901a;&#x8fc7;&#x503c;&#x8bc6;&#x522b;&#xff1a",{"_index":2621,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["int&#x672c;&#x8eab;&#x6ca1;&#x6709",{"_index":5485,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["int&#xff08;&#x4e0d;&#x80fd;&#x4e3a;&#x7a7a;&#xff09",{"_index":2636,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["int&#xff09;&#xff0c;&#x800c;&#x53cd;&#x8fc7;&#x6765;&#x5219;&#x4e0d;&#x884c;&#xff1a;&#x5206;&#x914d;&#x4e00;&#x4e2a",{"_index":2500,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["int&#xff0c;&#x5ba2;&#x6237;&#x7aef;&#x4ecd;&#x7136;&#x53ef;&#x4ee5;&#x5728;&#x8c03;&#x7528;&#x65b9;&#x6cd5;&#x65f6;&#x4f7f;&#x7528;&#x5b57;&#x7b26;&#x4e32;&#x4f5c;&#x4e3a;&#x53c2;&#x6570;&#x3002;&#x8fd9;&#x53ef;&#x4ee5;&#x5bfc;&#x81f4;&#x4e00;&#x4e9b;&#x60c5;&#x51b5;&#x4e0b;&#x7684;&#x5b89;&#x5168;&#x95ee;&#x9898;&#x3002;&#x5f53;&#x4e0d;&#x786e;&#x5b9a;&#x65f6;&#xff0c;&#x5728;&#x51fd;&#x6570;&#x88ab;&#x8c03;&#x7528;&#x4f7f;&#x7528",{"_index":1519,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#不确保参数类型":{}}}],["int&#xff0c;&#x7136;&#x540e;&#x7ecf;&#x8fc7;&#x4e0d;&#x5b89;&#x5168;&#x8f6c;&#x6362",{"_index":5093,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["int32",{"_index":5965,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["int64",{"_index":5966,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["intarg",{"_index":6479,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["intdivis",{"_index":1921,"title":{},"body":{"10.标准库/10.4.Math/10.4.3.整数数学.html":{},"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{}}}],["integ",{"_index":5005,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["intend",{"_index":5073,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["intended,it",{"_index":4382,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["interact",{"_index":338,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["interest",{"_index":3496,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["interfac",{"_index":291,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["interface(2.3.3),it",{"_index":5307,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["intern",{"_index":272,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["interp",{"_index":835,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["interpol",{"_index":461,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["interpret",{"_index":5528,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["interv",{"_index":4853,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["intextend",{"_index":5454,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["intextender&#x7c7b;&#x901a;&#x8fc7",{"_index":5483,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["intextender.triple(12",{"_index":5457,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["intiter",{"_index":4856,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["introduc",{"_index":3920,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["introduct",{"_index":5669,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["intuit",{"_index":3918,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["int参数，1和8",{"_index":5806,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html":{}}}],["invalid",{"_index":2078,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["invari",{"_index":3768,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["invoc",{"_index":3653,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["invok",{"_index":638,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["involv",{"_index":3863,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["inﬁnit",{"_index":4378,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{}}}],["inﬂuenc",{"_index":3985,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{}}}],["io",{"_index":5972,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["io.file.stderr().writestring(lin",{"_index":6077,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["irrelev",{"_index":3872,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["isextern",{"_index":6175,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["isinterfac",{"_index":6176,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["isnotallowed(cas",{"_index":5612,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["isoverrid",{"_index":6185,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["ispriv",{"_index":6174,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["ispubl",{"_index":6183,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["issu",{"_index":632,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["isthreelett",{"_index":1993,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["isvalid",{"_index":2077,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["isvar",{"_index":4380,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["it&#x2019;",{"_index":5797,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["it.iterator().hasnext",{"_index":3829,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["iter",{"_index":424,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["iterable&#x4e3a;&#x4ee3;&#x8868;&#xff1a",{"_index":5739,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["iterablea",{"_index":1970,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["iterablestr",{"_index":3579,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["iterablet",{"_index":2949,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["iterablet):bool",{"_index":3828,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["iterablewithlength",{"_index":2950,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["iterablewithlengthandpush",{"_index":2962,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["iterablewithlengthandpusht",{"_index":2960,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["iterablewithlengtht",{"_index":2948,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["iteration,but",{"_index":5042,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["iterator&#x3002;main&#x65b9;&#x6cd5;&#x5b9e;&#x4f8b;&#x5316;&#x4e86;&#x5b83;&#xff0c;&#x7136;&#x540e;&#x8fdb;&#x884c;&#x8fed;&#x4ee3;&#x3002",{"_index":5749,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["iterator&#x7c7b;&#x578b;&#x3002",{"_index":4874,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["iterator&#xff0c;&#x5219;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x53ef;&#x8fed;&#x4ee3;&#x7c7b;&#x578b;&#x3002",{"_index":5744,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["iterator,if",{"_index":5724,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["iteratort",{"_index":5718,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["iterator。main",{"_index":5732,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{}}}],["iterator方法返回一个iter",{"_index":4851,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{}}}],["itself",{"_index":4077,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["it’",{"_index":5772,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{}}}],["i{}:str",{"_index":6363,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["i和类型名为i",{"_index":4267,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["i通过一个小写字母开始，跳到11",{"_index":4261,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["j",{"_index":2209,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["jar",{"_index":6153,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{}}}],["java",{"_index":374,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["java&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#x662f;&#x7981;&#x7528;&#x7684;&#x3002",{"_index":6284,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["javacanon",{"_index":6696,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["javascript",{"_index":9,"title":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}},"body":{"index.html":{},"index.html#关于本文档":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["javascript&#xff0c;&#x5b83;&#x5f80;&#x5f80;&#x53ef;&#x4ee5;&#x751f;&#x6210;&#x7b80;&#x6d01;&#x5e72;&#x51c0;&#x7684;&#x4ee3;&#x7801;&#x3002;&#x7f16;&#x8bd1;&#x4e0a;&#x9762;&#x7684;&#x4ee3;&#x7801;&#xff08;&#x4f7f;&#x7528",{"_index":3544,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["javascript&#xff0c;php&#xff0c;neko",{"_index":2670,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["javascript目标语言的dc",{"_index":5850,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["javascript，php，neko",{"_index":2649,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{}}}],["job.industri",{"_index":466,"title":{},"body":{"6.语言特性/6.语言特性.html":{}}}],["job.industry}&#x2019",{"_index":554,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["john",{"_index":2088,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{}}}],["john(45",{"_index":2094,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{}}}],["join",{"_index":6075,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["jose&#xfb01;en",{"_index":1065,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["joseﬁen",{"_index":1052,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{}}}],["js",{"_index":387,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["js&#xff0c",{"_index":718,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["js.browser.alert",{"_index":388,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["json",{"_index":66,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{},"10.标准库/10.10.Json/10.10.Json.html":{},"10.标准库/10.10.Json/10.10.Json.html#10-10-Json":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["json&#xff0c;&#x5982;&#x679c;&#x4e0d;&#x88ab;&#x652f;&#x6301;&#xff0c;&#x5219;&#x56de;&#x9000;&#x5230;&#x5b83;&#x81ea;&#x5df1;&#x7684;&#x5b9e;&#x73b0;&#x3002",{"_index":1342,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["json.length",{"_index":3130,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["json.pars",{"_index":3131,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["json:dynam",{"_index":3133,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["json[0",{"_index":3132,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["jsondata",{"_index":3126,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["jsrequir",{"_index":6699,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["js客户端的html",{"_index":1485,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{}}}],["judg",{"_index":4673,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["judici",{"_index":4656,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["jump",{"_index":1839,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["juraj",{"_index":6446,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["justi&#xfb01;",{"_index":4352,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["justiﬁ",{"_index":4331,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{}}}],["jvm",{"_index":1287,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["jy3:foo:0:0",{"_index":2210,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["jy3:foo:1:2i4n",{"_index":2211,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["k",{"_index":2177,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["k:null",{"_index":2184,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["k:null}&#xff09",{"_index":2239,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["keep",{"_index":845,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["keep(&#x201c;typ",{"_index":5867,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["keep(“typ",{"_index":5844,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["keepinit",{"_index":5843,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["keepsub",{"_index":5842,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["kept",{"_index":6693,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["kexpr",{"_index":6534,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["key",{"_index":1690,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["key&#x7684;&#x5f62;&#x5f0f;&#x5bf9;&#x6807;&#x8bb0;&#x8fdb;&#x884c;&#x8bbe;&#x7f6e;&#xff0c;&#x53ea;&#x6709;key&#x7684;&#x65f6;&#x5019;&#x503c;&#x9ed8;&#x8ba4;&#x4e3a",{"_index":5259,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["key1",{"_index":5204,"title":{},"body":{"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["key2",{"_index":5206,"title":{},"body":{"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["key:valu",{"_index":5203,"title":{},"body":{"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["key=valu",{"_index":5237,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["keyn",{"_index":5208,"title":{},"body":{"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["keyword",{"_index":276,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["key的形式对标记进行设置，只有key",{"_index":5238,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{}}}],["kilomet",{"_index":2104,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["kind",{"_index":173,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["kirchheim",{"_index":6447,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["know",{"_index":3720,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["known",{"_index":373,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["korostelev",{"_index":1049,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{}}}],["korostelev&#xff1a;&#x8ffd;&#x52a0;&#x5185;&#x5bb9;&#x548c;&#x7f16;&#x8f91",{"_index":1063,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["krajewski",{"_index":1047,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["l",{"_index":2185,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["lack",{"_index":4082,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["lambda",{"_index":58,"title":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["lambda&#x7684",{"_index":2054,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda&#xff08;&#x67e5;&#x770b;&#x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09;&#xff09;&#x5b83;&#x88ab;&#x5b8c;&#x7f8e;&#x7684;&#x4f7f;&#x7528;&#xff0c;&#x7136;&#x540e;&#x4f5c;&#x4e3a;&#x4e00;&#x4e2a",{"_index":2013,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{}}}],["lambda.array&#xff0c;lambda.list",{"_index":2027,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.array，lambda.list",{"_index":1973,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{}}}],["lambda.concat",{"_index":1983,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.count",{"_index":1974,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.empti",{"_index":1976,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.exist",{"_index":1978,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.filt",{"_index":1984,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.find",{"_index":1980,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.fold",{"_index":1987,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.foreach",{"_index":1981,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.ha",{"_index":1977,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.indexof",{"_index":1979,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.it",{"_index":1982,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.map",{"_index":1985,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{}}}],["lambda.map&#xff0c",{"_index":2044,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda.mapi",{"_index":1986,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["lambda（查看静态扩展（第6.3",{"_index":1968,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{}}}],["languag",{"_index":369,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["language&#x2019;",{"_index":4653,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["language’",{"_index":4631,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{}}}],["larg",{"_index":4720,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["larger",{"_index":3713,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["last",{"_index":4256,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["later",{"_index":476,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["latin",{"_index":1288,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["latter",{"_index":3588,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["lazi",{"_index":1840,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["le",{"_index":651,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["le,it",{"_index":4129,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["lead",{"_index":260,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["leaf",{"_index":5516,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["leaf&#xff0c;&#x5b83;&#x7684;nam",{"_index":5560,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["leaf&#xff0c;&#x5b83;&#x7684;name&#x88ab;&#x8fd4;&#x56de;&#xff08;&#x8fd9;&#x5e94;&#x7528;&#x5728;&#x8fd9;&#x91cc;&#xff0c;&#x8fd4;&#x56de;&#x201c;foo&#x201d;&#xff09",{"_index":5564,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["leaf(",{"_index":5545,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["leaf(&#x201c;foo&#x201d",{"_index":5572,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["leaf(_",{"_index":5526,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["leaf(foo",{"_index":5554,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["leaf(v",{"_index":5501,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["leaf(“foo",{"_index":5555,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{}}}],["leaf,it",{"_index":5550,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["leafnod",{"_index":5553,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["leaf，它的nam",{"_index":5548,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{}}}],["leaf，它的name被返回（这应用在这里，返回“foo",{"_index":5549,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{}}}],["learn",{"_index":3505,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["leav",{"_index":473,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["left",{"_index":3503,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["len",{"_index":1778,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["length",{"_index":1975,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["less",{"_index":3795,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["letter",{"_index":259,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["level",{"_index":204,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["level&#xff09;&#xff1a",{"_index":4199,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["level:1",{"_index":897,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["lexicograph",{"_index":5162,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["lf",{"_index":1233,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["lib",{"_index":626,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["lib.print(line.substr",{"_index":6074,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["librari",{"_index":627,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["library&#x2019;",{"_index":633,"title":{},"body":{"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["library_nam",{"_index":668,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["library_name:vers",{"_index":670,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["library’",{"_index":622,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{}}}],["licenc",{"_index":41,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html":{},"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{}}}],["likewis",{"_index":4721,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["likewise,access",{"_index":4428,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["likewise,th",{"_index":4559,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["limit",{"_index":254,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["line",{"_index":618,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["line,th",{"_index":4134,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["line.charcodeat",{"_index":6072,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["list",{"_index":786,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["list&#xff09",{"_index":2242,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["list&#xff0c;&#x5219;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x66f4;&#x5feb;&#x901f;&#x7684",{"_index":2032,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["liter",{"_index":1221,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["littl",{"_index":4329,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["ll",{"_index":5774,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{}}}],["lled",{"_index":475,"title":{},"body":{"6.语言特性/6.语言特性.html":{}}}],["load",{"_index":5385,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["local",{"_index":210,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["localconnect",{"_index":1394,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["localconnection&#x4e0a;&#x8fdb;&#x884c;&#x8fdc;&#x7a0b;&#x901a;&#x8baf;&#x3002",{"_index":1445,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["localconnection.connect(name:str",{"_index":1393,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["locat",{"_index":589,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["log",{"_index":1955,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["logarithm",{"_index":1956,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["logic",{"_index":360,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["long",{"_index":4433,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["longer",{"_index":4429,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["look",{"_index":189,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["lookup",{"_index":4504,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["loop",{"_index":359,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["loop(5.13",{"_index":5722,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["loops,so",{"_index":5696,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["lot",{"_index":3832,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["low",{"_index":5241,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["lower",{"_index":245,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["lua",{"_index":1292,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["lunar",{"_index":1055,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{}}}],["lunar&#xff1a;&#x7f16;&#x8f91",{"_index":1067,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["lvalu",{"_index":3652,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["m",{"_index":1702,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["machin",{"_index":1100,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["macro",{"_index":265,"title":{"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"9.宏/9.宏.html":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.3.具体化/9.3.具体化.html":{},"9.宏/9.3.具体化/9.3.具体化.html#9-3-具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"9.宏/9.6.限制/9.6.限制.html":{},"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["macro.expr.exprdef",{"_index":4098,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["macrostringtool",{"_index":6441,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["made",{"_index":1707,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["main",{"_index":5,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["main&#x65b9;&#x6cd5;&#x4e2d;&#x6211;&#x4eec;&#x5b9e;&#x4f8b;&#x5316;&#x4e00;&#x4e2a;main&#x7c7b;&#x81ea;&#x5df1;&#x7684;&#x5b9e;&#x4f8b;&#xff0c;&#x6709;&#x4e00;&#x4e2a;&#x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":4841,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["main&#x65b9;&#x6cd5;&#x8bbf;&#x95ee;&#x8fd9;&#x4e9b;&#x5143;&#x6570;&#x636e;&#x7684;&#x503c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x7684;api&#x3002;&#x8f93;&#x51fa;&#x63ed;&#x793a;&#x4e86;&#x83b7;&#x5f97;&#x7684;&#x6570;&#x636e;&#x7684;&#x7ed3;&#x6784;&#xff1a",{"_index":5827,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["main&#xff09;&#x7684;&#x5219;&#x6709;&#x6240;&#x4e0d;&#x540c;&#xff1a;&#x5bf9;&#x4e8e;&#x8fd9;&#x4e9b;&#x5b83;&#x662f;&#x5f3a;&#x5236;&#x9996;&#x5148;&#x7c7b;&#x578b;&#x5316;&#x5de6;&#x4fa7;&#xff08;&#x201c;foo&#x201d",{"_index":6329,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["main().x",{"_index":4333,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["main().x+1",{"_index":4334,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{}}}],["main().x+1&#xff0c",{"_index":4355,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["main.hx",{"_index":1180,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["main.hx:3",{"_index":1181,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["main.hx:4",{"_index":6001,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["main.hx:5",{"_index":6002,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["main.hx:6",{"_index":6003,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["main.hx@0",{"_index":5919,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["main.hx@0@posit",{"_index":6013,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["main.hx@0@usag",{"_index":6000,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["main.hx@63@toplevel",{"_index":6037,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["main.ident",{"_index":6321,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["main.intextend",{"_index":5453,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["main.main",{"_index":1591,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["main.method_int",{"_index":3727,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["main.method_str",{"_index":3728,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["main.myfunc",{"_index":6566,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["main.printstatu",{"_index":3404,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["main.printstatus(statu",{"_index":3403,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["main.staticfield",{"_index":4752,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["maintain",{"_index":581,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["main方法中我们实例化一个main",{"_index":4835,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html":{}}}],["main方法中访问x是复杂的：它有潜在的副作用，如本例中main",{"_index":4332,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{}}}],["main方法创建一个child",{"_index":4450,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{}}}],["main方法访问这些元数据的值可以使用它们的api",{"_index":5808,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html":{}}}],["main）的则有所不同：对于这些它是强制首先类型化左侧（“foo",{"_index":6319,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html":{}}}],["main，首字母大写），类中包含函数（main",{"_index":1182,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{}}}],["major",{"_index":1370,"title":{},"body":{"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{}}}],["make",{"_index":366,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["make()&#xff0c;&#x6240;&#x4ee5;&#x6211;&#x4eec;&#x77e5;&#x9053;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x4f1a;&#x5206;&#x914d;&#x5230;&#x53d8;&#x91cf;&#x3002;&#x5229;&#x7528;&#x8fd9;&#x4e2a;&#x4fe1;&#x606f;&#xff0c;&#x53ef;&#x4ee5;&#x5206;&#x522b;&#x7ed1;&#x5b9a",{"_index":4017,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["make(),so",{"_index":3997,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["makeenumfield",{"_index":6474,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["makeenumfield(nam",{"_index":6481,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["maket:constructible():t",{"_index":3995,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["manag",{"_index":3900,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["mandatori",{"_index":5107,"title":{},"body":{"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["mangl",{"_index":3710,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["mani",{"_index":4445,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["manner",{"_index":340,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["manual",{"_index":422,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["map",{"_index":477,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.数据结构.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["map&#x7c7b;&#x578b;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x4e0d;&#x5b58;&#x5728;&#xff0c;&#x88ab;&#x4e0a;&#x9762;&#x7684;&#x5bf9;&#x8c61;&#x4e4b;&#x4e00;&#x53d6;&#x4ee3;&#x3002;map&#x4f7f;&#x7528;&#x5b83;&#x7684;&#x952e;&#x7c7b;&#x578b;&#x5b9a;&#x4e49;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#xff08;&#x7b2c;2.8.3&#x8282;&#xff09;&#x3002",{"_index":1723,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["map.set",{"_index":5755,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["map.set(1",{"_index":5761,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["map.set(1,&#x201d;12&#x201d;)&#xff0c;&#x8c03;&#x7528",{"_index":5784,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["map.set(1,”12",{"_index":5758,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{}}}],["map.set.bind(1",{"_index":5764,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{}}}],["map.set.bind(1)&#x7ed1;&#x5b9a;&#xff0c;&#x751f;&#x6210;&#x4e00;&#x4e2a",{"_index":5790,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["map.set.bind(1),yield",{"_index":5768,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["map1",{"_index":1692,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["map2",{"_index":1693,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["map3",{"_index":1697,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["map4",{"_index":1701,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["map4.key",{"_index":1706,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["map5",{"_index":1708,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["mapstr",{"_index":1695,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["map类型在运行时不存在，被上面的对象之一取代。map使用它的键类型定义数组访问（第2.8.3",{"_index":1715,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{}}}],["map（第10.2.5节）和类实例序列化枚举（第2.4",{"_index":1326,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html":{}}}],["mark",{"_index":2063,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["mark(30",{"_index":2093,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{}}}],["match",{"_index":484,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["matched(x",{"_index":1766,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["matcher",{"_index":5503,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["matching(section6.4",{"_index":4941,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["math",{"_index":56,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["math.abs(z",{"_index":1952,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["math.ceil(i",{"_index":1954,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["math.floor(math.pi",{"_index":5377,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["math.log(math.exp",{"_index":1957,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["math.pi",{"_index":1941,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["math.random",{"_index":1760,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["math.sin(x*math.pi",{"_index":1953,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["math.sqrt",{"_index":1852,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["mathstaticextens",{"_index":1933,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["max",{"_index":849,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["maximum",{"_index":851,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["md5",{"_index":901,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["mean",{"_index":332,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["measur",{"_index":3578,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["measurable(a:t",{"_index":3583,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["measurable)(a:t",{"_index":3585,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["mechan",{"_index":4028,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["member",{"_index":151,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["member,then",{"_index":4361,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["memori",{"_index":1361,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["mention",{"_index":3495,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["merg",{"_index":6701,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["mergeblock",{"_index":6700,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["messag",{"_index":3657,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["meta",{"_index":4503,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["meta.getfields(myclass).value.rang",{"_index":5803,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["meta.getstatics(myclass).method",{"_index":5804,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["meta.gettype(myclass",{"_index":5802,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["metadata",{"_index":444,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["metadata=file.xml",{"_index":915,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["method",{"_index":146,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["method,yet",{"_index":5459,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["methodnotallow",{"_index":3396,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["methodstring(x",{"_index":3667,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["methodt(t:t",{"_index":3726,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["mian",{"_index":2296,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["micro",{"_index":858,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["mid",{"_index":4658,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["mid(a",{"_index":4660,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["mid(a,b)&#xff0c;s1&#x88ab;&#x66ff;&#x6362;&#x4e3a",{"_index":4701,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["mid(a,b)，s1",{"_index":4664,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{}}}],["mid被生成的函数体(s1",{"_index":4662,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{}}}],["miha",{"_index":1054,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["min",{"_index":4857,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["min&#x2026;max",{"_index":4878,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["minim",{"_index":346,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["minut",{"_index":2105,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["min…max",{"_index":4855,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{}}}],["miscellan",{"_index":5166,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["mismatch",{"_index":3666,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["miss",{"_index":4432,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["misspel",{"_index":4722,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["mix",{"_index":1597,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["mobil",{"_index":994,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["mode",{"_index":840,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{}}}],["mode&#xff1a;&#x4f7f;&#x7528;&#x7684;&#x5b8c;&#x6210;&#x6a21;&#x5f0f;&#xff08;&#x67e5;&#x770b;&#x4e0b;&#x9762;&#x7684;&#x4ecb;&#x7ecd;&#xff09;&#x3002",{"_index":5898,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["modi&#xfb01;",{"_index":226,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["modi&#xfb01;c",{"_index":5326,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["modi&#xfb01;cation,th",{"_index":3815,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["modifi",{"_index":3476,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["modiﬁ",{"_index":195,"title":{},"body":{"4.类字段/4.类字段.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{}}}],["modiﬁc",{"_index":5293,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{}}}],["modiﬁcation,th",{"_index":3786,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["modul",{"_index":4094,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["module&#x3002;&#x4e24;&#x79cd;&#x60c5;&#x51b5;&#xff0c;&#x201c;module&#x201d;&#x8868;&#x793a;&#x88ab;&#x7981;&#x7528;&#x6216;&#x542f;&#x7528;&#x7684;&#x6a21;&#x5757;&#x7684;&#x540d;&#x5b57;&#xff1a",{"_index":6273,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["module:&#x5305;&#x542b;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x7684;&#x6a21;&#x5757;&#xff08;&#x7b2c;3.7&#x8282;&#xff09;&#x7684;&#x7c7b;&#x578b;&#x8def;&#x5f84",{"_index":6190,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["module:包含这个类型的模块（第3.7",{"_index":6169,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["module。两种情况，“modul",{"_index":6257,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{}}}],["modulo",{"_index":5140,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["monday",{"_index":1703,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["mono",{"_index":4033,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["mono&#xff08;&#x5355;&#x4e00;&#x7684;&#xff09;&#x6240;&#x8868;&#x8fbe;&#x7684;&#x4e00;&#x6837;&#x3002",{"_index":4062,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["monomorph",{"_index":3568,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["monomorph(2.9",{"_index":3856,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{}}}],["more",{"_index":384,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["morph",{"_index":3569,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["mostli",{"_index":263,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{}}}],["motion",{"_index":1095,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["mp3",{"_index":6725,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["msg",{"_index":3400,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["mtasc&#xff08;mot",{"_index":1129,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["mtasc（mot",{"_index":1091,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{}}}],["mul",{"_index":5641,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["mul(4",{"_index":5646,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["multilingu",{"_index":1208,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{}}}],["multipl",{"_index":597,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{}}}],["multityp",{"_index":6702,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["mutat",{"_index":3915,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["my/project",{"_index":6068,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["my_sampl",{"_index":2113,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["myabstract",{"_index":3186,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["myabstract.j",{"_index":3473,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["myabstractint",{"_index":3295,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["myabstractstr",{"_index":3377,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["myarray",{"_index":1599,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{}}}],["myarray&#x5b9a;&#x4e49;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x6dfb;&#x52a0;&#x51b2;&#x7a81;&#x7c7b;&#x578b;&#x7684;&#x65b9;&#x6cd5;&#xff0c;&#x56e0;&#x6b64;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x534f;&#x53d8;&#x7684;&#x3002",{"_index":3821,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["myarray&#x7c7b;&#x578b;&#xff0c;myarray",{"_index":3818,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["myarray.length",{"_index":3427,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["myarray.pop",{"_index":3425,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["myarray.push",{"_index":3424,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["myarrayint",{"_index":3426,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["myarrayt",{"_index":3790,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["myarraywrap",{"_index":5733,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["myarray类型，myarray",{"_index":3791,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["mybutton",{"_index":87,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{}}}],["mybutton:myspecialbutton",{"_index":83,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{}}}],["myclass",{"_index":448,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["myclass&#x7c7b;&#x7684;&#x53ef;&#x7528;&#x5b57;&#x6bb5;&#x7684;&#x8bbf;&#x95ee;&#x5141;&#x8bb8;&#x4ece;main&#x4e2d;&#x8bbf;&#x95ee;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x8868;&#x793a;&#x4e3a",{"_index":4636,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["myclass.avail",{"_index":4611,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["myclass.foo",{"_index":5295,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["myclass.unavail",{"_index":4612,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["myclass类的可用字段的访问允许从main",{"_index":4613,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{}}}],["myconstructor1",{"_index":6034,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["myconstructor2",{"_index":6039,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["myconstructor2(",{"_index":6035,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["mydata",{"_index":1300,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["myenum",{"_index":6033,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["myenum.a",{"_index":5163,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["myenum.hax",{"_index":5022,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["myexplicitarray",{"_index":1601,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["myextern",{"_index":5390,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["myextern.f1",{"_index":5391,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["myextern.f1(\"foo",{"_index":5392,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["myextern.f1(foo",{"_index":5418,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["myextern.f2",{"_index":5393,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["myextern.f2(tru",{"_index":5394,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["myfile.txt",{"_index":6537,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["myfunc",{"_index":4555,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["myit",{"_index":5728,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["mylist",{"_index":1647,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["mylist.add(ii",{"_index":1649,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["mylocalfunct",{"_index":4787,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["mymacro",{"_index":6340,"title":{},"body":{"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["mymethod",{"_index":4447,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["mymethod&#x3002;&#x8fd9;&#x662f;&#x56e0;&#x4e3a;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x662f;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x52a8;&#x6001;&#x89e3;&#x6790;&#x7684;&#x3002",{"_index":4474,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["mymethod&#x548c;&#x4e00;&#x4e2a;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":4465,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["mymethod&#xff0c;&#x901a;&#x8fc7",{"_index":4467,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["myproject.hxml",{"_index":6055,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["myspecialbutton",{"_index":85,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{}}}],["mystack",{"_index":1729,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["mystack.add(ii",{"_index":1731,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["mystack.pop",{"_index":1732,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["mystringiter",{"_index":5725,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["mystructur",{"_index":2304,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["mytestcas",{"_index":1524,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{}}}],["mytre",{"_index":5522,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["mytree右侧的子树不是一个leaf",{"_index":5529,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{}}}],["mytyp",{"_index":6527,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["mytype&#x7684;&#x5177;&#x4f53;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x3002;&#x5b8f;&#x7684;&#x903b;&#x8f91;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x8fd9;&#x4e2a;&#x4fe1;&#x606f;&#x6765;&#x751f;&#x6210;&#x4e00;&#x4e2a;&#x5b9a;&#x5236;&#x7c7b;&#x578b;&#xff08;&#x4f7f;&#x7528",{"_index":6544,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["myvalu",{"_index":3715,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["myvalue&#x548c;myvlu",{"_index":3739,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["myvalue&#xff0c;&#x56e0;&#x4e3a;&#x6211;&#x4eec;&#x901a;&#x5e38;&#x8ba9;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6&#x8282;&#xff09;&#x5904;&#x7406;&#x5b83;&#x3002;&#x5c3d;&#x7ba1;&#x5982;&#x6b64;&#xff0c;&#x5b83;&#x786e;&#x5b9e;&#x9700;&#x8981;&#x5728;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#x4e0b;&#x88ab;&#x9700;&#x8981;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x5fc5;&#x987b;&#x4e86;&#x89e3;&#x6cdb;&#x578b;&#x7c7b;&#x7684;&#x51c6;&#x786e;&#x7c7b;&#x578b;&#x4e00;&#x7ecf;&#x6784;&#x5efa;&#x3002;javascript&#x8f93;&#x51fa;&#x663e;&#x793a;&#x7ed3;&#x679c;&#xff1a",{"_index":3737,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["myvalue_int",{"_index":3724,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["myvalue_str",{"_index":3723,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["myvalue和myvlu",{"_index":3725,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{}}}],["myvalue，因为我们通常让类型推断（第3.6节）处理它。尽管如此，它确实需要在这种情况下被需要。编译器必须了解泛型类的准确类型一经构建。javascript",{"_index":3716,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{}}}],["mywrap",{"_index":5735,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["n",{"_index":1232,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["n&#xff0c;&#x3002;&#x5f53;&#x7136;&#x8fd9;&#x4e2a;&#x7ed3;&#x6784;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x653e;&#x5165;&#x524d;&#x4e00;&#x4e2a;&#x4f8b;&#x5b50;&#x4e2d;&#x7684",{"_index":5588,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["n/a",{"_index":2504,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["n=\"typeresolver\"t/td/d/i",{"_index":5982,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{}}}],["n=\"unserializer\"t/td/d/i",{"_index":5983,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{}}}],["n=typeresolvert/td/d/i",{"_index":5997,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["n=unserializert/td/d/i",{"_index":5998,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["nal",{"_index":5387,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["name",{"_index":235,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#表达式":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["name(5)(dollar",{"_index":262,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{}}}],["name:str",{"_index":2106,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["name=\"john\"//root",{"_index":2340,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{}}}],["name=\"world!\"hax",{"_index":2342,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{}}}],["name=class",{"_index":6675,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["name=john//root",{"_index":2369,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}}}],["name=world!hax",{"_index":2376,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["namespac",{"_index":6715,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["nan",{"_index":1851,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["nan&#xff08;&#x975e;&#x6570;&#x5b57;&#xff09;&#xff1a;&#x5f53;&#x4e00;&#x4e2a;&#x4e0d;&#x6b63;&#x786e;&#x7684;&#x6570;&#x5b66;&#x64cd;&#x4f5c;&#x88ab;&#x6267;&#x884c;&#x65f6;&#x8fd4;&#x56de;&#xff0c;&#x4f8b;&#x5982",{"_index":1859,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{}}}],["nan&#xff09",{"_index":2433,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["nativ",{"_index":700,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["nativechildren",{"_index":6705,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["nativegen",{"_index":6706,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["nativeproperti",{"_index":820,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["natur",{"_index":664,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["nd",{"_index":3926,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{}}}],["ne",{"_index":491,"title":{},"body":{"6.语言特性/6.语言特性.html":{}}}],["necess",{"_index":347,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["necessari",{"_index":3830,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["necessarili",{"_index":4599,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["need",{"_index":1286,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["neg",{"_index":5149,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["negat",{"_index":5128,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{}}}],["negative_infin",{"_index":1854,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{}}}],["neko",{"_index":666,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{},"10.标准库/10.4.Math/10.4.2.数学错误.html":{},"10.标准库/10.4.Math/10.4.2.数学错误.html#10-4-2-数学错误":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{},"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["neko.lib.print",{"_index":2114,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["neko.n",{"_index":6017,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["neko.sys.exit",{"_index":6078,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["nekoc",{"_index":934,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["neko目标平台，设置一个neko",{"_index":1418,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["neko（第12.3",{"_index":682,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["neko，c++，php，flash",{"_index":1875,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{}}}],["nest",{"_index":844,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["net",{"_index":818,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["net.host",{"_index":6065,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["net.socket",{"_index":6063,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["netconnect",{"_index":1388,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["network",{"_index":865,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{}}}],["never",{"_index":3796,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{}}}],["new",{"_index":84,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["new&#xff08;&#x7b2c;5.12&#x8282;&#xff09",{"_index":2717,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["newlin",{"_index":578,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["new（第5.12",{"_index":2702,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{}}}],["next",{"_index":598,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["next&#x5305;&#x62ec;&#x5339;&#x914d;&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#xff0c;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x4e00;&#x4e2a;&#x8fed;&#x4ee3;&#x5668;&#xff0c;&#x5982;&#x679c;&#x5b83;&#x5b9a;&#x4e49;&#x4e86;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5",{"_index":5742,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["next&#xff0c;&#x8fd4;&#x56de;string&#xff0c;&#x4f7f;&#x5b83;&#x517c;&#x5bb9;&#x4e8",{"_index":5748,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["next，返回str",{"_index":5731,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{}}}],["nice",{"_index":2305,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["nicola",{"_index":1056,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["nn",{"_index":1253,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["nnn",{"_index":1245,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["nnnn",{"_index":1255,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["no](mode:std",{"_index":802,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["noarg",{"_index":6473,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["nocomplet",{"_index":5801,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["node",{"_index":5524,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["node&#xff0c;&#x5e76;&#x4e14;&#x5de6;&#x4fa7;&#x7684;&#x5b50;&#x6811;&#x662f;&#x4e00;&#x4e2a",{"_index":5563,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["node(_",{"_index":5525,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["node(l",{"_index":5502,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["node(l,r",{"_index":5518,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{}}}],["node(leaf",{"_index":5523,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["node(leaf(",{"_index":5546,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["node(leaf(&#x201c;bar&#x201d",{"_index":5543,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["node(leaf(&#x201c;bar&#x201d;),_",{"_index":5540,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["node(leaf(“bar",{"_index":5531,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{}}}],["node(leaf(“bar”),_",{"_index":5530,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{}}}],["node(leafnod",{"_index":5552,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["node.j",{"_index":1374,"title":{},"body":{"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["nodebug",{"_index":6707,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["nodenam",{"_index":2352,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{}}}],["nodoc",{"_index":6708,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["noimportglob",{"_index":6709,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["non",{"_index":149,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["none",{"_index":1756,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["nonetheless",{"_index":3719,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["nonstat",{"_index":148,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{}}}],["nonvirtu",{"_index":6713,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["noprivateaccess",{"_index":6710,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["normal",{"_index":1407,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["nostack",{"_index":6711,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["notat",{"_index":2895,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["note",{"_index":4362,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["notfound",{"_index":3394,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["notic",{"_index":4670,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["notion",{"_index":4629,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["notnul",{"_index":3452,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["nous",{"_index":6712,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["now",{"_index":4026,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["ns",{"_index":6714,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["null",{"_index":292,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["null&#xff0c;&#x4f8b;&#x5982;&#xff0c;&#x5982;&#x679c;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x901a;&#x8fc7;&#x4e00;&#x4e2a;&#x5b8f;&#xff08;&#x7b2c;9&#x7ae0;&#xff09;&#x6765;&#x5b9a;&#x4e49;&#x3002",{"_index":6193,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["null)&#xff09",{"_index":2282,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["null)&#xff0c;&#x610f;&#x5473;&#x7740;&#x5b83;&#x662f;&#x4e00;&#x4e2a;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff0c;&#x6ca1;&#x6709;&#x53c2;&#x6570;&#x3002;&#x540e;&#x8005;&#xff0c;&#x6211;&#x4eec;&#x4f7f;&#x7528;&#x5177;&#x4f53;&#x5316;&#x6765;&#x83b7;&#x5f97",{"_index":6498,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["nullabl",{"_index":5017,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["nullbool",{"_index":2652,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["nullfloat",{"_index":2651,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["nullint",{"_index":2650,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["nullt",{"_index":2631,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["nullt&#x7c7b;&#x578b",{"_index":2638,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["null}&#xff09",{"_index":2256,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["null动态实现（第2.7.2",{"_index":6181,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["null（或者静态目标语言（第2.2节）中基本类型（第2.1节）的默认值（第2.2",{"_index":1584,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{}}}],["null，例如，如果这个类型通过一个宏（第9",{"_index":6170,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["num",{"_index":2007,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["number",{"_index":249,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["numbers.count",{"_index":2002,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["numbers.fold(sum",{"_index":2009,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["numbers.foreach",{"_index":2005,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["numbers.ha",{"_index":2003,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["numer",{"_index":5160,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["o",{"_index":1298,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["o.nam",{"_index":1302,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["o.tag",{"_index":1303,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["oat",{"_index":5007,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{}}}],["obj",{"_index":4589,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["obj.field",{"_index":4481,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["obj.field=valu",{"_index":4482,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{}}}],["obj:str",{"_index":1396,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["object",{"_index":367,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["object.$fieldnam",{"_index":6368,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["object.$nam",{"_index":6369,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["object.${fieldnam",{"_index":6367,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{}}}],["object.${fieldname}&#xff0c;&#x4f46;&#x662f",{"_index":6390,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["object.field",{"_index":2564,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["object.fieldnam",{"_index":5213,"title":{},"body":{"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{}}}],["obtain",{"_index":5250,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["obviou",{"_index":3213,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["obvious",{"_index":3513,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["occur",{"_index":3763,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["occurr",{"_index":5639,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["occurrences,may",{"_index":4669,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["octal",{"_index":1247,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["odd",{"_index":4330,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["of&#xfb01;cial",{"_index":4047,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["offer",{"_index":4478,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["ofﬁcial",{"_index":4027,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{}}}],["ok",{"_index":1533,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["old",{"_index":846,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{}}}],["old_brows",{"_index":1329,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["omit",{"_index":4132,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["on",{"_index":867,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["onc",{"_index":2897,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["onto",{"_index":3780,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["op",{"_index":2072,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#表达式":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["op(++a",{"_index":3290,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["op(a",{"_index":3281,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["op(a*b",{"_index":3287,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["opadd",{"_index":4136,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["open",{"_index":3491,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{}}}],["oper",{"_index":488,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["operand",{"_index":4854,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{}}}],["operationa",{"_index":4337,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["oppos",{"_index":5472,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["opposit",{"_index":3867,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["opt",{"_index":878,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["optim",{"_index":872,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["option",{"_index":1748,"title":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}},"body":{"10.标准库/10.2.数据结构/10.2.数据结构.html":{},"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["order",{"_index":2954,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["order(section3.7.3),multipl",{"_index":5471,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["organ",{"_index":4216,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["orient",{"_index":368,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["origin",{"_index":1489,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["origin&#x8d44;&#x6e90;&#x5171;&#x4eab;&#xff09;&#x3002",{"_index":1508,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["original”。下一行，test被分配了一个新的函数。这恰恰是dynam",{"_index":4731,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{}}}],["otherchild",{"_index":3774,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["otherchild&#x5b9e;&#x4f8b;&#x5c31;&#x4f1a;&#x51fa;&#x73b0;&#x95ee;&#x9898;&#x3002",{"_index":3812,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["otherwis",{"_index":2915,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["out",{"_index":418,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["output",{"_index":643,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["outsid",{"_index":188,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["over",{"_index":425,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["overcom",{"_index":3991,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["overhead",{"_index":4171,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["overload",{"_index":5125,"title":{},"body":{"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["overrid",{"_index":293,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["overridden",{"_index":4592,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["override&#x4fee;&#x9970;&#x7b26",{"_index":4747,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html#4-4-访问修饰符":{}}}],["override&#x5173;&#x952e;&#x5b57;&#x58f0;&#x660",{"_index":4468,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["overriden",{"_index":4457,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["overus",{"_index":4079,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["ow",{"_index":4683,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.20.break/5.20.break.html":{}}}],["oy1:xi2y1:kng，{x:2",{"_index":2183,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["p",{"_index":2178,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["pack.typ",{"_index":5214,"title":{},"body":{"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["pack1.pacen.modulename.typenam",{"_index":4227,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["pack1.pack2.packn.modulename.typenam",{"_index":4229,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["packag",{"_index":294,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["package,output",{"_index":6697,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["package.modoule.typ",{"_index":4093,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["package.module.typ",{"_index":4097,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["pair",{"_index":1218,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["param",{"_index":604,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["paramet",{"_index":380,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["parameters,thes",{"_index":3645,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["parametr",{"_index":503,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["paranthesi",{"_index":4885,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["parent",{"_index":3748,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["parenthes",{"_index":3481,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["parenthesi",{"_index":4484,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{}}}],["pars",{"_index":3492,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["parser",{"_index":274,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["part",{"_index":163,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["partial",{"_index":468,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["particular",{"_index":3917,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["particular,reflect.getproperti",{"_index":4501,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["particularli",{"_index":3764,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["pass",{"_index":3592,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["password",{"_index":899,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["path",{"_index":591,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["path&#x201d",{"_index":5868,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["path&#xff09;&#xff0c;&#x5728;&#x4e0d;&#x540c;&#x8bed;&#x5883;&#x4e0b;&#x5b83;&#x53ef;&#x80fd;&#x662f;&#xff1a",{"_index":5320,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["pattern",{"_index":483,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["pattern1",{"_index":4935,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["pattern2",{"_index":4936,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["pcre",{"_index":1822,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["pep",{"_index":1290,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["per",{"_index":854,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["perform",{"_index":416,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["permit",{"_index":3663,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["pertosa",{"_index":1053,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{}}}],["pertosa&#xff1a;&#x7f16;&#x8f91",{"_index":1066,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["phase",{"_index":200,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{}}}],["phonenumb",{"_index":2938,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["php",{"_index":654,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.3.实现细节.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["php&#xff0c;js&#xff0c;flash",{"_index":2556,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["php.lib.print",{"_index":2115,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["php，js，flash",{"_index":2548,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{}}}],["physic",{"_index":3493,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["pi",{"_index":1855,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["pick",{"_index":4271,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["pi是声明为一个只读属性（第4.2",{"_index":5375,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["place",{"_index":168,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["placeabl",{"_index":2725,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["places,however,an",{"_index":3984,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["plain",{"_index":5191,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["plane",{"_index":1209,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{}}}],["platform",{"_index":932,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["play",{"_index":4252,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["player",{"_index":1385,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["po",{"_index":1777,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["point",{"_index":349,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["point(0",{"_index":2203,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["point.new",{"_index":2761,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["point.x",{"_index":352,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["point.z",{"_index":2985,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["point2d",{"_index":2965,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["point3",{"_index":2755,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["point3d",{"_index":2966,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["pointer",{"_index":6731,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{}}}],["pointer(&#x2018",{"_index":6746,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["polici",{"_index":1498,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{}}}],["ponticelli",{"_index":1110,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["poor",{"_index":5580,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["pop",{"_index":3423,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["popul",{"_index":357,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["popular",{"_index":5381,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["portion",{"_index":3712,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["pos(p",{"_index":6366,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["posinfo",{"_index":408,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["posit",{"_index":407,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["position&#xff1a;&#x6307;&#x5b9a;&#x6587;&#x4ef6;&#x4e2d;&#x8981;&#x68c0;&#x67e5;&#x5b8c;&#x6210;&#x7684;&#x5b57;&#x8282;&#x4f4d;&#x7f6e;&#xff08;&#x4e0d;&#x662f;&#x5b57;&#x7b26;&#x4f4d;&#x7f6e;&#xff09;&#x3002",{"_index":5897,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["position”模式参数（查看概述（第8.3.1",{"_index":6012,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{}}}],["position参数可以被设置为0",{"_index":5889,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{}}}],["positive_infin",{"_index":1853,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html":{}}}],["positive_infinity&#xff1a;&#x5982;&#x4e00;&#x4e2a;&#x6574;&#x6570;&#x88ab",{"_index":1861,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{}}}],["possibl",{"_index":577,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["post",{"_index":3292,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["postfix",{"_index":5131,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["potenti",{"_index":4335,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["power",{"_index":435,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["pre",{"_index":3291,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["pre&#xfb01;x",{"_index":321,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["preced",{"_index":601,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["precis",{"_index":3509,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["prefix",{"_index":833,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["prefoo",{"_index":3293,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["preload",{"_index":917,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["prepend",{"_index":834,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["presenc",{"_index":4426,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["present",{"_index":3103,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["pretty&#x8fdb;&#x884c;haxe&#x98ce;&#x683c;&#x7684;&#x683c;&#x5f0f;&#x5316;&#x3002",{"_index":971,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["pretty进行hax",{"_index":810,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{}}}],["prevent",{"_index":903,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["previou",{"_index":2955,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["previous",{"_index":4024,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["preﬁx",{"_index":270,"title":{},"body":{"5.表达式/5.表达式.html":{}}}],["primarili",{"_index":6617,"title":{},"body":{"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["print",{"_index":824,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["printabl",{"_index":2721,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["printstatu",{"_index":3402,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["printstatus(statu",{"_index":3401,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["prior",{"_index":4695,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["prioriti",{"_index":4146,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["privat",{"_index":295,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["private&#xff0c;&#x4f46;&#x662f;&#x6709;&#x4f8b;&#x5916;&#x5b83;&#x4f1a;&#x53d8;&#x6210",{"_index":4644,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["privateaccess",{"_index":6716,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["problem",{"_index":3511,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["process",{"_index":925,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["produc",{"_index":5133,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{}}}],["program",{"_index":158,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["project&#x2019;",{"_index":635,"title":{},"body":{"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["project’",{"_index":624,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{}}}],["properti",{"_index":145,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["protect",{"_index":922,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["prove",{"_index":5763,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["provid",{"_index":471,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["proxi",{"_index":795,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["pseudo",{"_index":5451,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["pt",{"_index":5359,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["pt_i",{"_index":5361,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["pt_x",{"_index":5360,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["public",{"_index":296,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["public&#x3002;&#x7136;&#x800c;&#xff0c;&#x5f53;&#x8bbf;&#x95ee;&#x4e0d;&#x53ef;&#x7528;&#x7684;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x53ef;&#x4ee5;&#x4ece;&#x7c7b;myclass&#x5185;&#x90e8;&#xff0c;&#x4f46;&#x662f;&#x4e0d;&#x80fd;&#x4ece;main&#x4e2d;&#x8bbf;&#x95ee;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x662f;private&#xff08;&#x660e;&#x786e;&#x7684;&#x79c1;&#x6709;&#x58f0;&#x660e;&#xff0c;&#x5c3d;&#x7ba1;&#x8fd9;&#x4e2a;&#x6807;&#x8bc6;&#x7b26;&#x5728;&#x8fd9;&#x91cc;&#x662f;&#x591a;&#x4f59;&#x7684;&#xff09",{"_index":4637,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["public&#xff08;&#x7b2c;4.4.1&#x8282;&#xff09;&#x7c7b;&#x578b;&#x3002",{"_index":6224,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["public&#xff1a",{"_index":4645,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["publicfield",{"_index":6717,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["public。然而，当访问不可用的字段访问可以从类myclass内部，但是不能从main中访问，因为它是priv",{"_index":4614,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{}}}],["public（第4.4.1",{"_index":6184,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{}}}],["purity_infer",{"_index":6263,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["purpos",{"_index":383,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["push",{"_index":2961,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["put",{"_index":5582,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["python",{"_index":689,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["pythonimport",{"_index":6718,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["python或者javascript",{"_index":5383,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{}}}],["p{}:array",{"_index":6364,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["q",{"_index":2194,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["q:4n:5i45:6i7h",{"_index":2195,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["quali&#xfb01;",{"_index":4704,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["qualifi",{"_index":3209,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["qualiﬁ",{"_index":4674,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{}}}],["question",{"_index":642,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["quick",{"_index":1836,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["quickli",{"_index":358,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["quit",{"_index":4498,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["quot",{"_index":463,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["r",{"_index":1235,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["r.add",{"_index":1531,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}}}],["r.map(",{"_index":1843,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["r.match",{"_index":1771,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["r.match(str",{"_index":1770,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{}}}],["r.matchedleft",{"_index":1779,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["r.matchedpo",{"_index":1773,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["r.matchedright",{"_index":1780,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["r.replace(str",{"_index":1803,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{}}}],["r.run",{"_index":1532,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}}}],["r.split(str",{"_index":1816,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{}}}],["r42",{"_index":2213,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["r456",{"_index":2212,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["r\\n\\t",{"_index":1870,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{}}}],["race",{"_index":1364,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["radian",{"_index":1936,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["ran",{"_index":2102,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["random",{"_index":4148,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["rang",{"_index":449,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["rate",{"_index":1297,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["rating\":5",{"_index":1317,"title":{},"body":{"10.标准库/10.10.Json/10.10.2.编码JSON.html":{}}}],["rating:5",{"_index":1322,"title":{},"body":{"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{}}}],["rational",{"_index":4393,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["rc.1",{"_index":2594,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{}}}],["rc.1&#x3011",{"_index":2612,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["re",{"_index":4729,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["re&#xfb02;ect",{"_index":4522,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["read",{"_index":182,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["readabl",{"_index":4078,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["readonli",{"_index":5376,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["read和writ",{"_index":489,"title":{},"body":{"6.语言特性/6.语言特性.html":{}}}],["real",{"_index":886,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["reason",{"_index":3669,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["reassign",{"_index":4692,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["recent",{"_index":676,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["recommend",{"_index":4085,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["recurs",{"_index":4076,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["red",{"_index":2816,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["reduc",{"_index":602,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["redund",{"_index":4615,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["refer",{"_index":150,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["reflect",{"_index":2294,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["reflect.callmethod(main",{"_index":2300,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["reflect.field",{"_index":2912,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["reflect.field(main",{"_index":2302,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["reflect.setfield",{"_index":2913,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["reflect.setproperti",{"_index":4502,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["reflect.setproterti",{"_index":4493,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["refus",{"_index":3989,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["regard",{"_index":206,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["regardless",{"_index":4375,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["regexp",{"_index":1821,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["regular",{"_index":5016,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["rei&#xfb01;cat",{"_index":318,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["reiﬁcat",{"_index":266,"title":{},"body":{"5.表达式/5.表达式.html":{}}}],["relat",{"_index":371,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["relev",{"_index":3762,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["reli",{"_index":4679,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["remain",{"_index":201,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["rememb",{"_index":3747,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["reminisc",{"_index":3486,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["remot",{"_index":1377,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化":{},"10.标准库/10.13.远程处理/10.13.远程处理.html":{},"10.标准库/10.13.远程处理/10.13.远程处理.html#10-13-远程处理":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["remoting.context",{"_index":1403,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{}}}],["remoting.n",{"_index":1422,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["remotinig",{"_index":1487,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["remov",{"_index":873,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["repeat",{"_index":603,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["replac",{"_index":887,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["replacinga",{"_index":4597,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["repo",{"_index":3,"title":{},"body":{"index.html":{},"index.html#关于本文档":{}}}],["report",{"_index":5304,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["repositori",{"_index":678,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["repres",{"_index":327,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["represent",{"_index":1207,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["request",{"_index":1408,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{}}}],["requir",{"_index":2953,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["required,e.g",{"_index":4915,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["reserv",{"_index":269,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{}}}],["resolut",{"_index":4147,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["resolv",{"_index":650,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["resolveclass(name:string):class",{"_index":5978,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["resolveenum(name:string):enum",{"_index":5979,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["resolver.resolveclass(nam",{"_index":2404,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["resolver.resolveenum(nam",{"_index":2406,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{}}}],["resolver.resolveenum(name)&#x901a;&#x8fc7;&#x540d;&#x5b57;&#x53ca;&#x8bf6;&#x7cfb;&#x3002;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x7136;&#x540e;&#x88ab;&#x4f7f;&#x7528",{"_index":2461,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["resort",{"_index":419,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["resourc",{"_index":2110,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html":{},"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html#8-4-1-嵌入资源":{}}}],["respect",{"_index":506,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["respectively.3.6.1",{"_index":3998,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{}}}],["respectively.3.6.1.&#x7531;&#x4e0a;&#x800c;&#x4e0b;&#x63a8;&#x65ad",{"_index":4020,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["rest",{"_index":474,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["restrict",{"_index":3788,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["result",{"_index":401,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["result,th",{"_index":4109,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["retain",{"_index":3226,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["return",{"_index":297,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["return&#x4f1a;&#x79bb;&#x5f00;&#x5c40;&#x90e8;&#x51fd;&#x6570",{"_index":4991,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["returnsth",{"_index":4732,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["reveal",{"_index":4661,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["revers",{"_index":3749,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["rewrit",{"_index":6704,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["reﬂect",{"_index":4483,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{}}}],["rgb",{"_index":2818,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["rgb(r",{"_index":2821,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["rgb(r,g,b",{"_index":2871,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["rh",{"_index":3282,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["right",{"_index":2301,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["rightsid",{"_index":4394,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["ro",{"_index":4321,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["robust",{"_index":3914,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["root",{"_index":879,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{}}}],["root.addchild(child",{"_index":2337,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}}}],["rootchild",{"_index":2339,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}}}],["rootchild//root",{"_index":2338,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}}}],["rootchild1/child2//root",{"_index":2481,"title":{},"body":{"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{}}}],["roothax",{"_index":2385,"title":{},"body":{"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{}}}],["rst",{"_index":646,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{}}}],["rtti",{"_index":935,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["rule",{"_index":507,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["run",{"_index":788,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["runtim",{"_index":329,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["runtimevalu",{"_index":6720,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["rvalu",{"_index":3868,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["s",{"_index":439,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["s&#xff09;&#x662f;&#x4e00;&#x4e2a",{"_index":2427,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["s.add",{"_index":3284,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["s.charat(i",{"_index":5727,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["s.connect",{"_index":6064,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["s.length",{"_index":5726,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["s.read().split",{"_index":6071,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["s.serialize(x",{"_index":2414,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["s.tostr",{"_index":3285,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["s.write",{"_index":6067,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["s1",{"_index":4659,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["s2",{"_index":1842,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["s2)/2",{"_index":4663,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{}}}],["s2)/2&#x66ff;&#x6362;&#x6389;&#x4e86;&#x8c03;&#x7528",{"_index":4700,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["s2被替换为b",{"_index":4665,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{}}}],["s3:aaa",{"_index":2199,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["safe",{"_index":339,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["salli",{"_index":1602,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["same",{"_index":164,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["sampl",{"_index":2059,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["sample.mtt",{"_index":2109,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["sample.mtt@my_sampl",{"_index":2111,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["sandbox",{"_index":866,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["sanderson",{"_index":1112,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["satis&#xfb01;",{"_index":4714,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["satisﬁ",{"_index":4684,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{}}}],["save",{"_index":4072,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["say",{"_index":5773,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["scope",{"_index":892,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["score",{"_index":1586,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["scores.length",{"_index":1593,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["scores[_g",{"_index":1594,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["script",{"_index":923,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["scriptabl",{"_index":888,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["second",{"_index":657,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["section",{"_index":161,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["see",{"_index":630,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["seem",{"_index":3717,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["seemingli",{"_index":4392,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["seen",{"_index":156,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["select",{"_index":3216,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["selfcal",{"_index":6721,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["semant",{"_index":3208,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["semicolon",{"_index":4762,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["sens",{"_index":4130,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["separ",{"_index":202,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["sequenc",{"_index":1204,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["serial",{"_index":798,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["serializ",{"_index":2724,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["serializer.run",{"_index":2410,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["serializer.seri",{"_index":2397,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["serializer.tostr",{"_index":2398,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["server",{"_index":995,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["server.hxml",{"_index":619,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["set",{"_index":426,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["set&#xff0c;&#x4f46;&#x662f;&#x4e0d;&#x4f1a;&#x68c0;&#x67e5;&#x5b58;&#x5728;&#x4e0e;&#x5426;&#x3002",{"_index":4443,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["set):int",{"_index":4384,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["set_",{"_index":4495,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["set_color",{"_index":497,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["set_field",{"_index":4491,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["set_field&#x7684;setter&#x3002",{"_index":4543,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["set_field的sett",{"_index":4490,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{}}}],["set_x",{"_index":4324,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["set_x(2",{"_index":4328,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["set_x(2)&#x7684;&#x8c03;&#x7528;&#xff0c;2&#x5373;&#x4e3a;&#x88ab;&#x8d4b;&#x503c;&#x5230;x",{"_index":4350,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["set_x(2)的调用，2即为被赋值到x",{"_index":4327,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{}}}],["setter",{"_index":3341,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["settotwelv",{"_index":479,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["setup",{"_index":1540,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["sever",{"_index":599,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["shall",{"_index":3504,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["shallow",{"_index":889,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["share",{"_index":1360,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["shift",{"_index":5154,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["short",{"_index":4225,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["shorten",{"_index":4131,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["shorter",{"_index":4160,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{}}}],["shorthand",{"_index":4222,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["shouldn&#x2019;t",{"_index":6744,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["shouldn’t",{"_index":6664,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{}}}],["show",{"_index":3205,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["shown",{"_index":3206,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["side",{"_index":4336,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["sign",{"_index":5146,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["signal",{"_index":4834,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["signatur",{"_index":4084,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["signi&#xfb01;c",{"_index":536,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["signiﬁc",{"_index":415,"title":{},"body":{"6.语言特性/6.语言特性.html":{}}}],["silent",{"_index":5306,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["similar",{"_index":3488,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["similarli",{"_index":3210,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["simon",{"_index":1046,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["simpl",{"_index":1352,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["simpler",{"_index":4034,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["simpli",{"_index":5311,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["simpli&#xfb01;",{"_index":4551,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["simplif",{"_index":883,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["simplifi",{"_index":882,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["simpliﬁ",{"_index":4508,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{}}}],["singl",{"_index":462,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["site",{"_index":413,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["situat",{"_index":3901,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["size",{"_index":3714,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["skip",{"_index":5765,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["slower",{"_index":5673,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["small",{"_index":348,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["smaller",{"_index":4859,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["socket&#x6765;&#x8fde;&#x63a5;&#x670d;&#x52a1;&#x7684;flash&#x5ba2;&#x6237;&#x7aef;&#x901a;&#x8baf;&#x3002",{"_index":1453,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["socketconnection.cr",{"_index":1400,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["socketconnection.create(&#x2026",{"_index":1451,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["socketconnection.create(sock:flash.xmlsocket",{"_index":1391,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["socket来连接服务的flash",{"_index":1401,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["some(",{"_index":1759,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{}}}],["some(v",{"_index":1755,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{}}}],["some.class.themacro(arg",{"_index":6606,"title":{},"body":{"9.宏/9.7.初始化宏/9.7.初始化宏.html":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["some_flag",{"_index":5246,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["someth",{"_index":187,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["sometim",{"_index":4075,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["somewhat",{"_index":3772,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["somewher",{"_index":3514,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["soon",{"_index":4253,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["sound",{"_index":6723,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["sourc",{"_index":672,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["sourcecod",{"_index":991,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["sourcefil",{"_index":6727,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["space",{"_index":1362,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["spawn",{"_index":1356,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["speak",{"_index":152,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["speci&#xfb01;",{"_index":741,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["speci&#xfb01;c",{"_index":516,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["special",{"_index":3204,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["specif",{"_index":5150,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["specifi",{"_index":660,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["speciﬁ",{"_index":692,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{}}}],["speciﬁc",{"_index":337,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"7.编译器用法/7.编译器用法.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{}}}],["split",{"_index":5946,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["src",{"_index":590,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["sring",{"_index":4039,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["stage",{"_index":817,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["standard",{"_index":1219,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["start",{"_index":241,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["state",{"_index":4257,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["statement",{"_index":6719,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["static",{"_index":147,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["static&#x4fee;&#x9970;&#x7b26",{"_index":4748,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html#4-4-访问修饰符":{}}}],["staticfield",{"_index":4753,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["static字段的可见性，但是成员字段的规则是等价的。下面的示例展示了当继承（第2.3.2",{"_index":4616,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{}}}],["static字段通过类使用，而非stat",{"_index":4750,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{}}}],["statu",{"_index":3398,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["std",{"_index":803,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["std&#xff09",{"_index":959,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["std.format",{"_index":5672,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["std.format&#xff0c;&#x8ddf;&#x65b0;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x63d2;&#x503c;&#x8bed;&#x6cd5;&#x76f8;&#x6bd4;&#xff0c;&#x5373;&#x6162;&#x800c;&#x4e14;&#x4e0d;&#x591f;&#x7075;&#x6d3b;&#x3002",{"_index":5689,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["std.i",{"_index":1501,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#不确保参数类型":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["std.int",{"_index":1920,"title":{},"body":{"10.标准库/10.4.Math/10.4.3.整数数学.html":{},"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{}}}],["std.int(a",{"_index":5143,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["std.parseint",{"_index":3194,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["std.parseint(",{"_index":3189,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["std.string",{"_index":1543,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["std.string(actu",{"_index":1546,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["std/neko/_std/string.hx:84:lin",{"_index":6018,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["std/string.hx:124",{"_index":6014,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["stderr打印的内容的不同。这不是sockt",{"_index":6059,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{}}}],["stdout",{"_index":6058,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["std”，“no”或者“full”定义dce。这可以被用在条件编译（第6.1",{"_index":5846,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{}}}],["step",{"_index":4266,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["still",{"_index":1214,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["sting",{"_index":3668,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["stop",{"_index":3220,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["storag",{"_index":4376,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["store",{"_index":574,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["str",{"_index":1767,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{}}}],["strict",{"_index":816,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["strictli",{"_index":193,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{}}}],["string",{"_index":405,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.字符串.html":{},"10.标准库/10.1.字符串/10.1.字符串.html#10-1-字符串":{},"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["string&#x201d;&#x3002",{"_index":3945,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["string&#x53d8;&#x91cf;&#x9ed8;&#x8ba4;&#x503c;&#x4e3a",{"_index":6585,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["string&#x548c",{"_index":4019,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["string&#x662f",{"_index":4015,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["string&#x672c;&#x8eab;&#x5e76;&#x6ca1;&#x6709;&#x66ff;&#x6362;&#x529f;&#x80fd;&#xff0c",{"_index":5433,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["string&#xff0c;&#x5e76;&#x4e14;&#x53ef;&#x4ee5;&#x88ab;&#x4efb;&#x610f;&#x751a;&#x81f3;&#x8fdc;&#x7a0b;&#x5730;&#x4f20;&#x9012;&#x3002;&#x5b83;&#x7684;&#x683c;&#x5f0f;&#x4ee5",{"_index":2428,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["string&#xff0c;int&#x548c;float&#x5e38;&#x91cf;&#x503c;&#x88ab;&#x76f4;&#x63a5;&#x4f7f;&#x7528;&#x3002",{"_index":5272,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["string,yet",{"_index":3871,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["string.fromcharcod",{"_index":4166,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["string.hx",{"_index":6016,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{}}}],["stringbuf",{"_index":3283,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["stringif",{"_index":5153,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["stringifi",{"_index":5152,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["stringmap",{"_index":4133,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["stringmap&#x3002;&#x6a21;&#x5757",{"_index":4178,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["stringtool",{"_index":457,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["stringtools.replac",{"_index":5422,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["string参数“nicola",{"_index":5805,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html":{}}}],["string，int和float",{"_index":5245,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{}}}],["strong::name::/strong",{"_index":2060,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{}}}],["struct",{"_index":6729,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["structaccess",{"_index":6730,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["structur",{"_index":160,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["stuck",{"_index":926,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["style",{"_index":5694,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["sub",{"_index":673,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{}}}],["subject",{"_index":4933,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{}}}],["subject(e1",{"_index":5234,"title":{},"body":{"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{}}}],["subsequ",{"_index":3925,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["subset",{"_index":4693,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["subtract",{"_index":5142,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["subtyp",{"_index":3789,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["subtype1",{"_index":4103,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["subtype2",{"_index":4106,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["subtype3",{"_index":4107,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["subvert",{"_index":3775,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["succe",{"_index":3222,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["success",{"_index":1535,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["success(data",{"_index":402,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["such",{"_index":209,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["suf&#xfb01;cient",{"_index":713,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["suffix",{"_index":877,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["sufﬁcient",{"_index":648,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{}}}],["sugar",{"_index":5466,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["suggest",{"_index":4900,"title":{},"body":{"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["suitabl",{"_index":3498,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["sum",{"_index":1589,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["super",{"_index":2757,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["super(x",{"_index":2760,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["super.methodnam",{"_index":4456,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["super.methodname()&#xff1a",{"_index":4476,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["superclass",{"_index":6177,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["superior",{"_index":5771,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["suppli",{"_index":584,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["support",{"_index":375,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["suppos",{"_index":5310,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["suppresswarn",{"_index":6732,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["surpris",{"_index":3506,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["surrog",{"_index":1217,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["surround",{"_index":891,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["swc",{"_index":896,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["swf",{"_index":665,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["swf&#x548c;neko&#xff09;&#xff0c;&#x4e5f;&#x53ef;&#x80fd;&#x662f;&#x4e00;&#x4e2a;&#x76ee;&#x5f55;&#x8def;&#x5f84;&#x3002",{"_index":719,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["swf和neko",{"_index":656,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{}}}],["swf被monocl",{"_index":792,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{}}}],["switch",{"_index":298,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["switch&#x5230;temp.tolowercas",{"_index":5653,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["switch&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5.17&#x8282;&#xff09;&#x5904;&#x7406;&#xff0c;&#x5728;&#x5176;&#x4e2d;&#x901a;&#x8fc7;&#x4e2a;&#x4f53;&#x7684;case&#x8bed;&#x53e5;&#x8868;&#x793a;&#x6a21;&#x5f0f;&#x3002;&#x8fd9;&#x91cc;&#x6211;&#x4eec;&#x5c06;&#x63a2;&#x7d22;&#x4e0d;&#x540c;&#x7684;&#x6a21;&#x5f0f;&#x7684;&#x8bed;&#x6cd5;&#xff0c;&#x4f7f;&#x7528;&#x8fd9;&#x4e2a;&#x6570;&#x636e;&#x7ed3;&#x6784;&#x4f5c;&#x4e3a;&#x8fd0;&#x884c;&#x4f8b;&#x5b50;&#xff1a",{"_index":5507,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["switch(e.a",{"_index":6484,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["switch(mystructur",{"_index":5579,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["switch到temp.tolowercas",{"_index":5633,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{}}}],["switch表达式（第5.17节）处理，在其中通过个体的cas",{"_index":5498,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{}}}],["sy",{"_index":390,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["symbol",{"_index":2964,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["synchron",{"_index":1365,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["syntact",{"_index":5465,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["syntax",{"_index":203,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["sys.println",{"_index":391,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["sys.sleep",{"_index":1355,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["sys.thread",{"_index":1366,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["sys.thread.thread.cr",{"_index":1354,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["sys/si",{"_index":69,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{}}}],["system",{"_index":931,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["systemerror(msg",{"_index":406,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["t",{"_index":1228,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["t&#x5230",{"_index":4018,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["t&#x7c7b;&#x578b;&#x540d;&#x4e3a",{"_index":4541,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["t&#x800c;&#x4e0d;&#x662f;&#x770b;&#x8d77;&#x6765;&#x66f4;&#x81ea;&#x7136;&#x7684;t",{"_index":4419,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["t&#xff0c;fals",{"_index":2228,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["t1",{"_index":6525,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["tab",{"_index":1230,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["tabl",{"_index":2082,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["tabstract(int",{"_index":6528,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["tag",{"_index":819,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["take",{"_index":4145,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["taken",{"_index":4150,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["talk",{"_index":5428,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["tanonym",{"_index":6406,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["target",{"_index":336,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["target.thread",{"_index":1351,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{}}}],["target.unicod",{"_index":1203,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["target.utf16",{"_index":1276,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["td::age::/td",{"_index":2087,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{}}}],["td::name::/td",{"_index":2086,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{}}}],["tdynam",{"_index":6180,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["teardown",{"_index":1541,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{}}}],["techniqu",{"_index":5195,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["telemetri",{"_index":791,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["tell",{"_index":4040,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["temp",{"_index":5632,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["temp&#xff0c;&#x5e76;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x5d4c;&#x5957;&#x7684",{"_index":5652,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["temp.tolowercas",{"_index":5631,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["templat",{"_index":60,"title":{},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["template.execut",{"_index":2095,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#全局":{}}}],["template.execute(us",{"_index":2066,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["template.execute(user:us",{"_index":2097,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{}}}],["template.execute({us",{"_index":2148,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#子模板":{}}}],["template.execute({user:us",{"_index":2159,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["template.glob",{"_index":2108,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#全局":{}}}],["temporari",{"_index":4676,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["tend",{"_index":3499,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["term",{"_index":3508,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["termin",{"_index":1281,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["terminology,a",{"_index":207,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{}}}],["ternari",{"_index":5122,"title":{},"body":{"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{}}}],["test",{"_index":1523,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["test(\"foo",{"_index":3580,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{}}}],["test(1,foo",{"_index":3071,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["test(foo",{"_index":3595,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["test.main",{"_index":3722,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["testarray",{"_index":1544,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["testbas",{"_index":1527,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{}}}],["testcas",{"_index":1526,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{}}}],["testsetup",{"_index":1542,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{}}}],["testt:(iterablestr",{"_index":3584,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["testt:iterablestr",{"_index":3582,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["textbackslash",{"_index":6062,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["textend",{"_index":6408,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["tfunction",{"_index":6403,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["thage/th",{"_index":2085,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{}}}],["thatis,if",{"_index":5723,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["thefunct",{"_index":4598,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["thefunction(2.6)typ",{"_index":3921,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["there&#x201d;&#xff09",{"_index":2232,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["therefor",{"_index":4035,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["thetypeof",{"_index":3924,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["thing",{"_index":3782,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["think",{"_index":3507,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["third",{"_index":3664,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["this.length",{"_index":5923,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{}}}],["thname/th",{"_index":2084,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{}}}],["those",{"_index":4630,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["though",{"_index":3771,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["thread",{"_index":1349,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{}}}],["three",{"_index":172,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["through",{"_index":396,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["through&#x201d;,soth",{"_index":4954,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["throughout",{"_index":4022,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["through”,soth",{"_index":4939,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html":{}}}],["throw",{"_index":299,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["throw&#xff08;&#x7b2c;5.22&#x8282;&#xff09;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x4efb;&#x4f55;&#x540e;&#x7eed;&#x7684",{"_index":4971,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["throw(5.22),it",{"_index":4964,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["thrown",{"_index":4966,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{}}}],["thrown(5.22",{"_index":5068,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["throw（第5.22",{"_index":4963,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{}}}],["thu",{"_index":3510,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["time",{"_index":165,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{}}}],["time,typ",{"_index":3982,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["time:int",{"_index":2100,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["timeout",{"_index":924,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["timer",{"_index":5967,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["tinkerbel",{"_index":6444,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["tinst",{"_index":6509,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["tinst(str",{"_index":6529,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["tinst(string,[])&#xff0c;&#x8868;&#x660e;&#x5b83;&#x786e;&#x5b9e;&#x610f;&#x8bc6;&#x5230",{"_index":6543,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["tint(i",{"_index":5628,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["to&#x201d",{"_index":3951,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["to:&#x4e00;&#x4e2a;&#x5305;&#x542b;&#x9690;&#x5f0f;&#x5b9a;&#x4e49",{"_index":6215,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["toan",{"_index":5693,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["toarray",{"_index":3190,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["tob",{"_index":3195,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["toc",{"_index":3196,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["todealwith",{"_index":4500,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["todegre",{"_index":1938,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["togeth",{"_index":921,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["token",{"_index":5247,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["tolowercas",{"_index":5635,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["took",{"_index":3517,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["tool",{"_index":5427,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["tool,but",{"_index":4655,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["tools.hx",{"_index":6445,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html":{}}}],["top",{"_index":3986,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["topmost",{"_index":5504,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["toption",{"_index":6409,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["tostr",{"_index":2722,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["total",{"_index":2008,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["tparent",{"_index":6407,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["tpath",{"_index":6402,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["tr",{"_index":2083,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{}}}],["trace",{"_index":431,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{},"9.宏/9.2.参数/9.2.3.其它的参数.html":{},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["trace(",{"_index":5593,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["trace(&#x201c;hello",{"_index":4574,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["trace(&#x201c;ok&#x201d",{"_index":5265,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["trace(&apo",{"_index":1464,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["trace(&apos;t",{"_index":4822,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["trace('t",{"_index":4792,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html":{}}}],["trace(1",{"_index":5177,"title":{},"body":{"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{}}}],["trace(if",{"_index":5178,"title":{},"body":{"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{}}}],["trace(languag",{"_index":4688,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["trace(match",{"_index":5527,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{}}}],["trace(nam",{"_index":5547,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["trace(output",{"_index":2067,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["trace(s2",{"_index":1845,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["trace(valu",{"_index":5581,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["trace(“hello",{"_index":4554,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html":{}}}],["trace(“ok",{"_index":5242,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html":{}}}],["tradit",{"_index":4848,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["trail",{"_index":5766,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["transform",{"_index":5215,"title":{},"body":{"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["transient",{"_index":6733,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["transit",{"_index":3223,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["translat",{"_index":6722,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["treat",{"_index":1357,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["tree",{"_index":5500,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["tri",{"_index":301,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["tricki",{"_index":4499,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["trigger",{"_index":3765,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["trim",{"_index":5426,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["trim().htmlescap",{"_index":459,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["tripl",{"_index":5455,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["triple&#x5b57;&#x6bb5;&#xff08;&#x5982;&#x679c;&#x5b83;&#x6709;&#xff0c;&#x90a3;&#x4e2a;&#x5b57;&#x6bb5;&#x4f1a;&#x4f18;&#x5148;&#x4e8e;&#x9759;&#x6001;&#x6269;&#x5c55;&#xff09",{"_index":5486,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["trivia",{"_index":3515,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{}}}],["true",{"_index":300,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"9.宏/9.2.参数/9.2.2.常数表达式.html":{},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{}}}],["true&#xff0c;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":1785,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["true&#xff0c;&#x91cd;&#x590d;&#x7684;&#x7ed3;&#x6784;&#x6216;&#x7c7b;/&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x88ab;&#x53c2;&#x7167;&#x5e8f;&#x5217;&#x5316;&#x3002;&#x8fd9;&#x53ef;&#x4ee5;&#x907f;&#x514d;&#x9012;&#x5f52;&#x6570;&#x636e;&#x7684;&#x65e0;&#x9650;&#x5faa;&#x73af;&#x66f4;&#x957f;&#x7684;&#x5e8f;&#x5217;&#x5316;&#x65f6;&#x95f4;&#x3002;&#x9ed8;&#x8ba4;&#xff0c;&#x5bf9;&#x8c61;&#x7f13;&#x5b58;&#x662f;&#x7981;&#x7528;&#x7684;&#xff1b;&#x7136;&#x800c;&#x5b57;&#x7b26;&#x4e32;&#x603b;&#x662f;&#x88ab;&#x7f13;&#x5b58;&#x3002",{"_index":2443,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{}}}],["true&#xff0c;fals",{"_index":5029,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["true,fals",{"_index":5008,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["truetyp",{"_index":6682,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["true，fals",{"_index":5004,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{}}}],["true，false，this，super或者nul",{"_index":4260,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["try/catch",{"_index":4958,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["trysometh",{"_index":1758,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{}}}],["try安全转换，然后捕捉str",{"_index":5069,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{}}}],["tstring",{"_index":5629,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["tstring(",{"_index":5627,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["tstring(temp",{"_index":5630,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["tstring保存一个无论大小写的“foo",{"_index":5634,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{}}}],["ttf",{"_index":6680,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["tuesday",{"_index":1704,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["ture",{"_index":4557,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["turn",{"_index":3215,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["twin",{"_index":1092,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["two",{"_index":641,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.9.函数调用/5.9.函数调用.html":{},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["type",{"_index":157,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.23.类型转换/5.23.类型转换.html":{},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{},"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["type&#x3002",{"_index":6456,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["type(",{"_index":5084,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["type(a",{"_index":3898,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["type(f",{"_index":5754,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["type(func",{"_index":3873,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["type(i",{"_index":5083,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["type(json",{"_index":3128,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["type(map",{"_index":5753,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["type(map2",{"_index":1694,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["type(pi",{"_index":5378,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["type(test",{"_index":3020,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["type(x",{"_index":4023,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["type,amonomorph",{"_index":5085,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["type,child1",{"_index":4625,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["type,it",{"_index":3866,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["type,which",{"_index":181,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{}}}],["type.createemptyinst",{"_index":2405,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["type.createenum",{"_index":2407,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{}}}],["type.createenum&#x521b;&#x5efa;&#xff0c;&#x5982;&#x679c;&#x53ef;&#x7528;&#xff0c;&#x5219;&#x4f7f;&#x7528;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x53c2;&#x6570;&#x503c;&#x3002;&#x5982;&#x679c;&#x6784;&#x9020;&#x51fd;&#x6570;&#x53c2;&#x6570;&#x7531;&#x4e8e;&#x5e8f;&#x5217;&#x5316;&#x88ab;&#x6539;&#x53d8;&#xff0c;&#x7ed3;&#x679c;&#x662f;&#x672a;&#x6307;&#x5b9a;&#x7684;&#x3002",{"_index":2462,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["type.enumequ",{"_index":2507,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["type.resolveclass",{"_index":2295,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["type/field",{"_index":6686,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["type1",{"_index":4960,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["type2",{"_index":4962,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["typebuildingmacro",{"_index":6559,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["typedef",{"_index":121,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"3.类型系统/3.类型系统.html#3-类型系统":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["typedef&#xff08;&#x7b2c;3.1&#x8282;&#xff09",{"_index":128,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["typedef&#xff08;&#x7b2c;3.1&#x8282;&#xff09;&#x5173;&#x952e;&#x5b57;&#x5b9a;&#x4e49;&#x4e14;&#x9700;&#x8981;&#x517c;&#x5bb9;&#x6709;&#x4e00;&#x4e2a",{"_index":3599,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["typedefinit",{"_index":6423,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["typedef（第3.1",{"_index":120,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"9.宏/9.4.工具/9.4.工具.html":{}}}],["typepath",{"_index":6372,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["typer",{"_index":275,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{}}}],["typeresolv",{"_index":5981,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["types,a",{"_index":3897,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["types,thu",{"_index":5389,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["typetool",{"_index":6442,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["typic",{"_index":637,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["t而不是看起来更自然的t",{"_index":4386,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{}}}],["t，fals",{"_index":2180,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["u",{"_index":1876,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["u.unseri",{"_index":2415,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["uc",{"_index":1289,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["ucs2",{"_index":5968,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["unari",{"_index":5119,"title":{},"body":{"5.表达式/5.3 操作符/5.3 操作符.html":{},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}}}],["unauthoris",{"_index":904,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["unavail",{"_index":4610,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["unbound",{"_index":6734,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["uncommon",{"_index":4391,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["unconstrain",{"_index":3654,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["unde&#xfb01;n",{"_index":5100,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["under",{"_index":1373,"title":{},"body":{"10.标准库/10.12.Sys/10.12.Sys.html":{},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{}}}],["underli",{"_index":3203,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["underscor",{"_index":242,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["underscore_ar",{"_index":5640,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["understand",{"_index":4081,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["undeﬁn",{"_index":5088,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{}}}],["unexpect",{"_index":3773,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["unflatten",{"_index":843,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["uni&#xfb01;",{"_index":3852,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["uni&#xfb01;c",{"_index":3755,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["uni&#xfb01;cation(3.5",{"_index":5096,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["uni&#xfb01;es(3.5",{"_index":4998,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["unicod",{"_index":1202,"title":{},"body":{"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["unif",{"_index":3221,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["unifi",{"_index":1348,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["unification(3.5",{"_index":3570,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["unifymindynam",{"_index":6735,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["uniqu",{"_index":1696,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["unit",{"_index":1525,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["unit.testrunn",{"_index":1530,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}}}],["uniﬁ",{"_index":3831,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{}}}],["uniﬁc",{"_index":3745,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{}}}],["uniﬁcation(3.5",{"_index":5086,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{}}}],["uniﬁes(3.5",{"_index":4988,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html":{}}}],["unknow0",{"_index":4031,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["unknown",{"_index":90,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["unknown0",{"_index":3129,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["unless",{"_index":3647,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["unlik",{"_index":3199,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.15.do-while/5.15.do-while.html":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["unmatch",{"_index":5490,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{}}}],["unnam",{"_index":4788,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["unnnn",{"_index":1254,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["unquali&#xfb01;",{"_index":4115,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["unqualiﬁ",{"_index":4095,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{}}}],["unreachable_cod",{"_index":6264,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["unreflect",{"_index":6736,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["unrol",{"_index":848,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["unsaf",{"_index":933,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["unseri",{"_index":2396,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["unserializer.default_resolv",{"_index":2403,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["unserializer.run(",{"_index":2411,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["unserializer.unseri",{"_index":2400,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["unsign",{"_index":5155,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["unspeci&#xfb01;c",{"_index":3680,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["unspecifi",{"_index":5165,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["unspeciﬁc",{"_index":3646,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["until",{"_index":3922,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["untyp",{"_index":302,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["untyped&#x6216;&#x8005;&#x4e0d;&#x662f;untyped&#x7684;&#x8868;&#x8fbe;&#x5f0f",{"_index":4285,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["untyped&#x6a21;&#x5f0f;&#xff0c;&#x8df3;&#x5230;14",{"_index":4305,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["untyped或者不是untyp",{"_index":4259,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["untyped模式，跳到14",{"_index":4262,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["unus",{"_index":5517,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{}}}],["unusu",{"_index":3718,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["upon",{"_index":258,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["upper",{"_index":248,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{}}}],["url",{"_index":2181,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["url的异步连接，可以连接到一个hax",{"_index":1381,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["us",{"_index":264,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.3 操作符/5.3.4 优先级.html":{},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"5.表达式/5.8.数组访问/5.8.数组访问.html":{},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.2.参数/9.2.1.ExprOf.html":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["usag",{"_index":255,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["use_cache&#xff0c;usercach",{"_index":2441,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{}}}],["use_cache，usercach",{"_index":2401,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{}}}],["use_enum_index&#xff0c;useenumindex",{"_index":2444,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{}}}],["use_enum_index，useenumindex",{"_index":2402,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{}}}],["use_rtti_doc",{"_index":6173,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["user",{"_index":2062,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["user,wherea",{"_index":5299,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["user.ag",{"_index":2984,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["user.distance/1000",{"_index":2103,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["user.nam",{"_index":2101,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["user:us",{"_index":2099,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["usererror(msg",{"_index":404,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["useroutput",{"_index":2091,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{}}}],["usertempl",{"_index":2090,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{}}}],["usertemplate.execute(us",{"_index":2092,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html":{}}}],["usertemplate.execute({us",{"_index":2147,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#子模板":{}}}],["using&#x201d",{"_index":5448,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["using&#x7684;&#x5f71;&#x54cd;&#x53d8;&#x5f97;&#x975e;&#x5e38;&#x5e38;&#x89c1;&#x3002;&#x5728;&#x5f88;&#x591a;&#x60c5;&#x51b5;&#x4e0b;&#x7684;&#x82f1;&#x8bed;&#x53d8;&#x5f97;&#x5c34;&#x5c2c;&#xff0c;&#x6240;&#x4ee5;&#x624b;&#x518c;&#x7684;&#x4f5c;&#x8005;&#x51b3;&#x5b9a;&#x628a;&#x8fd9;&#x4e2a;&#x4f7f;&#x7528;&#x5b9e;&#x9645;&#x7684;&#x529f;&#x80fd;&#x79f0;&#x547c;&#xff1a;&#x9759;&#x6001;&#x6269;&#x5c55;&#x3002",{"_index":5445,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["usingafor",{"_index":5721,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["usingstd.i",{"_index":5072,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["usual",{"_index":647,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.24.类型检查/5.24.类型检查.html":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["utf",{"_index":1275,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{}}}],["utf8",{"_index":5969,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["util",{"_index":3655,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["u{n",{"_index":1259,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["v",{"_index":2006,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["v(",{"_index":6535,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{}}}],["v1",{"_index":863,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["v2010",{"_index":2190,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["valid",{"_index":861,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["valu",{"_index":179,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.22.throw/5.22.throw.html":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["value&#x201d",{"_index":3565,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["value1",{"_index":5205,"title":{},"body":{"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["value2",{"_index":5207,"title":{},"body":{"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["valuen",{"_index":5209,"title":{},"body":{"5.表达式/5.6.对象声明/5.6.对象声明.html":{},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["valuesum",{"_index":1705,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["var",{"_index":82,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.14.单元测试/10.14.单元测试.html":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{},"10.标准库/10.2.数据结构/10.2.1.数组.html":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{},"10.标准库/10.2.数据结构/10.2.3.列表.html":{},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{},"10.标准库/10.2.数据结构/10.2.5.Map.html":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.4.Math/10.4.3.整数数学.html":{},"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{},"10.标准库/10.4.Math/10.4.4.扩展.html":{},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.14.while/5.14.while.html":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{},"9.宏/9.3.具体化/9.3.3.类具体化.html":{},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"9.宏/9.6.限制/9.6.2.静态扩展.html":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{},"9.宏/9.6.限制/9.6.3.构建顺序.html":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["var&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5.10&#x8282;&#xff09;&#x58f0;&#x660e;&#xff0c;&#x540c;&#x6837;&#xff0c;&#x5c40;&#x90e8;&#x51fd;&#x6570;&#x901a;&#x8fc7",{"_index":4777,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["var&#xff0c;&#x4f46;&#x662f;&#x540c;&#x6837;&#x7684;&#x89c4;&#x5219;&#x4e5f;&#x9002;&#x7528;&#x4e8",{"_index":4779,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["vari",{"_index":1958,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["variabl",{"_index":144,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.10.var/5.10.var.html":{},"5.表达式/5.10.var/5.10.var.html#5-10-var":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["variable(4.1",{"_index":177,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{}}}],["variable,i.",{"_index":5611,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["variables,but",{"_index":4074,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["varianc",{"_index":502,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["variant",{"_index":399,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["variou",{"_index":4678,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["varname1",{"_index":4959,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["varname2",{"_index":4961,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["var表达式（第5.10",{"_index":4766,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html":{}}}],["vcproj",{"_index":937,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["vec",{"_index":1633,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}}}],["vec.length",{"_index":1635,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}}}],["vec[i",{"_index":1636,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html":{},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}}}],["vector",{"_index":1639,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html":{}}}],["ver",{"_index":830,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["ver=[version:5",{"_index":836,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["veri",{"_index":428,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["verifi",{"_index":4487,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["version",{"_index":677,"title":{},"body":{"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["version:20",{"_index":855,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["vfuncnam",{"_index":6420,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html":{}}}],["via",{"_index":421,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.编译器用法.html":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["virtual",{"_index":1099,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["visibl",{"_index":4083,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["void",{"_index":1179,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["void&#x7c7b;&#x578b;&#x60ca;&#x8bb6;&#x5230;&#x3002;&#x6bd5;&#x7adf;&#xff0c;&#x4e3a;&#x4ec0;&#x4e48;&#x4e00;&#x4e2a;setter&#x9700;&#x8981;&#x8fd4;&#x56de;&#x4e9b;&#x4ec0;&#x4e48;&#x5462;&#xff1f;&#x57fa;&#x672c;&#x539f;&#x7406;&#x662f;&#xff0c;&#x6211;&#x4eec;&#x4ecd;&#x7136;&#x60f3;&#x8981;&#x53ef;&#x4ee5;&#x662f;i&#x7528;&#x5b57;&#x6bb5;&#x5206;&#x914d;&#x4f7f;&#x7528;setter&#x4e3a;&#x53f3;&#x624b;&#x8868;&#x8fbe;&#x5f0f;&#x3002;&#x7ed9;&#x5b9a;&#x4e00;&#x4e2a;&#x94fe;&#x5982",{"_index":4420,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["void&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x548c;&#x53d8;&#x91cf;&#x662f;&#x4e0d;&#x88ab;&#x5141;&#x8bb8;&#x7684",{"_index":2606,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["void&#xff09",{"_index":4570,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["void类型惊讶到。毕竟，为什么一个setter需要返回些什么呢？基本原理是，我们仍然想要可以是i用字段分配使用sett",{"_index":4387,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{}}}],["volatil",{"_index":6738,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["v{(",{"_index":6555,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["v{funcnam",{"_index":6430,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["v{}:dynam",{"_index":6365,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["w",{"_index":2204,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["wait",{"_index":1359,"title":{},"body":{"10.标准库/10.12.Sys/10.12.1.Threading.html":{},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["want",{"_index":2306,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["warn",{"_index":139,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["wav",{"_index":6724,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["way",{"_index":328,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["web",{"_index":1419,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["website.contactpag",{"_index":614,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["website.gallerypag",{"_index":612,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["website.homepag",{"_index":596,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["website.homepage.hx",{"_index":587,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["website.hxml",{"_index":620,"title":{},"body":{"7.编译器用法/7.1.hxml.html":{},"7.编译器用法/7.1.hxml.html#7-1HXML":{}}}],["welcom",{"_index":6132,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["well",{"_index":434,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.17.switch/5.17.switch.html":{},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["went",{"_index":4505,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["whenev",{"_index":3638,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["whenus",{"_index":4430,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["wherea",{"_index":4751,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.5.数组声明/5.5.数组声明.html":{},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["whether",{"_index":5134,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{}}}],["which,depend",{"_index":4667,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["while&#x5faa;&#x73af;&#x6784;&#x9020;&#xff1a",{"_index":5700,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["while&#x5faa;&#x73af;&#xff08;&#x7b2c;5.14&#x8282;&#xff09;&#x4e0d;&#x540c;&#x3002",{"_index":4907,"title":{},"body":{"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{}}}],["while&#x5faa;&#x73af;&#xff08;&#x7b2c;5.15&#x8282;&#xff09;&#x4e0d;&#x540c;&#x3002",{"_index":4897,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["while(5.14",{"_index":2563,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["while循环（第5.14",{"_index":4899,"title":{},"body":{"5.表达式/5.15.do-while/5.15.do-while.html":{}}}],["while循环（第5.15",{"_index":4886,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html":{}}}],["whole",{"_index":331,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["whose",{"_index":4451,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"5.表达式/5.18.trycatch/5.18.trycatch.html":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["wildcard",{"_index":4155,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["window",{"_index":894,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["within",{"_index":4096,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.3.方法/4.3.1.重写方法.html":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"5.表达式/5.1.块/5.1.块.html":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.12.new/5.12.new.html":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.13.for/5.13.for.html":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.20.break/5.20.break.html":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{},"5.表达式/5.21.continue/5.21.continue.html":{},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{},"5.表达式/5.7.字段访问/5.7.字段访问.html":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["withlength",{"_index":2959,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["without",{"_index":893,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"5.表达式/5.19.return/5.19.return.html":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"6.语言特性/6.9.元数据/6.9.元数据.html":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["wo",{"_index":4322,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["word",{"_index":1988,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["word.length",{"_index":1994,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["word.touppercas",{"_index":1996,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["words.filter(isthreeletters).map(capit",{"_index":1997,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["work",{"_index":465,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{},"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["world",{"_index":44,"title":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}},"body":{"1.Haxe介绍/1.Haxe介绍.html":{},"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"4.类字段/4.3.方法/4.3.方法.html":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["world&#x201d",{"_index":2599,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["world&#x201d;);}&#xff09",{"_index":4575,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["worth",{"_index":4141,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["wrap",{"_index":5082,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["wrapper",{"_index":839,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["write",{"_index":490,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["written",{"_index":183,"title":{},"body":{"4.类字段/4.类字段.html":{},"4.类字段/4.类字段.html#4-类字段":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{}}}],["wrong",{"_index":2299,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["wy3:fooy1:a:0",{"_index":2205,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["wy3:fooy1:b:2i4n",{"_index":2207,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["x",{"_index":350,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.2.属性/4.2.属性.html":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"5.表达式/5.11.局部函数/5.11.局部函数.html":{},"5.表达式/5.16.if/5.16.if.html":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"9.宏/9.2.参数/9.2.参数.html":{},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x\",\"y\",\"z\",\"w",{"_index":1815,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.4.分割.html":{}}}],["x\".code",{"_index":5925,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{}}}],["x&#x2019",{"_index":5680,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["x&#x662f;&#x4e00;&#x4e2a;&#x539f;&#x751f",{"_index":2635,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x(get",{"_index":4383,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x++作为参数，并因此使用表达式具体化（第9.3.1",{"_index":6349,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html":{}}}],["x,i",{"_index":2758,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x,y,z",{"_index":2756,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x,y,z,w",{"_index":1819,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{}}}],["x.code",{"_index":5020,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x.f4().f3().f2().f1",{"_index":5469,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x.push",{"_index":4038,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x01",{"_index":6060,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x02",{"_index":6061,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x2013",{"_index":2517,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x2013;connect",{"_index":6087,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x2013;cwd",{"_index":6091,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x2013;desplay",{"_index":6042,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["x2013;display",{"_index":5932,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["x2013;help",{"_index":941,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["x2013;interp",{"_index":983,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x2013;macro",{"_index":775,"title":{},"body":{"9.宏/9.宏.html#9-宏":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["x2013;no",{"_index":4706,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x2013;php",{"_index":988,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x2013;time",{"_index":986,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x2013;wait",{"_index":6081,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x2014;&#x2014",{"_index":2628,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x2018;haxe&#x2019",{"_index":981,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x2018;index&#x2018",{"_index":5935,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x2018;lvalue&#x2019",{"_index":4806,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x2018;rvalue&#x2019",{"_index":4808,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x2018;this&#x2018",{"_index":5934,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x2018;this.length&#x2018",{"_index":5936,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x2018;v&#x2018",{"_index":5994,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["x2018;void&#x2019",{"_index":6748,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["x2019",{"_index":3168,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["x2019;$actual",{"_index":3690,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x2019;&#x2019",{"_index":5034,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["x2019;=&#x2019",{"_index":1718,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["x2019;bar&#x2019",{"_index":5035,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["x2019;mi",{"_index":553,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x2019;set",{"_index":565,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x2019;the",{"_index":5679,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["x2019;work",{"_index":3331,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x201c",{"_index":1184,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x201c;&#x201d",{"_index":5033,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["x201c;&#x2026;&#x662f;&#x5426;&#x53ef;&#x4ee5;&#x88ab;&#x8d4b;&#x503c;&#x7ed9;&#x2026;&#x201d",{"_index":3949,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x201c;&#x4e0d;&#x80fd;&#x5bf9;&#x6bd4;myabstractint",{"_index":3335,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x201c;&#x5148;&#x524d;&#x770b;&#x8fc7;&#x7684;&#x201d",{"_index":18,"title":{},"body":{"index.html#关于本文档":{}}}],["x201c;&#x5185;&#x90e8;&#x7684;&#x503c;&#x201d;&#x3002;&#x5728;&#x8fd9;&#x70b9;&#x4e0a;&#xff0c;&#x4e00;&#x4e2a;&#x597d;&#x7684;&#x95ee;&#x9898;&#x662f",{"_index":3554,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;&#x53ea;&#x8bfb;&#x201d",{"_index":5137,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{}}}],["x201c;&#x540d;&#x5b57;&#x201d",{"_index":4816,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x201c;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x6210;&#x5458;&#x51fd;&#x6570;&#x6ca1;&#x6709;&#x88ab;&#x5185;&#x8054;&#x58f0;&#x660e;&#x5c06;&#x53d1;&#x751f;&#x4ec0;&#x4e48;&#x201d;&#xff0c;&#x56e0;&#x4e3a;&#x4ee3;&#x7801;&#x663e;&#x7136;&#x5fc5;&#x987b;&#x653e;&#x5230;&#x67d0;&#x4e2a;&#x5730;&#x65b9;&#x3002;hax",{"_index":3555,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;&#x5c1a;&#x672a;&#x4e86;&#x89e3;&#x7684;&#x201d",{"_index":20,"title":{},"body":{"index.html#关于本文档":{}}}],["x201c;&#x7eaf;&#x7cb9;&#x7684;&#x201d;&#xff0c;&#x5373;&#xff0c;&#x6ca1;&#x6709;&#x4efb;&#x4f55;&#x7684;&#x526f;&#x4f5c;&#x7528;&#x3002;&#x8fd9;&#x53ef;&#x4ee5;&#x6539;&#x5584",{"_index":6286,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x201c;&#xfb01;ll",{"_index":5798,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x201c;1&#x201d",{"_index":5262,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x201c;12&#x201d",{"_index":5787,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x201c;12&#x201d;&#x3002",{"_index":5786,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x201c;against&#x201d",{"_index":3974,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x201c;any&#x201d",{"_index":5169,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["x201c;awesome&#x201d",{"_index":5590,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["x201c;awesome&#x201d;&#x6211;&#x4eec;&#x7ed1;&#x5b9a;&#x5339;&#x914d;&#x7684",{"_index":5586,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["x201c;bar&#x201d",{"_index":4370,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["x201c;body&#x201d",{"_index":3563,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;chains&#x201d",{"_index":5661,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x201c;child",{"_index":3566,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;constructor",{"_index":4845,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["x201c;f&#x201d",{"_index":2325,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x201c;fall",{"_index":4953,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x201c;field",{"_index":2610,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x201c;foo&#x201d",{"_index":4007,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"5.表达式/5.12.new/5.12.new.html#5-12-new":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x201c;hello",{"_index":2598,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x201c;i",{"_index":2768,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x201c;int",{"_index":3944,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x201c;intern",{"_index":3564,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;k&#x201d",{"_index":2255,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x201c;lvalue&#x201d",{"_index":4811,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x201c;mi",{"_index":6586,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x201c;new&#x201d",{"_index":4740,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["x201c;nicolas&#x201d",{"_index":5826,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x201c;none&#x201d",{"_index":5567,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x201c;none&#x201d;&#x88ab;&#x8fd4;&#x56d",{"_index":5566,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x201c;on",{"_index":4758,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["x201c;or&#x201d;&#x8bed;&#x53e5",{"_index":1900,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x201c;original&#x201d",{"_index":4741,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["x201c;original&#x201d;&#x3002;&#x4e0b;&#x4e00;&#x884c;&#xff0c;test&#x88ab;&#x5206;&#x914d;&#x4e86;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x51fd;&#x6570;&#x3002;&#x8fd9;&#x6070;&#x6070;&#x662f;dynamic&#x505a;&#x5230;&#x7684;&#xff1a;&#x51fd;&#x6570;&#x5b57;&#x6bb5;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x51fd;&#x6570;&#x3002;&#x5176;&#x7ed3;&#x679c;&#x662f;&#xff0c;&#x4e0b;&#x4e00;&#x6b21;&#x8c03;&#x7528",{"_index":4738,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["x201c;over&#x201d",{"_index":3562,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;position&#x201d;&#x6a21;&#x5f0f;&#x53c2;&#x6570;&#xff08;&#x67e5;&#x770b;&#x6982;&#x8ff0;&#xff08;&#x7b2c;8.3.1&#x8282;&#xff09;&#xff09;&#x542f;&#x7528;&#x3002;&#x6211;&#x4eec;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#x6f14;&#x793a;&#x5b83;&#x7684;&#x4f7f;&#x7528;&#x3002;&#x6ce8;&#x610f;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x4ee5;&#x540c;&#x6837;&#x7684;&#x65b9;&#x5f0f;&#x7528;&#x4e8e;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x548c;&#x7c7b;&#x578b;&#x4e0a;&#xff1a",{"_index":6023,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["x201c;read",{"_index":4604,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["x201c;rvalue&#x201d",{"_index":4812,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x201c;sys&#x201d",{"_index":1375,"title":{},"body":{"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{}}}],["x201c;test&#x201d;&#x5f00;&#x59cb;&#x3002",{"_index":1553,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{}}}],["x201c;usage&#x201d",{"_index":6006,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["x201c;use",{"_index":5447,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x201c;using&#x201d",{"_index":5446,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x201c;variables&#x201d",{"_index":4715,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x201c;written",{"_index":4603,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["x201d",{"_index":3032,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x201d;&#x3002;&#x6548;&#x679c;&#x662f;&#xff0c;&#x9ed8;&#x8ba4;&#x503c;&#x53d6;&#x4ee3",{"_index":3049,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x201d;&#xff1a",{"_index":1185,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x201d;)&#xff09",{"_index":2267,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x201d;import&#x201d",{"_index":5411,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x201d;unsafe&#x201d",{"_index":5099,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["x2026",{"_index":1895,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["x2c6",{"_index":1897,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x2c6;\\r\\n\\t",{"_index":1893,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x2dc;/haxe/i",{"_index":1884,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x3001",{"_index":2690,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x3001;#elseif",{"_index":5254,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x3001;&#x548c",{"_index":2691,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x3002",{"_index":118,"title":{},"body":{"2.类型/2.类型.html#2-类型":{},"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x3002;&#x3002;&#x3002",{"_index":4831,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x3002;&#x4e0b;&#x9762;&#x5173;&#x4e8e;case&#x89c4;&#x5219;&#x7684;&#x8bf4;&#x660e;&#x89e3;&#x91ca;&#x5e2e;&#x52a9;&#x4f60;&#x7406;&#x89e3;&#x8be5;&#x8fc7;&#x7a0b;&#xff1a",{"_index":5536,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["x3002;&#x4e0b;&#x9762;&#x662f;&#x4f7f;&#x7528;&#x6570;&#x7ec4;&#x7684;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x793a;&#x4f8b;&#xff1a",{"_index":1577,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["x3002;&#x4e0b;&#x9762;&#x7684;&#x8fd0;&#x7b97;&#x7b26;&#x63a5;&#x53d7;&#x5e76;&#x8fd4;&#x56d",{"_index":2570,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x3002;&#x4e24;&#x4e2a;&#x65b9;&#x6cd5;&#x90fd;&#x4f7f;&#x7528",{"_index":2470,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["x3002;&#x4e24;&#x79cd;&#x60c5;&#x51b5;&#xff0c;&#x201c;module&#x201d;&#x8868;&#x793a;&#x8981;&#x7981;&#x7528;&#x6216;&#x8005;&#x542f;&#x7528;&#x7684;&#x6a21;&#x5757;&#x7684;&#x540d;&#x5b57;&#xff1a",{"_index":6277,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x3002;&#x4e3a;&#x4e86;&#x8d4b;&#x503c;y=1&#x7684;&#x7ed3;&#x679c;&#x5230;x&#xff0c;&#x5f62;&#x5f0f;&#x5fc5;&#x987b;&#x6709;&#x4e00;&#x4e2a;&#x503c;&#x3002;&#x5982;&#x679c",{"_index":4422,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x3002;&#x4e5f;&#x5141;&#x8bb8;&#x786e;&#x5b9a;&#x76f8;&#x5bf9;&#x4e8",{"_index":6454,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x3002;&#x4ece;&#x5176;&#x4e2d;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4e86;&#x89e3;&#x5230;&#x4ee5;&#x4e0b;&#x51e0;&#x4ef6;&#x4e8b;&#x60c5;&#xff1a",{"_index":1190,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x3002;&#x4ee5;&#x4e0a;&#x4f8b;&#x5b50;&#x4e2d;&#x8d4b;&#x503c;&#x4e86;&#x4e00;&#x4e2a",{"_index":2977,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x3002;&#x5173;&#x95ed;&#x6761;&#x4ef6;&#x4f7f;&#x7528",{"_index":2133,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["x3002;&#x518d;&#x4e00;&#x6b21;&#xff0c;&#x8ddf;&#x5982;&#x4e0b;&#x7684;&#x4ee3;&#x7801;&#x662f;&#x7b49;&#x6548;&#x7684;&#xff1a",{"_index":5704,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["x3002;&#x524d;&#x4e00;&#x79cd;&#x60c5;&#x51b5;&#xff0c;&#x5b57;&#x6bb5;&#x53ef;&#x4ee5;&#x6709;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#xff0c;&#x800c;&#x540e;&#x4e00;&#x79cd;&#xff0c;&#x5b83;&#x4eec;&#x88ab;&#x9650;&#x5236;&#x517c;&#x5bb9;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#xff1a",{"_index":3112,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x3002;&#x53d8;&#x91cf",{"_index":2829,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x3002;&#x53ea;&#x6709;&#x5f53;&#x6211;&#x4eec;&#x4e3a;&#x5176;&#x63a8;&#x5165;&#x4e00;&#x4e2a",{"_index":4068,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x3002;&#x53ea;&#x6709;&#x6761;&#x4ef6;&#x6ee1;&#x8db3;case&#x624d;&#x88ab;&#x91c7;&#x7528;&#xff0c;&#x5426;&#x5219;&#x5339;&#x914d;&#x7ee7;&#x7eed;&#x4e0b;&#x4e00;&#x4e2a;cas",{"_index":5599,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["x3002;&#x540c;&#x6837;&#xff0c;&#x8868;&#x8fbe;&#x5f0f",{"_index":2582,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x3002;&#x540e;&#x8005;&#x4e3a;&#x65b9;&#x4fbf;&#x8d77;&#x89c1;&#x4f7f;&#x7528;&#x4e86",{"_index":3598,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x3002;&#x5426;&#x5219;&#x5b57;&#x6bb5;&#x503c;&#x662f;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#xff0c;&#x6bcf;&#x4e2a;&#x53c2;&#x6570;&#x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x5143;&#x7d20;&#x3002",{"_index":5830,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x3002;&#x548c;&#x901a;&#x5e38;&#x7684;&#x5408;&#x4e00;&#x884c;&#x4e3a;&#x4e0d;&#x540c;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x5c1d;&#x8bd5;&#xff08;&#x5e76;&#x5931;&#x8d25;&#xff09;&#x53bb;&#x786e;&#x5b9a;&#x4e00;&#x4e2a;&#x901a;&#x7528;&#x7c7b;&#x578b;&#xff08;&#x7b2c;3.5.5&#x8282;&#xff09;&#xff0c;&#x4e2a;&#x522b;&#x7684;&#x5143;&#x7d20;&#x4e0d;&#x5229;&#x4e8e;&#x7c7b;&#x578b;&#x5316;&#x4f1a;&#x88ab;&#x7edf;&#x4e00;&#x4e3a",{"_index":4011,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x3002;&#x5728",{"_index":1155,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x3002;&#x5728;&#x6240;&#x6709;&#x5176;&#x4ed6;&#x60c5;&#x51b5;&#xff0c;mytre",{"_index":5573,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x3002;&#x5927;&#x591a;&#x6570;&#x60c5;&#x51b5;&#x4e0b;&#xff0c;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x548c;expr&#x5b8c;&#x5168;&#x76f8;&#x540c;&#x7684;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x5141;&#x8bb8;&#x9650;&#x5236;&#x63a5;&#x53d7;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x5728;&#x7ed3;&#x5408;&#x5b8f;&#x548c;&#x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09;&#x65f6;&#x53ef;&#x4ee5;&#x63d0;&#x4f9b;&#x5e2e;&#x52a9;&#xff1a",{"_index":6323,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["x3002;&#x5982",{"_index":4274,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x3002;&#x5982;&#x679c;&#x4e00;&#x4e2a",{"_index":3120,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x3002;&#x5982;&#x679c;&#x5b83;&#x6709;&#x4e00;&#x4e2a;&#x503c;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x7c7b;&#x578b;&#x5de5;&#x5177",{"_index":4996,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["x3002;&#x5b83;&#x4eec;&#x88ab;&#x5b9e;&#x73b0;&#x4e3a",{"_index":2625,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x3002;&#x5b83;&#x548c;&#x5b9e;&#x4f8b;&#x6210;&#x5458;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x8bbe;&#x7f6e;&#x4e3a;&#x4e00;&#x4e2a;&#x5b9a;&#x5236",{"_index":2454,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x3002;&#x5b83;&#x603b;&#x662f;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x5b9e;&#x4f8b;&#x3002",{"_index":2030,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x3002;&#x5c31;&#x5982;&#x6211;&#x4eec;&#x770b;&#x5230;&#x7684;&#xff0c;&#x8bed;&#x6cd5;&#x975e;&#x5e38;&#x7c7b;&#x4f3c;&#x51fd;&#x6570;&#x7684;&#x8c03;&#x7528;&#x8bed;&#x6cd5;&#xff08;&#x7b2c;5.9&#x8282;&#xff09;&#xff0c;&#x901a;&#x5e38;&#x79f0;&#x4e3a;&#x6784;&#x9020;&#x51fd;&#x6570;&#x8c03;&#x7528;&#x3002",{"_index":4844,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["x3002;&#x5f53;&#x7136;&#xff0c;&#x8fd9;&#x662f;&#x4e0d;&#x5141;&#x8bb8;&#x7684;&#x5e76;&#x4e14;&#x4f1a;&#x4f7f;&#x7f16;&#x8bd1;&#x5668;&#x53d1;&#x51fa;&#x4e00;&#x4e2a;&#x9519;&#x8bef",{"_index":3943,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x3002;&#x5f88;&#x660e;&#x663e;&#xff0c;&#x6211;&#x4eec;&#x60f3;&#x8981;&#x5339;&#x914d;&#x5982;&#x679c;tstring&#x4fdd;&#x5b58;&#x4e00;&#x4e2a;&#x65e0;&#x8bba;&#x5927;&#x5c0f;&#x5199;&#x7684;&#x201c;foo&#x201d;&#x5219;&#x6210;&#x529f;&#x3002;&#x8fd9;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x63d0;&#x53d6;&#x5668;&#x7b80;&#x5355;&#x5b9e;&#x73b0;&#xff1a",{"_index":5654,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x3002;&#x6211;&#x4eec;&#x53d1;&#x73b0;&#x8fd9;&#x4e2a;&#x884c;&#x4e3a;&#x4f1a;&#x5f15;&#x53d1;&#x592a;&#x591a;&#x7684;&#x7c7b;&#x578b;&#x95ee;&#x9898;&#xff0c;&#x56e0;&#x6b64;&#x5728",{"_index":3158,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x3002;&#x6240;&#x4ee5;&#x5f53;&#x4e00;&#x4e2a;&#x5305;&#x4e2d;&#x5b58;&#x5728;&#x4e24;&#x4e2a;&#x6a21;&#x5757;&#xff0c;&#x4e14;&#x4e24;&#x4e2a;&#x6a21;&#x5757;&#x4e2d;&#x5b9a;&#x4e49;&#x4e86;&#x540c;&#x540d;&#x7684;&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x65f6;&#x53ef;&#x80fd;&#x4f1a;&#x4ea7;&#x751f;&#x51b2;&#x7a81;&#x3002;&#x901a;&#x5e38;&#xff0c;haxe&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x4fa6;&#x6d4b;&#x5230;&#x8fd9;&#x7c7b;&#x60c5;&#x51b5;&#x5e76;&#x505a;&#x51fa;&#x76f8;&#x5e94;&#x62a5;&#x544a;&#x3002",{"_index":4122,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x3002;&#x6709;&#x8bb8;&#x591a;&#x4e5f;&#x628a;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x3002",{"_index":2026,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x3002;&#x67e5;&#x770b",{"_index":5869,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x3002;&#x68c0;&#x7d22;&#x8fd9;&#x4e2a;&#x4fe1;&#x606f;&#x73b0;&#x5728;&#x975e;&#x5e38;&#x7b80;&#x5355;&#xff1a",{"_index":6255,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["x3002;&#x6ca1;&#x6709;&#x5c40;&#x90e8;&#x7c7b;&#x578b;&#x6216;&#x8005;&#x65b9;&#x6cd5;&#x5728;&#x521d;&#x59cb;&#x5316;&#x5b8f;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x3002",{"_index":6304,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x3002;&#x7136;&#x540e;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x770b;&#x5230",{"_index":4057,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x3002;&#x7136;&#x540e;&#x751f;&#x6210;&#x5982;&#x4e0b;&#x8f93;&#x51fa;&#xff1a",{"_index":1189,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x3002;&#x7136;&#x540e;&#x8ddf;&#x4e00;&#x4e2a;&#x5faa;&#x73af;&#x4f53;&#x8868;&#x8fbe;&#x5f0f;&#xff1a",{"_index":4892,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["x3002;&#x7136;&#x540e;&#xff0c;&#x5c06;&#x63a2;&#x7d22;&#x4ee4;&#x4eba;&#x5174;&#x594b;&#x7684;&#x5185;&#x5bb9;&#xff0c",{"_index":1032,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x3002;&#x7531;&#x4e8e;&#x5b83;&#x7684;&#x884c;&#x4e3a;&#x975e;&#x5e38;&#x63a5;&#x8fd1;&#x4f20;&#x7edf;&#x7684;&#x5806;&#x6808;&#xff0c;&#x6240;&#x4ee5;&#x5728;hax",{"_index":1739,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["x3002;&#x76ee;&#x524d;&#xff0c;&#x5982;&#x4e0b;&#x7684;&#x8fd0;&#x7b97;&#x7b26;&#x88ab;&#x5141;&#x8bb8;&#xff1a",{"_index":2135,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["x3002;&#x7b2c;&#x4e00;&#x4e2a;&#x4e3b;&#x8981;&#x7248;&#x672c;&#x5f00;&#x59cb;&#x652f;&#x6301",{"_index":1144,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x3002;&#x7f16;&#x8bd1;&#x5668;&#x4e5f;&#x8bbe;&#x7f6e;&#x4e86;&#x4e00;&#x4e9b;&#x5185;&#x90e8;&#x6807;&#x8bb0;&#x5728;&#x4e0d;&#x540c;&#x7684;&#x7f16;&#x8bd1;&#x6b65;&#x9aa4;&#x4e4b;&#x95f4;&#x4f20;&#x9012;&#x4fe1;&#x606f;&#x3002",{"_index":5260,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x3002;&#x8981;&#x5168;&#x5c40;&#x7981;&#x7528;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#xff0c;&#x4f7f;&#x7528",{"_index":6272,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x3002;&#x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26;&#x7684;&#x5f71;&#x54cd;&#x662f;&#x5728;&#x6240;&#x6709;&#x4e09;&#x79cd;&#x7c7b;&#x4e4b;&#x95f4;&#x5171;&#x4eab;&#xff0c;&#x5c06;&#x5728;&#x5355;&#x72ec;&#x7684;&#x7ae0;&#x8282;&#x8bb2;&#x89e3;&#x3002",{"_index":4372,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["x3002;&#x8fd9;&#x4e2a;&#x89c4;&#x5219;&#x5f53;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x88ab;&#x5bfc;&#x5165;&#x65f6;&#x4e5f;&#x6269;&#x5c55;&#x5230;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x3002",{"_index":4205,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x3002;&#x8fd9;&#x53ef;&#x80fd;&#x6709;&#x70b9;&#x51fa;&#x4e4e;&#x610f;&#x6599;&#xff0c;int",{"_index":6326,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["x3002;&#x8fd9;&#x5728;&#x7b2c;3&#x884c;&#x7684;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x8f93;&#x51fa;&#x76f4;&#x63a5;&#x53cd;&#x6620;&#x51fa;&#x6765;&#x3002;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x7a0b;&#x5e8f;&#x8c03;&#x7528;&#x4e86;4&#x6b21",{"_index":3026,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x3002;&#x8fd9;&#x5bf9;&#x4e8e;&#x6f14;&#x793a;&#x548c;&#x6d4b;&#x8bd5;&#x662f;&#x975e;&#x5e38;&#x6709;&#x7528;&#x7684;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x5141;&#x8bb8;&#x6211;&#x4eec;&#x5ffd;&#x7565;&#x4e00;&#x4e2a;&#x771f;&#x5b9e;&#x7684;ide&#x4e0d;&#x5f97;&#x4e0d;&#x53bb;&#x505a;&#x7684;&#x5b57;&#x8282;&#x8ba1;&#x6570;&#x5904;&#x7406;&#x3002;&#x672c;&#x8282;&#x7684;&#x4f8b;&#x5b50;&#x4f7f;&#x7528;&#x4e86;&#x8fd9;&#x4e2a;&#x7279;&#x6027;&#x3002;&#x6ce8;&#x610f;&#xff0c;&#x8fd9;&#x53ea;&#x5728",{"_index":5910,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x3002;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x663e;&#x5f0f;&#x58f0;&#x660e;&#x5176;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x4e3a",{"_index":3880,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x3002;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x5bf9;&#x4e8e;&#x6bcf;&#x4e2a",{"_index":3695,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x3002;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x8fd9;&#x4e9b;&#x53c2;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x5fc5;&#x987b;&#x8ba4;&#x53ef",{"_index":3034,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x3002;&#x8fd9;&#x6307;&#x793a;&#x7f16;&#x8bd1;&#x5668;&#x6ca1;&#x6709;&#x523b;&#x610f;&#x7684;&#x6539;&#x53d8;&#xff0c;&#x66f4;&#x597d;&#x7684;&#x662f;&#x8fd4;&#x56d",{"_index":6604,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x3002;&#x8fd9;&#x662f;&#x4e00;&#x4e2a",{"_index":4051,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x3002;&#x8fd9;&#x662f;&#x56e0;&#x4e3a;&#x5b57;&#x6bb5;&#x88ab;&#x5b9a;&#x4e49;&#x5728;&#x5b83;&#x4eec;&#x7684;&#x901a;&#x7528;&#x7956;&#x5148;&#x7c7b;base&#xff0c;&#x76f8;&#x53cd;&#x7684;&#xff0c;&#x5b57;&#x6bb5",{"_index":4641,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x3002;&#x8fd9;&#x662f;&#x56e0;&#x4e3a;&#x7f16;&#x8bd1;&#x5668;&#x6b64;&#x65f6;&#x53ef;&#x4ee5;&#x5b89;&#x5168;&#x5730;&#x5047;&#x5b9a",{"_index":3887,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x3002;&#x8fd9;&#x662f;&#x56e0;&#x4e3a;&#x8c03;&#x7528",{"_index":5479,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x3002;&#x8fd9;&#x6709;&#x4e09;&#x4e2a;&#x8981;&#x6c42;&#xff1a",{"_index":5481,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x3002;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#xff0c;&#x4e0b;&#x5212;&#x7ebf;&#x7684;&#x7248;&#x672c",{"_index":5281,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x3002;&#x8fd9;&#x7c7b;&#x4f3c;&#x4e8e;&#x6cdb;&#x578b;&#x51fd;&#x6570;&#xff1a",{"_index":3742,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x3002;&#x9884;&#x671f;&#x7684;&#x4f7f;&#x7528;&#x662f;try&#x5b89;&#x5168;&#x8f6c;&#x6362;&#xff0c;&#x7136;&#x540e;&#x6355;&#x6349;string&#x7c7b;&#x578b;&#x7684;&#x5f02;&#x5e38;&#x3002",{"_index":5081,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["x3002;float&#x7c7b;&#x578b;&#x5e38;&#x91cf;&#x662f;&#x4e0d;&#x5141;&#x8bb8;&#x7684",{"_index":2129,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#表达式":{}}}],["x3002;hax",{"_index":6548,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x3002;haxe&#x7f16;&#x8bd1;&#x5668;&#x5728;&#x4ee5;&#x4e0b;&#x60c5;&#x51b5;&#x4e0b;&#x6267;&#x884c;&#x6b64;&#x7c7b;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#xff1a",{"_index":3907,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x4e00;&#x4e2a",{"_index":1735,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x4e00;&#x4e2a;&#x4f7f;&#x7528;&#x9017;&#x53f7",{"_index":2992,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x4e00;&#x4e2a;&#x5305;&#x542b;&#x9690;&#x5f0f;&#x5b9a;&#x4e49",{"_index":6217,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x4e00;&#x4e2a;&#x5305;&#x62ec;&#x5728;&#x82b1;&#x62ec;&#x53f7",{"_index":2990,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x4e00;&#x4e2a;&#x5355;&#x5f62;&#xff08;monomorph&#xff09;&#x4f1a;&#x5728",{"_index":3573,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["x4e00;&#x4e2a;&#x5355;&#x72ec;&#x7684;&#x503c;&#x3002",{"_index":2424,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x4e00;&#x4e2a;&#x53d8;&#x91cf;&#x540d;&#x7528;&#x6765;&#x4fdd;&#x5b58;&#x88ab;&#x629b;&#x51fa;&#x7684;&#x503c",{"_index":4973,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["x4e00;&#x4e2a;&#x53d8;&#x91cf;&#xff08;&#x7b2c;4.1&#x8282;&#xff09",{"_index":4410,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x4e00;&#x4e2a;&#x540d;&#x5b57;&#xff0c;&#x4e14;&#x53ef;&#x4ee5;&#x5177;&#x6709;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;3.2&#xff09",{"_index":4809,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x4e00;&#x4e2a;&#x540d;&#x79f0;&#x901a;&#x5e38;&#x6307;&#x4ee3",{"_index":306,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["x4e00;&#x4e2a;&#x5411;&#x91cf;&#x662f;&#x4e00;&#x4e2a;&#x4f18;&#x5316;&#x7684;&#x56fa;&#x5b9a;&#x957f;&#x5ea6;&#x7684;&#x5143;&#x7d20;&#x96c6;&#x5408;&#x3002;&#x5f88;&#x50cf;&#x6570;&#x7ec4;&#xff08;&#x7b2c;10.2.1&#x8282;&#xff09;&#xff0c;&#x5b83;&#x53ea;&#x6709;&#x4e00;&#x79cd;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x7b2c;3.2&#x8282;&#xff09;&#xff0c;&#x6240;&#x6709;&#x5411;&#x91cf;&#x7684;&#x5143;&#x7d20;&#x5fc5;&#x987b;&#x662f;&#x7279;&#x5b9a;&#x7c7b;&#x578b;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x4e00;&#x4e2a",{"_index":1641,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}}}],["x4e00;&#x4e2a;&#x57fa;&#x672c;&#x7684;&#x5b8f;&#x662f;&#x4e00;&#x4e2a;&#x8bed;&#x6cd5;&#x8f6c;&#x6362;&#x3002;&#x5b83;&#x63a5;&#x53d7;0&#x6216;&#x8005;&#x591a;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5&#x7ae0;&#xff09;&#x5e76;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x3002;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x5b8f;&#x88ab;&#x8c03;&#x7528;&#xff0c;&#x5b83;&#x5b9e;&#x9645;&#x4e0a;&#x4ece;&#x5b83;&#x8c03;&#x7528;&#x7684;&#x4f4d;&#x7f6e;&#x63d2;&#x5165;&#x4ee3;&#x7801;&#x3002;&#x5728;&#x8fd9;&#x65b9;&#x9762;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x8ddf;&#x4e00;&#x4e2a;&#x9884;&#x5904;&#x7406;&#xff0c;&#x5982;c++&#x4e2d;&#x7684",{"_index":769,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x4e00;&#x4e2a;&#x57fa;&#x7840;&#x7684",{"_index":4942,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x4e00;&#x4e2a;&#x590d;&#x5408;&#x7c7b;&#x578b;&#xff0c;&#x5982;&#x679c;&#x5b83;&#x7684;&#x7ec4;&#x4ef6;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5f97;&#x4e3a;&#x7f3a;&#x5c11;&#x901a;&#x7528;&#x7684;&#x7ec4;&#x4ef6;&#xff0c;&#x5982;&#x5b83;&#x4eec;&#x53ea;&#x5199;&#xff0c;&#x4f46;&#x662f;&#x4e0d;&#x8bfb;&#xff0c;&#x5219;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x6297;&#x53d8;&#x3002",{"_index":3826,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x4e00;&#x4e2a;&#x5b57;&#x6bb5",{"_index":310,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#x5728;&#x5982;&#x4e0b;&#x4efb;&#x4f55;&#x4e00;&#x4e2a;&#x60c5;&#x51b5;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x7269;&#x7406;&#x7684;&#xff1a",{"_index":4409,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#x7684;&#x5199;&#x5165;&#x8bbf;&#x95ee;&#x53d1;&#x751f;&#x5728;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x8868;&#x8fbe;&#x5f0f;&#x88ab;&#x4ee5;obj.field=value&#x683c;&#x5f0f;&#x8d4b;&#x4e00;&#x4e2a;&#x503c;&#x7684;&#x65f6;&#x5019;&#x3002;&#x4e5f;&#x53ef;&#x80fd;&#x548c;&#x8bfb;&#x53d6;&#x8bbf;&#x95ee;&#x8054;&#x5408;&#x51fa;&#x73b0;&#xff0c;&#x5bf9;&#x4e8e;&#x7279;&#x522b;&#x7684;&#x8d4b;&#x503c;&#x64cd;&#x4f5c;&#x7b26;&#x5982",{"_index":4519,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#x7684;&#x8bfb;&#x53d6;&#x8bbf;&#x95ee;&#x53d1;&#x751f;&#x5728;&#x53f3;&#x624b;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5.7&#x8282;&#xff09;&#x4f7f;&#x7528;&#x65f6;&#x3002;&#x5305;&#x62ec;&#x901a;&#x8fc7",{"_index":4516,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x5217;&#x8868;&#x8868;&#x793a;&#x5b57;&#x6bb5;&#x53ef;&#x7528;&#x7684;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002",{"_index":6232,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x5217;&#x8868;&#xff0c;&#x8868;&#x793a;&#x6784;&#x9020;&#x51fd;&#x6570;&#x53ef;&#x7528;&#x7684;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002",{"_index":6241,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x5217;&#x8868;&#xff0c;&#x8868;&#x793a;&#x7c7b;&#x578b;&#x53ef;&#x7528;&#x7684;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002",{"_index":6200,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x6570;&#x7ec4;&#xff0c;&#x8868;&#x793a;&#x5b57;&#x6bb5;&#x62e5;&#x6709;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x7b2c;3.2&#x8282;&#xff09;&#x7684;&#x540d;&#x79f0;&#x3002",{"_index":6230,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x662f;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x5e8f;&#x5217;&#x3002",{"_index":1269,"title":{},"body":{"10.标准库/10.1.字符串/10.1.字符串.html#10-1-字符串":{}}}],["x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x7c7b;&#x578b;&#x7684;&#x6570;&#x7ec4;&#xff0c;&#x8868;&#x793a;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x7b2c;3.2&#x8282;&#xff09;&#x7684;&#x540d;&#x79f0;&#x3002;&#x81ea;hax",{"_index":6194,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x4e00;&#x4e2a;&#x5b8f;&#x53ef;&#x4ee5;&#x88ab;&#x58f0;&#x660e;&#x63a5;&#x53d7;&#x5e38;&#x6570;&#xff08;&#x7b2c;5.2&#x8282;&#xff09;&#x53c2;&#x6570;&#xff1a",{"_index":6337,"title":{},"body":{"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{}}}],["x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x51fd;&#x6570;&#xff0c;&#x6216;&#x8005",{"_index":309,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x53d8;&#x91cf",{"_index":308,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["x4e00;&#x4e2a;&#x5c5e;&#x6027;&#x5e26;&#x6709",{"_index":4413,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x4e00;&#x4e2a;&#x5c5e;&#x6027;&#xff08;&#x7b2c;4.2&#x8282;&#xff09;&#x5e26;&#x6709",{"_index":4411,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x4e00;&#x4e2a;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x8868;&#x793a;&#x540d;&#x79f0;&#x540e;&#x8ddf;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x503c",{"_index":2234,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x4e00;&#x4e2a;&#x5f88;&#x597d;&#x7684;&#x4f8b;&#x5b50;&#x662f;&#x6df7;&#x5408;&#x7c7b;&#x578b;&#x7684;&#x6570;&#x7ec4;&#x3002;&#x5982;&#x5728",{"_index":4005,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x4e00;&#x4e2a;&#x6240;&#x6709;&#x5185;&#x90e8;&#x5b9a;&#x4e49;&#x7684;&#x8be6;&#x5c3d;&#x5217;&#x8868;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x5728;haxe&#x7f16;&#x8bd1;&#x5668",{"_index":5284,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x5b9e;&#x9645;&#x4e0a;&#x662f;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x5b83;&#x662f;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x65f6;&#x529f;&#x80fd;&#xff0c;&#x5728;&#x56fa;&#x6709;&#x7c7b;&#x578b;&#x4e4b;&#x4e0a;&#x5b9a;&#x4e49;&#x6765;&#x4fee;&#x6539;&#x6216;&#x8005;&#x589e;&#x5f3a;&#x5b83;&#x4eec;&#x7684;&#x884c;&#x4e3a;&#x7684;&#x7c7b;&#x578b;&#xff1a",{"_index":3524,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x662f;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x65f6;&#x6784;&#x9020;&#xff0c;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x4ee5;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x7684;&#x65b9;&#x5f0f;&#x8868;&#x793a;&#x3002;&#x8fd9;&#x5141;&#x8bb8;&#x7ed9;&#x5b58;&#x5728;&#x7684;&#x7c7b;&#x578b;&#x4e00;&#x4e2a;&#x5168;&#x65b0;&#x7684;&#x610f;&#x4e49;&#x3002",{"_index":512,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x4e00;&#x4e2a;&#x63a5;&#x53e3;&#x53ef;&#x4ee5;&#x88ab;&#x7406;&#x89e3;&#x4e3a;&#x7c7b;&#x7684;&#x7b7e;&#x540d;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x63cf;&#x8ff0;&#x4e86;&#x7c7b;&#x7684;&#x516c;&#x5171;&#x5b57;&#x6bb5;&#x3002;&#x63a5;&#x53e3;&#x4e0d;&#x63d0;&#x4f9b;&#x5b9e;&#x73b0;&#xff0c;&#x800c;&#x662f;&#x7eaf;&#x7cb9;&#x7684;&#x7ed3;&#x6784;&#x4e0a;&#x7684;&#x4fe1;&#x606f;&#xff1a",{"_index":2728,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x4e00;&#x4e2a;&#x6570;&#x7ec4;&#x662f;&#x4e00;&#x4e2a;&#x5143;&#x7d20;&#x7684;&#x96c6;&#x5408;&#x3002;&#x5b83;&#x6709;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x7b2c;3.2&#x8282;&#xff09;&#xff0c;&#x5bf9;&#x5e94;&#x8fd9;&#x4e9b;&#x5143;&#x7d20;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x6570;&#x7ec4;&#x53ef;&#x4ee5;&#x88ab;&#x901a;&#x8fc7;&#x4ee5;&#x4e0b;&#x4e09;&#x79cd;&#x65b9;&#x5f0f;&#x521b;&#x5efa;&#xff1a",{"_index":1605,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x4e00;&#x4e2a;&#x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x6ce8;&#x91ca;&#xff0c;&#x51b3;&#x5b9a;&#x6355;&#x6349;&#x54ea;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x503c",{"_index":4974,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["x4e00;&#x4e2a;&#x666e;&#x901a;&#x7684",{"_index":4888,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x65f6;&#x68c0;&#x67e5;&#x5176",{"_index":3417,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x4e00;&#x4e2a;&#x6839;&#x8282;&#x70b9;&#x5143;&#x7d20;&#x4e5f;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x89e3;&#x6790;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x5305;&#x542b;&#x7684",{"_index":2360,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{}}}],["x4e00;&#x4e2a;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x4e5f;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x5206;&#x5272;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x5230;&#x51e0;&#x4e2a;&#x5b50;&#x4e32;&#xff1a",{"_index":1818,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{}}}],["x4e00;&#x4e2a;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x4e8e;&#x66ff;&#x6362;&#x5b57;&#x7b26;&#x4e32;&#x7684;&#x4e00;&#x90e8;&#x5206;&#xff1a",{"_index":1808,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{}}}],["x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x8d44;&#x6e90;&#x5d4c;&#x5165;&#x7cfb;&#x7edf;&#xff0c;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x76f4;&#x63a5;&#x5d4c;&#x5165;&#x6587;&#x4ef6;&#x5230;&#x7f16;&#x8bd1;&#x540e;&#x7684;&#x5e94;&#x7528;&#x3002",{"_index":6166,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.资源.html#8-4-资源":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#x53ef;&#x4ee5;&#x91cd;&#x5199;&#x5b83;&#x7236;&#x7c7b;&#x7684",{"_index":2784,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#x578b",{"_index":307,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x901a;&#x8fc7",{"_index":4125,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#x5b57;&#x6bb5;&#x662f;&#x7c7b;&#x4e2d;&#x4e00;&#x4e2a;&#x53d8;&#x91cf;&#x3001;&#x5c5e;&#x6027;&#x3001;&#x6216;&#x8005;&#x65b9;&#x6cd5;&#xff0c;&#x53ef;&#x4ee5;&#x662f;&#x9759;&#x6001;&#x6216;&#x8005;&#x975e;&#x9759;&#x6001;&#x7684;&#x3002;&#x975e;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x88ab;&#x79f0;&#x4e3a;&#x6210;&#x5458;&#x5b57;&#x6bb5;&#xff0c;&#x6240;&#x4ee5;&#x6211;&#x4eec;&#x6709;&#x65f6;&#x5019;&#x4f1a;&#x8bf4;&#xff0c;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x65b9;&#x6cd5;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x6210;&#x5458;&#x53d8;&#x91cf;&#x3002",{"_index":213,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#x5b57;&#x6bb5;&#xff0c",{"_index":5321,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff0c",{"_index":5322,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#x6216;&#x8005;&#x51fd;&#x6570;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":3731,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#xff08;&#x7b2c;2.3&#x8282;&#xff09;&#x7edf;&#x4e00;&#x4e3a",{"_index":3838,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x4e00;&#x4e2a;&#x7ed3;&#x6784",{"_index":3840,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x4e00;&#x4e2a;&#x7ed3;&#x6784;&#xff08;&#x7b2c;2.5&#x8282;&#xff09;&#x65f6;&#xff0c",{"_index":3839,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#x662f;&#x4e00;&#x4e2a;&#x914d;&#x7f6e;&#x503c;&#xff0c;&#x53ef;&#x4ee5;&#x6539;&#x53d8;&#x7f16;&#x8bd1;&#x8fc7;&#x7a0b;&#x3002;&#x53ef;&#x4ee5;&#x8c03;&#x7528;&#x547d;&#x4ee4;&#x884c;&#x4f7f;&#x7528",{"_index":5257,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x4e00;&#x4e2a;&#x8f7b;&#x91cf;&#x7ea7;&#x7684;api&#xff0c;&#x5f88;&#x597d;&#x7684;&#x4f7f;&#x7528;&#x4e8e;&#x533f;&#x540d;&#x7ed3;&#x6784;&#xff0c;&#x4f46;&#x662f;&#x5bf9;&#x7c7b;&#x7684;&#x6709;&#x9650;&#x652f;&#x6301;&#x3002",{"_index":2310,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x4e00;&#x4e2a;&#x8fd9;&#x6837;&#x7684;&#x89c4;&#x8303;&#x53ef;&#x4ee5;&#x4f7f;&#x5f97;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff08;&#x7b2c;2.2&#x8282;&#xff09;&#x7684;&#x90e8;&#x5206",{"_index":3733,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x4e00;&#x4e2a;&#x9759;&#x6001;&#x6269;&#x5c55;&#x5141;&#x8bb8;&#x4f2a;&#x88c5;&#x6269;&#x5c55;&#x5df2;&#x5b58;&#x5728;&#x7684;&#x7c7b;&#x578b;&#x800c;&#x4e0d;&#x7528;&#x4fee;&#x6539;&#x5b83;&#x4eec;&#x7684;&#x6e90;&#x7801;&#x3002;&#x5728;haxe&#x4e2d;&#x8fd9;&#x662f;&#x901a;&#x8fc7;&#x58f0;&#x660e;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x65b9;&#x6cd5;&#xff0c;&#x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x662f;&#x8981;&#x6269;&#x5c55;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x7136;&#x540e;&#x5e26;&#x5165;&#x5b9a;&#x4e49;&#x7c7b;&#x5230;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x5c31;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x3002",{"_index":5475,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x4e00;&#x4e2a;hax",{"_index":1009,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x4e00;&#x4e2a;return&#x8868;&#x8fbe;&#x5f0f;&#x53ef;&#x4ee5;&#x8fd4;&#x56de;&#x4e5f;&#x53ef;&#x4ee5;&#x4e0d;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x503c;&#x8868;&#x8fbe;&#x5f0f;&#xff1a",{"_index":4989,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["x4e00;&#x4e2a;t&#x7c7b;&#x578b;&#x540d;&#x4e3a",{"_index":4539,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x4e00;&#x4e9b;&#x5e38;&#x89c1;&#x7684;&#x9519;&#x8bef;&#xff0c;&#x4f8b;&#x5982;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x62fc;&#x5199;&#x9519;&#x8bef;&#xff0c;&#x5c06;&#x4e0d;&#x80fd;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x88ab;&#x53d1;&#x73b0;&#xff0c;&#x53ef;&#x80fd;&#x4f1a;&#x5f15;&#x53d1;&#x8fd0;&#x884c;&#x65f6;&#x7684;&#x9519;&#x8bef;&#x3002",{"_index":3140,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x4e00;&#x4e9b;&#x6784;&#x9020;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x5b9a;&#x5236;&#x7684;&#x5143;&#x6570;&#x636e;&#x5c5e;&#x6027;&#x5316;&#xff1a",{"_index":5811,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x4e00;&#x4e9b;&#x6a21;&#x5f0f;&#x5339;&#x914d;&#x5668;&#x57fa;&#x7840;&#x5305;&#x62ec",{"_index":5508,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["x4e00;&#x4e9b;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x5982;python&#x6216;&#x8005;javascript&#x53ef;&#x80fd;&#x9700;&#x8981;&#x4ea7;&#x751f;&#x9644;&#x52a0;&#x7684",{"_index":5408,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x4e00;&#x5143;&#x64cd;&#x4f5c;&#x7b26",{"_index":5135,"title":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{}},"body":{}}],["x4e00;&#x6837;&#x3002;&#x5173;&#x4e8e;&#x4f7f;&#x7528",{"_index":2889,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x4e00;&#x6837;&#x4f7f;&#x7528;&#xff0c;&#x901a;&#x8fc7;&#x6dfb;&#x52a0;&#x5b83;&#x5230;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#xff0c;&#x5e76;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x5b8f;&#x8c03;&#x7528;&#x4f5c;&#x4e3a;&#x53c2;&#x6570;&#xff1a",{"_index":6541,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x4e00;&#x79cd;&#x4e0d;&#x540c;&#x7c7b;&#x578b;&#x7684;&#x9650;&#x5236;&#x6d89;&#x53ca;&#x4ee3;&#x7801;&#x7684;&#x53ef;&#x8bfb;&#x6027;&#x3002;&#x5982;&#x679c;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x8fc7;&#x5ea6;&#x4f7f;&#x7528;&#xff0c;&#x53ef;&#x80fd;&#x7531;&#x4e8e;&#x53ef;&#x89c1;&#x7c7b;&#x578b;&#x7684;&#x7f3a;&#x5931;&#x800c;&#x96be;&#x4e8e;&#x7406;&#x89e3;&#x7a0b;&#x5e8f;&#x7684;&#x90e8;&#x5206;&#x3002;&#x7279;&#x522b;&#x662f;&#x5728;&#x65b9;&#x6cd5;&#x7b7e;&#x540d;&#x3002;&#x5efa;&#x8bae;&#x5728;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x548c;&#x663e;&#x5f0f;&#x7c7b;&#x578b;&#x4e2d;&#x627e;&#x5230;&#x4e00;&#x4e2a;&#x597d;&#x7684;&#x5e73;&#x8861;&#x3002",{"_index":4090,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["x4e00;&#x79cd;&#x590d;&#x5408;&#x7c7b;&#x578b;&#xff0c;&#x5982;&#x679c;&#x5b83;&#x7684;&#x7ec4;&#x6210;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x4e3a;&#x7f3a;&#x5c11;&#x7279;&#x5b9a;&#x7ec4;&#x4ef6;&#xff0c;&#x5982;&#x5b83;&#x4eec;&#x662f;&#x53ea;&#x8bfb;&#xff0c;&#x4e0d;&#x5141;&#x8bb8;&#x5199;&#x65f6;&#xff0c;&#x5219;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x534f;&#x53d8;&#x7684;&#x3002",{"_index":3824,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x4e00;&#x7ecf;&#x521b;&#x5efa;&#xff0c;&#x5b83;&#x88ab;&#x8bbe;&#x7f6e;&#x4e3a",{"_index":2453,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5",{"_index":3928,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#xff08;3.5&#xff09",{"_index":3574,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["x4e00;&#x81f4;&#x6027;&#x9519;&#x8bef;&#x975e;&#x5e38;&#x5bb9;&#x6613;&#x88ab;&#x89e6;&#x53d1;&#xff1a",{"_index":3938,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4e00;&#x822c;&#x6784;&#x5efa;&#x5b8f;&#x6bcf;&#x4e2a;&#x7c7b;&#x578b;&#x5316;&#x8fd0;&#x884c;&#xff0c;&#x5df2;&#x7ecf;&#x975e;&#x5e38;&#x5f3a;&#x5927;&#x3002;&#x5728;&#x4e00;&#x4e9b;&#x60c5;&#x51b5;&#x4e0b;&#xff0c;&#x6bcf;&#x4e2a;&#x7c7b;&#x578b;&#x5316;&#x8fd0;&#x884c;&#x4e00;&#x4e2a;&#x6784;&#x5efa;&#x5b8f;&#x76f8;&#x53cd;&#x7528;&#x6cd5;&#xff0c;&#x5373;&#xff0c;&#x5f53;&#x5b83;&#x5b9e;&#x9645;&#x4e0a;&#x51fa;&#x73b0;&#x5728;&#x4ee3;&#x7801;&#x4e2d;&#x3002;&#x9664;&#x6b64;&#x4e4b;&#x5916;&#x8fd9;&#x5141;&#x8bb8;&#x5728;&#x5b8f;&#x4e2d;&#x8bbf;&#x95ee;&#x5177;&#x4f53;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x3002",{"_index":6539,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x4e00;&#x822c;&#x7684;&#x53c2;&#x6570",{"_index":720,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x4e00;&#x822c;&#x7c7b;&#x578b;&#x4fe1;&#x606f;&#xff1a",{"_index":6188,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x4e00;&#x822c;&#x8bed;&#x6cd5;&#x89c4;&#x5219;&#x5982;&#x4e0b;&#xff1a",{"_index":2989,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x4e00;&#x8d77;&#xff0c;&#x901a;&#x5e38;&#x662f;&#x5bf9",{"_index":3075,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x4e09;&#x5143;&#x64cd;&#x4f5c;&#x7b26",{"_index":5179,"title":{"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{}},"body":{}}],["x4e0a;&#x3002",{"_index":2711,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x4e0a;&#x4e0b;&#x6587;&#x3002",{"_index":6577,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x4e0a;&#x4e0b;&#x6587;api&#x88ab",{"_index":6308,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x4e0a;&#x7684;&#x4e00;&#x4e2a;&#x9879;&#x76ee;&#x3002",{"_index":1087,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{}}}],["x4e0a;&#x9762;&#x7684;&#x4ee3;&#x7801;&#x4f1a;&#x663e;&#x793a;&#x5148;&#x524d;&#x6211;&#x4eec;&#x4f7f;&#x7528",{"_index":6138,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{}}}],["x4e0a;&#x9762;&#x7684;&#x4ee3;&#x7801;&#x548c;&#x539f;&#x6765;&#x7684",{"_index":2777,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x4e0a;&#xff08;&#x56e0;&#x4e3a",{"_index":3386,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x4e0a;&#xff0c",{"_index":3388,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x4e0a;&#xff0c;&#x4e8e;&#x662f;&#x89e6;&#x53d1;&#x4e86;&#x8fd9;&#x4e2a;&#x5355;&#x5f62;&#x4e0",{"_index":4055,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x4e0b;&#x4e00;&#x4e2a;&#x4f8b;&#x5b50;&#x5c55;&#x793a;&#x4e86;&#x5c5e;&#x6027;&#x5e38;&#x7528;&#x7684;&#x8bbf;&#x95ee;&#x6807;&#x8bc6;&#x7b26;&#x7ec4;&#x5408;&#xff1a",{"_index":4340,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x4e0b;&#x4e00;&#x7ae0;&#x4e2d;&#xff0c;&#x6211;&#x4eec;&#x5c06;&#x63cf;&#x8ff0;&#x8fd9;&#x4e9b;&#x7c7b;&#x578b;&#x7ec4;&#x4e2d;&#x7684;&#x6bcf;&#x4e2a;&#x7c7b;&#x578b;&#xff0c;&#x4ee5;&#x53ca;&#x5b83;&#x4eec;&#x4e4b;&#x95f4;&#x5982;&#x4f55;&#x8054;&#x7cfb;&#x3002",{"_index":112,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x4e0b;&#x4e24;&#x884c;&#x4f7f;&#x7528;&#x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x6ce8;&#x610f",{"_index":6328,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["x4e0b;&#x5212;&#x7ebf",{"_index":5788,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x4e0b;&#x9762;&#x4e00;&#x884c;&#x4ece;&#x6f5c;&#x5728;&#x7c7b;&#x578b;int&#x66b4;&#x9732",{"_index":3328,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x4e0b;&#x9762;&#x662f;haxe&#x4e2d;&#x6570;&#x503c;&#x8fd0;&#x7b97;&#x7b26;&#x7684;&#x5217;&#x8868;&#xff0c;&#x6839;&#x636e;&#x4f18;&#x5148;&#x7ea7;&#x5206;&#x7ec4;&#xff1a",{"_index":2509,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#2-1-3-数值运算符":{}}}],["x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x4f20;&#x9012;&#x5b83;&#x672c;&#x8eab;&#x4f5c;&#x4e3a;&#x5b8f;&#x51fd;&#x6570;&#x4e0a;&#x4e0b;&#x6587;&#xff0c;&#x5e76;&#x4ece;&#x6a21;&#x677f;&#x6267;&#x884c",{"_index":2158,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x6f14;&#x793a;&#x4e86;&#x5185;&#x8054;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff1a",{"_index":5367,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x6f14;&#x793a;&#x4e86;&#x7b2c;&#x4e00;&#x79cd;&#x7528;&#x6cd5;&#xff1a",{"_index":2425,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x4e0b;&#x9762;&#x7684;&#x7a0b;&#x5e8f;&#x88ab;&#x7f16;&#x8bd1;&#x5e76;&#x8fd0;&#x884c;&#x540e;&#xff0c;&#x5c06;&#x6253;&#x5370",{"_index":1183,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x4e0b;&#x9762;&#x7684;&#x8868;&#x683c;&#x5c55;&#x793a;&#x4e86;&#x5141;&#x8bb8;&#x58f0;&#x660e;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x7684;&#x5730;&#x65b9;&#xff1a",{"_index":3681,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x4e0d;&#x4f1a;&#x88ab;&#x5f3a;&#x5236;&#x8ffd;&#x968f",{"_index":3469,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x4e0d;&#x4f7f;&#x7528;&#x4efb;&#x4f55;&#x6807;&#x8bb0;&#x7f16;&#x8bd1;&#x53ea;&#x4fdd;&#x7559",{"_index":5264,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x4e0d;&#x505a;&#x6df1;&#x5ea6;&#x7684;&#x5bf9;&#x6bd4;&#x4e5f;&#x53ef;&#x80fd;&#x662f;&#x4e00;&#x4e2a;&#x95ee;&#x9898;&#x3002;&#x89e3;&#x51b3;&#x8fd9;&#x4e9b;&#x95ee;&#x9898;&#x7684;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5;&#x662f;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x4f5c;&#x4e3a;&#x9884;&#x671f;&#x7684;&#x503c;&#xff0c;&#x5e76;&#x5bf9;&#x6bd4;&#x5b83;&#x548c;&#x4f7f;&#x7528",{"_index":1575,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["x4e0d;&#x5141;&#x8bb8",{"_index":2604,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x4e0d;&#x5141;&#x8bb8;&#x6df7;&#x5408;&#x7c7b;&#x578b;&#x7684;&#x6570;&#x7ec4;&#xff0c;&#x9664;&#x975e;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x88ab;&#x9650;&#x5f3a;&#x5236;&#x4e3a",{"_index":1622,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x4e0d;&#x533a;&#x5206;&#x5927;&#x5c0f;&#x5199;&#x5339;&#x914d",{"_index":1907,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x4e0d;&#x53ef;&#x80fd;&#x91cd;&#x8f7d;&#x58f0;&#x660e;&#x4e3a;&#x5185;&#x8054;&#xff08;&#x7b2c;4.4.2&#x8282;&#xff09;&#x7684;&#x5b57;&#x6bb5;&#x3002;&#x8fd9;&#x662f;&#x7531;&#x4e8e;&#x51b2;&#x7a81;&#x7684;&#x6982;&#x5ff5;&#xff1a;&#x5f53;&#x5185;&#x8054;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x901a;&#x8fc7;&#x66ff;&#x6362;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x4f53;&#x7684;&#x8c03;&#x7528;&#xff0c;&#x91cd;&#x8f7d;&#x5b57;&#x6bb5;&#x5fc5;&#x987b;&#x88ab;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x51b3;&#x5b9a;&#x3002",{"_index":4608,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["x4e0d;&#x540c;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x63a8;&#x65ad;&#x51fa;&#x4e00;&#x4e2a;&#x5c06;&#x679a;&#x4e3e;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":2848,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x4e0d;&#x5728;&#x8303;&#x56f4;&#x5185;&#x7684;&#x5b57;&#x7b26",{"_index":1894,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x4e0d;&#x5b89;&#x5168;&#x7684;&#x7c7b;&#x578b;&#x8f6c;&#x6362",{"_index":5104,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{}}}],["x4e0d;&#x5b89;&#x5168;&#x7684;&#x7c7b;&#x578b;&#x8f6c;&#x6362;&#x4e0d;&#x4f7f;&#x7528;&#x4efb;&#x4f55",{"_index":5090,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["x4e0d;&#x5b89;&#x5168;&#x8f6c;&#x6362;&#x51e0;&#x4e4e;&#x6ca1;&#x6709;&#x8fd0;&#x884c;&#x65f6;&#x7684;&#x5f00;&#x9500;&#x3002",{"_index":5101,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["x4e0d;&#x5e26;&#x503c;&#x8868;&#x8fbe;&#x5f0f;&#x4f7f;&#x7528;&#xff0c;&#x7c7b;&#x578b;&#x5de5;&#x5177;&#x786e;&#x4fdd;&#x51fd;&#x6570;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x4f1a;&#x8fd4;&#x56de;void",{"_index":4995,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["x4e0d;&#x6267;&#x884c;&#x4efb;&#x4f55",{"_index":965,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x4e0d;&#x628a",{"_index":6331,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff0c;&#x53bb;&#x5230",{"_index":3266,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x6709;&#x6548;&#x7684;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x7684;&#x503c;&#x65f6;&#xff0c;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x81ea;&#x5df1;&#x7684;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x3002;&#x8fd9;&#x5728",{"_index":2664,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4e0d;&#x786e;&#x4fdd;&#x53c2;&#x6570;&#x7c7b;&#x578b",{"_index":1517,"title":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#不确保参数类型":{}},"body":{}}],["x4e0d;&#x7b26;&#x5408;&#x5b9e;&#x73b0;&#x5176;&#x5b83;&#x63a5;&#x53e3;&#x7684;&#x9700;&#x6c42;&#x3002;&#x9884;&#x671f;&#x7684;&#x5b57;&#x6bb5;&#x4ecd;&#x7136;&#x5fc5;&#x987b;&#x88ab;&#x660e;&#x786e;&#x5b9e;&#x73b0;&#x3002;&#x5b9e;&#x73b0",{"_index":3118,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x4e0d;&#x7b49",{"_index":2526,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x4e0d;&#x80fd;&#x4f7f",{"_index":4202,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x4e0d;&#x80fd;&#x6355;&#x83b7;switch&#x7684;&#x503c;&#x5230;&#x4e00;&#x4e2a;&#x53d8;&#x91cf;&#xff0c;&#x5982",{"_index":5617,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["x4e0d;&#x80fd;&#x68c0;&#x6d4b;&#x4f7f;&#x7528;&#x5230;&#x7684;&#x5b57;&#x6bb5",{"_index":3144,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x4e0d;&#x80fd;&#x88ab;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a",{"_index":3801,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x4e0d;&#x8bba;&#x54ea;&#x4e2a;&#x8bb0;&#x6cd5;&#xff0c;&#x5f88;&#x660e;&#x663e;&#xff0c;&#x51fd;&#x6570",{"_index":3085,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x4e0d;&#x9700;&#x8981;&#x53c2;&#x6570",{"_index":2860,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x4e0e",{"_index":3602,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x4e0e;&#x5f53;&#x524d;&#x4e0a;&#x4e0b;&#x6587;&#x7684;&#x5bfc;&#x5165;&#x65e0;&#x5173;&#xff0c;&#x6240;&#x4ee5;&#x5fc5;&#x987b;&#x662f;&#x4e00;&#x4e2a;&#x5b8c;&#x6574;&#x7684;&#x70b9;&#x8def;&#x5f84;&#x8fdb;&#x884c;&#x8868;&#x793a;&#x3002",{"_index":5324,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x4e0e;&#x7c7b;&#x4e0d;&#x540c;&#xff0c;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5141;&#x8bb8;&#x5b9a;&#x4e49;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#x3002;&#x6709;&#x4e24;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#xff1a",{"_index":3228,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x4e0e;&#x7c7b;&#x578b",{"_index":3932,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4e0e;&#x96be;&#x61c2;&#x7684;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x76f8;&#x6bd4;&#xff0c;&#x6838;&#x5fc3;&#x7c7b;&#x578b;&#x62bd;&#x8c61;&#x6709;&#x4e0b;&#x9762;&#x7684;&#x5c5e;&#x6027;&#xff1a",{"_index":3460,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x4e13;&#x7528;&#x672f;&#x8bed;&#x3002;&#x6211;&#x4eec;&#x4e0d;&#x4f1a;&#x5b9a;&#x4e49;&#x6bcf;&#x4e2a;&#x65b0;&#x5f15;&#x5165;&#x7684;&#x6982;&#x5ff5;&#xff0c;&#x8b6c;&#x5982;&#x4ec0;&#x4e48;&#x662f;&#x7c7b;&#xff0c;&#x4ee5;&#x907f;&#x514d;&#x5f04;&#x4e71;&#x6587;&#x672c;&#x3002;&#x5b9a;&#x4e49;&#x770b;&#x8d77;&#x6765;&#x50cf;&#x8fd9;&#x6837;&#xff1a",{"_index":28,"title":{},"body":{"index.html#关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x4e14",{"_index":3966,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4e22;&#x5931;&#x4e86;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x4e0d;&#x5fc5;&#x88ab;&#x5b9a;&#x4e49;&#x5230;&#x5c5e;&#x6027;&#x81ea;&#x5df1;&#x7684;&#x7c7b;&#x5b9a;&#x4e49;&#x4e2d;&#xff0c;&#x53ea;&#x8981;&#x4e00;&#x4e2a;&#x7236;&#x7c7b;&#x4e2d;&#x5b9a;&#x4e49;&#x4e86;&#x5b83;&#xff1a",{"_index":4441,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["x4e24;&#x4e2a;&#x5bf9",{"_index":6324,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["x4e24;&#x79cd;&#x8f6c;&#x6362;&#x51fd;&#x6570;&#xff0c;&#x4f7f;&#x5f97;&#x8f93;&#x51fa;&#x5982;&#x4e0b;&#xff1a",{"_index":3261,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x4e25;&#x683c;&#x8bf4;&#xff0c;&#x4e00;&#x4e2a;&#x53d8;&#x91cf;&#x53ef;&#x4ee5;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x4e00;&#x4e2a;&#x5c5e;&#x6027;&#x5e26;&#x6709;&#x67d0;&#x4e2a;&#x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26;&#x3002;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;haxe&#x7f16;&#x8bd1;&#x5668;&#x5728;&#x5b83;&#x4eec;&#x7684;&#x7c7b;&#x578b;&#x89e3;&#x6790;&#x65f6;&#x5e76;&#x4e0d;&#x533a;&#x5206;&#x53d8;&#x91cf;&#x548c;&#x5c5e;&#x6027;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x4eec;&#x4ecd;&#x7136;&#x5728;&#x8bed;&#x6cd5;&#x5c42;&#x9762;&#x4e0a;&#x6709;&#x6240;&#x533a;&#x5206;&#x3002",{"_index":225,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{}}}],["x4e2d",{"_index":1925,"title":{},"body":{"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4e2d;&#x4e03;&#x79cd;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x548c;&#x5b83;&#x4eec;&#x4e4b;&#x95f4;&#x7684;&#x4ea4;&#x4e92;&#x3002;&#x5728",{"_index":1012,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x4e2d;&#x4e3a",{"_index":2677,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4e2d;&#x4f1a;&#x8be6;&#x7ec6;&#x89e3;&#x91ca;&#x76f8;&#x5173;&#x7684;&#x673a;&#x5236;&#x3002",{"_index":137,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x4e2d;&#x4f20;&#x7edf;&#x7684",{"_index":4866,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["x4e2d;&#x4f7f;&#x7528;&#xff0c;&#x4fdd;&#x5b58;&#x4e86;e1&#x96c6;&#x5408;&#x7684;&#x67d0;&#x4e2a;&#x4e2a;&#x4f53;&#x5143;&#x7d20;&#x3002",{"_index":4876,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["x4e2d;&#x5982;&#x679c",{"_index":2655,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4e2d;&#x5b83;&#x7684;&#x5b9a;&#x4e49;&#xff09;&#x3002;&#x6211;&#x4eec;&#x5c06;&#x5728",{"_index":2716,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x4e2d;&#x5b9a;&#x4e49;&#x5934",{"_index":1506,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["x4e2d;&#x5c06;&#x4f1a;&#x63a2;&#x7d22;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x7684;&#x8be6;&#x7ec6;&#x4fe1;&#x606f;&#xff0c;&#x8fd9;&#x91cc;&#x5feb;&#x901f;&#x9884;&#x89c8;&#x4e00;&#x4e0b;&#xff1a;&#x4f8b;&#x5b50;&#x4e2d;&#x51fd;&#x6570",{"_index":2601,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x4e2d;&#x5c06;&#x7ee7;&#x7eed;&#x5bf9;&#x7c7b;&#x578b;&#x7684;&#x8ba8;&#x8bba;&#xff0c;&#x5982",{"_index":1014,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x4e2d;&#x5e76;&#x4e0d;&#x662f;&#x5fc5;&#x987b;&#x7684;&#xff0c;&#x56e0;&#x4e3a;&#x7f16;&#x8bd1;&#x5668;&#x53ef;&#x4ee5;&#x63a8;&#x65ad;&#x7c7b;&#x578b;&#xff1a",{"_index":96,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x4e2d;&#x6211;&#x4eec;&#x4e86;&#x89e3;&#x5982;&#x4f55;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x8868;&#x8fbe;&#x5f0f;&#x5b9e;&#x9645;&#x4e0a;&#x4e0a;&#x7a0b;&#x5e8f;&#x505a;&#x4e9b;&#x4ec0;&#x4e48;&#x3002",{"_index":1021,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x4e2d;&#x6240;&#x4f7f;&#x7528;&#x7684;&#x8bed;&#x6cd5;&#x6765;&#x5b9a;&#x4e49;&#x7ed3;&#x6784;&#x7c7b;&#x578b;&#x3002;&#x4e0b;&#x9762;&#x7684",{"_index":2903,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x4e2d;&#x63a2;&#x7d22;&#x5b83;&#x7684;&#x7ec6;&#x8282;&#x3002;&#x73b0;&#x5728;&#xff0c;&#x8db3;&#x4ee5;&#x786e;&#x5b9a;&#x4e0a;&#x9762;&#x4ee3;&#x7801;&#x4e2d;&#x7684;&#x53d8;&#x91cf",{"_index":99,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x4e2d;&#x63cf;&#x8ff0;&#x7684",{"_index":3065,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x4e2d;&#x63cf;&#x8ff0;&#x7684;&#x7edf;&#x4e00;&#x3002",{"_index":134,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x4e2d;&#x663e;&#x5f0f;&#x5730;&#x5217;&#x51fa;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x7b2c;3.2&#x8282;&#xff09;&#xff0c;&#x901a;&#x8fc7;&#x9017;&#x53f7;&#x5206;&#x9694;&#x3002",{"_index":4838,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["x4e2d;&#x6709;&#x4e00;&#x4e2a;&#x7279;&#x6b8a;&#x7c7b;&#x578b;&#xff0c;&#x53ef;&#x4ee5;&#x517c;&#x5bb9;&#x6240;&#x6709;&#x7684;&#x7c7b;&#xff1a",{"_index":2807,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x4e2d;&#x6709;&#x8be6;&#x7ec6;&#x4ecb;&#x7ecd;&#x3002",{"_index":6613,"title":{},"body":{"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["x4e2d;&#x67e5;&#x627e;&#x3002;&#x5b83;&#x9644;&#x5e26;&#x4e00;&#x4e9b;&#x6709;&#x7528;&#x7684;&#x521d;&#x59cb;&#x5316;&#x5b8f;&#xff0c;&#x5728;&#x5b83;&#x7684",{"_index":6612,"title":{},"body":{"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["x4e2d;&#x6ca1;&#x6709;&#x53c2;&#x6570;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x4e00;&#x81f4;&#x3002;&#x6700;&#x540e;&#x7684",{"_index":2885,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x4e2d;&#x7684",{"_index":1570,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["x4e2d;&#x7684;&#x4e00;&#x4e9b;&#x65b9;&#x6cd5;&#x3002",{"_index":2814,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x4e2d;&#x7684;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x662f;&#x6ca1;&#x6709;&#x8fb9;&#x754c;&#x7684;&#xff0c;&#x5373;&#xff0c;&#x6570;&#x7ec4;&#x4fdd;&#x8bc1;&#x4e0d;&#x4f1a;&#x629b;&#x51fa;&#x5f02;&#x5e38;&#xff0c;&#x8fd9;&#x9700;&#x8981;&#x8fdb;&#x4e00;&#x6b65;&#x8ba8;&#x8bba;&#xff1a",{"_index":1614,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x4e2d;&#x7684;&#x662f;&#x5b57;&#x6bb5",{"_index":3531,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4e2d;&#x7684;&#x662f;&#x6f5c;&#x5728;&#x7684;&#x7c7b;&#x578b",{"_index":3529,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4e2d;&#x7684;&#x975e;&#x5e38;&#x76f8;&#x4f3c;&#xff0c;&#x552f;&#x4e00;&#x7684;&#x533a;&#x522b;&#x662f;&#x51fd;&#x6570;&#x7684;&#x53c2;&#x6570",{"_index":3047,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x4e2d;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#x5e76;&#x4e0d;&#x662f;&#x7c7b;&#x578b;&#x7684;&#x4e00;&#x90e8;&#x5206;&#xff0c;&#x800c;&#x4e14;&#x4e0d;&#x80fd;&#x5728;&#x8c03;&#x7528;&#x65f6;&#x66f4;&#x6539;&#x51fd;&#x6570;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#xff08;&#x610f;&#x6307;&#x53ea;&#x5e94;&#x7528;&#x4e8e;&#x5f53;&#x6b21;&#x8c03;&#x7528;&#xff0c;&#x800c;&#x4e0d;&#x4f1a;&#x6539;&#x53d8;&#x51fd;&#x6570;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#x5b9a;&#x4e49;&#x3002;&#x9664;&#x975e;&#x51fd;&#x6570;&#x662f",{"_index":3051,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x4e2d;&#x79fb;&#x9664;&#x4e86;&#x5b83;&#x3002",{"_index":3159,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x4e2d;&#x8ba8;&#x8bba;&#x7684;&#x95ee;&#x9898;&#x3002",{"_index":3037,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x4e2d;&#x8be6;&#x7ec6;&#x4ecb;&#x7ecd;&#x3002",{"_index":2789,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x4e2d;&#x8ddf;&#x968f;&#x6784;&#x9020;&#x5668;&#x53c2;&#x6570;&#xff0c;&#x540c;&#x6837;&#x4f7f;&#x7528;&#x9017;&#x53f7;&#x5206;&#x9694;&#x3002",{"_index":4840,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["x4e2d;&#x901a;&#x8fc7",{"_index":2765,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x4e2d;&#x91cd;&#x65b0;&#x5ba1;&#x89c6",{"_index":2718,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x4e2d;&#x91cd;&#x7528",{"_index":6101,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x4e2d;&#x95f4;&#x7684;&#x662f;&#x7c7b;&#x7684;&#x5b57;&#x6bb5",{"_index":2800,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x4e2d;&#xff0c;&#x4e00;&#x4e2a",{"_index":6546,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x4e2d;&#xff0c;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x5e76;&#x4e0d;&#x662f",{"_index":2623,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x4e2d;&#xff0c;&#x5b9e;&#x73b0;&#x4e0d;&#x53ef;&#x7528;&#x3002",{"_index":1833,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["x4e2d;&#xff0c;&#x6211;&#x4eec;&#x5c06;&#x8ba8;&#x8bba;&#x8fd9;&#x4e2a;&#x4e3b;&#x9898;&#x3002",{"_index":1044,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x4e2d;&#xff0c;argu",{"_index":2644,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x4e3a",{"_index":1567,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["x4e3a;&#x4e86;&#x4f7f;&#x7528",{"_index":1424,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接":{}}}],["x4e3a;&#x4e86;&#x80fd;&#x4e0",{"_index":2973,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x4e3a;&#x4e86;&#x907f;&#x514d;&#x8fd9;&#x79cd;&#x5197;&#x4f59;&#x7684;&#x7c7b;&#x578b;&#x58f0;&#x660e;&#x5f62;&#x5f0f;&#xff0c;&#x5c24;&#x5176;&#x662f;&#x5bf9;&#x4e8e;&#x66f4;&#x590d;&#x6742;&#x7684;&#x7ed3;&#x6784;&#xff0c;&#x5efa;&#x8bae;&#x4f7f;&#x7528;&#x4e00;&#x4e2a",{"_index":3018,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x4e3a;&#x4ec0;&#x4e48;&#x4f7f;&#x7528;tools.hx",{"_index":6464,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x4e3a;&#x4ee3;&#x7801;&#x4f18;&#x5316;&#x5f15;&#x5165;&#x4e86;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x9759;&#x6001;&#x5206;&#x6790;&#x4eea;&#x3002;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":6267,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x4e3a;&#x5185;&#x90e8;&#x7684;&#x8c03;&#x8bd5;&#x8f6c;&#x50a8;&#x5b8c;&#x5168;&#x7c7b;&#x578b;&#x5316;&#x7684",{"_index":968,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x4e3a;&#x6807;&#x8bc6;&#x7b26",{"_index":5587,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["x4e3a;&#x7a7a;&#x6027;&#xff08;&#x7b2c;2.2&#x8282;&#xff09",{"_index":3036,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x4e3a;fdb&#x4ea4;&#x4e92;&#x8c03;&#x8bd5;&#x542f;&#x7528;&#x5b8c;&#x6574;&#x7684;flash&#x8c03;&#x8bd5;&#x4fe1;&#x606f",{"_index":974,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x4e3b;&#x8981;&#x7528;&#x9014",{"_index":1007,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x4e4b;&#x4e0a;&#x800c;&#x4e0d;&#x662f;&#x7c7b;&#x4e0a;&#xff1a",{"_index":5332,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x4e4b;&#x524d",{"_index":2748,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x4e4b;&#x524d;&#x7684;&#x7248;&#x672c;&#x4e0d;&#x540c;&#x3002",{"_index":3371,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x4e4b;&#x524d;&#x8bb2;&#x8ff0;&#x57fa;&#x7840;&#x7684",{"_index":1030,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x4e4b;&#x524d;&#x975e;&#x5e38;&#x9891;&#x7e41;&#x7684;&#x4f7f;&#x7528;&#x5728;&#x6807;&#x51c6;&#x5e93;&#x4e2d;&#x3002;&#x968f;&#x7740",{"_index":3181,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x4e4b;&#x540e;&#x3002;&#x53d8;&#x91cf;&#x4e5f;&#x53ef;&#x4ee5;&#x6709;&#x4e00;&#x4e2a;&#x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x6807;&#x8bb0;&#x3002",{"_index":4785,"title":{},"body":{"5.表达式/5.10.var/5.10.var.html#5-10-var":{}}}],["x4e4b;&#x540e;&#x4ee3;&#x7801;&#x6210;&#x4e3a;&#x8fd9;&#x6837;&#xff1a",{"_index":3310,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x4e4b;&#x540e;&#x7684;&#x6761;&#x4ef6;&#x548c",{"_index":5267,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x4e4b;&#x540e;&#x89e6;&#x53d1;&#xff0c;&#x6765;&#x663e;&#x793a;&#x5f53;&#x524d;&#x88ab;&#x8c03;&#x7528;&#x7684;&#x51fd;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x5b83;&#x53ef;&#x4ee5;&#x7528;&#x4e8e;&#x4efb;&#x4f55;&#x51fd;&#x6570;&#x8c03;&#x7528;&#x4ee5;&#x53ca;&#x6784;&#x9020;&#x51fd;&#x6570;&#x8c03;&#x7528;&#xff1a",{"_index":5952,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["x4e4b;&#x540e;&#x8d4b;&#x503c;&#x5230;&#x53d8;&#x91cf;&#x3002;&#x8fd9;&#x4f7f",{"_index":5094,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["x4e4b;&#x540e;&#xff0c;&#x662f;&#x4efb;&#x610f;&#x7684;&#x5faa;&#x73af;&#x4f53;&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":4871,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["x4e4b;&#x5916;&#x5e76;&#x4e0d;&#x9700;&#x8981;&#x77e5;&#x9053;&#x8be5;&#x53c2;&#x6570;&#x7684;&#x5177;&#x4f53;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x4f7f;&#x5f97;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f20;&#x9012;&#x4e00;&#x4e2a;&#x53ef;&#x88ab;&#x7edf;&#x4e00;&#x4e3a",{"_index":3848,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x4e4b;&#x7236",{"_index":1069,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["x4e4b;&#x95f4;&#x7684;&#x4e00;&#x4e2a;&#x81f4;&#x547d;&#x53d8;&#x66f4;&#x3002",{"_index":2753,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x4e4b;&#x95f4;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5",{"_index":4056,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x4e4b;&#x95f4;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x662f;&#x4e00;&#x4e2a;&#x5b9a;&#x5411;&#x8fc7;&#x7a0b;&#xff0c;&#x5b83;&#x4f1a;&#x56de;&#x7b54;&#x4e00;&#x4e2a;&#x95ee;&#x9898;&#xff1a;a",{"_index":3933,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4e4b;&#x95f4;&#x7684;&#x4e0d;&#x540c;&#x662f;&#xff0c;&#x7b2c;&#x4e8c;&#x4e2a;&#x51fd;&#x6570;&#x8fd4;&#x56de;&#x7684;&#x7b2c;&#x4e00;&#x4e2a;&#x5b50;&#x5143;&#x7d20;&#x4e3a;xml.el",{"_index":2379,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["x4e58;&#x6cd5",{"_index":2521,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x4e5f;&#x53ef;&#x4ee5;&#x4e8e;&#x6210;&#x5458;&#x5b57;&#x6bb5;&#x88ab;&#x8bbf;&#x95ee;&#x65f6;&#x7ed1;&#x5b9a",{"_index":3685,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x4e5f;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":3443,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x4e5f;&#x53ef;&#x4ee5;&#x5728;&#x5143;&#x6570;&#x636e;&#x5217;&#x8868;&#xff08;&#x7b2c;8.1&#x8282;&#xff09;&#x67e5;&#x770b;&#x3002",{"_index":5838,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x4e5f;&#x53ef;&#x4ee5;&#x66f4;&#x8fdb;&#x4e00;&#x6b65;&#x7684;&#x9650;&#x5236;&#x6a21;&#x5f0f;&#xff0c;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":5597,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["x4e5f;&#x53ef;&#x4ee5;&#x67e5;&#x770b;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#x5217;&#x8868;&#xff08;&#x7b2c;7.1&#x8282;&#xff09;&#x3002",{"_index":5288,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x4e8e;&#x5176;&#x5b83;&#x7c7b;&#x578b;&#x7528;&#x4ee5;&#x8868;&#x793a",{"_index":2694,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4e5f;&#x662f;&#x7c7b;&#x4f3c;&#x7684;&#x3002;&#x6700;&#x540e;&#x4e00;&#x884c;&#x8bc1;&#x660e;&#x6240;&#x6709;&#x4e09;&#x4e2a;&#x7d22;&#x5f15;&#x771f;&#x5b9e;&#x7684;&#x6620;&#x5c04;&#x5230;&#x503c",{"_index":5785,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x4e5f;&#x662f;&#xff09;&#x3002",{"_index":5619,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["x4e5f;&#x6709;&#x4e00;&#x4e9b;&#x60c5;&#x51b5;&#x9012;&#x5f52;&#x8c03;&#x7528;&#xff0c;&#x5f53;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x6709;&#x9650;&#x5236;&#x7684;&#x65f6;&#x5019;&#x3002;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x9012;&#x5f52;&#x8c03;&#x7528;&#x5b83;&#x81ea;&#x8eab;&#xff0c;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x8fd8;&#x4e0d;&#xff08;&#x5b8c;&#x5168;&#xff09;&#x4e0d;&#x77e5;&#x9053;&#xff0c;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x53ef;&#x80fd;&#x63a8;&#x65ad;&#x4e00;&#x4e2a;&#x9519;&#x8bef;&#xff0c;&#x592a;&#x8be6;&#x7ec6;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":4089,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["x4e5f;&#x8981;&#x6ce8;&#x610f;&#xff0c;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x9875;&#x9762;&#x4e0d;&#x80fd;&#x88ab;&#x4ece;&#x6587;&#x4ef6;&#x7cfb;&#x7edf;&#x76f4;&#x63a5;&#x63d0;&#x4f9b;&#x670d;&#x52a1;&#xff1a",{"_index":1511,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["x4e5f;&#x901a;&#x5e38;&#x88ab;&#x79f0;&#x4e3a;&#x4e00;&#x4e2a;&#x5173;&#x8054;&#x6570;&#x7ec4;&#x3001;&#x5b57;&#x5178;&#x6216;&#x8005;&#x7b26;&#x53f7;&#x8868;&#x3002;&#x4e0b;&#x9762;&#x7684;&#x4ee3;&#x7801;&#x662f;&#x8981;&#x7ed9;&#x7b80;&#x77ed;&#x7684;&#x4f7f;&#x7528;map&#x7684;&#x793a;&#x4f8b;&#xff1a",{"_index":1717,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["x4e86;&#x89e3;&#x6240;&#x6709;&#x53ef;&#x7528;&#x7684;&#x51fd;&#x6570;&#x3002",{"_index":1965,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x4e86;&#x89e3;&#x66f4;&#x591a;&#x5173;&#x4e8e;&#x5b83;&#x7684;&#x65b9;&#x6cd5;&#x7684;&#x4ecb;&#x7ecd;&#x3002",{"_index":1273,"title":{},"body":{"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{}}}],["x4e86;&#x89e3;&#x66f4;&#x591a;&#x8fd9;&#x4e2a;&#x8bdd;&#x9898;&#x7684;&#x4fe1;&#x606f;&#x3002",{"_index":1510,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["x4e86;&#x89e3;&#x8fd9;&#x4e2a;&#x5b8f;&#x7684;&#x8be6;&#x60c5;&#x3002;&#x5b83;&#x4f1a;&#x6807;&#x8bb0;&#x5305;&#x3001;&#x6a21;&#x5757;&#x6216;&#x8005;&#x5b50;&#x7c7b;&#x578b;&#x88ab;dce&#x4fdd;&#x7559;&#xff0c;&#x5305;&#x542b;&#x5b83;&#x4eec;&#x8fdb;&#x884c;&#x7f16;&#x8bd1;&#x3002",{"_index":5870,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x4e8b;&#x5b9e;&#x4e0a;&#x7684;&#x6807;&#x51c6;&#xff0c;&#x514d;&#x9664;&#x4e86;&#x9017;&#x53f7;&#x3002;&#x8fd9;&#x4e2a;&#x662f",{"_index":2752,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x4e8c;&#x5143;&#x64cd;&#x4f5c;&#x7b26",{"_index":5168,"title":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}},"body":{}}],["x4e8c;&#x5143;&#x8fd0;&#x7b97;&#x548c;&#x4e00;&#x5143;&#x8fd0;&#x7b97;&#x7b26;&#x91cd;&#x8f7d;&#x90fd;&#x53ef;&#x4ee5;&#x8fd4;&#x56de;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x3002",{"_index":3324,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x4ea7;&#x751f;&#x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x547d;&#x540d;&#x4e3a",{"_index":4307,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x4ec0;&#x4e48;&#x5e94;&#x8be5;&#x88ab;&#x7f16;&#x8bd1;&#xff1f",{"_index":707,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x4ecb;&#x7ecd",{"_index":5708,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x4ecb;&#x7ecd;&#x4e86",{"_index":1011,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x4ecd;&#x7136;&#x662f",{"_index":3810,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x4ece",{"_index":2944,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["x4ece;&#x4e0a;&#x81f3;&#x4e0b;&#x7684;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6.1&#x8282;&#xff09;&#x7528;&#x4e8e;&#x7c7b;&#x578b;&#x5316",{"_index":5114,"title":{},"body":{"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["x4ece;&#x4e0d;&#x7f8e;&#x89c2;&#x7684;dumps&#x79fb;&#x9664;&#x53d8;&#x91cf;&#x7684;ids&#xff08;&#x6709;&#x52a9;&#x4e8e;diff&#xff09",{"_index":973,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x4ece;&#x547d;&#x4ee4;&#x884c;&#x83b7;&#x53d6;&#x3002",{"_index":5837,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x4ece;&#x5916;&#x90e8;&#x5199;&#x5165;&#xff0c;&#x53ea;&#x5728;main&#x4e2d;&#x8bfb;&#x53d6",{"_index":4342,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x4ece;&#x5916;&#x90e8;&#x53ef;&#x8bfb;&#x53d6;&#xff0c;&#x53ea;&#x5728;main&#x4e2d;&#x5199;&#x5165",{"_index":4341,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x4ece;&#x7ed9;&#x5b9a;&#x5b57;&#x7b26;&#x4e32;&#x6570;&#x7ec4;&#x751f;&#x6210;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":6383,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x4ece;&#x7ed9;&#x5b9a;&#x5b57;&#x7b26;&#x4e32;&#x751f;&#x6210;&#x4e00;&#x4e2a;&#x6807;&#x8bc6;&#x7b26;&#x3002",{"_index":6382,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x4ece;&#x7ed9;&#x5b9a;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x6570;&#x7ec4;&#x751f;&#x6210;&#x4e00;&#x4e2a;&#x5757;&#x7ea7;&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":6381,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x4ece;&#x8bed;&#x4e49;&#x4e0a;&#x770b;&#xff0c;&#x8fd9;&#x4e2a",{"_index":2854,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x4ece;&#x8bed;&#x4e49;&#x4e0a;&#x8bb2;&#xff0c;&#x8fd9;&#x4e2a;&#x7c7b;&#x8868;&#x793a;&#x4e8c;&#x7ef4;&#x7a7a;&#x95f4;&#x5185;&#x7684;&#x4e00;&#x4e2a;&#x70b9;&#xff0c;&#x4f46;&#x662f;&#x8fd9;&#x91cc;&#x5b83;&#x662f;&#x4ec0;&#x4e48;&#x5e76;&#x4e0d;&#x91cd;&#x8981;&#x3002;&#x6211;&#x4eec;&#x6765;&#x63cf;&#x8ff0;&#x4e00;&#x4e0b;&#x8fd9;&#x4e2a;&#x7ed3;&#x6784;&#xff1a",{"_index":2796,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x4ece;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x5f97;&#x51fa;&#x4ee5;&#x4e0b;&#x51e0;&#x70b9",{"_index":3525,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4ece;&#x8fd9;&#x91cc;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4e86;&#x89e3;&#x5230;&#x5173;&#x4e8e;&#x53d8;&#x91cf;&#x7684;&#x51e0;&#x70b9;&#xff1a",{"_index":4365,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["x4ece;hax",{"_index":939,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["x4ece;haxe3.2.0&#x540",{"_index":4212,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x4ee3;&#x7801;&#x600e;&#x6837;&#x88ab;&#x751f;&#x6210;&#xff0c;&#x5bf9;&#x4e8e;&#x8fd9;&#x4e9b;&#xff0c;&#x901a;&#x5e38;&#x4f1a;&#x663e;&#x793a",{"_index":1076,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x4ee3;&#x7801;&#x662f;&#x5982;&#x4f55;&#x88ab;&#x751f;&#x6210;&#x7684;&#xff0c;&#x5bf9;&#x4e8e;&#x8fd9;&#x4e9b;&#x5185;&#x5bb9;&#xff0c;&#x901a;&#x5e38;&#x4f1a;&#x4ee5",{"_index":26,"title":{},"body":{"index.html#关于本文档":{}}}],["x4ee3;&#x7801;&#x751f;&#x6210;&#xff0c;&#x5e76;&#x5df2;&#x7ecf;&#x6709;&#x4e00;&#x4e9b;&#x5b9a;&#x4e49;&#x4eca;&#x5929;&#x7684",{"_index":1145,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x4ee3;&#x7801;&#x7684;&#x8fde;&#x63a5;&#x3002;j",{"_index":1434,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x4ee3;&#x7801;&#xff0c;&#x4e3a;&#x539f;&#x751f;&#x6a21;&#x5757;&#x52a0;&#x8f7d;&#x4e00;&#x4e2a;extern",{"_index":5409,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x4ee3;&#x7801;&#xff1a",{"_index":3546,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4ee5;&#x4e0b;&#x7684;&#x4f8b;&#x5b50;&#x662f",{"_index":3843,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x4ee5;&#x540",{"_index":5349,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["x4ee5;&#x540e;&#xff1a",{"_index":5943,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["x4ee5;&#x6b63;&#x786e;&#x7684;&#x751f;&#x6210;&#x6587;&#x6863",{"_index":967,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x4ee5;&#x7c7b;&#x4f3c;&#x7684;&#x65b9;&#x5f0f;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x68c0;&#x6d4b;&#x4e0d;&#x4f1a;&#x5339;&#x914d;&#x8f93;&#x5165;&#x7684;&#x503c;&#x7684;&#x6a21;&#x5f0f;&#xff1a",{"_index":5520,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{}}}],["x4efb;&#x4f55;&#x51fd;&#x6570;&#x53ef;&#x4ee5;&#x5e94;&#x7528;&#x4e3a;&#x5c40;&#x90e8;&#x7684;&#xff0c;&#x63d0;&#x4f9b;&#x67d0;&#x4e9b;&#x53c2;&#x6570;&#x7684;&#x503c;&#xff0c;&#x7136;&#x540e;&#x4fdd;&#x7559;&#x5176;&#x5b83;&#x7684;&#x4f5c;&#x4e3a;&#x4e4b;&#x540e;&#x7684;&#x5b57;&#x6bb5;&#x3002",{"_index":557,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x4efb;&#x4f55;&#x5728;&#x7ed3;&#x6784;&#x4e0a;&#x548c;&#x8fd9;&#x4e9b;&#x7c7b;&#x578b;&#x5408;&#x4e00;&#xff08;&#x7b2c;3.5.2&#x8282;&#xff09;&#x7684;&#x7c7b;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":5740,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["x4efb;&#x4f55;&#x5b57;&#x7b26",{"_index":1888,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x4efb;&#x4f55;&#x6807;&#x8bc6;&#x7b26;&#x88ab;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#x66ff;&#x6362;&#x4e3a;&#x540c;&#x540d;&#x7684;&#x3002;&#x6ce8;&#x610f",{"_index":5269,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x4f18;&#x5148;&#x7ea7",{"_index":5175,"title":{"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{}},"body":{}}],["x4f1a;&#x5bfc;&#x81f4;&#x4e00;&#x4e2a;&#x8fd0;&#x884c;&#x65f6;&#x9519;&#x8bef;&#xff0c;&#x4f46;&#x662f;&#x5bf9",{"_index":2589,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x4f1a;&#x5c1d;&#x8bd5;&#x8f6c;&#x6362",{"_index":6626,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["x4f1a;&#x5f97;&#x5230",{"_index":3895,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x4f1a;&#x628a",{"_index":3977,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4f1a;&#x663e;&#x793a",{"_index":2139,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["x4f1a;&#x7edf;&#x4e00;&#x4e3a",{"_index":3955,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4f1a;&#x81ea;&#x6211;&#x5b9a;&#x4e49;&#x4e3a;private&#x3002",{"_index":4402,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x4f1a;&#x88ab;&#x751f;&#x6210;&#x4e3a",{"_index":4121,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x4f1a;&#x9020;&#x6210;&#x6df7;&#x6dc6;&#x3002",{"_index":5450,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x4f1a;&#x9996;&#x5148;&#x6267;&#x884c",{"_index":2577,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x4f3c;&#x4e4e;&#x4e0d;&#x5e38;&#x89c1;&#x8fd9;&#x91cc;&#x7684;&#x663e;&#x5f0f;&#x7c7b;&#x578b",{"_index":3736,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x4f46;&#x662f;&#x5f53;&#x6d89;&#x53ca;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;3.2&#xff09;&#x4ee5;&#x53ca;&#x51fd;&#x6570;&#x6240;&#x5904;&#x4f4d;&#x7f6e;&#x65f6;&#x6709;&#x4e9b;&#x4e0d;&#x540c;&#x3002;&#x5f53;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x5728;&#x58f0;&#x660e;&#x65f6;&#x6ca1;&#x6709;&#x88ab;&#x8d4b;&#x503c;&#x7ed9;&#x4efb;&#x4f55;&#x53d8;&#x91cf;&#xff0c;&#x6211;&#x4eec;&#x79f0;&#x5b83;&#x4e3a",{"_index":4805,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x4f46;&#x662f;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x8ba4;&#x4e3a",{"_index":4825,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x4f46;&#x662f;&#x8fd9;&#x6837;&#x53ef;&#x4ee5;&#xff0c",{"_index":4828,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x4f46;&#x662f;&#x9664;&#x975e;&#x4f5c;&#x4e3a;&#x67d0;&#x4e2a;&#x51fd;&#x6570;&#x53c2;&#x6570;&#xff0c;&#x5426;&#x5219;&#x5355;&#x72ec;&#x8fd9;&#x6837;&#x653e;&#x5728;&#x67d0;&#x4e2a;&#x8bed;&#x53e5;&#x5757;&#x4f1a;&#x62a5;&#x9519;&#x3002",{"_index":4820,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x4f4d;&#x4e0e",{"_index":2533,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x4f4d;&#x4e8e;&#x7c7b;&#x5b57;&#x6bb5",{"_index":4801,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x4f4d;&#x6216",{"_index":2534,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x4f4d;&#x6d6e;&#x70b9;&#x6570",{"_index":2492,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{}}}],["x4f4d;&#x7f6e",{"_index":3682,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x4f4d;&#x7f6e;&#x5b8c;&#x6210;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":6022,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["x4f4d;&#x7f6e;&#xff08;&#x7b2c;8.3.6&#x8282;&#xff09;&#xff1a;&#x62a5;&#x544a;&#x6307;&#x5b9a;&#x7c7b;&#x578b;&#x3001;&#x5b57;&#x6bb5;&#x6216;&#x53d8;&#x91cf;&#x88ab;&#x5b9a;&#x4e49;&#x7684;&#x4f4d;&#x7f6e;&#x3002;&#xff08;&#x6a21;&#x5f0f;&#xff1a;position&#xff09",{"_index":5904,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x4f4d;&#x8fd0;&#x7b97",{"_index":2531,"title":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}},"body":{}}],["x4f4d;&#x975e",{"_index":2532,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x4f53;&#x8868;&#x8fbe;&#x5f0f;&#x4ece;&#x4e0d;&#x5931;&#x8d25;&#xff0c;&#x6240;&#x4ee5",{"_index":4951,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x4f53;&#x8868;&#x8fbe;&#x5f0f;&#xff1a",{"_index":4950,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x4f5c;&#x4e3a",{"_index":3817,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x4f5c;&#x4e3a;&#x201c;&#x5b57;&#x6bb5;&#x201d;&#x7684;&#x4f2a;&#x7c7b;&#x578b;&#x3002;&#x81ea",{"_index":2849,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x503c;&#x3002;&#x5728;&#x52a8;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff0c;&#x8fd9;&#x6837;&#x505a;&#x6ca1;&#x6709;&#x5f71;&#x54cd;&#x3002",{"_index":2693,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x5916;&#x90e8;&#x7c7b;&#xff0c;&#x5b83;&#x4f1a;&#x548c;&#x7a7a;&#x7684;&#x7ed3;&#x6784",{"_index":3560,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x5f00;&#x59cb;&#xff0c",{"_index":129,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x9002;&#x7528;&#x7684;&#x5b57;&#x6bb5;&#x3002",{"_index":6332,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["x4f5c;&#x4e3a;&#x4e58;&#x6cd5",{"_index":3308,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x4f5c;&#x4e3a;&#x503c;&#xff0c;&#x8fd9;&#x662f;&#x5728",{"_index":3035,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x4f5c;&#x4e3a;&#x53c2;&#x6570;&#x5217;&#x8868;&#x4e2d;&#x6bcf;&#x4e2a;&#x53c2;&#x6570;&#x7684;&#x5206;&#x9694;&#x7b26;&#x53f7;&#xff0c;&#x7136;&#x540e;&#x8ddf;&#x4e00;&#x4e2a;&#x95ed;&#x53e3;&#x7684",{"_index":4580,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x4f5c;&#x4e3a;&#x6807;&#x8bc6;&#x7b26;&#x800c;&#x5305;&#x542b;&#x7684",{"_index":6139,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{}}}],["x4f5c;&#x4e3a;&#x7701;&#x7565;&#x7684;&#x53c2;&#x6570;&#x503c;&#xff0c;&#x751f;&#x6210;&#x7c7b;&#x4f3c;&#x4e8e;&#x8fd9;&#x6837;&#x7684;&#x4ee3;&#x7801;&#x5230;&#x51fd;&#x6570;&#x4e2d;&#xff1a",{"_index":3054,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x4f5c;&#x4e3a;&#x7b2c;&#x4e8c;&#x4e2a;&#x53c2;&#x6570;&#x3002;&#x4e0b;&#x5212;&#x7ebf;&#x7528;&#x6765;&#x8868;&#x793a;&#x8fd9;&#x4e2a;&#x53c2;&#x6570;&#x6ca1;&#x6709;&#x7ed1;&#x5b9a;&#xff0c;&#x901a;&#x8fc7;&#x5bf9;&#x6bd4;map.set",{"_index":5780,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x4f5c;&#x4e3a;&#x8c03;&#x7528",{"_index":5663,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x4f5c;&#x4e3a;&#x901f;&#x8bb0;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4e86;&#x89e3;&#x6269;&#x5c55;&#x7684;&#x8bb0;&#x6cd5;&#x53ef;&#x4ee5;&#x5e2e;&#x52a9;&#x6211;&#x4eec;&#x7406;&#x89e3",{"_index":4243,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x4f5c;&#x8005;&#x53ca;&#x8d21;&#x732e;&#x8005",{"_index":49,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{}}}],["x4f60;&#x53ef;&#x4ee5;&#x4e86;&#x89e3;&#x7f16;&#x8bd1;&#x5668;&#x82b1;&#x8d39;&#x7684;&#x7cbe;&#x786e;&#x65f6;&#x95f4;&#xff0c;&#x548c;&#x5982;&#x4f55;&#x4f7f;&#x7528;&#x5b8c;&#x6210;&#x670d;&#x52a1;&#x5f71;&#x54cd;&#x5b83;&#x4eec;&#xff0c;&#x901a;&#x8fc7;&#x6dfb;&#x52a0",{"_index":6102,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x4f7f",{"_index":4197,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x4f7f;&#x5b83;&#x4eec;&#x53ef;&#x7ed1;&#x5b9a;&#xff08;&#x91cd;&#x7ed1;&#x5b9a;&#xff09;&#xff1a",{"_index":4735,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["x4f7f;&#x7528",{"_index":522,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{},"10.标准库/10.6.模板/10.6.模板.html#全局":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x4f7f;&#x7528;&#x5217;&#x8868;&#x7684;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x4f8b;&#x5b50;&#xff1a",{"_index":1657,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["x4f7f;&#x7528;&#x522b;&#x540d;&#x5bfc;&#x5165",{"_index":4207,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x4f7f;&#x7528;&#x533f;&#x540d;&#x7ed3;&#x6784;&#xff0c;&#x5728;&#x7f16;&#x8bd1;&#x4e3a",{"_index":2931,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x4f7f;&#x7528;&#x590d;&#x6742;&#x5bf9;&#x8c61;&#xff0c;&#x53ef;&#x80fd;&#x96be;&#x4e8e;&#x751f;&#x6210;&#x9884;&#x671f;&#x7684;&#x503c;&#x6765;&#x6bd4;&#x8f83;&#x5b9e;&#x9645;&#x503c;&#x3002;assertequ",{"_index":1574,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["x4f7f;&#x7528;&#x5b83;&#x4eec;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":1606,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x4f7f;&#x7528;&#x5b8c;&#x6210",{"_index":6126,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["x4f7f;&#x7528;&#x5b8c;&#x6210;&#x901a;&#x8fc7",{"_index":6005,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["x4f7f;&#x7528;&#x6570;&#x7ec4;&#x58f0;&#x660e;&#x8bed;&#x6cd5;&#xff08;&#x7b2c;5.5&#x8282;&#xff09",{"_index":1607,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x4f7f;&#x7528;&#x6570;&#x7ec4;&#x63a8;&#x5bfc;&#xff08;&#x7b2c;6.6&#x8282;&#xff09",{"_index":1608,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x4f7f;&#x7528;&#x8fde;&#x63a5",{"_index":1457,"title":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}},"body":{}}],["x4f7f;&#x7528;&#x901a;&#x914d;&#x7b26;&#x5230;haxe.macro&#x7684;&#x5bfc;&#x5165;&#xff0c;&#x4f7f;&#x8fd9;&#x4e2a;&#x5305;&#x4e2d;&#x7684",{"_index":4200,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x4f7f;&#x7528;&#x9759;&#x6001;&#x7684;&#x5206;&#x6790;&#x4eea;&#x7528;&#x4e8e;&#x4f18;&#x5316;&#xff08;&#x5b9e;&#x9a8c;&#xff09",{"_index":948,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x4f7f;&#x7528;&#xff08;&#x7b2c;8.3.5&#x8282;&#xff09;&#xff1a;&#x5217;&#x51fa;&#x6240;&#x6709;&#x7f16;&#x8bd1;&#x7684;&#x6587;&#x4ef6;&#x4e2d;&#x6240;&#x6709;&#x6307;&#x5b9a;&#x7c7b;&#x578b;&#x3001;&#x5b57;&#x6bb5;&#x6216;&#x8005;&#x53d8;&#x91cf;&#x7684;&#x51fa;&#x73b0;&#x3002;&#xff08;&#x6a21;&#x5f0f;&#xff1a;usage&#xff09",{"_index":5903,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x4f7f;&#x7528;&#xff0c;&#x6240;&#x4ee5;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x629b;&#x51fa;&#x9519;&#x8bef;&#x63d0;&#x793a;&#xff1b;&#x6240;&#x4ee5;&#x5176;&#x5b9e;&#x8fd9;&#x79cd;&#x5199;&#x6cd5;&#x5e76;&#x4e0d;&#x80fd;&#x4f5c;&#x4e3a;&#x67d0;&#x4e2a;&#x53c2;&#x6570;&#x6765;&#x4f20;&#x9012",{"_index":4827,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x4f7f;&#x7528;c#&#x4e2d;&#x7684;serializ",{"_index":953,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x4f7f;&#x7528;dump",{"_index":970,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x4f7f;&#x7528;hax",{"_index":5676,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["x4f7f;&#x7528;haxe,&#x5f88;&#x5bb9;&#x6613;&#x5b9a;&#x4e49;&#x5b9a;&#x5236;&#x7684;&#x8fed;&#x4ee3;&#x5668;&#x548c;&#x53ef;&#x8fed;&#x4ee3;&#x6570;&#x636e;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x4e9b;&#x6982;&#x5ff5;&#x5206;&#x522b;&#x7531;&#x7c7b;&#x578b",{"_index":5738,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["x4f7f;&#x7528;u",{"_index":2245,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x4f7f;&#x7528;use",{"_index":5441,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x4f7f;&#x7528;using&#x7684;&#x95ee;&#x9898",{"_index":5444,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x4f7f;&#x7528;utf",{"_index":1915,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x4f8b;&#x5982;&#xff0c",{"_index":2138,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["x4f8b;&#x5982;&#xff0c;&#x4e0b;&#x9762;&#x7684;&#x589e;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x5339;&#x914d;&#x6709;&#x6548;&#x7684",{"_index":1901,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x4f8b;&#x5982;&#xff0c;&#x8868;&#x8fbe;&#x5f0f",{"_index":2576,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x4f8b;&#x5b50;&#x4e2d;&#x5df2;&#x7ecf;&#x89c1;&#x5230;&#x8fc7",{"_index":2600,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x4f8b;&#x5b50;&#x5c55;&#x793a;&#x4e86;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x5982;&#x4f55;&#x88ab;&#x4f7f;&#x7528;&#x5230;&#x4e24;&#x4e2a;&#x53c2;&#x6570;&#x548c;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x4e0a;&#x3002;&#x65b9;&#x6cd5",{"_index":4583,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x4f8b;&#x5b50;&#x5c55;&#x793a;&#x4e86;static&#x5b57;&#x6bb5;&#x7684;&#x53ef;&#x89c1;&#x6027;&#xff0c;&#x4f46;&#x662f;&#x6210;&#x5458;&#x5b57;&#x6bb5;&#x7684;&#x89c4;&#x5219;&#x662f;&#x7b49;&#x4ef7;&#x7684;&#x3002;&#x4e0b;&#x9762;&#x7684;&#x793a;&#x4f8b;&#x5c55;&#x793a;&#x4e86;&#x5f53;&#x7ee7;&#x627f;&#xff08;&#x7b2c;2.3.2&#x8282;&#xff09;&#x88ab;&#x4f7f;&#x7528;&#x65f6;&#x7684;&#x53ef;&#x89c1;&#x6027;&#x884c;&#x4e3a;&#x3002",{"_index":4638,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x4f8b;&#x5b50;&#x9996;&#x5148;&#x8f93;&#x51fa;member&#x7684;&#x521d;&#x59cb;&#x503c;&#xff0c;&#x7136;&#x540e;&#x5728;&#x8f93;&#x51fa;&#x65b0;&#x7684;&#x503c;&#x4e4b;&#x524d;&#x8bbe;&#x7f6e;&#x5b83;&#x4e3a",{"_index":4371,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["x4fa6;&#x6d4b;&#x522b;&#x540d;&#x5316;&#x5176;&#x5b83;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x7684;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x5e76;&#x76f8;&#x5e94;&#x7684;&#x8fdb;&#x884c;&#x66ff;&#x6362;&#x3002",{"_index":6281,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x4fa6;&#x6d4b;&#x5e76;&#x79fb;&#x9664;&#x65e0;&#x7528;&#x7684;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x3002",{"_index":6282,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x4fdd;&#x7559;swf&#x5e93;&#x7684;&#x521d;&#x59cb;&#x9636;&#x6bb5",{"_index":977,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x4fdd;&#x8bc1;&#x6df7;&#x5408;&#x7684;&#x5e03;&#x5c14;&#x8868;&#x8fbe;&#x5f0f;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x4ece;&#x5de6;&#x5230;&#x53f3;&#x88ab;&#x8bc4;&#x4f30;&#xff0c;&#x5e76;&#x4e14;&#x53ea;&#x8fdb;&#x884c;&#x9700;&#x8981;&#x7684;&#x8bc4;&#x4f30;&#x3002",{"_index":2575,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x4fee;&#x9970;&#x53ef;&#x9009;&#x5b57;&#x6bb5;&#xff1a",{"_index":2946,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x501f;&#x70b9;&#x5305;&#x542b;&#x5b57;&#x6bb5;&#x7684;&#x6587;&#x6863",{"_index":5942,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x501f;&#x70b9;&#x5305;&#x542b;&#x5b57;&#x6bb5;&#x7684;&#x7c7b;&#x578b",{"_index":5941,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x503c",{"_index":2233,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x503c;&#x3002",{"_index":2391,"title":{},"body":{"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}}}],["x503c;&#x3002;&#x5b83;&#x7684;&#x8bed;&#x6cd5;&#x6784;&#x6210;&#x5982;&#x4e0b;&#xff1a",{"_index":2856,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x503c;&#x3002;&#x8fd9;&#x5e94;&#x7528;&#x4e8",{"_index":2669,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x503c;&#x4e3a;&#x4e00;&#x4e2a",{"_index":3067,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x503c;&#x5230",{"_index":1320,"title":{},"body":{"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{}}}],["x503c;&#x53ef;&#x4ee5;&#x662f;&#x4efb;&#x4f55",{"_index":2996,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x503c;&#x5bf9;&#x7684;&#x5217;&#x8868;&#xff0c;&#x4ee5;g",{"_index":2237,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x503c;&#x5bf9;&#xff0c;&#x540e;&#x8ddf",{"_index":2253,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x503c;&#x5bf9;&#xff0c;&#x540e;&#x8ddf;g&#xff08;&#x4f8b;&#x5982;&#xff0c;cy5:pointy1:xzy1:yzg",{"_index":2271,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x503c;&#x5f97;&#x6ce8;&#x610f;&#x7684;&#x662f;&#xff0c;&#x4f7f;&#x7528;&#x533f;&#x540d;&#x7ed3;&#x6784;&#x4e0d;&#x4f1a;&#x7834;&#x574f;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x786e;&#x4fdd;&#x53ea;&#x80fd;&#x8bbf;&#x95ee;&#x53ef;&#x7528;&#x7684;&#x5b57;&#x6bb5;&#xff0c;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x5982;&#x4e0b;&#x7684;&#x7a0b;&#x5e8f;&#x4e0d;&#x4f1a;&#x7f16;&#x8bd1;&#xff1a",{"_index":3009,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x503c;&#x88ab;&#x9690;&#x85cf;&#x5728",{"_index":2697,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x503c;&#x8fdb;&#x884c;&#x5206;&#x652f;&#x3002;&#x524d;&#x4e09;&#x4e2a;&#x60c5;&#x51b5;&#x662f",{"_index":2883,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x503c;&#xff0c",{"_index":2244,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x503c;&#xff1a",{"_index":1308,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["x504f;&#x51fd;&#x6570;&#x5e94;&#x7528",{"_index":555,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x505a;&#x53cd;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x5730;&#x65b9;&#x7c7b;&#x578b;&#x5fc5;&#x987b;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x53ef;&#x4ee5;&#x83b7;&#x5f97;&#x7684;&#x3002;&#x5982;&#x679c;&#x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664;&#x88ab;&#x6fc0;&#x6d3b;&#xff0c;&#x53ea;&#x662f;&#x901a;&#x8fc7;&#x5e8f;&#x5217;&#x5316;&#x4f7f;&#x7528;&#x7684;&#x7c7b;&#x578b;&#x53ef;&#x80fd;&#x4f1a;&#x88ab;&#x5220;&#x9664;&#x3002",{"_index":2449,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x5076;&#x5c14;&#x5730;&#xff0c;&#x6211;&#x4eec;&#x4f1a;&#x6f14;&#x793a",{"_index":1075,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x5076;&#x5c14;&#x6211;&#x4eec;&#x4f1a;&#x6f14;&#x793a",{"_index":25,"title":{},"body":{"index.html#关于本文档":{}}}],["x50cf;&#x4e0b;&#x4e00;&#x8282;&#x63cf;&#x8ff0;&#x7684;&#x90a3;&#x6837;&#x5904;&#x7406;&#x3002",{"_index":2629,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x50cf;&#x5f02;&#x6b65;&#x7248;&#x672c;&#x4e00;&#x6837;&#x4f7f;&#x7528;&#xff0c;&#x4f46;&#x662f;&#x5728;&#x540c;&#x6b65;&#x6a21;&#x5f0f;&#x4e0b;&#x5de5;&#x4f5c;&#x3002",{"_index":1450,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x50cf;&#x5f80;&#x5e38;&#x4e00;&#x6837;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x67e5;&#x770b",{"_index":3441,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5141;&#x8bb8;&#x4e00;&#x4e2a;&#x5230;&#x672c;&#x5730;javascript",{"_index":1433,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x5141;&#x8bb8;&#x4ee5;&#x4e00;&#x4e2a;&#x4eba;&#x7c7b;&#x53ef;&#x8bfb;&#x7684;&#x65b9;&#x5f0f;&#x6253;&#x5370",{"_index":6452,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x5141;&#x8bb8;&#x4f20;&#x9012;&#x5e38;&#x91cf;&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5.2&#x8282;&#xff09;&#x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x3002;&#x8fd9;&#x53ef;&#x4ee5;&#x5728",{"_index":6553,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x5141;&#x8bb8;&#x4f7f;&#x7528;&#x5728",{"_index":2902,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x5141;&#x8bb8;&#x5206;&#x914d;&#x503c",{"_index":3255,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5141;&#x8bb8;&#x5206;&#x914d;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5230",{"_index":3257,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5141;&#x8bb8;&#x5230;&#x4e00;&#x4e2a",{"_index":1438,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x5141;&#x8bb8;&#x5728;flash",{"_index":1444,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x5141;&#x8bb8;&#x5728;xmlsocket&#x4e0a;&#x8fdb;&#x884c;&#x8fdc;&#x7a0b;&#x901a;&#x8baf;&#x3002",{"_index":1443,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x5141;&#x8bb8;&#x5b9e;&#x65f6;&#x548c;&#x4e00;&#x4e2a;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;xml",{"_index":1452,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x5141;&#x8bb8;&#x629b;&#x51fa;&#x548c;&#x6355;&#x6349;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x7684;&#x503c;&#xff0c;&#x5b83;&#x4e0d;&#x9650;&#x4e8e;&#x7ee7;&#x627f;&#x81ea;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7684;&#x5f02;&#x5e38;&#x6216;&#x8005;&#x9519;&#x8bef;&#x7c7b;&#x7684;&#x7c7b;&#x578b;&#x3002;catch&#x5757;&#x4ece;&#x4e0a;&#x81f3;&#x4e0b;&#x68c0;&#x67e5;&#xff0c;&#x7b2c;&#x4e00;&#x4e2a;&#x548c;&#x629b;&#x51fa;&#x7684;&#x503c;&#x7c7b;&#x578b;&#x517c;&#x5bb9;&#x7684;&#x88ab;&#x91c7;&#x7528;&#x3002",{"_index":4976,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["x5141;&#x8bb8;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x548c;&#x5176;&#x5b83;&#x7c7b;&#x578b;&#x4e4b;&#x95f4;&#x7684;&#x76f4;&#x63a5;&#x8f6c;&#x6362;&#x3002;&#x8fd9;&#x901a;&#x8fc7;&#x4ece;&#x6216;&#x8005;&#x5f80;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x6dfb;&#x52a0;&#x89c4;&#x5219;&#x6765;&#x5b9a;&#x4e49;&#xff0c;&#x800c;&#x4e14;&#x53ea;&#x5141;&#x8bb8;&#x7528;&#x4e8e;&#x548c;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7edf;&#x4e00;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":3230,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5141;&#x8bb8;&#x6dfb;&#x52a0",{"_index":3431,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5141;&#x8bb8;&#x7528;&#x4e8e;&#x65b9;&#x6cd5;&#x548c;&#x547d;&#x540d;&#x7684;&#x5c40;&#x90e8",{"_index":3688,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x5141;&#x8bb8;&#x7684",{"_index":2683,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5141;&#x8bb8;&#x7ed1;&#x5b9a;&#x51fd;&#x6570;&#x901a;&#x8fc7;&#x90e8;&#x5206;&#x53c2;&#x6570;&#x5e94;&#x7528;&#x3002;&#x6bcf;&#x4e2a;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x6709;&#x4e00;&#x4e2a;bind&#x5b57;&#x6bb5;&#xff0c;&#x53ef;&#x4ee5;&#x88ab;&#x8c03;&#x7528;&#xff0c;&#x4f20;&#x9012;&#x9700;&#x8981;&#x6570;&#x91cf;&#x7684;&#x53c2;&#x6570;&#x6765;&#x521b;&#x5efa;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x51fd;&#x6570;&#x3002;&#x4e0b;&#x9762;&#x5c55;&#x793a;&#xff1a",{"_index":5776,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x5141;&#x8bb8;&#x8bbf;&#x95ee;&#xff1a;&#x76ee;&#x6807;&#x53ef;&#x901a;&#x8fc7",{"_index":5314,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5141;&#x8bb8;&#x8fde;&#x63a5;&#x5230;&#x4e00;&#x4e2a;&#x6307;&#x5b9a;&#x7684;flash&#x5bf9;&#x8c61;&#x3002;hax",{"_index":1446,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x5141;&#x8bb8;&#x901a;&#x8fc7;&#x5206;&#x914d;&#x4e00;&#x4e2a;&#x5e38;&#x91cf;&#x503c;&#x6765;&#x4e3a;&#x53c2;&#x6570;&#x63d0;&#x4f9b;&#x9ed8;&#x8ba4;&#x503c;&#xff0c;&#xff1a",{"_index":3044,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x5141;&#x8bb8;&#x901a;&#x8fc7;&#x8c03;&#x7528;&#x7279;&#x522b;&#x7684;&#x8f6c;&#x6362;&#x51fd;&#x6570;&#x8fdb;&#x884c;&#x8f6c;&#x6362;&#x3002;&#x8fd9;&#x4e9b;&#x51fd;&#x6570;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":3232,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5141;&#x8bb8;&#xff08;&#x4e5f;&#x66f4;&#x613f;&#x610f;&#xff09;&#x8fd4;&#x56de;&#x4e00;&#x4e2a",{"_index":6549,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x5141;&#x8bb8;swf&#x88ab;monocle&#x5de5;&#x5177;&#x5b9e;&#x6d4b",{"_index":947,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x5143;&#x6570;&#x636e",{"_index":544,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["x5143;&#x6570;&#x636e;&#x3002",{"_index":3633,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x5143;&#x6570;&#x636e;&#x3002;&#x5982;&#x679c;&#x5b83;&#x53ea;&#x53ef;&#x4ee5;&#x4e3a",{"_index":3318,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5143;&#x6570;&#x636e;&#x5230;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x5b9a;&#x4e49;&#xff0c;&#x8fd9;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x6765;&#x5b9a;&#x4e49;&#x6709;&#x9650;&#x503c;&#x7684;&#x96c6;&#x5408;&#xff1a",{"_index":3408,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x5143;&#x6570;&#x636e;&#x5230;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff1a",{"_index":3432,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5143;&#x6570;&#x636e;&#x5230;&#x6240;&#x6709;&#x5b9e;&#x73b0;&#x7c7b;&#x548c;&#x6240;&#x6709;&#x6269;&#x5c55;&#x63a5;&#x53e3;&#x3002;&#x6ce8;&#x610f",{"_index":6514,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x5143;&#x6570;&#x636e;&#x5230;&#x7c7b;&#x5b57;&#x6bb5;&#xff0c;&#x5141;&#x8bb8;&#x4e00;&#x5143;&#x548c;&#x4e8c;&#x5143;&#x8fd0;&#x7b97;&#x7b26;&#x7684;&#x91cd;&#x8f7d;&#xff1a",{"_index":3303,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5143;&#x6570;&#x636e;&#x5230;&#x7c7b;&#x6765;&#x9632;&#x6b62;&#x591a;&#x6b21;&#x5904;&#x7406;&#xff0c;&#x5728;&#x7b2c;&#x4e8c;&#x6b21;&#x7684;&#x5b8f;&#x6267;&#x884c;&#x4e2d;&#x53ef;&#x4ee5;&#x88ab;&#x68c0;&#x67e5;&#xff1a",{"_index":6643,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["x5143;&#x6570;&#x636e;&#x53c2;&#x6570;&#x63a5;&#x53d7;&#x7684;&#x503c;&#x4e3a;&#xff1a",{"_index":5832,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x5143;&#x6570;&#x636e;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;haxe&#x7684;&#x5b8f;&#x8fdb;&#x884c",{"_index":5344,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5143;&#x6570;&#x636e;&#x5b9a;&#x4e49;&#x3002;&#x8fd9;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x8f6c;&#x6362;&#x5141;&#x8bb8;&#x7528;&#x4e8e;&#x6240;&#x6709;&#x7c7b;&#x578b;&#x3002",{"_index":3233,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5143;&#x6570;&#x636e;&#x5f52;&#x7ed3;&#x3002;&#x6839;&#x636e;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff0c;&#x8fd9;&#x53ef;&#x4ee5;&#x63d0;&#x5347;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x6027;&#x80fd;&#x3002;&#x67e5;&#x770b",{"_index":1742,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["x5143;&#x6570;&#x636e;&#x6709;&#x4e24;&#x4e2a;&#x53c2;&#x6570;&#xff0c;&#x5bf9;&#x5e94;&#x8981;&#x88ab;&#x8f6c;&#x53d1;&#x5230;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x540d;&#x3002;&#x5728;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c",{"_index":3436,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5143;&#x6570;&#x636e;&#x6765;&#x4fee;&#x9970;&#x53ef;&#x9009;&#x5b57;&#x6bb5",{"_index":2943,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x5143;&#x6570;&#x636e;&#x6ce8;&#x89e3;&#x7684;&#x6269;&#x5c55;&#x7684;&#x7c7b;&#x751f;&#x6210;&#x8fd0;&#x884c;&#x65f6;&#x7c7b;&#x578b;&#x4fe1;&#x606f;&#xff08;rtti&#xff09;&#x3002;&#x8fd9;&#x4e2a;&#x4fe1;&#x606f;&#x88ab;&#x5b58;&#x50a8;&#x4e3a;&#x4e00;&#x4e2a",{"_index":6249,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["x5143;&#x6570;&#x636e;&#x6ce8;&#x89e3;&#xff0c;&#x4ee5;&#x9632;&#x6b62;&#x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664;&#x5220;&#x9664;&#x5b83;&#x4eec;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x4eec;&#x5728;&#x4ee3;&#x7801;&#x4e2d;&#x4ece;&#x672a;&#x6070;&#x5f53;&#x7684;&#x5f15;&#x7528;&#x3002",{"_index":2471,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["x5143;&#x6570;&#x636e;&#x6ce8;&#x89e3;&#xff0c;&#x8c03;&#x7528;&#x7684;&#x5b8f;&#x6784;&#x5efa;&#x4e24;&#x4e2a;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":6496,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["x5143;&#x6570;&#x636e;&#x7684;&#x53c2;&#x6570;&#x3002;&#x4e00;&#x65e6;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x88ab;&#x9700;&#x8981;&#x7684;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x5c31;&#x505a;&#x4ee5;&#x4e0b;&#x4e8b;&#xff1a",{"_index":6594,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5143;&#x6570;&#x636e;&#x7684;&#x6ce8;&#x89e3;&#x3002",{"_index":3463,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5143;&#x6570;&#x636e;&#x7684;&#x9009;&#x62e9",{"_index":5337,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5143;&#x6570;&#x636e;&#x8bc6;&#x522b;&#xff0c;&#x800c;&#x4e14;&#x7f3a;&#x5931;&#x4e00;&#x4e2a;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7684;&#x58f0;&#x660e;&#x3002;&#x8fd9;&#x4e9b;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x4ecd;&#x7136;&#x53ef;&#x4ee5;&#x88ab;&#x7406;&#x89e3;&#x4e3a;&#x8868;&#x793a;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x4e0d;&#x8fc7;&#xff0c;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x662f",{"_index":3455,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5143;&#x6570;&#x636e;&#x8bed;&#x6cd5;&#x8db3;&#x591f;&#x7075;&#x6d3b;&#xff0c;&#x4e14;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x5b83;&#x6765;&#x5b9e;&#x73b0;&#x8fd9;&#x4e00;&#x9700;&#x8981;&#x3002",{"_index":5343,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5143;&#x6570;&#x636e;&#xff08;&#x7b2c;6.9&#x8282;&#xff09",{"_index":4414,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x5143;&#x6570;&#x636e;&#xff08;&#x7b2c;6.9&#x8282;&#xff09;&#x5b9a;&#x4e49;&#x3002;&#x5728;&#x6bcf;&#x6b21;&#x7c7b;&#x578b;&#x5316;&#x65f6;&#x6267;&#x884c;&#xff0c;&#x5728;&#x7c7b;&#x578b;&#x88ab;&#x8bbe;&#x7f6e;&#x4e4b;&#x540e;&#xff08;&#x5305;&#x62ec;&#x8ddf;&#x5176;&#x5b83;&#x7c7b;&#x578b;&#x7684;&#x5173;&#x7cfb;&#xff0c;&#x6bd4;&#x5982;&#x7c7b;&#x7684;&#x7ee7;&#x627f;&#xff09;&#xff0c;&#x4f46;&#x662f;&#x5728;&#x5b83;&#x7684;&#x5b57;&#x6bb5;&#x88ab;&#x7c7b;&#x578b;&#x5316;&#x4e4b;&#x524d;&#xff08;&#x67e5;&#x770b;&#x7c7b;&#x578b;&#x6784;&#x5efa;&#xff08;&#x7b2c;9.5&#x8282;&#xff09;&#xff09;&#x3002",{"_index":780,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x5143;&#x6570;&#x636e;&#xff08;&#x7b2c;6.9&#x8282;&#xff09;&#x5f52;&#x7c7b;&#x4e3a;&#x6cdb;&#x578b;&#x3002;&#x8fd9;&#x5bfc;&#x81f4;&#x7f16;&#x8bd1;&#x5668;&#x6bcf;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x548c;&#x7834;&#x635f;&#x7684;&#x540d;&#x5b57;&#x7684;&#x6df7;&#x5408;&#xff0c;&#x53d1;&#x5c04;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x7684;&#x7c7b;/&#x51fd;&#x6570;&#x3002",{"_index":3732,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x5143;&#x6570;&#x636e;&#xff08;&#x7b2c;6.9&#x8282;&#xff09;&#x7684;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x3002",{"_index":6575,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5143;&#x6570;&#x636e;&#xff08;&#x7b2c;6.9&#x8282;&#xff09;&#xff0c;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#x5185;&#x8054;&#x88ab;&#x7981;&#x6b62;&#x3002;&#x5982;&#x679c;&#x5979;&#x4e0d;&#x80fd;&#x88ab;&#x6267;&#x884c;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x53d1;&#x51fa;&#x4e00;&#x4e2a;&#x9519;&#x8bef;&#x3002",{"_index":4709,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x5143;&#x6570;&#x636e;&#xff08;6.9&#xff09;&#x63d0;&#x4f9b;&#x7ed9;&#x4e00;&#x4e2a;&#x7ed9;&#x5b9a;&#x7684;&#x7c7b;&#x6216;&#x5b57;&#x6bb5;&#x8fdb;&#x884c;&#x8bbf;&#x95ee;&#x3002",{"_index":5315,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5143;&#x6570;&#x636e;&#xff0c;&#x4e3a;&#x4e24;&#x4e2a;int&#x53c2;&#x6570;&#xff0c;1&#x548c;8",{"_index":5823,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x5143;&#x6570;&#x636e;&#xff0c;&#x5e26;&#x6709;&#x4e00;&#x4e2a;&#x5355;&#x72ec;&#x7684;string&#x53c2;&#x6570;&#x201c;nicolas&#x201d;&#xff0c;&#x8fd8;&#x6709;&#x4e00;&#x4e2a",{"_index":5820,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x5143;&#x6570;&#x636e;&#xff0c;&#x6784;&#x5efa;&#x5b8f;&#x5bf9;&#x4e8",{"_index":6641,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["x5143;&#x6570;&#x636e;&#xff0c;&#x6ca1;&#x6709;&#x53c2;&#x6570;&#x3002",{"_index":5821,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x5143;&#x6570;&#x636e;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x751f;&#x6210",{"_index":6512,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x5143;&#x7d20",{"_index":2381,"title":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{}},"body":{}}],["x5143;&#x7d20;&#x7684;&#x91cf;&#x662f;&#x56fa;&#x5b9a;&#x7684;&#xff0c;&#x6240;&#x4ee5;&#x4e0d;&#x63a5;&#x53d7;&#x4e0d;&#x540c;&#x957f;&#x5ea6;&#x7684;&#x6570;&#x7ec4",{"_index":5616,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["x5148;&#x5b9a;&#x4e49;&#x7684;&#x5b57;&#x6bb5;&#x6709;&#x4f18;&#x5148;&#x7ea7;&#xff0c;&#x5373;&#x4f7f;&#x5b83;&#x4eec;&#x9700;&#x8981;&#x4e00;&#x4e2a",{"_index":3372,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x5168;&#x5c40",{"_index":2161,"title":{"10.标准库/10.6.模板/10.6.模板.html#全局":{}},"body":{}}],["x5168;&#x5c40;&#x5143;&#x6570;&#x636e;&#xff1a",{"_index":6742,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["x5168;&#x5c40;&#x66ff;&#x6362;&#x6216;&#x8005;&#x5206;&#x5272;&#xff0c;&#x67e5;&#x770b;&#x540e;&#x9762",{"_index":1908,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x5168;&#x5c40;&#x914d;&#x7f6e;&#xff1a",{"_index":6270,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x5168;&#x5c40;&#xff0c;&#x7c7b;&#x578b",{"_index":6050,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["x5173;&#x4e8e;&#x5728;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5;&#x88ab;&#x8fdc;&#x7a0b;&#x8c03;&#x7528;&#x65f6;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x4f1a;&#x88ab;&#x9075;&#x5b88;&#xff0c;&#x6ca1;&#x6709;&#x4efb;&#x4f55;&#x79cd;&#x7c7b;&#x7684;&#x4fdd;&#x8bc1;&#x3002;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#x5373;&#x4f7f;&#x51fd;&#x6570;foo&#x7684;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x5316;&#x4e3a",{"_index":1518,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#不确保参数类型":{}}}],["x5173;&#x4e8e;&#x5bfc;&#x5165;&#x6709;&#x51e0;&#x4e2a;&#x65b9;&#x9762;&#x9700;&#x8981;&#x4e86;&#x89e3;&#xff1a",{"_index":4184,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5173;&#x4e8e;&#x672c;&#x6587;&#x6863",{"_index":10,"title":{"index.html#关于本文档":{}},"body":{"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{}}}],["x5173;&#x4e8e;&#x672f;&#x8bed;&#xff0c;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5;&#x662f;&#x4e00;&#x4e2a;&#xff08;&#x9759;&#x6001;&#x6216;&#x975e;&#x9759;&#x6001;&#xff09;&#x51fd;&#x6570;&#xff0c;&#x5c5e;&#x4e8e;&#x4e00;&#x4e2a;&#x7c7b;&#x3002;&#x5176;&#x4ed6;&#x7684;&#x51fd;&#x6570;&#xff0c;&#x4f8b;&#x5982;&#x8868;&#x8fbe;&#x5f0f;&#x4e2d;&#x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x51fd;&#x6570;&#xff08;&#x7b2c;5.11&#x8282;&#xff09;&#xff0c;&#x4e0d;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x65b9;&#x6cd5;&#x3002",{"_index":227,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{}}}],["x5173;&#x4e8e;&#x82b1;&#x7d6",{"_index":36,"title":{},"body":{"index.html#关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x5173;&#x952e;&#x5b57",{"_index":322,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["x5173;&#x952e;&#x5b57;&#x3002;&#x6548;&#x679c;&#x548c;&#x9650;&#x5236;&#x5c06;&#x5728",{"_index":2787,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x5173;&#x952e;&#x5b57;&#x4f5c;&#x4e3a;&#x53e6;&#x4e00;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x5982;&#x679c;&#x6761;&#x4ef6;&#x4e0d;&#x6ee1;&#x8db3;&#xff0c;&#x53ef;&#x4ee5;&#x6267;&#x884c;else&#x540e;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#xff1a",{"_index":4921,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x5173;&#x952e;&#x5b57;&#x5141;&#x8bb8;&#x51fd;&#x6570;&#x4f53;&#x88ab;&#x76f4;&#x63a5;&#x63d2;&#x5165;&#x5230;&#x5b83;&#x4eec;&#x8c03;&#x7528;&#x4f4d;&#x7f6e;&#x3002;&#x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x5f3a;&#x5927;&#x7684;&#x4f18;&#x5316;&#x5de5;&#x5177;&#xff0c;&#x4f46;&#x662f;&#x5e94;&#x8be5;&#x5ba1;&#x614e;&#x4f7f;&#x7528;&#xff0c;&#x5e76;&#x4e0d;&#x662f;&#x6240;&#x6709;&#x51fd;&#x6570;&#x90fd;&#x9002;&#x7528;inline&#x884c;&#x4e3a;&#x3002;&#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x6f14;&#x793a;&#x4e86;&#x57fa;&#x672c;&#x7684;&#x7528;&#x6cd5;&#xff1a",{"_index":4697,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x5173;&#x952e;&#x5b57;&#x5141;&#x8bb8;&#x58f0;&#x660e;&#x591a;&#x4e2a;&#x53d8;&#x91cf;&#xff0c;&#x901a;&#x8fc7;&#x9017;&#x53f7;&#x5206;&#x9694;&#x3002;&#x6bcf;&#x4e2a;&#x53d8;&#x91cf;&#x6709;&#x4e00;&#x4e2a;&#x6709;&#x6548;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#xff08;&#x7b2c;5&#x7ae0;&#xff09;&#xff0c;&#x53ef;&#x9009;&#x7684;&#x53ef;&#x4ee5;&#x6709;&#x4e00;&#x4e2a;&#x503c;&#x5206;&#x914d;&#xff0c;&#x8ddf;&#x5728;&#x8d4b;&#x503c;&#x64cd;&#x4f5c;&#x7b26",{"_index":4784,"title":{},"body":{"5.表达式/5.10.var/5.10.var.html#5-10-var":{}}}],["x5173;&#x952e;&#x5b57;&#x5b9a;&#x4e49;&#x9ed8;&#x8ba4;&#x884c;&#x4e3a;&#x3002;&#x6bcf;&#x4e2a;cas",{"_index":4948,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x5173;&#x952e;&#x5b57;&#x5b9e;&#x73b0;&#x591a;&#x4e2a;&#x63a5;&#x53e3;&#xff1a",{"_index":2743,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x5173;&#x952e;&#x5b57;&#x5f00;&#x59cb;&#xff0c;&#x540e;&#x8ddf;&#x4e00;&#x4e2a;&#x5f00;&#x53e3;&#x7684;&#x5706;&#x62ec;&#x53f7",{"_index":4890,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["x5173;&#x952e;&#x5b57;&#x5f00;&#x59cb;&#xff0c;&#x540e;&#x8ddf;&#x4e00;&#x4e2a;&#x6a21;&#x5f0f;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x8fd8;&#x6709;&#x4e00;&#x79cd",{"_index":4947,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x5173;&#x952e;&#x5b57;&#x5f00;&#x59cb;&#xff0c;&#x540e;&#x8ddf;&#x5faa;&#x73af;&#x4f53;&#x8868;&#x8fbe;&#x5f0f;&#x3002;&#x5176;&#x540e;&#x8ddf;whil",{"_index":4901,"title":{},"body":{"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{}}}],["x5173;&#x952e;&#x5b57;&#x5f00;&#x59cb;&#xff0c;&#x540e;&#x9762;&#x662f;&#x5f00;&#x5173;&#x7684;&#x4e3b;&#x9898;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x7136;&#x540e;&#x662f;&#x5927;&#x62ec;&#x53f7;&#x5185;&#x7684;cas",{"_index":4944,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x5173;&#x952e;&#x5b57;&#x6307;&#x793a;&#xff1a",{"_index":2766,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x5173;&#x952e;&#x5b57;&#x800c;&#x4e0d;&#x662f",{"_index":2730,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x5173;&#x952e;&#x5b57;&#x8868;&#x793a",{"_index":2737,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x5173;&#x952e;&#x5b57;&#x8868;&#x793a;&#x4e00;&#x4e2a;&#x7c7b;&#xff08;&#x7b2c;2.3&#x8282;&#xff09;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.8&#x8282;&#xff09;&#x88ab;&#x5b9e;&#x4f8b;&#x5316;&#x3002;&#x540e;&#x9762;&#x8ddf;&#x7740;&#x5c06;&#x8981;&#x88ab;&#x5b9e;&#x4f8b;&#x5316;&#x7684;&#x7c7b;&#x578b;&#x7684;&#x7c7b;&#x578b;&#x8def;&#x5f84;&#xff08;&#x7b2c;3.7&#x8282;&#xff09;&#x3002;&#x5b83;&#x4e5f;&#x53ef;&#x4ee5;&#x5728",{"_index":4837,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["x5173;&#x952e;&#x5b57;&#x8bc6;&#x522b;&#x3002;&#x6211;&#x4eec;&#x8fd8;&#x53ef;&#x4ee5;&#x4e86;&#x89e3;&#x5230;&#xff0c;&#x5b83;&#x4eec;&#xff1a",{"_index":4565,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x5173;&#x952e;&#x5b57;&#x9886;&#x5148;&#xff0c",{"_index":5398,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x5173;&#x952e;&#x5b57;&#xff0c;&#x4f7f;&#x7528;&#x9017;&#x53f7",{"_index":2750,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x5173;&#x952e;&#x5b57;&#xff0c;&#x7136;&#x540e;&#x662f;&#x4e00;&#x4e2a",{"_index":4902,"title":{},"body":{"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{}}}],["x5173;&#x952e;&#x5b57;&#xff1a",{"_index":2746,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x5176;&#x4e2d;&#x7684",{"_index":5318,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5176;&#x4f5c;&#x7528;&#x57df;&#x7b49;&#x540c;&#x4e8e",{"_index":4803,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x5176;&#x5b83;&#x6a21;&#x5757;&#x5b8c;&#x6210;&#xff1a;&#x8fd9;&#x5217;&#x51fa;&#x6a21;&#x5757;haxe.unseri",{"_index":5995,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["x5177;&#x6709",{"_index":4188,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x517c;&#x5bb9",{"_index":3603,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x517c;&#x5bb9;&#x7684;&#x540c;&#x65f6;&#x63d0;&#x4f9b;&#x4e00;&#x4e2a",{"_index":2975,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x517c;&#x5bb9;&#xff0c;&#x4e00;&#x4e2a;&#x7c7b;&#x5fc5;&#x987b;&#x80fd;&#x591f;&#x4e0",{"_index":2974,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x5185;&#x5efa;&#x7f16;&#x8bd1;&#x5668;&#x5143;&#x6570;&#x636",{"_index":749,"title":{},"body":{"8.编译器功能/8.编译器功能.html#8-编译器功能":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x5185;&#x5efa;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0",{"_index":5283,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x5185;&#x7684;&#x7ed3;&#x6784",{"_index":2991,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x5185;&#x7f6e;&#x652f;&#x6301",{"_index":1879,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x5185;&#x8054;&#x5e76;&#x4e0d;&#x4fdd;&#x8bc1;&#x6267;&#x884c;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x53ef;&#x80fd;&#x7531;&#x4e8e;&#x591a;&#x79cd;&#x539f;&#x56e0;&#x53d6;&#x6d88;&#x5185;&#x8054;&#xff0c;&#x7528;&#x6237;&#x4e5f;&#x53ef;&#x4ee5;&#x901a;&#x8fc7",{"_index":4705,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x5185;&#x8054;&#x8c03;&#x7528",{"_index":533,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x5185;&#x8054;&#x90e8;&#x5206;&#xff08;&#x7b2c;4.4.2&#x8282;&#xff09",{"_index":3550,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5185;&#x8054;&#xff08;&#x7b2c;4.4.2&#x8282;&#xff09",{"_index":3052,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x5185;&#x8054;&#xff08;&#x7b2c;4.4.2&#xff09;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x5728;&#x67d0;&#x4e9b;&#x60c5;&#x51b5;&#x4e0b;&#x4f1a;&#x5c1d;&#x8bd5;&#x4f18;&#x5316;&#x5b83;&#x3002;&#x6709;&#x4e0b;&#x9762;&#x51e0;&#x4e2a;&#x9700;&#x8981;&#xff1a",{"_index":5364,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["x5185;&#x90e8;&#x7ed3;&#x6784;&#x9884;&#x671f;&#x4e00;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x65f6;&#x3002;&#x4e0d;&#x5141;&#x8bb8",{"_index":6389,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x5185;&#xff0c;&#x5982;&#x679c;&#x6761;&#x4ef6;&#x7b26;&#x5408;&#xff0c;&#x8868;&#x8fbe;&#x5f0f;&#x5c06;&#x4f1a;&#x6267;&#x884c;&#xff1a",{"_index":4919,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x518d;&#x4e00;&#x6b21;&#xff0c;javascript&#x8f93;&#x51fa;&#x4f7f;&#x5176;&#x975e;&#x5e38;&#x660e;&#x663e;&#xff1a",{"_index":3743,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x5192;&#x53f7",{"_index":2994,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x51cf;&#x6cd5",{"_index":2520,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x51fa;&#x4e8e;&#x6027;&#x80fd;&#x539f;&#x56e0;&#xff0c;hax",{"_index":2553,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["x51fd;&#x6570",{"_index":2017,"title":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x51fd;&#x6570;&#x4e0d;&#x4e00;&#x5b9a;&#x6709;&#x540d;&#x5b57;&#xff0c;&#x4f46;&#x4e0d;&#x53ef;&#x4ee5;&#x5177;&#x6709;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":4810,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x51fd;&#x6570;&#x4e0d;&#x9700;&#x8981;&#x4efb;&#x4f55;&#x8868;&#x8fbe;&#x5f0f",{"_index":2731,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x51fd;&#x6570;&#x4e2d;&#x4e0d;&#x5408;&#x6cd5;&#x7684;&#x6807;&#x8bc6;&#x7b26",{"_index":4177,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x51fd;&#x6570;&#x4ee5;&#x540c;&#x6837;&#x7684;&#x65b9;&#x5f0f;&#x8c03;&#x7528;&#x3002;&#x6240;&#x6709;lambda",{"_index":2024,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x51fd;&#x6570;&#x5185;&#x5b9a;&#x4e49",{"_index":2608,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x51fd;&#x6570;&#x53c2;&#x6570;&#x88ab;&#x7279;&#x6b8a;&#x7684;&#x7bad;&#x5934;&#x7b26;&#x53f7",{"_index":3081,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x51fd;&#x6570;&#x53ef;&#x4ee5;&#x5177;&#x6709;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":4821,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x51fd;&#x6570;&#x53ef;&#x4ee5;&#x88ab;&#x8bbe;&#x8ba1;&#x4e3a;&#x5185;&#x8054;&#xff0c;&#x4f7f;&#x5b83;&#x4eec;&#x7684;&#x4ee3;&#x7801;&#x76f4;&#x63a5;&#x63d2;&#x5165;&#x8c03;&#x7528;&#x7684;&#x4f4d;&#x7f6e;&#x3002;&#x901a;&#x8fc7;&#x624b;&#x52a8;&#x7684;&#x5185;&#x8054;&#x4e0d;&#x7528;&#x4f7f;&#x4ee3;&#x7801;&#x91cd;&#x590d;&#x8fd9;&#x53ef;&#x4ee5;&#x4ea7;&#x751f;&#x663e;&#x8457;&#x7684;&#x6548;&#x80fd;&#x63d0;&#x5347;&#x3002",{"_index":535,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x51fd;&#x6570;&#x53ef;&#x4ee5;&#x88ab;&#x8c03;&#x7528;&#x6765;&#x4ece;&#x6a21;&#x677f;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x53d6;&#x56de;&#x503c;&#x3002;&#x5982;&#x679c",{"_index":2156,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["x51fd;&#x6570;&#x540d",{"_index":6394,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x51fd;&#x6570;&#x58f0;&#x660e;&#x3002",{"_index":3466,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x51fd;&#x6570;&#x58f0;&#x660e;&#x3002;&#x5176;&#x8bed;&#x6cd5;&#x9075;&#x5faa;&#x7c7b;&#x5b57;&#x6bb5;&#x65b9;&#x6cd5;&#xff08;4.3&#xff09;&#x7684;&#x8bed;&#x6cd5;&#xff1a",{"_index":4799,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x51fd;&#x6570;&#x58f0;&#x660e;&#x4e5f;&#x652f;&#x6301",{"_index":4797,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x51fd;&#x6570;&#x5bf9;&#x4e00;&#x7ec4;&#x5b57;&#x7b26;&#x4e32;&#x7684;&#x64cd;&#x4f5c;&#xff1a",{"_index":2048,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x51fd;&#x6570;&#x64cd;&#x4f5c;&#x4e00;&#x7ec4;&#x6574;&#x6570;&#xff1a",{"_index":2057,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x51fd;&#x6570;&#x662f;&#x4e0d;&#x53ef;&#x4ea4;&#x6362;&#x7684;&#xff1a;&#x5f53",{"_index":3315,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x51fd;&#x6570;&#x663e;&#x7136;&#x662f",{"_index":3885,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x51fd;&#x6570;&#x7684",{"_index":3692,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x51fd;&#x6570;&#x7684;&#x65b9;&#x6cd5;&#x4f53;&#xff0c;&#x4f46;&#x662f;&#x53ea;&#x6709;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x5141;&#x8bb8;&#x6d89;&#x53ca;&#x7684;&#x64cd;&#x4f5c;&#xff0c;&#x5e76;&#x4e14;&#x7ed3;&#x679c;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x8d4b;&#x503c;&#x56de;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x65f6;&#x5019;&#x3002",{"_index":3327,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x51fd;&#x6570;&#x7684;&#x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x90fd;&#x662f;&#x8981;&#x64cd;&#x4f5c;&#x76ee;&#x6807;&#x7684",{"_index":2025,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b",{"_index":3958,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x5728;&#x51fd;&#x6570;&#x88ab;&#x8c03;&#x7528;&#x65f6;&#x89e6;&#x53d1;&#x7ed1;&#x5b9a;&#xff0c;&#x8fd9;&#x6837;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x5982;&#x679c;&#x65e0;&#x7ea6;&#x675f;&#xff09;&#x63a5;&#x53d7;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x3002;&#x4f46;&#x662f;&#xff0c;&#x6bcf;&#x6b21;&#x8c03;&#x7528;&#x53ea;&#x63a5;&#x53d7;&#x4e00;&#x79cd;&#x7c7b;&#x578b;&#x3002;&#x6bd4;&#x5982;&#x5f53;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x6709;&#x591a;&#x4e2a;&#x53c2;&#x6570;&#x65f6;&#xff1a",{"_index":3689,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.6&#x8282;&#xff09",{"_index":117,"title":{},"body":{"2.类型/2.类型.html#2-类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.6&#x8282;&#xff09;&#x4e2d;&#x63cf;&#x8ff0;&#x3002",{"_index":4582,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#xff08;2.6&#xff09",{"_index":4045,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#xff0c;&#x8fde;&#x540c",{"_index":3073,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#xff1a;&#x4e00;&#x4e2a;&#x7531;&#x4e00;&#x4e9b;&#x53c2;&#x6570;&#x548c;&#x4e00;&#x4e2a;&#x8fd4;&#x56de;&#x503c;&#x7ec4;&#x6210;&#x7684;&#x6df7;&#x5408;&#x7c7b;&#x578b",{"_index":107,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x51fd;&#x6570;&#x88ab;&#x6307;&#x5b9a;&#x4e3a;&#xff1a",{"_index":2022,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x51fd;&#x6570;&#x8c03;&#x7528",{"_index":3956,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x51fd;&#x6570;&#x8c03;&#x7528;&#x7531;&#x4e00;&#x4e2a;&#x4efb;&#x610f;&#x7684;&#x4e3b;&#x9898;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x540e;&#x8ddf;&#x8981;&#x7ed9;&#x5f00;&#x53e3;&#x7684;&#x5706;&#x62ec;&#x53f7;&#xff0c;&#x9017;&#x53f7;&#x5206;&#x9694;&#x8868;&#x8fbe;&#x5f0f;&#x4f5c;&#x4e3a;&#x53c2;&#x6570;&#xff0c;&#x4ee5;&#x95ed;&#x53e3;&#x7684;&#x5706;&#x62ec;&#x53f7;&#x7ed3;&#x675f;&#x3002",{"_index":5236,"title":{},"body":{"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{}}}],["x51fd;&#x6570;&#x8fd4;&#x56de",{"_index":3961,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x51fd;&#x6570;&#x8fd4;&#x56de;&#x503c;&#x7684;&#x7c7b;&#x578b;&#x76f8;&#x540c;&#xff0c;&#x5373;&#xff0c;&#x4e00;&#x4e2a",{"_index":3096,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x51fd;&#x6570;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x51fa;&#x73b0;&#x5728;&#x7ed3;&#x5c3e;&#x7684;&#x53e6;&#x4e00;&#x4e2a",{"_index":3083,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x51fd;&#x6570;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x53ef;&#x80fd;&#x6d89;&#x53ca",{"_index":3875,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x51fd;&#x6570;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x6ca1;&#x6709;&#x540d;&#x5b57;&#xff0c;&#x662f;&#x4e2a;&#x5b64;&#x513f",{"_index":4819,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x51fd;&#x6570;&#xff0c;&#x53cd;&#x4e4b;&#x79f0;&#x5176;&#x4e3a",{"_index":4807,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x51fd;&#x6570;&#xff0c;&#x5728;&#x8c03;&#x7528;&#x4e2d;&#x8bbe;&#x7f6e;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x7d22;&#x5f15;1&#x7684;&#x503c;&#x3002",{"_index":5791,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x51fd;&#x6570;&#xff0c;&#x5b83;&#x4eec;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x7f16;&#x8bd1;&#x3002;&#x4e0d;&#x8fc7;&#x4e5f;&#x6709;&#x65f6;&#x5019;&#x53ea;&#x6709;&#x6700;&#x5173;&#x952e;&#x7684;&#x90e8;&#x5206;&#x88ab;&#x5c55;&#x793a;&#x51fa;&#x6765;&#x3002;&#x6e90;&#x4ee3;&#x7801;&#x770b;&#x8d77;&#x6765;&#x5c31;&#x50cf;&#x8fd9;&#x6837;&#xff1a",{"_index":24,"title":{},"body":{"index.html#关于本文档":{}}}],["x51fd;&#x6570;&#xff0c;&#x5b83;&#x4eec;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x7f16;&#x8bd1;&#x3002;&#x7136;&#x800c;&#xff0c;&#x6709;&#x65f6;&#x5019;&#x53ea;&#x6709;&#x6700;&#x91cd;&#x8981;&#x7684;&#x90e8;&#x5206;&#x88ab;&#x5c55;&#x793a;&#x51fa;&#x6765;&#x3002;&#x6e90;&#x4ee3;&#x7801;&#x770b;&#x8d77;&#x6765;&#x5c31;&#x50cf;&#x8fd9;&#x6837;&#xff1a",{"_index":1074,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x5206;&#x522b;&#x4f5c;&#x4e3a;&#x7b2c;&#x4e00;&#x4e2a;&#x548c;&#x7b2c;&#x4e8c;&#x4e2a;&#x7c7b;&#x578b;&#x3002",{"_index":3322,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5206;&#x652f;&#x4e2d",{"_index":3910,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x5206;&#x6790;&#x5668;&#x3002",{"_index":2455,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x5206;&#x914d;&#xff0c;&#x5e76;&#x4e14;&#x53ef;&#x4ee5;&#x5206;&#x914d;&#x5230",{"_index":3238,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5206;&#x9694;&#x7684;&#x952e;&#x503c;&#x5bf9;&#x5217;&#x8868",{"_index":2993,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x5206;&#x9694;&#xff0c;&#x800c;&#x4e0d;&#x662f;&#x9017;&#x53f7",{"_index":3082,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x5217;&#x8868",{"_index":1753,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}}}],["x5217;&#x8868;&#x4e0d;&#x80fd;&#x88ab;&#x4f7f;&#x7528;&#x65b9;&#x62ec;&#x53f7;&#x7d22;&#x5f15;&#xff0c;&#x5373",{"_index":1652,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["x5217;&#x8868;&#x4e0d;&#x80fd;&#x88ab;&#x521d;&#x59cb;&#x5316;&#x3002",{"_index":1654,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["x5217;&#x8868;&#x5728;&#x8fed;&#x4ee3;&#x7684;&#x65f6;&#x5019;&#x53ef;&#x4ee5;&#x81ea;&#x7531;&#x4fee;&#x6539;&#x548c;&#x5220;&#x9664;&#x5143;&#x7d20;&#x3002",{"_index":1656,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["x5217;&#x8868;&#x662f;&#x4e00;&#x4e2a;&#x5b58;&#x50a8;&#x7684;&#x5143;&#x7d20;&#x7684;&#x96c6;&#x5408;&#x3002;&#x4ece;&#x8868;&#x9762;&#x4e0a;&#x770b;&#xff0c;&#x4e00;&#x4e2a;&#x5217;&#x8868;&#x7c7b;&#x4f3c;&#x4e8e;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#x3002;&#x7136;&#x800c;&#xff0c;&#x6f5c;&#x5728;&#x7684;&#x5b9e;&#x73b0;&#x975e;&#x5e38;&#x4e0d;&#x540c;&#x3002;&#x8fd9;&#x4f53;&#x73b0;&#x5728;&#x4e00;&#x4e9b;&#x529f;&#x80fd;&#x5dee;&#x5f02;&#xff1a",{"_index":1651,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["x5219;&#x4e0d;&#x5de5;&#x4f5c;&#x3002;&#x5982;&#x679c;&#x8fd9;&#x5e94;&#x8be5;&#x540c;&#x65f6;&#x5141;&#x8bb8;&#xff0c;&#x53ef;&#x4ee5;&#x6dfb;&#x52a0",{"_index":3317,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5219;&#x4f5c;&#x4e3a",{"_index":2772,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x5219;&#x6210;&#x529f;&#x3002",{"_index":1565,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{}}}],["x5219;&#x662f",{"_index":2774,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x521b;&#x5efa;&#x4e00;&#x4e2a;&#x5b9e;&#x4f8b;&#xff0c;&#x5e76;&#x4e0d;&#x65ad;&#x7684;&#x8c03;&#x7528",{"_index":2419,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x521b;&#x5efa;&#x4e00;&#x4e2a;&#x6839;&#x5143;&#x7d20",{"_index":2356,"title":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{}},"body":{}}],["x521b;&#x5efa;&#x4e00;&#x4e2a;&#x79c1;&#x6709;&#x7c7b;&#xff0c;&#x5373;&#x5df2;&#x77e5;&#x7684;&#x5b9e;&#x73b0;&#x7c7b;&#xff0c;&#x5b83;&#x5c06;&#x6240;&#x6709;&#x7684;&#x62bd;&#x8c61;&#x6210;&#x5458;&#x51fd;&#x6570;&#x4f5c;&#x4e3a;&#x63a5;&#x53d7;&#x4e00;&#x4e2a;&#x9644;&#x52a0;&#x7684;&#x7c7b;&#x578b;&#x4e3a;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7684;&#x9996;&#x53c2;&#x6570;&#x7684;&#x9759;&#x6001;&#x51fd;&#x6570;&#x3002;&#x867d;&#x7136;&#x6280;&#x672f;&#x4e0a;&#x4e0a;&#x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x5b9e;&#x73b0;&#x7ec6;&#x8282;&#xff0c;&#x4f46;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x4e8",{"_index":3556,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x521b;&#x5efa;&#x5b50;&#x5143;&#x7d20",{"_index":2363,"title":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}},"body":{}}],["x521b;&#x5efa;&#x65b0;&#x7684;&#x6d4b;&#x8bd5;&#x7528;&#x4f8b",{"_index":1550,"title":{"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{}},"body":{}}],["x521b;&#x5efa;&#xff0c;&#x4f5c;&#x4e3a;&#x6d41;&#x884c;&#x7684;&#x5f00;&#x6e90",{"_index":1127,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x521b;&#x5efa;&#xff0c;&#x8fd9;&#x610f;&#x5473;&#x7740",{"_index":2458,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x521d;&#x59cb;&#x5316;&#x5b8f",{"_index":773,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x521d;&#x59cb;&#x5316;&#x5b8f;&#x4ece;&#x547d;&#x4ee4;&#x884c;&#x8c03;&#x7528;&#xff0c;&#x4f7f;&#x7528",{"_index":6608,"title":{},"body":{"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["x521d;&#x59cb;&#x5316;&#x5b8f;&#x5c06;&#x53d1;&#x73b0",{"_index":6302,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x5229;&#x7528;&#x8d44;&#x6e90",{"_index":2165,"title":{"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}},"body":{}}],["x5230",{"_index":3240,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x5230;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#xff0c;&#x5b83;&#x83b7;&#x53d6;&#x8d44;&#x683c;&#x4f5c;&#x4e3a;&#x4ece;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5230;&#x5b83;&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x7684;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#x51fd;&#x6570;&#x3002;&#x8fd9;&#x4e9b;&#x51fd;&#x6570;&#x901a;&#x5e38;&#x662f;&#x6210;&#x5458;&#x51fd;&#x6570;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x88ab;&#x58f0;&#x660e;&#x4e3a;&#x9759;&#x6001",{"_index":3251,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5230;&#x4e00;&#x4e2a;&#x53d8;&#x91cf",{"_index":5778,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x5230;&#x4e00;&#x4e2a;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x3002;&#x4e3a;&#x4e86;&#x5b9e;&#x73b0;&#x5b83;&#xff0c;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x5fc5;&#x987b;&#x88ab;&#x5305;&#x88c5;&#x4e3a",{"_index":2681,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5230;&#x4e00;&#x4e2a;&#x7c7b;&#x578b",{"_index":3263,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5230;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x51fd;&#x6570;&#xff0c;&#x8fd9;&#x4e2a;&#x51fd;&#x6570;&#x83b7;&#x5f97;&#x8d44;&#x683c;&#x4f5c;&#x4e3a;&#x4ece;&#x5b83;&#x7684;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x5230;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#x51fd;&#x6570;&#x3002;&#x8fd9;&#x4e9b;&#x51fd;&#x6570;&#x5fc5;&#x987b;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x503c;&#x3002;&#x5b83;&#x4eec;&#x8fd8;&#x5fc5;&#x987b;&#x88ab;&#x58f0;&#x660e;&#x4e3a;&#x9759;&#x6001;&#x7684",{"_index":3249,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5230;&#x539f;&#x59cb;&#x7684;&#x6570;&#x7ec4;&#xff0c;&#x7c7b;&#x578b;&#x4e3a",{"_index":3808,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x5230;&#x547d;&#x4ee4;&#x884c;&#x5373;&#x53ef;&#x3002",{"_index":6103,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5230;&#x5b83;&#x4e4b;&#x4e2d;&#x3002;&#x524d;&#x8005;&#x88ab;&#x6dfb;&#x52a0;&#x4f7f;&#x7528;&#x7684;&#x7c7b;&#x578b;&#x662f",{"_index":6497,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["x5230;&#x6211;&#x4eec;&#x901a;&#x5e38;&#x4f7f;&#x7528",{"_index":3624,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x5230;&#x6240;&#x6709;&#x6269;&#x5c55;&#x7c7b;&#x3002;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x63a5;&#x53e3;&#x6709",{"_index":6513,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x5230;&#x6a21;&#x677f;&#x4e2d;&#x3002",{"_index":2141,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["x5230;&#x7f16;&#x8bd1;&#x5668;&#x53c2;&#x6570;&#xff0c;&#x4f7f;&#x7528",{"_index":2168,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["x5230;&#x88ab;&#x6307;&#x5b9a;&#x4e3a",{"_index":2326,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x524d;&#x9762;&#x7684;haxelib&#x8c03;&#x7528;&#x7684;&#x7ed3;&#x679c;&#x53ef;&#x4ee5;&#x88ab;&#x91cd;&#x7528;&#xff08;&#x53ea;&#x7528;&#x4e8e;&#x5b8c;&#x6210;&#xff1a;&#x5b83;&#x4eec;&#x5728;&#x505a;&#x7f16;&#x8bd1;&#x65f6;&#x662f;&#x88ab;&#x5ffd;&#x7565;&#x7684;&#xff09",{"_index":6097,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x524d;&#x9762;&#x7ae0;&#x8282;&#x4e2d;&#x6240;&#x63cf;&#x8ff0;&#x7684;&#x64cd;&#x4f5c;&#x7b26;&#x89c4;&#x5b9a;&#x4e86;&#x5176;&#x4f5c;&#x7528;&#x4e8e;&#x57fa;&#x7840;&#x6570;&#x636e;&#x7c7b;&#x578b;&#x65f6;&#x7684;&#x610f;&#x4e49;&#x53ca;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x3002",{"_index":5182,"title":{},"body":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["x529f;&#x80fd;&#x6027;&#x6298;&#x53e0;&#xff0c;&#x4e5f;&#x88ab;&#x79f0;&#x4e3a;&#x7f29;&#x5c0f;&#x3001;&#x79ef;&#x805a;&#x3001;&#x538b;&#x7f29;&#x6216;&#x8005;&#x6ce8;&#x5165;&#x3002",{"_index":2046,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x529f;&#x80fd;&#x90fd;&#x662f;&#x6700;&#x521d;&#x88ab;&#x4f7f;&#x7528",{"_index":3447,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x52a0;&#x5165;&#x56e2;&#x961f;&#xff0c;&#x4f5c;&#x4e3a",{"_index":1163,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x52a0;&#x5165;&#x56e2;&#x961f;&#xff0c;&#x5f00;&#x59cb;&#x4e86",{"_index":1167,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x52a0;&#x6cd5",{"_index":2519,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x52a8;&#x6001;&#x503c;&#x53ef;&#x4ee5;&#x88ab;&#x8d4b;&#x503c;&#x7ed9;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#xff1b;&#x800c;&#x4efb;&#x4f55;&#x503c;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5230;&#x52a8;&#x6001;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x6709;&#x4e00;&#x4e9b;&#x7f3a;&#x70b9;&#xff1a",{"_index":3137,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x52a8;&#x6001;&#x5b57;&#x6bb5;&#x56e0;&#x4e3a;&#x660e;&#x663e;&#x7684;&#x7406;&#x7531;&#x4e0d;&#x80fd;&#x5185;&#x8054;&#xff1a;&#x5185;&#x8054;&#x662f;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x6267;&#x884c;&#xff0c;&#x52a8;&#x6001;&#x51fd;&#x6570;&#x5fc5;&#x987b;&#x88ab;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x51b3;&#x5b9a;&#x3002",{"_index":4742,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["x52a8;&#x6001;&#x6570;&#x7ec4",{"_index":1624,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x52a8;&#x6001;&#x76ee;&#x6807;&#x7684;&#x7c7b;&#x578b;&#x4f7f;&#x7528;&#x66f4;&#x4e3a;&#x5bbd;&#x677e;&#xff0c;&#x5e76;&#x5141;&#x8bb8;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x4f7f;&#x7528",{"_index":2668,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x52a8;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff08;&#x7b2c;2.2&#x8282;&#xff09;&#x53ef;&#x80fd;&#x53ef;&#x4ee5;&#x5de5;&#x4f5c;&#xff0c;&#x4f46;&#x662f;&#x5728;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff08;&#x7b2c;2.2&#x8282;&#xff09;&#x53ef;&#x80fd;&#x5bfc;&#x81f4;&#x672a;&#x5b9a;&#x4e49;&#x7684;&#x9519;&#x8bef;&#x3002",{"_index":5098,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["x52a8;&#x6001;&#x7c7b;&#x578b",{"_index":2544,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x52a8;&#x6001;&#x7c7b;&#x578b;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff08;&#x7b2c;2.2&#x8282;&#xff09",{"_index":2932,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x52a8;&#x6001;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.7&#x8282;&#xff09;&#x3002",{"_index":4979,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["x52a8;&#x6001;&#x7c7b;&#x578b;&#xff1a;&#x4e00;&#x4e2a;&#x4e07;&#x80fd;&#x7c7b;&#x578b;&#xff0c;&#x53ef;&#x4ee5;&#x548c;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x517c;&#x5bb9",{"_index":108,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x5305",{"_index":1477,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化":{}}}],["x5305;&#x4e2d;&#x63d0;&#x4f9b;&#x57fa;&#x7840;&#x7684;&#x5355;&#x5143;&#x6d4b;&#x8bd5;&#x7c7b;&#x3002",{"_index":1549,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#10-14-单元测试":{}}}],["x5305;&#x4e86;&#x89e3;&#x5b83;&#x7684;&#x7c7b;&#x7684;&#x66f4;&#x591a;&#x7ec6;&#x8282;&#x3002",{"_index":1483,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.远程处理.html#10-13-远程处理":{}}}],["x5305;&#x4e86;&#x89e3;&#x66f4;&#x591a;&#x7ec6;&#x8282;&#x3002",{"_index":1579,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["x5305;&#x540d",{"_index":4238,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x5305;&#x542b;&#x4e3b;&#x8981",{"_index":1196,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x5305;&#x542b;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x7684",{"_index":6191,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5305;&#x542b;js&#x5ba2;&#x6237;&#x7aef;&#x7684;html&#x9875;&#x9762;&#x5fc5;&#x987b;&#x5728;&#x8ddf;&#x670d;&#x52a1;&#x5668;&#x8fd0;&#x884c;&#x7684;&#x540c;&#x6837;&#x7684;&#x57df;&#x540d;&#x4e0b;&#x63d0;&#x4f9b;&#x670d;&#x52a1;&#x3002;&#x540c;&#x6e90;&#x7b56;&#x7565;&#x9650;&#x5236;&#x4e00;&#x4e2a;&#x6e90;&#x4e0a;&#x7684;&#x4e00;&#x4e2a;&#x6587;&#x6863;&#x6216;&#x811a;&#x672c;&#x5982;&#x4f55;&#x548c;&#x53e6;&#x4e00;&#x4e2a;&#x6e90;&#x4e0a;&#x7684;&#x8d44;&#x6e90;&#x4ea4;&#x4e92;&#x3002;&#x540c;&#x6e90;&#x7b56;&#x7565;&#x4f5c;&#x4e3a;&#x4e00;&#x79cd;&#x624b;&#x6bb5;&#x6765;&#x9632;&#x6b62;&#x4e00;&#x4e9b;&#x8de8;&#x7ad9;&#x70b9;&#x8bf7;&#x6c42;&#x4f2a;&#x9020;&#x653b;&#x51fb;&#x3002",{"_index":1504,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["x5305;&#x56f4;&#x5728;&#x82b1;&#x62ec;&#x53f7",{"_index":2799,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x5305;&#x5b8c;&#x6210",{"_index":5988,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["x5305;&#x62ec;&#x4e86;&#x4e00;&#x4e2a;&#x6d6e;&#x70b9;&#x6570;&#x6570;&#x5b66;&#x5e93;&#xff0c;&#x7528;&#x4e8e;&#x4e00;&#x4e9b;&#x5e38;&#x89c1;&#x7684;&#x6570;&#x5b66;&#x8fd0;&#x7b97;&#x3002;&#x591a;&#x6570;&#x51fd;&#x6570;&#x7528;&#x4e8e;&#x64cd;&#x4f5c;&#x548c;&#x8fd4;&#x56de;&#x6d6e;&#x70b9;&#x6570;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4e00;&#x4e2a",{"_index":1960,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["x5305;&#x63d0;&#x4f9b;&#x4e24;&#x79cd;&#x7c7b;&#x578b;&#x5e2e;&#x52a9;&#x6620;&#x5c04;&#x539f;&#x751f;&#x7684;&#x8bed;&#x4e49;&#x5230;haxe&#xff1a",{"_index":5413,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x5339;&#x914d;&#x4efb;&#x4f55;&#xff0c;&#x6240;&#x4ee5",{"_index":5511,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["x5339;&#x914d;&#x6a21;&#x5f0f;&#x5728",{"_index":3415,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x5339;&#x914d;&#x7684;&#x7c7b;&#x578b",{"_index":5493,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{}}}],["x5339;&#x914d;&#xff08;&#x7b2c;6.4&#x8282;&#xff09",{"_index":3416,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x533f;&#x540d;&#x7ed3;&#x6784",{"_index":517,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["x533f;&#x540d;&#x7ed3;&#x6784;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x7ec4;&#x7ec7;&#x6570;&#x636e;&#xff0c;&#x800c;&#x4e0d;&#x7528;&#x663e;&#x5f0f;&#x5730;&#x521b;&#x5efa;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x4e0b;&#x9762;&#x7684;&#x793a;&#x4f8b;&#x521b;&#x5efa;&#x4e86;&#x4e00;&#x4e2a;&#x7ed3;&#x6784;&#xff0c;&#x5305;&#x542b;&#x4e24;&#x4e2a;&#x5b57;&#x6bb5",{"_index":2987,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x533f;&#x540d;&#x7ed3;&#x6784;&#x7684;&#x5b57;&#x6bb5;&#x50cf;&#x7c7b;&#x4e00;&#x6837;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x70b9;&#x53f7;&#x64cd;&#x4f5c;&#x7b26",{"_index":3002,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x533f;&#x540d;&#x7ed3;&#x6784;&#xff08;&#x7b2c;2.5&#x8282",{"_index":3615,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x533f;&#x540d;&#x7ed3;&#x6784;&#xff08;&#x7b2c;2.5&#x8282;&#xff09",{"_index":3174,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x534f;&#x53d8",{"_index":3822,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x534f;&#x8bae",{"_index":6104,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5355;&#x5143;&#x6d4b;&#x8bd5",{"_index":80,"title":{},"body":{"10.标准库/10.标准库.html#10-标准库":{}}}],["x5355;&#x5f62;&#x7c7b;&#x578b;&#xff1a;&#x4e00;&#x4e2a",{"_index":110,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x5355;&#x5f62;&#xff08;&#x7b2c;2.9&#x8282;&#xff09",{"_index":3074,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5355;&#x5f62;&#xff08;&#x7b2c;2.9&#x8282;&#xff09;&#x3002;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x7ed1;&#x5b9a;&#x5230;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#xff0c;&#x4f46;&#x662f;&#x4e00;&#x6b21;&#x53ea;&#x6709;&#x4e00;&#x4e2a;&#x3002;&#x53ef;&#x4ee5;&#x662f;&#x663e;&#x5f0f;&#x5730;&#x89e6;&#x53d1;&#x7ed1;&#x5b9a;&#xff0c;&#x901a;&#x8fc7;&#x8c03;&#x7528;&#x6784;&#x9020;&#x51fd;&#x6570;&#x5e76;&#x663e;&#x5f0f;&#x5730;&#x63d0;&#x4f9b;&#x7c7b;&#x578b;&#xff08",{"_index":3675,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x5355;&#x5f62;&#xff08;&#x7b2c;2.9&#x8282;&#xff09;&#x7684;&#x7c7b;&#x578b;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x884c;&#x4e3a;&#x5728;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6&#x8282;&#xff09;&#x4e2d;&#x8be6;&#x8ff0;&#x3002",{"_index":3860,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{}}}],["x5355;&#x5f62;&#xff08;&#x7b2c;2.9&#x8282;&#xff09;&#xff0c;&#x4e00;&#x4e2a;&#x8fd8;&#x4e0d;&#x77e5;&#x9053;&#x5176;&#x7c7b;&#x578b;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x4e0b;&#x4e00;&#x884c",{"_index":4052,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x5355;&#x5f62;&#xff08;monomorph",{"_index":3936,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x5373",{"_index":2567,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x53c2;&#x6570;&#x548c",{"_index":3693,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x53c2;&#x6570;&#x63d0;&#x4f9b;&#x4e00;&#x4e2a;&#x7c7b;&#x8def;&#x5f84;&#x5c31;&#x8db3;&#x591f;&#x4e86;&#xff0c;&#x4e3b;&#x8981;&#x7684;&#x7c7b;&#x901a;&#x8fc7",{"_index":710,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x53c2;&#x6570;&#x6765;&#x83b7;&#x5f97;&#x3002;haxe&#x7f16;&#x8bd1;&#x5668;&#x5728;&#x6bcf;&#x6b21;&#x7f16;&#x8bd1;&#x5141;&#x8bb8;&#x591a;&#x4e2a",{"_index":5286,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x53c2;&#x6570;&#x88ab;&#x5177;&#x4f53;&#x5316;&#xff1a",{"_index":6397,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x53c2;&#x6570;&#x88ab;&#x7f16;&#x8bd1;&#x3002;haxe&#x7f16;&#x8bd1;&#x5668;&#x7136;&#x540e;&#x89e3;&#x6790;main&#x7c7b;&#x7684;&#x6587;&#x4ef6;&#xff0c;&#x5f00;&#x59cb;&#x7f16;&#x8bd1;&#x3002",{"_index":711,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x53c2;&#x6570;&#x901a;&#x8fc7;&#x5b57;&#x6bb5;&#x540d;&#x540e;&#x4e00;&#x4e2a;&#x5f00;&#x53e3;&#x7684",{"_index":4577,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x53c2;&#x6570;&#x90fd;&#x662f;&#x7c7b;&#x578b",{"_index":3694,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x53c2;&#x6570;&#xff0c;&#x4f7f",{"_index":6601,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x53c2;&#x6570;&#xff0c;&#x5e76;&#x8bd5;&#x56fe;&#x89e3;&#x6790;&#x5b83;&#x4e3a;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x6216;&#x8005;&#x5b57;&#x6bb5;&#x3002;&#x8fd9;&#x5f88;&#x5bb9;&#x6613;&#x5e26;&#x6765;&#x7c7b;&#x578b;&#x9519;&#x8bef;&#xff1a",{"_index":2315,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x53c2;&#x6570;&#xff0c;&#x6539;&#x53d8;haxe&#x670d;&#x52a1;&#x5668;&#x7684;&#x5f53;&#x524d;&#x5de5;&#x4f5c;&#x76ee;&#x5f55;&#x3002;&#x901a;&#x5e38;&#xff0c;&#x7c7b;&#x8def;&#x5f84;&#x548c;&#x5176;&#x5b83;&#x7684;&#x6587;&#x4ef6;&#x8ddf;&#x4f60;&#x7684;&#x9879;&#x76ee;&#x662f;&#x76f8;&#x5173;&#x7684;&#x3002",{"_index":6092,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x53cc;&#x7f8e;&#x5143;&#x7b26;&#x53f7;&#x4ee3;&#x66ff;&#x3002",{"_index":5686,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["x53cd;&#x4e4b;&#x4e5f;&#x4e00;&#x6837;&#xff1a;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x58f0;&#x660e;&#x5176;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x4e3a",{"_index":3882,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x53cd;&#x5c04",{"_index":76,"title":{},"body":{"10.标准库/10.标准库.html#10-标准库":{}}}],["x53cd;&#x5c04;&#xff08;&#x7b2c;10.7&#x8282;&#xff09",{"_index":3162,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x53cd;&#x5c04;&#xff08;&#x7b2c;10.7&#x8282;&#xff09;&#x88ab;&#x4f7f;&#x7528;&#x65f6;&#x53ef;&#x80fd;&#x5931;&#x8d25;&#x3002;&#x8fd9;&#x53ef;&#x80fd;&#x9700;&#x8981;&#x901a;&#x8fc7;&#x5982;&#x4e0b;&#x5143;&#x6570;&#x636e;&#x5f52;&#x7c7b;&#x660e;&#x786e;&#x6807;&#x8bb0;&#x7684;&#x5b57;&#x6bb5;&#x6216;&#x8005;&#x7c7b;&#x88ab;&#x4f7f;&#x7528;&#xff1a",{"_index":5860,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x53cd;&#x5c04;&#xff08;10.7&#xff09",{"_index":2926,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x53cd;&#x5c04;api",{"_index":2812,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x53cd;&#x5c04;api&#x7531;&#x4e24;&#x4e2a;&#x7c7b;&#x7ec4;&#x6210;&#xff1a",{"_index":2309,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x53cd;&#x5e8f;&#x5217;&#x5316;&#x884c;&#x4e3a",{"_index":2447,"title":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}},"body":{}}],["x53d1;&#x5e03;&#xff0c;&#x5f00;&#x59cb;&#x652f;&#x6301",{"_index":1161,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x53d1;&#x9001;&#x5b83;&#x7684;&#x5b8c;&#x6210;&#x547d;&#x4ee4;&#x5230;&#x670d;&#x52a1;&#x5668;&#xff0c;&#x800c;&#x4e0d;&#x662f;&#x76f4;&#x63a5;&#x6267;&#x884c;&#x5b83;&#x4eec;&#xff1a",{"_index":6089,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x53d6;&#x4ee3;&#x3002",{"_index":6031,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["x53d8;&#x91cf",{"_index":218,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["x53d8;&#x91cf;&#x4e0b;&#x9762;&#xff0c;&#x5c5e;&#x6027;&#x662f;&#x7b2c;&#x4e8c;&#x4e2a;&#x9009;&#x9879;&#x6765;&#x5904;&#x7406;&#x7c7b;&#x4e2d;&#x7684;&#x6570;&#x636e;&#x3002;&#x7136;&#x800c;&#x4e0d;&#x50cf;&#x53d8;&#x91cf;&#xff0c;&#x5b83;&#x4eec;&#x63d0;&#x4f9b;&#x66f4;&#x591a;&#x7684;&#x63a7;&#x5236;&#x54ea;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x88ab;&#x5141;&#x8bb8;&#xff0c;&#x548c;&#x5b83;&#x5982;&#x4f55;&#x88ab;&#x751f;&#x6210;&#x3002;&#x901a;&#x5e38;&#x7528;&#x5904;&#x5305;&#x62ec;&#xff1a",{"_index":4510,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x53d8;&#x91cf;&#x4fdd;&#x5b58;&#x6570;&#x636e;&#xff0c;&#x65b9;&#x6cd5;&#x901a;&#x8fc7;&#x6258;&#x7ba1;&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5&#x7ae0;&#xff09;&#x6765;&#x5b9a;&#x4e49;&#x7a0b;&#x5e8f;&#x7684;&#x884c;&#x4e3a;&#x3002;&#x6211;&#x4eec;&#x5df2;&#x7ecf;&#x5728;&#x6bcf;&#x4e2a;&#x4ee3;&#x7801;&#x4f8b;&#x5b50;&#x4e2d;&#x770b;&#x8fc7;&#x65b9;&#x6cd5;&#x5b57;&#x6bb5;&#xff0c;&#x524d;&#x9762;&#x7684",{"_index":4561,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x53d8;&#x91cf;&#x540d",{"_index":2123,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#表达式":{}}}],["x53d8;&#x91cf;&#x540d;&#x79f0",{"_index":6392,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x53d8;&#x91cf;&#x5b57;&#x6bb5",{"_index":2907,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x53d8;&#x91cf;&#x6355;&#x83b7",{"_index":5710,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x53d8;&#x91cf;&#x7c7b;&#x5b57;&#x6bb5;&#x53ef;&#x4ee5;&#x88ab;&#x6d89;&#x53ca;&#x4e3a;&#x5c5e;&#x6027;&#xff0c;&#x901a;&#x8fc7;&#x5b9a;&#x5236;&#x7684;read&#x548c;write&#x8bbf;&#x95ee;&#xff0c;&#x53ef;&#x4ee5;&#x66f4;&#x7cbe;&#x7ec6;&#x7684;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#x3002",{"_index":563,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x53d8;&#x91cf;&#xff08;5.10&#xff09;&#x7684;&#x4f5c;&#x7528;&#x57df;&#xff0c;&#x4e14;&#x5927;&#x591a;&#x6570;&#x60c5;&#x51b5;&#x4e0b;&#x58f0;&#x660e;&#x4e00;&#x4e2a;&#x5e26;&#x547d;&#x540d;&#x7684;&#x5c40;&#x90e8;&#x51fd;&#x6570;&#x5b9e;&#x9645;&#x4e0a;&#x53ef;&#x4ee5;&#x88ab;&#x770b;&#x4f5c;&#x662f;&#x628a;&#x4e00;&#x4e2a;&#x533f;&#x540d;&#x51fd;&#x6570;&#x8d4b;&#x503c;&#x5230;&#x4e00;&#x4e2a;&#x53d8;&#x91cf;&#x4e0a;&#xff1a",{"_index":4804,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x53e6;&#x4e00;&#x4e2a;&#x7279;&#x6b8a;&#x7684;&#x8bbf;&#x95ee;&#x6807;&#x8bc6;&#x7b26;&#xff08;&#x8fd9;&#x91cc;&#x662f;null&#xff09;&#xff0c",{"_index":4528,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x53e6;&#x4e00;&#x79cd;&#x7684;&#x7c7b;&#x5b57;&#x6bb5;&#x8f6c;&#x6362;&#x6709;&#x76f8;&#x540c;&#x7684;&#x8bed;&#x4e49;&#xff0c;&#x4f46;&#x662f;&#x5b9a;&#x4e49;&#x5b8c;&#x5168;&#x4e0d;&#x540c;&#xff1a",{"_index":3247,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x53e6;&#x4e00;&#x7ec4;&#x95ee;&#x9898;&#x6765;&#x81ea;&#x4e8e;&#x4e00;&#x4e2a;&#x4e8b;&#x5b9e;&#xff0c;&#x4e00;&#x4e9b;&#x53cd;&#x5c04;&#x51fd;&#x6570;&#x6709;&#x610f;&#x7684;&#x63a5;&#x53d7",{"_index":2319,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x53e6;&#x5916;&#x4e00;&#x4e2a;&#x7ed3;&#x6784;&#x65f6",{"_index":3842,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x53e6;&#x5916;&#xff0c",{"_index":2559,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["x53e6;&#x5916;&#xff0c;&#x5143;&#x6570;&#x636",{"_index":6385,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x53e6;&#x5916;&#xff0c;&#x672c;&#x6587;&#x6863;&#x4e3b;&#x8981;&#x57fa;&#x4e8",{"_index":14,"title":{},"body":{"index.html#关于本文档":{}}}],["x53e6;&#x5916;&#xff0c;r.matchedleft",{"_index":1790,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["x53ea;&#x6709",{"_index":5258,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x53ea;&#x6709;&#x4e00;&#x4e2a",{"_index":3819,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x53ea;&#x6709;&#x6784;&#x5efa;&#x5b8f;&#x4ec",{"_index":6305,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x53ea;&#x8bfb",{"_index":2972,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x53ef;&#x4ee5;&#x4ea4;&#x66ff;&#x4f7f;&#x7528;&#x3002;&#x5728",{"_index":2643,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":2131,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}}}],["x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x3002;&#x8fd9;&#x9002;&#x7528;&#x4e8e;&#x6240;&#x6709;&#x5185;&#x90e8;&#x6784;&#x9020;&#x9884;&#x671f;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x7684;&#x4f4d;&#x7f6e;&#xff1a",{"_index":6391,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x53ef;&#x4ee5;&#x4fdd;&#x5b58;&#x4e0a;&#x9762;&#x7684;&#x4ee3;&#x7801;&#x5230;&#x4e00;&#x4e2a",{"_index":1186,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x53ef;&#x4ee5;&#x6355;&#x83b7;&#x4e00;&#x4e2a;&#x5b50;&#x6a21;&#x5f0f;&#x7684;&#x4efb;&#x4f55;&#x503c;&#xff0c;&#x901a;&#x8fc7;&#x5339;&#x914d;&#x5b83;&#x5bf9;&#x5e94;&#x7684;&#x4e00;&#x4e2a;&#x6807;&#x8bc6;&#x7b26;&#xff1a",{"_index":5557,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x53ef;&#x4ee5;&#x6539;&#x5199;&#x4e3a;&#xff1a",{"_index":2983,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x53ef;&#x4ee5;&#x662f;&#x4ece;&#x6216;&#x8005;&#x5230",{"_index":3236,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x53ef;&#x4ee5;&#x662f;&#x4efb;&#x4f55;&#x6709;&#x6548;&#x7684;&#x7c7b;&#x578b;&#x8def;&#x5f84;&#x8868;&#x8fbe;&#x5f0f;&#x3002;&#x8fd9;&#x7c7b;&#x4f3c;&#x4e8e;&#x666e;&#x901a;&#x4ee3;&#x7801;&#x4e2d;&#x7684;&#x663e;&#x5f0f;&#x7c7b;&#x578b;&#x63d0;&#x793a;&#xff0c;&#x4f8b;&#x5982;&#x5bf9;&#x4e8e;&#x53d8;&#x91cf;&#xff0c;&#x5f62;&#x5f0f;&#x4e3a",{"_index":6414,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["x53ef;&#x4ee5;&#x6d41;&#x7545;&#x7684;&#x5904;&#x7406;&#x6570;&#x5b66;&#x9519;&#x8bef;&#xff0c;&#x5982;&#x9664;&#x6570;&#x4e3a",{"_index":1930,"title":{},"body":{"10.标准库/10.4.Math/10.4.2.数学错误.html#10-4-2-数学错误":{}}}],["x53ef;&#x4ee5;&#x7528;&#x4e8e;&#x63a5;&#x53d7",{"_index":1961,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["x53ef;&#x4ee5;&#x7528;&#x6765;&#x6620;&#x5c04;&#x6ce8;&#x89e3;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x4f4d;&#x7f6e;&#x5230",{"_index":6386,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x53ef;&#x4ee5;&#x7528;&#x6765;&#x83b7;&#x5f97;&#x5339;&#x914d;&#x7684;&#x5b50;&#x4e32;&#x5de6;&#x4fa7;&#x6216;&#x8005;&#x53f3;&#x4fa7;&#x7684;&#x5b50;&#x4e32;&#xff1a",{"_index":1791,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["x53ef;&#x4ee5;&#x7528;&#x6765;&#x89e3;&#x6790",{"_index":2388,"title":{},"body":{"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}}}],["x53ef;&#x4ee5;&#x7ed9;&#x4efb;&#x4f55;&#x5176;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x547d;&#x540d;&#xff1a",{"_index":3622,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x53ef;&#x4ee5;&#x88ab;&#x5199;&#x5165;&#xff0c;&#x5982;&#x901a;&#x8fc7;&#x5b83;&#x4eec;&#x7684",{"_index":3804,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x53ef;&#x4ee5;&#x88ab;&#x770b;&#x4f5c;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x7684;&#x901a;&#x7528;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x3002;&#x7136;&#x800c;&#xff0c;&#x8fd9;&#x4e2a;&#x5173;&#x7cfb;&#x4e0d;&#x4f1a;&#x53cd;&#x5e94;&#x5728;&#x751f;&#x6210;&#x7684;&#x4ee3;&#x7801;&#x4e2d;&#x3002",{"_index":2867,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{}}}],["x53ef;&#x4ee5;&#x88ab;&#x8df3;&#x8fc7;&#x5bf9;&#x4e8e;&#x540e;&#x7eed;&#x7684;&#x53c2;&#x6570;&#xff0c;&#x6240;&#x4ee5;&#x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x53ef;&#x4ee5;&#x88ab;&#x4f7f;&#x7528",{"_index":5789,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x53ef;&#x4ee5;&#x89e3;&#x6790;&#x8fd9;&#x4e2a;&#x6765;&#x5efa;&#x8bae;&#xff0c;&#x8c03;&#x7528;&#x7684;&#x51fd;&#x6570;&#x9700;&#x8981;&#x4e00;&#x4e2a;&#x540d;&#x4e3a",{"_index":5955,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["x53ef;&#x4ee5;&#x8ba4;&#x4e3a;&#x662f",{"_index":4236,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x53ef;&#x4ee5;&#x8ba4;&#x4e3a;&#x662f;&#x53e6;&#x4e00;&#x4e2a",{"_index":4924,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x53ef;&#x4ee5;&#x8bbf;&#x95ee;&#x5b83;&#x4eec;&#x7684;&#x6570;&#x636e;&#x5b58;&#x50a8;&#x7684;&#x7269;&#x7406;&#x5b57;&#x6bb5;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x786e;&#x4fdd;&#x8fd9;&#x7c7b;&#x7684;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#xff0c;&#x5982;&#x679c;&#x4ece;&#x5b58;&#x53d6;&#x5668;&#x65b9;&#x6cd5;&#x672c;&#x8eab;&#x505a;&#x51fa;&#xff0c;&#x4e0d;&#x4f1a;&#x901a;&#x8fc7;&#x5b58;&#x53d6;&#x5668;&#x65b9;&#x6cd5;&#xff0c;&#x4ece;&#x800c;&#x907f;&#x514d;&#x65e0;&#x9650;&#x9012;&#x5f52;&#xff1a",{"_index":4404,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x53ef;&#x4ee5;&#x8d4b;&#x503c;&#x5230",{"_index":2497,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":3177,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x53ef;&#x7528;&#x7684;&#x65b9;&#x6cd5;&#x5728",{"_index":2312,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x53ef;&#x7528;&#x7684;&#x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09",{"_index":4280,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x53ef;&#x7a7a",{"_index":2639,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x53ef;&#x80fd;&#x6709;&#x4e00;&#x4e2a;&#x5e38;&#x91cf;&#x503c;&#x7684;&#x521d;&#x59cb;&#x5316;&#xff08;&#x201c;bar&#x201d;&#xff09",{"_index":4368,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["x53ef;&#x80fd;&#x6709;&#x4e00;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x8fd9;&#x91cc;&#x662f",{"_index":4573,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x53ef;&#x80fd;&#x6709;&#x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26;&#xff08;&#x7b2c;4.4&#x8282;&#xff09;&#xff08;&#x8fd9;&#x91cc;&#x662f",{"_index":4571,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x53ef;&#x80fd;&#x6709;&#x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26;&#xff08;&#x7b2c;4.4&#x8282;&#xff09;&#xff08;static&#xff09",{"_index":4369,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["x53ef;&#x80fd;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x6700;&#x5e38;&#x7528;&#x7684;&#x4e00;&#x4e2a;&#x5730;&#x65b9;&#x5c31;&#x662f;&#x68c0;&#x67e5;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x662f;&#x5426;&#x5339;&#x914d;&#x7279;&#x5b9a;&#x6a21;&#x5f0f;&#x3002;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x5bf9;&#x8c61;&#x7684",{"_index":1794,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{}}}],["x53ef;&#x80fd;&#x6ce8;&#x610f;&#x5230;&#xff0c;&#x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x5e76;&#x4e0d;&#x662f;&#x5fc5;&#x987b;&#x7684;&#xff0c;&#x5982;&#x679c;&#x6709;&#x4e00;&#x4e2a;&#x521d;&#x59cb;&#x5316;&#x7684;&#x503c;&#x3002;&#x8fd9;&#x4e2a;&#x60c5;&#x51b5;&#x4e0b;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x63a8;&#x65ad;&#x5b83;&#x4e3a;&#x6070;&#x5f53;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":4373,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["x53ef;&#x80fd;&#x7684;&#x6807;&#x8bb0;&#x5982;&#x4e0b;&#xff1a",{"_index":1906,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x53ef;&#x89c1;&#x6027",{"_index":4744,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html#4-4-访问修饰符":{}}}],["x53ef;&#x9009;&#x53c2;&#x6570;&#x901a;&#x8fc7;&#x5728;&#x53c2;&#x6570;&#x6807;&#x8bc6;&#x7b26;&#x524d;&#x9762;&#x524d;&#x7f6e;&#x4e00;&#x4e2a;&#x95ee;&#x53f7",{"_index":3023,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x53ef;&#x9009;&#x53c2;&#x6570;&#xff08;&#x7b2c;2.6.1&#x8282;&#xff09",{"_index":3046,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x53ef;&#x9009;&#x5b57;&#x6bb5",{"_index":3631,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x53ef;&#x9009;&#x7684;&#xff0c;&#x8868;&#x8fbe;&#x5f0f;&#x53ef;&#x4ee5;&#x540e;&#x8ddf",{"_index":4920,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x53ef;&#x9009;&#x7684;0&#x6216;&#x8005;1&#x6b21",{"_index":1891,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x53f3;&#x4f4d;&#x79fb",{"_index":2537,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x53f3;&#x4fa7;&#x662f;&#x4e00;&#x4e2a;&#x6a21;&#x5f0f;&#xff0c;&#x5339;&#x914d;&#x7684;&#x5de6;&#x4fa7;&#x6267;&#x884c;&#x7684;&#x7ed3;&#x679c;&#x3002",{"_index":5659,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x5408;&#x5e76;&#x4e24;&#x4e2a;&#x53ef;&#x8fed;&#x4ee3;&#x5bf9;&#x8c61;&#xff0c;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x65b0;&#x7684",{"_index":2042,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x540c;&#x6837;&#x8fd9;&#x4e5f;&#x662f;&#x4e00;&#x4e2a",{"_index":4818,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x540c;&#x6837;&#xff0c;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x4e0d;&#x80fd;&#x88ab;&#x8ddf",{"_index":2684,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x540c;&#x6e90;&#x7b56;&#x7565",{"_index":1509,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["x540d",{"_index":2252,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540d;&#x4e3a",{"_index":3600,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x540d;&#x79f0",{"_index":1005,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf",{"_index":2236,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x53c2;&#x6570;&#x7684;&#x6570;&#x91cf;&#xff0c;&#x540e;&#x8ddf;&#x53c2;&#x6570;&#x7684;&#x503c;&#xff08;&#x4f8b;&#x5982;&#xff0c;jy3:foo:0:0",{"_index":2286,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x5728;&#x5b57;&#x7b26;&#x4e32;&#x7f13;&#x5b58;&#x4e2d;&#x76f8;&#x5e94;&#x7684;&#x7d22;&#x5f15;&#xff08;&#x4f8b;&#x5982;&#xff0c;r456&#xff09",{"_index":2289,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x5bf9;&#x8c61;&#x7f13;&#x5b58;&#x4e2d;&#x7684;&#x76f8;&#x5e94;&#x7d22;&#x5f15;&#xff08;&#x5982;&#xff0c;r42&#xff09",{"_index":2290,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x503c;&#x5bf9;&#x8868;&#x793a;&#x952e;&#x8ddf;&#x503c;&#xff0c;&#x540e;&#x8ddf;h",{"_index":2261,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x679a;&#x4e3e;&#x540d;&#x79f0;&#xff0c;&#x540e;&#x8ddf;&#x5192;&#x53f7",{"_index":2284,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x679a;&#x4e3e;&#x540d;&#x79f0;&#xff0c;&#x540e;&#x8ddf;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x540d;&#xff0c;&#x540e;&#x8ddf;&#x5192;&#x53f7",{"_index":2277,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x7c7b;&#x540d;&#xff0c;&#x540e;&#x8ddf;&#x5b57;&#x6bb5;&#x7684;&#x540d",{"_index":2270,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x9879;&#x7684;&#x5217;&#x8868;&#xff0c;&#x540e;&#x8ddf;h&#x3002;&#x5bf9;&#x4e8e;&#x591a;&#x4e2a;&#x8fde;&#x7eed;&#x7684",{"_index":2243,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x9879;&#x7684;&#x5217;&#x8868;&#xff0c;&#x540e;&#x8ddf;h&#xff08;&#x4f8b;&#x5982;&#xff0c;lnnh",{"_index":2240,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x5f02;&#x5e38;&#x503c",{"_index":2268,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x6574;&#x6570;&#x663e;&#x793a;&#xff08;&#x4f8b;&#x5982",{"_index":2217,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x6d6e;&#x70b9;&#x6570;&#x663e;&#x793a;&#xff08;&#x5982;d1.45",{"_index":2225,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x7c7b;&#x540d;&#xff0c;&#x540e;&#x8ddf;&#x81ea;&#x5b9a;&#x4e49;&#x5e8f;&#x5217;&#x5316;&#x6570;&#x636e;&#xff0c;&#x540e;&#x8ddf",{"_index":2292,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;&#x952e;&#x503c;&#x5bf9;&#xff0c;&#x540e;&#x8ddf;h&#x3002;&#x6bcf;&#x4e2a;&#x952e;&#x8868;&#x793a;&#x4e3a",{"_index":2257,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;null&#x7684;&#x6570;&#x91cf;&#xff08;&#x4f8b;&#x5982",{"_index":2246,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x8ddf;url&#x7f16;&#x7801;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x957f;&#x5ea6;&#xff0c;&#x7136;&#x540e;&#x662f;&#x5192;&#x53f7",{"_index":2229,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x540e;&#x90fd;&#x8ddf;&#x4e00;&#x4e2a;&#x5192;&#x53f7;&#x548c;&#x4e00;&#x4e2a;&#x53ef;&#x9009;&#x7684;cas",{"_index":4949,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x540e;&#x9762;&#x662f;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7684;&#x51fd;&#x6570;&#x5b57;&#x6bb5;&#x53eb;&#x505a",{"_index":2804,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x540e;&#x9762;&#x7684;&#x7ae0;&#x8282;&#x4e2d;&#xff0c",{"_index":1036,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x540e;&#x9762;&#x8ddf;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7684;&#x8bbf;&#x95ee;&#x6807;&#x8bc6;&#x7b26;&#xff08;&#x8fd9;&#x91cc;&#x662f",{"_index":4525,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x540e;&#xff1a",{"_index":6538,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x5411;&#x91cf",{"_index":1752,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}}}],["x5426;&#x5219",{"_index":5565,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x5426;&#x5219;&#x4efb;&#x4f55;&#x6587;&#x6863;&#x8f93;&#x51fa;&#x662f;&#x88ab;&#x52a0;&#x5de5;&#x7684;&#xff0c;&#x610f;&#x5473;&#x7740;&#x957f;&#x6587;&#x6863;&#x53ef;&#x80fd;&#x5305;&#x62ec;&#x5305;&#x62ec;&#x6362;&#x884c;&#x548c;&#x5236;&#x8868;&#x7b26;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x4eec;&#x786e;&#x5b9e;&#x5728;&#x6e90;&#x6587;&#x4ef6;&#x4e2d;&#x3002",{"_index":5916,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x5426;&#x5219;&#x90fd;&#x662f;&#x6210;&#x5458;&#x5b57;&#x6bb5;&#x3002;static&#x5b57;&#x6bb5;&#x7528;&#x5728;&#x7c7b;&#x4e0a;&#xff0c;&#x5c31;&#x50cf;&#x975e;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x7528;&#x5728;&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x4e0a;&#x3002",{"_index":4756,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["x5426;&#x5219;&#x90fd;&#x662f;&#x6210;&#x5458;&#x5b57;&#x6bb5;&#x3002;static&#x5b57;&#x6bb5;&#x901a;&#x8fc7;&#x7c7b;&#x4f7f;&#x7528;&#xff0c;&#x800c;&#x975e;static&#x5b57;&#x6bb5;&#x901a;&#x8fc7;&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x4f7f;&#x7528;&#x3002",{"_index":4757,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["x542f;&#x52a8;&#x4e00;&#x4e2a;&#x8fde;&#x63a5",{"_index":1429,"title":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}},"body":{}}],["x547d;&#x4ee4;&#x3002;&#x8fd9;&#x6ce8;&#x518c;&#x4e00;&#x4e2a;&#x56de;&#x8c03;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x5728;&#x521b;&#x5efa;&#x5b83;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#x73af;&#x5883;&#x540e;&#xff0c;&#x4f46;&#x662f;&#x5728;&#x7c7b;&#x578b;&#x5316",{"_index":6609,"title":{},"body":{"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["x547d;&#x4ee4;&#x884c;&#x53c2;&#x6570;&#x4f7f;hax",{"_index":6088,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x547d;&#x4ee4;&#x884c;&#x53c2;&#x6570;&#x6765;&#x542f;&#x52a8;&#x4e00;&#x4e2a",{"_index":6082,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x547d;&#x4ee4;&#x884c;&#x53c2;&#x6570;&#x6765;&#x7981;&#x6b62;&#x5185;&#x8054;&#x3002;&#x552f;&#x4e00;&#x7684;&#x4f8b;&#x5916;&#x662f;&#x5982;&#x679c;&#x7c7b;&#x662f",{"_index":4707,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x547d;&#x540d;&#x7ea6;&#x5b9a;&#xff0c;&#x5927;&#x5927;&#x7b80;&#x5316;&#x4e86;&#x5b9e;&#x73b0;&#x3002;&#x8fd9;&#x662f;haxe2",{"_index":4548,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x548c",{"_index":979,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html#表达式":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["x548c;&#x4e00;&#x4e2a;&#x95ed;&#x53e3;&#x7684;&#x62ec;&#x53f7",{"_index":4529,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x548c;&#x4e0d;&#x5b89;&#x5168;&#x8f6c;&#x6362;&#xff08;&#x7b2c;5.23.1&#x8282;&#xff09;&#x4e0d;&#x540c;&#xff0c;&#x4e00;&#x4e2a;&#x5931;&#x8d25;&#x7684;&#x8f6c;&#x6362;&#x7684;&#x8fd0;&#x884c;&#x65f6;&#x884c;&#x4e3a;&#x5728;&#x5b89;&#x5168;&#x8f6c;&#x6362;&#x4e2d;&#x88ab;&#x5b9a;&#x4e49;&#xff1a",{"_index":5075,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["x548c;&#x53c2;&#x6570",{"_index":4842,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["x548c;&#x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664;&#x3002;&#x8fd9;&#x603b;&#x7ed3;&#x4e86",{"_index":1025,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x548c;&#x66f4;&#x9ad8;&#x7248;&#x672c;&#x3002",{"_index":1437,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x548c;&#x7ed3;&#x6784;&#x770b;&#x8d77;&#x6765;&#x90a3;&#x4e48;&#x8fde;&#x8d2f;&#x7684;&#x539f;&#x56e0;&#xff1a",{"_index":3626,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x548c;&#x8bb8;&#x591a;&#x9762;&#x5411;&#x5bf9;&#x8c61;&#x8bed;&#x8a00;&#x7c7b;&#x4f3c;&#xff0c;&#x7c7b;&#x662f;&#x5927;&#x591a;&#x6570",{"_index":2791,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x548c;c++&#x4e2d;&#xff0c;&#x4f7f;&#x7528",{"_index":1829,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["x548c;f&#x7c7b;&#x578b;&#x5c55;&#x793a;&#xff1a;&#x7ed1;&#x5b9a;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x53c2;&#x6570;&#x88ab;&#x4ece;&#x7c7b;&#x578b;&#x4e2d;&#x6709;&#x6548;&#x7684;&#x5207;&#x65ad;&#xff0c;&#x8f6c;&#x6362;&#x4e00;&#x4e2a",{"_index":5781,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x548c;fals",{"_index":5495,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{}}}],["x548c;firstel",{"_index":2378,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["x548c;hax",{"_index":4549,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x548c;java",{"_index":1913,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x548c;myvalue_int",{"_index":3741,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x548c;php",{"_index":1333,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["x548c;public&#xff09",{"_index":4572,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x548c;setter",{"_index":4403,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x548c;setter&#x5b9e;&#x9645;&#x4e0a;&#x5b58;&#x5728;&#x3002;&#x4e0b;&#x9762;&#x7684;&#x95ee;&#x9898;&#x4e0d;&#x4f1a;&#x7f16;&#x8bd1;&#xff1a",{"_index":4439,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["x548c;url&#x7f16;&#x7801;&#xff08;&#x5982",{"_index":2230,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x56de;&#x8c03",{"_index":5792,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x56e0;&#x4e3a;&#x53f3;&#x4fa7;&#x662f;&#x6a21;&#x5f0f;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x5305;&#x542b;&#x53e6;&#x5916;&#x7684;&#x63d0;&#x53d6;&#x5668;&#x3002;&#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x94fe;&#x63a5;&#x4e86;&#x4e24;&#x4e2a;&#x63d0;&#x53d6;&#x5668;&#xff1a",{"_index":5660,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x56e0;&#x4e3a;&#x679a;&#x4e3",{"_index":6494,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["x56e0;&#x4e3a;&#x8fd9;&#x4e0d;&#x80fd;&#x603b;&#x662f;&#x88ab;&#x660e;&#x663e;&#x7684;&#x5728;&#x5e9e;&#x5927;&#x7684;&#x7c7b;&#x5c42;&#x7ea7;&#x4e2d;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x5982;&#x679c;&#x5b57;&#x6bb5;&#x4fee;&#x9970;&#x4e86;override&#x5173;&#x952e;&#x5b57;&#x800c;&#x5b9e;&#x9645;&#x4e0a;&#x6ca1;&#x6709;&#x91cd;&#x5199;&#x4efb;&#x4f55;&#x4e1c;&#x897f;&#xff08;&#x4f8b;&#x5982;&#x7531;&#x4e8e;&#x5b57;&#x6bb5;&#x540d;&#x7684;&#x62fc;&#x5199;&#x9519;&#x8bef;&#x5bfc;&#x81f4;&#xff09;&#x4f1a;&#x5f15;&#x53d1;&#x4e00;&#x4e2a;&#x9519;&#x8bef;&#x3002",{"_index":4726,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["x5706;&#x62ec;&#x53f7",{"_index":3528,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5728",{"_index":1019,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5728;&#x4e00;&#x4e2a",{"_index":5623,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{}}}],["x5728;&#x4e00;&#x4e2a;&#x4e0d;&#x4f7f;&#x7528;&#x9ed8;&#x8ba4;&#x503c;&#x53ef;&#x80fd;&#x6709;&#x65f6;&#x66f4;&#x53ef;&#x884c;&#x7684;&#x65b9;&#x6848;&#x7684;&#x6027;&#x80fd;&#x5173;&#x952e;&#x4ee3;&#x7801;&#x4e2d;&#xff0c;&#x8fd9;&#x5e94;&#x8be5;&#x88ab;&#x8003;&#x8651;&#x3002",{"_index":3055,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x5728;&#x4e00;&#x4e2a;&#x5355;&#x5f15;&#x53f7;&#x62ec;&#x8d77;&#x6765;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x4e2d;&#xff0c;&#x50cf;&#x8fde;&#x63a5;&#x6807;&#x8bc6;&#x7b26;&#x4e00;&#x6837;&#x88ab;&#x6267;&#x884c;&#xff1a",{"_index":5678,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["x5728;&#x4e00;&#x4e2a;&#x5bf9;&#x5e94;&#x8fd9;&#x4e2a;&#x6807;&#x8bb0;&#x7684;&#x6761;&#x4ef6;&#x7f16;&#x8bd1;&#x68c0;&#x67e5;&#x4e4b;&#x524d;&#x6216;&#x4e4b;&#x540e;&#x751f;&#x6548;&#x3002",{"_index":6310,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x5728;&#x4e00;&#x4e2a;&#x62ec;&#x53f7",{"_index":4839,"title":{},"body":{"5.表达式/5.12.new/5.12.new.html#5-12-new":{}}}],["x5728;&#x4e00;&#x4e2a;&#x7c7b;&#x7684;&#x5b9a;&#x4e49;&#x4e2d;&#x4f7f;&#x7528;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x65f6;&#xff0c;&#x9664;&#x975e;&#x52a0;&#x5165;&#x4e86;&#x7ea6;&#x675f;&#xff08;&#x7b2c;3.2.1&#x8282;&#xff09;&#x5426;&#x5219;&#x8fd9;&#x4e9b;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x90fd;&#x6ca1;&#x6709;&#x6307;&#x5b9a;&#x7279;&#x5b9a;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x56e0;&#x6b64;&#x7f16;&#x8bd1;&#x5668;&#x5fc5;&#x987b;&#x5047;&#x5b9a;&#x8fd9;&#x4e9b;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x4e3a;&#x4efb;&#x610f;&#x7c7b;&#x578b;&#x4f7f;&#x7528;&#x3002;&#x56e0;&#x6b64;&#xff0c;&#x4e0d;&#x80fd;&#x8bbf;&#x95ee;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x7684;&#x5b57;&#x6bb5;&#x6216;&#x8005",{"_index":3678,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x5728;&#x4e00;&#x4e2a;&#x7ed9;&#x5b9a;&#x6a21;&#x5757;&#xff0c;&#x7c7b;&#x578b;&#x4ece;&#x5934;&#x81f3;&#x5c3e;&#x68c0;&#x67e5",{"_index":4317,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5728;&#x4e00;&#x4e9b;&#x5176;&#x5b83;&#x7684;&#x7f16;&#x7a0b;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;argu",{"_index":2642,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x5728;&#x4e00;&#x5f00;&#x59cb;&#x88ab;&#x521d;&#x59cb;&#x5316;&#x4e3a;&#x4e00;&#x4e2a;&#x7a7a;&#x7684",{"_index":4064,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x5728;&#x4e0a;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x7b2c;&#x4e00;&#x4e2a",{"_index":4050,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x5728;&#x4e24;&#x5e74;&#x4e2d;&#x7ecf;&#x5386;&#x4e86;&#x51e0;&#x4e2a;&#x5c0f;&#x7684;&#x7248;&#x672c;&#xff0c;&#x5728;2006&#x5e74;8&#x6708;&#x6dfb;&#x52a0;&#x4e86;&#x652f;&#x6301",{"_index":1147,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x5728;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x65b9;&#x6cd5",{"_index":3254,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5728;&#x5355;&#x4e00;&#x4e8b;&#x4ef6;&#x60c5;&#x51b5;&#x4e0b;&#x79fb;&#x52a8;&#x53d8;&#x91cf;&#x8868;&#x8fbe;&#x5f0f;&#x5230;&#x5b83;&#x7684;&#x4f7f;&#x7528;&#x4e2d;&#x3002;&#x5728;flash&#x548c",{"_index":6283,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x5728;&#x540e;&#x53f0;&#xff0c;map",{"_index":1721,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["x5728;&#x58f0;&#x660e;&#x65f6;&#x8981;&#x8003;&#x8651;&#x8fd9;&#x4e2a;&#xff0c;&#x662f;&#x5426;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x5e94;&#x8be5;&#x88ab;&#x5185;&#x8054;&#xff08;&#x7b2c;4.4.2&#x8282;&#xff09;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x53ef;&#x80fd;&#x5185;&#x8054;&#x8fdb;&#x6bd4;&#x5728;&#x53ef;&#x89c1;&#x8bed;&#x6cd5;&#x4e2d;&#x66f4;&#x591a;&#x7684;&#x4ee3;&#x7801;&#x3002",{"_index":5200,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["x5728;&#x5b50;&#x7c7b;&#x4e2d;&#x5b9a;&#x4e49;&#x5b83;&#x4eec;&#x81ea;&#x5df1;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x5e76;&#x4e0d;&#x662f;&#x5fc5;&#x987b;&#x7684;&#xff0c;&#x4f46;&#x662f;&#x5982;&#x679c;&#x5b9a;&#x4e49;&#x4e86;&#xff0c;&#x5219;&#x8c03;&#x7528",{"_index":2782,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x5728;&#x5b83;&#x4eec;&#x8fdb;&#x5165;haxe&#x7f16;&#x8bd1;&#x5668;&#x548c;&#x6807;&#x51c6;&#x5e93;&#x5f88;&#x4e45;&#x4e4b;&#x524d;&#x5c31;&#x63d0;&#x4f9b;&#x8bb8;&#x591a;&#x6709;&#x7528;&#x7684;&#x5b8f;&#x5de5;&#x5177;&#x3002;&#x5b83;&#x4ecd;&#x7136;&#x662f;&#x989d;&#x5916;&#x7684;&#x5b8f;&#x5de5;&#x5177;&#x4e3b;&#x8981;&#x7684;&#x5e93;&#xff0c;&#x63d0;&#x4f9b;&#x5176;&#x5b83;&#x6709;&#x7528;&#x7684;&#x529f;&#x80fd;&#x3002",{"_index":6468,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x5728;&#x5e73;&#x53f0;&#x4e4b;&#x95f4;&#x901a;&#x8baf;&#x4e4b;&#x524d;&#xff0c;&#x4e00;&#x4e2a;&#x8fdc;&#x7a0b;&#x5904;&#x7406;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#x5fc5;&#x987b;&#x88ab;&#x5b9a;&#x4e49;&#x3002;&#x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x53ef;&#x4ee5;&#x88ab;&#x5ba2;&#x6237;&#x7aef;&#x4ee3;&#x7801;&#x7684;&#x8fde;&#x63a5;&#x4e0a;&#x8c03;&#x7528;&#x7684;&#x5171;&#x4eab;&#x7684;api&#x3002",{"_index":1455,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{}}}],["x5728;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5230;&#x6765;&#x4e4b;&#x524d;&#xff0c;&#x6240;&#x6709;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x90fd;&#x5b9e;&#x73b0;&#x4e3a;&#x5916;&#x90e8;&#x7c7b;&#x6216;&#x8005;&#x679a;&#x4e3e;&#x3002;&#x867d;&#x7136;&#x8fd9;&#x5f88;&#x597d;&#x7684;&#x8003;&#x8651;&#x4e86;&#x67d0;&#x4e9b;&#x65b9;&#x9762;&#xff0c;&#x5982",{"_index":3558,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5728;&#x66ff;&#x6362;&#x4e2d;&#xff0c;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":1809,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{}}}],["x5728;&#x6784;&#x5efa;&#x6cdb;&#x578b;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x7b2c;3.3.1&#x8282;&#xff09;&#x88ab;&#x5f15;&#x5165;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x6211;&#x4eec;&#x770b;&#x5230;&#x4e86;&#x53e6;&#x4e00;&#x4e2a;&#x81ea;&#x4e0a;&#x800c;&#x4e0b;&#x63a8;&#x65ad;&#x7684;&#x6709;&#x8da3;&#x7528;&#x6cd5",{"_index":4013,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x5728;&#x68c0;&#x7d22;&#x901a;&#x8fc7;&#x5206;&#x914d",{"_index":2878,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x5728;&#x6bcf;&#x4e2a;&#x6d4b;&#x8bd5;&#x8fd0;&#x884c;&#x4e4b;&#x524d;&#x8c03;&#x7528;&#x3002",{"_index":1571,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{}}}],["x5728;&#x6bcf;&#x4e2a;&#x6d4b;&#x8bd5;&#x8fd0;&#x884c;&#x4e4b;&#x540e;&#x8c03;&#x7528;&#x3002",{"_index":1572,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{}}}],["x5728;&#x7b2c;&#x4e8c;&#x79cd;&#x60c5;&#x51b5;&#xff0c;&#x5982;&#x679c;&#x8bc4;&#x5b9a;&#x5339;&#x914d",{"_index":5585,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["x5728;&#x7c7b;&#x8bb0;&#x6cd5;&#xff08;class",{"_index":2941,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x5728;&#x7f16;&#x7a0b;&#x8bed;&#x8a00;&#x4e2d;&#x6709;&#x4e00;&#x4e2a;&#x5355;&#x72ec;&#x3001;&#x6574;&#x6d01;&#x7684;&#x4e3a;&#x7a7a;&#x6027;&#x5b9a;&#x4e49;&#x975e;&#x5e38;&#x5e38;&#x89c1;&#x3002;&#x7136;&#x800c;&#xff0c;hax",{"_index":2657,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5728;&#x8ba8;&#x8bba",{"_index":3614,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x5728;&#x8f93;&#x51fa;&#x4e2d;&#x5b8c;&#x5168;&#x6d88;&#x5931;&#x4e86;&#xff0c;&#x5269;&#x4e0b;&#x7684;&#x53ea;&#x662f;&#x4e00;&#x4e2a;&#x5b83;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7684;&#x503c;&#xff0c;int&#x3002;&#x56e0;&#x4e3a",{"_index":3547,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5728;&#x8fd0;&#x884c;&#x65f6;&#xff0c;&#x5757;&#x4ece;&#x5934;&#x81f3;&#x5c3e;&#x6267;&#x884c;&#x3002;&#x63a7;&#x5236;&#x6d41;&#xff08;&#x5982;&#x5f02;&#x5e38;&#xff08;&#x7b2c;5.18&#x8282;&#xff09;&#x6216;&#x8005;&#x8fd4;&#x56de;&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5.19&#x8282;&#xff09;&#xff09;&#x53ef;&#x80fd;&#x5728;&#x6240;&#x6709;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x88ab;&#x6267;&#x884c;&#x4e4b;&#x524d;&#x79bb;&#x5f00;&#x5757;&#x3002",{"_index":4781,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["x5728;&#x8fd9;&#x4e00;&#x70b9;&#x4e0a;&#xff0c;&#x770b;&#x5230;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x5b57;&#x6bb5;&#x7684;&#x8c03;&#x7528;&#x88ab;&#x63d2;&#x5165;&#x5230;&#x8f93;&#x5165;&#x5185;&#x5bb9;&#x5e94;&#x8be5;&#x4e0d;&#x4f1a;&#x592a;&#x8ba9;&#x4eba;&#x5403;&#x60ca;&#xff1a",{"_index":3360,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x5728;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x6211;&#x4eec;&#x51b3;&#x5b9a;&#x8981;&#x5ffd;&#x7565;&#x6210;&#x5458;&#x53d8;&#x91cf",{"_index":2467,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["x5728;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x6211;&#x4eec;&#x5b9e;&#x9645;&#x4e0a;&#x5bfc;&#x5165;&#x4e86;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#xff0c;&#x800c;&#x4e0d;&#x53ea;&#x662f;&#x6a21;&#x5757;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x6240;&#x6709;&#x5728;&#x88ab;&#x5bfc;&#x5165;&#x7684;&#x6a21;&#x5757;&#x4e2d;&#x5b9a;&#x4e49;&#x7684;&#x7c7b;&#x578b;&#x90fd;&#x662f;&#x53ef;&#x7528;&#x7684;&#x3002",{"_index":4180,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5728;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x6211;&#x4eec;&#x9996;&#x5148;&#x8f6c;&#x6362;&#x4e00;&#x4e2a;child1&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x4e3a;base&#xff0c;&#x56e0;&#x4e3a;child1&#x662f;&#x4e00;&#x4e2a;base&#x7684;&#x5b50;&#x7c7b;&#xff08;&#x7b2c;2.3.2&#x8282;&#xff09;&#xff0c;&#x6240;&#x4ee5;&#x8f6c;&#x6362;&#x6210;&#x529f;&#x3002;&#x7136;&#x540e;&#x5c1d;&#x8bd5;&#x8f6c;&#x6362;&#x540c;&#x6837;&#x7684;&#x7c7b;&#x5b9e;&#x4f8b;&#x4e3a",{"_index":5076,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["x5728;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x62a5;&#x544a;&#x6807;&#x51c6;&#x7684",{"_index":6027,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["x5728;&#x8fd9;&#x4e2a;&#x7279;&#x6b8a;&#x7684;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x5728",{"_index":3946,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x5728;&#x8fd9;&#x6bb5;&#x4ee3;&#x7801;&#x4e2d;&#x53d8;&#x91cf",{"_index":2828,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x5728;&#x9488;&#x5bf9;&#x65b9;&#x6cd5;&#x7684;&#x65f6;&#x5019;&#x4f7f;&#x7528;&#xff0c;&#x800c",{"_index":2645,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x5728;&#x9759;&#x6001;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x8f93;&#x51fa",{"_index":2699,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5728;&#x9759;&#x6001;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#xff0c;&#x4f7f;&#x7528",{"_index":2015,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{}}}],["x5728;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":2689,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5728;2008&#x5e74;7&#x6708;&#x53d1;&#x5e03;&#xff0c;&#x5f15;&#x5165;&#x4e86",{"_index":1153,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x5728;api",{"_index":1481,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.远程处理.html#10-13-远程处理":{}}}],["x5728;api&#x6587;&#x6863;&#x4e2d;&#x67e5;&#x770b",{"_index":1578,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["x5728;flash",{"_index":1832,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["x5728;flash&#x3001;php&#x3001;c#&#x548c;java&#x4e2d;&#xff0c;&#x4f7f;&#x7528;&#x539f;&#x751f;&#x7684;&#x5b9e;&#x73b0;&#x3002",{"_index":1831,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["x5728;hax",{"_index":1625,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x5728;haxe&#x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684;&#x4e00;&#x4e9b;&#x7c7b;&#x9002;&#x7528;&#x4e8e;&#x9759;&#x6001;&#x6269;&#x5c55;&#x7528;&#x6cd5;&#x3002;&#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x5c55;&#x793a;&#x4e86;stringtools&#x7684;&#x7528;&#x6cd5;&#xff1a",{"_index":5432,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x5728;javascript&#x4e2d;&#xff0c;&#x8fd0;&#x884c;&#x65f6;&#x4f7f;&#x7528;&#x5bf9;&#x8c61",{"_index":1826,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["x5728;neko",{"_index":1828,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["x5730;&#x5740",{"_index":13,"title":{},"body":{"index.html#关于本文档":{}}}],["x5730;&#x5740;&#xff1a",{"_index":1902,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x5757;&#x53ef;&#x4ee5;&#x5305;&#x542b;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#xff0c;&#x901a;&#x8fc7",{"_index":4776,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["x5757;&#x6355;&#x6349;&#x5230;&#x3002",{"_index":5079,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["x57fa;&#x672c;&#x4f7f;&#x7528",{"_index":705,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x57fa;&#x672c;&#x7c7b;&#x578b;&#x5305;&#x62ec",{"_index":2619,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x57fa;&#x91d1;&#x4f1a",{"_index":1175,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x57fa;&#x91d1;&#x4f1a;&#x65f6",{"_index":1061,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["x57fa;&#x91d1;&#x4f1a;&#x7684",{"_index":1083,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{}}}],["x58f0;&#x660e",{"_index":3243,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x58f0;&#x660e;&#x4e86;&#x4e00;&#x4e2a",{"_index":2904,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x58f0;&#x660e;&#x7684;&#x53d8;&#x91cf;&#x5f88;&#x76f8;&#x4f3c;&#xff0c;&#x4f46;&#x662f;&#x6709;&#x51e0;&#x4e2a;&#x4f18;&#x70b9;&#xff1a",{"_index":3413,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x58f0;&#x660e;&#x7684;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#xff08;&#x7b2c;5.10&#x8282;&#xff09;&#xff08;&#x5305;&#x62ec;&#x51fd;&#x6570;&#x53c2;&#x6570;&#xff09",{"_index":4278,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x58f0;&#x660e;&#xff08;&#x7b2c;3.7.2&#x8282;&#xff09;&#x3001;us",{"_index":5986,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["x58f0;&#x660e;&#xff08;&#x7b2c;6.3&#x8282;&#xff09;&#x4e2d;&#x6216;&#x8005;&#x4efb;&#x4f55;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x88ab;&#x5f15;&#x7528;&#x7684;&#x4f4d;&#x7f6e;&#x3002;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x9274;&#x522b;&#x4e09;&#x79cd;&#x4e0d;&#x540c;&#x7684;&#x60c5;&#x51b5;&#xff1a",{"_index":5987,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["x58f0;&#x660e;&#xff09;&#x3002",{"_index":3246,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x590d;&#x5408;&#x7c7b;&#x578b;&#x662f;&#x6307;&#x62e5;&#x6709;&#x5b50;&#x7c7b;&#x578b;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x5305;&#x62ec;&#x4f7f;&#x7528",{"_index":114,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x590d;&#x6742;&#x7684;&#x7ed3;&#x6784;&#x53ef;&#x4ee5;&#x88ab;&#x6839;&#x636e;&#x6a21;&#x5f0f;&#x6765;&#x5339;&#x914d;&#xff0c;&#x4ece;&#x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x7ed3;&#x6784;&#x4e2d;&#x63d0;&#x53d6;&#x4fe1;&#x606f;&#xff0c;&#x5e76;&#x5bf9;&#x7279;&#x5b9a;&#x7684;&#x503c;&#x7ec4;&#x5408;&#x5b9a;&#x4e49;&#x7279;&#x5b9a;&#x7684;&#x64cd;&#x4f5c;&#x3002",{"_index":561,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x5916;&#x90e8;&#x6587;&#x4ef6;&#x4f7f;&#x7528",{"_index":6118,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html#8-4-1-嵌入资源":{}}}],["x5916;&#x90e8;&#x7684;&#xff08;&#x7b2c;6.2&#x8282;&#xff09",{"_index":6204,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5916;&#x90e8;&#x7c7b",{"_index":513,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x5916;&#x90e8;&#x7c7b;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x4e8e;&#x4ee5;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x5b89;&#x5168;&#x7684;&#x65b9;&#x5f0f;&#x63cf;&#x8ff0;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7279;&#x5b9a;&#x7684;&#x4ea4;&#x4e92;&#x3002",{"_index":515,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x591a;&#x4e2a;&#x503c;&#x7684;&#x5339;&#x914d",{"_index":5714,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x591a;&#x4e2a;&#x7ed3;&#x6784;&#x53ef;&#x4ee5;&#x88ab;&#x540c;&#x65f6;&#x6269;&#x5c55;&#xff1a",{"_index":2979,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x591a;&#x6570;&#x60c5;&#x51b5;&#xff0c;&#x548c;&#x53d8;&#x91cf;&#x7684;&#x8bed;&#x6cd5;&#x7c7b;&#x4f3c;&#xff0c;&#x5b9e;&#x9645;&#x4e0a;&#x9002;&#x7528;&#x540c;&#x6837;&#x7684;&#x89c4;&#x5219;&#x3002;&#x5c5e;&#x6027;&#x88ab;&#x8bc6;&#x522b;&#xff0c;&#x901a;&#x8fc7",{"_index":4523,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x591a;&#x6570;&#x65f6;&#x5019;&#xff0c;&#x5b8f;&#x7684;&#x53c2;&#x6570;&#x662f;&#x8868;&#x793a;&#x4e3a;&#x4e00;&#x4e2a",{"_index":6351,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["x591a;&#x6570;lambda",{"_index":2023,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x591a;&#x884c;&#x5339;&#x914d;&#xff0c",{"_index":1909,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x5927;&#x4e8e",{"_index":2529,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x5927;&#x4e8e;&#x64cd;&#x4f5c;&#x7b26",{"_index":2969,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x5927;&#x4e8e;&#x7b49;&#x4e8",{"_index":2530,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x5927;&#x591a;&#x6570;&#x65f6;&#x5019;&#xff0c;&#x7c7b;&#x578b;&#x81ea;&#x5df1;&#x88ab;&#x63a8;&#x65ad;&#xff0c;&#x7136;&#x540e;&#x53ef;&#x4ee5;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x4e00;&#x4e2a;&#x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x7136;&#x800c;&#x5728;&#x4e00;&#x4e9b;&#x5730;&#x65b9;&#xff0c;&#x4e00;&#x4e2a;&#x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#x53ef;&#x80fd;&#x88ab;&#x7528;&#x6765;&#x5f71;&#x54cd;&#x63a8;&#x65ad;&#x3002;&#x7136;&#x540e;&#x6211;&#x4eec;&#x8ba8;&#x8bba;&#x81ea;&#x4e0a;&#x800c;&#x4e0b;&#x7684;&#x63a8;&#x65ad;&#x3002",{"_index":4000,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x5927;&#x610f;&#x53ef;&#x80fd;&#x5c31;&#x662f;&#x8bf4;&#xff0c;using&#x662f;&#x4f5c;&#x4e3a;&#x9759;&#x6001;&#x6269;&#x5c55;&#x7684;&#x5173;&#x952e;&#x5b57;&#x5b58;&#x5728;&#x3002;&#x5982;&#x679c;&#x672c;&#x8282;&#x6807;&#x9898;&#x4f7f;&#x7528",{"_index":5449,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x5927;&#x62ec;&#x53f7",{"_index":3530,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5931;&#x8d25",{"_index":4308,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5934;&#x3002",{"_index":1516,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{}}}],["x5982",{"_index":1194,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x5982;&#x4e0b;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x4f5c;&#x4e3a;&#x672c;&#x8282;&#x5269;&#x4f59;&#x90e8;&#x5206;&#x7684;&#x57fa;&#x7840;&#xff1a",{"_index":2795,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x5982;&#x4e0b;&#x7684;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x5c55;&#x793a;&#x76f4;&#x63a5;&#x8f6c;&#x6362;&#x7684;&#x4e00;&#x4e2a;&#x4f8b;&#x5b50;&#xff1a",{"_index":3234,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5982;&#x4e0b;&#x7684;&#x4f8b;&#x5b50;&#x6f14;&#x793a;&#x4e86;&#x7c7b;&#x578b;&#x6784;&#x5efa;&#x3002;&#x6ce8;&#x610f;&#xff0c;&#x5b83;&#x88ab;&#x5206;&#x6210;&#x4e24;&#x4e2a;&#x6587;&#x4ef6;&#x662f;&#x6709;&#x539f;&#x56e0;&#x7684;&#xff1a;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x5305;&#x542b;&#x4e00;&#x4e2a;&#x5b8f;&#x51fd;&#x6570;&#xff0c;&#x5b83;&#x4e5f;&#x5fc5;&#x987b;&#x7c7b;&#x578b;&#x5316;&#x5230",{"_index":6576,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5982;&#x4e0b;&#x7684;&#x8d4b;&#x503c;&#x662f;&#x5141;&#x8bb8;&#x7684;&#xff1a",{"_index":3756,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x5982;&#x4e0b;&#x9762;&#x7684;haxe/neko&#x793a;&#x4f8b;&#x5c55;&#x793a;&#x7684;&#xff0c;&#x4f60;&#x53ef;&#x4ee5;&#x7b80;&#x5355;&#x7684;&#x8fde;&#x63a5;&#x5230;&#x670d;&#x52a1;&#x7aef;&#x53e3;&#xff0c;&#x5e76;&#x53d1;&#x9001;&#x6240;&#x6709;&#x7684;&#x547d;&#x4ee4;&#xff08;&#x6216;&#x8005;&#x6bcf;&#x884c;&#xff09;&#x4ee5;0&#x4e8c;&#x8fdb;&#x5236;&#x5b57;&#x7b26;&#x7ed3;&#x675f;&#x3002;&#x7136;&#x540e;&#x5c31;&#x53ef;&#x4ee5;&#x8bfb;&#x53d6;&#x7ed3;&#x679c;&#x3002",{"_index":6105,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5982;&#x4e0b;haxe&#x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684;&#x7c7b;&#x90fd;&#x662f;&#x8bbe;&#x8ba1;&#x4f5c;&#x4e3a;&#x9759;&#x6001;&#x6269;&#x5c55;&#x4f7f;&#x7528;&#xff1a",{"_index":5435,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x5982;&#x524d;&#x6240;&#x8ff0;&#xff0c;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x662f;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x65f6;&#x529f;&#x80fd;&#xff0c;&#x6240;&#x4ee5;&#x770b;&#x770b;&#x4e0a;&#x9762;&#x793a;&#x4f8b;&#x5b9e;&#x9645;&#x751f;&#x6210;&#x7684;&#x5185;&#x5bb9;&#x4f1a;&#x5f88;&#x6709;&#x8da3;&#x3002;&#x4e00;&#x4e2a;&#x5408;&#x9002;&#x7684;&#x76ee;&#x6807;&#x662f",{"_index":3543,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5982;&#x540c;&#x9884;&#x671f;&#x90a3;&#x6837;&#x5de5;&#x4f5c;&#xff0c;&#x7136;&#x800c;&#x6574;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x5fc5;&#x987b;&#x88ab;&#x5b8c;&#x5168;&#x653e;&#x5728;&#x62ec;&#x53f7;&#x4e2d;&#x3002",{"_index":5275,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x5982;&#x679c",{"_index":2587,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{},"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a",{"_index":2696,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x6709;&#x5176;&#x5b83;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x6216;&#x8005;&#x8fd4;&#x56de;&#x503c;&#xff0c;&#x5219;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x62ec;&#x53f7;&#x5bf9;&#x5b83;&#x4eec;&#x8fdb;&#x884c;&#x6b63;&#x786e;&#x7684;&#x5206;&#x7ec4;&#x3002;&#x4f8b;&#x5982;&#xff0c",{"_index":3097,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x5b8f;&#x6700;&#x540e;&#x7684;&#x53c2;&#x6570;&#x662f",{"_index":6343,"title":{},"body":{"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x547d;&#x540d;&#x4e3a",{"_index":4291,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x6784;&#x9020;&#x51fd;&#x6570;&#x58f0;&#x660e;&#x4e3a",{"_index":5363,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#x547d;&#x540d;&#x4e3a;i&#x58f0;&#x660e;&#x5728;&#x4e00;&#x4e2a;&#x5bfc;&#x5165;&#x7684;&#x679a;&#x4e3e;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":4298,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7269;&#x7406;&#x5b57;&#x6bb5;&#x662f;&#x771f;&#x5b9e;&#x51c6;&#x5907;&#x7684;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x5f52;&#x4e8e;&#x8ba8;&#x8bba;&#x7684;&#x5b57;&#x6bb5;&#x88ab;&#x5f3a;&#x5236;&#x4e0",{"_index":4416,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x540d;&#x4e3a",{"_index":4310,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x540d;&#x4e3a;i&#x5728;&#x9876;&#x5c42;&#x53ef;&#x7528;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":4314,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x6216;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x5728;&#x4e00;&#x4e2a;&#x5bfc;&#x5165;&#x5b83;&#x7684;&#x6a21;&#x5757;&#x4e2d;&#x7ecf;&#x5e38;&#x4f7f;&#x7528;&#xff0c;&#x53ef;&#x4ee5;&#x4e3a;&#x5b83;&#x5f15;&#x5165;&#x522b;&#x540d;&#x4e3a;&#x4e00;&#x4e2a;&#x7b80;&#x77ed;&#x7684;&#x540d;&#x5b57;&#x3002;&#x8fd9;&#x4e5f;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x901a;&#x8fc7;&#x7ed9;&#x5b9a;&#x4e00;&#x4e2a;&#x552f;&#x4e00;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#x6765;&#x6d88;&#x9664;&#x547d;&#x540d;&#x51b2;&#x7a81;&#x3002",{"_index":4208,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x6784;&#x5efa;&#x5b8f;&#x4e0d;&#x5e94;&#x4fee;&#x6539;&#x4efb;&#x4f55;&#x5185;&#x5bb9;&#xff0c;&#x5b8f;&#x53ef;&#x4ee5;&#x8fd4;&#x56de;nul",{"_index":6603,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x8def;&#x5f84;&#x5728;&#x4e00;&#x4e2a",{"_index":4173,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x5b9a;&#x4e49;&#x4e86;&#x6210;&#x5458;&#x65b9;&#x6cd5",{"_index":2464,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x6709",{"_index":6511,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x9700;&#x8981;&#x88ab;&#x4ece;&#x547d;&#x4ee4;&#x884c;&#x6807;&#x8bb0",{"_index":5865,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x6269;&#x5c55;&#x5e26;&#x6709;&#x7b2c;&#x4e00;&#x4e2a;&#x5f53;&#x524d;&#x7c7b;&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x53ef;&#x7528;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":4296,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x65b9;&#x6cd5",{"_index":4299,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;enum&#x88ab;&#x5bfc;&#x5165;&#xff08;&#x76f4;&#x63a5;&#x6216;&#x4f5c;&#x4e3a;&#x6a21;&#x5757;&#x7684;&#x4e00;&#x90e8;&#x5206;&#x88ab;&#x5bfc;&#x5165;&#xff09;&#xff0c;&#x6240;&#x6709;&#x5b83;&#x7684;enum&#x6784;&#x9020;&#x51fd;&#x6570;&#xff08;&#x7b2c;2.4.1&#x8282;&#xff09;&#x540c;&#x6837;&#x4e5f;&#x88ab;&#x5bfc;&#x5165;&#xff08;&#x8fd9;&#x5c31;&#x662f;&#x4e3a;&#x4ec0;&#x4e48;&#x5728;&#x4e0a;&#x9762;&#x4f8b;&#x5b50;&#x4e2d;&#x5141;&#x8bb8",{"_index":4190,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5982;&#x679c;&#x4e0a;&#x9762;&#x6ce8;&#x91ca;&#x6389;&#x7684;&#x884c;&#x6ca1;&#x6709;&#x88ab;&#x6ce8;&#x91ca;&#xff0c;&#x7a0b;&#x5e8f;&#x4e0d;&#x4f1a;&#x901a;&#x8fc7;&#x7f16;&#x8bd1;&#xff0c;&#x56e0;&#x4e3a",{"_index":2841,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x5982;&#x679c;&#x4e0d;&#x662f;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#xff0c;&#x4ece;&#x4e00;&#x4e2a;&#x5b58;&#x53d6;&#x5668;&#x5185;&#x90e8;&#x8bbf;&#x95ee;&#x5b57;&#x6bb5;&#x5bfc;&#x81f4;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x9519;&#x8bef;&#xff1a",{"_index":4415,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x5982;&#x679c;&#x4e3a",{"_index":2442,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{}}}],["x5982;&#x679c;&#x4f60;&#x7684;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x53ef;&#x4ee5;&#x5229;&#x7528;&#x6574;&#x6570;&#x8fd0;&#x7b97;&#xff0c;&#x4f8b;&#x5982;&#x6574;&#x6570;&#x9664;&#x6cd5;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x5305;&#x88f9;&#x5230",{"_index":1924,"title":{},"body":{"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{}}}],["x5982;&#x679c;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x8d1f;&#x7d22;&#x5f15;&#x5199;&#x8bbf;&#x95ee;&#xff0c;&#x7ed3;&#x679c;&#x662f;&#x672a;&#x6307;&#x5b9a;&#x7684;&#x3002",{"_index":1617,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x5982;&#x679c;&#x4f7f;&#x7528;&#x5728;&#x7c7b;&#x4e0a;&#xff0c;&#x7c7b;&#x548c;&#x6240;&#x6709;&#x5b57;&#x6bb5;&#x4e00;&#x8d77;&#x90fd;&#x4e0d;&#x4f1a;&#x53d7;&#x5230;dce&#x7684;&#x5f71;&#x54cd;&#x3002;&#x5982;&#x679c;&#x7528;&#x5728;&#x5b57;&#x6bb5;&#x4e0a;&#xff0c;&#x90a3;&#x4e2a;&#x5b57;&#x6bb5;&#x4e0d;&#x53d7;dce&#x5f71;&#x54cd;&#x3002",{"_index":5861,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x5982;&#x679c;&#x5141;&#x8bb8;&#x8bbf;&#x95ee;&#x4e00;&#x4e2a",{"_index":5350,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5982;&#x679c;&#x53ea;&#x6709;&#x4e00;&#x7ec4;&#x6709;&#x9650;&#x7684;&#x503c;&#x88ab;&#x5141;&#x8bb8;&#x4f7f;&#x7528;&#xff0c;&#x90a3;&#x4e48;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x662f;&#x4e00;&#x4e2a;&#x4e0d;&#x9519;&#x7684;&#x9009;&#x62e9;&#x3002;&#x4e2a;&#x4f53;&#x7684",{"_index":2875,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x5982;&#x679c;&#x5728;&#x8fd0;&#x884c;&#x65f6;try&#x8868;&#x8fbe;&#x5f0f;&#x5f15;&#x53d1;&#x4e00;&#x4e2a",{"_index":4970,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["x5982;&#x679c;&#x5b57;&#x6bb5;&#x662f;&#x901a;&#x8fc7",{"_index":3141,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5982;&#x679c;&#x5b57;&#x6bb5;&#x88ab;&#x58f0;&#x660e;&#x5728;&#x4e00;&#x4e2a;&#x63a5;&#x53e3;&#xff08;&#x7b2c;2.3.3&#x8282;&#xff09",{"_index":4647,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x5982;&#x679c;&#x5b57;&#x6bb5;&#x91cd;&#x8f7d;&#xff08;&#x7b2c;4.3.1&#x8282;&#xff09;&#x4e86;&#x4e00;&#x4e2a",{"_index":4648,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x5982;&#x679c;&#x5bf9;&#x4e00;&#x4e2a;&#x4e0d;&#x5b58;&#x5728;&#x7684;&#x7d22;&#x5f15;&#x505a;&#x51fa;&#x4e00;&#x4e2a;&#x8bfb;&#x8bbf;&#x95ee;&#xff0c;&#x5c06;&#x6839;&#x636e;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x503c;&#x3002",{"_index":1615,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x5982;&#x679c;&#x5bf9;&#x4e00;&#x4e2a;&#x8d8a;&#x754c;&#x7684;&#x6b63;&#x7d22;&#x5f15;&#x505a;&#x51fa;&#x4e00;&#x4e2a;&#x5199;&#x8bbf;&#x95ee;&#xff0c;&#x5219;&#x5728;&#x6700;&#x540e;&#x6709;&#x5b9a;&#x4e49;&#x7684;&#x7d22;&#x5f15;&#x4e0e;&#x8fd9;&#x4e2a;&#x65b0;&#x5199;&#x5165;&#x7684;&#x7d22;&#x5f15;&#x9879;&#x4e4b;&#x95f4;&#x7684;&#x6240;&#x6709;&#x4f4d;&#x7f6e;&#x63d2;&#x5165;null&#xff08;&#x6216;&#x8005;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff08;&#x7b2c;2.2&#x8282;&#xff09;&#x4e2d;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.1&#x8282;&#xff09;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#xff08;&#x7b2c;2.2&#x8282;&#xff09;&#xff09;&#x3002",{"_index":1616,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x5982;&#x679c;&#x5e8f;&#x5217;&#x5316;&#x7ed3;&#x679c;&#x88ab;&#x5b58;&#x50a8;&#xff0c;&#x4e4b;&#x540e;&#x4f7f;&#x7528;&#x4e8e;&#x53cd;&#x5e8f;&#x5217;&#x5316;&#xff0c;&#x5fc5;&#x987b;&#x6ce8;&#x610f;&#x5f53;&#x4f7f;&#x7528;&#x7c7b;&#x548c;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x65f6;&#x8981;&#x4fdd;&#x6301;&#x517c;&#x5bb9;&#x6027;&#x3002;&#x4e4b;&#x540e;&#x91cd;&#x8981;&#x7684;&#x662f;&#x51c6;&#x786e;&#x7406;&#x89e3;&#x53cd;&#x5e8f;&#x5217;&#x5316;&#x5982;&#x4f55;&#x5b9e;&#x73b0;&#x7684;&#x3002",{"_index":2448,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x5982;&#x679c;&#x5f53;&#x524d;&#x7684;&#x5305;&#x5305;&#x542b;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x540d;&#x4e3a",{"_index":4312,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x5f53;&#x524d;&#x7684;&#x5b57;&#x6bb5;&#x662f;&#x9759;&#x6001;&#x7684;&#xff0c;&#x8df3;&#x5230;6",{"_index":4293,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x5f53;&#x524d;&#x7684;&#x7c7b;&#x6216;&#x8005;&#x4efb;&#x4f55;&#x5b83;&#x7684;&#x7236;&#x7c7b;&#x6709;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#x547d;&#x540d;&#x4e3a",{"_index":4294,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x5f53;&#x524d;&#x7684;&#x7c7b;&#x6709;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x547d;&#x540d;&#x4e3a",{"_index":4297,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x60f3;&#x8981;&#x5b9a;&#x4e49;&#x4e00;&#x4e2a",{"_index":2899,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x5982;&#x679c;&#x6709;&#xff0c;haxe&#x4f7f;&#x7528;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x7684;&#x539f;&#x751f;&#x8d44;&#x6e90;&#x7ed1;&#x5b9a;&#xff0c;&#x5426;&#x5219;&#x5b83;&#x63d0;&#x4f9b;&#x81ea;&#x5df1;&#x7684;&#x5b9e;&#x73b0;&#x3002",{"_index":6155,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["x5982;&#x679c;&#x6a21;&#x5757;&#x548c;&#x7c7b;&#x578b;&#x540d;&#x662f;&#x76f8;&#x540c;&#x7684;&#xff0c;&#x91cd;&#x590d;&#x7684;&#x90e8;&#x5206;&#x53ef;&#x4ee5;&#x88ab;&#x7701;&#x7565;&#xff0c;&#x4f7f;&#x7528",{"_index":4242,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x5982;&#x679c;&#x6b63;&#x786e;&#x7684;&#x8c03;&#x7528;error&#x662f;&#x5185;&#x8054;&#x7684;&#xff0c;&#x7a0b;&#x5e8f;&#x7f16;&#x8bd1;&#x6b63;&#x786e;&#xff0c;&#x56e0;&#x4e3a;&#x63a7;&#x5236;&#x6d41;&#x68c0;&#x67e5;&#x5668;&#x6ee1;&#x610f;&#x5185;&#x8054;&#x7684;throw&#xff08;&#x7b2c;5.22&#x8282;&#xff09;&#x8868;&#x8fbe;&#x5f0f;&#x3002;&#x5982;&#x679c;&#x5185;&#x8054;&#x90e8;&#x6267;&#x884c;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x53ea;&#x53d1;&#x73b0;&#x4e00;&#x4e2a;error&#x51fd;&#x6570;&#x7684;&#x8c03;&#x7528;&#x5e76;&#x53d1;&#x51fa;&#x9519;&#x8bef",{"_index":4711,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x5982;&#x679c;&#x6ca1;&#x6709;&#x8fd9;&#x6837;&#x7684;&#x7c7b;&#x578b;&#x5b58;&#x5728;&#x5219;&#x4e3a;&#x88ab;&#x901a;&#x8fc7;&#x7c7b;&#x6216;&#x8005;null&#x52a8;&#x6001;&#x5b9e;&#x73b0;&#xff08;&#x7b2c;2.7.2&#x8282;&#xff09;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":6210,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5982;&#x679c;&#x7528;&#x4e8e;&#x4e00;&#x4e2a",{"_index":6378,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x5982;&#x679c;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x540d;&#x79f0;&#x662f",{"_index":6551,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x5982;&#x679c;&#x7c7b;&#x578b;&#x540d;&#x4e3a",{"_index":4302,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x7c7b;&#x88ab;&#x58f0;&#x660e;&#x4e3a",{"_index":4646,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x5982;&#x679c;&#x8868;&#x8fbe;&#x5f0f;&#x4e0d;&#x662f",{"_index":4304,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x88ab;&#x63d0;&#x5230;&#x7684;&#x6587;&#x4ef6;&#x5728;&#x611f;&#x5174;&#x8da3;&#x7684;&#x4f4d;&#x7f6e;&#x5305;&#x542b;&#x4e00;&#x4e2a",{"_index":5908,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x5982;&#x679c;&#x88ab;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#x6240;&#x4fee;&#x9970;&#x7684;&#x662f;&#x4e00;&#x4e2a;&#x7c7b;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff0c;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#x4f1a;&#x88ab;&#x6269;&#x5c55;&#x81f3;&#x8be5;&#x7c7b;&#x578b;&#x7684;&#x6240;&#x6709;&#x5b57;&#x6bb5;&#x4e0a;&#x3002;&#x540c;&#x6837;&#x5730;&#xff0c;&#x5982;&#x679c;&#x5b83;&#x662f;&#x4e00;&#x4e2a;&#x5305;&#xff0c;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#x5c06;&#x4f1a;&#x6269;&#x5c55;&#x81f3;&#x8fd9;&#x4e2a;&#x5305;&#x5185;&#x6240;&#x6709;&#x7684;&#x7c7b;&#x578b;&#x3001;&#x4ee5;&#x53ca;&#x8fd9;&#x4e9b;&#x7c7b;&#x578b;&#x7684;&#x6240;&#x6709;&#x5b57;&#x6bb5;&#x4e0a;&#x3002",{"_index":5325,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5982;&#x679c;&#x8fd9;&#x4e2a;&#x6587;&#x4ef6;&#x4fdd;&#x5b58;&#x4e3a",{"_index":5930,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["x5982;&#x679c;a",{"_index":1566,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{}}}],["x5982;&#x679c;a&#x4e3a",{"_index":1564,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{}}}],["x5982;&#x679c;a&#x548c;b&#x76f8;&#x7b49;&#x5219;&#x6210;&#x529f;&#xff0c;a&#x662f;&#x6d4b;&#x8bd5;&#x7684;&#x503c;&#xff0c;b&#x662f;&#x671f;&#x671b;&#x7684;&#x503c;&#x3002",{"_index":1563,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{}}}],["x5982;&#x679c;i",{"_index":4288,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;i&#x548c;&#x8fd9;&#x4e2a;&#x76f8;&#x7b49;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x8fd9;&#x4e2a;&#x5e38;&#x91cf;&#x5e76;&#x505c;&#x6b62",{"_index":4306,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;i&#x901a;&#x8fc7;&#x4e00;&#x4e2a;&#x5c0f;&#x5199;&#x5b57;&#x6bcd;&#x5f00;&#x59cb;&#xff0c;&#x8df3;&#x5230;11",{"_index":4301,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;mytre",{"_index":5562,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x5982;&#x8bed;&#x6cd5;&#x6240;&#x6697;&#x793a;&#x7684;&#xff0c;&#x5faa;&#x73af;&#x4f53;&#x8868;&#x8fbe;&#x5f0f;&#x81f3;&#x5c11;&#x4f1a;&#x6267;&#x884c;&#x4e00;&#x6b21;&#xff0c;&#x8fd9;&#x548c",{"_index":4906,"title":{},"body":{"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{}}}],["x5a92;&#x4f53;&#x670d;&#x52a1;&#x5668",{"_index":1441,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x5b50;&#x6a21;&#x677f",{"_index":2145,"title":{"10.标准库/10.6.模板/10.6.模板.html#子模板":{}},"body":{}}],["x5b50;&#x7c7b;&#x5206;&#x914d;&#x5230;&#x7236;&#x7c7b",{"_index":3757,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x5b50;&#x7c7b;&#x548c;&#x5b9e;&#x73b0;&#x7c7b;&#x7684;&#x8bbf;&#x95ee;&#x6269;&#x5c55;&#x53ea;&#x652f;&#x6301;hax",{"_index":5355,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5b57;&#x6bb5",{"_index":4649,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["x5b57;&#x6bb5;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x50cf;&#x7c7b;&#x4e00;&#x6837;&#x5b9e;&#x4f8b;&#x5316;&#x548c;&#x4f7f;&#x7528;&#xff1a",{"_index":3542,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5b57;&#x6bb5;&#x3002;&#x8fd9;&#x4e2a;&#x5b57;&#x6bb5;&#x662f;&#x4e00;&#x4e2a",{"_index":6584,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b57;&#x6bb5;&#x503c;&#x5bf9;&#x5e94;&#x5143;&#x6570;&#x636e;&#x53c2;&#x6570;&#x3002;&#x5982;&#x679c;&#x6ca1;&#x6709;&#x53c2;&#x6570;&#xff0c;&#x5b57;&#x6bb5;&#x503c;&#x4e3a",{"_index":5829,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x5b57;&#x6bb5;&#x53ef;&#x4ee5;&#x5728",{"_index":5327,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5b57;&#x6bb5;&#x53ef;&#x7528;&#x7684;&#x91cd;&#x8f7d;&#x5217;&#x8868;&#xff0c;&#x6216;&#x8005;&#x5982;&#x679c;&#x6ca1;&#x6709;&#x5b58;&#x5728;&#x7684;&#x91cd;&#x8f7d;&#x5219;&#x4e3a",{"_index":6235,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b57;&#x6bb5;&#x540d",{"_index":6393,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x5b57;&#x6bb5;&#x540d;&#x3002",{"_index":6221,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b57;&#x6bb5;&#x540d;&#x540e;&#x5f00;&#x53e3;&#x7684;&#x62ec;&#x53f7",{"_index":4524,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x5b57;&#x6bb5;&#x548c",{"_index":3539,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5b57;&#x6bb5;&#x5b8c;&#x6210;&#x5728;&#x4e00;&#x4e2a;&#x70b9;&#x53f7",{"_index":5927,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x5b57;&#x6bb5;&#x5b9a;&#x4e49;&#x7684;&#x884c;&#x53f7;&#x3002;&#x8fd9;&#x4e2a;&#x4fe1;&#x606f;&#x53ea;&#x6709;&#x5b57;&#x6bb5;&#x6709;&#x4e00;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x65f6;&#x5019;&#x53ef;&#x7528;&#x3002;&#x5426;&#x5219;&#x503c;&#x4e3a;null&#x3002",{"_index":6234,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b57;&#x6bb5;&#x662f;&#x4e0d;&#x53ef;&#x7528;&#x7684;&#x3002",{"_index":3440,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5b57;&#x6bb5;&#x662f;&#x5426;&#x4e3a",{"_index":6223,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b57;&#x6bb5;&#x662f;&#x5426;&#x91cd;&#x8f7d;&#xff08;&#x7b2c;4.4.4&#x8282;&#xff09;&#x53e6;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#x3002",{"_index":6225,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b57;&#x6bb5;&#x7684;&#x5199;&#x5165;&#x8bbf;&#x95ee;&#x884c;&#x4e3a;&#xff08;&#x7b2c;4.2&#x8282;&#xff09;&#x3002",{"_index":6229,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b57;&#x6bb5;&#x7684;&#x533f;&#x540d;&#x7ed3;&#x6784;&#x3002;&#x7531;&#x4e8e;&#x5b83;&#x6ca1;&#x6709;&#x5b57;&#x6bb5",{"_index":3013,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x5b57;&#x6bb5;&#x7684;&#x53ef;&#x89c1;&#x6027;&#x4fee;&#x9970;&#x3002",{"_index":5336,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5b57;&#x6bb5;&#x7684;&#x6587;&#x6863;&#x3002;&#x8fd9;&#x4e2a;&#x4fe1;&#x606f;&#x53ea;&#x5728;&#x5982;&#x679c;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#xff08;&#x7b2c;6.1&#x8282;&#xff09",{"_index":6226,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b57;&#x6bb5;&#x7684;&#x8bfb;&#x53d6;&#x8bbf;&#x95ee;&#x884c;&#x4e3a;&#xff08;&#x7b2c;4.2&#x8282;&#xff09;&#x3002",{"_index":6228,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b57;&#x6bb5;&#x7684;&#x987a;&#x5e8f;&#x662f;&#x672a;&#x88ab;&#x5b9a;&#x4e49;&#x7684;&#x3002;&#x5728",{"_index":3365,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x5b57;&#x6bb5;&#x7c7b;&#x578b;&#x3002",{"_index":6222,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b57;&#x6bb5;&#x88ab;&#x6ce8;&#x89e3;&#x7528;&#x7684;&#x5143;&#x6570;&#x636e;&#x3002",{"_index":6233,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b57;&#x6bb5;&#x8bbf;&#x95ee",{"_index":2124,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#表达式":{},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x4e0a;&#x88ab;&#x63a8;&#x65ad;&#x4e3a;&#x4e00;&#x4e2a",{"_index":3173,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x5b8c;&#x6210",{"_index":6123,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x901a;&#x8fc7;&#x70b9;&#x64cd;&#x4f5c;&#x7b26;&#x6765;&#x8868;&#x793a;&#xff0c;&#x70b9;&#x53f7;&#x540e;&#x8ddf;&#x5b57;&#x6bb5;&#x7684;&#x540d;&#x79f0;&#x3002",{"_index":5217,"title":{},"body":{"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{}}}],["x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#xff08;&#x7b2c;8.3.2&#x8282;&#xff09;&#xff1a;&#x63d0;&#x4f9b;&#x4e00;&#x4e2a;&#x53ef;&#x4ee5;&#x88ab;&#x5728;&#x4e00;&#x4e2a;&#x6307;&#x5b9a;&#x7c7b;&#x578b;&#x4e0a;&#x8bbf;&#x95ee;&#x7684;&#x5b57;&#x6bb5;&#x5217;&#x8868;&#x3002",{"_index":5900,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x5b57;&#x6bb5;&#x9ed8;&#x8ba4;&#x4e3a",{"_index":4633,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x5b57;&#x6bb5;&#xff09;&#x3002",{"_index":6590,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b57;&#x6bb5;&#xff09;&#xff0c;&#x800c;&#x4e14;&#x662f",{"_index":6588,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b57;&#x6bb5;&#xff0c;&#x4f7f;&#x5f97;&#x5c0f;&#x5199;&#x7684",{"_index":3369,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x5b57;&#x7b26;&#x4e32",{"_index":73,"title":{},"body":{"10.标准库/10.标准库.html#10-标准库":{}}}],["x5b57;&#x7b26;&#x4e32;&#x4e3a;&#x4e00;&#x4e2a",{"_index":2372,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["x5b57;&#x7b26;&#x4e32;&#x5230;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5",{"_index":6250,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["x5b57;&#x7b26;&#x4e32;&#x63d2;&#x503c",{"_index":550,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x5b57;&#x7b26;&#x4e32;&#x63d2;&#x503c;&#x662f;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x65f6;&#x529f;&#x80fd;&#xff0c;&#x4e0d;&#x4f1a;&#x5bf9;&#x8fd0;&#x884c;&#x65f6;&#x6027;&#x80fd;&#x4ea7;&#x751f;&#x5f71;&#x54cd;&#x3002;&#x4e0a;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x548c;&#x624b;&#x52a8;&#x8fde;&#x63a5;&#x662f;&#x7b49;&#x6548;&#x7684;&#xff0c;&#x548c;&#x624b;&#x52a8;&#x8fde;&#x63a5;&#x7f16;&#x8bd1;&#x5668;&#x751f;&#x6210;&#x76f8;&#x540c;&#x7684;&#x5185;&#x5bb9;&#xff1a",{"_index":5684,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["x5b57;&#x7b26;&#x4e32;&#x7684;&#x5c3e;&#x5b57;&#x7b26;&#xff08;&#x591a;&#x884c;&#x5339;&#x914d;&#x6a21;&#x5f0f;&#x4e0b;&#x4e00;&#x884c;&#x7684;&#x5c3e;&#x5b57;&#x7b26;&#xff09",{"_index":1899,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x5b57;&#x7b26;&#x4e32;&#x8d77;&#x59cb;&#x5b57;&#x7b26;&#xff08;&#x5728;&#x591a;&#x884c;&#x5339;&#x914d;&#x6a21;&#x5f0f;&#x4e2d;&#x4e00;&#x884c;&#x7684;&#x8d77;&#x59cb;&#x5b57;&#x7b26;&#xff09",{"_index":1898,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x5b57;&#x7b26;&#x4e32;&#x901a;&#x8fc7;&#x4e00;&#x4e2a;&#x5355;&#x5f15;&#x53f7;&#x58f0;&#x660e;&#xff0c;&#x53ef;&#x4ee5;&#x5728;&#x5f53;&#x524d;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#x8bbf;&#x95ee;&#x53d8;&#x91cf;&#x3002",{"_index":552,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x5b57;&#x7b26;&#x4e32;&#xff1a",{"_index":1321,"title":{},"body":{"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{}}}],["x5b57;&#x7b26;&#x4e4b;&#x540e;&#x89e6;&#x53d1;&#xff0c;&#x6765;&#x5217;&#x51fa;&#x6307;&#x5b9a;&#x7c7b;&#x578b;&#x53ef;&#x7528;&#x7684;&#x5b57;&#x6bb5;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x89e3;&#x6790;&#x548c;&#x7c7b;&#x578b;&#x5316;&#x4e00;&#x5207;&#x5230;&#x5b8c;&#x6210;&#x7684;&#x70b9;&#xff0c;&#x7136;&#x540e;&#x8f93;&#x51fa;&#x76f8;&#x5173;&#x7684;&#x4fe1;&#x606f;&#x5230",{"_index":5928,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x5b57;&#x7b26;&#x53d6;&#x4ee3;&#x3002",{"_index":6109,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5b57;&#x7b26;&#x7f16;&#x7801",{"_index":1270,"title":{"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{}},"body":{}}],["x5b57;&#x7b26;&#x8303;&#x56f4",{"_index":1892,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x5b57;&#x7b26;&#xff0c;&#x540e;&#x8ddf;&#x5143;&#x6570;&#x636e;&#x7684;&#x540d;&#x79f0;&#xff0c;&#x548c;&#x53ef;&#x9009;&#x7684;&#xff0c;&#x901a;&#x8fc7;&#x4e00;&#x4e9b;&#x9017;&#x53f7;&#x5206;&#x9694;&#x7684;&#x5305;&#x62ec;&#x5728;&#x62ec;&#x53f7;&#x4e2d;&#x7684;&#x5e38;&#x91cf;&#x53c2;&#x6570;&#x3002",{"_index":5818,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x5b57;&#x7b26;&#xff0c;&#x6d88;&#x606f;&#x4e2d;&#x6240;&#x6709;&#x7684;&#x6362;&#x884c;&#x7b26;&#x90fd;&#x88ab;&#x540c;&#x6837;&#x7684",{"_index":6108,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5b57;&#x7b26;&#xff0c;position&#x53c2;&#x6570;&#x53ef;&#x4ee5;&#x88ab;&#x8bbe;&#x7f6e;&#x4e3a;0",{"_index":5909,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x5b57;&#x8282;&#xff0c;&#x518d;&#x7136;&#x540e;&#xff0c;&#x8bfb;&#x53d6;&#x54cd;&#x5e94;&#xff08;&#x5b8c;&#x6210;&#x7ed3;&#x679c;&#x6216;&#x8005;&#x9519;&#x8bef;&#x4fe1;&#x606f;&#xff09;&#x3002",{"_index":6086,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5b57;&#x9762;&#x7684;&#x503c;12&#x548c;&#x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x90fd;&#x662f;&#x5df2;&#x77e5;&#x7684;int&#x7c7b;&#x578b",{"_index":5482,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x5b58;&#x53d6;&#x5668;&#x540d;&#x79f0",{"_index":4544,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x5b58;&#x53d6;&#x5668;&#x65b9;&#x6cd5",{"_index":4537,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x5b58;&#x53d6;&#x5668;&#x65b9;&#x6cd5;&#x7684;&#x53ef;&#x89c1;&#x6027;&#x4e0d;&#x4f1a;&#x5f71;&#x54cd;&#x5c5e;&#x6027;&#x7684;&#x53ef;&#x5f97;&#x5230;&#x4e0e;&#x5426;&#x3002;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x5c5e;&#x6027;&#x662f",{"_index":4398,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x5b58;&#x5728;&#x7684;&#x7c7b;&#x548c;&#x5176;&#x5b83;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x989d;&#x5916;&#x7684;&#x529f;&#x80fd;&#x6765;&#x6269;&#x5c55;&#xff0c;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x9759;&#x6001;&#x6269;&#x5c55;&#x3002",{"_index":549,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x5b66;&#x4e60;&#x4e86;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x73b0;&#x5728;&#x770b;&#x770b;&#x5b83;&#x4eec;&#x4e4b;&#x95f4;&#x5982;&#x4f55;&#x4ea4;&#x4e92;&#x3002;&#x6211;&#x4eec;&#x4ece;&#x5f15;&#x5165",{"_index":127,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x5b83;&#x4eec;&#x4e0d;&#x4f1a;&#x88ab;&#x76f4;&#x63a5;&#x8c03;&#x7528;&#xff0c;&#x4f46;&#x662f;&#x662f;&#x4e00;&#x4e2a;&#x7c7b;&#x6216;&#x8005;&#x679a;&#x4e3e;&#x58f0;&#x660e;&#x4e0a;&#x7684",{"_index":6574,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b83;&#x4eec;&#x4e0d;&#x8fd4;&#x56de;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x800c;&#x662f;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#x6216;&#x8005;&#x7c7b;&#x5b57;&#x6bb5;&#x3002;&#x5b83;&#x4eec;&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x5fc5;&#x987b;&#x663e;&#x5f0f;&#x8bbe;&#x7f6e;&#x4e3a",{"_index":6571,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b83;&#x4eec;&#x6ca1;&#x6709;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x3002",{"_index":3461,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5b83;&#x4eec;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#x73af;&#x5883;&#xff08;&#x7b2c;9.1&#x8282;&#xff09;&#x6ca1;&#x6709;&#x5c40;&#x90e8;&#x65b9;&#x6cd5;&#x4e5f;&#x6ca1;&#x6709;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x3002",{"_index":6572,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b83;&#x4eec;&#x7684;&#x989d;&#x4e0a;&#x4e0b;&#x6587;&#x73af;&#x5883;&#x6709;&#x6784;&#x5efa;&#x5b57;&#x6bb5;&#xff0c;&#x53ef;&#x4ee5;&#x4ec",{"_index":6573,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b83;&#x4eec;&#x88ab;&#x5141;&#x8bb8;&#x6ca1;&#x6709;&#x8868;&#x8fbe;&#x5f0f;&#x5f62;&#x5f0f;&#x7684",{"_index":3464,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5b83;&#x4eec;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x53ef;&#x7a7a;&#x7684;&#xff0c;&#x9664;&#x975e;&#x5e26;&#x6709",{"_index":3462,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5b83;&#x4f1a;&#x79bb;&#x5f00;&#x5b83;&#x88ab;&#x58f0;&#x660e;&#x6240;&#x5728;&#x7684;&#x63a7;&#x5236;&#x6d41;&#x6700;&#x6df1;&#x7684;&#x51fd;&#x6570;&#xff0c;&#x5f53;&#x5c40;&#x90e8;&#x51fd;&#x6570;&#xff08;&#x7b2c;5.11&#x8282;&#xff09;&#x88ab;&#x8c03;&#x7528;&#x65f6;&#x9700;&#x8981;&#x88ab;&#x533a;&#x522b;&#xff1a",{"_index":4990,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["x5b83;&#x4f7f;&#x7528",{"_index":6581,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b83;&#x4f7f;&#x7528;&#x88ab;&#x7c7b;&#x578b;&#x6784;&#x5efa;&#x5b8f;&#x8fd4;&#x56de;&#x7684;&#x5b57;&#x6bb5;&#x7ee7;&#x7eed;&#x5982;&#x5e38;&#x7c7b;&#x578b;&#x5316;&#x7c7b;&#x3002",{"_index":6599,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x4f7f;&#x7528;&#x5728;&#x5404;&#x79cd;&#x5404;&#x6837;&#x7684;&#x72b6;&#x51b5;&#xff0c;&#x6bd4;&#x5982",{"_index":1763,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{}}}],["x5b83;&#x5982;&#x4f55;&#x5de5;&#x4f5c",{"_index":6093,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5b83;&#x6709;&#x540d;&#x5b57;&#xff0c;&#x53ef;&#x4ee5;&#x901a;&#x8fc7",{"_index":4814,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x5b83;&#x6839;&#x636e",{"_index":6597,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b83;&#x6dfb;&#x52a0;&#x65b0;&#x7684;&#x5b57;&#x6bb5;&#x5230;&#x6784;&#x5efa;&#x7684;&#x5b57;&#x6bb5;&#x6570;&#x7ec4;&#xff0c;&#x5e76;&#x8fd4;&#x56de;&#x5b83;&#x3002",{"_index":6591,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b83;&#x7531;&#x4e24;&#x4e2a",{"_index":2801,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x5b83;&#x89e3;&#x6790;&#x6a21;&#x5757;&#x6587;&#x4ef6;&#xff0c;&#x5305;&#x542b;&#x7c7b;&#x5b57;&#x6bb5;&#x3002",{"_index":6595,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b83;&#x8bbe;&#x7f6e;&#x7c7b;&#x578b;&#xff0c;&#x5305;&#x542b;&#x5b83;&#x548c;&#x5176;&#x5b83;&#x7c7b;&#x578b;&#x901a;&#x8fc7;&#x7ee7;&#x627f;&#x548c;&#x63a5;&#x53e3;&#x4ea7;&#x751f;&#x7684;&#x5173;&#x7cfb;&#x3002",{"_index":6596,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b88;&#x62a4",{"_index":5713,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x5b89;&#x5168;&#x7ec6;&#x8282",{"_index":1503,"title":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}},"body":{}}],["x5b89;&#x5168;&#x8f6c;&#x6362",{"_index":5105,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{}}}],["x5b89;&#x5168;&#x8f6c;&#x6362;&#x6709;&#x4e00;&#x4e2a;&#x8fd0;&#x884c;&#x65f6;&#x7684;&#x5f00;&#x9500;&#x3002;&#x7406;&#x89e3;&#x7f16;&#x8bd1;&#x5668;&#x5df2;&#x7ecf;&#x53d1;&#x751f;&#x4e86;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#x662f;&#x5f88;&#x91cd;&#x8981;&#x7684;&#xff0c;&#x6240;&#x4ee5;&#x6dfb;&#x52a0;&#x624b;&#x52a8;&#x7684;&#x68c0;&#x67e5;&#x662f;&#x5197;&#x4f59;&#x7684;&#xff0c;&#x4f8b;&#x5982;&#xff0c;&#x4f7f;&#x7528",{"_index":5080,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{}}}],["x5b89;&#x88c5;&#x548c;&#x62c6;&#x5378",{"_index":1568,"title":{"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{}},"body":{}}],["x5b8c;&#x6210;&#x670d;&#x52a1",{"_index":6129,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["x5b8c;&#x6210;&#x670d;&#x52a1;&#x3002;&#x4f60;&#x4e5f;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":6083,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5b8c;&#x6210;&#x670d;&#x52a1;&#x4f1a;&#x7f13;&#x5b58;&#x4e0b;&#x9762;&#x7684;&#x4e1c;&#x897f;&#xff1a",{"_index":6094,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5b8c;&#x6210;&#x670d;&#x52a1;&#x53ef;&#x80fd;&#x5bf9;&#x5b8f;&#x7684;&#x6267;&#x884c;&#xff08;&#x7b2c;9&#x7ae0;&#xff09;&#x6709;&#x4e00;&#x4e9b;&#x526f;&#x4f5c;&#x7528;&#x3002",{"_index":6114,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5b8f",{"_index":6355,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["x5b8f;&#x3002;&#x51e0;&#x4e4e;&#x540c;&#x65f6;&#xff0c;bruno",{"_index":1162,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x5b8f;&#x53c2;&#x6570;&#x4f5c;&#x4e3a;&#x5b57;&#x6bb5;&#x540d;&#x58f0;&#x660e;&#x4e00;&#x4e2a;&#x65b0;&#x7684",{"_index":6583,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x5b8f;&#x548c;&#x5176;&#x5b83;&#x7684;&#x547d;&#x4ee4;&#x53ef;&#x4ee5;&#x8bb0;&#x5f55;&#x4e0d;&#x662f;&#x9519;&#x8bef;&#x7684;&#x4e8b;&#x4ef6;&#x3002;&#x4ece;&#x547d;&#x4ee4;&#x884c;&#x4e2d;&#xff0c;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x770b;&#x5230",{"_index":6106,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5b8f;&#x5904;&#x7406",{"_index":5185,"title":{},"body":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["x5b8f;&#x5904;&#x7406;&#x7684;&#x67d0;&#x4e9b;&#x7279;&#x5b9a;&#x65f6;&#x5019;&#x6709;&#x4e00;&#x4e2a;&#x989d;&#x5916;&#x7684;&#x64cd;&#x4f5c;&#x7b26;&#x53ef;&#x4f9b;&#x4f7f;&#x7528;&#xff1a;&#x540e;&#x7f6e;&#x7684",{"_index":5188,"title":{},"body":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["x5b8f;&#x5e76;&#x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x6587;&#x672c;&#x66ff;&#x6362;&#x5de5;&#x5177;&#x3002",{"_index":771,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x5b8f;&#x6beb;&#x65e0;&#x7591;&#x95ee;&#x662f;haxe&#x4e2d;&#x6700;&#x5148;&#x8fdb;&#x7684;&#x529f;&#x80fd;&#x3002;&#x5b83;&#x4eec;&#x7ecf;&#x5e38;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x9ed1;&#x9b54;&#x6cd5;&#xff0c;&#x53ea;&#x6709;&#x5c11;&#x6570;&#x4eba;&#x80fd;&#x591f;&#x7cbe;&#x901a;&#xff0c;&#x4f46;&#x5176;&#x5b9e;&#x5b83;&#x4eec;&#x6ca1;&#x6709;&#x4ec0;&#x4e48;&#x9b54;&#x6cd5;&#xff08;&#x5f53;&#x7136;&#x4e5f;&#x6ca1;&#x6709;&#x9ed1;&#x6697;&#xff09;&#x3002",{"_index":764,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x5b8f;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x88ab;&#x5229;&#x7528;&#x6765;&#x4ece;&#x8bed;&#x6cd5;&#x76f4;&#x63a5;&#x5230;&#x5b8f;&#x4f20;&#x9012;&#x4fe1;&#x606f;&#xff1a",{"_index":6554,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x5b8f;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#x662f;&#x5b8f;&#x88ab;&#x6267;&#x884c;&#x7684;&#x73af;&#x5883;&#x3002;&#x6839;&#x636e;&#x5b8f;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x4e00;&#x4e2a;&#x7c7b;&#x88ab;&#x6784;&#x5efa;&#xff0c;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x88ab;&#x7c7b;&#x578b;&#x5316;&#x3002;&#x4e0a;&#x4e0b;&#x6587;&#x7684;&#x4fe1;&#x606f;&#x53ef;&#x4ee5;&#x901a;&#x8fc7",{"_index":6299,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x5b8f;&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x5fc5;&#x987b;&#x662f;&#x4e00;&#x4e2a",{"_index":6547,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x5b8f;&#xff08;&#x7b2c;9&#x7ae0;&#xff09",{"_index":1034,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x5b8f;(macro",{"_index":2151,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["x5b98;&#x65b9;&#x624b;&#x518c;&#x3002;&#x56e0;&#x6b64;&#xff0c;&#x5b83;&#x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x521d;&#x5b66;&#x8005;&#x6559;&#x7a0b;&#xff0c;&#x5e76;&#x4e0d;&#x4f1a;&#x6559;&#x4f60;&#x5982;&#x4f55;&#x7f16;&#x7a0b;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4e3b;&#x9898;&#x90fd;&#x88ab;&#x7c97;&#x7565;&#x8bbe;&#x8ba1;&#x4e3a;&#x4fbf;&#x4e8e;&#x9605;&#x8bfb;&#xff0c;&#x5bf9;&#x76f8;&#x5173;&#x8bdd;&#x9898;&#x8fdb;&#x884c;&#x5f15;&#x7528;&#xff0c;&#x5982;&#xff0c;&#x4e00;&#x4e9b;&#x4e4b;&#x524d;&#x770b;&#x5230;&#x7684;&#xff0c;&#x548c;&#x5c1a;&#x672a;&#x4e86;&#x89e3;&#x7684;&#x3002;&#x5728;&#x4e00;&#x4e9b;&#x60c5;&#x51b5;&#x4e0b;&#xff0c;&#x5982;&#x679c;&#x53ef;&#x4ee5;&#x7b80;&#x5316;&#x89e3;&#x91ca;&#xff0c;&#x4e00;&#x4e2a;&#x8f83;&#x65e9;&#x7684;&#x7ae0;&#x8282;&#x4f1a;&#x4f7f;&#x7528;&#x540e;&#x9762;&#x7684;&#x4e00;&#x4e9b;&#x7ae0;&#x8282;&#x7684;&#x4fe1;&#x606f;&#x3002;&#x8fd9;&#x4e9b;&#x5f15;&#x7528;&#x5c06;&#x6709;&#x76f8;&#x5e94;&#x7684;&#x8fde;&#x63a5;&#xff0c;&#x63d0;&#x524d;&#x9605;&#x8bfb;&#x8fd9;&#x4e9b;&#x8bdd;&#x9898;&#xff0c;&#x901a;&#x5e38;&#x4e0d;&#x662f;&#x4ec0;&#x4e48;&#x95ee;&#x9898;&#x3002",{"_index":1072,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x5b98;&#x65b9;&#x6587;&#x6863;&#x6682;&#x65e0;&#x5185;&#x5bb9",{"_index":6646,"title":{},"body":{"9.宏/9.6.限制/9.6.4.类型参数.html#9-6-4-类型参数":{}}}],["x5b98;&#x65b9;&#x6587;&#x6863;&#x6682;&#x7f3a;&#x3002",{"_index":1368,"title":{},"body":{"10.标准库/10.11.InputOutput/10.11.InputOutput.html#10-11-Input-Output":{}}}],["x5b9a;&#x4e49",{"_index":29,"title":{},"body":{"index.html#关于本文档":{},"2.类型/2.类型.html#2-类型":{},"4.类字段/4.类字段.html#4-类字段":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x5b9a;&#x4e49;&#x3002;&#x56e0;&#x4e3a;&#x6211;&#x4eec;&#x6ca1;&#x6709;&#x6307;&#x5b9a;&#x4e00;&#x4e2a;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff0c;&#x8fd9;&#x5728;&#x5b8c;&#x6210;&#x6a21;&#x5f0f;&#x662f;&#x5141;&#x8bb8;&#x7684;&#x3002;&#x5982;&#x679c;&#x547d;&#x4ee4;&#x884c;&#x53c2;&#x6570;&#x5305;&#x62ec;&#x4e86;&#x6bd4;&#x5982",{"_index":6029,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["x5b9a;&#x4e49;&#x4e00;&#x4e2a;&#x5141;&#x8bb8;&#x5230",{"_index":3272,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5b9a;&#x4e49;&#x4e86;&#x4e00;&#x4e2a;&#x5141;&#x8bb8;&#x5230",{"_index":3268,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5b9a;&#x4e49;&#x5230;&#x6838;&#x5fc3;api&#x4e0a;&#x4e0b;&#x6587",{"_index":952,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x5b9a;&#x4e49;&#x540d;&#x79f0",{"_index":30,"title":{},"body":{"index.html#关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x5b9a;&#x4e49;&#x63cf;&#x8ff0",{"_index":31,"title":{},"body":{"index.html#关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x5b9a;&#x4e49;&#x7684;&#x7c7b;&#x578b;&#x66b4;&#x9732;&#x7ed9;&#x5b8f;&#x3002",{"_index":767,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x5b9a;&#x4e49;&#xff0c;typ",{"_index":6413,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["x5b9a;&#x4e49;&#xff1a",{"_index":2688,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5b9a;&#x4e49;&#xff1a;$typ",{"_index":4048,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x4e00;&#x81f4;&#x6027",{"_index":3930,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x5199;&#x5165;&#x8bbf;&#x95e",{"_index":4518,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x534f;&#x53d8",{"_index":3823,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x5b58;&#x53d6;&#x5668;&#x65b9;&#x6cd5",{"_index":4538,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x5b8f;&#x4e0a;&#x4e0b;&#x6587",{"_index":6298,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x6297;&#x53d8;&#x6027",{"_index":3825,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x62bd;&#x8c61;&#x8bed;&#x6cd5;&#x6811;&#xff08;ast&#xff09",{"_index":765,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x6807;&#x8bc6;&#x7b26",{"_index":312,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x6a21;&#x5757",{"_index":4231,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x7269;&#x7406;&#x5b57;&#x6bb5",{"_index":4408,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x79c1;&#x6709;&#x7c7b;&#x578b",{"_index":4124,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x7c7b;&#x578b;&#x8def;&#x5f84",{"_index":4248,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316",{"_index":3835,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0",{"_index":5256,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x8bfb;&#x53d6;&#x8bbf;&#x95e",{"_index":4515,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x9884;&#x671f;&#x7c7b;&#x578b",{"_index":4003,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x5b9a;&#x4e49;&#xff1a;lambda",{"_index":2010,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{}}}],["x5b9a;&#x4e49;&#xff1a;nam",{"_index":305,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["x5b9a;&#x4f4d;&#x5b8c;&#x6210",{"_index":6127,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["x5b9e;&#x4f8b",{"_index":6453,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x5b9e;&#x4f8b;&#x3002;&#x4e5f;&#x5141;&#x8bb8;&#x8fed;&#x4ee3;&#x548c;&#x6620;&#x5c04;&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":6457,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x5b9e;&#x4f8b;&#x3002;&#x4e5f;&#x63d0;&#x4f9b;&#x4e00;&#x4e9b;&#x5bf9;&#x7c7b;&#x578b;&#x6709;&#x7528;&#x7684;&#x64cd;&#x4f5c;&#xff0c;&#x8b6c;&#x5982;&#x7edf;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09;&#x5b83;&#x4eec;&#xff0c;&#x6216;&#x8005;&#x5f97;&#x5230;&#x5b83;&#x4eec;&#x7684;&#x76f8;&#x5e94;&#x7684",{"_index":6459,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x5b9e;&#x4f8b;&#x4e2d;&#x5e94;&#x7528;&#x7684;&#x503c;&#x3002;&#x5b83;&#x7684;&#x4f18;&#x5148;&#x7ea7;&#x4f4e;&#x4e8",{"_index":2163,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#全局":{}}}],["x5b9e;&#x4f8b;&#x5316",{"_index":3684,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x5b9e;&#x4f8b;&#x901a;&#x5e38;&#x4f20;&#x9012;&#x5230",{"_index":6432,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["x5b9e;&#x4f8b;&#xff0c;&#x4e00;&#x4e2a;&#x6210;&#x5458;&#x53d8;&#x91cf;&#x53ef;&#x4ee5;&#x88ab;&#x8bbe;&#x7f6e;&#x6765;&#x5f71;&#x54cd;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x5b9e;&#x4f8b;&#xff1a",{"_index":2440,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{}}}],["x5b9e;&#x73b0",{"_index":3117,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x5b9e;&#x73b0;&#x3002",{"_index":5186,"title":{},"body":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["x5b9e;&#x73b0;&#x3002;&#x5982;&#x679c;&#x9700;&#x8981;&#x652f;&#x6301;&#x5b83;&#x4eec;&#xff0c;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x5728;html&#x9875;&#x9762;&#x5305;&#x542b;&#x4e00;&#x4e2a;&#x5728;&#x4e92;&#x8054;&#x7f51;&#x4e0a;&#x7684;&#x53ef;&#x7528;&#x7684;json&#x5b9e;&#x73b0;&#x3002;&#x53e6;&#x5916",{"_index":1338,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["x5b9e;&#x73b0;&#x7684;&#x3002;&#x867d;&#x7136;&#x8fd9;&#x53ef;&#x4ee5;&#x5728;&#x975e;&#x5b8f;&#x4ee3;&#x7801;&#x5f88;&#x597d;&#x7684;&#x8fd0;&#x884c;&#xff0c;&#x4f46;&#x662f;&#x5982;&#x679c;&#x8fd9;&#x4e9b;&#x529f;&#x80fd;&#x4ece;&#x5b8f;&#x5185;&#x90e8;&#x8fd0;&#x884c;&#x5b83;&#x4f1a;&#x5f15;&#x8d77;&#x95ee;&#x9898;&#x3002;&#x8fd9;&#x4e2a;&#x5b9e;&#x73b0;&#x540e;&#x6765;&#x88ab;&#x79fb;&#x5230;&#x7f16;&#x8bd1;&#x5668;&#x4e2d;&#x3002",{"_index":3449,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5b9e;&#x73b0;&#x7a00;&#x5c11;&#x6761;&#x4ef6;&#x7684;&#x5e38;&#x91cf;&#x4f20;&#x64ad;&#x6765;&#x4fc3;&#x8fdb;&#x7f16;&#x8bd1;&#x65f6;&#x77e5;&#x9053;&#x7684;&#x503c;&#x5230;&#x4f7f;&#x7528;&#x7684;&#x5730;&#x65b9;&#x3002;&#x4e5f;&#x4fa6;&#x6d4b;&#x65e0;&#x6548;&#x7684;&#x5206;&#x652f;&#x3002",{"_index":6280,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x5b9e;&#x73b0;&#x7c7b;&#x7684;&#x7c7b;&#x578b;&#x4fe1;&#x606f;&#xff08;&#x7b2c;8.5.1&#x8282;&#xff09;&#x3002",{"_index":6218,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x5b9e;&#x73b0;&#xff08;&#x7b2c;2.3.3&#x8282;&#xff09",{"_index":3110,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x5b9e;&#x9645;&#x4e0a;&#x5c31;&#x662f;&#x7ed3;&#x6784;&#x7c7b;&#x578b;&#x3002",{"_index":3621,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x5b9e;&#x9645;&#x4e0a;&#x662f;&#x4f5c;&#x4e3a",{"_index":4826,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x5b9e;&#x9645;&#x4e0a;&#x6ca1;&#x6709;&#x4e00;&#x4e2a;&#x5b9e;&#x73b0;&#x7684;string.hx",{"_index":6028,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["x5b9e;&#x9a8c;&#x6027;&#x94fe;&#x63a5",{"_index":964,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x5ba2;&#x6237;&#x7aef;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x8fde;&#x63a5;&#x5230;&#x670d;&#x52a1;&#x7aef;&#x8fdc;&#x7a0b;&#x4e0a;&#x4e0b;&#x6587;&#x5e76;&#x8c03;&#x7528;&#x8fd9;&#x4e2a;api&#x4e0a;&#x7684;&#x4e00;&#x4e2a;&#x51fd;&#x6570",{"_index":1460,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["x5bf9",{"_index":2126,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#表达式":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x5bf9;&#x4e8e;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x662f;&#x6709;&#x6548;&#x7684;&#x503c;&#xff0c;&#x5219;&#x8ba4;&#x4e3a;&#x7c7b;&#x578b;&#x662f;&#x53ef;&#x7a7a;&#x7684;&#x3002",{"_index":2656,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5bf9;&#x4e8e;&#x5bfc;&#x5165;&#xff0c;&#x5982;&#x679c;&#x540d;&#x5b57;&#x76f8;&#x540c;&#x5219;&#x4e3a;&#x5339;&#x914d",{"_index":4318,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5bf9;&#x4e8e;&#x7b2c;10&#x6b65;&#xff0c;&#x4e5f;&#x9700;&#x8981;&#x5b9a;&#x4e49;&#x7c7b;&#x578b;&#x7684;&#x89e3;&#x6790;&#x987a;&#x5e8f;&#xff1a",{"_index":4309,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5bf9;&#x4e8e;&#x8bbf;&#x95ee;&#x6388;&#x6743;&#x7236;&#x7c7b;&#xff0c;&#x4e5f;&#x662f;&#x540c;&#x6837;&#x7684;&#xff0c;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#x4f1a;&#x5ef6;&#x4f38;&#x5230;&#x6240;&#x6709;&#x7684;&#x5b50;&#x7c7b;&#xff1a",{"_index":5352,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5bf9;&#x4e8e;&#x8fd9;&#x4e2a;&#x7b97;&#x6cd5;&#x7684;&#x7b2c;&#x4e00;&#x6b65;&#xff0c;&#x548c;&#x4e4b;&#x524d;&#x7684;&#x7b2c;5&#x90e8;&#x7b2c;7&#x6b65;&#xff0c;&#x5bfc;&#x5165;&#x51b3;&#x8bae;&#x7684;&#x987a;&#x5e8f;&#x5f88;&#x91cd;&#x8981;&#xff1a",{"_index":4315,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5bf9;&#x4e8e;&#x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09;&#xff0c;&#x5982;&#x679c;&#x540d;&#x5b57;&#x76f8;&#x540c;&#x5e76;&#x4e14;&#x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x7edf;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09;&#x5219;&#x4e3a;&#x5339;&#x914d;&#x3002;&#x5728;&#x4e00;&#x4e2a;&#x7ed9;&#x5b9a;&#x7c7b;&#x578b;&#x4e2d;&#x88ab;&#x7528;&#x4f5c;&#x9759;&#x6001;&#x6269;&#x5c55;&#x7684;&#x5b57;&#x6bb5;&#x4ece;&#x5934;&#x81f3;&#x5c3e;&#x8fdb;&#x884c;&#x68c0;&#x67e5;&#x3002",{"_index":4319,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5bf9;&#x4e8e;javascript&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;dce&#xff0c;&#x5728;&#x7f51;&#x7ad9",{"_index":5877,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x5bf9;&#x5b8f;&#x7684;&#x5f71;&#x54cd",{"_index":6113,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x5bf9;&#x5e94;&#x6bcf;&#x6b21;&#x8fed;&#x4ee3;&#xff0c;&#x6761;&#x4ef6;&#x8868;&#x8fbe;&#x5f0f;&#x90fd;&#x4f1a;&#x6267;&#x884c;&#x3002;&#x5982;&#x679c;&#x5b83;&#x6267;&#x884c;&#x7ed3;&#x679c;&#x4e3a",{"_index":4894,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["x5bf9;&#x6bcf;&#x4e2a;&#x5143;&#x7d20;&#x8c03;&#x7528;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x3002",{"_index":2041,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x5bf9;&#x7ed9;&#x5b9a;&#x76ee;&#x6807;&#x8fdb;&#x884c;&#x5f3a;&#x5236;&#x8bbf;&#x95ee;&#x3002",{"_index":5317,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5bf9;&#x8c61;&#x5230",{"_index":2152,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["x5bf9;&#x8c61;&#x58f0;&#x660e",{"_index":3972,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x5bf9;&#x8c61;&#x58f0;&#x660e;&#x66f4;&#x591a;&#x7684;&#x7ec6;&#x8282;&#x5728;&#x533f;&#x540d;&#x7ed3;&#x6784;&#xff08;&#x7b2c;2.5&#x8282;&#xff09;&#x4e2d;&#x8be6;&#x8ff0;&#x3002",{"_index":5212,"title":{},"body":{"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["x5bf9;&#x8c61;&#x58f0;&#x660e;&#x901a;&#x8fc7;&#x4e00;&#x4e2a;&#x5f00;&#x53e3;&#x7684;&#x82b1;&#x62ec;&#x53f7;&#xff0c;&#x540e;&#x8ddf;&#x952e;&#x503c;&#x5bf9;&#xff0c;&#x901a;&#x8fc7;&#x9017;&#x53f7;&#x5206;&#x9694;&#xff0c;&#x7136;&#x540e;&#xff0c;&#x4f7f;&#x7528;&#x95ed;&#x53e3;&#x7684;&#x82b1;&#x62ec;&#x53f7;&#x7ed3;&#x675f;&#x3002",{"_index":5211,"title":{},"body":{"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{}}}],["x5bf9;&#x8c61;&#x58f0;&#x660e;&#xff08;&#x7b2c;5.6&#x8282;&#xff09;&#xff08;&#x5982;&#x679c;&#x6240;&#x6709;&#x5b83;&#x4eec;&#x7684;&#x5b57;&#x6bb5;&#x503c;&#x6709;&#x8d44;&#x683c;&#xff09",{"_index":5835,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x5bf9;&#x8c61;&#x6765;&#x5b58;&#x50a8;&#x53ef;&#x4ee5;&#x88ab;&#x8d2f;&#x7a7f;&#x6574;&#x4e2a",{"_index":2162,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#全局":{}}}],["x5bf9;&#x8c61;&#x7ed3;&#x6784",{"_index":2373,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["x5bf9;&#x8c61;&#x88ab;&#x7ed1;&#x5b9a;&#x3002;&#x56de;&#x8c03;&#x53ea;&#x5141;&#x8bb8;&#x7ed1;&#x5b9a;&#x4e3a;&#x53c2;&#x6570;&#x4ece;&#x5de6;&#x5230;&#x53f3;&#xff0c;&#x56e0;&#x4e3a;&#x4e0d;&#x652f;&#x6301;&#x4e0b;&#x5212;&#x7ebf;&#x3002;&#x4f7f;&#x7528;&#x4e0b;&#x5212;&#x7ebf;&#x7684;&#x9009;&#x62e9;&#x6709;&#x4e00;&#x4e9b;&#x4e89;&#x8bae;&#x548c;&#x4e00;&#x4e9b;&#x5176;&#x4ed6;&#x7684;&#x5efa;&#x8bae;&#xff0c;&#x4f46;&#x662f;&#x6ca1;&#x6709;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x5f88;&#x4f18;&#x8d8a;&#x7684;&#x3002;&#x6bd5;&#x7adf;&#xff0c;&#x4e0b;&#x5212;&#x7ebf;&#x81f3;&#x5c11;&#x770b;&#x8d77;&#x6765;&#x50cf;&#x662f;&#x8bf4;&#x201c;&#x5728;&#x8fd9;&#x91cc;&#x586b;&#x4e0a;&#x503c;&#x201d;&#xff0c;&#x5f88;&#x597d;&#x7684;&#x63cf;&#x8ff0;&#x4e86;&#x5b83;&#x7684;&#x8bed;&#x4e49;&#x3002",{"_index":5796,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x5bf9;&#x8c61;&#x8bb0;&#x6cd5",{"_index":2919,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x5bfc;&#x5165;&#x6a21;&#x5757;&#x5b8c;&#x6210",{"_index":5991,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["x5bfc;&#x5165;&#x7684;&#x6a21;&#x5757;&#x548c;&#x9759;&#x6001;&#x6269;&#x5c55;&#x4ece;&#x5e95;&#x90e8;&#x5230;&#x5934;&#x90e8;&#x68c0;&#x67e5;&#xff0c;&#x7b2c;&#x4e00;&#x4e2a;&#x5339;&#x914d;&#x7684;&#x88ab;&#x91c7;&#x7528",{"_index":4316,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5bfc;&#x5165;&#xff08;&#x7b2c;3.7.2&#x8282;&#xff09;&#x7684;&#x6a21;&#x5757;&#xff0c;&#x7c7b;&#x578b;&#x548c;&#x9759;&#x6001;&#x5b57;&#x6bb5",{"_index":4279,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5c06;&#x4e00;&#x4e2a",{"_index":4053,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x5c06;&#x4e5f;&#x5339;&#x914d;&#x65b0;&#x884c;&#xff08;neko&#xff0c;c++&#xff0c;php&#xff0c;flash",{"_index":1912,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x5c0f;&#x4e8e",{"_index":2527,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x5c0f;&#x4e8e;&#x64cd;&#x4f5c;&#x7b26;&#x6ca1;&#x6709;&#x5b9e;&#x73b0",{"_index":3333,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5c0f;&#x4e8e;&#x7b49;&#x4e8",{"_index":2528,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x5c1d;&#x8bd5;&#x5728",{"_index":3146,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5c31;&#x50cf",{"_index":6540,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x5c31;&#x50cf;&#x8bf4;&#x660e;&#x7684;&#xff0c;&#x8bfb;&#x53d6;&#x8bbf;&#x95ee;&#x751f;&#x6210;&#x4e00;&#x4e2a;get_x()&#x7684;&#x8c03;&#x7528;&#xff0c;&#x800c;&#x5199;&#x5165;&#x8bbf;&#x95ee;&#x751f;&#x6210",{"_index":4349,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x5c31;&#x6709;&#x4f7f;&#x7528;&#x7684;&#x5fc5;&#x8981;&#x4e86;&#x3002",{"_index":5282,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x5c31;&#x804c;&#x4e8e",{"_index":1060,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["x5c3d;&#x7ba1",{"_index":3169,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5c3d;&#x7ba1;&#x65b9;&#x6cd5",{"_index":2329,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x5c3d;&#x7ba1;&#x8fd9;&#x6837;&#x7684;&#x7c7b;&#x578b;&#x5316;&#x975e;&#x5e38;&#x65b9;&#x4fbf;&#xff0c;&#x4f46;&#x662f;&#x5927;&#x91cf;&#x5730;&#x4f7f;&#x7528;&#x53ef;&#x80fd;&#x5f71;&#x54cd;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x6027;&#x80fd;&#xff0c;&#x5728;&#x6027;&#x80fd;&#x5f71;&#x54cd;&#xff08;&#x7b2c;2.5.4&#x8282;&#xff09;&#x90e8;&#x5206;&#x6709;&#x4ecb;&#x7ecd;&#x3002",{"_index":3853,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x5c40;&#x90e8",{"_index":4798,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x5c40;&#x90e8;&#x51fd;&#x6570;&#x548c;&#x95ed;&#x5305",{"_index":541,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x5c40;&#x90e8;&#x53d8;&#x91cf;&#x7684;&#x4f5c;&#x7528;&#x4e8e;&#x884c;&#x4e3a;&#x5728;&#x5757;&#xff08;&#x7b2c;5.1&#x8282;&#xff09;&#x4e2d;&#x63cf;&#x8ff0;&#x3002",{"_index":4786,"title":{},"body":{"5.表达式/5.10.var/5.10.var.html#5-10-var":{}}}],["x5c40;&#x90e8;&#xff0c;&#x6210;&#x5458;&#xff0c;&#x9759;&#x6001;&#xff0c;&#x679a;&#x4e3e;&#xff0c;&#x5168;&#x5c40",{"_index":6047,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["x5c55;&#x793a;&#x5982;&#x4f55;&#x63d0;&#x53d6;&#x6784;&#x9020;&#x51fd;&#x6570;&#x4e2d;&#x7684;&#x53c2;&#x6570;&#x503c;&#xff1a;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x4f5c;&#x4e3a;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x4f7f;&#x7528;&#x5728",{"_index":2886,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x5c5e;&#x6027",{"_index":220,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x5c5e;&#x6027;&#x3002",{"_index":2033,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x5c5e;&#x6027;&#x3002;&#x5728;&#x6240;&#x6709;&#x60c5;&#x51b5;&#x4e0b;&#xff0c;i",{"_index":6045,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["x5c5e;&#x6027;&#x4ee5;&#x53ca",{"_index":3610,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x5c5e;&#x6027;&#x4fdd;&#x5b58;&#x5305;&#x542b;&#x8be5;&#x7c7b;&#x578b;&#x6216;&#x8005;&#x5b57;&#x6bb5;&#x7684;&#x6a21;&#x5757;&#x8def;&#x5f84;&#x3002",{"_index":6051,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["x5c5e;&#x6027;&#x4fdd;&#x5b58;&#x53d8;&#x91cf;&#x6216;&#x8005;&#x5b57;&#x6bb5;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":6049,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["x5c5e;&#x6027;&#x5230;&#x4e00;&#x4e2a;&#x5e38;&#x91cf;&#x5355;&#x5b57;&#x8282;&#xff0c;&#x53ef;&#x4ee5;&#x7f16;&#x8bd1;&#x5b83;&#x7684;ascii&#x5b57;&#x8282;&#x7801;&#xff1a",{"_index":1271,"title":{},"body":{"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{}}}],["x5c5e;&#x6027;&#x5305;&#x542b;&#x5b57;&#x6bb5;&#x7684;&#x540d;&#x79f0",{"_index":5940,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x5c5e;&#x6027;&#x6807;&#x8bb0;&#x4e00;&#x4e9b;&#x751f;&#x6210;&#x7684;&#x4ee3;&#x7801",{"_index":954,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x5c5e;&#x6027;&#x7684;&#x51fa;&#x73b0;&#x6709;&#x5bf9;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x7684;&#x4e00;&#x4e9b;&#x5f71;&#x54cd;&#x3002;&#x6700;&#x91cd;&#x8981;&#x7684;&#x662f;&#xff0c;&#x6709;&#x5fc5;&#x8981;&#x7406;&#x89e3;&#x5c5e;&#x6027;&#x662f;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x65f6;&#x529f;&#x80fd;&#xff0c;&#x56e0;&#x6b64;&#x9700;&#x8981;&#x7c7b;&#x578b;&#x662f;&#x5df2;&#x77e5;&#x7684;&#x3002;&#x5982;&#x679c;&#x6211;&#x4eec;&#x8981;&#x5206;&#x914d;&#x4e00;&#x4e2a;&#x7c7b;&#x7684;&#x5c5e;&#x6027;&#x4e3a;dynamic&#xff0c;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x4e0d;&#x4f1a;&#x9075;&#x5b88;&#x5b58;&#x53d6;&#x5668;&#x65b9;&#x6cd5;&#x3002;&#x540c;&#x6837;&#xff0c;&#x8bbf;&#x95ee;&#x9650;&#x5236;&#x4e0d;&#x518d;&#x5e94;&#x7528;&#xff0c;&#x6240;&#x6709;&#x7684;&#x8bbf;&#x95ee;&#x662f;&#x51e0;&#x4e4e;&#x516c;&#x5f00;&#x7684;&#x3002",{"_index":4435,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["x5c5e;&#x6027;&#xff08;&#x7b2c;4.2&#x8282;&#xff09",{"_index":3541,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5c5e;&#x6027;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x662f;&#x53d8;&#x91cf;&#x6216;&#x8005;&#x65b9;&#x6cd5;&#x3002;&#x8fd9;&#x5f97;&#x4ee5;&#x533a;&#x522b;&#x65b9;&#x6cd5;&#x5b57;&#x6bb5;&#x548c;&#x53d8;&#x91cf;&#x5b57;&#x6bb5;&#xff0c;&#x65b9;&#x6cd5;&#x5b57;&#x6bb5;&#x6709;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x3002",{"_index":5945,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x5de5;&#x4f5c;&#x65b9;&#x5f0f;&#x7c7b;&#x4f3c;&#x4e8",{"_index":5575,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x5de5;&#x4f5c;&#xff0c",{"_index":3316,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5de5;&#x4f5c;&#xff0c;&#x800c;&#x4e0d;&#x662f;&#x4e3a",{"_index":3319,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5de5;&#x5177;&#x7c7b;&#x6765;&#x7b80;&#x5316;&#x5b8f;&#x7684;&#x4f7f;&#x7528;&#x3002;&#x8fd9;&#x4e9b;&#x7c7b;&#x6700;&#x597d;&#x4f5c;&#x4e3a;&#x9759;&#x6001;&#x6269;&#x5c55;&#x4f7f;&#x7528;&#xff0c;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":6450,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x5de5;&#x5177;&#xff08;&#x7b2c;9.4&#x8282;&#xff09;&#xff09",{"_index":5440,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x5de6;&#x4f4d;&#x79fb",{"_index":2536,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x5de6;&#x4fa7;&#x53ef;&#x4ee5;&#x4f7f;&#x4efb;&#x4f55;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x4e2d;&#x95f4;&#x51fa;&#x73b0;&#x7684;&#x6240;&#x6709;&#x4e0b;&#x5212;&#x7ebf;&#x88ab;&#x66ff;&#x6362;&#x4e3a;&#x5f53;&#x524d;&#x5339;&#x914d;&#x7684;&#x503c;&#x3002",{"_index":5658,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x5df2;&#x7ecf;&#x53d8;&#x6210",{"_index":3740,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x5df2;&#x7ecf;&#x88ab;&#x5f15;&#x5165;&#xff0c;&#x6765;&#x7b80;&#x5316;rtti&#x76f8;&#x5173;&#x7684;&#x5de5;&#x4f5c",{"_index":6254,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["x5e03;&#x5c14;&#x64cd;&#x4f5c;&#x7b26",{"_index":5273,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x5e26;&#x5165;&#x5230;&#x4e0a;&#x4e0b;&#x6587",{"_index":5484,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x5e26;&#x6709;&#x53c2;&#x6570;&#x7684;&#x679a;&#x4e3e;&#x53ef;&#x4ee5;&#x901a;&#x8fc7",{"_index":2541,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x5e26;&#x6709;&#x53c2;&#x6570;&#x7684;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#x662f;&#x65b9;&#x6cd5;&#x5b57;&#x6bb5",{"_index":6493,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["x5e38;&#x89c1;&#x7684;&#x4f8b;&#x5b50;&#x5728;haxe&#x6807;&#x51c6;&#x5e93;&#xff08;&#x7b2c;10&#x7ae0;&#xff09;&#xff0c;math",{"_index":5401,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x5e38;&#x91cf;&#x5e76;&#x505c;&#x6b62",{"_index":4290,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5e38;&#x91cf;&#xff08;&#x7b2c;5.2&#x8282;&#xff09",{"_index":5833,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x5e73;&#x53f0",{"_index":6743,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["x5e73;&#x53f0;&#x7684;&#x7ef4;&#x62a4;&#x8005;&#xff0c;&#x5e76;&#x5728;&#x968f;&#x540e;&#x7684",{"_index":1164,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x5e76;&#x4e0d;&#x5c11;&#x89c1;&#x65b0;&#x7684;haxe&#x7528;&#x6237;&#x88ab;setter&#x7684;&#x7c7b;&#x578b;&#x9700;&#x8981;&#x662f;t",{"_index":4418,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x5e76;&#x4e0d;&#x603b;&#x662f;&#x5bb9;&#x6613;&#x5224;&#x65ad;&#x662f;&#x5426;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x8981;&#x9650;&#x5b9a;&#x4e3a;&#x5185;&#x8054;&#x51fd;&#x6570;&#x3002;&#x6ca1;&#x6709;&#x7f16;&#x5199;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x77ed;&#x51fd;&#x6570;&#xff08;&#x5982;a=&#x5f62;&#x5f0f;&#x7684;&#x8d4b;&#x503c;&#xff09;&#x901a;&#x5e38;&#x662f;&#x4e00;&#x4e2a;&#x597d;&#x7684;&#x9009;&#x62e9;&#xff0c;&#x4f46;&#x662f;&#x6709;&#x65f6;&#x5019;&#x66f4;&#x590d;&#x6742;&#x7684;&#x51fd;&#x6570;&#x4e5f;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x5185;&#x8054;&#x3002;&#x7136;&#x800c;&#xff0c;&#x5728;&#x4e00;&#x4e9b;&#x60c5;&#x51b5;&#x4e0b;&#x5185;&#x8054;&#x53ef;&#x4ee5;&#x5b9e;&#x9645;&#x4e0a;&#x635f;&#x5bb3;&#x90e8;&#x5206;&#x6027;&#x80fd;&#xff0c;&#x4f8b;&#x5982;&#xff0c;&#x56e0;&#x4e3a;&#x7f16;&#x8bd1;&#x5668;&#x5fc5;&#x987b;&#x521b;&#x5efa;&#x4e34;&#x65f6;&#x53d8;&#x91cf;&#x670d;&#x52a1;&#x4e8e;&#x590d;&#x6742;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":4703,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x5e76;&#x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x6587;&#x672c;&#x7684;&#x66ff;&#x6362;&#xff0c;&#x800c;&#x662f;&#x5b9e;&#x9645;&#x4e0a;&#x4e00;&#x4e2a;&#x771f;&#x5b9e;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x5b83;&#x751a;&#x81f3;&#x53ef;&#x4ee5;&#x6709",{"_index":3627,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x5e76;&#x4e0d;&#x662f;&#x6697;&#x793a",{"_index":6515,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x5e76;&#x4ece;&#x5176;&#x4e2d;&#x83b7;&#x5f97;&#x4e00;&#x4e2a",{"_index":2390,"title":{},"body":{"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}}}],["x5e76;&#x4f20;&#x9012;&#x4e00;&#x4e2a;&#x7a7a;&#x6570;&#x7ec4;&#xff0c;&#x4ee5;&#x53ca;&#x7b2c;8&#x884c;&#x4f20;&#x9012",{"_index":3608,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x5e76;&#x5177;&#x6709;&#x4e00;&#x4e2a",{"_index":3604,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x5e76;&#x672a;&#x62a5;&#x9519;&#xff0c;&#x800c;&#x4f5c;&#x4e3a;&#x7c7b;&#x5b57;&#x6bb5;&#x8fdb;&#x884c;&#x5b9a;&#x4e49;&#x5219;&#x4e0d;&#x80fd;&#x7f16;&#x8bd1;&#xff0c;&#x63d0;&#x793a",{"_index":2609,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x5e76;&#x8bbf;&#x95ee;&#x5b83;&#x7684",{"_index":3438,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5e8f;&#x5217;&#x5316",{"_index":77,"title":{},"body":{"10.标准库/10.标准库.html#10-标准库":{}}}],["x5e8f;&#x5217;&#x5316;&#x53ef;&#x4ee5;&#x4ee5;&#x4e24;&#x79cd;&#x65b9;&#x5f0f;&#x914d;&#x7f6e;&#x3002;&#x5bf9;&#x4e8e;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x53d8;&#x91cf;&#xff0c;&#x53ef;&#x4ee5;&#x88ab;&#x8bbe;&#x7f6e;&#x6765;&#x6539;&#x53d8;&#x6240;&#x6709",{"_index":2439,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{}}}],["x5e8f;&#x5217;&#x5316;&#x683c;&#x5f0f;&#xff08;&#x7b2c;10.8.1&#x8282;&#xff09;&#x63cf;&#x8ff0;&#x3002",{"_index":2429,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x5e8f;&#x5217;&#x5316;&#x7684;&#x7ed3;&#x679c;&#xff08;&#x8fd9;&#x91cc;&#x5b58;&#x50a8;&#x5728;&#x5c40;&#x90e8;&#x53d8;&#x91cf",{"_index":2426,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x5e8f;&#x5217;&#x5316;&#x914d;&#x7f6",{"_index":2438,"title":{"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{}},"body":{}}],["x5e8f;&#x5217;&#x5316;&#xff08;&#x7b2c;10.8&#x8282;&#xff09;&#x3002",{"_index":1475,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化":{}}}],["x5e8f;&#x5217;&#x5316;/&#x53cd;&#x5e8f;&#x5217;&#x5316",{"_index":2423,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x5e93",{"_index":6463,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x5e93;&#x3002",{"_index":1830,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["x5e93;&#x3002;&#x8fd9;&#x4e2a;&#x4ee3;&#x7801;&#x5c55;&#x793a;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x4f8b;&#x5b50;&#xff1a",{"_index":1947,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["x5e93;&#x6709;&#x4e00;&#x4e9b;&#x5173;&#x4e8e;&#x7279;&#x6b8a;&#x6570;&#x503c;&#x7684;&#x5b9a;&#x4e49;&#xff1a",{"_index":1858,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{}}}],["x5e93;&#x7528;&#x4e8e;&#x76f8;&#x540c;&#x7684;&#x76ee;&#x7684;&#x3002;tinkerbel",{"_index":6467,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x5e94;&#x7528;&#x4e00;&#x4e2a;&#x8f6c;&#x6362;&#x5230;&#x6bcf;&#x4e2a;&#x5143;&#x7d20;&#xff0c;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x65b0;&#x7684",{"_index":2045,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x5e94;&#x7528;&#x64cd;&#x4f5c;&#x7b26",{"_index":2127,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#表达式":{}}}],["x5e94;&#x8be5;&#x5c3d;&#x91cf;&#x5c11;&#x7684;&#x4f7f;&#x7528",{"_index":3160,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5e94;&#x8be5;&#x662f",{"_index":2840,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x5f00;&#x53e3;&#x7684;&#x5706;&#x62ec;&#x53f7",{"_index":4903,"title":{},"body":{"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{}}}],["x5f00;&#x5934;&#x7684;&#x5143;&#x6570;&#x636e;&#x662f;&#x7701;&#x7565;&#x7684;&#x3002;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x7684;&#x5143;&#x6570;&#x636e;&#x4f5c;&#x4e3a;&#x7f16;&#x8bd1;&#x5668;&#x5143;&#x6570;&#x636e;&#x5b58;&#x5728;&#x3002",{"_index":5831,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x5f00;&#x59cb;&#x65f6",{"_index":1133,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x5f00;&#x59cb;&#x6d4b;&#x8bd5;&#x3002",{"_index":1559,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}}}],["x5f00;&#x59cb;&#xff0c;&#x4ee5;&#x4e00;&#x4e2a;&#x95ed;&#x53e3;&#x7684;&#x82b1;&#x62ec;&#x53f7",{"_index":4773,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["x5f00;&#x59cb;&#xff0c;&#x5141;&#x8bb8;&#x5728;&#x7c7b;&#x8bb0;&#x6cd5;&#x7684;&#x7ed3;&#x6784;&#x58f0;&#x660e;&#x4e2d;&#x4f7f;&#x7528;&#x95ee;&#x53f7",{"_index":2945,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x5f00;&#x59cb;&#xff0c;&#x7136;&#x540e;&#x6761;&#x4ef6;&#x8868;&#x8fbe;&#x5f0f;&#x653e;&#x5728;&#x4e00;&#x4e2a",{"_index":4918,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x5f02;&#x6216",{"_index":2535,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x5f15;&#x5165;&#x81ea;&#x5b9a;&#x4e49;&#x6838;&#x5fc3;&#x7c7b;&#x578b;&#x62bd;&#x8c61;&#x5728;&#x7528;&#x6237;&#x4ee3;&#x7801;&#x4e2d;&#x662f;&#x5f88;&#x6709;&#x5fc5;&#x8981;&#x7684;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x9700;&#x8981",{"_index":3457,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5f15;&#x7528;&#x94fe;&#x63a5;&#x3002;&#x5728;&#x4e00;&#x4e9b;&#x60c5;&#x51b5;&#x4e0b;&#xff0c;&#x4e00;&#x4e2a;&#x8f83;&#x4e3a;&#x9760;&#x524d;&#x7684;&#x7ae0;&#x8282;&#x4f1a;&#x4e3a;&#x4e86;&#x4fbf;&#x4e8e;&#x89e3;&#x91ca;&#x76f8;&#x5173;&#x4e3b;&#x9898;&#x800c;&#x4f7f;&#x7528;&#x4e00;&#x4e9b;&#x540e;&#x7eed;&#x7ae0;&#x8282;&#x624d;&#x8be6;&#x7ec6;&#x5c55;&#x5f00;&#x7684;&#x5185;&#x5bb9;&#xff0c;&#x8fd9;&#x4e9b;&#x5185;&#x5bb9;&#x90fd;&#x4f1a;&#x9644;&#x4e0a;&#x76f8;&#x5e94;&#x7684;&#x8df3;&#x8f6c;&#x94fe;&#x63a5;&#xff0c;&#x63d0;&#x524d;&#x9605;&#x8bfb;&#x8fd9;&#x4e9b;&#x4e3b;&#x9898;&#x901a;&#x5e38;&#x6765;&#x8bf4;&#x95ee;&#x9898;&#x4e0d;&#x5927;&#x3002",{"_index":21,"title":{},"body":{"index.html#关于本文档":{}}}],["x5f3a;&#x5236;&#x7f16;&#x8bd1;&#x5668;&#x68c0;&#x67e5",{"_index":978,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x5f3a;&#x5236;&#x8bbf;&#x95ee;&#xff1a;&#x53ef;&#x5728;&#x4e00;&#x4e2a;&#x7c7b;&#x6216;&#x5b57;&#x6bb5;&#x4e2d;&#x901a;&#x8fc7",{"_index":5316,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5f53",{"_index":1513,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{}}}],["x5f53;&#x4f7f;&#x7528",{"_index":961,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x5f53;&#x4f7f;&#x7528;&#x53cd;&#x5c04;&#x65f6;&#x4e00;&#x4e2a;&#x597d;&#x7684;&#x5efa;&#x8bae;&#x662f;&#xff0c;&#x5305;&#x88c5;&#x5b83;&#x5230;&#x88ab;&#x539f;&#x672c;&#x7c7b;&#x578b;&#x5b89;&#x5168;&#x7684;&#x4ee3;&#x7801;&#x8c03;&#x7528;&#x7684;&#x4e00;&#x4e2a;&#x5e94;&#x7528;&#x6216;&#x8005;api&#x7684;&#x4e00;&#x4e9b;&#x51fd;&#x6570;&#x4e2d;&#x3002;&#x770b;&#x4e00;&#x4e0b;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#xff1a",{"_index":2328,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x5f53;&#x4f7f;&#x7528;&#x8fd9;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x8f6c;&#x6362;&#xff0c;&#x8f6c;&#x6362;&#x51fd;&#x6570;&#x7684;&#x8c03;&#x7528;&#x88ab;&#x63d2;&#x5165;&#x5728;&#x9700;&#x8981;&#x7684;&#x5730;&#x65b9;&#x3002;&#x5f53;&#x67e5;&#x770b",{"_index":3258,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5f53;&#x4f7f;&#x7528;&#x901a;&#x914d;&#x7b26;&#x5bfc;&#x5165;&#x4e00;&#x4e2a;&#x5305;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x5e76;&#x4e0d;&#x4f1a;&#x7acb;&#x5373;&#x5904;&#x7406;&#x5305;&#x4e2d;&#x7684;&#x6240;&#x6709;&#x6a21;&#x5757;&#x3002;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x8fd9;&#x4e9b;&#x6a21;&#x5757;&#x9664;&#x975e;&#x88ab;&#x660e;&#x786e;&#x4f7f;&#x7528;&#x5426;&#x5219;&#x4e0d;&#x4f1a;&#x88ab;&#x4f5c;&#x4e3a;&#x8f93;&#x51fa;&#x7684;&#x4e00;&#x90e8;&#x5206;&#x751f;&#x6210;&#x3002",{"_index":4206,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5f53;&#x4f7f;&#x7528;get",{"_index":4436,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["x5f53;&#x5206;&#x914d;&#x4e00;&#x4e2a;&#x7c7b;&#x578b",{"_index":3262,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5f53;&#x524d;&#x4e0d;&#x80fd;&#x5728",{"_index":5666,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x5f53;&#x524d;&#x5b57;&#x6bb5;&#x7684;&#x79cd;&#x7c7b;&#xff08;static&#x6216;&#x8005;&#x6210;&#x5458;&#xff09",{"_index":4281,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5f53;&#x524d;&#x7c7b;&#x53ca;&#x5176;&#x7236;&#x7c7b;&#x58f0;&#x660e;&#x7684;&#x6210;&#x5458;&#x5b57;&#x6bb5",{"_index":4282,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5f53;&#x524d;&#x7c7b;&#x58f0;&#x660e;&#x7684;&#x9759;&#x6001;&#x5b57;&#x6bb5",{"_index":4283,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5f53;&#x524d;haxe&#x7248;&#x672c;&#x503c",{"_index":982,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x5f53;&#x5305;&#x88c5;&#x4e00;&#x4e2a;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#xff0c;&#x6709;&#x65f6;&#x5019;&#x9700;&#x8981;&#x4fdd;&#x6301;&#x90e8;&#x5206;&#x5b83;&#x7684;&#x529f;&#x80fd;&#x3002;&#x56e0;&#x4e3a;&#x624b;&#x5de5;&#x7f16;&#x5199;&#x8f6c;&#x53d1;&#x51fd;&#x6570;&#x975e;&#x5e38;&#x7e41;&#x7410;&#xff0c;hax",{"_index":3430,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5f53;&#x5728;&#x52a8;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4f7f;&#x7528",{"_index":2672,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5f53;&#x5728;&#x540c;&#x6b65;&#x8c03;&#x7528;&#x4e2d;&#x53d1;&#x751f;&#x4e00;&#x4e2a;&#x9519;&#x8bef;&#xff0c;&#x5728;&#x8bbf;&#x5ba2;&#x7aef;&#x4e00;&#x4e2a;&#x5f02;&#x5e38;&#x88ab;&#x629b;&#x51fa;&#xff0c;&#x5c31;&#x50cf;&#x6211;&#x4eec;&#x8c03;&#x7528;&#x4e00;&#x4e2a;&#x672c;&#x5730;&#x65b9;&#x6cd5;&#x3002",{"_index":1472,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#错误处理":{}}}],["x5f53;&#x5728;&#x5b8c;&#x6210;&#x6a21;&#x5f0f;&#x8fd0;&#x884c;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x4e0d;&#x73b0;&#x5b9e;&#x9519;&#x8bef;&#xff0c;&#x800c;&#x662f;&#x5c1d;&#x8bd5;&#x5ffd;&#x7565;&#x5b83;&#x4eec;&#x6216;&#x8005;&#x4ece;&#x9519;&#x8bef;&#x4e4b;&#x4e2d;&#x6062;&#x590d;&#x3002;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x81f4;&#x547d;&#x9519;&#x8bef;&#x53d1;&#x751f;&#x800c;&#x88ab;&#x5b8c;&#x6210;&#xff0c;hax",{"_index":5917,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x5f53;&#x5728;&#x5f02;&#x6b65;&#x8c03;&#x7528;&#x4e2d;&#x53d1;&#x751f;&#x4e00;&#x4e2a;&#x9519;&#x8bef;&#xff0c;&#x5c31;&#x50cf;&#x4e0a;&#x9762;&#x4f8b;&#x5b50;&#x4e2d;&#x770b;&#x5230;&#x7684;&#xff0c;&#x9519;&#x8bef;&#x5904;&#x7406;&#x7a0b;&#x5e8f;&#x5c06;&#x88ab;&#x8c03;&#x7528;&#x3002",{"_index":1471,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#错误处理":{}}}],["x5f53;&#x5728;&#x670d;&#x52a1;&#x7aef;&#x8fd0;&#x884c;&#x6a21;&#x677f;&#x7cfb;&#x7edf;&#xff0c;&#x4f60;&#x53ef;&#x4ee5;&#x7b80;&#x5355;&#x7684;&#x4f7f;&#x7528",{"_index":2170,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["x5f53;&#x57fa;&#x7840;&#x7684;&#x53ef;&#x89c1;&#x6027;&#xff08;&#x7b2c;4.4.1&#x8282;&#xff09;&#x9009;&#x9879;&#x4e0d;&#x6ee1;&#x8db3;&#x9700;&#x6c42;&#x65f6;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#x3002;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#x5728;&#x7c7b;&#x5c42;&#x9762;&#x4e0a;&#x548c;&#x5b57;&#x6bb5;&#x5c42;&#x9762;&#x4e0a;&#x90fd;&#x9002;&#x7528;&#xff0c;&#x5176;&#x4e2d;&#x6d89;&#x53ca;&#x4e24;&#x4e2a;&#x65b9;&#x5411;&#x4e0a;&#x7684;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#xff1a",{"_index":5313,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5f53;&#x5904;&#x7406;&#x5c5e;&#x6027;&#x65f6;&#xff0c;&#x91cd;&#x8981;&#x7684;&#x662f;&#x7406;&#x89e3;&#x4e24;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x8bbf;&#x95ee;&#xff1a",{"_index":4514,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x5f53;&#x5b9a;&#x4e49;&#x7c7b;&#x4e4b;&#x95f4;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x884c;&#x4e3a;&#x65f6;&#x9700;&#x8981;&#x7279;&#x522b;&#x6ce8;&#x610f;&#xff0c;&#x4e00;&#x81f4;&#x6027;&#x662f;&#x5b9a;&#x5411;&#x68c0;&#x67e5;&#x7684;&#xff1a;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x8d4b;&#x503c;&#x4e00;&#x4e2a;&#x7279;&#x4f8b;&#x5316;&#x7684;&#x7c7b;&#x578b;&#xff08;&#x4f8b;&#x5982;&#x4e00;&#x4e2a;&#x5b50;&#x7c7b;&#xff09;&#x5230;&#x4e00;&#x4e2a;&#x901a;&#x7528;&#x7c7b;&#x578b;&#xff08;&#x4f8b;&#x5982;&#x4e00;&#x4e2a;&#x7236;&#x7c7b;&#xff09;&#xff0c;&#x4f46;&#x662f;&#x53cd;&#x8fc7;&#x6765;&#x662f;&#x4e0d;&#x5141;&#x8bb8;&#x7684;&#x3002",{"_index":3754,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x5f53;&#x6211;&#x4eec;&#x5c1d;&#x8bd5;&#x5206;&#x914d;&#x4e00;&#x4e2a",{"_index":3939,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x5f53;&#x7136;&#x4e5f;&#x53ef;&#x4ee5;&#x5b9a;&#x4e49;&#x81ea;&#x5b9a;&#x4e49;&#x7684;&#x521d;&#x59cb;&#x5316;&#x5b8f;&#x6765;&#x5728;&#x771f;&#x6b63;&#x7f16;&#x8bd1;&#x4e4b;&#x524d;&#x6267;&#x884c;&#x5404;&#x79cd;&#x4efb;&#x52a1;&#x3002;&#x8fd9;&#x6837;&#x7684;&#x4e00;&#x4e2a;&#x5b8f;&#x5c06;&#x901a;&#x8fc7",{"_index":6614,"title":{},"body":{"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["x5f53;&#x7136;&#xff0c;&#x4f7f;&#x7528;&#x5143;&#x6570;&#x636e;&#x8bed;&#x6cd5;&#x7684;&#x5f0a;&#x7aef;&#x662f;&#xff0c;&#x5982;&#x679c;&#x5143;&#x6570;&#x636e;&#x7684;&#x5173;&#x952e;&#x5b57;&#x62fc;&#x5199;&#x9519;&#x8bef;&#xff08;&#x4f8b;&#x5982;@:acesss&#xff09;&#x6216;&#x8005;&#x7c7b;/&#x5305;&#x540d;&#x62fc;&#x5199;&#x9519;&#x8bef;&#xff0c;&#x5c06;&#x4e0d;&#x4f1a;&#x5f97;&#x5230;&#x9519;&#x8bef;&#x62a5;&#x544a;&#x3002;&#x5c3d;&#x7ba1;&#x5982;&#x6b64;&#xff0c;&#x5982;&#x679c;&#x4f60;&#x5c1d;&#x8bd5;&#x8bbf;&#x95ee;&#x4e00;&#x4e2a;&#x4e0d;&#x88ab;&#x5141;&#x8bb8;&#x8bbf;&#x95ee;&#x7684;&#x79c1;&#x6709;&#x5b57;&#x6bb5;&#x65f6;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x62a5;&#x9519;&#xff0c;&#x56e0;&#x4e3a;&#x8fd9;&#x4e0d;&#x53ef;&#x80fd;&#x662f;&#x4e00;&#x4e2a;&#x4e0d;&#x88ab;&#x89c9;&#x5bdf;&#x7684;&#x9519;&#x8bef;&#x3002",{"_index":5346,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x5f53;&#x7136;&#xff0c;&#x4f7f;&#x7528;&#x5355;&#x5f15;&#x53f7;&#x62ec;&#x8d77;&#x6765;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x5373;&#x4f7f;&#x6ca1;&#x6709;&#x4efb;&#x4f55;&#x63d2;&#x503c;&#x4ecd;&#x7136;&#x662f;&#x6709;&#x6548;&#x7684;&#xff0c;&#x4f46;&#x662f;&#x6ce8;&#x610f;&#x7f8e;&#x5143;&#x7b26;&#x53f7;&#x56e0;&#x4e3a;&#x5b83;&#x4f1a;&#x89e6;&#x53d1;&#x63d2;&#x503c;&#x3002;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x5b9e;&#x9645;&#x7684;&#x7f8e;&#x5143;&#x7b26;&#x53f7;&#x88ab;&#x4f7f;&#x7528;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":5685,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["x5f53;&#x7f16;&#x8bd1;&#x5230;&#x4e00;&#x4e2a",{"_index":3038,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x5f53;&#x8003;&#x8651;&#x4e3a;&#x7a7a;&#x6027;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x4e5f;&#x5fc5;&#x987b;&#x88ab;&#x89e3;&#x91ca;&#x3002;&#x7279;&#x522b;&#x5730;&#xff0c;&#x5728;&#x4e0d;&#x80fd;&#x4e3a;&#x7a7a;&#x7684;&#x539f;&#x751f;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x548c;&#x53ef;&#x80fd;&#x4e3a;&#x7a7a;&#x7684",{"_index":2633,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x5f53;&#x8f93;&#x51fa;flash9",{"_index":949,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x5f53;&#x8fd0;&#x884c;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x8f93;&#x51fa",{"_index":6542,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x5f53;&#x90e8;&#x5206;&#x6a21;&#x677f;&#x88ab;&#x6e32;&#x67d3;&#x65f6;&#x8981;&#x8c03;&#x7528;&#x81ea;&#x5b9a;&#x4e49;&#x7684;&#x51fd;&#x6570;&#xff0c;&#x63d0;&#x4f9b;&#x4e00;&#x4e2a",{"_index":2150,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["x5f62;&#x5f0f;&#x3002",{"_index":1653,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["x5f62;&#x5f0f;&#x7684;&#x58f0;&#x660e;&#x4e0b;&#xff0c;&#x5219;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":2942,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x5f62;&#x5f0f;&#x8c03;&#x7528;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x7ed9;&#x51fa;&#x7684;&#x9519;&#x8bef;&#x4fe1;&#x606f;&#x4e0d;&#x662f;&#x5f88;&#x6709;&#x7528;&#x3002;&#x8fd9;&#x91cc;&#xff0c;&#x6709;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x89e3;&#x91ca;&#xff1a;&#x4e0a;&#x9762;&#x7684;&#x4ee3;&#x7801;&#x4f1a;&#x628a",{"_index":3702,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x5f62;&#x5f0f;&#x8c03;&#x7528;&#x6765;&#x8bbf;&#x95ee;&#x6388;&#x6743;&#x8bfb;&#x53d6;&#x7684;&#x5b57;&#x6bb5;&#x3002",{"_index":4517,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x5f88;&#x591a;&#x7c7b;&#x578b;&#x5b89;&#x5168;&#x662f;&#x901a;&#x8fc7;&#x68c0;&#x67e5;&#x524d;&#x9762;&#x7684;&#x7c7b;&#x578b;&#x7ec4;&#x7684;&#x4e24;&#x4e2a;&#x6307;&#x5b9a;&#x7c7b;&#x578b;&#x662f;&#x5426;&#x517c;&#x5bb9;&#x6765;&#x5b9e;&#x73b0;&#x7684;&#x3002;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x5c1d;&#x8bd5;&#x5bf9;&#x5b83;&#x4eec;&#x6267;&#x884c;&#x5982;&#x5728",{"_index":132,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x5f97;&#x51fa;&#x4e00;&#x4e2a;&#x7ed3;&#x8bba;&#xff0c;hax",{"_index":2679,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5f97;&#x5230;&#x4fee;&#x590d;&#x3002",{"_index":1152,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x5faa;&#x73af;&#x3002;&#x5b83;&#x7684",{"_index":4867,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["x5faa;&#x73af;&#x548c;&#x4e00;&#x4e9b;&#x903b;&#x8f91;&#x5feb;&#x901f;&#x521b;&#x5efa;&#x548c;&#x586b;&#x5145;&#x6570;&#x7ec4;&#x3002",{"_index":523,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x5faa;&#x73af;&#x7531",{"_index":4889,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{}}}],["x5faa;&#x73af;&#x7684;&#x63a7;&#x5236;&#x6d41;&#x88ab",{"_index":4881,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["x5faa;&#x73af;&#x800c;&#x4e0d;&#x662f",{"_index":5703,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["x5faa;&#x73af;&#x8868;&#x8fbe;&#x5f0f;&#x53ef;&#x4ee5;&#x662f;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#xff0c;&#x5305;&#x62ec;&#x6761;&#x4ef6;&#x548c;&#x5d4c;&#x5957;&#x7684;&#x5faa;&#x73af;&#xff0c;&#x6240;&#x4ee5;&#x5982;&#x4e0b;&#x7684;&#x5185;&#x5bb9;&#x4f1a;&#x5982;&#x9884;&#x671f;&#x8fd0;&#x884c;&#xff1a",{"_index":5705,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["x5faa;&#x73af;&#xff08;&#x7b2c;5.13&#x8282;&#xff09;&#x8fed;&#x4ee3;&#xff0c;&#x5e76;&#x4f7f;&#x7528;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#xff08;&#x7b2c;2.8.3&#x8282;&#xff09;&#x7684;&#x8bed;&#x6cd5;&#x8bbf;&#x95ee;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4e0d;&#x50cf;&#x6570;&#x7ec4;&#x548c;&#x7acb;&#x6807;&#xff0c;&#x5411;&#x91cf;&#x957f;&#x5ea6;&#x662f;&#x88ab;&#x521b;&#x5efa;&#x65f6;&#x6307;&#x5b9a;&#x7684;&#xff0c;&#x5e76;&#x4e14;&#x4e4b;&#x540e;&#x4e0d;&#x80fd;&#x88ab;&#x4fee;&#x6539;&#x3002",{"_index":1642,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}}}],["x5faa;&#x73af;&#xff08;&#x7b2c;5.14&#x8282;&#xff09;&#x914d;&#x5408;&#x6570;&#x7ec4;&#x4e0b;&#x6807;&#x8fdb;&#x884c;&#xff1a",{"_index":1619,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x5fc5;&#x987b;&#x5047;&#x5b9a;&#x4efb;&#x4f55;&#x540d;&#x79f0;&#x53ef;&#x80fd;&#x88ab;&#x4f7f;&#x7528;&#xff0c;&#x9700;&#x8981;&#x76ee;&#x6807;&#x751f;&#x6210;&#x5668;&#x751f;&#x6210;&#x5143;&#x4fe1;&#x606f;&#x548c;&#x6267;&#x884c;&#x67e5;&#x627e;&#x3002;&#x6211;&#x4eec;&#x4e0d;&#x5141;&#x8bb8;&#x8fd9;&#x4e9b;&#x6807;&#x8bc6;&#x7b26;&#xff0c;&#x800c;&#x4f7f;&#x7528",{"_index":4547,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x5fc5;&#x987b;&#x7279;&#x522b;&#x6ce8;&#x610f;&#xff0c;&#x5b57;&#x6bb5;&#x540d;&#x6216;&#x8005;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x540d;&#x548c;&#x5305;&#x540d;&#x7684;&#x51b2;&#x7a81;&#xff1a;&#x56e0;&#x4e3a;&#x5b83;&#x4eec;&#x4f18;&#x5148;&#x7ea7;&#x9ad8;&#x4e8e;&#x5305;&#xff0c;&#x5982;&#x679c;&#x6709;&#x4e00;&#x4e2a;&#x540d;&#x4e3a;haxe&#x7684;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#xff0c;&#x5b83;&#x4eec;&#x4f1a;&#x4f1a;&#x963b;&#x6321;&#x6574;&#x4e2a;haxe&#x5305;&#x7684;&#x4f7f;&#x7528;&#x3002",{"_index":4193,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6027;&#x80fd;&#x5173;&#x952e;&#x578b;(perform",{"_index":3734,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x603b;&#x662f;&#x8fd4;&#x56de;&#x6574;&#x4e2a;&#x5339;&#x914d;&#x7684;&#x5b50;&#x4e32;&#x3002",{"_index":1788,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["x610f;&#x5473;&#x7740;&#x7ed3;&#x6784;&#x53ef;&#x4ee5;&#x88ab;&#x5d4c;&#x5957;&#x548c;&#x6df7;&#x5408;&#xff0c;&#x5982;&#xff1a",{"_index":2998,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x6210;&#x4e3a;&#x4e00;&#x4e2a",{"_index":3674,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["x6210;&#x4e3a;&#x4e00;&#x4e2a;&#x6709;&#x6548;&#x7684;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x3002",{"_index":6602,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x6210;&#x5458;&#x53d8;&#x91cf;&#x503c;&#x6709;&#x4e00;&#x4e2a",{"_index":5822,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x6210;&#x5458;&#x7c7b;&#x5b57;&#x6bb5;&#xff08;&#x7b2c;4&#x7ae0;&#xff09;&#x5217;&#x8868;&#xff0c;&#x63cf;&#x8ff0;&#x4e3a;&#x7c7b;&#x5b57;&#x6bb5;&#x4fe1;&#x606f;&#xff08;&#x7b2c;8.5.1&#x8282;&#xff09;&#x3002",{"_index":6208,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x6211;&#x4e5f;&#x4e5f;&#x53ef;&#x4ee5;&#x7528;&#x5176;&#x5b83;&#x65b9;&#x6cd5;&#x8fed;&#x4ee3;&#x6bcf;&#x4e2a;&#x5b50;&#x8282;&#x70b9;&#x6216;&#x5143;&#x7d20;&#x3002",{"_index":2382,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{}}}],["x6211;&#x4eec;&#x4f1a;&#x4f7f;&#x7528;&#x5f88;&#x591a",{"_index":22,"title":{},"body":{"index.html#关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x6211;&#x4eec;&#x4f1a;&#x5728",{"_index":97,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x6807;&#x51c6;&#x7684;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x6a21;&#x5f0f;&#xff0c;&#x5982;&#xff1a",{"_index":1887,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x6211;&#x4eec;&#x53ef;&#x4ee5;&#x5b89;&#x5168;&#x7684;&#x5206;&#x914d",{"_index":3816,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x6211;&#x4eec;&#x53ef;&#x4ee5;&#x770b;&#x5230;&#x8bbf;&#x95e",{"_index":4639,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x6211;&#x4eec;&#x53ef;&#x4ee5;&#x770b;&#x5230;&#xff0c;&#x5728;&#x7b2c;7&#x884c;&#x8c03;&#x7528",{"_index":3607,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x6211;&#x4eec;&#x53ef;&#x4ee5;&#x786e;&#x5b9a",{"_index":3738,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x6211;&#x4eec;&#x53ef;&#x4ee5;&#x7b80;&#x5355;&#x7684;&#x8bc6;&#x522b;&#x5143;&#x6570;&#x636e;&#x901a;&#x8fc7;&#x5f00;&#x59cb;&#x7684",{"_index":5817,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x6211;&#x4eec;&#x53ef;&#x4ee5;&#x8bc6;&#x522b;&#x4e0d;&#x540c;&#x79cd;&#x7c7b;&#x7684;&#x5b8f;&#xff0c;&#x5b83;&#x4eec;&#x8fd0;&#x884c;&#x5728;&#x7279;&#x5b9a;&#x7684;&#x7f16;&#x8bd1;&#x9636;&#x6bb5;&#xff1a",{"_index":772,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x6211;&#x4eec;&#x5728",{"_index":125,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x6211;&#x4eec;&#x5728;&#x4e0b;&#x9762;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x4e2d;&#x6f14;&#x793a;&#x4e86;&#x5176;&#x7528;&#x6cd5;&#xff1a",{"_index":5417,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x6211;&#x4eec;&#x58f0;&#x660",{"_index":3235,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x6211;&#x4eec;&#x58f0;&#x660e;&#x4e86;&#x4e00;&#x4e2a",{"_index":4800,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x6211;&#x4eec;&#x5b66;&#x4e60;&#x4e86;&#x9759;&#x6001;&#x6269;&#x5c55;&#xff0c;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x610f;&#x5473;&#x7740;&#x6240;&#x6709;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x88ab;&#x5e26;&#x5165;&#x9759;&#x6001;&#x6269;&#x5c55;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x3002;&#x4e8b;&#x5b9e;&#x8bc1;&#x660e;&#xff0c;&#x8fd9;&#x6837;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x4e5f;&#x53ef;&#x4ee5;&#x662f;&#x4e00;&#x4e2a;&#x5bf9;&#x5176;&#x5b83;&#x7c7b;&#x578b;&#x7684;typedef&#xff08;&#x7b2c;3.1&#x8282;&#xff09;&#x3002;&#x7136;&#x540e;&#x7f16;&#x8bd1;&#x5668;&#x5c06;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x5f53;&#x4f5c;&#x6a21;&#x5757;&#x7684;&#x4e00;&#x90e8;&#x5206;&#xff0c;&#x5e76;&#x76f8;&#x5e94;&#x7684;&#x5ef6;&#x4f38;&#x9759;&#x6001;&#x6269;&#x5c55;&#x3002",{"_index":6465,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x6211;&#x4eec;&#x5c06;&#x8fdb;&#x884c;&#x5b66;&#x4e60;&#x7684;&#x5185;&#x5bb9",{"_index":3551,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x6211;&#x4eec;&#x5df2;&#x7ecf;&#x5728;&#x524d;&#x9762;&#x7ae0;&#x8282;&#x7684;&#x4e00;&#x4e9b;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x4e2d;&#x770b;&#x8fc7;&#x53d8;&#x91cf;&#x5b57;&#x6bb5;&#x4e86;&#x3002;&#x53d8;&#x91cf;&#x5b57;&#x6bb5;&#x4fdd;&#x5b58;&#x503c;&#xff0c;&#x662f;&#x5b83;&#x4eec;&#x548c;&#x5927;&#x591a;&#x6570;&#xff08;&#x975e;&#x6240;&#x6709;&#xff09;&#x5c5e;&#x6027;&#x5171;&#x6709;&#x7684;&#x7279;&#x70b9;&#xff1a",{"_index":4364,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["x6211;&#x4eec;&#x5e38;&#x5e38;&#x88ab;&#x95ee;&#x53ca;&#xff0c;&#x4e3a;&#x4ec0;&#x4e48;&#x4e00;&#x4e2a;&#x4f7f;&#x7528;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x7684;&#x65b9;&#x6cd5;&#x4e0d;&#x80fd;&#x88ab;&#x4ee5",{"_index":3701,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x6211;&#x4eec;&#x627f;&#x8ba4;&#x5f53;&#x524d;&#x7684;&#x683c;&#x5f0f;&#x9700;&#x8981;&#x4e00;&#x4e9b;&#x70e6;&#x4eba;&#x7684;&#x624b;&#x52a8;&#x89e3;&#x6790;&#x3002;&#x5c06;&#x6765;&#x6211;&#x4eec;&#x53ef;&#x80fd;&#x8003;&#x8651;&#x63d0;&#x4f9b;&#x4e00;&#x4e2a;&#x66f4;&#x7ed3;&#x6784;&#x5316;&#x7684;&#x8f93;&#x51fa;&#xff0c;&#x5c24;&#x5176;&#x5bf9;&#x4e8e;&#x51fd;&#x6570;&#x3002",{"_index":5959,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["x6211;&#x4eec;&#x63cf;&#x8ff0;&#x89e3;&#x6790;&#x987a;&#x5e8f;&#x7684;&#x7b97;&#x6cd5;&#xff0c;&#x53d6;&#x51b3;&#x4e8e;&#x4ee5;&#x4e0b;&#x7684;&#x72b6;&#x6001;&#xff1a",{"_index":4277,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x6211;&#x4eec;&#x770b;&#x5230;&#xff0c;extern",{"_index":5403,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x6211;&#x4eec;&#x7814;&#x7a76;&#x5982;&#x4e0b;&#x7684;&#x5b8c;&#x6210;&#x6a21;&#x5f0f;&#x7ec6;&#x8282;&#xff1a",{"_index":5899,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x6216",{"_index":2029,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["x6216;&#x662f",{"_index":19,"title":{},"body":{"index.html#关于本文档":{}}}],["x6216;&#x66f4;&#x9ad8;&#x7248;&#x672c;&#x3002",{"_index":1449,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x6216;&#x8005",{"_index":779,"title":{},"body":{"9.宏/9.宏.html#9-宏":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x6216;&#x8005;&#x5176;&#x4ed6;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x3002;&#x4f46;&#x662f;&#x8fd9;&#x4e2a;&#x65b9;&#x5411;&#x4e0a;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x5728;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x7684;&#x8d4b;&#x503c;&#x64cd;&#x4f5c;&#x4e0a;&#x662f;&#x88ab;&#x5141;&#x8bb8;&#x7684;&#xff1a",{"_index":3884,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x6216;&#x8005;&#x662f;&#x4e00;&#x4e2a;&#x5305",{"_index":5323,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x6216;&#x8005;&#xff0c;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x6b63;&#x5219;&#x8bed;&#x6cd5;&#x521b;&#x5efa;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#xff1a",{"_index":1885,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x6216;&#x8005;set",{"_index":4437,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["x6240;&#x4fee;&#x9970;&#x3002;&#x4f60;&#x4e5f;&#x53ef;&#x4ee5;&#x5c06;&#x4fee;&#x9970;&#x6539;&#x4e3a",{"_index":5330,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x6240;&#x5728;&#x7684;&#x5730;&#x65b9;&#x4e0d;&#x662f;&#x6709;&#x6548;&#x7684;&#x8bed;&#x53e5;&#x65f6;&#x53ef;&#x7528;&#xff0c;&#x4f8b;&#x5982;&#xff0c;&#x5728;&#x4e00;&#x4e2a;&#x70b9;&#x53f7;&#x4e4b;&#x540e;&#xff08;.|&#xff09;&#x548c;&#x5f00;&#x53e3;&#x7684;&#x62ec;&#x53f7;&#xff08",{"_index":5911,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x6240;&#x64c5;&#x957f;&#x7684;&#x4e8b;&#x60c5;&#x3002;&#x7ed9;&#x533f;&#x540d;&#x7ed3;&#x6784;&#x7c7b;&#x578b;&#x547d;&#x540d;&#x751a;&#x81f3;&#x53ef;&#x4ee5;&#x8ba4;&#x4e3a;&#x662f;&#x5b83;&#x4eec;&#x7684;&#x4e3b;&#x8981;&#x7528;&#x9014;&#x3002;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;&#x8fd9;&#x79cd;&#x65b9;&#x5f0f;&#x7684;&#x4f7f;&#x7528;&#x662f;&#x5982;&#x6b64;&#x7684;&#x5e38;&#x89c1;&#x4ee5;&#x81f3;&#x4e8e;&#x8bb8;&#x591a",{"_index":3619,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x6240;&#x6709;&#x5185;&#x5bb9;&#x90fd;&#x662f;&#x5173;&#x4e8e",{"_index":1017,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x6240;&#x6709;&#x5b8c;&#x6210;&#x4f7f;&#x7528",{"_index":5893,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x6240;&#x6709;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a;&#x540d;&#x4e3a",{"_index":2831,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x6240;&#x6709;&#x7684;&#x53c2;&#x6570;&#x548c;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x9700;&#x8981;&#x662f;&#x663e;&#x5f0f;&#x7684;&#x3002",{"_index":5400,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x6240;&#x6709;&#x7684;&#x5b50;&#x7c7b;&#x578b;&#xff08;&#x7b2c;3.7.1&#x8282;&#xff09;&#x4ee5;&#x53ca;&#x6240;&#x6709;&#x5b83;&#x7684;&#x516c;&#x5171;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#xff08;&#x56e0;&#x4e3a;&#x8fd9;&#x4e9b;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x5bfc;&#x5165;&#xff09;&#xff1a",{"_index":5993,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["x6240;&#x6709;&#x7684;&#x5b57;&#x6bb5;&#x9664;&#x975e;&#x4fee;&#x9970;&#x7b26;&#x6807;&#x8bb0;&#x4e3a",{"_index":4755,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["x6240;&#x6709;&#x7684;&#x7c7b;&#x578b;&#x4ee5;&#x6a21;&#x5757;&#x5f62;&#x5f0f;&#x7ec4;&#x7ec7;&#xff0c;&#x53ef;&#x4ee5;&#x88ab;&#x901a;&#x8fc7;&#x8def;&#x5f84;&#x627e;&#x5230;&#x3002",{"_index":135,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x6240;&#x6709;&#x7684;haxe&#x4ee3;&#x7801;&#x7ec4;&#x7ec7;&#x5728;&#x6a21;&#x5757;&#x4e2d;&#xff0c;&#x901a;&#x8fc7;&#x8def;&#x5f84;&#x5b9a;&#x4f4d;&#x3002;&#x672c;&#x8d28;&#x4e0a;&#x8bb2;&#xff0c;&#x6bcf;&#x4e2a;.hx",{"_index":4232,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x6240;&#x6709;&#x76ee;&#x6807;&#x5e73;&#x53f0",{"_index":1431,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x624b;&#x518c;&#x7684;&#x4e00;&#x4e2a;&#x8bfb;&#x8005;&#x56f0;&#x60d1;&#x4e8e;&#x4e0a;&#x9762;&#x793a;&#x4f8b;&#x4e2d",{"_index":2845,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x624d;&#x53ef;&#x4ee5;&#x4e3a;&#x6df7;&#x5408;&#x7c7b;&#x578b;&#x3002",{"_index":1628,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x6253;&#x5370;&#x7684;&#x548c;stderr&#x6253;&#x5370;&#x7684;&#x5185;&#x5bb9;&#x7684;&#x4e0d;&#x540c;&#x3002;&#x8fd9;&#x4e0d;&#x662f;sockt&#x6a21;&#x5f0f;&#x4e0b;&#x7684;&#x60c5;&#x51b5;&#x3002;&#x4e3a;&#x4e86;&#x533a;&#x5206;&#x4e24;&#x8005;&#xff0c;&#x65e5;&#x5fd7;&#x6d88;&#x606f;&#xff08;&#x4e0d;&#x662f;&#x9519;&#x8bef;&#x6d88;&#x606f;&#xff09;&#x524d;&#x7f6e;&#x4e00;&#x4e2a",{"_index":6107,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x6253;&#x5370;&#x7edd;&#x5bf9;&#x6587;&#x4ef6;&#x8def;&#x5f84;&#x5230;trac",{"_index":946,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x6267;&#x884c;&#x7c7b;&#x578b;&#x6784;&#x5efa;&#x5b8f;&#x3002",{"_index":6598,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x6269;&#x5c55;&#x540d;&#x7684;&#x6587;&#x4ef6",{"_index":1192,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x6269;&#x5c55;&#x88ab;&#x7528;&#x4e8e;&#x8868;&#x793a;&#x8be5;&#x7ed3;&#x6784;&#x5177;&#x6709;&#x67d0;&#x4e2a;&#x7ed9;&#x5b9a;&#x7c7b;&#x578b;&#x7684;&#x6240;&#x6709;&#x5b57;&#x6bb5;&#x5916;&#xff0c;&#x8fd8;&#x5177;&#x6709;&#x4e00;&#x4e9b;&#x989d;&#x5916;&#x7684;&#x5b57;&#x6bb5;&#xff1a",{"_index":2968,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x627e;&#x51fa;&#x67d0;&#x4e2a;&#x7279;&#x5b9a;&#x5143;&#x7d20;&#x7684;&#x7d22;&#x5f15;&#x3002",{"_index":2038,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x627e;&#x5230;&#x6ee1;&#x8db3;&#x4e00;&#x4e2a;&#x6761;&#x4ef6;&#x7684;&#x5143;&#x7d20;&#xff0c;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x65b0;&#x7684",{"_index":2043,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x627e;&#x5230;&#x7ed9;&#x5b9a;&#x641c;&#x7d22;&#x51fd;&#x6570;&#x7684;&#x7b2c;&#x4e00;&#x4e2a;&#x5143;&#x7d20;&#x3002",{"_index":2039,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x628a",{"_index":3942,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x628a;&#x6570;&#x7ec4;&#x4f5c;&#x4e3a;&#x5b83;&#x7684;&#x503c;&#x3002;&#x5426;&#x5219;&#x5b83;&#x751f;&#x6210;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#x58f0;&#x660e;&#x3002",{"_index":6380,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x62a5;&#x544a;&#x65e0;&#x6cd5;&#x8fbe;&#x5230;&#x7684;&#x4ee3;&#x7801;&#x3002",{"_index":6288,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x62bd;&#x8c61;&#x4e86;&#x8bb8;&#x591a;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x7684;&#x5dee;&#x5f02;&#xff0c;&#x4f46;&#x662f;&#x6709;&#x65f6;&#x548c;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x76f4;&#x63a5;&#x4ea4;&#x4e92;&#x4e5f;&#x662f;&#x975e;&#x5e38;&#x91cd;&#x8981;&#x7684;&#xff0c;&#x5728",{"_index":1042,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x62bd;&#x8c61;&#x64cd;&#x4f5c;&#x7b26;&#x91cd;&#x8f7d",{"_index":5184,"title":{},"body":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b",{"_index":510,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#x4fe1;&#x606f;&#xff1a",{"_index":6214,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x662f;&#x7528;&#x6765;&#x4ee3;&#x8868;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x901a;&#x5e38;&#x662f;&#x4e00;&#x4e2a;&#x5177;&#x4f53;&#x7684;&#xff08;&#x5373;&#x975e;&#x62bd;&#x8c61;&#x7684;&#xff09;&#x7c7b;&#x578b;&#xff0c;&#x4f46;&#x662f;&#x4e5f;&#x53ef;&#x4ee5;&#x662f;&#x53e6;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x3002",{"_index":3537,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.8&#x8282;&#xff09;&#x3002",{"_index":6219,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#x901a;&#x8fc7;&#x6dfb;&#x52a0",{"_index":3302,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.8&#x8282;&#xff09",{"_index":2626,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff0c;&#x5728",{"_index":3410,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff1a;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x65f6;&#x7c7b;&#x578b;&#xff0c;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x88ab;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#x8868;&#x793a",{"_index":109,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x5c01;&#x88c5;&#x4e86",{"_index":3434,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x62ec;&#x53f7;&#x3002;&#x53c2;&#x6570;&#x89c4;&#x8303;&#x7684;&#x9644;&#x52a0;&#x4fe1;&#x606f;&#x5728",{"_index":4581,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x62ec;&#x53f7;&#x5339;&#x914d;&#x5b57;&#x7b26;&#x7684;&#x5206;&#x7ec4",{"_index":1896,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x62ec;&#x53f7;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x50cf;&#x5f80;&#x5e38;&#x4e00;&#x6837;&#x7ec4;&#x7ec7;&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":5278,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x62ec;&#x53f7;&#x5f00;&#x59cb;&#xff0c;&#x4e00;&#x4e2a",{"_index":4578,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x62ec;&#x53f7;&#x662f;&#x5f3a;&#x5236;&#x6027;&#x7684;&#x3002;&#x4e0d;&#x60f3;&#x5b89;&#x5168;&#x8f6c;&#x6362;&#xff08;&#x7b2c;5.23.2&#xff09;&#xff0c;&#x8fd9;&#x4e2a;&#x7ed3;&#x6784;&#x6ca1;&#x6709;&#x8fd0;&#x884c;&#x65f6;&#x7684;&#x5f71;&#x54cd;&#x3002;&#x5b83;&#x6709;&#x4e24;&#x4e2a;&#x7f16;&#x8bd1;&#x65f6;&#x7684;&#x5f71;&#x54cd;&#xff1a",{"_index":5113,"title":{},"body":{"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["x6307;&#x793a;&#x6807;&#x8bb0",{"_index":5270,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x6355;&#x83b7;&#x53d8;&#x91cf;&#x540d",{"_index":6395,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x63a2;&#x7d22",{"_index":1038,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x63a5;&#x4e0b;&#x6765;&#x662f",{"_index":1027,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x63a5;&#x53d7;&#x4e00;&#x4e2a",{"_index":3533,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x63a5;&#x53d7;&#x7b2c;&#x4e00;&#x4e2a",{"_index":3086,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x63a5;&#x53e3",{"_index":6639,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["x63a5;&#x53e3;&#x4e0a;&#x7684;&#x4e00;&#x822c;&#x6ce8;&#x610f;&#x4e8b;&#x9879",{"_index":5907,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x63a5;&#x53e3;&#x5230;&#x57fa;&#x7840;&#x63a5;&#x53e3",{"_index":3759,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x63a5;&#x53e3;&#x53ef;&#x4ee5;&#x6269;&#x5c55;&#x591a;&#x4e2a;&#x5176;&#x5b83;&#x7684;&#x63a5;&#x53e3;&#xff0c;&#x4f7f;&#x7528",{"_index":2745,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x63a5;&#x53e3;&#x7684;&#x201c;i",{"_index":2739,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x63a5;&#x53e3;&#x7684;&#x5b9e;&#x4f8b;&#x3002;&#x867d;&#x7136;&#x4e00;&#x4e2a;&#x7c7b;&#x53ea;&#x80fd;&#x6709;&#x4e00;&#x4e2a;&#x7236;&#x7c7b;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x591a;&#x4e2a",{"_index":2742,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x63a5;&#x53e3;&#xff08;&#x7b2c;2.3.3&#x8282;&#xff09;&#xff0c;&#x5b83;&#x5ef6;&#x4f38;&#x5230;&#x6240;&#x6709;&#x5b9e;&#x73b0;&#x8fd9;&#x4e2a;&#x63a5;&#x53e3;&#x7684;&#x7c7b;&#xff1a",{"_index":5351,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x63a5;&#x53e3;&#xff0c;&#x5b83;&#x4e0d;&#x50cf",{"_index":2733,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x63a7;&#x5236;&#x53f0;&#x4f1a;&#x8f93;&#x51fa",{"_index":2121,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{}}}],["x63a7;&#x5236;&#x53f0;&#x4f1a;&#x8f93;&#x51fa;&#x5982;&#x4e0b;&#x7ed3;&#x679c;&#xff1a",{"_index":2160,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["x63a8;&#x65ad;&#x662f;&#x5426;&#x5b57;&#x6bb5;&#x4e3a",{"_index":6285,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x63cf;&#x8ff0",{"_index":945,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["x63cf;&#x8ff0;&#x4e86;&#x4e00;&#x4e2a;&#x989c;&#x8272;&#xff0c;&#x53ef;&#x80fd;&#x662f;&#x7ea2;&#x8272;&#xff0c;&#x7eff;&#x8272;&#xff0c;&#x84dd;&#x8272;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7684",{"_index":2855,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x63d0;&#x4f9b",{"_index":6165,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.资源.html#8-4-资源":{}}}],["x63d0;&#x4f9b;&#x4e86;&#x5f3a;&#x5927;&#x7684;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#xff08;&#x7b80;&#x5199;&#xff1a;enum&#xff09;&#xff0c;&#x5b83;&#x5b9e;&#x9645;&#x4e0a;&#x662f;&#x4e00;&#x4e2a;&#x4ee3;&#x6570;&#x6570;&#x636e;&#x7c7b;&#x578b;&#xff08;adt&#xff09;&#x3002;&#x867d;&#x7136;&#x5b83;&#x4eec;&#x4e0d;&#x80fd;&#x6709;&#x4efb;&#x4f55;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x4f46;&#x7528;&#x6765;&#x63cf;&#x8ff0;&#x6570;&#x636e;&#x7ed3;&#x6784;&#x662f;&#x975e;&#x5e38;&#x5b9e;&#x7528;&#x7684;&#xff1a",{"_index":2853,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x63d0;&#x4f9b;&#x5b9e;&#x73b0;&#x3002",{"_index":1827,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["x63d0;&#x4f9b;&#x5bf9;&#x5b8f;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x548c;&#x5b57;&#x7b26;&#x4e32;&#x8868;&#x8fbe;&#x5f0f;&#x6709;&#x7528;&#x7684;&#x64cd;&#x4f5c;&#x3002",{"_index":6458,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x63d0;&#x4f9b;&#x8d44;&#x91d1;&#x652f;&#x6301;&#xff0c;&#x5f00;&#x59cb;&#x805a;&#x7126;&#x4e8e;&#x4e0b;&#x4e00;&#x4e2a;&#x4e3b;&#x8981;&#x7248;&#x672c;&#x3002;hax",{"_index":1176,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x63d0;&#x53d6;&#x5668",{"_index":5715,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x63d0;&#x53d6;&#x5668;&#x5141;&#x8bb8;&#x5e94;&#x7528;&#x53d8;&#x6362;&#x5230;&#x88ab;&#x5339;&#x914d;&#x7684;&#x503c;&#x3002;&#x8fd9;&#x624d;&#x9700;&#x8981;&#x5bf9;&#x4e00;&#x4e2a;&#x5339;&#x914d;&#x7684;&#x503c;&#x5728;&#x5339;&#x914d;&#x7ee7;&#x7eed;&#x4e4b;&#x524d;&#x505a;&#x4e00;&#x4e2a;&#x5c0f;&#x7684;&#x64cd;&#x4f5c;&#x65f6;&#x7ecf;&#x5e38;&#x7528;&#x5230;&#xff1a",{"_index":5649,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x63d0;&#x53d6;&#x5668;&#x901a;&#x8fc7;extractorexpress",{"_index":5655,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x64ad;&#x653e;&#x5668;&#x8fd0;&#x884c;&#x7f16;&#x8bd1;&#x540e;&#x7684;&#x7a0b;&#x5e8f;&#xff0c;&#x4f1a;&#x4ea7;&#x751f;&#x4e00;&#x4e2a;&#x9519;&#x8bef",{"_index":3147,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x64cd;&#x4f5c",{"_index":2512,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x64cd;&#x4f5c;&#x6570;1",{"_index":2513,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x64cd;&#x4f5c;&#x6570;2",{"_index":2514,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x64cd;&#x4f5c;&#x65f6;&#x88ab;&#x89e6;&#x53d1;&#xff0c;&#x524d;&#x6587;&#x4e2d;&#x7684",{"_index":3948,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x64cd;&#x4f5c;&#x7b26",{"_index":4354,"title":{"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{}},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x64cd;&#x4f5c;&#x7b26;&#x3002",{"_index":5189,"title":{},"body":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["x64cd;&#x4f5c;&#x7b26;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5",{"_index":3975,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x64cd;&#x4f5c;&#x7b26;&#x4f18;&#x5148;&#x7ea7;&#x4e0d;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x62bd;&#x8c61;&#x64cd;&#x4f5c;&#x7b26;&#x91cd;&#x8f7d;&#x6539;&#x53d8;&#x3002",{"_index":5187,"title":{},"body":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["x64cd;&#x4f5c;&#x7b26;&#x5206;&#x9694;&#xff1a",{"_index":5657,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x64cd;&#x4f5c;&#x7b26;&#x7528;&#x6765;&#x5728;&#x6a21;&#x5f0f;&#x4e2d;&#x63cf;&#x8ff0;&#x591a;&#x4e2a;&#x63a5;&#x53d7;&#x7684;&#x6a21;&#x5f0f;&#xff1a",{"_index":5622,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{}}}],["x64cd;&#x4f5c;&#x7b26;&#x7684;&#x53f3;&#x4fa7;&#x662f;&#x4e00;&#x4e2a;&#x6355;&#x83b7;&#x7684;&#x53d8;&#x91cf;&#xff08;&#x7b2c;6.4.3&#x8282;&#xff09;&#x3002",{"_index":5665,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x652f;&#x6301;&#x4e5d;&#x4e2a;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7528;&#x4e8e;&#x4e0d;&#x540c;&#x7684;&#x7528;&#x4f8b;&#xff1a",{"_index":1004,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x652f;&#x6301;&#x7684;&#x503c",{"_index":2430,"title":{"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}},"body":{}}],["x652f;&#x6301;&#x8868;&#x8fbe;&#x5f0f;&#x4e2d;&#x4f7f;&#x7528",{"_index":4795,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x652f;&#x6301;&#x8fd0;&#x884c;&#x65f6;&#x7684;&#x7c7b;&#x578b;&#x548c;&#x5b57;&#x6bb5;&#x53cd;&#x5c04;&#x3002;&#x5fc5;&#x987b;&#x6ce8;&#x610f;&#xff0c;&#x56e0;&#x4e3a;&#x8fd0;&#x884c;&#x65f6;&#x8868;&#x793a;&#x4e0d;&#x540c;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x4e4b;&#x95f4;&#x7684;&#x4e00;&#x822c;&#x5dee;&#x5f02;&#x3002;&#x4e3a;&#x4e86;&#x6b63;&#x786e;&#x7684;&#x4f7f;&#x7528;&#x53cd;&#x5c04;&#xff0c;&#x9700;&#x8981;&#x7406;&#x89e3;&#x54ea;&#x79cd;&#x7c7b;&#x522b;&#x7684;&#x64cd;&#x4f5c;&#x662f;&#x88ab;&#x652f;&#x6301;&#x7684;&#xff0c;&#x54ea;&#x4e9b;&#x4e0d;&#x662f;&#x3002;&#x9274;&#x4e8e;&#x53cd;&#x5c04;&#x7684;&#x52a8;&#x6001;&#x7279;&#x6027;&#xff0c;&#x8fd9;&#x4e0d;&#x80fd;&#x603b;&#x662f;&#x88ab;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x786e;&#x5b9a;&#x3002",{"_index":2308,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x6570;&#x503c;&#x7c7b;&#x578b;&#x4e2d;&#x6ca1;&#x6709;&#x627e;&#x5230;&#xff0c;&#x800c;&#x4e14;&#x6ca1;&#x6709;&#x9ed8;&#x8ba4;&#x503c;&#x3002;&#x4e0d;&#x4f7f;&#x7528",{"_index":3149,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x6570;&#x636e",{"_index":2389,"title":{},"body":{"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}}}],["x6570;&#x636e;&#x3002",{"_index":1346,"title":{},"body":{"10.标准库/10.10.Json/10.10.Json.html#10-10-Json":{}}}],["x6570;&#x636e;&#x53ef;&#x4ee5;&#x88ab;&#x7b80;&#x5355;&#x7684;&#x7ec4;&#x7ec7;&#x4e3a;&#x533f;&#x540d;&#x7ed3;&#x6784;&#xff0c;&#x51cf;&#x5c11;&#x5c0f;&#x578b;&#x6570;&#x636e;&#x7c7b;&#x7684;&#x5fc5;&#x8981;&#x6027;&#x3002",{"_index":519,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x6570;&#x636e;&#x5e8f;&#x5217;&#x5316",{"_index":1473,"title":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化":{}},"body":{}}],["x6570;&#x636e;&#x6765;&#x521b;&#x5efa;&#x3002",{"_index":2361,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{}}}],["x6570;&#x636e;&#x7ed3;&#x6784",{"_index":74,"title":{},"body":{"10.标准库/10.标准库.html#10-标准库":{}}}],["x6570;&#x636e;&#xff0c;&#x5e76;&#x4ece;&#x4e2d;&#x83b7;&#x53d6;&#x4e00;&#x4e2a",{"_index":1307,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["x6570;&#x7ec4",{"_index":1751,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{}}}],["x6570;&#x7ec4;&#x3002;&#x6b64;&#x65f6;&#x6211;&#x4eec;&#x9664;&#x4e86;&#x77e5;&#x9053;&#x53d8;&#x91cf",{"_index":4065,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x6570;&#x7ec4;&#x4e3a;&#x4e00;&#x4e2a;&#x6df7;&#x5408;&#x7c7b;&#x578b;&#xff0c;&#x5982",{"_index":3157,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x6570;&#x7ec4;&#x4f7f;&#x7528;&#x5c01;&#x95ed;&#x7684;&#x65b9;&#x62ec;&#x53f7;&#xff0c;&#x5e76;&#x5728;&#x5176;&#x4e2d;&#x4f7f;&#x7528;&#x9017;&#x53f7;&#x5206;&#x9694;&#x503c;&#x6765;&#x521d;&#x59cb;&#x5316;&#x3002;&#x4e00;&#x4e2a;&#x6241;&#x5e73;&#x7684",{"_index":5197,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["x6570;&#x7ec4;&#x5339;&#x914d",{"_index":5712,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x6570;&#x7ec4;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x56fa;&#x5b9a;&#x7684;&#x957f;&#x5ea6;&#x5339;&#x914d;&#xff1a",{"_index":5606,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{}}}],["x6570;&#x7ec4;&#x5728;&#x5b83;&#x7684;&#x5143;&#x7d20;&#x4e4b;&#x4e0a;&#x5b9a;&#x4e49;&#x4e86;&#x4e00;&#x4e2a;&#x8fed;&#x4ee3;&#x5668;&#xff08;&#x7b2c;6.7&#x8282;&#xff09;&#x3002;&#x8fd9;&#x4e2a;&#x8fed;&#x4ee3;&#x901a;&#x5e38;&#x7531;&#x7f16;&#x8bd1;&#x5668;&#x4f18;&#x5316;&#x540e;&#x4ee5;&#x4e00;&#x4e2a",{"_index":1618,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x6570;&#x7ec4;&#x58f0;&#x660",{"_index":3908,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x6570;&#x7ec4;&#x58f0;&#x660e;&#xff08;&#x7b2c;5.5&#x8282;&#xff09;&#xff08;&#x5982;&#x679c;&#x6240;&#x6709;&#x5b83;&#x4eec;&#x7684;&#x5143;&#x7d20;&#x5177;&#x6709;&#x8d44;&#x683c;&#xff09",{"_index":5834,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x6570;&#x7ec4;&#x63a8;&#x5bfc",{"_index":520,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95e",{"_index":3367,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x5931;&#x8d25;&#x3002;&#x4e3a;&#x4e86;&#x907f;&#x514d;&#x8fd9;&#x4e2a;&#x95ee;&#x9898;&#xff0c;&#x53d8;&#x91cf",{"_index":3176,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x63cf;&#x8ff0;&#x4e86;&#x7279;&#x5b9a;&#x7684;&#x8bed;&#x6cd5;&#xff0c;&#x4f20;&#x7edf;&#x4e0a;&#x7528;&#x4e8e;&#x8bbf;&#x95ee;&#x6570;&#x7ec4;&#x4e2d;&#x7684;&#x67d0;&#x4e2a;&#x504f;&#x79fb;&#x91cf;&#x7684;&#x503c;&#x3002;&#x901a;&#x5e38;&#x53ea;&#x5141;&#x8bb8;&#x5e26;&#x6709",{"_index":3351,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x89e3;&#x6790;&#x7684;&#x987a;&#x5e8f",{"_index":3361,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x5f00;&#x53e3;&#x7684",{"_index":5226,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95ee;&#xff08;&#x7b2c;2.8.3&#x8282;&#xff09",{"_index":3465,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x6570;&#x7ec4;&#x8bed;&#x6cd5;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x5339;&#x914d;&#x591a;&#x4e2a;&#x503c;&#xff1a",{"_index":5614,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["x6570;&#x7ec4;&#x9644;&#x5e26;&#x4e00;&#x4e2a",{"_index":1610,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x6574;&#x6570",{"_index":2128,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#表达式":{}}}],["x6587;&#x4ef6",{"_index":6159,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["x6587;&#x4ef6;&#x3002",{"_index":733,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x6587;&#x4ef6;&#x4e2d;&#x53ef;&#x4ee5;&#x5305;&#x542b;&#x591a;&#x4e2a;&#x7c7b;&#x578b;&#x58f0;&#x660e;&#xff0c;&#x8fd9;&#x4e9b;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x5728;&#x8be5;&#x6a21;&#x5757;&#x4e2d;&#x4e0d;&#x53d7;&#x9650;&#x5236;&#x5730;&#x88ab;&#x8c03;&#x7528;&#xff0c;&#x4f46;&#x4ece;&#x5176;&#x5b83;&#x6a21;&#x5757;&#x4e2d;&#x4f7f;&#x7528;&#x65f6;&#x9700;&#x901a;&#x8fc7",{"_index":4113,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6587;&#x4ef6;&#x4e2d;&#x88ab;&#x591a;&#x6b21;&#x4f7f;&#x7528;&#xff0c;&#x90a3;&#x4e48;&#x6700;&#x597d;&#x662f;&#x901a;&#x8fc7;&#x5bfc;&#x5165;&#x8be5;&#x8def;&#x5f84;&#x6765;&#x7f29;&#x77ed;&#x4e66;&#x5199;&#x5f62;&#x5f0f;&#x3002;&#x8fd9;&#x4e48;&#x505a;&#x4f7f;&#x5f97;&#x6211;&#x4eec;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x65f6;&#x53ef;&#x4ee5;&#x7701;&#x7565;&#x5176;&#x5305;&#x540d;&#xff1a",{"_index":4174,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6587;&#x4ef6;&#x53ea;&#x6709;&#x5728;&#x5b83;&#x4eec;&#x88ab;&#x4fee;&#x6539;&#x6216;&#x8005;&#x51fa;&#x73b0;&#x4e00;&#x4e2a;&#x89e3;&#x6790;&#x9519;&#x8bef;&#x7684;&#x65f6;&#x5019;&#x624d;&#x4f1a;&#x518d;&#x6b21;&#x88ab;&#x89e3;&#x6790",{"_index":6096,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x6587;&#x4ef6;&#x7684;&#x5185;&#x5bb9;&#x3002",{"_index":6140,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{}}}],["x6587;&#x4ef6;&#x7684;&#x5b8c;&#x6574;&#x7684;&#x659c;&#x7ebf;&#x8def;&#x5f84;&#x3002;&#x5728;&#x6ca1;&#x6709;&#x8fd9;&#x4e2a;&#x6587;&#x4ef6;&#x7684;&#x65f6;&#x5019;&#x53ef;&#x4ee5;&#x4e3a",{"_index":6192,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x6587;&#x4ef6;&#x7684;&#x7edd;&#x5bf9;&#x6216;&#x76f8;&#x5bf9;&#x8def;&#x5f84;&#x3002;&#x5b83;&#x4e0d;&#x9075;&#x5b88;&#x4efb;&#x4f55;&#x7c7b;&#x8def;&#x5f84;&#x6216;&#x5e93;&#x3002",{"_index":5896,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x6587;&#x4ef6;&#x8868;&#x793a;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#xff0c;&#x5176;&#x4e2d;&#x53ef;&#x80fd;&#x5305;&#x542b;&#x591a;&#x4e2a;&#x7c7b;&#x578b;&#xff0c;&#x5176;&#x4e2d;&#x7684;&#x7c7b;&#x578b;&#x53ef;&#x80fd;&#x662f;&#x4fee;&#x9970;&#x4e3a",{"_index":4233,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x6587;&#x4ef6;&#xff0c;&#x4f7f;&#x7528",{"_index":1515,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{}}}],["x6587;&#x4ef6;&#xff0c;&#x5e76;&#x4f7f;&#x7528",{"_index":1187,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x6587;&#x6863;&#x4e2d;&#x67e5;&#x770b",{"_index":1482,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.远程处理.html#10-13-远程处理":{}}}],["x6587;&#x6863;&#x4e2d;&#x7684;&#x4e00;&#x4e9b;&#x5730;&#x65b9;&#x8fd8;&#x6709;&#x4e00;&#x4e9b;&#x82b1;&#x7d6e;&#x6846;&#x3002;&#x8fd9;&#x4e9b;&#x5305;&#x62ec;&#x975e;&#x6b63;&#x5f0f;&#x7684;&#x4fe1;&#x606f;&#xff0c;&#x5982;&#x4e3a;&#x4ec0;&#x4e48;&#x5728",{"_index":32,"title":{},"body":{"index.html#关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x6587;&#x6863;&#x4e86;&#x89e3;&#x8be6;&#x7ec6;&#x5185;&#x5bb9;&#x3002",{"_index":2472,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["x6587;&#x6863;&#x501f;&#x70b9;&#x5217;&#x8868;&#x5305;&#x542b;&#x51e0;&#x4e2a;&#x8282;&#x70b9",{"_index":5938,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x6587;&#x6863;&#x8be6;&#x7ec6;&#x4e86;&#x89e3;&#x5b83;&#x7684;&#x65b9;&#x6cd5;&#x3002",{"_index":2383,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{}}}],["x65b9;&#x5f0f;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#xff0c;&#x91cd;&#x8f7d;&#x4e4b;&#x540e;&#x7684;&#x65b9;&#x6cd5;&#x7684;&#x8c03;&#x7528;&#x88ab;&#x63d2;&#x5165;&#x5230;&#x9700;&#x8981;&#x7684;&#x5730;&#x65b9;&#x3002",{"_index":3313,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x65b9;&#x62ec;&#x53f7;&#xff0c;&#x540e;&#x8ddf;&#x7d22;&#x5f15;&#x8868;&#x8fbe;&#x5f0f",{"_index":5227,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["x65b9;&#x6cd5",{"_index":222,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["x65b9;&#x6cd5;&#x3002;&#x5ffd;&#x7565;&#x53d8;&#x5f02;&#x9519;&#x8bef;&#x975e;&#x5e38;&#x5bb9;&#x6613;&#x4ea7;&#x751f;&#x95ee;&#x9898;&#xff1a",{"_index":3805,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x65b9;&#x6cd5;&#x3002;&#x6ca1;&#x6709;&#x4e3a",{"_index":3820,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x65b9;&#x6cd5;&#x3002;&#x6ce8;&#x91ca;&#x884c;&#x8868;&#x660",{"_index":3439,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x65b9;&#x6cd5;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4f20;&#x9012;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x4f5c;&#x4e3a;&#x53c2;&#x6570;&#xff0c;&#x5982;&#x7b2c;9&#x884c;&#x5219;&#x4f1a;&#x5bfc;&#x81f4;&#x7ea6;&#x675f;&#x5931;&#x8d25;&#xff0c;&#x56e0;&#x4e3a;&#x5b57;&#x7b26;&#x4e32;&#x4e0d;&#x517c;&#x5bb9",{"_index":3611,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x65b9;&#x6cd5;&#x4e2d;&#x7684;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x88ab;&#x7f16;&#x8bd1;&#x4e3a;&#xff1a",{"_index":4348,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x65b9;&#x6cd5;&#x4e2d;&#x88ab;&#x8bbf;&#x95ee;&#xff0c;&#x56e0;&#x4e3a",{"_index":5328,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x65b9;&#x6cd5;&#x4e3a;&#x5143;&#x7d20;&#x6dfb;&#x52a0;&#x5c5e;&#x6027;&#x3002",{"_index":2366,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}}}],["x65b9;&#x6cd5;&#x5141;&#x8bb8;&#x8fd9;&#x6837;&#x4f7f;&#x7528;&#xff1a",{"_index":3359,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x65b9;&#x6cd5;&#x521b;&#x5efa;&#x3002",{"_index":2358,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{}}}],["x65b9;&#x6cd5;&#x53ef;&#x4ee5;&#x7528;&#x4e8e;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x81ea;&#x5b9a;&#x4e49;&#x51fd;&#x6570;&#x66ff;&#x6362;&#x5339;&#x914d;&#x7684;&#x5b50;&#x4e32;&#x3002;&#x8fd9;&#x4e2a;&#x51fd;&#x6570;&#x628a;&#x4e00;&#x4e2a;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x5bf9;&#x8c61;&#x4f5c;&#x4e3a;&#x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#xff0c;&#x6240;&#x4ee5;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x5b83;&#x5f97;&#x5230;&#x8fdb;&#x884c;&#x5339;&#x914d;&#x7684;&#x66f4;&#x591a;&#x4fe1;&#x606f;&#xff0c;&#x5e76;&#x8fdb;&#x884c;&#x6761;&#x4ef6;&#x66ff;&#x6362;&#x3002;&#x4f8b;&#x5982;&#xff1a",{"_index":1847,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["x65b9;&#x6cd5;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x505a;&#x8fd9;&#x4e9b;&#xff1a",{"_index":1795,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{}}}],["x65b9;&#x6cd5;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x83b7;&#x53d6;&#x5b57;&#x7b26;&#x4e32;&#x7684;&#x8868;&#x793a;&#x3002",{"_index":2483,"title":{},"body":{"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{}}}],["x65b9;&#x6cd5;&#x53ef;&#x4ee5;&#x8d8a;&#x8fc7",{"_index":5335,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x65b9;&#x6cd5;&#x53ef;&#x4ee5;&#x901a;&#x8fc7",{"_index":4734,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["x65b9;&#x6cd5;&#x5b9e;&#x4f8b;&#x5316",{"_index":3437,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x65b9;&#x6cd5;&#x5f97;&#x5230;&#x6b63;&#x786e;&#x7684;&#x8fd4;&#x56de;&#x503c;&#x3002;&#x5bf9;&#x4e8e;&#x5176;&#x5b83;&#x79cd;&#x7c7b;&#x7684;&#x5b8f;&#x6ca1;&#x6709;&#x5b57;&#x6bb5;&#x88ab;&#x6784;&#x5efa;&#x3002",{"_index":6306,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x65b9;&#x6cd5;&#x63a5;&#x53d7;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#xff0c;&#x5b83;&#x662f;&#x4e00;&#x4e2a",{"_index":3356,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x65b9;&#x6cd5;&#x63a5;&#x53d7;&#x4e24;&#x4e2a;&#x53c2;&#x6570;&#xff0c;&#x5b83;&#x662f;&#x4e00;&#x4e2a",{"_index":3357,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x65b9;&#x6cd5;&#x6709;&#x4e00;&#x4e2a;broken&#x5143;&#x6570;&#x636e;&#xff0c;&#x6ca1;&#x6709;&#x53c2;&#x6570;&#xff0c;&#x8fd8;&#x6709;&#x4e00;&#x4e2a",{"_index":5825,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x65b9;&#x6cd5;&#x6765",{"_index":2422,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x65b9;&#x6cd5;&#x6765;&#x5904;&#x7406;&#x591a;&#x4e2a;&#x503c;&#x3002",{"_index":2420,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x65b9;&#x6cd5;&#x68c0;&#x67e5;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x3002",{"_index":1520,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#不确保参数类型":{}}}],["x65b9;&#x6cd5;&#x6dfb;&#x52a0",{"_index":1557,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}}}],["x65b9;&#x6cd5;&#x6dfb;&#x52a0;&#x5b50;&#x5143;&#x7d20;&#x5230;&#x6839;&#x3002",{"_index":2364,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{}}}],["x65b9;&#x6cd5;&#x7528;&#x4e8e;&#x68c0;&#x67e5;&#x4e00;&#x4e2a",{"_index":3846,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x65b9;&#x6cd5;&#x88ab;&#x8c03;&#x7528;&#xff0c;&#x5e76;&#x4ee5;&#x8fd9;&#x4e2a;&#x5b57;&#x6bb5;&#x7684;&#x540d;&#x5b57;&#x4f5c;&#x4e3a;&#x53c2;&#x6570;&#xff1a",{"_index":3123,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x65b9;&#x6cd5;&#x8fc7;&#x7684;&#x5206;&#x7ec4;&#xff0c;x&#x662f;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x4f3c;&#x4e4e;&#x6a21;&#x5f0f;&#x5b9a;&#x4e49;&#x7684;&#x5206;&#x7ec4;&#x7684;&#x53f7;&#x7801;&#xff1a",{"_index":1786,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["x65b9;&#x6cd5;&#x8fd4;&#x56de",{"_index":6303,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x65b9;&#x6cd5;&#x901a;&#x8fc7",{"_index":4564,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x65b9;&#x6cd5;&#x901a;&#x8fc7;&#x5339;&#x914d;&#x5b83;&#xff0c;&#x8bc1;&#x660e;&#x4e86;&#x6211;&#x4eec;&#x751f;&#x6210;&#x7684;&#x679a;&#x4e3e;&#x7684;&#x7ed3;&#x6784;&#x3002;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x53d1;&#x73b0;&#xff0c;&#x751f;&#x6210;&#x7684;&#x7c7b;&#x578b;&#x8ddf;&#x4e0b;&#x9762;&#x8fd9;&#x4e2a;&#x662f;&#x7b49;&#x4ef7;&#x7684;&#xff1a",{"_index":6500,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["x65b9;&#x6cd5;&#xff08;&#x5c1d;&#x8bd5;&#xff09;&#x5f97;&#x5230;&#x5b83;&#x4eec;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":6353,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["x65b9;&#x6cd5;&#xff08;&#x7b2c;4.3&#x8282;&#xff09",{"_index":2785,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x65b9;&#x6cd5;&#xff08;&#x7b2c;4.3&#x8282;&#xff09;&#x6ca1;&#x6709;&#x8868;&#x8fbe;&#x5f0f;&#xff0c",{"_index":5399,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x65b9;&#x6cd5;&#xff0c;&#x540e;&#x8ddf;&#x6307;&#x5b9a;&#x7684;&#x53c2;&#x6570;&#x3002",{"_index":2155,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["x65b9;&#x6cd5;&#xff0c;&#x6ca1;&#x6709;&#x5176;&#x5b83;&#x4fee;&#x6539;&#x7684;&#x624b;&#x6bb5;&#xff0c;&#x8d4b;&#x503c;&#x5219;&#x53d8;&#x5f97;&#x5b89;&#x5168;&#xff0c;&#x56e0;&#x4e3a;&#x6ca1;&#x6709;&#x77db;&#x76fe;&#x7684;&#x7c7b;&#x578b;&#x88ab;&#x6dfb;&#x52a0;&#x5230;&#x5b83;&#x3002;&#x5728;haxe&#x4e2d;&#xff0c;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316;&#xff08;&#x7b2c;3.5.2&#x8282;&#xff09;&#x76f8;&#x5e94;&#x7684;&#x9650;&#x5236;&#x7c7b;&#x578b;&#x6765;&#x5b9e;&#x73b0;&#x8fd9;&#x4e2a;&#x3002",{"_index":3814,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x65b9;&#x6cd5;&#xff0c;&#x7136;&#x800c;&#x8fd9;&#x4e2a;&#x7a0b;&#x5e8f;&#x7f16;&#x8bd1;&#x5e76;&#x8f93;&#x51fa;&#x9884;&#x671f;&#x7684",{"_index":5478,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x65b9;&#x6cd5;&#xff0c;hax",{"_index":3850,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x65b9;&#x6cd5;&#xff1a",{"_index":4563,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x65e0;&#x53c2;&#x6570;&#x7684;&#x679a;&#x4e3e;&#x603b;&#x662f;&#x8868;&#x793a;&#x540c;&#x6837;&#x7684;&#x503c;&#xff0c;&#x6240;&#x4ee5",{"_index":2540,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x65e0;&#x6548;&#x7684;&#x6a21;&#x5f0f;&#x68c0;&#x67e5",{"_index":5717,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664",{"_index":750,"title":{},"body":{"8.编译器功能/8.编译器功能.html#8-编译器功能":{}}}],["x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664;&#x6216;&#x8005;dce&#x662f;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x5668;&#x529f;&#x80fd;&#xff0c;&#x5b83;&#x4ece;&#x8f93;&#x51fa;&#x4e2d;&#x5220;&#x9664;&#x672a;&#x4f7f;&#x7528;&#x7684;&#x4ee3;&#x7801;&#x3002;&#x5728;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#x4e4b;&#x540e;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x6267;&#x884c;dce&#x5165;&#x53e3;&#x70b9;&#xff08;&#x901a;&#x5e38;&#x662f;main&#x65b9;&#x6cd5;&#xff09;&#x5e76;&#x9012;&#x5f52;&#x7684;&#x786e;&#x5b9a;&#x54ea;&#x4e9b;&#x5b57;&#x6bb5;&#x548c;&#x7c7b;&#x578b;&#x88ab;&#x4f7f;&#x7528;&#x4e86;&#x3002;&#x4f7f;&#x7528;&#x7684;&#x5b57;&#x6bb5;&#x76f8;&#x5e94;&#x8fdb;&#x884c;&#x6807;&#x8bb0;&#xff0c;&#x672a;&#x6807;&#x8bb0;&#x7684;&#x5b57;&#x6bb5;&#x7136;&#x540e;&#x4ece;&#x5b83;&#x4eec;&#x7684;&#x7c7b;&#x4e2d;&#x79fb;&#x9664;&#x3002",{"_index":5853,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664;&#xff08;&#x7b2c;8.2&#x8282;&#xff09",{"_index":3143,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x65e0;&#x7b26;&#x53f7;&#x53f3;&#x4f4d;&#x79fb",{"_index":2538,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x65e2;&#x53ef;&#x4ee5;&#x5b9a;&#x4e49;&#x65b9;&#x6cd5;&#x4e5f;&#x53ef;&#x4ee5;&#x5b9a;&#x4e49;&#x53d8;&#x91cf;&#xff08;&#x65f6;&#x5c1a;&#xff0c;pi&#x662f;&#x58f0;&#x660e;&#x4e3a;&#x4e00;&#x4e2a;&#x53ea;&#x8bfb;&#x5c5e;&#x6027;&#xff08;&#x7b2c;4.2&#x8282;&#xff09;&#xff09;&#x3002;&#x4e00;&#x65e6;&#x8fd9;&#x4e2a;&#x4fe1;&#x606f;&#x5bf9;&#x4e8e;&#x7f16;&#x8bd1;&#x5668;&#x53ef;&#x7528;&#xff0c;&#x5b83;&#x542f;&#x7528;&#x76f8;&#x5e94;&#x7684;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#xff0c;&#x4e5f;&#x88ab;&#x79f0;&#x4e3a;&#x7c7b;&#x578b;&#xff1a",{"_index":5404,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x65e7;&#x7248;&#x7684;&#x6d4f;&#x89c8;&#x5668;&#xff08;&#x4f8b;&#x5982;ie7&#xff09;&#x53ef;&#x80fd;&#x6ca1;&#x6709;&#x539f;&#x751f;&#x7684",{"_index":1337,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["x65f6;&#x4e00;&#x4e2a;&#x5e38;&#x89c1;&#x7684;&#x9519;&#x8bef;&#xff1a",{"_index":2322,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x65f6;&#x4e0d;&#x4f1a;&#x5bf9;&#x6027;&#x80fd;&#x4ea7;&#x751f;&#x5f71;&#x54cd;&#x3002;&#x7136;&#x800c;&#xff0c;&#x5bf9;&#x4e8",{"_index":2933,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x65f6;&#x4e0d;&#x9700;&#x8981;&#x62c5;&#x5fc3;&#xff1b;&#x7136;&#x800c;&#xff0c;&#x9759;&#x6001;&#x76ee;&#x6807;&#x4e2d;&#x53ef;&#x80fd;&#x9700;&#x8981;&#x4e00;&#x4e9b;&#x601d;&#x8003;&#x3002;&#x9996;&#x5148;&#xff0c;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x88ab;&#x521d;&#x59cb;&#x5316;&#x4e3a;&#x5b83;&#x4eec;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#x3002",{"_index":2673,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x65f6;&#x53d8;&#x5f62;&#xff08;morph&#xff09;&#x4e3a;&#x53e6;&#x5916;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x6709;&#x5173;&#x8fd9;&#x4e00;&#x7c7b;&#x578b;&#x7684;&#x8fdb;&#x4e00;&#x6b65;&#x7ec6;&#x8282;&#x5c06;&#x5728",{"_index":3575,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["x65f6;&#x5df2;&#x7ecf;&#x770b;&#x8fc7;&#x4e00;&#x4e2a;&#x7b80;&#x8981;&#x7684;&#x4f8b;&#x5b50;&#x4e86;&#x3002;&#x901a;&#x5e38;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x5c1d;&#x8bd5;&#x628a;&#x7b2c;&#x4e00;&#x4e2a;&#x5b9e;&#x9645;&#x53c2;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x7edf;&#x4e00;&#x4e3a;&#x7b2c;&#x4e00;&#x4e2a;&#x5f62;&#x5f0f;&#x53c2;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x3001;&#x628a;&#x7b2c;&#x4e8c;&#x4e2a;&#x5b9e;&#x9645;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x7edf;&#x4e00;&#x4e3a;&#x7b2c;&#x4e8c;&#x4e2a;&#x5f62;&#x5f0f;&#x53c2;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x2026;&#x4ee5;&#x6b64;&#x7c7b;&#x63a8;&#x3002",{"_index":3959,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x65f6;&#xff0c;&#x5176;&#x7c7b;&#x578b;&#x5c06;&#x5728;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x8fc7;&#x7a0b;&#x4e2d;&#x4ea7;&#x751f;&#x7578;&#x53d8;&#xff08;mutate&#xff09",{"_index":3937,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x65f6;&#xff0c;hax",{"_index":2901,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x662f",{"_index":2622,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x662f;&#x4e00;&#x4e2a",{"_index":5559,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x662f;&#x4e00;&#x4e2a;&#x5141;&#x8bb8;&#x7684;&#x503c;&#x3002",{"_index":2695,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x662f;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x5f0f;&#x8bed;&#x8a00;&#x6982;&#x5ff5;&#xff0c;&#x5728;haxe&#x4e2d;&#x5b83;&#x5141;&#x8bb8;&#x4f60;&#x5e94;&#x7528;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x5230;&#x4e00;&#x4e2a;&#x5217;&#x8868;&#x6216;&#x8005;&#x8fed;&#x4ee3;&#xff08;&#x7b2c;6.7&#x8282;&#xff09;&#x3002;lambda",{"_index":2011,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{}}}],["x662f;&#x4e00;&#x4e2a;&#x53ef;&#x4ee5;&#x50cf;&#x51fd;&#x6570;&#x4e00;&#x6837;&#x8c03;&#x7528;&#x7684;&#x7f16;&#x8bd1;&#x65f6;&#x673a;&#x5236;&#xff0c;&#x5b83;&#x63a5;&#x53d7;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x6267;&#x884c;&#x53c2;&#x6570;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x5e76;&#x8f93;&#x51fa;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":4049,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x662f;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#xff0c;&#x90a3;&#x4e48;&#x5b83;&#x5fc5;&#x987b;&#x901a;&#x8fc7;&#x5982;&#x4e0b;&#x5f62;&#x5f0f;&#x8fdb;&#x884c;&#x58f0;&#x660e;&#xff1a",{"_index":3017,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x662f;&#x4e00;&#x4e2a;&#x5b58;&#x5728;&#x7684;&#x5b57;&#x6bb5",{"_index":3114,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x662f;&#x4e00;&#x4e2a;&#x5f3a;&#x5927;&#x7684;&#x5de5;&#x5177;&#xff0c;&#x4f46;&#x662f;&#x91cd;&#x8981;&#x7684;&#x662f;&#xff0c;&#x7406;&#x89e3;&#x5b83;&#x4e3a;&#x4ec0;&#x4e48;&#x4e5f;&#x53ef;&#x80fd;&#x5f15;&#x8d77;&#x95ee;&#x9898;&#x3002;&#x4e3e;&#x4e2a;&#x4f8b;&#x5b50;&#xff0c;&#x4e00;&#x4e9b;&#x51fd;&#x6570;&#x63a5;&#x53d7;&#x4e00;&#x4e2a",{"_index":2314,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x662f;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x3002;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#xff0c;&#x5b83;&#x88ab;&#x8f6c;&#x6362;&#x4e3a;&#x96c6;&#x4e2d;&#x7279;&#x5b9a;&#x7c7b;&#x578b;&#x4e4b;&#x4e00;&#xff0c;&#x53d6;&#x51b3;&#x4e8e;&#x952e;&#x7684;&#x7c7b;&#x578b;&#xff1a",{"_index":1722,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["x662f;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#x5916;&#x5e76;&#x4e0d;&#x77e5;&#x9053;&#x5176;&#x6570;&#x7ec4;&#x5143;&#x7d20;&#x7684;&#x5177;&#x4f53;&#x7c7b;&#x578b;&#x3002;&#x6b64;&#x65f6",{"_index":4066,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x662f;&#x4e00;&#x4e2a;&#x6807;&#x8bb0;&#xff0c;&#x4f5c;&#x7528;&#x662f;&#x542f;&#x7528;&#x4e0d;&#x533a;&#x5206;&#x5927;&#x5c0f;&#x5199;&#x7684;&#x5339;&#x914d;&#x3002",{"_index":1905,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x662f;&#x4e00;&#x4e2a;&#x70b9;&#x8def;&#x5f84;&#xff08;dot",{"_index":5319,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x662f;&#x4e00;&#x4e2a;&#x7279;&#x522b;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x7edf;&#x4e00;&#x6240;&#x6709;&#x7684;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x3002;&#x5b83;&#x88ab",{"_index":2834,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x662f;&#x4e00;&#x4e2a;&#x7279;&#x6b8a;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x5141;&#x8bb8;&#x4f7f;&#x7528;&#x548c;&#x4e0d;&#x4f7f;&#x7528;&#x4e00;&#x4e2a",{"_index":3062,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x662f;&#x4e00;&#x4e2a;&#x952e;&#x503c;&#x5bf9;&#x7ec4;&#x6210;&#x7684;&#x5bb9;&#x5668;&#x3002;&#x4e00;&#x4e2a",{"_index":1716,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["x662f;&#x4e00;&#x4e2a;i&#x989d",{"_index":5538,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["x662f;&#x4e0d;&#x88ab;&#x5141;&#x8bb8;&#x7684;&#xff08;cas",{"_index":5618,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["x662f;&#x4efb;&#x4f55;&#x6709;&#x6548;&#x7684;hax",{"_index":5683,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["x662f;&#x4efb;&#x4f55;&#x6709;&#x6548;&#x7684;haxe&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":6438,"title":{},"body":{"9.宏/9.3.具体化/9.3.具体化.html#9-3-具体化":{}}}],["x662f;&#x5141;&#x8bb8;&#x5728;child2&#x7c7b;&#x4e2d;&#x8bbf;&#x95ee;&#xff0c;&#x5373;&#x4f7f;child1&#x662f;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#xff0c;child1",{"_index":4640,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x662f;&#x521d;&#x59cb;&#x5316;&#x4e3a;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#xff0c;&#x4fdd;&#x5b58;&#x540c;&#x6837;&#x7684;&#x503c;&#xff0c;&#x4f46;&#x662f;&#x901a;&#x8fc7;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x7684;&#x63a8;&#x5bfc;&#x6837;&#x5f0f;&#xff0c;&#x4f7f;&#x7528;&#x4e86",{"_index":5702,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["x662f;&#x53ef;&#x4ee5;&#x88ab;&#x8ba4;&#x4e3a",{"_index":100,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x662f;&#x53ef;&#x7528;&#x7684;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":4303,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x662f;&#x5426;&#x4e00;&#x4e2a",{"_index":4926,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x662f;&#x5426;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5230",{"_index":3093,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x662f;&#x5426;&#x53ef;&#x4ee5;&#x88ab;&#x8d4b;&#x503c;&#x7ed9",{"_index":3934,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x662f;&#x5426;&#x7c7b;&#x4e3a",{"_index":6203,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x662f;&#x5426;&#x7c7b;&#x578b;&#x4e3a",{"_index":6198,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x662f;&#x5426;&#x7c7b;&#x5b9e;&#x9645;&#x4e0a;&#x662f;&#x4e00;&#x4e2a;&#x63a5;&#x53e3;&#xff08;&#x7b2c;2.3.3&#x8282;&#xff09;&#x3002",{"_index":6205,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x662f;&#x5982;&#x4f55;&#x5b9a;&#x4f4d;&#x7684;&#x3002",{"_index":4244,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x662f;&#x5b57;&#x9762;&#x7684;&#x3002;&#x5b83;&#x88ab;&#x901a;&#x8fc7",{"_index":1741,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["x662f;&#x5f3a;&#x5236;&#x6027;&#x7684;&#x3002;&#x8fd9;&#x4e0d;&#x50cf;&#x5176;&#x5b83;&#x4e00;&#x4e9b;&#x9762;&#x5411;&#x5bf9;&#x8c61;&#x8bed;&#x8a00;&#xff0c;&#x8fd9;&#x4e2a;&#x8c03;&#x7528;&#x53ef;&#x4ee5;&#x51fa;&#x73b0;&#x5728;&#x6784;&#x9020;&#x51fd;&#x6570;&#x4ee3;&#x7801;&#x4e2d;&#x7684;&#x4efb;&#x4f55;&#x5730;&#x65b9;&#xff0c;&#x800c;&#x4e0d;&#x662f;&#x5fc5;&#x987b;&#x4f5c;&#x4e3a;&#x7b2c;&#x4e00;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":2783,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x662f;&#x5f3a;&#x7c7b;&#x578b;&#xff0c;&#x4f46;&#x662f;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x53ef;&#x4ee5;&#x5728;&#x9700;&#x8981;&#x7684;&#x5730;&#x65b9;&#x88ab;&#x63a8;&#x7ffb;&#x3002;&#x5229;&#x7528;&#x7c7b;&#x578b;&#x4fe1;&#x606f;&#xff0c;hax",{"_index":1001,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x662f;&#x6240;&#x6709;&#x7c7b;&#x7684;&#x57fa;&#x7840;&#x7c7b;&#x578b;&#x3002;&#x7136;&#x800c;&#xff0c;&#x8fd9;&#x4e2a;&#x5173;&#x7cfb;&#x5e76;&#x4e0d;&#x4f1a;&#x53cd;&#x6620;&#x5728;&#x751f;&#x6210;&#x7684;&#x4ee3;&#x7801;&#x4e2d;&#x3002;&#x5f53;&#x4e00;&#x4e2a",{"_index":2810,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x662f;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x540d;&#x79f0;&#xff0c;&#x53ef;&#x4ee5;&#x662f;&#x4efb;&#x4f55;&#x7b26;&#x5408;&#x7c7b;&#x578b;&#x6807;&#x8bc6;&#x7b26;&#x89c4;&#x5219;&#x7684;&#x5b57;&#x7b26",{"_index":3527,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x662f;&#x6307",{"_index":2646,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x662f;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x7684;&#x540d;&#x79f0;&#xff0c;&#x53ef;&#x4ee5;&#x662f;&#x4efb;&#x4f55;&#x7b26;&#x5408;&#x7c7b;&#x578b;&#x6807;&#x8bc6;&#x7b26;&#x89c4;&#x5219;&#x7684;&#x5b57;&#x7b26",{"_index":2858,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x662f;&#x6ca1;&#x6709;&#x95ee;&#x9898;&#x7684;&#x3002;&#x56e0;&#x4e3a;&#x6570;&#x7ec4;&#x5177;&#x6709",{"_index":3609,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x662f;&#x7528;&#x4e8e;&#x540c;&#x6b65;&#x8fde;&#x63a5;&#xff0c;&#x8c03;&#x7528;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5;&#x65f6;&#x7ed3;&#x679c;&#x53ef;&#x4ee5;&#x76f4;&#x63a5;&#x83b7;&#x5f97;&#x3002",{"_index":1427,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接":{}}}],["x662f;&#x7b49;&#x540c;&#x4e8e",{"_index":5512,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["x662f;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x7279;&#x6b8a;&#x60c5;&#x51b5;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x5b9e;&#x9645;&#x4e0a;&#x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x5b83;&#x7528;&#x6765;&#x8868;&#x8fbe;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x7684;&#x7f3a;&#x5931;&#xff0c;&#x591a;&#x6570;&#x5e94;&#x7528;&#x4e8e;&#x51fd;&#x6570;&#x53c2;&#x6570;&#x548c;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x3002;&#x6211;&#x4eec;&#x5728;&#x5f00;&#x59cb;&#x7684",{"_index":2597,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x662f;&#x7c7b;&#x7684;&#x540d;&#x79f0;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x4efb;&#x4f55;&#x7b26;&#x5408;&#x7c7b;&#x578b;&#x6807;&#x8bc6;&#x7b26;&#x89c4;&#x5219;&#x7684;&#x5b57;&#x7b26",{"_index":2798,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x662f;&#x7ed1;&#x5b9a;&#x5230",{"_index":5571,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x662f;&#x7ed9;&#x4e00;&#x4e2a;&#x590d;&#x6742;&#x7c7b;&#x578b;&#x4e00;&#x4e2a;&#x540d;&#x5b57;&#xff08;&#x6216;&#x522b;&#x540d;&#xff09;&#x7684;&#x673a;&#x5236;&#x3002;&#x9664;&#x6b64;&#x4e4b;&#x5916;&#xff0c;&#x5f53;&#x6211;&#x4eec;&#x4f7f;&#x7528;&#x5e26",{"_index":130,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x662f;&#x88ab;&#x521d;&#x59cb;&#x5316;&#x4e3a;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#xff0c;&#x4fdd;&#x5b58;&#x4ece;0&#x5230;9&#x7684;&#x6570;&#x503c;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x751f;&#x6210;&#x7684;&#x4ee3;&#x7801;&#xff0c;&#x6dfb;&#x52a0;&#x6bcf;&#x6b21;&#x5faa;&#x73af;&#x8fed;&#x4ee3;&#x7684;&#x503c;&#x5230;&#x6570;&#x7ec4;&#x4e2d;&#xff0c;&#x6240;&#x4ee5;&#x8ddf;&#x4e0b;&#x9762;&#x7684;&#x4ee3;&#x7801;&#x662f;&#x7b49;&#x4ef7;&#x7684;&#xff1a",{"_index":5701,"title":{},"body":{"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{}}}],["x662f;&#x8c03;&#x7528;&#x7236;&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff0c;&#x672c;&#x4f8b;&#x4e2d;&#x5373",{"_index":2781,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x662f;&#x8f6c;&#x6362;&#x5230",{"_index":5480,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x662f;/&#x542b;&#x6709",{"_index":3859,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x662f;array&#x6216;&#x8005",{"_index":5231,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["x662f;haxe&#x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x679a;&#x4e3e;&#xff0c;&#x5982;&#x4e0b;&#x5f62;&#x5f0f;&#x5b9a;&#x4e49;&#xff1a",{"_index":1762,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{}}}],["x662f;haxe.macro.expr&#x6a21;&#x5757;&#x4e2d;&#x4e00;&#x4e2a",{"_index":4181,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x662f;true&#xff0c;false&#xff0c;this&#xff0c;super&#x6216;&#x8005;null&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5339;&#x914d;&#x7684",{"_index":4289,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x663e;&#x5f0f;&#x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664;&#xff08;&#x7b2c;8.2&#x8282;&#xff09;&#x65e5;&#x5fd7",{"_index":960,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x663e;&#x5f0f;&#x7684;&#x58f0;&#x660e;&#x4e3a",{"_index":3178,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b",{"_index":4014,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x58f0;&#x660e;&#x5728",{"_index":95,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x663e;&#x7136;&#xff0c;&#x4e00;&#x4e2a",{"_index":3800,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x663e;&#x7136;&#xff0c;&#x5b57;&#x6bb5;mid&#x88ab;&#x751f;&#x6210;&#x7684;&#x51fd;&#x6570;&#x4f53;(s1",{"_index":4699,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x663e;&#x7136;&#xff0c;int&#x5e76;&#x6ca1;&#x6709;&#x539f;&#x751f;&#x63d0;&#x4f9b;&#x4e00;&#x4e2a",{"_index":5477,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x66b4;&#x9732;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7684;&#x64cd;&#x4f5c",{"_index":3325,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x66f4;&#x52a0;&#x667a;&#x80fd;&#xff0c;&#x968f;&#x540e;&#x5728;2006&#x5e74;5&#x6708;&#x53d1;&#x5e03;&#x4e86",{"_index":1143,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x66f4;&#x52a0;&#x805a;&#x7126;&#x4e8e;&#x7a33;&#x5b9a;&#x6027;&#x7684;&#x63d0;&#x5347;&#xff0c;&#x5b83;&#x7684;&#x51e0;&#x4e2a;&#x5c0f;&#x7248;&#x672c;&#x91cc;&#x7684",{"_index":1151,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x66f4;&#x591a;&#x5173;&#x4e8e;&#x6a21;&#x5f0f;&#x5339;&#x914d;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x8bed;&#x6cd5;&#x7ec6;&#x8282;&#xff0c;&#x5728;&#x6a21;&#x5f0f;&#x5339;&#x914d;&#xff08;&#x7b2c;6.4&#x8282;&#xff09;&#x4e2d;&#x8be6;&#x8ff0;&#x3002",{"_index":4956,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x66ff;&#x4ee3",{"_index":4214,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6700;&#x4e0a;&#x9762;&#x7684;&#x5339;&#x914d;&#x4e86;&#x8f93;&#x5165;&#x7684;&#x503c;&#x7684;&#x6a21;&#x5f0f;&#xff0c;&#x5b83;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x5c06;&#x88ab;&#x6267;&#x884c",{"_index":5510,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["x6700;&#x5e95;&#x90e8;&#x7684;&#x5bfc;&#x5165;&#x6307;&#x4ee4;&#x5177;&#x6709;&#x6700;&#x9ad8;&#x7684;&#x4f18;&#x5148;&#x7ea7;&#xff08;&#x8be6;&#x89c1",{"_index":4185,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6709;&#x4e00;&#x4e2a",{"_index":5819,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x6709;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x5217;&#x8868;&#xff08;&#x8fd9;&#x91cc;&#x4e3a",{"_index":4567,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x6709;&#x4e00;&#x4e2a;&#x53ef;&#x4ee5;&#x88ab;&#x4ece;&#x4efb;&#x4f55;&#x5730;&#x65b9;&#x8bfb;&#x53d6;&#xff0c;&#x4f46;&#x662f;&#x53ea;&#x80fd;&#x88ab;&#x4ece;&#x5b9a;&#x4e49;&#x7c7b;&#x5199;&#x5165;&#x7684;&#x5b57;&#x6bb5",{"_index":4511,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x6709;&#x4e00;&#x4e2a;&#x540d;&#x5b57;&#xff08;&#x8fd9;&#x91cc;&#x662f;main&#xff09",{"_index":4566,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x6709;&#x4e00;&#x4e2a;&#x540d;&#x79f0;&#xff08;member&#xff09",{"_index":4366,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["x6709;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5",{"_index":5751,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["x6709;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#xff08;string&#xff09",{"_index":4367,"title":{},"body":{"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{}}}],["x6709;&#x4e00;&#x4e2a;&#x8c03;&#x7528;&#x4e00;&#x4e2a;getter&#x65b9;&#x6cd5;&#x83b7;&#x5f97;&#x8bfb;&#x6743;&#x9650;&#x7684;&#x5b57;&#x6bb5",{"_index":4512,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x6709;&#x4e00;&#x4e2a;&#x8c03;&#x7528;&#x4e00;&#x4e2a;setter&#x65b9;&#x6cd5;&#x83b7;&#x5f97;&#x5199;&#x5165;&#x6743;&#x9650;&#x7684;&#x5b57;&#x6bb5",{"_index":4513,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x6709;&#x4e00;&#x4e2a;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#xff08;&#x8fd9;&#x91cc;&#x662f",{"_index":4569,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x6709;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x7684;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#xff0c;&#x4f46;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x5b9e;&#x9645;&#x4e0a;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":3135,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x6709;&#x4e00;&#x4e2a;&#x989d;&#x5916;&#x7684;&#x8bb0;&#x6cd5;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x4e8e;&#x6269;&#x5c55;&#xff0c;&#x901a;&#x8fc7;&#x4ee5",{"_index":2980,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x6709;&#x4e00;&#x4e2a;sett",{"_index":4423,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x6709;&#x4e00;&#x4e9b;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x7279;&#x5b9a;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x7528;&#x4e8e;&#x4e0d;&#x540c;&#x7684;&#x76ee;&#x7684;&#xff0c;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x8bbe;&#x7f6e;&#x4e00;&#x4e2a;&#x8fde;&#x63a5;&#xff1a",{"_index":1430,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x6709;&#x4e09;&#x79cd;&#x7c7b;&#x5b57;&#x6bb5;&#xff1a",{"_index":217,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{}}}],["x6709;&#x4e24;&#x4e2a;&#x53c2;&#x6570;&#xff0c;&#x4f46;&#x662f;&#x7b2c;&#x4e00;&#x4e2a;&#x88ab;&#x663e;&#x5f0f;&#x8d4b;&#x4e88;&#x7c7b;&#x578b;&#xff0c;f&#xff0c;&#x4e3a;string&#x7c7b;&#x578b;&#x3002;&#x7b2c;&#x4e8c;&#x4e2a;&#x53c2;&#x6570",{"_index":4584,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x6709;&#x4e24;&#x4e2a;&#x53ef;&#x9009;&#x53c2;&#x6570;&#xff1a;int",{"_index":3025,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x6709;&#x4e24;&#x79cd;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x65b9;&#x6cd5;&#xff1a",{"_index":3355,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x6709;&#x6548",{"_index":2839,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x6709;&#x6548;&#x7684;&#xff0c;present",{"_index":3113,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x6709;&#x6548;&#xff0c;&#x5206;&#x914d;&#x7684;&#x503c;&#x662f;&#x4e00;&#x4e2a",{"_index":3115,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x6709;&#x8d44;&#x683c;&#x4f5c;&#x4e3a;&#x8fed;&#x4ee3;&#x5668;&#xff1a;&#x5b83;&#x5b9a;&#x4e49;&#x4e86;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5",{"_index":5746,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["x6709;&#x9650;&#x7684;&#x6d6e;&#x70b9;&#x6570",{"_index":2224,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x670d;&#x52a1;&#x5668;&#xff0c;&#x6307;&#x5411;client&#x4e2d;&#x7684;url&#x5230",{"_index":1466,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["x672c;&#x4f8b;&#x4e2d;&#x7684;&#x7c7b;&#x578b",{"_index":5745,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["x672c;&#x5730;&#x914d;&#x7f6e;&#xff1a",{"_index":6274,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x672c;&#x6587;&#x6863;&#x5927;&#x90e8;&#x5206;&#x5185;&#x5bb9;&#x662f;&#x7531",{"_index":1059,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["x672c;&#x6587;&#x6863;&#x5e76;&#x975e;&#x521d;&#x5b66;&#x8005;&#x6559;&#x7a0b;&#xff0c;&#x5e76;&#x4e0d;&#x4f1a;&#x6559;&#x4f60;&#x5982;&#x4f55;&#x7f16;&#x7a0b;&#x3002;&#x5c3d;&#x7ba1;&#x5982;&#x6b64;&#xff0c;&#x6bcf;&#x4e00;&#x4e3b;&#x9898;&#x90fd;&#x88ab;&#x7c97;&#x7cd9;&#x5730;&#x8bbe;&#x8ba1;&#x4e3a;&#x987a;&#x5e8f;&#x9605;&#x8bfb;&#xff0c;&#x5176;&#x4e2d;&#x4f1a;&#x7a7f;&#x63d2;&#x4e00;&#x4e9b;&#x5982",{"_index":17,"title":{},"body":{"index.html#关于本文档":{}}}],["x672c;&#x6587;&#x6863;&#x7531",{"_index":11,"title":{},"body":{"index.html#关于本文档":{}}}],["x672c;&#x6587;&#x6863;&#x7ffb;&#x8bd1;&#x81ea",{"_index":1071,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x672c;&#x7ae0;&#x5185;&#x5bb9;&#xff1a",{"_index":47,"title":{},"body":{"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{},"10.标准库/10.标准库.html#10-标准库":{},"8.编译器功能/8.编译器功能.html#8-编译器功能":{}}}],["x672c;&#x8282;&#x5185;&#x5bb9;&#xff1a",{"_index":1750,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{},"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html#4-4-访问修饰符":{},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{},"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{}}}],["x672c;&#x8eab;&#x3002",{"_index":6517,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x672c;&#x8eab;&#x662f;&#x88ab;&#x8fd4;&#x56de;&#xff1a;cas",{"_index":5574,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x6761;&#x4ef6",{"_index":2130,"title":{"10.标准库/10.6.模板/10.6.模板.html#条件":{}},"body":{}}],["x6761;&#x4ef6;&#x7f16;&#x8bd1",{"_index":527,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x6761;&#x4ef6;&#x7f16;&#x8bd1;&#x5141;&#x8bb8;&#x6839;&#x636e;&#x7f16;&#x8bd1;&#x53c2;&#x6570;&#x7f16;&#x8bd1;&#x7279;&#x5b9a;&#x7684;&#x4ee3;&#x7801;&#x3002;&#x8fd9;&#x6709;&#x52a9;&#x4e8e;&#x62bd;&#x8c61;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7279;&#x5b9a;&#x7684;&#x5dee;&#x5f02;&#xff0c;&#x4f46;&#x662f;&#x4e5f;&#x53ef;&#x4ee5;&#x7528;&#x4e8e;&#x5176;&#x4ed6;&#x7684;&#x76ee;&#x7684;&#xff0c;&#x5982;&#x66f4;&#x8be6;&#x7ec6;&#x7684;&#x8c03;&#x8bd5;&#x3002",{"_index":529,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x6761;&#x4ef6;&#x8868;&#x8fbe;&#x5f0f;&#x5fc5;&#x987b;&#x4e3a",{"_index":4893,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["x6761;&#x4ef6;&#x8868;&#x8fbe;&#x5f0f;&#x5fc5;&#x987b;&#x4e3a;bool&#x7c7b;&#x578b;&#x3002",{"_index":4905,"title":{},"body":{"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x6761;&#x4ef6;&#x8868;&#x8fbe;&#x5f0f;&#x7531;&#x5173;&#x952e;&#x5b57",{"_index":4917,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x6765;&#x4f7f;&#x670d;&#x52a1;&#x6253;&#x5370;&#x65e5;&#x5fd7;&#x3002;&#x8fd9;&#x91cc;&#x662f;&#x4e00;&#x4e2a;&#x4f8b;&#x5b50;&#xff1a",{"_index":6084,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x6765;&#x4f7f;&#x7528",{"_index":2925,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x6765;&#x542f;&#x7528;cors&#xff08;cross",{"_index":1507,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["x6765;&#x58f0;&#x660e;&#xff1a",{"_index":3024,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x6765;&#x5904;&#x7406;&#x5b83;&#x3002;&#x7136;&#x800c;&#xff0c;&#x63a8;&#x65ad;&#x7684;&#x7c7b;&#x578b;&#x53ef;&#x80fd;&#x548c",{"_index":2847,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x6765;&#x6355;&#x83b7;&#x503c;&#xff0c;&#x8fd9;&#x66f4;&#x8fdb;&#x4e00;&#x6b65;&#x7684;&#x5339;&#x914d;&#xff1a",{"_index":5569,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x6765;&#x6539;&#x8fdb;&#x6027;&#x80fd;&#x3002;haxe&#x7f16;&#x8bd1;&#x5668;&#x5c31;&#x53ef;&#x4ee5;&#x5bf9;&#x6574;&#x6570;&#x8fd0;&#x7b97;&#x8fdb;&#x884c;&#x4f18;&#x5316;&#x3002;&#x4e00;&#x4e2a;&#x4f8b;&#x5b50;&#xff1a",{"_index":1926,"title":{},"body":{"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{}}}],["x6765;&#x663e;&#x793a",{"_index":2172,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["x6765;&#x68c0;&#x7d22;&#x5185;&#x5bb9;&#x3002",{"_index":2169,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["x6765;&#x6dfb;&#x52a0;&#x4e00;&#x4e2a;i&#x989d;&#x65b0;&#x7684;&#x7c7b;&#x578b;&#x5230;&#x8c03;&#x7528;&#x4e0a;&#x4e0b;&#x6587;&#xff08;&#x4e0d;&#x662f;&#x5b8f;&#x4e0a;&#x4e0b;&#x6587;&#x672c;&#x8eab;&#xff09;&#x3002",{"_index":6433,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["x6765;&#x7a81;&#x51fa;&#x4e00;&#x4e2a;&#x91cd;&#x8981;&#x7684;&#x4e0d;&#x540c;&#xff1a;&#x5728;&#x7f16;&#x8bd1;&#x5668;&#x65f6;&#x7c7b;&#x578b;&#x88ab;&#x8ba4;&#x4e3a;&#x662f",{"_index":4472,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["x6765;&#x8054;&#x5408;&#x7ed3;&#x6784;&#x548c;&#x679a;&#x4e3e;&#x5339;&#x914d;&#x3002",{"_index":5589,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["x6765;&#x83b7;&#x5f97;&#x5b9a;&#x4e49;&#x7684;&#x7f16;&#x8bd1;&#x5668;&#x5143;&#x6570;&#x636e;&#x7684;&#x5217;&#x8868;&#x3002",{"_index":6741,"title":{},"body":{"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["x6765;&#x89e3;&#x6790",{"_index":1306,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["x6765;&#x8be6;&#x7ec6;&#x4e86;&#x89e3;&#x5411;&#x91cf;&#x65b9;&#x6cd5;&#x3002",{"_index":1645,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}}}],["x6765;&#x8bf4;&#xff0c;&#x5fc5;&#x987b;&#x6267;&#x884c;&#x4e00;&#x4e2a;&#x52a8;&#x6001;&#x7684;&#x67e5;&#x627e;&#xff0c;&#x8fd9;&#x901a;&#x5e38;&#x4f1a;&#x6162;&#x4e8e;&#x5bf9;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x7684;&#x8bbf;&#x95ee;&#x3002",{"_index":2935,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x6765;&#x8c03;&#x7528;&#x3002;&#x8f93;&#x51fa;&#x770b;&#x8d77;&#x6765;&#x662f;&#x8fd9;&#x6837;&#xff1a",{"_index":5954,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["x6765;&#x8c03;&#x7528;&#x3002;&#x8f93;&#x51fa;&#x770b;&#x8d77;&#x6765;&#x7c7b;&#x4f3c;&#x4e8e;&#x8fd9;&#x4e2a;&#xff08;&#x4e3a;&#x7b80;&#x4fbf;&#x548c;&#x63d0;&#x9ad8;&#x683c;&#x5f0f;&#x7684;&#x53ef;&#x8bfb;&#x6027;&#xff0c;&#x6211;&#x4eec;&#x7701;&#x7565;&#x4e86;&#x4e00;&#x4e9b;&#x5b57;&#x6bb5;&#xff09;&#xff1a",{"_index":5933,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x6765;&#x8c03;&#x7528;&#x5b83",{"_index":4817,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x6765;&#x8c03;&#x7528;&#x5b8c;&#x6210;&#x3002;&#x8f93;&#x51fa;&#x662f;&#x8fd9;&#x6837;&#x7684;&#xff1a",{"_index":6010,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["x6765;&#x8c03;&#x7528;&#x5b8c;&#x6210;&#x3002;&#x8f93;&#x51fa;&#x770b;&#x8d77;&#x6765;&#x7c7b;&#x4f3c;&#x4e8e;&#x8fd9;&#x6837;&#xff08;&#x4e3a;&#x4e86;&#x7b80;&#x6d01;&#x7701;&#x7565;&#x4e86;&#x4e00;&#x4e9b;&#x8bb0;&#x5f55;&#xff09;&#xff1a",{"_index":6043,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["x6765;&#x8fdb;&#x884c;&#x663e;&#x5f0f;&#x7684;&#x58f0;&#x660e;&#x3002;&#x5982;&#x679c;&#x8fd9;&#x6837;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x88ab;&#x63d0;&#x4f9b;&#xff0c",{"_index":3063,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x6765;&#x91cd;&#x7528;&#x4e00;&#x4e2a;&#x5339;&#x914d;&#x7684;&#x7ec4;&#xff1a",{"_index":1810,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{}}}],["x6784;&#x5efa;&#x5b8f",{"_index":777,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x6784;&#x5efa;&#x5b8f;&#x6709;&#x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x7c7b;&#x578b;&#xff08;&#x5982;&#x679c;&#x4e0d;&#x5b8c;&#x5168;&#x7684;&#xff09;&#xff0c;&#x4f46;&#x662f;&#x6ca1;&#x6709;&#x5c40;&#x90e8;&#x65b9;&#x6cd5;&#xff0c;&#x6240;&#x4ee5",{"_index":6307,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x6784;&#x5efa;&#x5b8f;&#xff08;&#x7b2c;9.5&#x8282;&#xff09",{"_index":3448,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x6784;&#x5efa;&#x679a;&#x4e3e;&#x7c7b;&#x4f3c;&#x4e8e;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x6620;&#x5c04;&#x6784;&#x5efa;&#x7c7b;&#xff1a",{"_index":6490,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["x6784;&#x5efa;&#x987a;&#x5e8f",{"_index":6650,"title":{},"body":{"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{}}}],["x6784;&#x9020;&#x51fd;&#x6570",{"_index":3532,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x6784;&#x9020;&#x51fd;&#x6570;&#x548c;&#x53c2;&#x6570;&#x6765;&#x521d;&#x59cb;&#x5316;&#x3002",{"_index":2830,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x6784;&#x9020;&#x51fd;&#x6570;&#x5b57;&#x6bb5;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x5fc5;&#x987b;&#x53ea;&#x5305;&#x542b;&#x7ed9;&#x5b83;&#x7684;&#x5b57;&#x6bb5;&#x7684;&#x8d4b;&#x503c;&#x3002",{"_index":5366,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["x6784;&#x9020;&#x51fd;&#x6570;&#x7684;&#x53c2;&#x6570;&#x5217;&#x8868;&#xff0c;&#x5982;&#x679c;&#x6ca1;&#x6709;&#x53ef;&#x7528;&#x53c2;&#x6570;&#x5219;&#x4e3a;null&#x3002",{"_index":6238,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x6784;&#x9020;&#x51fd;&#x6570;&#x7684;&#x540d;&#x79f0;&#x3002",{"_index":6237,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x6784;&#x9020;&#x51fd;&#x6570;&#x7684;&#x6587;&#x6863;&#x3002;&#x8fd9;&#x4e2a;&#x563b;&#x563b;&#x53ea;&#x6709;&#x5982;&#x679c;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#xff08;&#x7b2c;6.1&#x8282;&#xff09",{"_index":6239,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x6784;&#x9020;&#x51fd;&#x6570;&#x88ab;&#x6ce8;&#x89e3;&#x7684;&#x5143;&#x6570;&#x636e;&#x3002",{"_index":6242,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x6784;&#x9020;&#x51fd;&#x6570;&#x8c03;&#x7528;&#x7684;&#x7ed3;&#x679c;&#x5fc5;&#x987b;&#x76f4;&#x63a5;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x53d8;&#x91cf",{"_index":5365,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["x6784;&#x9020;&#x51fd;&#x6570;&#xff08;&#x7b2c;2.4.1&#x8282;&#xff09",{"_index":2876,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x679a;&#x4e3",{"_index":2706,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x679a;&#x4e3e;&#x4f7f;&#x7528",{"_index":2460,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x679a;&#x4e3e;&#x5339;&#x914d",{"_index":5709,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x679a;&#x4e3e;&#x53ef;&#x4ee5;&#x4ee5;&#x4e00;&#x4e2a;&#x81ea;&#x7136;&#x7684;&#x65b9;&#x5f0f;&#x901a;&#x8fc7;&#x5b83;&#x4eec;&#x7684;&#x6784;&#x9020;&#x5668;&#x8fdb;&#x884c;&#x5339;&#x914d;&#xff1a",{"_index":5533,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["x679a;&#x4e3e;&#x5b9e;&#x4f8b",{"_index":2275,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#xff08;&#x7b2c;2.4&#x8282",{"_index":2707,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#xff1a;hax",{"_index":104,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x679a;&#x4e3e;&#x5b9e;&#x4f8b;(&#x901a;&#x8fc7;&#x7d22;&#x5f15",{"_index":2283,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x679a;&#x4e3e;&#x662f;&#x5426;&#x4e3a;&#x5916;&#x90e8;&#x7684;&#xff08;&#x7b2c;6.2&#x8282;&#xff09;&#x3002",{"_index":6212,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":5814,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#x4fe1;&#x606f;&#xff1a",{"_index":6236,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#x5728;&#x53cd;&#x5e8f;&#x5217;&#x5316;&#x4e4b;&#x524d;&#x88ab;&#x63d2;&#x5165;&#x5230;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#xff0c;&#x5c06;&#x4f1a;&#x6253;&#x65ad;&#x3002;&#x8fd9;&#x4e2a;&#x884c;&#x4e3a;&#x9ed8;&#x8ba4;&#x662f;&#x7981;&#x6b62;&#x7684;&#x3002",{"_index":2446,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{}}}],["x679a;&#x4e3e;&#x6784;&#x9020;&#x5668;&#x7684;&#x53c2;&#x6570;&#x503c;&#x5230;&#x4e00;&#x4e2a;&#x53d8;&#x91cf",{"_index":5651,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x679a;&#x4e3e;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x5217;&#x8868;&#x3002",{"_index":6213,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x679a;&#x4e3e;&#x7684;&#x76f8;&#x7b49;&#x6027",{"_index":2539,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x679a;&#x4e3e;&#x7c7b;&#x578b;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x503c",{"_index":105,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x679a;&#x4e3e;&#x7c7b;&#x578b;&#x4fe1;&#x606f;&#xff1a",{"_index":6211,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x67d0;&#x4e9b;&#x4f18;&#x5316;&#xff0c;&#x7279;&#x522b;&#x662f;&#x7f16;&#x8bd1;&#x4e3a;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x65f6;&#xff0c;&#x5c06;&#x4e0d;&#x80fd;&#x518d;&#x88ab;&#x4f7f;&#x7528;&#x3002",{"_index":3139,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x67e5;&#x770b",{"_index":1272,"title":{},"body":{"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["x67e5;&#x770b;&#x4e00;&#x4e2a;&#x4f8b;&#x5b50;&#x3002;exist",{"_index":2021,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x67e5;&#x770b;&#x6570;&#x7ec4;api&#x4e86;&#x89e3;&#x5b83;&#x7684;&#x65b9;&#x6cd5;&#x7684;&#x8be6;&#x7ec6;&#x5185;&#x5bb9;&#x3002",{"_index":1629,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x67e5;&#x770b;api&#x6587;&#x6863;&#x4e2d;&#x7684",{"_index":1476,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化":{}}}],["x67e5;&#x770b;ereg",{"_index":1918,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x67e5;&#x770b;genericstack",{"_index":1744,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{}}}],["x67e5;&#x770b;list",{"_index":1658,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["x67e5;&#x770b;map",{"_index":1724,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{}}}],["x67e5;&#x770b;vector",{"_index":1644,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}}}],["x6807;&#x51c6;&#x5e93;&#x4e2d",{"_index":3844,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684",{"_index":3629,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684;&#x8bb8;&#x591a;&#x7c7b;&#x578b;&#x90fd;&#x6ee1;&#x8db3;&#x8fd9;&#x4e00;&#x8981;&#x6c42;&#x3002",{"_index":3851,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x6807;&#x51c6;&#x5e93;&#x4e2d;&#x91cd;&#x8981;&#x7684;&#x7c7b;&#x578b;&#x548c;&#x6982;&#x5ff5;&#x3002;&#x7136;&#x540e;&#x5b66;&#x4e60",{"_index":1039,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x6807;&#x51c6;&#x5e93;&#x4f7f;&#x7528;&#xff0c;&#x6765;&#x63d0;&#x4f9b;&#x5bf9;&#x6240;&#x6709;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x7684;&#x67d0;&#x4e9b;&#x64cd;&#x4f5c;&#xff0c;&#x53ef;&#x4ee5;&#x7528;&#x5728;&#x7528;&#x6237;&#x4ee3;&#x7801;&#x4e2d;&#x4e00;&#x4e2a",{"_index":2835,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x6807;&#x51c6;&#x5e93;&#x5b9a;&#x4e49;&#x4e86;&#x4e00;&#x7ec4;&#x57fa;&#x7840;&#x7c7b;&#x578b;&#x4f5c;&#x4e3a;&#x6838;&#x5fc3;&#x7c7b;&#x578b;&#x62bd;&#x8c61;&#x3002;&#x5b83;&#x4eec;&#x901a;&#x8fc7",{"_index":3454,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x6807;&#x51c6;&#x5e93;&#xff08;&#x7b2c;10&#x7ae0;&#xff09",{"_index":1037,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x6807;&#x51c6;&#x9519;&#x8bef;&#x8f93;&#x51fa;&#xff1a",{"_index":5929,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["x6807;&#x8bb0",{"_index":944,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x6807;&#x8bb0;&#x3002",{"_index":5287,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x6807;&#x8bb0;&#x4e00;&#x4e2a;&#x7ed3;&#x6784;&#x7c7b;&#x578b;&#x4e2d;&#x7684;&#x5b57;&#x6bb5;&#x4e3a;&#x53ef;&#x9009;&#xff0c;&#x4f7f;&#x7528",{"_index":3632,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x6807;&#x8bc6;&#x7b26;&#xff08;&#x7b2c;5&#x7ae0;&#xff09",{"_index":2922,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x6807;&#x8bc6;&#x7b26;&#xff0c;&#x53ef;&#x4ee5;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x8f93;&#x51fa;&#x5b83;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x6765;&#x4f7f;&#x5b83;&#x4eec;&#x8868;&#x73b0;&#x51fa;&#x6765;&#xff1a",{"_index":3078,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x6839;&#x636e",{"_index":2882,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x6839;&#x636e;&#x5b83;&#x7684;&#x53c2;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x751f;&#x6210;&#x4e00;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x3002;&#x8fd9;&#x4ec5;&#x4ec5;&#x4fdd;&#x8bc1;&#x4f7f;&#x7528;&#x5728;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x548c;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x3002",{"_index":6384,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x68c0;&#x67e5;xml&#x4ee3;&#x7406;&#x7528;&#x5230;&#x7684;&#x5b57;&#x6bb5",{"_index":951,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x6982;&#x8ff0",{"_index":6122,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["x6982;&#x8ff0;&#xff08;&#x7b2c;8.3.1&#x8282;&#xff09;&#xff09;&#x5f00;&#x542f;&#x3002;&#x6211;&#x4eec;&#x5728;&#x8fd9;&#x91cc;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x6f14;&#x793a;&#x5b83;&#x3002;&#x6ce8;&#x610f;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x4ee5;&#x540c;&#x6837;&#x7684;&#x65b9;&#x5f0f;&#x7528;&#x4e8e;&#x5b57;&#x6bb5;&#x548c;&#x7c7b;&#x578b;&#x4e0a;&#xff1a",{"_index":6008,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["x6a21;&#x5757;&#x4e2d;&#x7684;&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b",{"_index":4117,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6a21;&#x5757;&#x53ef;&#x4ee5;&#x88ab;&#x8bbf;&#x95ee;&#xff0c;&#x4f46;&#x662f;&#x5b83",{"_index":4201,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6a21;&#x5757;&#x540d",{"_index":4239,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x6a21;&#x5757;&#x548c;&#x5b83;&#x6240;&#x5305;&#x542b;&#x7684;&#x540c;&#x540d;&#x7c7b;&#x578b;&#x4e4b;&#x95f4;&#x7684;&#x533a;&#x522b;&#x5728;&#x8bbe;&#x8ba1;&#x4e0a;&#x662f;&#x6a21;&#x7cca;&#x7684;&#x3002;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;&#x5b9a;&#x4f4d",{"_index":4235,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x6a21;&#x5757;&#x548c;&#x8def;&#x5f84;&#xff08;&#x7b2c;3.7&#x8282;&#xff09",{"_index":136,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x58f0;&#x660e;&#x4e3a;&#x79c1;&#x6709;&#x7684;&#xff08;private&#xff09;&#xff1a",{"_index":4123,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x662f;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x4e2d;&#x4e0e;&#x6a21;&#x5757;&#x4e0d;&#x540c;&#x540d;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x4f7f;&#x5f97;&#x4e00;&#x4e2a",{"_index":4112,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x7684;&#x5173;&#x7cfb;&#x4e0d;&#x4f1a;&#x53cd;&#x6620;&#x4e8e;&#x8fd0;&#x884c;&#x65f6;&#xff1b;&#x4e00;&#x4e2a;&#x4fee;&#x9970;&#x4e3a",{"_index":4119,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x7684;&#x58f0;&#x660e;&#x53ef;&#x80fd;&#x770b;&#x8d77;&#x6765;&#x5982;&#x4e0b;&#x6240;&#x793a;&#xff1a",{"_index":4118,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6a21;&#x5757;&#x7684;&#x5b50;&#x7c7b;&#x578b",{"_index":4203,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6a21;&#x5757;&#x7684;&#x5f71;&#x54cd;&#x3002",{"_index":6287,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x6a21;&#x5f0f",{"_index":5621,"title":{"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{}},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x6a21;&#x5f0f;&#x4e2d;&#x4f7f;&#x7528;&#x63d0;&#x53d6;&#x5668;&#xff1a",{"_index":5667,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x6a21;&#x5f0f;&#x4e2d;&#xff0c;&#x5982;&#x679c;&#x6709;&#x4e00;&#x4e2a;&#x6355;&#x83b7;&#x7684;&#x53d8;&#x91cf;&#xff0c;&#x5b83;&#x5fc5;&#x987b;&#x4e5f;&#x51fa;&#x73b0;&#x5728;&#x5b83;&#x7684;&#x5b50;&#x6a21;&#x5f0f;&#x4e2d;&#x3002",{"_index":5624,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{}}}],["x6a21;&#x5f0f;&#x5339;&#x914d",{"_index":559,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x6a21;&#x5f0f;&#x5339;&#x914d;&#x5668;&#x4f1a;&#x68c0;&#x67e5;&#x6bcf;&#x4e2a",{"_index":5534,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["x6a21;&#x5f0f;&#x5339;&#x914d;&#x662f;&#x6839;&#x636e;&#x4e00;&#x4e2a;&#x5339;&#x914d;&#x7684;&#x6307;&#x5b9a;&#x503c;&#x8fdb;&#x884c;&#x5206;&#x652f;&#x5904;&#x7406;&#xff0c;&#x5c3d;&#x53ef;&#x80fd;&#x6df1;&#x7684;&#x6a21;&#x5f0f;&#x3002;&#x5728;haxe&#x4e2d;&#xff0c;&#x6240;&#x6709;&#x7684;&#x6a21;&#x5f0f;&#x5339;&#x914d;&#x901a;&#x8fc7",{"_index":5506,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["x6a21;&#x5f0f;&#x5339;&#x914d;&#xff08;&#x7b2c;6.4&#x8282;&#xff09",{"_index":2891,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x6a21;&#x5f0f;&#x53c2;&#x6570;&#xff08;&#x67e5;&#x770b",{"_index":6007,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["x6a21;&#x5f0f;&#x603b;&#x662f;&#x4ece;&#x5934;&#x81f3;&#x5c3e;&#x5339;&#x914d",{"_index":5509,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{}}}],["x6a21;&#x677f;&#x5b8f",{"_index":2149,"title":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}},"body":{}}],["x6a21;&#x677f;&#x662f;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x6587;&#x4ef6;&#xff0c;&#x7528;&#x6765;&#x4ea7;&#x751f;&#x4efb;&#x4f55;&#x79cd;&#x7c7b;&#x7684;&#x53d6;&#x51b3;&#x4e8e;&#x8f93;&#x5165;&#x5185;&#x5bb9;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x8f93;&#x51fa;&#x3002;&#x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x5c0f;&#x7684;&#x6a21;&#x677f;&#x4f8b;&#x5b50;&#xff1a",{"_index":2120,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{}}}],["x6a21;&#x677f;&#x7ed9;&#x7528;&#x6237;&#x3002",{"_index":2173,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["x6a21;&#x8fd0;&#x7b97",{"_index":2523,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x6b63;&#x5219",{"_index":75,"title":{},"body":{"10.标准库/10.标准库.html#10-标准库":{}}}],["x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x3002;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x9a8c;&#x8bc1;&#x5b57;&#x7b26;&#x4e32;&#x683c;&#x5f0f;&#xff0c;&#x8f6c;&#x6362;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#xff0c;&#x6216;&#x8005;&#x4ece;&#x7ed9;&#x5b9a;&#x6587;&#x672c;&#x4e2d;&#x63d0;&#x53d6;&#x4e00;&#x4e9b;&#x89c4;&#x5219;&#x6570;&#x636e;&#x3002",{"_index":1880,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x5bf9;&#x8c61;&#x7684",{"_index":1846,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{}}}],["x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x5b9e;&#x73b0;&#xff1a",{"_index":1825,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{}}}],["x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x7ed3;&#x5c3e;&#x7684",{"_index":1904,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x6b63;&#x5982;hax",{"_index":1159,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x6b63;&#x65e0;&#x7a77",{"_index":2222,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x6b64;&#x5904;&#x8bbf;&#x95ee;&#x4e86",{"_index":4116,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6b64;&#x5916;&#xff0c;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x63d0;&#x4f9b",{"_index":6396,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x6b64;&#x5916;&#xff0c;&#x4e5f;&#x53ef;&#x4ee5;&#x5bfc;&#x5165;&#x7c7b;&#x7684;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x5e76;&#x4e0d;&#x53d7;&#x9650;&#x5236;&#x7684;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x3002",{"_index":4192,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6b64;&#x5916;&#xff0c;&#x5185;&#x90e8;&#x7684;&#x8bed;&#x6cd5;&#x7ed3;&#x6784;&#x5c06;&#x6807;&#x8bc6;&#x7b26;&#x4f5c;&#x4e3a;&#x5e38;&#x91cf;&#xff0c;&#x53ef;&#x80fd;&#x5728;&#x4f7f;&#x7528;&#x5b8f;&#xff08;&#x7b2c;9&#x7ae0;&#xff09;&#x65f6;&#x662f;&#x76f8;&#x5173;&#x7684;&#x3002",{"_index":5036,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["x6b64;&#x5916;&#xff0c;&#x53ef;&#x4ee5;&#x5305;&#x62ec;&#x5b8c;&#x6574;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x5230;&#x5b57;&#x7b26;&#x4e32;&#x4e2d;&#xff0c;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":5681,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["x6b64;&#x5916;&#xff0c;haxe.macro.print",{"_index":6460,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x6b64;&#x65f6",{"_index":3892,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x6b64;&#x65f6;&#x76f8;&#x5f53;&#x4e8e",{"_index":4829,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x6bcf;&#x4e2a",{"_index":2450,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x6bcf;&#x4e2a;&#x5143;&#x6570;&#x636e;&#x90fd;&#x6709;&#x4e2a;&#x5b57;&#x6bb5;&#xff0c;&#x5b57;&#x6bb5;&#x540d;&#x662f;&#x5143;&#x6570;&#x636e;&#x7684;&#x540d;&#x79f0;&#x3002",{"_index":5828,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x6bcf;&#x4e2a;&#x5b57;&#x6bb5;&#x5fc5;&#x987b;&#x6709;&#x4e00;&#x4e2a;&#x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b",{"_index":2732,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x6bcf;&#x4e2a;&#x652f;&#x6301;&#x7684;&#x503c;&#x88ab;&#x8f6c;&#x6362;&#x4e3a;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x524d;&#x7f00;&#x5b57;&#x7b26;&#x3001;&#x540e;&#x8ddf;&#x9700;&#x8981;&#x7684;&#x6570;&#x636e;&#x3002",{"_index":2215,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x6bcf;&#x5f53;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x4e8",{"_index":4060,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x6bcf;&#x5f53;&#x4e00;&#x4e2a;array&#x7684;&#x5b9e;&#x4f8b;&#x88ab;&#x521b;&#x5efa;&#xff0c;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":3673,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x6bd4;&#x8f83;&#x590d;&#x6742;&#x5bf9;&#x8c61",{"_index":1573,"title":{"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}},"body":{}}],["x6bd4;&#x8f83;&#x8fd0;&#x7b97;&#x7b26",{"_index":2524,"title":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}},"body":{}}],["x6bd4;&#x8f83;&#xff0c;&#x9664;&#x975e;&#x5305;&#x88c5;&#x5b83;&#xff1a",{"_index":2685,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x6c9f;&#x901a;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5;&#x662f;&#x5426;&#x6709;&#x4e00;&#x4e2a;&#x6709;&#x6548;&#x7684;&#x8fd4;&#x56de;&#xff0c;&#x5982;&#x679c;&#x662f;&#x7684;&#x8bdd;&#xff0c;&#x5b83;&#x8fd4;&#x56de;&#x4ec0;&#x4e48;&#x503c;&#xff1a",{"_index":1764,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{}}}],["x6ca1;&#x6709",{"_index":3813,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x6ca1;&#x6709;&#x5217;&#x8868;&#x63a8;&#x5bfc;&#x3002",{"_index":1655,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["x6ca1;&#x6709;&#x53c2;&#x6570;&#x7684;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#x662f;&#x53d8;&#x91cf;&#x5b57;&#x6bb5",{"_index":6491,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["x6ca1;&#x6709;&#x5b57;&#x6bb5",{"_index":3010,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x6ca1;&#x6709;&#x8868;&#x8fbe;&#x5f0f;&#x7684",{"_index":3467,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x6ca1;&#x6709;&#x88ab;&#x63d0;&#x53ca;&#xff0c;haxe&#x7f16;&#x8bd1;&#x5668;&#x4e5f;&#x80fd;&#x63a8;&#x65ad;&#x5b83;&#x4e3a",{"_index":3905,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x6ca1;&#x6709;&#x8fd9;&#x4e2a;&#x5b57;&#x6bb5;&#xff0c;&#x7ed3;&#x679c;&#x5c06;&#x662f;&#x672a;&#x6307;&#x5b9a;&#x7684;&#x3002",{"_index":2157,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["x6ce8;&#x610f",{"_index":1903,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x6ce8;&#x610f;&#xff0c;&#x4f60;&#x53ef;&#x4ee5;&#x5728;&#x7b2c;&#x4e00;&#x6b21;&#x53d1;&#x9001;&#x547d;&#x4ee4;&#x884c;&#x7684;&#x65f6;&#x5019;&#x4f7f;&#x7528",{"_index":6090,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x6ce8;&#x610f;&#xff0c;&#x5206;&#x7ec4;&#x53f7;&#x4ece;1&#x5f00;&#x59cb;&#xff0c;r.matched(0",{"_index":1787,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["x6ce8;&#x610f;&#xff0c;&#x5e76;&#x6ca1;&#x6709;&#x4f7f;&#x7528;&#x51fd;&#x6570;&#x4f53",{"_index":3330,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x6ce8;&#x610f;&#xff0c;haxe.json.pars",{"_index":1311,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["x6ce8;&#x91ca;&#x6389;&#x7684;&#x8c03;&#x7528;&#x53ef;&#x4ee5;&#x88ab;&#x7f16;&#x8bd1;&#x5668;&#x63a5;&#x53d7;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x5206;&#x914d;&#x5b57;&#x7b26;&#x4e32",{"_index":2324,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x6ce8;&#xff1a;&#x5728;&#x5b9e;&#x9645;&#x7f16;&#x5199;&#x6d4b;&#x8bd5;&#x4ee3;&#x7801;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x5c1d;&#x8bd5;&#x5728;&#x7c7b;&#x7684",{"_index":2607,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x6d4b;&#x8bd5;&#x51fd;&#x6570",{"_index":1561,"title":{"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{}},"body":{}}],["x6d4b;&#x8bd5;&#x6761;&#x4ef6;&#x3002;&#x53ef;&#x9009;&#x5730;&#xff0c;&#x6761;&#x4ef6;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":2132,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["x6d4b;&#x8bd5;&#x7684;&#x7ed3;&#x679c;&#x5927;&#x81f4;&#x5982;&#x4e0b;&#xff1a",{"_index":1560,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}}}],["x6d88;&#x606f;&#x884c;&#x3002",{"_index":6111,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x6df7;&#x5408;&#x7c7b;&#x578b",{"_index":113,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x6dfb;&#x52a0;&#x5143;&#x6570;&#x636e;&#x5230;&#x5b57;&#x6bb5;&#xff0c;&#x7c7b;&#x6216;&#x8005;&#x8868;&#x8fbe;&#x5f0f;&#x3002;&#x8fd9;&#x53ef;&#x4ee5;&#x548c;&#x7f16;&#x8bd1;&#x5668;&#x3001;&#x5b8f;&#xff0c;&#x6216;&#x8005;&#x8fd0;&#x884c;&#x65f6;&#x7684;&#x7c7b;&#x6c9f;&#x901a;&#x4fe1;&#x606f;&#x3002",{"_index":546,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x6dfb;&#x52a0;&#x7684;&#x7c7b;&#xff08;&#x5185;&#x90e8;&#xff09",{"_index":980,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x6e90;&#x4ee3;&#x7801;&#x6765;&#x4fdd;&#x6301;&#x7406;&#x8bba;&#x4e0e;&#x5b9e;&#x8df5;&#x4e4b;&#x95f4;&#x7684;&#x6865;&#x63a5;&#x3002;&#x8fd9;&#x4e9b;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x901a;&#x5e38;&#x662f;&#x5b8c;&#x6574;&#x7684;&#x7a0b;&#x5e8f;&#xff0c;&#x5e76;&#x5e26;&#x6709;&#x4e00;&#x4e2a",{"_index":23,"title":{},"body":{"index.html#关于本文档":{}}}],["x6e90;&#x4ee3;&#x7801;&#x6765;&#x4fdd;&#x6301;&#x7406;&#x8bba;&#x548c;&#x5b9e;&#x9645;&#x7684;&#x8fde;&#x63a5;&#x3002;&#x8fd9;&#x4e9b;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x901a;&#x5e38;&#x662f;&#x5b8c;&#x6574;&#x7684;&#x7a0b;&#x5e8f;&#xff0c;&#x5e76;&#x5e26;&#x6709;&#x4e00;&#x4e2a",{"_index":1073,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x6e90;&#x6587;&#x4ef6;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x5305;&#xff08;&#x5b50;&#x76ee;&#x5f55;&#xff09;&#x3002",{"_index":724,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x6f5c;&#x5728;&#x7c7b;&#x578b",{"_index":3535,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x70b9;&#x53f7",{"_index":1911,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x7136;&#x540e;&#x4e0b;&#x9762;&#x770b;&#x5230;&#x7684",{"_index":3358,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7136;&#x540e;&#x4f60;&#x53ef;&#x4ee5;&#x8fde;&#x63a5;&#x5230;haxe&#x670d;&#x52a1;&#x5668;&#xff0c;&#x53d1;&#x9001;&#x547d;&#x4ee4;&#x884c;&#x53c2;&#x6570;&#x540e;&#x8ddf;&#x4e00;&#x4e2a",{"_index":6085,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x7136;&#x540e;&#x53ef;&#x4ee5;&#x5728;&#x5faa;&#x73af;&#x4f53",{"_index":4875,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["x7136;&#x540e;&#x5b9e;&#x9645;&#x4e0a;&#x8c03;&#x7528;&#x4e86",{"_index":5783,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x7136;&#x800c;&#x5b83;&#x53ef;&#x80fd;&#x4e0d;&#x662f;&#x5d4c;&#x5165;&#x5927;&#x578b;&#x8d44;&#x6e90;&#x5982;&#x56fe;&#x50cf;&#x6216;&#x8005;&#x97f3;&#x4e50;&#x5230;&#x5e94;&#x7528;&#x6587;&#x4ef6;&#x4e2d;&#x7684;&#x6700;&#x4f18;&#x9009;&#x62e9;&#xff0c;&#x5728;&#x5d4c;&#x5165;&#x5c0f;&#x578b;&#x8d44;&#x6e90;&#x5982;&#x914d;&#x7f6e;&#x6216;&#x8005;xml&#x6570;&#x636e;&#x65f6;&#x662f;&#x975e;&#x5e38;&#x65b9;&#x4fbf;&#x7684;&#x3002",{"_index":6167,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.资源.html#8-4-资源":{}}}],["x7136;&#x800c;&#xff0c;&#x5373;&#x4f7f;&#x6ca1;&#x6709;&#x7c7b;&#x578b;&#x9519;&#x8bef;&#xff0c;&#x4e5f;&#x5f88;&#x5bb9;&#x6613;&#x9047;&#x5230;&#x610f;&#x6599;&#x4e4b;&#x5916;&#x7684;&#x884c;&#x4e3a;&#xff1a",{"_index":2316,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x7136;&#x800c;&#xff0c;&#x53ef;&#x4ee5;&#x628a;or&#x6a21;&#x5f0f;&#x7528;&#x5728;&#x63d0;&#x53d6;&#x5668;&#x7684;&#x53f3;&#x4fa7;&#xff0c;&#x6240;&#x4ee5;&#x524d;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x4f1a;&#x7f16;&#x8bd1;&#x800c;&#x6ca1;&#x6709;&#x62ec;&#x53f7;&#x3002",{"_index":5668,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x7136;&#x800c;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x53ea;&#x6709;&#x5982;&#x679c;&#x81f3;&#x5c11;&#x4e00;&#x4e2a;&#x8bbf;&#x95ee;&#x6807;&#x8bc6;&#x7b26;&#x662f;default&#x6216;&#x8005;null&#x7684;&#x65f6;&#x5019;&#x5047;&#x8bbe;&#x4e00;&#x4e2a;&#x7269;&#x7406;&#x5b57;&#x6bb5;&#x5b58;&#x5728;&#x3002",{"_index":4406,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x7248;&#x672c;&#x4e2d;&#x505a;&#x4e86;&#x66f4;&#x5927;&#x7684;&#x6539;&#x8fdb;&#x3002",{"_index":1165,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x7248;&#x672c;&#x4e2d;&#x52a0;&#x5165;&#x4e86",{"_index":1157,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x7248;&#x672c;&#x4e2d;&#x5df2;&#x7ecf;&#x4fee;&#x590d;&#x6240;&#x4ee5;&#x73b0;&#x5728;&#x603b;&#x662f;&#x4ece;&#x4e0a;&#x5230;&#x4e0b;&#x8fdb;&#x884c;&#x68c0;&#x67e5;&#x5b57;&#x6bb5;&#xff1a",{"_index":3366,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7248;&#x672c;&#x4e2d;&#x7684;&#x65b9;&#x5f0f;&#x3002;&#x7136;&#x540e;&#xff0c;&#x51b3;&#x5b9a;&#x5efa;&#x7acb;&#x6700;&#x7ec8;&#x7684",{"_index":1170,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x7248;&#x672c;&#x4e2d;&#x7684;&#x67d0;&#x4e9b;&#x5b9e;&#x9645;&#x529f;&#x80fd;&#x7684;&#x6539;&#x53d8;&#x7b49;&#x3002;&#x8fd9;&#x7c7b;&#x4fe1;&#x606f;&#x901a;&#x5e38;&#x4e0d;&#x662f;&#x5f88;&#x91cd;&#x8981;&#xff0c;&#x4f60;&#x53ef;&#x4ee5;&#x9009;&#x62e9;&#x8df3;&#x8fc7;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x4eec;&#x53ea;&#x662f;&#x4e3a;&#x4e86;&#x4f20;&#x8fbe;&#x4e00;&#x4e9b;&#x82b1;&#x7d6e;&#x3002;&#x82b1;&#x7d6e;&#x770b;&#x8d77;&#x6765;&#x50cf;&#x8fd9;&#x6837;&#xff1a",{"_index":34,"title":{},"body":{"index.html#关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x7248;&#x672c;&#x4e4b;&#x524d;&#x7684;&#x4e00;&#x4e2a",{"_index":3363,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7248;&#x672c;&#x5728;2006&#x5e74;2&#x6708;&#x53d1;&#x5e03;&#xff0c;&#x9644;&#x5e26;&#x4e86;&#x7b2c;&#x4e00;&#x4e2a;&#x652f;&#x6301;&#x7684;&#x76ee;&#x6807;&#x5e73;&#x53f0",{"_index":1136,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x7248;&#x672c;&#x66fe;&#x7ecf;&#x63a8;&#x65ad",{"_index":3156,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7248;&#x672c;&#x88ab;&#x91cd;&#x6784;&#x3002;haxe&#x7f16;&#x8bd1;&#x5668;&#x751a;&#x81f3;&#x4e0d;&#x8bbe;&#x6cd5;&#x5bfb;&#x627e;&#x5b8f;&#x53c2;&#x6570;&#x6700;&#x521d;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x800c;&#x662f;&#x4f20;&#x9012;&#x4e00;&#x4e2a;&#x7279;&#x6b8a;&#x7684",{"_index":6630,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["x7248;&#x672c;&#xff0c;&#x5373;2012&#x5e74;7&#x6708;&#x53d1;&#x5e03;&#x7684",{"_index":1171,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x7269;&#x7406;&#x5b57;&#x6bb5",{"_index":4407,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x7279;&#x5b9a;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x4e4b;&#x95f4;&#xff0c;&#x80af;&#x5b9a;&#x6709;&#x4e00;&#x4e2a;&#x533a;&#x522b;&#x3002;&#x533a;&#x522b;&#x662f;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x95ee;&#x53f7;&#x6807;&#x8bb0;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x6765;&#x5b9e;&#x73b0;&#xff1a",{"_index":2634,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x751f;&#x6210;&#x5b9e;&#x9a8c;&#x6027;&#x7684;c++&#x6307;&#x4ee4;&#x96c6",{"_index":956,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x751f;&#x6210;&#x7684",{"_index":6431,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["x751f;&#x6210;&#x7684;&#x4ee3;&#x7801;&#x53ef;&#x80fd;&#x5728;&#x4e0d;&#x652f;&#x6301;&#x6570;&#x7ec4;&#x521d;&#x59cb;&#x5316;&#x7684;&#x5e73;&#x53f0;&#x4e0d;&#x90a3;&#x4e48;&#x7b80;&#x6d01;&#x3002;&#x672c;&#x8d28;&#x4e0a;&#xff0c;&#x8fd9;&#x6837;&#x7684;&#x521d;&#x59cb;&#x5316;&#x4ee3;&#x7801;&#x770b;&#x8d77;&#x6765;&#x5982;&#x4e0b;&#xff1a",{"_index":5199,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["x751f;&#x6210;&#x7684;&#x65b9;&#x5f0f;&#x53ef;&#x80fd;&#x770b;&#x8d77;&#x6765;&#x6709;&#x70b9;&#x5947;&#x602a;&#xff0c;&#x4f46;&#x662f;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x5f88;&#x5bb9;&#x6613;&#x7684;&#x8bc1;&#x660e;&#xff1a",{"_index":4351,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x751f;&#x6210;&#x7684;javascript&#x8f93;&#x51fa;&#x63ed;&#x793a;&#x4e86;&#x5185;&#x8054;&#x7684;&#x6548;&#x679c;&#xff1a",{"_index":4698,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x751f;&#x6210;&#x8fd9;&#x4e2a;&#x4f18;&#x5316;&#x540e;&#x7684",{"_index":1620,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x751f;&#x6210;&#xff0c;&#x76ee;&#x524d;&#x8fd8;&#x5728;&#x5efa;&#x8bbe;&#x4e2d;&#xff0c;&#x56ff;&#x4e8e;&#x4e2a;&#x4eba;&#x65f6;&#x95f4;&#x7cbe;&#x529b;&#x6709;&#x9650;&#xff0c;&#x6709;&#x5174;&#x8da3;&#x53c2;&#x4e0e;&#x52a0;&#x5feb;&#x672c;&#x6587;&#x6863;&#x5efa;&#x8bbe;&#x7684;&#x670b;&#x53cb;&#x53ef;&#x4ee5;&#x8054;&#x7cfb;&#x6211;&#xff0c;&#x5de6;&#x4fa7;&#x8fb9;&#x680f;&#x4e0a;&#x6709;&#x672c;&#x6587;&#x6863",{"_index":12,"title":{},"body":{"index.html#关于本文档":{}}}],["x751f;&#x6210;neko&#xff08;&#x7b2c;12.3&#x8282;&#xff09;&#x4e8c;&#x8fdb;&#x5236;&#x5230;&#x6307;&#x5b9a;&#x6587;&#x4ef6;&#x3002",{"_index":734,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x7528;&#x4e8e;&#x5f02;&#x6b65;&#x8fde;&#x63a5;&#xff0c;&#x7ed3;&#x679c;&#x662f;&#x5728;&#x6267;&#x884c;&#x8fc7;&#x7a0b;&#x4e2d;&#x4e4b;&#x540e;&#x53d1;&#x751f;&#x7684;&#x4e8b;&#x4ef6;&#x3002",{"_index":1428,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接":{}}}],["x7528;&#x4e8e;&#x63cf;&#x8ff0;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x7684;&#x7f3a;&#x7701;&#xff0c;&#x56e0;&#x6b64;&#x5b83;&#x4e0d;&#x80fd;&#x88ab;&#x5206;&#x914d;&#x5230;&#x5176;&#x4ed6;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x4e0a;&#xff0c;&#x5373;&#x4f7f;&#x662f",{"_index":3878,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7528;&#x4e8e;javascript&#xff0c",{"_index":716,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x7528;&#x5728;&#x4e00;&#x4e2a;&#x6ce8;&#x91ca;&#x7684;&#x7c7b;&#x4e0a;&#xff0c;&#x4ee5;&#x53ca;&#x6240;&#x6709;&#x5b50;&#x7c7b;&#x3002",{"_index":5863,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x7528;&#x6237;&#x751a;&#x81f3;&#x8ba4;&#x4e3a",{"_index":3620,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7528;&#x6237;&#x9690;&#x85cf;&#x7684;&#x5f88;&#x597d;&#x7684;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#xff0c;&#x5c3d;&#x7ba1;&#x5b83;&#x4eec;&#x65e0;&#x5904;&#x4e0d;&#x5728;&#x3002;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":3076,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7528;&#x66f4;&#x5c11;&#x7684;&#x8bed;&#x53e5;&#x5b9a;&#x4e49;&#x5b57;&#x6bb5;&#x3002",{"_index":3419,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x7528;&#x6765;&#x5206;&#x9694;&#x7684;&#x952e;&#x548c;&#x503c;&#xff0c;&#x952e;&#x540d;&#x5fc5;&#x987b;&#x662f;&#x4e00;&#x4e2a;&#x6709;&#x6548;&#x7684",{"_index":2995,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7531;&#x4e00;&#x4e2a;&#x9ad8;&#x7ea7;&#x7684;&#x3001;&#x5f00;&#x6e90;&#x7f16;&#x7a0b;&#x8bed;&#x8a00;&#x548c;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x5668;&#x6784;&#x6210;&#x3002;&#x5b83;&#x5141;&#x8bb8;&#x4f7f;&#x7528;&#x4e00;&#x4e2a",{"_index":999,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7531;&#x4e8e",{"_index":1613,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x7531;&#x4e8e;&#x5176;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x672c;&#x8eab;&#x6027;&#x8d28;&#xff0c;&#x9700;&#x8981;&#x5728;&#x8fd9;&#x4e2a;&#x95ee;&#x9898;&#x4e2d;&#x627e;&#x5230;&#x4e00;&#x4e2a;&#x59a5;&#x534f;&#xff1a;&#x56e0;&#x6b64;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#x7684;&#x4e00;&#x4e9b;&#x88ab;&#x5141;&#x8bb8;&#x4f7f;&#x7528",{"_index":2658,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x7531;&#x4e8e;&#x7f16;&#x8bd1;&#x5668;&#x63d0;&#x5347;&#x62bd;&#x8c61;&#x6210;&#x5458;&#x51fd;&#x6570;&#x4e3a;&#x9759;&#x6001;&#x51fd;&#x6570;&#xff0c;&#x53ef;&#x4ee5;&#x624b;&#x52a8;&#x5b9a;&#x4e49;&#x9759;&#x6001;&#x51fd;&#x6570;&#x5e76;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x5230;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x3002;&#x8fd9;&#x91cc;&#x7684;&#x8bed;&#x6cd5;&#x548c;&#x90a3;&#x4e9b;&#x7b2c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x51b3;&#x5b9a;&#x51fd;&#x6570;&#x88ab;&#x5b9a;&#x4e49;&#x4e3a;&#x4ec0;&#x4e48;&#x7c7b;&#x578b;&#x7684",{"_index":3380,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7531;&#x4e8e;expr&#x517c;&#x5bb9;&#x4efb;&#x4f55;&#x53ef;&#x80fd;&#x7684;&#x8f93;&#x5165;&#xff0c;haxe&#x63d0;&#x4f9b;&#x4e86;&#x4e00;&#x4e2a;&#x7c7b;&#x578b",{"_index":6322,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["x7531;&#x4e8e;hax",{"_index":3362,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7531;&#x4e8e;haxe&#x662f;&#x4e00;&#x4e2a;&#x975e;&#x5e38;&#x5feb;&#x7684;&#x7f16;&#x8bd1;&#x5668;&#xff0c;&#x4f9d;&#x8d56;&#x666e;&#x901a;&#x7f16;&#x8bd1;&#x5668;&#x7684;&#x5b8c;&#x6210;&#x8c03;&#x7528;&#x901a;&#x5e38;&#x5c31;&#x8db3;&#x4ee5;&#x80dc;&#x4efb;&#x3002;&#x5bf9;&#x4e8e;&#x8f83;&#x5927;&#x7684;&#x9879;&#x76ee;&#xff0c;haxe&#x63d0;&#x4f9b;&#x4e00;&#x4e2a;&#x786e;&#x4fdd;&#x53ea;&#x6709;&#x90a3;&#x4e9b;&#x5b9e;&#x9645;&#x4e0a;&#x53d1;&#x751f;&#x4e86;&#x53d8;&#x5316;&#xff0c;&#x6216;&#x8005;&#x5b83;&#x4eec;&#x7684;&#x4f9d;&#x8d56;&#x5173;&#x7cfb;&#x6709;&#x4efb;&#x4f55;&#x53d8;&#x5316;&#x7684;&#x6587;&#x4ef6;&#x624d;&#x4f1a;&#x88ab;&#x91cd;&#x65b0;&#x7f16;&#x8bd1;&#x7684;&#x670d;&#x52a1;&#x6a21;&#x5f0f;&#xff08;&#x7b2c;8.3.8&#x8282;&#xff09;&#x3002",{"_index":5906,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x754c;&#x9650;&#x5185;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x88ab;&#x6267;&#x884c;&#xff0c;&#x4f7f;&#x7528;&#x5b83;&#x7684;&#x503c;&#x8fdb;&#x884c;&#x66ff;&#x6362;&#x3002",{"_index":6377,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x7684",{"_index":1033,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x7684;&#x4e00;&#x4e2a;&#x201c;&#x5b50;&#x7c7b;&#x201d;&#xff0c;&#x4f46;&#x8fd9;&#x4e5f;&#x5728;&#x522b;&#x5904;&#x5f15;&#x8d77;&#x95ee;&#x9898;&#x3002;&#x4f8b;&#x5982;&#xff0c;&#x901a;&#x8fc7",{"_index":3559,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x7684;&#x4e00;&#x4e2a;&#x5b9e;&#x4f8b;&#x5fc5;&#x987b;&#x88ab;&#x521b;&#x5efa;&#x3002;&#x4f7f;&#x7528",{"_index":1556,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}}}],["x7684;&#x4e00;&#x4e2a;&#x5b9e;&#x4f8b;&#xff0c;&#x53c2;&#x6570;&#x4e3a;&#x4e00;&#x4e2a;&#x5355;&#x72ec;&#x7684",{"_index":6499,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["x7684;&#x4e0a;&#x4e0b;&#x6587;&#x53c2;&#x6570;&#x3002",{"_index":2164,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#全局":{}}}],["x7684;&#x4ee3;&#x7801;&#x5f97;&#x5230;&#x6027;&#x80fd;&#x63d0;&#x5347;&#xff0c;&#x4f46;&#x4ee3;&#x4ef7;&#x662f;&#x5176;&#x751f;&#x6210;&#x7684;&#x4f53;&#x91cf;&#x53d8;&#x5927;&#xff1a",{"_index":3735,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x7684;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x548c",{"_index":116,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7684;&#x4efb;&#x610f;&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x6765;&#x8c03;&#x7528",{"_index":3849,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x7684;&#x4f7f;&#x7528;&#xff1a",{"_index":4780,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["x7684;&#x503c;&#x3002",{"_index":2568,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x7684;&#x503c;&#x3002;&#x540c;&#x65f6;&#x4ed6;&#x4eec;&#x53ef;&#x4ee5;&#x6839;&#x636e;&#x524d;&#x7f6e;&#x6216;&#x540e;&#x7f6e;&#x65b9;&#x5f0f;&#x7684;&#x4f7f;&#x7528;&#x4ea7;&#x751f;&#x4e0d;&#x540c;&#x7684;&#x7ed3;&#x679c;&#xff0c;&#x524d;&#x7f6e;&#x4f7f;&#x7528;&#x65f6;&#x6c42;&#x503c;&#xff08;evaluates&#xff09;&#x7ed3;&#x679c;&#x4e3a;&#x4fee;&#x6539;&#x540e;&#x7684;&#x503c;&#xff0c;&#x540e;&#x7f6e;&#x4f7f;&#x7528;&#x65f6;&#x6c42;&#x503c;&#x7ed3;&#x679c;&#x4e3a;&#x539f;&#x6765;&#x7684;&#x503c;&#x3002",{"_index":5138,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{}}}],["x7684;&#x503c;&#x4e3a",{"_index":3008,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7684;&#x503c;&#x4e4b;&#x540e;&#xff0c;&#x4e00;&#x4e2a",{"_index":2880,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x7684;&#x503c;&#x662f;&#x65e0;&#x5173;&#x7d27;&#x8981;&#x7684;&#x3002;&#x5728;&#x5982;&#x4e0b;&#x60c5;&#x51b5;&#x8fd9;&#x5f88;&#x91cd;&#x8981;&#xff1a",{"_index":2586,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x503c;&#xff0c;&#x5373",{"_index":3005,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7684;&#x5143;&#x6570;&#x636e;&#x63d0;&#x4f9b;&#xff0c;&#x800c;&#x4e0d;&#x662f;&#x901a;&#x8fc7;&#x989d;&#x5916;&#x7684;&#x8bed;&#x6cd5;&#x63d0;&#x4f9b;&#x3002;&#x6709;&#x5982;&#x4e0b;&#x51e0;&#x4e2a;&#x7406;&#x7531;&#xff1a",{"_index":5340,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x7684;&#x5219;&#x4f7f;&#x7528;&#x67d0;&#x4e9b;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x4f7f;&#x4e24;&#x79cd;&#x7c7b;&#x578b;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x533a;&#x522b;&#x662f;&#x5fc5;&#x8981;&#x7684;&#xff1a",{"_index":2661,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x7684;&#x52aa;&#x529b;&#x4e0b;&#xff0c;&#x5728;2007&#x5e74;7&#x6708;&#x7684",{"_index":1156,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x7684;&#x5305;&#x7ba1;&#x7406;&#x7cfb;&#x7edf",{"_index":1040,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7684;&#x533a;&#x522b;&#x3002;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;&#x8fd9;&#x91cc;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x5177;&#x4f53;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x662f;&#x6ca1;&#x6709;&#x610f;&#x4e49;&#x7684;&#xff0c;&#x53ea;&#x662f;&#x7528;&#x4e8e;&#x6f14;&#x793a;&#x76ee;&#x7684;&#x3002;&#x901a;&#x5e38;&#x6211;&#x4eec;&#x4f1a;&#x5728;&#x8fd9;&#x91cc;&#x7701;&#x7565;&#x7c7b;&#x578b;&#xff0c;&#x8ba9",{"_index":2846,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x7684;&#x53c2;&#x6570;&#x4e4b;&#x524d;&#x8c03;&#x7528;&#x3002;&#x4e4b;&#x540e;&#x5141;&#x8bb8;&#x4ee5;&#x67d0;&#x4e9b;&#x65b9;&#x5f0f;&#x914d;&#x7f6e;&#x7f16;&#x8bd1;&#x5668;&#x3002",{"_index":6610,"title":{},"body":{"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["x7684;&#x53c2;&#x6570;&#x5373;&#x53ef;&#x3002;&#x952e;&#x4f1a;&#x4f5c;&#x4e3a;&#x6a21;&#x677f;&#x53d8;&#x91cf;&#x540d;&#xff0c;&#x503c;&#x5f15;&#x7528;&#x4e00;&#x4e2a;&#x5e94;&#x8be5;&#x8fd4;&#x56d",{"_index":2153,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["x7684;&#x53c2;&#x6570;&#x662f;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#x7684;&#x8c03;&#x7528;&#xff0c;&#x8fd9;&#x4e2a;&#x6807;&#x8bc6;&#x7b26;&#x5728;haxe&#x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684;&#x7c7b",{"_index":6611,"title":{},"body":{"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["x7684;&#x53e6;&#x5916;&#x4e00;&#x4e2a;&#x522b;&#x540d;&#x4e3a",{"_index":4830,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x7684;&#x53ea;&#x8bfb;&#x5c5e;&#x6027;&#xff08;&#x7b2c;4.2&#x8282;&#xff09;&#x3002;&#x7ea6;&#x675f;&#x6307;&#x660e;&#x4e00;&#x4e2a;&#x517c;&#x5bb9;&#x7684;&#x7c7b;&#x578b;&#x6ee1;&#x8db3;&#xff1a",{"_index":3601,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x7684;&#x5404;&#x4e2a",{"_index":3909,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x7684;&#x56de;&#x8c03;&#x51fd;&#x6570;&#x3002;&#x8fd9;&#x4e2a;&#x5b8f;&#x51fd;&#x6570;&#x7684;&#x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x603b;&#x662f;&#x4e00;&#x4e2a",{"_index":2154,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#模板宏":{}}}],["x7684;&#x5730;&#x65b9;&#x3002;&#x867d;&#x7136;&#x8fd9;&#x53ea;&#x4e0d;&#x8fc7;&#x8282;&#x7701;&#x4e86;&#x51e0;&#x6b21;&#x6572;&#x952e;&#x76d8;&#x7684;&#x6b21;&#x6570;&#xff0c;&#x4f46;&#x5728;&#x7528;&#x4e8e;&#x66f4;&#x590d;&#x6742;&#x3001;&#x6df7;&#x5408;&#x7684;&#x7c7b;&#x578b;&#x65f6;&#x4f1a;&#x4ea7;&#x751f;&#x5f88;&#x5927;&#x7684;&#x5dee;&#x5f02;&#x3002;&#x518d;&#x4e00;&#x6b21;&#xff0c;&#x8fd9;&#x6b63;&#x662f;&#x4e3a;&#x4ec0;&#x4e48",{"_index":3625,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7684;&#x5730;&#x65b9;&#xff0c;haxe&#x4e5f;&#x4f1a;&#x5728;&#x591a;&#x6570;&#x6570;&#x503c;&#x8fd0;&#x7b97;&#x4e2d;&#x8f6c;&#x6362;int",{"_index":1962,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["x7684;&#x5757;&#x8868;&#x8fbe;&#x5f0f;&#xff08;5.1&#xff09;&#x4e2d;&#x3002;&#x5b83;&#x63a5;&#x53d7;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#xff0c;&#x5e76;&#x5bf9;&#x53c2;&#x6570;&#x52a0;&#x4e0a;&#x5916;&#x90e8;&#x4f5c;&#x7528;&#x57df;&#x4e2d;&#x5b9a;&#x4e49;&#x7684",{"_index":4802,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x7684;&#x57fa;&#x7840;&#xff0c;&#x5982;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x548c;&#x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x3002",{"_index":1146,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x7684;&#x58f0;&#x660e;&#x548c",{"_index":3079,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7684;&#x5b50;&#x7c7b;&#x3002;&#x4e00;&#x4e2a;&#x7c7b;&#x53ef;&#x4ee5;&#x6709;&#x8bb8;&#x591a;&#x5b50;&#x7c7b;&#xff0c;&#x4f46;&#x662f;&#x53ea;&#x6709;&#x4e00;&#x4e2a;&#x7236;&#x7c7b;&#x3002;&#x672f;&#x8bed;&#x201c;&#x4e00;&#x4e2a",{"_index":2775,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7684;&#x5b57;&#x6bb5;&#x7684;&#x4e00;&#x4e2a;&#x5b58;&#x53d6;&#x5668;&#x65b9;&#x6cd5;&#xff08;&#x6216;&#x8005;&#x7b80;&#x79f0;&#x4e3a;&#x5b58;&#x53d6;&#x5668;&#xff09;&#x662f;&#x4e00;&#x4e2a;void",{"_index":4540,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x7684;&#x5b8f;&#x6839;&#x636e;&#x5b8f;&#x7684;&#x7c7b;&#x578b;&#x6709;&#x5bf9;&#x4e0d;&#x540c;&#x4e0a;&#x4e0b;&#x6587;&#x4fe1;&#x606f;&#x7684;&#x8bbf;&#x95ee;&#x3002;&#x9664;&#x4e86;&#x67e5;&#x8be2;&#x8fd9;&#x4e9b;&#x4fe1;&#x606f;&#xff0c;&#x4e0a;&#x4e0b;&#x6587;&#x4e5f;&#x5141;&#x8bb8;&#x4e00;&#x4e9b;&#x4fee;&#x6539;&#x6bd4;&#x5982;&#x5b9a;&#x4e49;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x7c7b;&#x578b;&#x6216;&#x8005;&#x6ce8;&#x518c;&#x67d0;&#x4e2a;&#x56de;&#x8c03;&#x3002;&#x91cd;&#x8981;&#x7684;&#x662f;&#xff0c;&#x7406;&#x89e3;&#x4e0d;&#x662f;&#x6240;&#x6709;&#x4fe1;&#x606f;&#x5bf9;&#x6240;&#x6709;&#x79cd;&#x7c7b;&#x7684;&#x5b8f;&#x90fd;&#x53ef;&#x7528;&#xff0c;&#x5c31;&#x5982;&#x540e;&#x9762;&#x4f8b;&#x5b50;&#x6240;&#x8bc1;&#x660e;&#x7684;&#xff1a",{"_index":6301,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x7684;&#x5b9a;&#x4e49;&#x5728;&#x6b64;&#x4f8b;&#x4e2d;&#x5f88;&#x76f4;&#x89c2;&#xff0c;&#x4f46;&#x8fd9;&#x53ea;&#x662f;&#x4f1a;&#x6267;&#x884c;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x7684;&#x5176;&#x4e2d;&#x4e00;&#x4f8b;&#xff1a",{"_index":3950,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7684;&#x5b9e;&#x4f8b;&#x3002;&#x8fd9;&#x662f;&#x901a;&#x8fc7",{"_index":6428,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["x7684;&#x5b9e;&#x4f8b;&#x3002;&#x901a;&#x8fc7;&#x4e00;&#x4e2a",{"_index":6412,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["x7684;&#x5b9e;&#x4f8b;&#x540c;&#x65f6;&#x4e5f;&#x662f",{"_index":2741,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x7684;&#x5c5e;&#x6027",{"_index":3606,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x7684;&#x5f00;&#x53d1;&#x3002;&#x6b64;&#x5916;&#xff0c;java",{"_index":1168,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x7684;&#x5f00;&#x53d1;&#x4e2d;&#x505a;&#x51fa;&#x67d0;&#x4e9b;&#x51b3;&#x5b9a;&#xff0c;&#x6216;&#x8005;&#x8fc7;&#x53bb;&#x7684",{"_index":33,"title":{},"body":{"index.html#关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x7684;&#x5f62;&#x5f0f;&#x6bd4;&#x8f83;&#xff08;&#x662f",{"_index":2542,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x7684;&#x5f62;&#x5f0f;&#x8fdb;&#x884c;&#x8bbf;&#x95ee",{"_index":4114,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x7684;&#x60c5;&#x51b5;&#x3002",{"_index":2837,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x7684;&#x6240;&#x6709;&#x5b50;&#x7c7b;&#x578b;&#xff08;&#x7b2c;3.7.1&#xff09;&#xff1a",{"_index":5996,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["x7684;&#x6267;&#x884c;&#x7ed3;&#x679c;&#x4e3a",{"_index":2583,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x6269;&#x5c55;&#x3002;&#x7136;&#x540e;&#x8865;&#x5145;&#x989d;&#x5916;&#x7684;&#x7c7b;&#x5b57;&#x6bb5;&#xff0c;&#x6b64;&#x4f8b;&#x4e2d;&#xff0c;&#x9700;&#x8981;&#x4e00;&#x4e2a",{"_index":2971,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x7684;&#x6548;&#x679c;&#x3002",{"_index":4189,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x7684;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#xff08;&#x7b2c;5.8&#x8282;&#xff09;&#xff1a",{"_index":1612,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x7684;&#x65b9;&#x6cd5",{"_index":3383,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7684;&#x65f6;&#x5019;&#x4e0d;&#x4f1a;&#x6267;&#x884c",{"_index":2584,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x65f6;&#x5019;&#x6211;&#x4eec;&#x7b80;&#x8981;&#x7684;&#x4ecb;&#x7ecd;&#x4e86;&#x5982;&#x4f55;&#x901a;&#x8fc7;&#x5173;&#x952e;&#x5b57",{"_index":3616,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7684;&#x65f6;&#x5019;&#x624d;&#x7ee7;&#x7eed;&#x6267;&#x884c",{"_index":2581,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x65f6;&#x5019;&#x8bbf;&#x95ee",{"_index":2588,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x65f6;&#x5019;&#xff0c;dynam",{"_index":3165,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7684;&#x6784;&#x5efa;&#x65b9;&#x6cd5;&#x6267;&#x884c;&#x4e09;&#x6b65;&#xff1a",{"_index":6580,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x63a5;&#x53d7;&#x4e24;&#x4e2a;&#x53c2;&#x6570",{"_index":2712,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x662f;&#x5185;&#x8054;&#x7684",{"_index":3548,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x7684;&#x6807;&#x8bc6;&#x7b26;&#x5728;&#x5185;&#x90e8;&#x4f7f;&#x7528;&#x3002;&#x8fd9;&#x5e76;&#x4e0d;&#x662f;&#x5f3a;&#x5236;&#x7684;&#x88ab;&#x89e3;&#x6790;&#x5668;&#x6216;&#x8005;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#x5668;&#x6267;&#x884c;&#x3002",{"_index":320,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["x7684;&#x68c0;&#x67e5;&#x5219;&#x4f1a;&#x9632;&#x6b62;&#x5b83;&#x3002",{"_index":2590,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x4f1a;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x5176;&#x6240;&#x5728;&#x7684;&#x5305;&#xff08;package&#xff09;&#x7684;&#x4e00;&#x4e2a;&#x6210;&#x5458;&#xff0c;&#x6bd4;&#x5982;&#x5728;&#x4e0a;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b",{"_index":4120,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x7684;&#x7236;&#x7c7b;&#x201d;&#x901a;&#x5e38;&#x6307;&#x5b83;&#x7684;&#x76f4;&#x63a5;&#x7236;&#x7c7b;&#x3001;&#x7236;&#x7c7b;&#x7684;&#x7236;&#x7c7b;&#x7b49;&#x3002",{"_index":2776,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7684;&#x7236;&#x7c7b;&#xff0c;&#x800c",{"_index":2773,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7684;&#x7279;&#x5b9a;&#x7c7b;&#x578b",{"_index":2832,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x7684;&#x7279;&#x6027;&#xff0c;&#x5982;&#x6a21;&#x5f0f;&#x5339;&#x914d;&#x3001;&#x5b57;&#x7b26;&#x4e32;&#x63d2;&#x503c",{"_index":1024,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7684;&#x7528;&#x6cd5;&#xff09;&#x3002",{"_index":4191,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x7684;&#x76f4;&#x63a5;&#x8c03;&#x7528;&#x88ab;&#x63a5;&#x53d7;&#xff0c;&#x5373;&#x4f7f;&#x53c2;&#x6570;&#x58f0;&#x660e;&#x4e3a",{"_index":6325,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["x7684;&#x79c1;&#x6709;&#x7c7b;&#xff0c;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#x4e0b;&#x53ea;&#x6709;&#x5728;&#x5b83;&#x6240;&#x5904;&#x7684;&#x6a21;&#x5757;&#x4e4b;&#x5185;&#x624d;&#x80fd;&#x8bbf;&#x95ee;&#x5230;&#x5b83;&#x3002",{"_index":4234,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x7684;&#x7b80;&#x5316;&#xff09;&#x3002",{"_index":2543,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x7684;&#x7b80;&#x77ed;&#x5199;&#x6cd5;&#x3002;&#x540e;&#x8005;&#x7531;&#x56db;&#x90e8;&#x5206;&#x6784;&#x6210;&#xff1a",{"_index":4237,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x7684;&#x7c7b;&#x578b",{"_index":3965,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7684;&#x7c7b;&#x578b;&#x3002",{"_index":2910,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}}}],["x7684;&#x7c7b;&#x578b;&#x4e3a",{"_index":2602,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7684;&#x7c7b;&#x578b;&#x4f9d;&#x7136;&#x662f",{"_index":3893,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":3596,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x7684;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x8fed;&#x4ee3;&#xff0c;&#x5178;&#x578b;&#x7684;&#x60c5;&#x51b5;&#x662f;&#x662f;&#x5426;&#x6709;&#x4e00;&#x4e2a;iterator&#x65b9;&#x6cd5;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;iterator&#x7c7b;&#x578b;&#xff0c;&#x6216;&#x8005;&#x5b83;&#x672c;&#x8eab;&#x662f;&#x4e00;&#x4e2a",{"_index":4873,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["x7684;&#x7c7b;&#x578b;&#x5e76;&#x6ca1;&#x6709;&#x7ed1;&#x5b9a;&#x5230;&#x52a8;&#x6001;&#x7c7b;&#x578b;&#xff0c;&#x4ecd;&#x7136;&#x4fdd;&#x6301;&#x4e86;&#x4e00;&#x4e2a;&#x5355;&#x5f62;&#x3002;&#x7136;&#x540e;&#x5b83;&#x5728",{"_index":3172,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7684;&#x7c7b;&#x578b;&#x5fc5;&#x7136;&#x4e3a",{"_index":4067,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7684;&#x7c7b;&#x578b;&#x65f6;&#x5b83;&#x4e5f;&#x4f1a;&#x6d3e;&#x4e0a;&#x7528;&#x573a;&#x3002",{"_index":131,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x7684;&#x7c7b;&#x578b;&#x662f",{"_index":3389,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7684;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x77e5;&#x9053;&#x4e03;&#x4e2a;&#x7c7b;&#x578b;&#x7ec4;&#xff1a",{"_index":102,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7684;&#x7c7b;&#x578b;&#x88ab;&#x6539;&#x53d8;&#x4e3a",{"_index":4058,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7684;&#x7c7b;&#x578b;&#x8bed;&#x6cd5;&#x5f62;&#x5f0f;&#x3002",{"_index":3470,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x7684;&#x7c7b;&#x578b;&#x901a;&#x8fc7",{"_index":3015,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7684;&#x7c7b;&#x578b;&#x90fd;&#x4f1a;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x51fd;&#x6570;&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x3002;&#x5982;&#x679c;&#x51fd;&#x6570;&#x6ca1;&#x6709;&#x663e;&#x5f0f;&#x5730;&#x58f0;&#x660e;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#xff0c;&#x5219;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x4f1a;&#x88ab;&#x63a8;&#x65ad;&#x4e3a",{"_index":3964,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7684;&#x7c7b;&#x578b;&#xff1a;&#x5b83;&#x662f;&#x4e00;&#x4e2a;&#x5305;&#x542b;&#x4e86;&#x4e24;&#x4e2a",{"_index":3012,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7684;&#x7c7b;&#xff08;&#x5e26;&#x6216;&#x8005;&#x4e0d;&#x5e26;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff09;&#x4e5f;&#x53ef;&#x4ee5;&#x5229;&#x7528;&#x4e00;&#x4e2a;&#x7279;&#x522b;&#x7684;&#x65b9;&#x6cd5;&#x540d;&#x5b57;&#x53eb;&#x505a",{"_index":3119,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x7684;&#x7ec6;&#x8282;&#x90e8;&#x5206;&#x5728;&#x540e;&#x9762;&#x8fdb;&#x884c;&#x8bb2;&#x89e3;&#x3002",{"_index":2794,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x7684;&#x7ed3;&#x679c;&#x4e3a",{"_index":2580,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x7ed3;&#x679c;&#xff09;&#x662f;&#x5426;&#x4e3a;0&#x3002",{"_index":2035,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x7684;&#x800c;&#x4e14;&#x5b9a;&#x4e49;&#x4e3a;&#x6709;&#x4e00;&#x4e2a",{"_index":4399,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x7684;&#x8bed;&#x6cd5;&#x4e0d;&#x4f1a;&#x5141;&#x8bb8;&#x5bf9;&#x8be5;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x5e76;&#x4e14;&#x5fc5;&#x987b;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":2924,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x7684;&#x8bf4;&#x660e;&#x7a0d;&#x6709;&#x63d0;&#x53ca;&#xff0c;&#x73b0;&#x5728;&#x8ba9;&#x6211;&#x4eec;&#x6765;&#x6b63;&#x5f0f;&#x5730;&#x4ecb;&#x7ecd;&#x5b83;&#xff1a",{"_index":4046,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7684;&#x8c03;&#x7528;&#xff0c;&#x8fd9;&#x4e24;&#x4e2a;&#x53c2;&#x6570;&#x5fc5;&#x987b;&#x662f;&#x76f8;&#x540c;&#x7c7b;&#x578b;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x627f;&#x8ba4;&#x7b2c;&#x4e00;&#x4e2a;&#x8c03;&#x7528;&#xff08;&#x4e24;&#x79cd;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x90fd;&#x662f",{"_index":3696,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x7684;&#x8f6c;&#x6362;&#x5206;&#x522b;&#x662f;&#x5141;&#x8bb8;&#x7684;&#xff0c;&#x800c;&#x4e00;&#x4e2a;&#x4f20;&#x9012;&#x7684;&#x4ec",{"_index":3278,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7684;&#x8f6c;&#x6362;&#x5219;&#x4e0d;&#x5141;&#x8bb8;&#x3002;&#x8fd9;&#x662f;&#x4e3a;&#x4e86;&#x907f;&#x514d;&#x4e0d;&#x660e;&#x786e;&#x7684;&#x8f6c;&#x6362;&#x8def;&#x5f84;&#xff0c;&#x5e76;&#x4fdd;&#x6301;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x9009;&#x62e9;&#x89c4;&#x5219;&#x3002",{"_index":3279,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7684;&#x8f6c;&#x6362;&#x548c;&#x4ece",{"_index":3277,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7684;&#x8f93;&#x51fa;&#x5219;&#x5f88;&#x660e;&#x663e;&#xff1a",{"_index":3411,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x7684;&#x8fd4;&#x56de;&#x503c;&#x5206;&#x914d;&#x7ed9",{"_index":2879,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x662f",{"_index":3170,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x662f;&#x65e0;&#x5173;&#x7684;&#xff0c;&#x9274;&#x4e8e;&#x5b83;&#x4e0d;&#x80fd;&#x88ab;&#x5206;&#x914d;&#x7ed9;&#x4efb;&#x4f55",{"_index":3888,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7684;&#x901a;&#x7528;&#x7c7b;&#x578b",{"_index":3906,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x7684;&#x9759;&#x6001;&#x65b9;&#x6cd5",{"_index":6136,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["x7684;&#xff08;&#x6765;&#x81ea;&#x4e8",{"_index":6589,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x7684;&#xff0c;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x4e00;&#x4e2a;&#x6bd4;&#x8f83;&#x5178;&#x578b;&#x7684;&#x5904;&#x7406;&#xff09;&#x3002;&#x5728;&#x4e00;&#x4e9b;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x53ef;&#x80fd;&#x4ecd;&#x7136;&#x4f20;&#x9012",{"_index":3053,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x76ee;&#x524d",{"_index":1003,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x76ee;&#x524d;&#x6211;&#x4eec;&#x5df2;&#x7ecf;&#x89c1;&#x8fc7;&#x4e00;&#x822c;&#x7684;&#x7c7b;&#x578b;&#x548c;haxe&#x7a0b;&#x5e8f;&#x5982;&#x4f55;&#x6784;&#x9020;&#x7684;&#x3002;&#x8fd9;&#x8282;&#x5173;&#x4e8e;&#x7c7b;&#x5b57;&#x6bb5;&#x7684;&#x5c06;&#x5bf9;&#x6784;&#x9020;&#x90e8;&#x5206;&#x505a;&#x51fa;&#x7ed3;&#x8bba;&#xff0c;&#x540c;&#x65f6;&#x901a;&#x5f80;haxe&#x7684;&#x884c;&#x4e3a;&#x90e8;&#x5206;&#x3002;&#x8fd9;&#x662f;&#x56e0;&#x4e3a;&#x7c7b;&#x5b57;&#x6bb5;&#x662f;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x5bb6;&#x3002",{"_index":216,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{}}}],["x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002",{"_index":1158,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x5728;&#x672c;&#x6587;&#x6863;&#x4e2d;&#x6211;&#x4eec;&#x5b9a;&#x4e49;&#x4e86;&#x4e00;&#x7ec4;&#x672f;&#x8bed;&#x3002;&#x4e3b;&#x8981;&#x7528;&#x4e8e;&#x5f15;&#x5165;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x7c7b;&#x578b;&#x6216;&#x8005;&#x4e00;&#x4e2a",{"_index":1077,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x76ee;&#x6807;&#x5e73;&#x53f0;&#x4e5f;&#x627e;&#x5230;&#x52a0;&#x5165;&#x5230",{"_index":1169,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x76ee;&#x6807;&#x5e73;&#x53f0;&#x7684;&#x8f93;&#x51fa;&#x7528;&#x4f5c;&#x89e3;&#x91ca;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x5728;&#x672c;&#x6587;&#x6863;&#x4e2d;&#x6211;&#x4eec;&#x5b9a;&#x4e49;&#x4e86;&#x4e00;&#x7ec4;&#x672f;&#x8bed;&#x3002;&#x4e3b;&#x8981;&#x7528;&#x4e8e;&#x5f15;&#x5165;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x7c7b;&#x578b;&#x6216;&#x662f;&#x4e00;&#x4e2a",{"_index":27,"title":{},"body":{"index.html#关于本文档":{}}}],["x76ee;&#x6807;&#x5e73;&#x53f0;&#x7ec6;&#x8282;&#xff08;&#x7b2c;12&#x7ae0;&#xff09",{"_index":1043,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x76ee;&#x6807;&#x5e73;&#x53f0;&#xff0c;&#x5728;2007&#x5e74;3&#x6708;&#x589e;&#x52a0;&#x7684;&#x5bf9",{"_index":1149,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x76ee;&#x6807;&#x5e73;&#x53f0;&#xff0c;&#x8fd9;&#x8981;&#x611f;&#x8c22;franco",{"_index":1154,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x76ee;&#x6807;&#x7684;&#x652f;&#x6301;&#x3002;&#x8fd9;&#x51e0;&#x4e2a;&#x6708;&#x91cc;&#xff0c;hax",{"_index":1150,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#x3002",{"_index":2671,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#x662f;&#x6b63;&#x786e;&#x7684;&#x3002",{"_index":2666,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x76ee;&#x6807;&#x8bed;&#x8a00;&#x539f;&#x751f;&#x7684;&#x3002",{"_index":3456,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x76ee;&#x6807;&#x8bed;&#x8a00;&#x53ef;&#x4ee5;&#x7406;&#x89e3;&#x5b83;&#x7684;&#x610f;&#x601d;&#x3002;&#x7136;&#x800c;&#xff0c;&#x5bf9;&#x4e8e;&#x5b8f;&#x7684;&#x4f5c;&#x8005;&#x548c;&#x65b0;&#x7684",{"_index":3458,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x76ee;&#x6807;&#x8bed;&#x8a00;&#x53ef;&#x80fd;&#x662f;&#x5f88;&#x6709;&#x8da3;&#x7684;&#x7528;&#x4f8b;&#x3002",{"_index":3459,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x76ee;&#x6807;&#xff09",{"_index":1914,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x76f4;&#x63a5;&#x8f6c;&#x6362;&#xff1a",{"_index":3229,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x76f4;&#x89c2;&#x7684;&#x8bf4;&#xff0c;&#x8fd9;&#x662f;&#x56e0;&#x4e3a;&#x53c2;&#x6570;&#x88ab;&#x201c;&#x5199;&#x5165;&#x201d;&#x5230;&#x51fd;&#x6570;&#x4e2d;&#xff0c;&#x800c;&#x8fd4;&#x56de;&#x503c;&#x662f;&#x4ece;&#x51fd;&#x6570;&#x4e2d;&#x201c;&#x8bfb;&#x53d6;&#x201d;&#x3002",{"_index":4602,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["x76f8;&#x7b49",{"_index":2525,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x7701;&#x7565;&#x53ef;&#x89c1;&#x6027;&#x7684;&#x4fee;&#x9970;&#x7b26;&#x901a;&#x5e38;&#x9ed8;&#x8ba4;&#x53ef;&#x89c1;&#x6027;&#x4e3a",{"_index":4643,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x770b;&#x4e00;&#x4e0b;javascript&#x7684;&#x8f93;&#x51fa;&#xff0c;&#x63ed;&#x793a;&#x4e86;&#x6548;&#x679c;&#xff1a",{"_index":5368,"title":{},"body":{"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["x770b;&#x4e91;&#x4e0a;&#x524d;&#x4eba;&#x7ffb;&#x8bd1;&#x8fc7;&#x7684;&#x4e00;&#x4efd",{"_index":15,"title":{},"body":{"index.html#关于本文档":{}}}],["x7834;&#x574f;&#x6027;&#x529f;&#x80fd",{"_index":5353,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x786e;&#x4fdd;&#x53ef;&#x9009;&#x7684;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x662f;&#x53ef;&#x7a7a;&#x7684;&#x3002;&#x524d;&#x4e09;&#x4e2a;&#x8c03;&#x7528;&#x975e;&#x5e38;&#x76f4;&#x89c2;&#xff0c;&#x7b2c;&#x56db;&#x4e2a;&#x53ef;&#x80fd;&#x662f;&#x4e00;&#x4e2a;&#x60ca;&#x559c;&#xff1a;&#x5982;&#x679c;&#x63d0;&#x4f9b;&#x7684;&#x503c;&#x53ef;&#x4ee5;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a;&#x4e4b;&#x540e;&#x7684;&#x53c2;&#x6570;&#xff0c;&#x786e;&#x5b9e;&#x5141;&#x8bb8;&#x8df3;&#x8fc7;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x3002",{"_index":3041,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x786e;&#x5b9a;&#x662f;&#x5426;&#x53ef;&#x8fed;&#x4ee3;&#x5bf9;&#x8c61;&#x4e3a;&#x7a7a;&#x3002;&#x5bf9;&#x4e8e;&#x6240;&#x6709;&#x53ef;&#x8fed;&#x4ee3;&#x5bf9;&#x8c61;&#x6700;&#x597d;&#x4f7f;&#x7528;&#x8fd9;&#x4e2a;&#x51fd;&#x6570;&#xff1b;&#x4e5f;&#x5feb;&#x4e8e;&#x5bf9;&#x6bd4;length&#x5c5e;&#x6027;&#xff08;&#x6216;&#x8005",{"_index":2034,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x786e;&#x5b9a;&#x662f;&#x5426;&#x6761;&#x4ef6;&#x662f;&#x53ef;&#x4ee5;&#x88ab;&#x4e00;&#x4e2a;&#x5143;&#x7d20;&#x6ee1;&#x8db3;&#x7684;&#x3002",{"_index":2037,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x786e;&#x5b9a;&#x662f;&#x5426;&#x6bcf;&#x4e2a;&#x5143;&#x7d20;&#x6ee1;&#x8db3;&#x4e00;&#x4e2a;&#x6761;&#x4ef6;&#x3002",{"_index":2040,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x786e;&#x5b9a;&#x662f;&#x5426;&#x7279;&#x5b9a;&#x5143;&#x7d20;&#x5b58;&#x5728;&#x4e8e;&#x53ef;&#x8fed;&#x4ee3;&#x5bf9;&#x8c61;&#x4e2d;&#x3002",{"_index":2036,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x793a;&#x4f8b;&#x4e2d;&#x7684",{"_index":3314,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x793a;&#x4f8b;&#x4e5f;&#x5c55;&#x793a;&#x4e86;&#x5982;&#x4f55;&#x6539;&#x53d8;&#x53ef;&#x89c1;&#x6027;&#xff08;&#x7b2c;4.4.1&#x8282;&#xff09;&#xff1a;&#x4e00;&#x4e2a;&#x91cd;&#x8f7d;&#x7684;&#x5b57;&#x6bb5;&#x53ef;&#x80fd;&#x662f",{"_index":4606,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["x79c1;&#x6709;&#xff08;&#x7b2c;3.7.1&#x8282;&#xff09;&#x3002",{"_index":6199,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x79fb;&#x9664;/&#x6539;&#x53d8;&#xff0c",{"_index":966,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x7a0b;&#x5e8f;&#x4e2d;&#x4e3b;&#x8981;&#x7684;&#x6570;&#x636e;&#x7ed3;&#x6784;&#x3002;&#x6bcf;&#x4e2a",{"_index":2792,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x7a0b;&#x5e8f;&#x4f7f;&#x7528;&#x7c7b;&#xff08;main&#xff0c;&#x9996;&#x5b57;&#x6bcd;&#x5927;&#x5199;&#xff09;&#xff0c;&#x7c7b;&#x4e2d;&#x5305;&#x542b;&#x51fd;&#x6570;&#xff08;main&#xff0c;&#x9996;&#x5b57;&#x6bcd;&#x5c0f;&#x5199;&#xff09",{"_index":1195,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x7a0b;&#x5e8f;&#x7684;&#x6a21;&#x6837;&#xff0c;&#x548c;&#x81ea;2005&#x5e74;&#x5f00;&#x59cb;&#x4ee5;&#x6765;&#x7684;&#x8fdb;&#x5316;&#x3002",{"_index":1010,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7a0b;&#x5e8f;&#x88ab;&#x4fdd;&#x5b58;&#x4e3a",{"_index":1191,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x7a77;&#x5c3d;&#x6027;&#x68c0;&#x67e5",{"_index":5716,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x7a77;&#x5c3d;&#x6027;&#xff08;&#x7b2c;6.4.10&#x8282;&#xff09",{"_index":3418,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x7ae0;&#x8282;&#x8fdb;&#x4e00;&#x6b65;&#x63a2;&#x7d22;&#x3002",{"_index":2892,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x7b26;&#x53f7;&#x4e2d;&#xff1a",{"_index":1883,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x7b26;&#x53f7;&#x4e4b;&#x540",{"_index":3084,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7b26;&#x53f7;&#x5206;&#x522b;&#x53d8;&#x6210",{"_index":5915,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x7b26;&#x53f7;&#x5206;&#x683c;&#x6bcf;&#x4e00;&#x4e2a;&#x6b32;&#x6269;&#x5c55;&#x7684;&#x7ed3;&#x6784;&#x6765;&#x8868;&#x793a;&#x3002",{"_index":2981,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x7b26;&#x53f7;&#x540e;&#x9762;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x662f;&#x8d44;&#x6e90;&#x6807;&#x8bc6;&#x7b26;&#xff0c;&#x7528;&#x5728;&#x4ee3;&#x7801;&#x4e2d;&#x7528;&#x4e8e;&#x68c0;&#x7d22;&#x8d44;&#x6e90;&#x3002;&#x5982;&#x679c;&#x5b83;&#x88ab;&#x7701;&#x7565;&#xff08;&#x5305;&#x62ec;@&#x7b26;&#x53f7;&#x4e00;&#x8d77;&#xff09;&#x90a3;&#x4e48;&#x6587;&#x4ef6;&#x540d;&#x5219;&#x6210;&#x4e3a;&#x8d44;&#x6e90;&#x6807;&#x8bc6;&#x7b26;&#x3002",{"_index":6120,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html#8-4-1-嵌入资源":{}}}],["x7b26;&#x53f7;&#x89e6;&#x53d1;&#xff1a",{"_index":6375,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x662f;&#x6b63;&#x5219;&#x8868;&#x8fbe;&#x5f0f;&#x6a21;&#x5f0f;&#x5b57;&#x7b26;&#x4e32;&#xff0c;&#x7b2c;&#x4e8c;&#x4e2a;&#x662f;&#x6807;&#x8bb0;&#x5b57;&#x7b26;&#x4e32;&#xff08;&#x540e;&#x9762;&#x67e5;&#x770b;&#xff09;&#x3002",{"_index":1886,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x7b2c;&#x4e00;&#x4e2a;&#x60c5;&#x51b5;&#x6709;&#x4e00;&#x4e2a;&#x9644;&#x52a0;&#x7684;&#x5b88;&#x62a4;&#x6761;&#x4ef6",{"_index":5598,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["x7b2c;&#x4e00;&#x6b21;&#x8c03;&#x7528",{"_index":4736,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["x7b2c;&#x4e00;&#x6b21;&#x8c03;&#x7528;&#x4e0d;&#x5e26;&#x4efb;&#x4f55;&#x53c2;&#x6570",{"_index":3028,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7b2c;&#x4e00;&#x90e8;&#x5206;&#x4f59;&#x4e0b;&#x7684;&#x5185;&#x5bb9;&#x7b80;&#x8981;&#x6982;&#x8ff0;&#x4e86",{"_index":1008,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7b2c;&#x4e09;&#x6b21;&#x8c03;&#x7528;&#x5e26;&#x4e86;&#x4e24;&#x4e2a;&#x53c2;&#x6570",{"_index":3030,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7b2c;&#x4e8c;&#x4e2a;&#x95ee;&#x9898;&#x901a;&#x5e38;&#x5f52;&#x7ed3;&#x8981;&#x63d0;&#x4f9b;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7684;&#x63cf;&#x8ff0;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x53c2;&#x6570;&#x3002;&#x6bcf;&#x4e2a;haxe&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x90fd;&#x6709;&#x4e00;&#x4e2a;&#x4e13;&#x7528;&#x7684;&#x547d;&#x4ee4;&#x884c;&#x5f00;&#x5173;&#xff0c;&#x4f8b;&#x5982",{"_index":715,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x7b2c;&#x4e8c;&#x6b21;&#x8c03;&#x7528;&#x5e26;&#x6709;&#x4e00;&#x4e2a;&#x5355;&#x72ec;&#x7684;&#x53c2;&#x6570",{"_index":3029,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7b2c;&#x56db;&#x6b21;&#x8c03;&#x7528;&#x53ea;&#x6709;&#x5355;&#x72ec;&#x7684;&#x53c2;&#x6570",{"_index":3031,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7b2c;4&#x884c;&#x7ed1;&#x5b9a;&#x51fd;&#x6570",{"_index":5777,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x7b97;&#x672f;&#x8fd0;&#x7b97;&#x7b26",{"_index":2510,"title":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}},"body":{}}],["x7c7b",{"_index":955,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x7c7b;&#x3002",{"_index":2780,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7c7b;&#x3002;&#x53ea;&#x7528;&#x4e8e;flash8",{"_index":1448,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x7c7b;&#x3002;&#x90fd;&#x652f;&#x6301;&#x4e24;&#x79cd;&#x7528;&#x6cd5;&#xff1a",{"_index":2418,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x7c7b;&#x3002;haxe&#x63d0;&#x4f9b;&#x58f0;&#x660e;&#x8fd9;&#x6837;&#x7684;&#x4f9d;&#x8d56;&#x5173;&#x7cfb;&#x5728;&#x5404;&#x81ea;&#x7684;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x5411;&#x7ec6;&#x8282;&#xff08;&#x7b2c;12&#x7ae0;&#xff09;&#x7684;&#x65b9;&#x5f0f;&#x3002;&#x3002",{"_index":5410,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x7c7b;&#x4e0a",{"_index":6593,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x7c7b;&#x4e2d;&#x7684;&#x65b9;&#x6cd5;&#x3002",{"_index":2020,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x7c7b;&#x4f3c;&#x4e8e;&#x7c7b;&#x548c;&#x5b83;&#x4eec;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff0c;&#x679a;&#x4e3e;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x7684;&#x4e00;&#x4e2a;&#x6784;&#x9020;&#x51fd;&#x6570;&#x63d0;&#x4f9b;&#x4e86;&#x4e00;&#x79cd;&#x5b9e;&#x4f8b;&#x5316;&#x65b9;&#x5f0f;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4e0e;&#x7c7b;&#x4e0d;&#x540c;&#xff0c;&#x679a;&#x4e3e;&#x63d0;&#x4f9b;&#x4e86;&#x591a;&#x4e2a;&#x53ef;&#x4ee5;&#x7b80;&#x5355;&#x7684;&#x901a;&#x8fc7;&#x5b83;&#x4eec;&#x7684;&#x540d;&#x5b57;&#x4f7f;&#x7528;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff1a",{"_index":2827,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x7c7b;&#x4f3c;&#x4e8e;&#x901a;&#x8fc7",{"_index":3311,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x7c7b;&#x4f3c;&#x7684;&#xff0c;&#x6dfb;&#x52a0",{"_index":3250,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7c7b;&#x4f3c;&#xff0c;&#xff1a",{"_index":3382,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7c7b;&#x4f7f;&#x7528",{"_index":2456,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x7c7b;&#x5141;&#x8bb8;&#x6211;&#x4eec;&#x4e00;&#x6b21;&#x64cd;&#x4f5c;&#x4e00;&#x6574;&#x4e2a;&#x8fed;&#x4ee3;&#x3002;&#x8fd9;&#x901a;&#x5e38;&#x662f;&#x66f4;&#x597d;&#x7684;&#x5faa;&#x73af;&#x65b9;&#x5f0f;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x4e0d;&#x592a;&#x5bb9;&#x6613;&#x51fa;&#x9519;&#xff0c;&#x5e76;&#x4e14;&#x66f4;&#x6613;&#x8bfb;&#x53d6;&#x3002;&#x65b9;&#x4fbf;&#x8d77;&#x89c1;&#xff0c;array",{"_index":2018,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x7c7b;&#x5185;&#x7f6e;&#x63d0;&#x4f9b;&#x5bf9;&#x4f7f;&#x7528;xml&#x6570;&#x636e;&#x7684;&#x652f;&#x6301;&#x3002",{"_index":2475,"title":{},"body":{"10.标准库/10.9.Xml/10.9.Xml.html#10-9-Xml":{}}}],["x7c7b;&#x5185;&#x7f6e;&#x652f;&#x6301;&#xff08;&#x53cd;&#xff09;&#x5e8f;&#x5217;&#x5316",{"_index":1345,"title":{},"body":{"10.标准库/10.10.Json/10.10.Json.html#10-10-Json":{}}}],["x7c7b;&#x5206;&#x914d;&#x5230;&#x5176;&#x6240;&#x5b9e;&#x73b0;&#x7684;&#x63a5;&#x53e3",{"_index":3758,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x7c7b;&#x5305;&#x542b;&#x4e00;&#x4e9b;&#x9891;&#x7e41;&#x4f7f;&#x7528;&#x7684;lambda",{"_index":2019,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x7c7b;&#x53ef;&#x4ee5",{"_index":3109,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x7c7b;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x786e;&#x4fdd;&#x6b63;&#x786e;&#x7684;&#x6ea2;&#x51fa;&#x884c;&#x4e3a;&#xff0c;&#x4e0e;&#x5e73;&#x53f0;&#x65e0;&#x5173;&#xff0c;&#x800c;&#x989d;&#x5916;&#x7684;&#x8ba1;&#x7b97;&#x6210;&#x672c;&#x53d6;&#x51b3;&#x4e8e;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002",{"_index":2560,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["x7c7b;&#x53ef;&#x4ee5;&#x7ee7;&#x627f;&#x81ea;&#x5176;&#x5b83;&#x7684;&#x7c7b;&#xff0c;&#x5728",{"_index":2764,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7c7b;&#x53ef;&#x4ee5;&#x8bbf;&#x95ee;&#x5b83;&#x91cd;&#x8f7d;&#x7684;&#x65b9;&#x6cd5;&#xff0c;&#x901a;&#x8fc7;&#x8c03;&#x7528",{"_index":4475,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["x7c7b;&#x548c;&#x679a;&#x4e3e;&#x7684;&#x58f0;&#x660",{"_index":5812,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x7c7b;&#x578b",{"_index":1268,"title":{},"body":{"10.标准库/10.1.字符串/10.1.字符串.html#10-1-字符串":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["x7c7b;&#x578b;&#x3002",{"_index":2380,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["x7c7b;&#x578b;&#x3002;&#x8fd9;&#x5728;&#x7b2c;9&#x548c;10&#x884c;&#x5c55;&#x793a;&#xff0c;&#x7b2c;&#x4e00;&#x4e2a;&#x5206;&#x914d",{"_index":3239,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7c7b;&#x578b;&#x4e14;&#x540d;&#x4e3a",{"_index":3605,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x7c7b;&#x578b;&#x4e3a",{"_index":5782,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x7c7b;&#x578b;&#x4e5f;&#x4e0d;&#x884c",{"_index":3879,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#x4e86",{"_index":4059,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7c7b;&#x578b;&#x4ee5;&#x4e00;&#x79cd;&#x7279;&#x6b8a;&#x7684;&#x65b9;&#x5f0f;&#x8fd0;&#x884c;&#x3002;&#x5355;&#x5f62;&#x6ca1;&#x6709;&#x7ed1;&#x5b9a;&#x5230",{"_index":3166,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x4f7f;&#x7528;&#xff0c",{"_index":3142,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x503c;&#x3002;&#x5982;&#x679c;&#x8c03;&#x7528;&#x8fd9;&#x4e2a;&#x51fd;&#x6570;&#xff0c;&#x4f8b;&#x5982",{"_index":3089,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x5143;&#x7d20;&#x4e4b;&#x540e;&#x624d;&#x77e5;&#x9053;&#x5176;&#x7c7b;&#x578b;&#x4e3a",{"_index":4069,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7c7b;&#x578b;&#x5173;&#x95ed;&#x3002;&#x4e00;&#x4e2a",{"_index":3136,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x5177;&#x4f53;&#x5316;&#x7528;&#x4e8e;&#x4ee5;&#x4e00;&#x4e2a;&#x7b80;&#x4fbf;&#x7684;&#x65b9;&#x5f0f;&#x521b;&#x5efa",{"_index":6411,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["x7c7b;&#x578b;&#x5230;&#x4e00;&#x4e2a",{"_index":2501,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;&#x5316;&#x4e3a",{"_index":5092,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["x7c7b;&#x578b;&#x5316;&#x8868;&#x8fbe;&#x5f0f;&#x56de;&#x5230;&#x4e00;&#x4e2a",{"_index":6627,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":4241,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{},"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570;&#x3001;&#x7ea6;&#x675f;&#x548c;&#x53d8;&#x5f02",{"_index":570,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570;&#x3002;&#x8c03;&#x7528;&#x7684;&#x7c7b;&#x578b;&#x7136;&#x540e;&#x5c31;&#x4f1a;&#x548c",{"_index":3095,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x591a;&#x79cd;&#x7c7b;&#x578b;&#x88ab;&#x7ea6;&#x675f;&#xff1a",{"_index":3594,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570;&#x5fc5;&#x987b;&#x53ea;&#x80fd;&#x4e3a",{"_index":4980,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x7b2c;3.2&#x8282;&#xff09",{"_index":115,"title":{},"body":{"2.类型/2.类型.html#2-类型":{},"3.类型系统/3.类型系统.html#3-类型系统":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570;&#xff0c;&#x7136;&#x540e;&#x68c0;&#x67e5",{"_index":3094,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x53d8;&#x91cf",{"_index":3245,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7c7b;&#x578b;&#x53d8;&#x91cf;&#x5b57;&#x6bb5",{"_index":2802,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x7c7b;&#x578b;&#x53d8;&#x91cf;&#x65f6;&#xff0c;&#x4f1a;&#x5bfc;&#x81f4;&#x7f16;&#x8bd1;&#x5668;&#x5c1d;&#x8bd5",{"_index":3941,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x6765;&#x53c2;&#x6570;&#x5316;&#xff0c;&#x4f7f;&#x7c7b;&#x578b;&#x5316;&#x7684;&#x5bb9;&#x5668;&#x548c;&#x5176;&#x5b83;&#x590d;&#x6742;&#x7684;&#x6570;&#x636e;&#x7ed3;&#x6784;&#x53ef;&#x7528;&#x3002;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x7ea6;&#x675f;&#x4e3a;&#x67d0;&#x4e9b;&#x7c7b;&#x578b;&#x5e76;&#x9075;&#x5b88;&#x53d8;&#x5f02;&#x89c4;&#x5219;&#x3002",{"_index":572,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x7c7b;&#x578b;&#x53ef;&#x80fd;&#x4f1a;&#x4e22;&#x5931;&#x7cbe;&#x5ea6;&#xff0c;&#x662f;&#x4e0d;&#x88ab;&#x9690;&#x5f0f;&#x7684;&#x5141;&#x8bb8;&#x7684;&#x3002",{"_index":2502,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;&#x53ef;&#x80fd;&#x5f15;&#x53d1;&#x8fd0;&#x884c;&#x65f6;&#x9519;&#x8bef;&#x7684;&#x4f8b;&#x5b50;&#x975e;&#x5e38;&#x5bb9;&#x6613;&#x51fa;&#x73b0;&#x3002;&#x601d;&#x8003;&#x4e0b;&#x9762;&#x7684;&#x4e24;&#x884c;&#x4ee3;&#x7801;&#x5230;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x7f16;&#x8bd1;&#xff1a",{"_index":3145,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x540d",{"_index":4240,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x7c7b;&#x578b;&#x540d;&#x5fc5;&#x987b;&#x4f7f;&#x7528;&#x5927;&#x5199;&#x7684;&#x5b57;&#x6bcd;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x4e0b;&#x5212;&#x7ebf;&#x5f00;&#x59cb;&#x3002",{"_index":316,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["x7c7b;&#x578b;&#x5728",{"_index":3180,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x5c5e;&#x6027",{"_index":2976,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x7c7b;&#x578b;&#x5de5;&#x5177;&#x53ef;&#x4ee5;&#x786e;&#x4fdd;&#x96c6;&#x5408;&#x7684;&#x6240;&#x6709;&#x503c;&#x4f1a;&#x88ab;&#x6b63;&#x786e;&#x5206;&#x914d;&#x7c7b;&#x578b;&#x3002",{"_index":3414,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x7c7b;&#x578b;&#x5de5;&#x5177;&#x786e;&#x4fdd",{"_index":4872,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["x7c7b;&#x578b;&#x5de5;&#x5177;&#x786e;&#x4fdd;&#x5b83;&#x53ea;&#x51fa;&#x73b0;&#x5728;&#x4e00;&#x4e2a;&#x5faa;&#x73af;&#x4e2d;&#x3002;break&#x5173;&#x952e;&#x5b57;&#x5728;haxe&#x5e76;&#x4e0d;&#x652f;&#x6301;&#x7528;&#x4e8",{"_index":5049,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["x7c7b;&#x578b;&#x5de5;&#x5177;&#x786e;&#x4fdd;&#x5b83;&#x53ea;&#x51fa;&#x73b0;&#x5728;&#x5faa;&#x73af;&#x4e2d;&#x3002",{"_index":5056,"title":{},"body":{"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{}}}],["x7c7b;&#x578b;&#x5e94;&#x7528;&#x8fd9;&#x79cd;&#x65b9;&#x5f0f;&#xff0c;&#x5176;&#x4e2d;&#x4e0b;&#x9762;&#x4e24;&#x4e2a;&#x65b9;&#x6cd5;&#x53ef;&#x4ee5;&#x88ab;&#x53d1;&#x73b0;&#xff1a",{"_index":3354,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7c7b;&#x578b;&#x5fc5;&#x987b;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x5b58;&#x5728;&#xff1a;&#x7c7b;&#x5b9e;&#x4f8b;&#xff08;&#x7b2c;2.3&#x8282;&#xff09;&#xff0c;enum&#x5b9e;&#x4f8b;&#xff08;&#x7b2c;2.4&#x8282;&#xff09;&#xff0c;&#x62bd;&#x8c61;&#x6838;&#x5fc3;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.8.7&#x8282;&#xff09;&#x548c",{"_index":4978,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["x7c7b;&#x578b;&#x6240;&#x5c55;&#x793a;&#x7684;&#xff1a",{"_index":3630,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7c7b;&#x578b;&#x63a8;&#x65ad",{"_index":3153,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x63a8;&#x65ad;&#x5728;&#x4f7f;&#x7528;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x7684;&#x65f6;&#x5019;&#x8282;&#x7701;&#x4e86;&#x5927;&#x91cf;&#x624b;&#x52a8;&#x7c7b;&#x578b;&#x5316;&#xff0c;&#x4f46;&#x662f;&#x6709;&#x65f6;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x4ecd;&#x7136;&#x9700;&#x8981;&#x4e00;&#x4e9b;&#x5e2e;&#x52a9;&#x3002;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;&#x5b83;&#x751a;&#x81f3;&#x4e0d;&#x5c1d;&#x8bd5;&#x63a8;&#x65ad;&#x53d8;&#x91cf;&#xff08;&#x7b2c;4.1&#x8282;&#xff09;&#x6216;&#x8005;&#x5c5e;&#x6027;&#xff08;&#x7b2c;4.2&#x8282;&#xff09;&#x5b57;&#x6bb5;&#xff0c;&#x9664;&#x975e;&#x5b83;&#x6709;&#x4e00;&#x4e2a;&#x76f4;&#x63a5;&#x7684;&#x521d;&#x59cb;&#x5316;&#x3002",{"_index":4088,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["x7c7b;&#x578b;&#x63a8;&#x65ad;&#x7684;&#x6548;&#x679c;&#x5c06;&#x4f1a;&#x9891;&#x7e41;&#x51fa;&#x73b0;&#x4e8e;&#x6574;&#x4e2a;&#x6587;&#x6863;&#x4e2d;&#x3002;&#x4e00;&#x4e2a;&#x4f8b;&#x5b50;&#x53ef;&#x4ee5;&#x5c55;&#x793a;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff1a",{"_index":4042,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6&#x8282;&#xff09",{"_index":98,"title":{},"body":{"2.类型/2.类型.html#2-类型":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;3.6&#xff09;&#x4e2d;&#x8fdb;&#x884c;&#x89e3;&#x91ca;&#x3002",{"_index":3576,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["x7c7b;&#x578b;&#x6765;&#x5141;&#x8bb8",{"_index":2692,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x7c7b;&#x578b;&#x6784;&#x5efa;&#x5b8f;&#x548c;&#x8868;&#x8fbe;&#x5f0f;&#x5b8f;&#x5728;&#x5f88;&#x591a;&#x65b9;&#x9762;&#x662f;&#x4e0d;&#x540c;&#x7684;&#xff1a",{"_index":6570,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x7c7b;&#x578b;&#x68c0;&#x67e5;&#x5668;&#x68c0;&#x67e5",{"_index":3092,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x68c0;&#x67e5;&#x5668;&#x786e;&#x4fdd;&#x4e00;&#x4e2a;&#x88ab;&#x8bbf;&#x95ee;&#x7684;&#x5b57;&#x6bb5;&#x5b9e;&#x9645;&#x4e0a;&#x5b58;&#x5728;&#xff0c;&#x5e76;&#x53ef;&#x4ee5;&#x5e94;&#x7528;&#x6839;&#x636e;&#x5b57;&#x6bb5;&#x7684;&#x6027;&#x8d28;&#x8fdb;&#x884c;&#x8f6c;&#x6362;&#x3002;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x662f;&#x6a21;&#x7cca;&#x7684;&#xff0c;&#x7406;&#x89e3;&#x89e3;&#x6790;&#x987a;&#x5e8f;&#xff08;&#x7b2c;3.7.3&#xff09;&#x53ef;&#x4ee5;&#x63d0;&#x4f9b;&#x5e2e;&#x52a9;&#x3002",{"_index":5219,"title":{},"body":{"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{}}}],["x7c7b;&#x578b;&#x7684",{"_index":2906,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7c7b;&#x578b;&#x7684;&#x503c;&#x7ecf;&#x5e38;&#x51fa;&#x73b0;&#x5728;&#x6761;&#x4ef6;&#x4e2d;&#xff0c;&#x4f8b;&#x5982",{"_index":2569,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x503c;&#x7ed9;&#x4e00;&#x4e2a",{"_index":3940,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7c7b;&#x578b;&#x7684;&#x503c;&#xff1a",{"_index":2571,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x51fa;&#x73b0;&#x5728;&#x901a;&#x5f80",{"_index":3183,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x51fd;&#x6570;&#x53c2;&#x6570",{"_index":2327,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570",{"_index":3534,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4f7f;&#x7528;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x4e5f;&#x53ef;&#x4ee5;&#x5b9a;&#x4e49;&#x81ea;&#x5df1;&#x7684;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x65b9;&#x6cd5;&#x3002",{"_index":3352,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#xff0c;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x4e0d;&#x80fd;&#x68c0;&#x67e5;&#x5728;&#x53c2;&#x6570;&#x4e2d;&#x4f20;&#x9012;&#x7684;&#x662f;&#x4e0d;&#x662f;&#x6b63;&#x786e;&#x7684;&#x3002;&#x5982;&#x4e0b;&#x7684;&#x4f8b;&#x5b50;&#x6f14;&#x793a;&#x4e86;&#x5f53;&#x4f7f;&#x7528",{"_index":2321,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#xff0c;&#x5206;&#x522b;&#x662f",{"_index":2863,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#xff0c;&#x5e76;&#x8fd4;&#x56de;&#x4e00;&#x4e2a",{"_index":3088,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#xff0c;&#x7b2c;&#x4e8c;&#x4e2a",{"_index":3087,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x53d8;&#x91cf",{"_index":3241,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#x7684;&#x53ef;&#x8bbf;&#x95ee;&#x6027;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#xff08;&#x7b2c;6.10&#x8282;&#xff09;&#x8fdb;&#x884c;&#x66f4;&#x7cbe;&#x786e;&#x5730;&#x63a7;&#x5236;&#x3002",{"_index":4127,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x5730;&#x65b9;&#xff08;&#x786e;&#x5207;&#x7684;&#x8bf4;&#xff0c;int",{"_index":2496,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x548c;&#x53d8;&#x91cf;&#xff0c;&#x5982;&#x679c;&#x5c1d;&#x8bd5;&#x8fd9;&#x6837;&#x58f0;&#x660e;&#xff0c;&#x5b83;&#x4f1a;&#x53d1;&#x51fa;&#x62b1;&#x6028;&#xff1a",{"_index":2605,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x5b57;&#x9762;&#x503c;&#x8d4b;&#x503c;&#x5230;&#x53d8;&#x91cf",{"_index":4054,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7c7b;&#x578b;&#x7684;&#x6269;&#x5c55;&#x3002",{"_index":2014,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{}}}],["x7c7b;&#x578b;&#x7684;&#x6587;&#x6863;&#x3002;&#x8fd9;&#x4e2a;&#x4fe1;&#x606f;&#x53ea;&#x6709;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#xff08;&#x7b2c;6.1&#x8282;&#xff09",{"_index":6196,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x7c7b;&#x578b;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x51fd;&#x6570",{"_index":3307,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x7c7b;&#x578b;&#x7684;&#x6784;&#x5efa;&#x987a;&#x5e8f;&#x662f;&#x4e0d;&#x786e;&#x5b9a;&#x7684;&#xff0c;&#x8fd9;&#x5ef6;&#x4f38;&#x5230;&#x6784;&#x5efa;&#x5b8f;&#x7684;&#x6267;&#x884c;&#x987a;&#x5e8f;&#x3002;&#x867d;&#x7136;&#x53ef;&#x4ee5;&#x786e;&#x5b9a;&#x4e00;&#x4e9b;&#x89c4;&#x5219;&#xff0c;&#x6211;&#x4eec;&#x5f3a;&#x70c8;&#x5efa;&#x8bae;&#x4e0d;&#x8981;&#x4f9d;&#x8d56;&#x6784;&#x5efa;&#x5b8f;&#x7684;&#x6267;&#x884c;&#x987a;&#x5e8f;&#x3002;&#x5982;&#x679c;&#x7c7b;&#x578b;&#x6784;&#x5efa;&#x9700;&#x8981;&#x591a;&#x6b21;&#x4f20;&#x9012;&#xff0c;&#x8fd9;&#x5e94;&#x8be5;&#x88ab;&#x76f4;&#x63a5;&#x53cd;&#x6620;&#x5230;&#x5b8f;&#x4ee3;&#x7801;&#x4e2d;&#x3002;&#x4e3a;&#x4e86;&#x907f;&#x514d;&#x76f8;&#x540c;&#x7c7b;&#x578b;&#x591a;&#x6b21;&#x6267;&#x884c;&#x6784;&#x5efa;&#x5b8f;&#xff0c;&#x72b6;&#x6001;&#x53ef;&#x4ee5;&#x88ab;&#x5b58;&#x50a8;&#x5230;&#x9759;&#x6001;&#x53d8;&#x91cf;&#x6216;&#x8005;&#x6dfb;&#x52a0;&#x4e3a;&#x5143;&#x6570;&#x636e;&#x5230;&#x6d89;&#x53ca;&#x5230;&#x7684;&#x7c7b;&#x578b;&#xff1a",{"_index":6638,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["x7c7b;&#x578b;&#x7684;&#x6a21;&#x5757",{"_index":6098,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x7c7b;&#x578b;&#x7684;&#x70b9;&#x8def;&#x5f84;&#x7531;&#x5305;&#xff0c;&#x6a21;&#x5757;&#x540d;&#x548c;&#x7c7b;&#x578b;&#x540d;&#x7ec4;&#x6210;&#x3002;&#x5b83;&#x7684;&#x901a;&#x5e38;&#x683c;&#x5f0f;&#x662f",{"_index":4249,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x7c7b;&#x578b;&#x7684;&#xff0c;&#x4f46;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x628a;&#x5b83;&#x5206;&#x914d;&#x7ed9",{"_index":3886,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x53ef;&#x4ee5;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x68c0;&#x6d4b;&#x90a3;&#x4e9b;&#x53ef;&#x80fd;&#x53ea;&#x5728;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x8fd0;&#x884c;&#x65f6;&#x624d;&#x88ab;&#x6ce8;&#x610f;&#x5230;&#x7684;&#x9519;&#x8bef;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x7c7b;&#x578b;&#x4fe1;&#x606f;&#x53ef;&#x4ee5;&#x88ab;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x751f;&#x6210;&#x5668;&#x7528;&#x6765;&#x751f;&#x6210;&#x4f18;&#x5316;&#x7684;&#x3001;&#x5065;&#x58ee;&#x7684;&#x4ee3;&#x7801;&#x3002",{"_index":1002,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x63d0;&#x4f9b;&#x4e00;&#x4e2a;&#x548c;&#x6240;&#x6709;&#x7684;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x7edf;&#x4e00;&#x7684;&#x7c7b;&#x578b;&#xff1a",{"_index":2864,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x7684;&#x6301;&#x7eed;&#x6539;&#x8fdb;&#xff0c;dynam",{"_index":3182,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x7684;&#x6838;&#x5fc3;&#xff0c;&#x5176;&#x4e3a;haxe&#x7a0b;&#x5e8f;&#x6781;&#x5927;&#x5730;&#x63d0;&#x5347;&#x4e86;&#x5065;&#x58ee;&#x6027;&#xff08;&#x6216;&#x79f0;&#x9c81;&#x68d2;&#x6027;&#xff09;&#x3002;&#x5b83;&#x63cf;&#x8ff0;&#x4e86;&#x67d0;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x4e0e;&#x53e6;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x662f;&#x5426;&#x517c;&#x5bb9;&#x7684;&#x8fc7;&#x7a0b;&#x3002",{"_index":3929,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7c7b;&#x578b;&#x7cfb;&#x7edf;&#xff08;&#x7b2c;3&#x7ae0;&#xff09",{"_index":1013,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7c7b;&#x578b;&#x7ea7;&#x522b;&#x548c;&#x5b57;&#x6bb5;&#x7ea7;&#x522b;&#x88ab;&#x7528;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x5668;&#x5143;&#x6570;&#x636e;&#xff08;&#x7b2c;8.1&#x8282;&#xff09;&#x8fdb;&#x884c;&#x5168;&#x5c40;&#x914d;&#x7f6e;&#x3002",{"_index":6269,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x7c7b;&#x578b;&#x7ed9;&#x51fa;&#x4e00;&#x4e2a;&#x660e;&#x786e;&#x7684;&#x5b9a;&#x4e49;&#x3002;&#x7531;&#x4e8",{"_index":3877,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#x7edf;&#x4e00",{"_index":2499,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;&#x7edf;&#x4e00;&#x3001;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x548c;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x7b49;&#x3002",{"_index":1015,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7c7b;&#x578b;&#x8868;&#x793a;&#x4e00;&#x4e2a;&#x975",{"_index":2566,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7c7b;&#x578b;&#x88ab;&#x6ce8;&#x89e3;&#x7684;&#x5143;&#x6570;&#x636e;&#x3002",{"_index":6201,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x7c7b;&#x578b;&#x8def;&#x5f84",{"_index":4247,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x7c7b;&#x578b;&#x8def;&#x5f84;&#x5b8c;&#x6210",{"_index":6125,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["x7c7b;&#x578b;&#x8def;&#x5f84;&#x5b8c;&#x6210;&#x53ef;&#x4ee5;&#x51fa;&#x73b0;&#x5728",{"_index":5985,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["x7c7b;&#x578b;&#x8def;&#x5f84;&#xff08;&#x7b2c;8.3.4&#x8282;&#xff09;&#xff1a;&#x5217;&#x51fa;&#x5b50;&#x5305;&#x3001;&#x5b50;&#x7c7b;&#x578b;&#x548c;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x3002",{"_index":5902,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x7c7b;&#x578b;&#x8f6c;&#x6362;&#xff08;&#x7b2c;5.23&#xff09;&#x4e3a;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x3002;&#x4e5f;&#x4e0d;&#x53ef;&#x80fd;&#x4e3a;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x521b;&#x5efa;&#x65b0;&#x7684;&#x5b9e;&#x4f8b;&#xff0c;&#x9664;&#x975e;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x662f;&#x6cdb;&#x578b;&#xff08;&#x7b2c;3.3&#x8282;&#xff09;&#x5e76;&#x4e14;&#x88ab;&#x76f8;&#x5e94;&#x7684;&#x7ea6;&#x675f;&#x3002",{"_index":3679,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x7c7b;&#x578b;&#x9996;&#x53c2;&#x6570;&#x3002;&#x8fd9;&#x4f7f;&#x5b83;&#x5728;&#x7b2c;14&#x884c;&#x53ef;&#x4ee5;&#x7528;&#x5728;&#x53d8;&#x91cf",{"_index":3385,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7c7b;&#x578b;&#xff08;&#x7b2c;2&#x7ae0;&#xff09",{"_index":126,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7c7b;&#x578b;&#xff08;&#x7b2c;2.1.5&#xff09;&#xff0c;&#x56e0;&#x6b64;&#x9700;&#x8981;&#x5bf9;&#x4f55;&#x79cd;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x7edf;&#x4e00;&#x4e3a",{"_index":3876,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#xff08;&#x7b2c;3.7&#x8282;&#xff09;&#x7684;&#x7c7b;&#x578b;&#x8def;&#x5f84",{"_index":6189,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x7c7b;&#x578b;&#xff0c",{"_index":3979,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7c7b;&#x578b;&#xff0c;&#x4e00;&#x4e2a;&#x5355;&#x5f62;&#x3002;&#x6839;&#x636e;&#x5408;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09;&#x7684;&#x4e00;&#x822c;&#x89c4;&#x5219;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x4e4b;&#x540e;&#x88ab;&#x7ed1;&#x5b9a;&#x4e3a;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#xff0c;&#x4f8b;&#x5982;&#x4f8b;&#x5b50;&#x4e2d;&#x7684",{"_index":5095,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["x7c7b;&#x578b;&#xff0c;&#x4e4b;&#x540e;&#x53ef;&#x80fd;&#x4f1a;&#x6210;&#x4e3a;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b",{"_index":111,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x548c;&#x63d0;&#x4f9b;&#x4efb;&#x610f;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x7684",{"_index":3111,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x7c7b;&#x578b;&#xff0c;&#x56e0;&#x4e3a;&#x5f88;&#x591a;&#x60c5;&#x51b5;&#x4e0b;&#x90fd;&#x6709;&#x66f4;&#x597d;&#x7684;&#x9009;&#x62e9;&#xff0c;&#x4f46;&#x662f;&#x6709;&#x65f6;&#x5019;&#x5b9e;&#x9645;&#x4f1a;&#x7528;&#x5230;&#x5b83;&#x3002;hax",{"_index":3161,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x5982;&#x679c;&#x5230;&#x8fbe;&#x6d6e;&#x70b9;&#x6570;&#x9650;&#x5236;&#xff08;252&#xff09;&#x5219;&#x4f1a;&#x53d1;&#x751f;&#x7cbe;&#x5ea6;&#x7684;&#x635f;&#x5931;&#x3002",{"_index":2558,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["x7c7b;&#x578b;&#xff0c;&#x5b83;&#x5305;&#x542b;&#x4e86;&#x4e24;&#x4e2a",{"_index":2905,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x7c7b;&#x578b;&#xff0c;&#x5c40;&#x90e8;&#x53d8;&#x91cf",{"_index":3171,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x610f;&#x601d;&#x662f;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x7528",{"_index":3237,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7c7b;&#x578b;&#xff0c;&#x6216;&#x8005;&#x4f7f;&#x7528",{"_index":2498,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;&#xff0c;&#x6240;&#x4ee5;&#x5b83;&#x4e0d;&#x4f1a;&#x7f16;&#x8bd1;&#x8f93;&#x51fa;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x5373;&#x4f7f;&#x5b83;&#x770b;&#x5230;&#x8fc7;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#xff0c;&#x4ecd;&#x7136;&#x53ef;&#x80fd;&#x4ece;&#x6709;&#x95ee;&#x9898;&#x53d1;&#x751f;&#xff0c;&#x5728;&#x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664;&#xff08;&#x7b2c;8.2&#x8282;&#xff09;&#x6d88;&#x9664;&#x7684;&#x4ec5;&#x901a;&#x8fc7;&#x53cd;&#x5c04;&#x4f7f;&#x7528;&#x7684;&#x7c7b;&#x578b;&#x6216;&#x5b57;&#x6bb5;&#x3002",{"_index":2318,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x7c7b;&#x578b;&#xff0c;&#x6240;&#x4ee5;&#x7528;&#x6237;&#x5fc5;&#x987b;&#x660e;&#x786e;&#x5b83;&#x3002;&#x4e4b;&#x524d;&#x7684",{"_index":3155,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x7b2c;&#x4e8c;&#x4e2a;&#x53c2;&#x6570;&#x662f;&#x51fd;&#x6570",{"_index":3099,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x800c;&#x4e14;&#x6709;&#x65f6;&#x5019;&#x5b83;&#x662f;&#x5728;&#x5904;&#x7406;&#x7f16;&#x8bd1;&#x65f6;&#x672a;&#x77e5;&#x7684;&#x81ea;&#x5b9a;&#x4e49;&#x6570;&#x636e;&#x7ed3;&#x6784;&#x6700;&#x597d;&#x9009;&#x62e9;&#x3002;&#x5f53;&#x88ab;&#x7528;&#x4e00;&#x4e2a",{"_index":3164,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x8fd4;&#x56de",{"_index":3100,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#xff0c;indexexpr&#x662f;int&#x7c7b;&#x578b",{"_index":5232,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["x7c7b;&#x578b;&#xff1a",{"_index":2490,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;a",{"_index":3931,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7c7b;&#x5b57;&#x6bb5",{"_index":5813,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x7c7b;&#x5b57;&#x6bb5;&#x4fe1;&#x606f;&#xff1a",{"_index":6220,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x7c7b;&#x5b57;&#x6bb5;&#xff08;&#x7b2c;2.8.1&#xff09",{"_index":3312,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x7c7b;&#x5b57;&#x6bb5;&#xff08;&#x7b2c;4&#x7ae0;&#xff09",{"_index":1016,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x7c7b;&#x5b57;&#x6bb5;&#xff1a",{"_index":3231,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7c7b;&#x5b9e;&#x4f8b",{"_index":2269,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x7c7b;&#x5b9e;&#x4f8b;&#x7684;&#x4e00;&#x4e2a;&#x9650;&#x5236;&#x662f;&#xff0c;&#x4e0d;&#x80fd;&#x5339;&#x914d;&#x5b83;&#x4eec;&#x7236;&#x7c7b;&#x7684;&#x5b57;&#x6bb5;&#x3002",{"_index":5591,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["x7c7b;&#x5b9e;&#x4f8b;&#xff08;&#x5e76;&#x4e0d;&#x662f;&#x539f;&#x751f;&#x7684;&#xff09",{"_index":2437,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["x7c7b;&#x5b9e;&#x4f8b;&#xff08;&#x7b2c;2.3&#x8282;&#xff09",{"_index":2715,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x7c7b;&#x5b9e;&#x4f8b;&#xff1a;&#x4e00;&#x4e2a;&#x6307;&#x5b9a;&#x7c7b;&#x6216;&#x8005;&#x63a5;&#x53e3;&#x5bf9;&#x8c61",{"_index":103,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7c7b;&#x5f88;&#x76f8;&#x4f3c;&#xff0c;&#x4f7f;&#x7528;&#x4e86;&#x4e24;&#x4e2a;&#x65b0;&#x7684;&#x90e8;&#x5206;&#xff1a",{"_index":2778,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7c7b;&#x6267;&#x884c;&#x4e24;&#x6b21;&#x3002;&#x6211;&#x4eec;&#x901a;&#x8fc7;&#x6dfb;&#x52a0;&#x4e00;&#x4e2a;&#x81ea;&#x5b9a;&#x4e49;&#x7684",{"_index":6642,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["x7c7b;&#x6587;&#x4ef6;&#x7684;&#x540d;&#x5b57;&#x548c;&#x7c7b;&#x7684;&#x540d;&#x5b57;&#x76f8;&#x540c;&#xff08;&#x672c;&#x4f8b;&#x4e2d;&#x7684",{"_index":1197,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x7c7b;&#x662f;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x65b9;&#x6cd5;&#x7684;&#x96c6;&#x5408;&#xff0c;&#x4ee5;&#x4f7f;haxe&#x4f7f;&#x7528;&#x51fd;&#x6570;&#x98ce;&#x683c;&#x7f16;&#x7a0b;&#x3002",{"_index":2012,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{}}}],["x7c7b;&#x6709;&#x4e00;&#x4e2a;&#x5230",{"_index":2738,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x7c7b;&#x6709;&#x4e09;&#x4e2a;&#x6d4b;&#x8bd5;&#x51fd;&#x6570;&#x3002",{"_index":1562,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{}}}],["x7c7b;&#x6709;&#x4ee5;&#x4e00;&#x4e2a;&#x4eba;&#x7c7b;&#x53ef;&#x8bfb;&#x683c;&#x5f0f;&#x6253;&#x5370;&#x5404;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x7684;&#x516c;&#x5171;&#x65b9;&#x6cd5;&#x3002;&#x5f53;&#x8c03;&#x8bd5;&#x5b8f;&#x7684;&#x65f6;&#x5019;&#x53ef;&#x4ee5;&#x63d0;&#x4f9b;&#x5e2e;&#x52a9;&#x3002",{"_index":6461,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x7c7b;&#x7684;&#x4e00;&#x4e2a;&#x5b9e;&#x4f8b;&#x3002",{"_index":101,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7c7b;&#x7684;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x5b57;&#x6bb5",{"_index":6162,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["x7c7b;&#x7684;&#x4e00;&#x90e8;&#x5206;&#xff1a",{"_index":3845,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x3002",{"_index":2771,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x540c;&#x65f6;&#x4e5f;&#x662f",{"_index":2770,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x901a;&#x8fc7;&#x8c03;&#x7528;&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff08;&#x4e00;&#x4e2a;&#x901a;&#x5e38;&#x79f0;&#x4e3a;&#x5b9e;&#x4f8b;&#x5316;&#x7684;&#x8fc7;&#x7a0b;&#xff09;&#x521b;&#x5efa;&#x3002;&#x7c7b;&#x5b9e;&#x4f8b;&#x7684;&#x53e6;&#x4e00;&#x4e2a;&#x79f0;&#x547c;&#x53eb;&#x505a;&#x5bf9;&#x8c61;&#x3002;&#x7136;&#x800c;&#xff0c;&#x6211;&#x4eec;&#x66f4;&#x503e;&#x5411;&#x4e8e;&#x4f7f;&#x7528;&#x672f;&#x8bed;&#x201c;&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x201d;&#x6765;&#x5f3a;&#x8c03",{"_index":2704,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#xff0c;&#x5b83;&#x88ab;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a;&#x53d8;&#x91cf",{"_index":2710,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x7c7b;&#x7684;&#x7ed3;&#x6784;&#xff0c;&#x5176;&#x4e2d;&#x5305;&#x62ec;&#x4e00;&#x4e9b;&#x5176;&#x5b83;&#x7684;&#x8bdd;&#x9898;&#x3001;&#x5c5e;&#x6027;&#x7684;&#x5904;&#x7406;&#x3001;&#x5185;&#x8054;&#x5b57;&#x6bb5;&#x548c;&#x6cdb;&#x578b;&#x51fd;&#x6570;&#x7b49;&#x3002",{"_index":1018,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7c7b;&#x7c7b;&#x578b;&#x4fe1;&#x606f;&#xff1a",{"_index":6202,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x7c7b;&#x7ea7",{"_index":4796,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x7c7b;&#x89e3;&#x91ca;&#x7684;&#x7b80;&#x5355;&#x7684;&#x8bed;&#x6cd5;&#x3002",{"_index":2119,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{}}}],["x7c7b;&#x8bed;&#x6cd5;&#x8868;&#x793a;&#x7684;&#xff0c;&#x5982;&#x4e0b;&#x9762;&#x663e;&#x793a;&#x7684;&#xff1a",{"_index":6429,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["x7c7b;&#x8fdb;&#x884c;&#x7f16;&#x8bd1;&#x3002;&#x8fd9;&#x53ea;&#x9002;&#x7528;&#x4e8e;flash",{"_index":1436,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x7c7b;&#x90fd;&#x6709;&#x4e00;&#x4e2a;&#x786e;&#x5b9a;&#x7684;&#x540d;&#x5b57;&#xff0c;&#x4e00;&#x4e2a;&#x9690;&#x542b;&#x7684;&#x8def;&#x5f84;&#x548c;&#x96f6;&#x6216;&#x8005;&#x591a;&#x4e2a;&#x7c7b;&#x5b57;&#x6bb5;&#x3002;&#x8fd9;&#x91cc;&#x6211;&#x4eec;&#x5c06;&#x5173;&#x6ce8;&#x7c7b;&#x7684;&#x4e00;&#x822c;&#x7ed3;&#x6784;&#x548c;&#x5b83;&#x4eec;&#x7684;&#x5173;&#x7cfb;&#xff0c;&#x800c",{"_index":2793,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x7c7b;&#xff08;&#x7b2c;2.3&#x8282;&#xff09",{"_index":2624,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x7c7b;&#xff0c;&#x5b83;&#x7684;main&#x65b9;&#x6cd5;&#x521b;&#x5efa;&#x4e00;&#x4e2a;child&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#xff0c;&#x5206;&#x914d;&#x5b83;&#x5230;&#x4e00;&#x4e2a;&#x53d8;&#x91cf",{"_index":4469,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["x7c7b;&#xff0c;&#x63a5;&#x53e3;&#x548c;&#x7ee7;&#x627f",{"_index":524,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x7c7b;&#xff0c;&#x6458;&#x5f55;&#x5982;&#x4e0b;&#xff1a",{"_index":5402,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x7c7b;&#xff0c;&#x6709;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5",{"_index":4464,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["x7c7b;/&#x63a5;&#x53e3",{"_index":6516,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x7c7b;/&#x7c7b;&#x5b9e;&#x4f8b;&#x548c",{"_index":2705,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x7ec4;&#x5408;&#x548c;&#x4e00;&#x4e2a;&#x5355;&#x72ec;&#x7684",{"_index":1882,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x7ec4;&#x6210",{"_index":2803,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x7ec8;&#x6b62;&#xff1f;&#xff08;&#x4f8b;&#x5982;&#xff0c;oy1:xi2y1:kng&#xff0c;{x:2",{"_index":2238,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x7ecf;&#x5e38;&#x770b;&#x5230;&#x9759;&#x6001;&#x6269;&#x5c55;&#x4f7f;&#x7528",{"_index":1946,"title":{},"body":{"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{}}}],["x7ecf;&#x8fc7;&#x8bbe;&#x8ba1;&#xff0c;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#x4e0d;&#x88ab;&#x4f20;&#x9012;&#xff0c;&#x5c31;&#x50cf;&#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x5c55;&#x793a;&#x7684;&#xff1a",{"_index":3275,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7ed3;&#x675f;&#x3002",{"_index":5229,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["x7ed3;&#x675f;&#x3002;&#x4e00;&#x4e2a;&#x5757;&#x53ef;&#x4ee5;&#x5305;&#x542b;&#x4e00;&#x4e9b;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x6bcf;&#x4e2a;&#x4f7f;&#x7528;&#x5206;&#x53f7;&#x7ed3;&#x675f;&#x3002;&#x901a;&#x5e38;&#x7684;&#x8bed;&#x6cd5;&#x662f;&#xff1a",{"_index":4774,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["x7ed3;&#x6784",{"_index":2235,"title":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x7ed3;&#x6784;&#x5339;&#x914d",{"_index":5711,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{}}}],["x7ed3;&#x6784;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4ee3;&#x6570;&#x6570;&#x636e;&#x7c7b;&#x578b;&#xff08;adt&#xff09;&#x63cf;&#x8ff0;&#xff0c;&#x5982;haxe&#x8bed;&#x8a00;&#x4e2d;&#x7684;&#x679a;&#x4e3e;&#x3002;&#x9664;&#x6b64;&#x4e4b;&#x5916;&#xff0c;haxe&#x652f;&#x6301;&#x5b83;&#x4eec;&#x7684;&#x5e7f;&#x4e49;&#x7684;&#x53d8;&#x4f53;&#x5982;gadt&#x3002",{"_index":532,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x7ed3;&#x6784;&#x53ef;&#x80fd;&#x6162;&#x4e8e;&#x76f4;&#x63a5;&#x5bf9;&#x5df2;&#x77e5;&#x7c7b;&#x578b;&#x6267;&#x884c;&#x64cd;&#x4f5c;&#xff0c;&#x6bd4;&#x5982",{"_index":2016,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{}}}],["x7ed3;&#x6784;&#x5728;&#x4e4b;&#x524d;&#x4e3a;&#x4e86;&#x4fbf;&#x4e8",{"_index":4044,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316;&#x5b9a;&#x4e49;&#x4e86;&#x5177;&#x6709;&#x76f8;&#x540c;&#x7ed3;&#x6784;&#x7684;&#x7c7b;&#x578b;&#x4e4b;&#x95f4;&#x7684;&#x4e00;&#x79cd;&#x9690;&#x5f0f;&#x5173;&#x7cfb;&#x3002",{"_index":3836,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316;&#xff08;&#x7b2c;3.5.2&#x8282;&#xff09",{"_index":2734,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316;&#xff08;&#x7b2c;3.5.2&#xff09",{"_index":2930,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x7ed3;&#x6784;&#x7684;&#x5b57;&#x6bb5;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x4fee;&#x9970;&#x4e3a",{"_index":2908,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}}}],["x7ed3;&#x6784;&#x7c7b;&#x578b",{"_index":2900,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x7ed3;&#x6784;&#x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x53ef;&#x4ee5;&#x88ab;&#x4fee;&#x9970;&#x4e3a;&#x53ef;&#x9009;&#x7684;&#x3002;&#x5728;&#x6807;&#x51c6;&#x5f62;&#x5f0f;&#x7684;&#x58f0;&#x660e;&#x4e0b;&#xff0c;&#x901a;&#x8fc7;&#x4f4d;&#x4e8e;&#x5b57;&#x6bb5;&#x540d;&#x79f0;&#x524d;&#x653e;&#x7f6e;&#x4e00;&#x4e2a;&#x95ee;&#x53f7",{"_index":2939,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x7ed3;&#x6784;&#x7c7b;&#x578b;&#x7684;&#x7c7b;&#x8bb0;&#x6cd5",{"_index":2898,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}},"body":{}}],["x7ed3;&#x6784;&#x7c7b;&#x578b;&#xff1a;&#x4e00;&#x4e2a;&#x533f;&#x540d;&#x7ed3;&#x6784;&#xff0c;&#x5373;&#xff0c;&#x4e00;&#x4e2a;&#x88ab;&#x547d;&#x540d;&#x7684;&#x5b57;&#x6bb5;&#x96c6;&#x5408",{"_index":106,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7ed3;&#x6784;&#xff08;&#x7b2c;8.5.1&#x8282;&#xff09;&#x3002",{"_index":6253,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["x7ed3;&#x679c;&#x7684;&#x7c7b;&#x578b;&#x5316;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x7edf;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09;&#x4e3a;typ",{"_index":5115,"title":{},"body":{"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["x7ed9;&#x5b9a;&#x4e00;&#x4e2a;&#x540d;&#x5b57;&#x6765;&#x7f29;&#x77ed;&#x4e00;&#x4e2a;&#x590d;&#x6742;&#x7684",{"_index":3617,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7ed9;&#x5b9a;&#x4e00;&#x4e2a;&#x6807;&#x8bc6;&#x7b26",{"_index":4286,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x7ed9;&#x5b9a;&#x4e00;&#x7ec4;&#x591a;&#x79cd;&#x7c7b;&#x578b;&#xff0c;&#x8fd9;&#x7ec4;&#x7c7b;&#x578b;&#x4e2d;&#x7684;&#x6240;&#x6709;&#x7c7b;&#x578b;&#x4f1a;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x4e00;&#x4e2a;&#x901a;&#x7528;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#xff1a",{"_index":3904,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x7edf;&#x4e00;&#x4e3a",{"_index":3841,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7edf;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09",{"_index":133,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7edf;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09;&#x3002;&#x5982;&#x679c;&#x6ca1;&#x6709",{"_index":4929,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x7edf;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x4e3a;&#x5b83;&#x6240;&#x8fd4;&#x56de;&#x7684;&#x51fd;&#x6570;&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#xff08;&#x663e;&#x5f0f;&#x6307;&#x5b9a;&#x6216;&#x8005;&#x901a;&#x8fc7;&#x524d;&#x9762;&#x7684;return&#x8868;&#x8fbe;&#x5f0f;&#x63a8;&#x65ad;&#xff09;&#x3002",{"_index":4997,"title":{},"body":{"5.表达式/5.19.return/5.19.return.html#5-19-return":{}}}],["x7edf;&#x4e00;&#xff0c;&#x4f7f;&#x5f97;&#x4e0d;&#x53ef;&#x80fd;&#x9650;&#x5236;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53ea;&#x63a5;&#x53d7;&#x771f;&#x6b63;&#x7684;&#x5bf9;&#x8c61;&#x3002",{"_index":3561,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x7ee7;&#x627f;&#xff08;&#x7b2c;2.3.2&#x8282;&#xff09;&#x4e2d;&#x89e3;&#x91ca;&#x4e86;super()&#x5728;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x4e2d;&#x7684;&#x4f7f;&#x7528;&#x3002",{"_index":4477,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["x7f13;&#x5b58;&#x5f15;&#x7528",{"_index":2288,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x7f13;&#x5b58;&#x7684;&#x5143;&#x7d20;&#x548c;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#x4ece;0&#x5f00;&#x59cb;&#x7d22;&#x5f15;&#x3002",{"_index":2293,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x7f16;&#x5199;&#x3002;&#x6211;&#x4eec;&#x611f;&#x8c22;&#x8fd9;&#x4e9b;&#x4eba;&#x7684;&#x8d21;&#x732e;&#xff1a",{"_index":1062,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{}}}],["x7f16;&#x8bd1",{"_index":1469,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["x7f16;&#x8bd1;&#x4e2d;&#x5b8f;&#x7684;&#x89c4;&#x5219;&#x5982;&#x4e0b;&#xff1a",{"_index":768,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x7f16;&#x8bd1;&#x5668;&#x4e0d;&#x5141;&#x8bb8;&#x5728;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e0a;&#x5206;&#x914d",{"_index":2680,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x7f16;&#x8bd1;&#x5668;&#x4e0d;&#x5b9e;&#x65bd;&#x4efb;&#x4f55;&#x6ea2;&#x51fa;&#x884c;&#x4e3a;&#x3002;&#x6ea2;&#x51fa;&#x68c0;&#x67e5;&#x7684;&#x4efb;&#x52a1;&#x843d;&#x5230;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002;&#x8fd9;&#x91cc;&#x662f;&#x4e00;&#x4e9b;&#x6ea2;&#x51fa;&#x884c;&#x4e3a;&#x7684;&#x5e73;&#x53f0;&#x7279;&#x5b9a;&#x63d0;&#x793a;&#xff1a",{"_index":2554,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["x7f16;&#x8bd1;&#x5668;&#x4ecd;&#x7136;&#x4fdd;&#x8bc1;&#x5b57;&#x6bb5;&#x5b9e;&#x9645;&#x4e0a;&#x5b58;&#x5728;&#x4e8e;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x3002",{"_index":3445,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x7f16;&#x8bd1;&#x5668;&#x4ece;&#x4e0d;&#x63a8;&#x65ad;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x4e3a",{"_index":3154,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7f16;&#x8bd1;&#x5668;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x7684;&#x503c;&#x66ff;&#x6362;&#x6240;&#x6709;&#x7684;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x5230",{"_index":3409,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x7f16;&#x8bd1;&#x5668;&#x5229;&#x7528;&#x4e30;&#x5bcc;&#x7684;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#xff0c;&#x53ef;&#x4ee5;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x68c0;&#x6d4b;&#x7a0b;&#x5e8f;&#x4e2d;&#x7c7b;&#x578b;&#x76f8;&#x5173;&#x7684;&#x9519;&#x8bef;&#x3002;&#x7c7b;&#x578b;&#x9519;&#x8bef;&#x662f;&#x5bf9;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7c7b;&#x578b;&#x6267;&#x884c;&#x4e86;&#x4e00;&#x4e2a;&#x65e0;&#x6548;&#x64cd;&#x4f5c;&#x5982;&#xff0c;&#x9664;&#x4ee5;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x3001;&#x5c1d;&#x8bd5;&#x8bbf;&#x95ee;&#x4e00;&#x4e2a;&#x6574;&#x6570;&#x7684;&#x5b57;&#x6bb5;&#xff0c;&#x6216;&#x8005;&#x8c03;&#x7528;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x800c;&#x6ca1;&#x6709;&#x4f20;&#x9012;&#x8db3;&#x591f;&#xff08;&#x6216;&#x592a;&#x591a;&#xff09;&#x7684;&#x53c2;&#x6570;&#x3002;&#x5728;&#x4e00;&#x4e9b;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;&#x8fd9;&#x4e9b;&#x989d;&#x5916;&#x7684;&#x5b89;&#x5168;&#x9700;&#x8981;&#x6d88;&#x8017;&#x5f88;&#x591a;&#x7cbe;&#x529b;&#xff0c;&#x56e0;&#x4e3a;&#x7a0b;&#x5e8f;&#x5458;&#x88ab;&#x8981;&#x6c42;&#x660e;&#x786e;&#x5730;&#x5206;&#x914d;&#x7c7b;&#x578b;&#x5230;&#x8bed;&#x6cd5;&#x7ed3;&#x6784;&#xff1a",{"_index":94,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7f16;&#x8bd1;&#x5668;&#x53c2;&#x6570;&#x3002;&#x5b83;&#x4eec;&#x5728;&#x7f16;&#x8bd1;&#x5668;&#x53c2;&#x6570;&#x88ab;&#x5904;&#x7406;&#x3001;&#x7c7b;&#x578b;&#x5668;&#x4e0a;&#x4e0b;&#x6587;&#x88ab;&#x521b;&#x5efa;&#x4e4b;&#x540e;&#xff0c;&#x4f46;&#x5728;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x5316;&#x5f00;&#x59cb;&#x4e4b;&#x524d;&#x6267;&#x884c;&#xff08;&#x67e5;&#x770b;&#x521d;&#x59cb;&#x5316;&#x5b8f;&#xff08;&#x7b2c;9.7&#x8282;&#xff09;&#xff09;&#x3002",{"_index":776,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x7f16;&#x8bd1;&#x5668;&#x53c2;&#x6570;&#x5d4c;&#x5165;&#xff1a",{"_index":6119,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html#8-4-1-嵌入资源":{}}}],["x7f16;&#x8bd1;&#x5668;&#x53c2;&#x6570;&#x89e6;&#x53d1;&#x3002;&#x9700;&#x8981;&#x7684;&#x53c2;&#x6570;&#x4e3a;&#xff1a",{"_index":5894,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x7f16;&#x8bd1;&#x5668;&#x53c2;&#x8003;&#xff0c;&#x9996;&#x5148;&#x5728;&#x8fdb;&#x5165",{"_index":1028,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7f16;&#x8bd1;&#x5668;&#x56e2;&#x961f;&#xff0c;&#x73b0;&#x5728;&#x7531;&#x6700;&#x8fd1;&#x5efa;&#x7acb;&#x7684",{"_index":1174,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x7f16;&#x8bd1;&#x5668;&#x5c06;&#x4e0d;&#x4f1a;&#x518d;&#x5728;&#x63a5;&#x53d7;&#x6307;&#x5b9a;&#x7c7b;&#x578b;&#x7684;&#x8d4b;&#x503c;&#x3001;&#x51fd;&#x6570;&#x8c03;&#x7528;&#x548c;&#x5176;&#x5b83;&#x6784;&#x9020;&#x4e2d;&#x8fdb;&#x884c;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#x3002",{"_index":3138,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7f16;&#x8bd1;&#x5668;&#x6253;&#x5370;&#x9519;&#x8bef;&#x6d88;&#x606f;&#x800c;&#x4e0d;&#x662f;&#x5b8c;&#x6210;&#x7684;&#x8f93;&#x51fa;&#x3002;&#x4efb;&#x4f55;&#x975e;xml&#x7684;&#x8f93;&#x51fa;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x770b;&#x4f5c;&#x662f;&#x4e00;&#x4e2a;&#x81f4;&#x547d;&#x9519;&#x8bef;&#x7684;&#x6d88;&#x606f;&#x3002",{"_index":5918,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x7f16;&#x8bd1;&#x5668;&#x670d;&#x52a1",{"_index":751,"title":{},"body":{"8.编译器功能/8.编译器功能.html#8-编译器功能":{}}}],["x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#x53ef;&#x4ee5;&#x4f7f",{"_index":1340,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#x5f00;&#x542f;&#x3002;&#x8fd9;&#x4e5f;&#x63d0;&#x4f9b;&#x901a;&#x8fc7;&#x7d22;&#x5f15;&#x3001;&#x5b57;&#x7b26;&#x4e32;&#x7c7b;&#x578b;&#x952e;&#x7684;map&#xff08;&#x7b2c;10.2.5&#x8282;&#xff09;&#x548c;&#x7c7b;&#x5b9e;&#x4f8b;&#x5e8f;&#x5217;&#x5316;&#x679a;&#x4e3e;&#xff08;&#x7b2c;2.4&#x8282;&#xff09;&#x3002",{"_index":1336,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#xff08;&#x7b2c;7.1&#x8282;&#xff09;&#x6765;&#x542f;&#x7528;&#xff0c;&#x7531;&#x591a;&#x4e2a;&#x6a21;&#x5757;&#xff08;&#x7b2c;8.6&#x8282;&#xff09;&#x7ec4;&#x6210;&#xff0c;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#xff08;&#x7b2c;7.1&#x8282;&#xff09;&#x8fdb;&#x884c;&#x5168;&#x5c40;&#x914d;&#x7f6e;&#xff0c;&#x4ee5;&#x53ca;&#x5728",{"_index":6268,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x7f16;&#x8bd1;&#x5668;&#x6839;&#x636e;&#x6d3b;&#x52a8;&#x6a21;&#x5f0f;&#x81ea;&#x52a8;&#x4f7f;&#x7528;&#x503c;&#x201c;std&#x201d;&#xff0c;&#x201c;no&#x201d;&#x6216;&#x8005;&#x201c;full&#x201d;&#x5b9a;&#x4e49;dce&#x3002;&#x8fd9;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x5728;&#x6761;&#x4ef6;&#x7f16;&#x8bd1;&#xff08;&#x7b2c;6.1&#x8282;&#xff09;&#x3002",{"_index":5871,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x7f16;&#x8bd1;&#x5668;&#x68c0;&#x67e5;&#x662f;&#x5426;&#x5b9e;&#x73b0;&#x4e86;&#x5047;&#x8bbe;&#x3002;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x5b83;&#x786e;&#x4fdd;&#x7c7b;&#x5b9e;&#x9645;&#x4e0a;&#x5b9e;&#x73b0;&#x4e86;&#x63a5;&#x53e3;&#x5fc5;&#x987b;&#x7684;&#x6240;&#x6709;&#x5b57;&#x6bb5;&#x3002;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#xff0c;&#x5982;&#x679c;&#x7c7b;&#x6216;&#x8005;&#x4efb;&#x4f55;&#x5b83;&#x7684;&#x7236;&#x7c7b;&#x63d0;&#x4f9b;&#x4e86;&#x4e00;&#x4e2a;&#x5b9e;&#x73b0;&#xff0c;&#x90a3;&#x4e48;&#x5b83;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x5b9e;&#x73b0;&#x4e86;&#x3002;&#x63a5;&#x53e3;&#x5b57;&#x6bb5;&#x4e0d;&#x9650;&#x4e8e;&#x65b9;&#x6cd5;&#x3002;&#x4e5f;&#x53ef;&#x4ee5;&#x662f;&#x53d8;&#x91cf;&#x6216;&#x8005;&#x5c5e;&#x6027;&#xff1a",{"_index":2744,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x7f16;&#x8bd1;&#x5668;&#x7528;&#x6cd5;&#xff08;&#x7b2c;7&#x7ae0;&#xff09",{"_index":1031,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7f16;&#x8bd1;&#x5668;&#x7684;&#x9ad8;&#x7ea7;&#x529f;&#x80fd;&#xff08;&#x7b2c;8&#x7ae0;&#xff09",{"_index":1029,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x7f16;&#x8bd1;&#x5668;&#x786e;&#x4fdd;&#x6ca1;&#x6709;&#x88ab;&#x9057;&#x6f0f;&#x7684;&#x53ef;&#x80fd;&#x7684;case&#xff1a",{"_index":5492,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{}}}],["x7f16;&#x8bd1;&#x5668;&#x8fd0;&#x884c;&#x547d;&#x4ee4;&#xff1a",{"_index":1188,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["x7f16;&#x8bd1;&#x5668;&#x901a;&#x8fc7;&#x63a8;&#x65ad;&#x5b83;&#x4eec;&#x7684;&#x7c7b;&#x578b;&#x4e3a",{"_index":3040,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7f16;&#x8bd1;&#x6a21;&#x5757;&#x5728;&#x4e00;&#x4e2a;&#x6210;&#x529f;&#x7684;&#x7f16;&#x8bd1;&#x540e;&#x4f1a;&#x88ab;&#x7f13;&#x5b58;&#xff0c;&#x5e76;&#x4e14;&#x5982;&#x679c;&#x5b83;&#x4eec;&#x7684;&#x4f9d;&#x8d56;&#x5173;&#x7cfb;&#x6ca1;&#x6709;&#x88ab;&#x4fee;&#x6539;&#xff0c;&#x5219;&#x53ef;&#x4ee5;&#x5728;&#x4e4b;&#x540e;&#x7684",{"_index":6099,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x7f16;&#x8bd1;&#x8fc7;&#x7a0b;&#x4e2d;&#x6fc0;&#x6d3b",{"_index":963,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x7f16;&#x8bd1;/&#x5b8c;&#x6210",{"_index":6100,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x7f8e;&#x5143;&#x7b26;&#x53f7;&#x4e0d;&#x5141;&#x8bb8;&#x7528;&#x4e8e;&#x4efb;&#x4f55;&#x7c7b;&#x522b;&#x7684;&#x540d;&#x5b57;&#x7684;&#x5f00;&#x5934;&#xff08;&#x7f8e;&#x5143;&#x540d;&#x5b57;&#x591a;&#x6570;&#x7528;&#x4e8e;&#x5b8f;&#x7684;&#x5177;&#x4f53;&#x5316;&#xff08;&#x7b2c;9.3&#x8282;&#xff09;&#xff09;&#x3002",{"_index":317,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["x800c",{"_index":2861,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x800c;&#x4e0d;&#x5e26;&#x4efb;&#x4f55;&#x53c2;&#x6570;&#xff0c;&#x6765;&#x8f6c;&#x53d1;&#x6240;&#x6709;&#x5b57;&#x6bb5;&#x3002;&#x5f53;&#x7136",{"_index":3444,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x800c;&#x4e0d;&#x662f;&#x7f16;&#x8f91;&#x5b83;&#x7684;&#x6e90;&#x4ee3;&#x7801;&#xff0c;&#x6709;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x5668;&#x5b8f;&#x53ef;&#x7528;&#xff1a",{"_index":5866,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x800c;&#x4e14;&#x53f3;&#x4fa7;&#x503c;&#x662f",{"_index":3306,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x800c;&#x4e14;&#x5fc5;&#x987b;&#x7f13;&#x5b58;&#x590d;&#x6742;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x5230;&#x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#xff1a",{"_index":4356,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x800c;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x7684;&#x8bbe;&#x8ba1;&#x4e0d;&#x5141;&#x8bb8;&#x88ab;&#x4fee;&#x9970;&#x4e3a;&#x8fd9;&#x7c7b;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#xff0c;&#x90a3;&#x4e48;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x5f3a;&#x5236;&#x8bbf;&#x95ee;&#x6765;&#x8fdb;&#x884c;&#x8bbf;&#x95ee;&#xff1a",{"_index":5333,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x800c;&#x8868;&#x8fbe;&#x5f0f",{"_index":3980,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x80fd;&#x548c;&#x53cd;&#x5c04;&#x4e00;&#x8d77;&#x4f7f;&#x7528;&#xff08;&#x5bf9;&#x4e8e;&#x8fd9;&#x4e2a;&#x4e8b;&#x4ef6;&#xff0c;&#x800c;&#x4e14;&#x662f;dynamic&#xff09;&#xff0c;&#x4f46;&#x5b83;&#x8fd4;&#x56de;&#x503c;&#x662f;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x5316;&#x7684;&#x7ed3;&#x6784;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x8c03;&#x7528;&#x8005;&#x4f7f;&#x7528;&#x7c7b;&#x578b;&#x5b89;&#x5168;&#x7684;&#x65b9;&#x5f0f;&#x3002",{"_index":2330,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x81ea;&#x4ece;using&#x5173;&#x952e;&#x5b57;&#x88ab;&#x6dfb;&#x52a0;&#x5230;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;&#x8ba8;&#x8bba;&#x67d0;&#x4e9b",{"_index":5443,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x81ea;&#x52a8;&#x4f7f;&#x7528;&#x539f;&#x751f;&#x7684;&#x5b9e;&#x73b0;&#x5728;&#x5b83;&#x53ef;&#x7528;&#x7684;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#xff0c;&#x5373",{"_index":1331,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["x81ea;&#x5b9a;&#x4e49",{"_index":2291,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x81ea;&#x5b9a;&#x4e49;&#x7684;&#xff08;&#x53cd;&#xff09;&#x5e8f;&#x5217;&#x5316",{"_index":2463,"title":{"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}},"body":{}}],["x81ea;&#x5df1;&#x7684",{"_index":1139,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x81ea;&#x5df1;&#xff08;&#x4f8b;&#x5982",{"_index":2250,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x81f3;&#x5c11;&#x6d89;&#x53ca;&#x4e00;&#x4e2a;&#x52a8;&#x6001;&#x7c7b;&#x578b;&#x503c;&#x7684;&#x6bd4;&#x8f83;&#x672a;&#x88ab;&#x6307;&#x5b9a;&#xff0c;&#x89c6;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x800c;&#x5b9a;&#x3002",{"_index":2545,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x8282;&#x70b9;&#x7684;&#x503c;&#x90fd;&#x5305;&#x542b;&#x4e86;&#x76f8;&#x5173;&#x7684;&#x540d;&#x79f0;&#x3002",{"_index":6046,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["x82b1;&#x62ec;&#x53f7",{"_index":4772,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["x82b1;&#x7d6e",{"_index":35,"title":{},"body":{"index.html#关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["x82b1;&#x7d6e;&#x5185;&#x5bb9",{"_index":37,"title":{},"body":{"index.html#关于本文档":{},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{}}}],["x82b1;&#x7d6e;&#xff1a",{"_index":5875,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x82b1;&#x7d6e;&#xff1a;&#x5143;&#x6570;&#x636e;&#x7684;&#x9009;&#x62e9",{"_index":5338,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x82b1;&#x7d6e;&#xff1a;&#x56de;&#x8c03",{"_index":5793,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["x82b1;&#x7d6e;&#xff1a;&#x5b58;&#x53d6;&#x5668;&#x540d;&#x79f0",{"_index":4545,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x82b1;&#x7d6e;&#xff1a;&#x7701;&#x7565;&#x76ee;&#x6807;&#x6307;&#x793a;&#x7b26;&#x7684;&#x5f71;&#x54cd",{"_index":6026,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["x82b1;&#x7d6e;&#xff1a;dce&#x91cd;&#x5199",{"_index":5872,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x82b1;&#x7d6e;&#xff1a;tinkerbel",{"_index":6462,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x83b7;&#x53d6;&#x952e",{"_index":3004,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x83b7;&#x5f97;&#x3002",{"_index":6300,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x83b7;&#x5f97;&#x652f;&#x6301;&#x7684;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#xff08;&#x7b2c;6.1&#x8282;&#xff09;&#x5217;&#x8868;&#x3002",{"_index":942,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x83b7;&#x5f97;&#x6784;&#x5efa;&#x5b57;&#x6bb5;&#x3002",{"_index":6582,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x865a;&#x62df;&#x673a",{"_index":1140,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x867d;&#x7136",{"_index":1929,"title":{},"body":{"10.标准库/10.4.Math/10.4.2.数学错误.html#10-4-2-数学错误":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x867d;&#x7136;&#x4e0d;&#x63a8;&#x8350;&#x5d4c;&#x5165;&#x5927;&#x578b;&#x4e8c;&#x8fdb;&#x5236;&#x6587;&#x4ef6;&#x5230;&#x5e94;&#x7528;&#x4e2d;&#xff0c;&#x4f46;&#x5d4c;&#x5165;&#x4e8c;&#x8fdb;&#x5236;&#x6570;&#x636e;&#x4ecd;&#x7136;&#x53ef;&#x80fd;&#x662f;&#x6709;&#x7528;&#x7684;&#x3002;&#x4e00;&#x4e2a;&#x5d4c;&#x5165;&#x7684;&#x8d44;&#x6e90;&#x7684;&#x4e8c;&#x8fdb;&#x5236;&#x8868;&#x73b0;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":6147,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["x867d;&#x7136;&#x4ece",{"_index":3276,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x867d;&#x7136;&#x5141;&#x8bb8;&#x4efb;&#x610f;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x5b57;&#x9762;&#x503c;&#xff0c;&#x4f46;&#x5982;&#x5fc5;&#x987b;&#x662f;&#x6709;&#x6548;&#x7684",{"_index":2921,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x867d;&#x7136;&#x53d8;&#x5f02;&#x4e5f;&#x5728;&#x5176;&#x5b83;&#x5730;&#x65b9;&#x610f;&#x4e49;&#x91cd;&#x5927;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x7279;&#x522b;&#x7ecf;&#x5e38;&#x548c;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x4e00;&#x8d77;&#x51fa;&#x73b0;&#xff0c;&#x5e76;&#x50cf;&#x4e00;&#x4e2a;&#x60ca;&#x559c;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x975e;&#x5e38;&#x5bb9;&#x6613;&#x89e6;&#x53d1;&#x53d8;&#x5f02;&#x9519;&#x8bef;&#xff1a",{"_index":3799,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x867d;&#x7136;&#x6bcf;&#x4e2a",{"_index":2494,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x884c;&#x4e3a;&#x3002",{"_index":4652,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x8865;&#x5145;&#x53e6;&#x4e00;&#x4f8b;&#x5b50;&#xff1a",{"_index":2982,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x8865;&#x5145;&#xff0c;&#x5728;&#x521d;&#x59cb;&#x5316;&#x5b8f;&#xff08;&#x7b2c;9.7&#x8282;&#xff09;&#x4e2d;&#x8be6;&#x8ff0;&#x3002;&#x800c;&#x8fd9;&#x4e2a;api&#x53ef;&#x4ee5;&#x7528;&#x4e8e;&#x6240;&#x6709;&#x5b8f;&#x7684;&#x79cd;&#x7c7b;&#xff0c;&#x5fc5;&#x987b;&#x6ce8;&#x610f;&#x521d;&#x59cb;&#x5316;&#x5b8f;&#x7684;&#x4efb;&#x4f55;&#x5916;&#x90e8;&#x4fee;&#x6539;&#x3002;&#x8fd9;&#x6e90;&#x4e8e;&#x672a;&#x5b9a;&#x4e49;&#x7684;&#x6784;&#x5efa;&#x987a;&#x5e8f;&#xff08;&#x7b2c;9.6.3&#x8282;&#xff09;&#x7684;&#x81ea;&#x7136;&#x9650;&#x5236;&#xff0c;&#x53ef;&#x80fd;&#x5bfc;&#x81f4;&#x5982;&#x4e00;&#x4e2a;&#x6807;&#x8bb0;&#x5b9a;&#x4e49;&#x901a;&#x8fc7",{"_index":6309,"title":{},"body":{"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x8865;&#x5145;&#xff1a",{"_index":3890,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x8868;&#x793a;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#xff0c;&#x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x4e3a",{"_index":3098,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x8868;&#x793a;&#x4e00;&#x4e2a;&#x53cc;&#x7cbe;&#x5ea6",{"_index":2491,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{}}}],["x8868;&#x793a;&#x4e00;&#x4e2a;&#x6574;&#x6570",{"_index":2493,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x8868;&#x793a;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x7684;&#x7f3a;&#x5931;&#x3002;&#x5b83;&#x7528;&#x6765;&#x8868;&#x8fbe;&#x4e00;&#x4e9b;&#x4e1c;&#x897f;&#xff08;&#x901a;&#x5e38;&#x662f;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#xff09;&#x6ca1;&#x6709;&#x503c;&#x3002",{"_index":2596,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x8868;&#x793a;&#x4e00;&#x884c;&#x7684;&#x5f00;&#x5934;&#x548c;&#x7ed3;&#x5c3",{"_index":1910,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x8868;&#x793a;&#x5141;&#x8bb8;&#x7684;&#x53d8;&#x578b;&#xff0c;&#x5e76;&#x4f7f;&#x7f16;&#x8bd1;&#x5668;&#x68c0;&#x67e5;&#x662f;&#x5426;&#x6240;&#x6709;&#x53ef;&#x80fd;&#x7684;&#x503c;&#x90fd;&#x88ab;&#x9075;&#x5b88;&#x7684;&#x3002;&#x53ef;&#x4ee5;&#x5728;&#x8fd9;&#x91cc;&#x770b;&#x5230;&#xff1a",{"_index":2877,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x8868;&#x793a;&#x6211;&#x4eec;&#x58f0;&#x660e;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b",{"_index":3526,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x8868;&#x793a;&#x6211;&#x4eec;&#x5b9a;&#x4e49;&#x4e00;&#x4e2a;&#x7c7b",{"_index":2797,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x8868;&#x793a;&#x6211;&#x4eec;&#x8981;&#x58f0;&#x660e;&#x4e00;&#x4e2a;&#x679a;&#x4e3",{"_index":2857,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x8868;&#x793a;&#x7684;&#x5b57;&#x8282;&#x7801;&#xff08;&#x4f8b;&#x5982;&#xff0c;s3:aaa",{"_index":2264,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x8868;&#x793a;&#x7a7a;&#x6570;&#x7ec4;&#xff0c;&#x800c;[1,2,3]&#x7528;&#x4e09;&#x4e2a;&#x5143;&#x7d20;&#x521d;&#x59cb;&#x5316;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#x3002",{"_index":5198,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["x8868;&#x793a;&#x8fd9;&#x4e2a;&#x7c7b;&#x7ee7;&#x627f;&#x81ea",{"_index":2779,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x8868;&#x8fbe;&#x5f0f",{"_index":2122,"title":{"10.标准库/10.6.模板/10.6.模板.html#表达式":{}},"body":{"10.标准库/10.6.模板/10.6.模板.html#表达式":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x3002;&#x800c;&#x8fd9;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7ed3;&#x6784;&#x4e0d;&#x4f20;&#x8fbe;&#x4fe1;&#x606f;&#xff0c;&#x8868;&#x8fbe;&#x5f0f;&#x4ecd;&#x7136;&#x88ab;&#x6b63;&#x786e;&#x7684;&#x7c7b;&#x578b;&#x5316;&#xff1a",{"_index":6631,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x3002;cas",{"_index":4945,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x4e3b;&#x4f53;&#x4e2d;&#xff0c;&#x5c31;&#x50cf;&#x4f7f;&#x7528;&#x4e86;&#x4e00;&#x4e2a",{"_index":2887,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x5177;&#x4f53;&#x5316;&#x7528;&#x4e8e;&#x4ee5;&#x4e00;&#x4e2a;&#x4fbf;&#x6377;&#x7684;&#x65b9;&#x5f0f;&#x521b;&#x5efa;haxe.macro.expr&#x7684;&#x5b9e;&#x4f8b;&#x3002;haxe&#x7f16;&#x8bd1;&#x5668;&#x63a5;&#x53d7;&#x901a;&#x5e38;&#x7684;haxe&#x8bed;&#x6cd5;&#x5e76;&#x7ffb;&#x8bd1;&#x5b83;&#x5230;&#x4e00;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x5bf9;&#x8c61;&#x3002;&#x5b83;&#x652f;&#x6301;&#x51e0;&#x79cd;&#x8f6c;&#x4e49;&#x673a;&#x5236;&#xff0c;&#x90fd;&#x662f;&#x901a;&#x8fc7",{"_index":6374,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x53ef;&#x4ee5;&#x7528;&#x4f5c;&#x4e00;&#x4e2a;&#x503c;&#xff1b;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#xff0c;&#x6240;&#x6709;case&#x4f53;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x548c;default&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x5fc5;&#x987b;&#x662f;&#x7edf;&#x4e00;&#x7684;&#xff08;&#x7b2c;3.5&#x8282;&#xff09;&#x3002",{"_index":4955,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x5b8f",{"_index":781,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x6765;&#x63a8;&#x65ad;&#x4e3a",{"_index":4586,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x7531",{"_index":4943,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x7684;&#x503c;&#x662f;&#x5fc5;&#x987b;&#x7684;&#xff0c;&#x4f8b;&#x5982;&#xff0c;&#x5bf9;&#x4e8",{"_index":4927,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7cbe;&#x786e;&#x610f;&#x601d;&#x3002;&#x73b0;&#x5728;&#xff0c;&#x53ea;&#x8981;&#x628a;&#x5b83;&#x5f53;&#x4f5c;&#x8c03;&#x7528;&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x5e76;&#x8fd4;&#x56de;&#x9002;&#x5f53;&#x7684;&#x5bf9;&#x8c61;&#x3002",{"_index":2719,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x88ab;&#x7ed9;&#x5b9a;&#xff0c;&#x7c7b;&#x578b;&#x88ab;&#x63a8;&#x65ad;&#x4e3a",{"_index":4930,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x8bc6;&#x522b;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x751f;&#x6210;&#x7684;&#x4ee3;&#x7801;&#x7c7b;&#x4f3c;&#x4e8e;&#x524d;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#xff0c;&#x4f46;&#x662f;&#x539f;&#x751f;&#x7684;&#x8bed;&#x6cd5;&#x88ab;&#x5927;&#x5927;&#x7cbe;&#x7b80;&#x3002;&#x63d0;&#x53d6;&#x5668;&#x7531;&#x4e24;&#x90e8;&#x5206;&#x7ec4;&#x6210;&#xff0c;&#x88ab",{"_index":5656,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x90fd;&#x4f1a;&#x4ee5;&#x8be5;&#x7c7b;&#x578b;&#x8fdb;&#x884c;&#x63a8;&#x65ad;&#x3002",{"_index":3968,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x90fd;&#x662f;&#x4ee5;cas",{"_index":4946,"title":{},"body":{"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{}}}],["x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5&#x7ae0;&#xff09",{"_index":1020,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5.10&#x8282;&#xff09",{"_index":2888,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5.11&#x8282;&#xff09;&#x58f0;&#x660e;&#x3002;&#x5b83;&#x4eec;&#x5728;&#x5757;&#x548c;&#x5b50;&#x5757;&#x4e2d;&#x4e2d;&#x662f;&#x53ef;&#x7528;&#x7684;&#xff0c;&#x4f46;&#x662f;&#x4e0d;&#x80fd;&#x5728;&#x5757;&#x7684;&#x8303;&#x56f4;&#x4e4b;&#x5916;&#x4f7f;&#x7528;&#x3002;&#x540c;&#x6837;&#xff0c;&#x53ea;&#x6709;&#x5728;&#x88ab;&#x58f0;&#x660e;&#x4e4b;&#x540e;&#x624d;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x3002;&#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x4f7f;&#x7528",{"_index":4778,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["x8868;&#x8fbe;&#x5f0f;&#xff0c",{"_index":3963,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x8868;&#x8fbe;&#x5f0f;&#xff1a",{"_index":4925,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["x88ab",{"_index":5329,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x88ab;&#x4f7f;&#x7528;&#x4e00;&#x4e2a",{"_index":6495,"title":{},"body":{"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{}}}],["x88ab;&#x4f7f;&#x7528;&#xff0c;&#x53ef;&#x4ee5;&#x5728;&#x8c03;&#x7528;&#x65f6;&#x7701;&#x7565;&#x67d0;&#x4e2a;&#x53c2;&#x6570;&#x3002;hax",{"_index":3050,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x88ab;&#x4f7f;&#x7528;&#xff0c;&#x9664;&#x975e;&#x6ce8;&#x660e;&#x5426;&#x5219;&#x5b83;&#x4eec;&#x662f;&#x88ab;&#x542f;&#x7528;&#x7684;&#x3002",{"_index":6279,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x88ab;&#x505a;&#x51fa;&#xff0c;&#x800c;&#x4e14;&#x88ab;&#x8ba8;&#x8bba;&#x7684;&#x5b57;&#x6bb5;&#x4e0d;&#x5b58;&#x5728;&#xff0c",{"_index":3122,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x88ab;&#x5206;&#x914d;&#x7ed9",{"_index":3953,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x88ab;&#x53d1;&#x5e03;&#x65f6;&#x53ef;&#x4ee5;&#x770b;&#x5230;&#x5de8;&#x5927;&#x7684;&#x6539;&#x8fdb;&#x3002;&#x751f;&#x6210;&#x7684;javascript&#x4ee3;&#x7801;&#x6700;&#x521d;&#x7684;&#x611f;&#x53d7;&#x662f;&#x6df7;&#x5408;&#xff0c;&#x4f7f;&#x5f97;&#x66f4;&#x7ec6;&#x81f4;&#x7684;&#x9009;&#x62e9;&#x6392;&#x9664;&#x54ea;&#x4e9b;&#x4ee3;&#x7801;&#x3002",{"_index":5878,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["x88ab;&#x544a;&#x77e5;&#x9700;&#x8981;&#x88ab;&#x5bfc;&#x5165;&#x5230;&#x5f53;&#x524d;&#x7684;&#x6587;&#x4ef6",{"_index":4179,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x88ab;&#x5757;&#x8868;&#x8fbe;&#x5f0f;&#x6269;&#x5c55;&#x7684;&#x503c;&#x548c;&#x7c7b;&#x578b;&#x7b49;&#x4e8e;&#x6700;&#x540e;&#x4e00;&#x4e2a;&#x5b50;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x503c;&#x548c;&#x7c7b;&#x578b;&#x3002",{"_index":4775,"title":{},"body":{"5.表达式/5.1.块/5.1.块.html#5-1-块":{}}}],["x88ab;&#x589e;&#x52a0;&#x4e24;&#x500d;&#x3002",{"_index":6358,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["x88ab;&#x5b57;&#x6bb5",{"_index":4345,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x88ab;&#x5b83;&#x4eec;&#x7684;&#x7c7b;&#x578b;&#x8def;&#x5f84;&#x548c;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x5217;&#x8868;&#x5b9a;&#x4e49;&#x7684;&#x63a5;&#x53e3;&#x5217;&#x8868;&#x3002",{"_index":6207,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x88ab;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x8def;&#x5f84;&#x548c;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x5217;&#x8868;&#x5b9a;&#x4e49;&#x7684;&#x5b83;&#x7684;&#x7236;&#x7c7b;&#x3002",{"_index":6206,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x88ab;&#x5b9a;&#x4e49;&#x4e3a;&#x63a5;&#x53d7;&#x4e00;&#x4e2a",{"_index":3384,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x88ab;&#x5b9e;&#x73b0;&#x4e3a;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff08;abstract&#xff09;&#xff08;&#x7b2c;2.8&#x8282;&#xff09;&#xff0c;&#x5728;&#x7ed9;&#x5b9a;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x539f;&#x751f;&#x6570;&#x7ec4;&#x5b9e;&#x73b0;&#x4e4b;&#x4e0a;&#xff0c;&#x662f;&#x66f4;&#x5feb;&#x901f;&#x7684;&#x56fa;&#x5b9a;&#x957f;&#x5ea6;&#x7684;&#x96c6;&#x5408;&#xff0c;&#x56e0;&#x4e3a;&#x5b58;&#x50a8;&#x5b83;&#x7684;&#x5143;&#x7d20;&#x7684;&#x5185;&#x5b58;&#x88ab;&#x9884;&#x5206;&#x914d;&#x4e86;&#x3002",{"_index":1643,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{}}}],["x88ab;&#x5bfc;&#x5165;&#xff08;&#x76f4;&#x63a5;&#x6216;&#x8005;&#x4f5c;&#x4e3a;&#x6a21;&#x5757;&#x7684;&#x90e8;&#x5206;&#x5bfc;&#x5165;&#xff09;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":4311,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x88ab;&#x5f97;&#x77e5;&#xff0c;&#x8fd9;&#x4f7f;&#x5f97;&#x6211;&#x4eec;&#x4e0d;&#x9700;&#x8981;&#x4e3a;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x4f7f;&#x7528;&#x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x58f0;&#x660e;&#x3002;&#x4f46;&#x662f;&#xff0c;&#x5982;&#x679c",{"_index":3016,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x88ab;&#x6267;&#x884c;&#x7684;&#x60c5;&#x51b5;&#x3002",{"_index":2687,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x88ab;&#x629b;&#x51fa;&#x7684;&#x503c;&#x53ef;&#x4ee5;&#x88ab;catch&#x5757;&#xff08;&#x7b2c;5.18&#x8282;&#xff09;&#x6355;&#x6349;&#x3002;&#x5982;&#x679c;&#x6ca1;&#x6709;&#x8fd9;&#x6837;&#x7684;&#x5757;&#x6355;&#x6349;&#xff0c;&#x884c;&#x4e3a;&#x53d6;&#x51b3;&#x4e8e;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002",{"_index":5060,"title":{},"body":{"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{}}}],["x88ab;&#x62fc;&#x5199;&#x4e3a",{"_index":1134,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x88ab;&#x63a5;&#x53d7;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x662f;&#x5173;&#x4e8e;&#x5b8f;&#x53c2;&#x6570;&#xff08;&#x7b2c;9.2&#x8282;&#xff09;&#x4e2d;&#x89e3;&#x91ca;&#x7684;&#x4e00;&#x4e2a;&#x5408;&#x4e4e;&#x903b;&#x8f91;&#x7684;&#x7ed3;&#x8bba;&#xff1a;&#x53c2;&#x6570;&#x8868;&#x8fbe;&#x5f0f;&#x4ece;&#x4e0d;&#x88ab;&#x7c7b;&#x578b;&#x5316;&#xff0c;&#x6240;&#x4ee5;&#x5b83;&#x4e0d;&#x53ef;&#x80fd;&#x8ba9;&#x7f16;&#x8bd1;&#x5668;&#x4f7f;&#x7528;&#x5408;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09;&#x68c0;&#x67e5;&#x5b83;&#x4eec;&#x7684;&#x517c;&#x5bb9;&#x6027;&#x3002",{"_index":6327,"title":{},"body":{"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{}}}],["x88ab;&#x663e;&#x5f0f;&#x5bfc;&#x5165;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":4300,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x88ab;&#x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x5316;&#x4e3a",{"_index":4471,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["x88ab;&#x6d89;&#x53ca;&#x7684;&#x65f6;&#x5019;&#x53ef;&#x7528;&#x3002;&#x5426;&#x5219;&#xff0c;&#x6216;&#x8005;&#x5982;&#x679c;&#x5b57;&#x6bb5;&#x6ca1;&#x6709;&#x6587;&#x6863;&#xff0c;&#x503c;&#x4e3a",{"_index":6227,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x88ab;&#x6d89;&#x53ca;&#x7684;&#x65f6;&#x5019;&#x624d;&#x53ef;&#x7528;&#x3002;&#x5426;&#x5219;&#xff0c;&#x6216;&#x8005;&#x5982;&#x679c;&#x6784;&#x9020;&#x51fd;&#x6570;&#x6ca1;&#x6709;&#x6587;&#x6863;&#xff0c;&#x503c;&#x4e3a;null&#x3002",{"_index":6240,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x88ab;&#x6d89;&#x53ca;&#x7684;&#x65f6;&#x5019;&#x624d;&#x53ef;&#x7528;&#x3002;&#x5426;&#x5219;&#xff0c;&#x6216;&#x8005;&#x5982;&#x679c;&#x7c7b;&#x578b;&#x6ca1;&#x6709;&#x6587;&#x6863;&#xff0c;&#x503c;&#x4e3a",{"_index":6197,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x88ab;&#x7528;&#x4e8e;&#x8868;&#x793a;&#x521b;&#x5efa;&#x4e00;&#x4e2a",{"_index":2970,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x88ab;&#x7ea6;&#x675f;&#x4e3a",{"_index":3597,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x88ab;&#x89e3;&#x6790;&#x5230",{"_index":3368,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x88ab;&#x8bbf;&#x95e",{"_index":4204,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x88ab;&#x8bc4;&#x4f30",{"_index":2125,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#表达式":{}}}],["x88ab;&#x8c03;&#x7528;&#xff0c;x++&#x4f5c;&#x4e3a;&#x53c2;&#x6570;&#xff0c;&#x5e76;&#x56e0;&#x6b64;&#x4f7f;&#x7528;&#x8868;&#x8fbe;&#x5f0f;&#x5177;&#x4f53;&#x5316;&#xff08;&#x7b2c;9.3.1&#x8282;&#xff09;&#x8fd4;&#x56d",{"_index":6356,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["x88ab;&#x8d4b;&#x503c;&#x4e3a",{"_index":3048,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x88ab;&#x8fd4;&#x56d",{"_index":5561,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x88ab;&#x8fd4;&#x56de;&#x3002;&#x7ed3;&#x679c;&#x53ef;&#x80fd;&#x548c",{"_index":3370,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x88ab;haxe.template&#x5728;&#x8fd9;&#x91cc;&#x4f7f;&#x7528;&#x7684;&#xff0c;&#x6765;&#x786e;&#x5b9a;make&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x662f;&#x56e0;&#x4e3a;&#x65b9;&#x6cd5;&#x8c03;&#x7528;&#x4e3a",{"_index":4016,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x8981;&#x4ece;&#x4ee3;&#x7801;&#x4e2d;&#x5206;&#x79bb;&#x5185;&#x5bb9;&#xff0c;&#x8003;&#x8651;&#x4f7f;&#x7528;&#x8d44;&#x6e90;&#x5d4c;&#x5165;&#x7cfb;&#x7edf;&#xff08;&#x7b2c;8.4&#x8282;&#xff09;&#x3002;&#x5b58;&#x653e;&#x6a21;&#x677f;&#x5185;&#x5bb9;&#x5230;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x6587;&#x6863;&#xff0c;&#x53eb;&#x505a",{"_index":2166,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["x8981;&#x4f7f;&#x5b83;&#x7528;&#x4e8e;neko&#x76ee;&#x6807;&#x5e73;&#x53f0;&#xff0c;&#x8bbe;&#x7f6e;&#x4e00;&#x4e2a;neko",{"_index":1465,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["x8981;&#x5168;&#x5c40;&#x542f;&#x52a8;&#x4e00;&#x4e2a;&#x5206;&#x6790;&#x4eea;&#x6a21;&#x5757;&#xff0c;&#x4f7f;&#x7528",{"_index":6271,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x8981;&#x56de;&#x7b54;&#x7b2c;&#x4e00;&#x4e2a;&#x95ee;&#x9898;&#xff0c;&#x901a;&#x5e38;&#x901a;&#x8fc7",{"_index":709,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x8981;&#x5728;&#x4e00;&#x4e2a;&#x6a21;&#x677f;&#x4e2d;&#x5305;&#x62ec;&#x53e6;&#x4e00;&#x4e2a;&#x6a21;&#x677f;&#xff0c;&#x4f20;&#x9012;&#x5b50;&#x6a21;&#x677f;&#x7ed3;&#x679c;&#x5b57;&#x7b26;&#x4e32;&#x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x3002",{"_index":2146,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#子模板":{}}}],["x8981;&#x5728;&#x6d4b;&#x8bd5;&#x4e4b;&#x524d;&#x6216;&#x4e4b;&#x540e;&#x8fd0;&#x884c;&#x4ee3;&#x7801;&#xff0c;&#x53ef;&#x4ee5;&#x91cd;&#x8f7d;testcas",{"_index":1569,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{}}}],["x8981;&#x5bf9;&#x4e00;&#x4e2a;&#x7ed9;&#x5b9a;&#x7684;&#x7c7b;&#x578b;&#x6216;&#x8005;&#x5b57;&#x6bb5;&#x542f;&#x52a8;&#x4e00;&#x4e2a;&#x5206;&#x6790;&#x4eea;&#x6a21;&#x5757;&#xff0c;&#x4f7f;&#x7528",{"_index":6275,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x8981;&#x68c0;&#x7d22;&#x4e00;&#x4e2a;&#x5d4c;&#x5165;&#x7684;&#x8d44;&#x6e90;&#x7684;&#x5185;&#x5bb9;&#xff0c;&#x6211;&#x4eec;&#x4f7f;&#x7528",{"_index":6135,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{}}}],["x8981;&#x6bd4;&#x8f83;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#xff0c;&#x4f7f;&#x7528;&#x53cc;&#x5f15;&#x53f7",{"_index":2140,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["x8981;&#x6c42;&#x88ab;&#x4fee;&#x9970;&#x7684;&#x5b57;&#x6bb5;&#x58f0;&#x660e;&#x4e5f;&#x540c;&#x65f6;&#x51fa;&#x73b0;&#x5728;&#x7236;&#x7c7b;&#xff08;&#x7b2c;2.3.2&#x8282;&#xff09;&#x4e2d;&#x3002;&#x5b83;&#x7684;&#x76ee;&#x7684;&#x662f;&#x786e;&#x4fdd;&#x7c7b;&#x7684;&#x4f5c;&#x8005;&#x610f;&#x8bc6;&#x5230",{"_index":4725,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["x8981;&#x83b7;&#x5f97;&#x6700;&#x4f73;&#x7684;&#x7f16;&#x8bd1;&#x548c;&#x5b8c;&#x6210;&#x901f;&#x5ea6;&#xff0c;&#x4f60;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":6080,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x8981;&#x8de8;&#x57df;&#x4f7f;&#x7528;remoting&#xff0c;&#x9700;&#x8981;&#x901a;&#x8fc7;&#x5728",{"_index":1505,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{}}}],["x8981;&#x8fd0;&#x884c;&#x6d4b;&#x8bd5;&#xff0c",{"_index":1555,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}}}],["x89c4;&#x5219",{"_index":2997,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x89c4;&#x8303;&#x9762;&#x5411;&#x5bf9;&#x8c61;&#x7684;&#x8bed;&#x6cd5;&#x7f16;&#x5199;&#x7f16;&#x8bd1;&#x7a0b;&#x5e8f;&#x5230;&#x591a;&#x79cd;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002;&#x5f97;&#x76ca;&#x4e8e;&#x9002;&#x5f53;&#x7684;&#x62bd;&#x8c61;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x7ef4;&#x62a4;&#x4e00;&#x4e2a;&#x5355;&#x4e00;&#x57fa;&#x7840;&#x4ee3;&#x7801;&#xff0c;&#x5e76;&#x652f;&#x6301;&#x7f16;&#x8bd1;&#x5230;&#x591a;&#x79cd;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002",{"_index":1000,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x89e3;&#x6790;&#x7684;&#x6587;&#x4ef6",{"_index":6095,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x89e3;&#x6790;&#x987a;&#x5e8f;&#x4e00;&#x88ab;&#x5f15;&#x5165;&#x5c31;&#x6d89;&#x53ca;&#x5230;&#x4e0d;&#x53d7;&#x9650;&#x5236;&#x7684;&#x6807;&#x8bc6;&#x7b26",{"_index":4273,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x89e3;&#x6790;&#x987a;&#x5e8f;&#xff08;&#x7b2c;3.7.3&#x8282;&#xff09;&#xff09;&#x3002",{"_index":4186,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x89e6;&#x53d1;&#x7ed1;&#x5b9a",{"_index":3683,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x8b66;&#x544a;&#x548c;&#x5176;&#x5b83;&#x7684;&#x6d88;&#x606f;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x9519;&#x8bef;&#xff0c;&#x4f46;&#x662f;&#x662f;&#x4e0d;&#x81f4;&#x547d;&#x7684;&#x3002;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x4e0d;&#x81f4;&#x547d;&#x7684;&#x9519;&#x8bef;&#x53d1;&#x751f;&#xff0c;&#x5b83;&#x4f1a;&#x53d1;&#x9001;&#x4e00;&#x4e2a;&#x5355;&#x884c;&#x7684",{"_index":6110,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x8ba1;&#x7b97;&#x5143;&#x7d20;&#x7684;&#x6570;&#x91cf;&#x3002;&#x5982;&#x679c;&#x53ef;&#x8fed;&#x4ee3;&#x7684;&#x662f;&#x4e00;&#x4e2a",{"_index":2031,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x8ba4;&#x53ef;&#x4e24;&#x4e2a;&#x503c",{"_index":5494,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{}}}],["x8bb8;&#x53ef;&#x3002;&#x57fa;&#x4e8",{"_index":1086,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{}}}],["x8bb8;&#x591a;&#x8fd0;&#x884c;&#x65f6;&#x503c;&#x53ef;&#x4ee5;&#x88ab;&#x5e8f;&#x5217;&#x5316;&#x6216;&#x53cd;&#x5e8f;&#x5217;&#x5316;&#xff0c;&#x4f7f;&#x7528",{"_index":2417,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x8bbe;&#x7f6",{"_index":3006,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8bbe;&#x7f6e;&#x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664;&#xff08;&#x7b2c;8.2&#x8282;&#xff09;&#x6a21;&#x5f0f;&#xff08;&#x9ed8;&#x8ba4;&#x4e3a",{"_index":958,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x8bbe;&#x7f6e;&#x76ee;&#x6807;&#x7684;.net&#x7248;&#x672c",{"_index":987,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x8bbe;&#x7f6e;&#x76ee;&#x6807;&#x7684;java&#x7248;&#x672c",{"_index":984,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x8bbf;&#x95ee",{"_index":4343,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x8bbf;&#x95ee;&#x3002",{"_index":4532,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x8bbf;&#x95ee;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x57df;&#x540d;&#x7684;&#x670d;&#x52a1;&#x5668;&#xff0c;&#x8bbe;&#x7f6e;&#x670d;&#x52a1;&#x5668;&#x4e0a;&#x4e00;&#x4e2a",{"_index":1514,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{}}}],["x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26",{"_index":4724,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26;&#x6b63;&#x5e38;&#x7684;&#x5de5;&#x4f5c;&#x5c31;&#x50cf;get",{"_index":4442,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26;&#x88ab;&#x58f0;&#x660e;&#x4e3a;&#x79c1;&#x6709;&#x3002;&#x8fd9;&#x4f1a;&#x5bfc;&#x81f4;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x53ea;&#x80fd;&#x4ece;&#x5b9a;&#x4e49;&#x5b83;&#x7684;&#x8fd9;&#x4e2a;&#x6a21;&#x5757;&#x5185;&#x90e8;&#x76f4;&#x63a5;&#x8fdb;&#x884c;&#x8bbf;&#x95ee;&#x3002;&#x79c1;&#x6709;&#x7c7b;&#x578b;&#x4e0d;&#x50cf;&#x516c;&#x5f00;&#x7c7b;&#x578b;&#xff0c;&#x4e0d;&#x4f1a;&#x6210;&#x4e3a;&#x5b83;&#x4eec;&#x6240;&#x5728;&#x7684;&#x5305;&#x7684;&#x6210;&#x5458;&#x3002",{"_index":4126,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26;&#xff0c;&#x4f7f;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x5728;&#x5404;&#x5904;&#x8bbf;&#x95ee;&#x3002",{"_index":4635,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["x8bbf;&#x95ee;&#x5143;&#x7d20;&#x548c;&#x503c",{"_index":2370,"title":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}},"body":{}}],["x8bbf;&#x95ee;&#x63a7;&#x5236",{"_index":567,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x8bbf;&#x95ee;&#x63a7;&#x5236;&#x4fee;&#x9970;&#x4f7f;&#x5f97",{"_index":5334,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x8bbf;&#x95ee;&#x63a7;&#x5236;&#x7684;&#x7279;&#x6027;&#x4f7f;&#x7528",{"_index":5339,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x8bbf;&#x95ee;&#x63a7;&#x5236;&#x8bed;&#x8a00;&#x7279;&#x6027;&#x4f7f;&#x7528;haxe&#x5143;&#x6570;&#x636e;&#x8bed;&#x6cd5;&#x6765;&#x7981;&#x6b62;&#x6216;&#x8005;&#x5141;&#x8bb8;&#x8bbf;&#x95ee;&#x7c7b;&#x6216;&#x8005;&#x5b57;&#x6bb5;&#x3002",{"_index":569,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x8bbf;&#x95ee;&#x6807;&#x8bc6;&#x7b26;&#x5b9a;&#x4e49;&#x5f53;&#x5b57;&#x6bb5;&#x88ab;&#x8bfb;&#x53d6;&#xff08;&#x7b2c;&#x4e00;&#x4e2a;&#x6807;&#x8bc6;&#x7b26;&#xff09;&#x7684;&#x884c;&#x4e3a;&#xff0c;&#x548c;&#x5199;&#x5165;&#x7684;&#x884c;&#x4e3a;&#xff08;&#x7b2c;&#x4e8c;&#x4e2a;&#x6807;&#x8bc6;&#x7b26;&#xff09;&#x3002;&#x63a5;&#x53d7;&#x7684;&#x503c;&#x4e3a;&#xff1a",{"_index":4530,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x8bbf;&#x95ee;&#x6807;&#x8bc6;&#x7b26;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x786e;&#x4fdd;gett",{"_index":4438,"title":{},"body":{"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{}}}],["x8bbf;&#x95ee;&#xff0c;&#x5982;&#x4e0b;&#xff1a",{"_index":3003,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8bbf;&#x95ee;&#xff1a",{"_index":6148,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["x8bbf;&#x95ee;/&#x751f;&#x6210;/&#x4fee;&#x6539;&#x3002",{"_index":5345,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x8be6;&#x7ec6;&#x4e86;&#x89e3;&#x5217;&#x8868;&#x65b9;&#x6cd5;&#x3002",{"_index":1659,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{}}}],["x8be6;&#x7ec6;&#x4e86;&#x89e3;&#x5b83;&#x7684;&#x65b9;&#x6cd5;&#x3002",{"_index":1725,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["x8be6;&#x7ec6;&#x4e86;&#x89e3;&#x5b83;&#x7684;&#x7c7b;&#x3002",{"_index":1478,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化":{}}}],["x8be6;&#x7ec6;&#x63cf;&#x8ff0;&#x4e86;&#x4e00;&#x4e9b",{"_index":1023,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x8bed;&#x4e49;&#x88ab;&#x9650;&#x5236;&#x4e3a;&#x6240;&#x6709;&#x7684;&#x5b57;&#x6bb5;&#x517c;&#x5bb9;&#x8be5;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#xff1a",{"_index":3066,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x8bed;&#x53e5;&#x4e2d;&#xff0c;hax",{"_index":3091,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x8bed;&#x53e5;&#x7684;&#x8f93;&#x51fa;&#x6709;&#x975e;&#x5e38;&#x5f3a;&#x7684;&#x76f8;&#x4f3c;&#xff0c;&#x4f46;&#x4e5f;&#x6709;&#x5fae;&#x5999;&#x7684;&#x533a;&#x522b;&#xff1a",{"_index":3080,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x8bed;&#x53e5;&#x7684;&#x9ad8;&#x7ea7;&#x4fe1;&#x606f;&#x5c06;&#x5728",{"_index":2890,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x8bed;&#x53e5;&#xff08;&#x7b2c;5.17&#x8282;&#xff09",{"_index":2881,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x8bed;&#x6cd5;&#x548c;&#x7c7b;&#x7684;&#x76f8;&#x4f3c;&#xff0c;&#x4f46;&#x6709;&#x4ee5;&#x4e0b;&#x4f8b;&#x5916;&#xff1a",{"_index":2729,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x8bed;&#x6cd5;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x5e76;&#x4e0d;&#x603b;&#x662f;&#x53ef;&#x884c;&#xff0c;&#x53ef;&#x80fd;&#x4e22;&#x5931;&#x4e00;&#x4e9b;&#x91cd;&#x8981;&#x4fe1;&#x606f;&#x3002;&#x6211;&#x4eec;&#x5efa;&#x8bae;&#x5c0f;&#x5fc3;&#x4f7f;&#x7528;&#x3002",{"_index":6628,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["x8bed;&#x6cd5;&#xff1a",{"_index":4969,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{}}}],["x8bed;&#x8a00;&#x53c2;&#x8003;&#x3002",{"_index":1026,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x8bed;&#x8a00;&#x7279;&#x6027;&#xff08;&#x7b2c;6&#x7ae0;&#xff09",{"_index":1022,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x8bfb;&#x53d6;&#x8bbf;&#x95ee;&#x548c;&#x5199;&#x5165;&#x8bbf;&#x95ee;&#x76f4;&#x63a5;&#x53cd;&#x6620;&#x5728;&#x8bed;&#x6cd5;&#x5f62;&#x5f0f;&#xff0c;&#x5982;&#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#xff1a",{"_index":4521,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x8bfb;&#x53d6;&#x8bbf;&#x95ee;&#x6216;&#x8005;&#x5199;&#x5165;&#x8bbf;&#x95ee;&#x6807;&#x8bc6;&#x7b26;&#x4e3a;default&#x6216;&#x8005;nul",{"_index":4412,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x8bfb;&#x53d6;&#xff0c;&#x4e0d;&#x53ef;&#x5199;&#x5165",{"_index":4344,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x8bfb;&#x8bbf;&#x95ee;&#xff08;&#x7b2c;4.2&#x8282;&#xff09",{"_index":3121,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x8c03;&#x7528",{"_index":5285,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x8c03;&#x7528;&#x3002;&#x4f8b;&#x5982;&#xff0c;&#x56e0;&#x4e3a;&#x6240;&#x6709;&#x5b8f;&#x5206;&#x4eab;&#x540c;&#x6837;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#xff08;&#x7b2c;9.1&#x8282;&#xff09;&#xff0c;&#x4e00;&#x4e2a;&#x521d;&#x59cb;&#x5316;&#x5b8f;&#x53ef;&#x4ee5;&#x8bbe;&#x7f6e;&#x5176;&#x5b83;&#x5b8f;&#x7528;&#x4f5c;&#x914d;&#x7f6e;&#x7684;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x7684;&#x503c;&#x3002",{"_index":6615,"title":{},"body":{"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{}}}],["x8c03;&#x7528;&#x4e2d",{"_index":3687,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x8c03;&#x7528;&#x4e86;&#x539f;&#x6765;&#x7684;&#x51fd;&#x6570;&#xff0c;&#x8fd4;&#x56de;&#x5b57;&#x7b26;&#x4e32",{"_index":4737,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["x8c03;&#x7528;&#x53c2;&#x6570;&#x5b8c;&#x6210",{"_index":6124,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["x8c03;&#x7528;&#x53c2;&#x6570;&#x5b8c;&#x6210;&#x5728;&#x4e00;&#x4e2a;&#x5f00;&#x53e3;&#x7684;&#x62ec;&#x53f7;&#x5b57;&#x7b26",{"_index":5951,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["x8c03;&#x7528;&#x53c2;&#x6570;&#xff08;&#x7b2c;8.3.3&#x8282;&#xff09;&#xff1a;&#x62a5;&#x544a;&#x5f53;&#x524d;&#x88ab;&#x8c03;&#x7528;&#x7684;&#x51fd;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":5901,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x8c03;&#x7528;&#x5b83;&#x4eec;&#x7684;&#x9759;&#x6001",{"_index":2421,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["x8c03;&#x7528;&#x5b8c;&#x6210;&#x3002;&#x8f93;&#x51fa;&#x5982;&#x4e0b;&#xff1a",{"_index":6025,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["x8c03;&#x7528;&#x8fdc;&#x7a0b;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x7684;&#x65b9;&#x6cd5;&#xff0c;&#x5e76;&#x83b7;&#x5f97;&#x7ed3;&#x679c;&#x3002;&#x5f02;&#x6b65;&#x8fde;&#x63a5;&#x63a5;&#x53d7;&#x4e00;&#x4e2a;&#x9644;&#x52a0;&#x7684;&#x51fd;&#x6570;&#x53c2;&#x6570;&#xff0c;&#x5728;&#x7ed3;&#x679c;&#x83b7;&#x5f97;&#x4e4b;&#x540e;&#x88ab;&#x8c03;&#x7528;&#x3002",{"_index":1459,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["x8d1f;&#x65e0;&#x7a77",{"_index":2220,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x8d44;&#x6e90",{"_index":752,"title":{},"body":{"8.编译器功能/8.编译器功能.html#8-编译器功能":{}}}],["x8d44;&#x6e90;&#x88ab;&#x4f5c;&#x4e3a;&#x5b57;&#x7b26;&#x4e32;&#x5b58;&#x50a8;&#x5230",{"_index":6163,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["x8d44;&#x6e90;&#x88ab;&#x5305;&#x542b;&#x5230;&#x7f16;&#x8bd1;&#x540e;&#x7684;&#x7a0b;&#x5e8f;&#x96c6",{"_index":6157,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["x8d44;&#x6e90;&#x88ab;&#x5305;&#x88c5;&#x8fdb;&#x7ed3;&#x679c;&#x7684;jar",{"_index":6158,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["x8d44;&#x6e90;&#x88ab;&#x5982;bytearray&#x5b9a;&#x4e49;&#x5d4c;&#x5165",{"_index":6156,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["x8d44;&#x6e90;&#x88ab;&#x5b58;&#x50a8;&#x5230;&#x5168;&#x5c40;&#x7684;&#x5b57;&#x8282;&#x6570;&#x7ec4;&#x5e38;&#x91cf",{"_index":6160,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["x8d44;&#x6e90;&#x88ab;&#x5e8f;&#x5217;&#x5316;&#x4e3a;haxe&#x5e8f;&#x5217;&#x5316;&#x683c;&#x5f0f;&#xff0c;&#x5e76;&#x5b58;&#x50a8;&#x5230",{"_index":6161,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{}}}],["x8d4b;&#x503c",{"_index":3947,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x8d77;&#xff0c;&#x5c31;&#x4e0d;&#x80fd;&#x5728;&#x8bed;&#x6cd5;&#x4e2d;&#x8868;&#x8fbe;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#xff0c;&#x800c;&#x4e14;&#x4e5f;&#x6ca1;&#x6709;&#x5fc5;&#x8981;&#x8fd9;&#x4e48;&#x505a;&#x3002",{"_index":2850,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x8d77;&#xff0c;&#x8fd9;&#x4e0d;&#x5305;&#x62ec;&#x7ea6;&#x675f;&#xff08;&#x7b2c;3.2.1&#x8282;&#xff09;&#x3002",{"_index":6231,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x8d77;&#xff1a",{"_index":6266,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x8def;&#x5f84;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":4245,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x8f6c;&#x50a8;&#x7c7b;&#x4f9d;&#x8d56;&#x5173;&#x7cfb;&#x5230;&#x4e00;&#x4e2a;&#x8f6c;&#x50a8;&#x76ee;&#x5f55",{"_index":972,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x8f6c;&#x6362;&#x4e3a;&#x5b57;&#x7b26;&#x4e32;&#x7684;&#x5b9e;&#x9645;&#x503c",{"_index":1576,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{}}}],["x8f6c;&#x6362;&#xff08;&#x7b2c;2.8.1&#x8282;&#xff09;&#x7684;&#x6570;&#x7ec4;&#x3002",{"_index":6216,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x8f6c;&#x6362;&#xff0c;&#x53bb;&#x5230;6",{"_index":3269,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x8f6c;&#x6362;iter",{"_index":2028,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x8f93;&#x5165",{"_index":721,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x8f93;&#x5165;/&#x8f93;&#x51fa",{"_index":78,"title":{},"body":{"10.标准库/10.标准库.html#10-标准库":{}}}],["x8f93;&#x51fa",{"_index":728,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x8f93;&#x51fa;&#x5185;&#x5bb9;&#x663e;&#x793a;&#xff0c;&#x51fd;&#x6570;&#x8c03;&#x7528;&#x4e2d;&#x88ab;&#x7701;&#x7565;&#x7684;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x7684;&#x503c;&#x4e3a",{"_index":3033,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x8f93;&#x51fa;&#x5e2e;&#x52a9;&#x6211;&#x4eec;&#x7406;&#x89e3",{"_index":4347,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x8f93;&#x51fa;&#x5e94;&#x8be5;&#x662f;&#x4ec0;&#x4e48;&#xff1f",{"_index":708,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["x8f93;&#x51fa;&#x662f;&#x7ecf;&#x8fc7;html&#x8f6c;&#x4e49;&#x7684;&#xff0c;&#x6240;&#x4ee5",{"_index":5913,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x8f93;&#x51fa;&#x6765;&#x770b;&#x4e00;&#x4e0b;&#x4ee3;&#x7801;&#x5982;&#x4f55;&#x751f;&#x6210;&#xff1a",{"_index":3442,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x8f93;&#x51fa;&#x7684;&#x65f6;&#x5019;&#x4f1a;&#x5f88;&#x660e;&#x663e;&#xff1a",{"_index":3259,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x8f93;&#x51fa;&#x7c7b;&#x578b",{"_index":1006,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["x8f93;&#x51fa;&#xff1a",{"_index":1621,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["x8f93;&#x51fa;c++&#x6e90;&#x4ee3;&#x7801;&#x6587;&#x4ef6;&#x540d;&#x540e;&#x7f00",{"_index":975,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["x8fd0;&#x7b97;&#x7b26",{"_index":2511,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x8fd0;&#x7b97;&#x7b26;&#x53ef;&#x4ee5;&#x88ab;&#x4f7f;&#x7528;&#xff0c;&#x4f46;&#x662f;&#x4e0d;&#x5904;&#x7406;&#x8fd0;&#x7b97;&#x7b26;&#x4f18;&#x5148;&#x7ea7;&#x3002;&#x56e0;&#x6b64;&#x9700;&#x8981;&#x9700;&#x8981;&#x628a;&#x6bcf;&#x4e2a;&#x64cd;&#x4f5c;&#x653e;&#x5165;&#x62ec;&#x53f7",{"_index":2134,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{}}}],["x8fd0;&#x7b97;&#x7b26;&#x7684;&#x8fd0;&#x7b97;&#x7b26;&#x3002;&#x7528;&#x6cd5;&#x5728;&#x7b2c;17&#x884c;&#x663e;&#x793a;&#xff0c;&#x7f16;&#x8bd1;&#x5230",{"_index":3309,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x8fd0;&#x7b97;&#x7b26;&#x91cd;&#x8f7d;&#x5b57;&#x6bb5;&#xff08;&#x7b2c;2.8.2&#x8282;&#xff09",{"_index":3468,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x8fd0;&#x884c;&#x5355;&#x5143;&#x6d4b;&#x8bd5",{"_index":1554,"title":{"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}},"body":{}}],["x8fd0;&#x884c;&#x65f6;&#x7c7b;&#x578b;&#x4fe1;&#x606f",{"_index":753,"title":{},"body":{"8.编译器功能/8.编译器功能.html#8-编译器功能":{}}}],["x8fd4;&#x56de",{"_index":1784,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{}}}],["x8fd4;&#x56de;&#x4e00;&#x4e2a",{"_index":5743,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x5230;&#x6307;&#x5b9a;url&#x7684;&#x5f02;&#x6b65;&#x8fde;&#x63a5;&#xff0c;&#x53ef;&#x4ee5;&#x8fde;&#x63a5;&#x5230;&#x4e00;&#x4e2a;haxe&#x670d;&#x52a1;&#x7aef;&#x5e94;&#x7528;&#x3002",{"_index":1432,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["x8fd4;&#x56de;&#x503c",{"_index":2515,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x8fd4;&#x56de;&#x5b57;&#x7b26;&#x4e32",{"_index":4739,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{}}}],["x8fd4;&#x56de;&#x7684;&#x5bf9;&#x8c61;&#x7684;&#x7c7b;&#x578b;&#x662f",{"_index":1312,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["x8fd4;&#x56de;&#x8fd9;&#x4e2a;&#x5b50;&#x4e32;&#x5728;&#x539f;&#x5b57;&#x7b26;&#x4e32;&#x4e2d;&#x7684;&#x4f4d;&#x7f6e;&#xff1a",{"_index":1789,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["x8fd4;&#x56de;void&#xff0c;&#x8fd9;&#x662f;&#x4e0d;&#x53ef;&#x80fd;&#x7684;&#x3002",{"_index":4424,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x8fd8;&#x53ef;&#x4ee5;&#x4e3a;&#x533f;&#x540d;&#x7ed3;&#x6784;&#x4f7f;&#x7528",{"_index":2918,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x8fd8;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":5568,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x8fd8;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x5177;&#x4f53;&#x5316;&#x6765;&#x83b7;&#x53d6;&#x4e00;&#x4e2a",{"_index":6427,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["x8fd8;&#x53ef;&#x4ee5;&#x6839;&#x636e;&#x533f;&#x540d;&#x7ed3;&#x6784;&#x7684;&#x5b57;&#x6bb5;&#x548c;&#x5b9e;&#x4f8b;&#x8fdb;&#x884c;&#x5339;&#x914d;&#xff1a",{"_index":5584,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{}}}],["x8fd8;&#x53ef;&#x4ee5;&#x7701;&#x7565",{"_index":3326,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x8fd8;&#x53ef;&#x4ee5;&#x770b;&#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#xff0c;&#x4e86;&#x89e3;&#x66f4;&#x591a;&#x53c2;&#x6570;&#x548c;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x7684;&#x77e5;&#x8bc6;&#xff1a",{"_index":4576,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x8fd8;&#x6709;&#x4e00;&#x4e2a;&#x666e;&#x901a;&#x7684;&#x51fd;&#x6570",{"_index":2806,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x8fd9;&#x4e2a",{"_index":4815,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x4e2d;&#x7684",{"_index":3433,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x5c55;&#x793a;&#x4e86;&#x6761;&#x4ef6;&#x7f16;&#x8bd1;&#x7684;&#x7528;&#x6cd5;&#xff1a",{"_index":5263,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x6f14;&#x793a;&#x4e86",{"_index":2053,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x6f14;&#x793a;&#x4e86;lambda&#x7684",{"_index":2047,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["x8fd9;&#x4e2a;&#x5173;&#x7cfb;&#x901a;&#x5e38;&#x88ab;&#x79f0;&#x4e3a",{"_index":2767,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x8fd9;&#x4e2a;&#x5b8f;&#x662f;main",{"_index":6592,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x8fd9;&#x4e2a;&#x6587;&#x6863;&#x592a;&#x65e7;&#x4e86",{"_index":3068,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x8fd9;&#x4e2a;&#x670d;&#x52a1;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x521b;&#x5efa;&#x548c;&#x5171;&#x4eab;&#x4e00;&#x4e2a;api",{"_index":1456,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{}}}],["x8fd9;&#x4e2a;&#x793a;&#x4f8b;&#x548c;&#x524d;&#x9762",{"_index":3045,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x8fd9;&#x4e2a;&#x7b26;&#x53f7;&#x5141;&#x8bb8;&#x4f7f;&#x7528;&#x4efb;&#x610f;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x4f46;&#x662f;&#x5728;&#x7c7b;&#x578b;&#x7ea7;&#x522b;&#xff0c;&#x53ea;&#x6709;&#x67d0;&#x4e2a;&#x7ec4;&#x5408;&#x88ab;&#x627f;&#x8ba4;&#xff1a",{"_index":5230,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x517c;&#x5bb9;&#x6240;&#x6709;&#x7684;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x3002;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#xff0c",{"_index":2866,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{}}}],["x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x517c;&#x5bb9;&#x6240;&#x6709;&#x7c7b;&#x578b;&#xff0c;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x6240;&#x6709;&#x7c7b;&#xff08;&#x800c;&#x4e0d;&#x662f;&#x5b83;&#x4eec;&#x7684;&#x5b9e;&#x4f8b;&#xff09;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x7ed9;&#x5b83;&#x3002;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#xff0c",{"_index":2809,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x5b9e;&#x7528;&#x4e3a;&#x4e00;&#x4e2a;&#x6700;&#x7ec8;&#x7684;&#x51fd;&#x6570;&#x53c2;&#x6570;&#xff0c;&#x6765;&#x4f7f;&#x4f20;&#x9012;&#x4e00;&#x4e2a;&#x989d;&#x5916;&#x7684;&#x8c03;&#x7528;&#x53c2;&#x6570;&#x4efb;&#x610f;&#x7684;&#x6570;&#x503c;&#x5230;&#x51fd;&#x6570;&#x3002;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x53ef;&#x4ee5;&#x88ab;&#x4f7f;&#x7528;&#x6765;&#x9650;&#x5236;&#x8fd9;&#x4e9b;&#x53c2;&#x6570;&#x4e3a;&#x67d0;&#x4e2a;&#x7279;&#x5b9a;&#x7c7b;&#x578b;&#x3002",{"_index":5414,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x8fd9;&#x4e2a;&#x7c7b;&#x6784;&#x9020;&#x51fd;&#x6570;&#x6ca1;&#x6709;&#x88ab;&#x8c03;&#x7528;&#x3002;&#x6700;&#x7ec8;&#xff0c;&#x5b9e;&#x4f8b;&#x5b57;&#x6bb5;&#x6839;&#x636e;&#x5e8f;&#x5217;&#x5316;&#x7684;&#x503c;&#x88ab;&#x8bbe;&#x7f6e;&#x3002",{"_index":2459,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x8fd9;&#x4e2a;&#x8bed;&#x6cd5;&#x540c;&#x6837;&#x7528;&#x4e8e;&#x8bbf;&#x95ee;&#x5305;&#x4e2d;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x5f62;&#x5f0f;&#x4e3a",{"_index":5218,"title":{},"body":{"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{}}}],["x8fd9;&#x4e2a;&#x8bed;&#x6cd5;&#x8ba9;&#x4eba;&#x8054;&#x60f3;&#x5230;&#x7c7b;&#xff0c;&#x8bed;&#x4e49;&#x4e0a;&#x5b83;&#x4eec;&#x4e8b;&#x5b9e;&#x7684;&#x786e;&#x975e;&#x5e38;&#x76f8;&#x4f3c;&#x3002;&#x5b9e;&#x9645;&#x4e0a;&#xff0c;&#x6bcf;&#x4e2a;&#x5728;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x201c;&#x4f53;&#x201d;&#x4e2d;&#x7684;&#xff08;&#x5373;&#x6240;&#x6709;&#x82b1;&#x62ec;&#x53f7;&#x4e4b;&#x540e;&#x7684;&#x4e00;&#x5207;&#xff09;&#x90fd;&#x88ab;&#x89e3;&#x6790;&#x4e3a;&#x7c7b;&#x5b57;&#x6bb5;&#x3002;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x6709",{"_index":3538,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x8fd9;&#x4e2a;&#x8fc7;&#x7a0b;&#x6709;&#x8bb8;&#x591a;&#x548c;&#x7f16;&#x8bd1;&#x65f6;&#x7684;&#x5408;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09;&#x884c;&#x4e3a;&#x7684;&#x76f8;&#x4f3c;&#x4e4b;&#x5904;&#x3002;&#x7136;&#x800c;&#xff0c;&#x56e0;&#x4e3a;&#x68c0;&#x67e5;&#x5fc5;&#x987b;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x8fdb;&#x884c;&#xff0c;&#x6240;&#x4ee5;&#x6709;&#x51e0;&#x4e2a;&#x9650;&#x5236;&#xff1a",{"_index":4977,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["x8fd9;&#x4e2a;&#x9650;&#x5236;&#x5ef6;&#x4f38;&#x5230;&#x6240;&#x6709",{"_index":2686,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x8fd9;&#x4e5f;&#x662f;&#x4e00;&#x4e2a;&#x533f;&#x540d;&#x7ed3;&#x6784",{"_index":3001,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8fd9;&#x4e9b;&#x5143;&#x6570;&#x636e;&#x4fe1;&#x606f;&#x53ef;&#x4ee5;&#x88ab;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x83b7;&#x5f97;&#xff0c;&#x901a;&#x8fc7",{"_index":5815,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x8fd9;&#x4e9b;&#x5b8f;&#x6267;&#x884c;&#x7684;&#x987a;&#x5e8f;&#x662f;&#x672a;&#x5b9a;&#x4e49;&#x7684;&#xff0c;&#x5728;&#x6784;&#x5efa;&#x987a;&#x5e8f;&#xff08;&#x7b2c;9.6.3&#x8282;&#xff09;&#x4e2d;&#x8be6;&#x8ff0;&#x3002",{"_index":6520,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x8fd9;&#x4e9b;&#x8f6c;&#x6362;&#x88ab;&#x79f0;&#x4e3a;&#x4e0d;&#x5b89;&#x5168;&#x7684;&#xff0c;&#x56e0;&#x4e3a;&#x65e0;&#x6548;&#x8f6c;&#x6362;&#x7684;&#x8fd0;&#x884c;&#x65f6;&#x884c;&#x4e3a;&#x6ca1;&#x6709;&#x88ab;&#x5b9a;&#x4e49;&#x3002;&#x800c;&#x591a;&#x6570",{"_index":5097,"title":{},"body":{"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{}}}],["x8fd9;&#x4f1a;&#x5f15;&#x8d77;&#x4e00;&#x4e2a",{"_index":3334,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x8fd9;&#x4f1a;&#x751f;&#x6210;&#x4e00;&#x4e2a",{"_index":2709,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x8fd9;&#x4f1a;&#x8f93;&#x51fa;1&#xff0c;&#x56e0;&#x4e3a",{"_index":5608,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{}}}],["x8fd9;&#x4f1a;&#x8fd4;&#x56de;&#x5982;&#x4e0b;&#x4e4b;&#x4e00;&#xff1a",{"_index":5558,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x8fd9;&#x4f7f;&#x6211;&#x4eec;&#x80fd;&#x4f7f;&#x7528",{"_index":3623,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x8fd9;&#x5141;&#x8bb8;&#x5728;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x6784;&#x5efa;&#x5b8f;&#x4e2d;&#x968f;&#x610f;&#x6dfb;&#x52a0;&#x548c;&#x4fee;&#x6539;&#x7c7b;&#x5b57;&#x6bb5;&#x3002;&#x5728;&#x6211;&#x4eec;&#x7684;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x5b8f;&#x88ab;&#x8c03;&#x7528;&#xff0c;&#x4f7f;&#x7528;&#x4e86;&#x4e00;&#x4e2a",{"_index":6600,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x8fd9;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x6765;&#x5408;&#x5e76;&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":6376,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x8fd9;&#x53ef;&#x4ee5;&#x88ab;&#x8fdb;&#x4e00;&#x6b65;&#x4f18;&#x5316;&#xff0c;&#x901a;&#x8fc7",{"_index":3260,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x8fd9;&#x548c;&#x6570;&#x7ec4;&#x5339;&#x914d;&#x975e;&#x5e38;&#x76f8;&#x4f3c;&#xff0c;&#x4f46;&#x662f;&#x6709;&#x4ee5;&#x4e0b;&#x4e0d;&#x540c;&#xff1a",{"_index":5615,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["x8fd9;&#x548c;&#x8bbf;&#x95ee",{"_index":3412,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x8fd9;&#x5728;&#x7f16;&#x8bd1;&#x8fc7;&#x7a0b;&#x4e2d;&#x8f93;&#x51fa;&#xff1a",{"_index":6518,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x8fd9;&#x5bf9;&#x7c7b;&#x578b;&#x6784;&#x5efa;&#x5b8f;&#x6765;&#x8bf4;&#x7ecf;&#x5e38;&#x662f;&#x4e00;&#x4e2a;&#x95ee;&#x9898;&#xff0c;&#x56e0;&#x4e3a;&#x8981;&#x6784;&#x5efa;&#x7684;&#x7c7b;&#x578b;&#x53ea;&#x80fd;&#x5728;&#x5b83;&#x7684;&#x4e0d;&#x5b8c;&#x6574;&#x9636;&#x6bb5;&#x88ab;&#x52a0;&#x8f7d;&#xff0c;&#x5728;&#x6784;&#x5efa;&#x5b8f;&#x8fd0;&#x884c;&#x4e4b;&#x524d;&#x3002;&#x6211;&#x4eec;&#x5efa;&#x8bae;&#x603b;&#x662f;&#x5b9a;&#x4e49;&#x7c7b;&#x578b;&#x6784;&#x5efa;&#x5b8f;&#x5230;&#x5b83;&#x4eec;&#x81ea;&#x5df1;&#x7684;&#x6a21;&#x5757;&#x3002",{"_index":6578,"title":{},"body":{"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{}}}],["x8fd9;&#x662f;&#x4e00;&#x4e2a",{"_index":4813,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x533f;&#x540d;&#x7ed3;&#x6784",{"_index":3000,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x6570;&#x7ec4",{"_index":2999,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8fd9;&#x6837;&#x7684;&#x58f0;&#x660e;&#x4e0d;&#x53ef;&#x884c;&#xff0c;&#x5c3d;&#x7ba1",{"_index":4824,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x8fd9;&#x6bb5;&#x4ee3;&#x7801;&#x89e3;&#x6790;&#x4e00;&#x4e2a",{"_index":2371,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["x8fd9;&#x79cd;&#x201c;&#x4f0e;&#x4fe9;&#x201d;&#x6700;&#x521d;&#x5728",{"_index":6466,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["x8fd9;&#x79cd;&#x60c5;&#x51b5;&#x4e0b;&#x8981;&#x6267;&#x884c;&#x7684;&#x8868;&#x8fbe;&#x5f0f",{"_index":4975,"title":{},"body":{"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{}}}],["x8fd9;&#x7c7b;&#x5177;&#x4f53;&#x5316;&#x53ea;&#x5de5;&#x4f5c;&#x4e8",{"_index":6388,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x8fd9;&#x7c7b;&#x7684;&#x5177;&#x4f53;&#x5316;&#x53ef;&#x4ee5;&#x7528;&#x4e8e;&#x83b7;&#x5f97",{"_index":6434,"title":{},"body":{"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{}}}],["x8fd9;&#x7c7b;&#x7684;while&#x5faa;&#x73af;&#x4e0d;&#x4fdd;&#x8bc1;&#x4e00;&#x5b9a;&#x6267;&#x884c;&#x5faa;&#x73af;&#x4f53;&#x8868;&#x8fbe;&#x5f0f;&#xff1a;&#x5982;&#x679c;&#x6761;&#x4ef6;&#x4ece;&#x5f00;&#x59cb;&#x5c31;&#x4e0d;&#x5339;&#x914d;&#xff0c;&#x5b83;&#x4e0d;&#x4f1a;&#x6267;&#x884c;&#x3002;&#x8fd9;&#x548c",{"_index":4896,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["x8fd9;&#x7ec4;&#x89c4;&#x5219;&#x662f;&#x53ef;&#x4f20;&#x9012;&#x7684;&#xff0c;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x4e00;&#x4e2a;&#x5b50;&#x7c7b;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5230;&#x5176;&#x57fa;&#x7c7b;&#x7684;&#x57fa;&#x7c7b;&#x3001;&#x5176;&#x57fa;&#x7c7b;&#x6240;&#x5b9e;&#x73b0;&#x7684;&#x63a5;&#x53e3;&#x3001;&#x5b9e;&#x73b0;&#x7684;&#x63a5;&#x53e3;&#x7684;&#x57fa;&#x7840;&#x63a5;&#x53e3;&#x7b49;&#xff0c;&#x4ee5;&#x6b64;&#x7c7b;&#x63a8;&#x3002",{"_index":3760,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x8fd9;&#x884c;&#x3002;&#x53e6;&#x4e00;&#x4e2a;&#x5206;&#x652f;&#x5728;&#x89e3;&#x6790;&#x6587;&#x4ef6;&#x65f6;&#x88ab;&#x4e22;&#x5f03;&#x3002;&#x8fd9;&#x4e9b;&#x5176;&#x4ed6;&#x7684;&#x5206;&#x652f;&#x5fc5;&#x987b;&#x5305;&#x542b;&#x6709;&#x6548;&#x7684;haxe&#x8bed;&#x6cd5;&#xff0c;&#x4f46;&#x662f;&#x4ee3;&#x7801;&#x4e0d;&#x4f1a;&#x6267;&#x884c;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#x3002",{"_index":5266,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x8fd9;&#x8fd9;&#x53ef;&#x4ee5;&#x8fd0;&#x884c;&#xff0c;&#x56e0;&#x4e3a;floor&#x65b9;&#x6cd5;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x58f0;&#x660e;&#x4e3a;int&#x3002",{"_index":5405,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["x8fd9;&#x901a;&#x5e38;&#x5f71;&#x54cd;&#x4e24;&#x4e2a;&#x64cd;&#x4f5c;&#xff0c;&#x5982;&#x5f53;&#x6267;&#x884c;&#x7edd;&#x5bf9;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#x89e3;&#x6790;&#xff08;&#x7b2c;3.7.3&#x8282;&#xff09;&#x65f6;&#x7ed9;&#x5b9a;&#x7c7b;&#x578b;&#x88ab;&#x7528;&#x4e3a;&#x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x548c;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x8f6c;&#x6362;&#x7684;&#x5408;&#x4e00;&#x68c0;&#x67e5;&#x3002",{"_index":5116,"title":{},"body":{"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["x8fd9;&#x91cc",{"_index":4922,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["x8fd9;&#x91cc;&#x53d1;&#x751f;&#x7684;&#x662f;&#xff0c;&#x5b57;&#x6bb5;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x90e8;&#x5206;&#x5728;main&#x65b9;&#x6cd5;&#x4e2d;&#x8bbf;&#x95ee;x&#x662f;&#x590d;&#x6742;&#x7684;&#xff1a;&#x5b83;&#x6709;&#x6f5c;&#x5728;&#x7684;&#x526f;&#x4f5c;&#x7528;&#xff0c;&#x5982;&#x672c;&#x4f8b;&#x4e2d;main&#x7684;&#x6784;&#x5efa;&#x3002;&#x56e0;&#x6b64;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x4e0d;&#x80fd;&#x751f;&#x6210",{"_index":4353,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{}}}],["x8fd9;&#x91cc;&#x5b8f;&#x7684;&#x903b;&#x8f91;&#x53ef;&#x4ee5;&#x52a0;&#x8f7d;&#x4e00;&#x4e2a;&#x6587;&#x4ef6;&#x5e76;&#x4f7f;&#x7528;&#x5b83;&#x7684;&#x5185;&#x5bb9;&#x6765;&#x751f;&#x6210;&#x4e00;&#x4e2a;&#x5b9a;&#x5236;&#x7c7b;&#x578b;&#x3002",{"_index":6556,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["x8fd9;&#x91cc;&#x6211;&#x4eec;&#x4f7f;&#x7528",{"_index":3806,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x8fd9;&#x91cc;&#x6211;&#x4eec;&#x5bfc;&#x5165;string.fromcharcode&#x4e3a",{"_index":4209,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x8fd9;&#x91cc;&#x6211;&#x4eec;&#x6ca1;&#x6709;&#x8bbe;&#x7f6e;&#x4e00;&#x4e2a;&#x50cf;&#x4e0a;&#x5229;&#x4e2d;&#x5b8c;&#x6574;&#x7684;&#x8fed;&#x4ee3;&#x5668;&#xff0c;&#x800c;&#x662f;&#x5b9a;&#x4e49;myarraywrap",{"_index":5750,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["x8fd9;&#x91cc;&#x6211;&#x4eec;&#x9700;&#x8981;tstr",{"_index":5650,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x8fd9;&#x91cc;&#x662f;&#x4e00;&#x4e9b;&#x5c06;&#x8fde;&#x63a5;&#x5230;&#x670d;&#x52a1;&#x5e76;&#x5904;&#x7406;&#x534f;&#x8bae;&#x7ec6;&#x8282;&#x7684;&#x4ee3;&#x7801;&#xff1a",{"_index":6112,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{}}}],["x8fd9;&#x91cc;&#x662f;&#x4e00;&#x4e9b;math&#x5e93;&#x4f7f;&#x7528;&#x7684;&#x4f8b;&#x5b50;&#xff1a",{"_index":1964,"title":{},"body":{"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{}}}],["x8fd9;&#x91cc;&#x6709;&#x4e2a;&#x7279;&#x6b8a;&#x7684",{"_index":4043,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x8fd9;&#x91cc;&#x7684;&#x95ee;&#x9898;&#x662f;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x4ece;&#x6765;&#x6ca1;&#x6709;&#x771f;&#x6b63;&#x7684;&#x201d;&#x770b;&#x5230;&#x201c",{"_index":2317,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x8fd9;&#x91cc;&#x8f93;&#x51fa",{"_index":5662,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{}}}],["x8fd9;&#x91cc;&#x91cd;&#x8981;&#x7684;&#x7ec4;&#x4ef6;&#x662f;&#xff1a",{"_index":4463,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["x8fd9;&#x91cc;&#xff0c",{"_index":2736,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x8fd9;&#x91cc;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x77e5;&#x9053;&#x5f53;&#x7c7b;&#x578b;&#x5316",{"_index":4008,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x8fd9;&#x91cc;&#xff0c;expression1&#x6bcf;&#x4e2a;&#x8fed;&#x4ee3;&#x90fd;&#x4f1a;&#x88ab;&#x6267;&#x884c;&#xff0c;&#x4f46;&#x662f;&#x5f53;&#x6761;&#x4ef6;&#x6ee1;&#x8db3;&#xff0c;expression2&#x5219;&#x4e0d;&#x518d;&#x6267;&#x884c;&#x3002",{"_index":5048,"title":{},"body":{"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["x8fd9;&#x91cc;&#xff0c;expression1&#x6bcf;&#x6b21;&#x8fed;&#x4ee3;&#x90fd;&#x88ab;&#x6267;&#x884c;&#xff0c;&#x4f46;&#x662f;&#x5982;&#x679c;&#x6761;&#x4ef6;&#x6ee1;&#x8db3;&#xff0c;expression2&#x4e0d;&#x518d;&#x4e3a;&#x5f53;&#x524d;&#x8fed;&#x4ee3;&#x6267;&#x884c;&#x3002;&#x4e0d;&#x50cf;break&#xff0c;&#x8fed;&#x4ee3;&#x4ecd;&#x7136;&#x7ee7;&#x7eed;&#x3002",{"_index":5055,"title":{},"body":{"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{}}}],["x8fdb;&#x4e00;&#x6b65;&#x7b80;&#x5316;&#xff0c;&#x8fd9;&#x4e48;&#x505a;&#x901a;&#x5e38;&#x53ef;&#x4ee5;&#x7701;&#x7565;&#x8def;&#x5f84;&#x4e2d;&#x5305;&#x540d;&#x7684;&#x90e8;&#x5206;&#xff0c;&#x5176;&#x4e2d;&#x6d89;&#x53ca;&#x65e0;&#x7ea6;&#x675f;&#x6807;&#x8bc6;&#x7b26;&#x7684;&#x4f7f;&#x7528;&#xff0c",{"_index":4246,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x8fdb;&#x884c;&#x4fee;&#x7f2e;&#x4e0e;&#x8865;&#x5145",{"_index":16,"title":{},"body":{"index.html#关于本文档":{}}}],["x8fdb;&#x884c;&#x4fee;&#x9970;&#x3002",{"_index":2940,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x8fdb;&#x884c;&#x5904;&#x7406;&#x3002;&#x7ed3;&#x679c;&#x7684;&#x7ed3;&#x6784;&#x88ab;&#x63cf;&#x8ff0;&#x4e3a",{"_index":6252,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{}}}],["x8fdb;&#x884c;&#x6761;&#x4ef6;&#x7f16;&#x8bd1;&#xff0c;&#x5e76;&#x68c0;&#x67e5;&#x7f16;&#x8bd1;&#x5668;&#x6807;&#x8bb0;&#x3002",{"_index":5255,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["x8fdb;&#x884c;&#x6e38;&#x620f;&#x5f00;&#x53d1;&#x5de5;&#x4f5c;&#x4e2d;&#x4e00;&#x90e8;&#x5206;&#x7684;&#x65b0;&#x673a;&#x4f1a;&#x51fa;&#x73b0;&#xff0c;&#x50ac;&#x751f;&#x4e86;&#x4e00;&#x4e2a;&#x5168;&#x65b0;&#x8bed;&#x8a00;&#x7684;&#x4ea7;&#x751f;&#x3002",{"_index":1132,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x8fdc;&#x7a0b;&#x4e0a;&#x4e0b;&#x6587",{"_index":1454,"title":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{}},"body":{}}],["x8fdc;&#x7a0b;&#x5904;&#x7406",{"_index":79,"title":{},"body":{"10.标准库/10.标准库.html#10-标准库":{}}}],["x8fdc;&#x7a0b;&#x5904;&#x7406;&#x53ef;&#x4ee5;&#x53d1;&#x9001;&#x591a;&#x79cd;&#x4e0d;&#x540c;&#x79cd;&#x7c7b;&#x7684;&#x6570;&#x636e;&#x3002;&#x67e5;&#x770b",{"_index":1474,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化":{}}}],["x8fdc;&#x7a0b;&#x5904;&#x7406;&#x662f;&#x4e00;&#x4e2a;&#x5728;&#x4e0d;&#x540c;&#x5e73;&#x53f0;&#x4e4b;&#x95f4;&#x901a;&#x8baf;&#x7684;&#x65b9;&#x5f0f;&#x3002;&#x901a;&#x8fc7;haxe&#x7684;&#x8fdc;&#x7a0b;&#x5904;&#x7406;&#xff0c;&#x5e94;&#x7528;&#x53ef;&#x4ee5;&#x900f;&#x660e;&#x7684;&#x4f20;&#x9001;&#x6570;&#x636e;&#xff0c;&#x53d1;&#x9001;&#x6570;&#x636e;&#xff0c;&#x548c;&#x5728;&#x670d;&#x52a1;&#x7aef;/&#x5ba2;&#x6237;&#x7aef;&#x4e4b;&#x95f4;&#x8c03;&#x7528;&#x65b9;&#x6cd5;&#x3002",{"_index":1480,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.远程处理.html#10-13-远程处理":{}}}],["x8fdc;&#x7a0b;&#x8fde;&#x63a5;&#xff1a",{"_index":1426,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接":{}}}],["x8fde;&#x63a5;&#x4f7f;&#x7528;&#x8d77;&#x6765;&#x975e;&#x5e38;&#x65b9;&#x4fbf;&#x3002;&#x4e00;&#x65e6;&#x8fde;&#x63a5;&#x88ab;&#x83b7;&#x5f97;&#xff0c;&#x4f7f;&#x7528;&#x7ecf;&#x5178;&#x7684;&#x70b9;&#x8bed;&#x6cd5;&#x6765;&#x5c4f;&#x5e55;&#x4e00;&#x4e2a;&#x8def;&#x5f84;&#xff0c;&#x7136;&#x540e;&#x4f7f;&#x7528",{"_index":1458,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["x8fed;&#x4ee3",{"_index":2142,"title":{"10.标准库/10.6.模板/10.6.模板.html#迭代":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{}},"body":{}}],["x8fed;&#x4ee3;&#x4e00;&#x4e2a;&#x7ed3;&#x6784;&#x3002;&#x7ed3;&#x675f;&#x5faa;&#x73af;&#x4f7f;&#x7528",{"_index":2144,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#迭代":{}}}],["x8fed;&#x4ee3;&#x4e00;&#x7ec4;&#x503c;&#xff0c;&#x4f8b;&#x5982;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#x7684;&#x5143;&#x7d20;&#xff0c;&#x5728;haxe&#x4e2d;&#x53ef;&#x4ee5;&#x5f88;&#x5bb9;&#x6613;&#x7684;&#x8fed;&#x4ee3;&#x3002;&#x5b9a;&#x5236;&#x7c7b;&#x53ef;&#x4ee5;&#x5feb;&#x901f;&#x7684;&#x5b9e;&#x73b0;&#x8fed;&#x4ee3;&#x5668;&#x529f;&#x80fd;&#x6765;&#x5141;&#x8bb8;&#x8fed;&#x4ee3;&#x3002",{"_index":540,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x8fed;&#x4ee3;&#x5668",{"_index":538,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["x9002;&#x7528;&#x4e8e;&#x7c7b;&#x548c;&#x679a;&#x4e3e;&#x7684;&#x66f4;&#x52a0;&#x5065;&#x58ee;&#x7684;api",{"_index":2311,"title":{},"body":{"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{}}}],["x9009;&#x62e9;&#x51fd;&#x6570;&#x662f;&#x88ab;&#x53d1;&#x73b0;&#x7684;&#xff0c;&#x800c;&#x4e0d;&#x662f;&#x771f;&#x7684;&#x8bbe;&#x8ba1;&#x4e86;&#x5b83;&#x7684;&#x7528;&#x6cd5;&#x3002;&#x5728;&#x7b2c;&#x4e00;&#x6b21;&#x63d0;&#x5230;&#x8fd9;&#x4e2a;&#x60f3;&#x6cd5;&#x540e;&#xff0c;&#x53ea;&#x9700;&#x8981;&#x7f16;&#x8bd1;&#x5668;&#x4e2d;&#x7684;&#x4e00;&#x70b9;&#x8c03;&#x6574;&#x5c31;&#x53ef;&#x4ee5;&#x4f7f;&#x5b83;&#x4eec;&#x5de5;&#x4f5c;&#x3002;&#x5b83;&#x4eec;&#x7684;&#x8fd9;&#x4e9b;&#x53d1;&#x73b0;&#x8fd8;&#x5f15;&#x5165;&#x4e86;&#x591a;&#x7c7b;&#x578b;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff0c;&#x6bd4;&#x5982",{"_index":3391,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x9009;&#x62e9;&#x51fd;&#x6570;&#xff08;&#x7b2c;2.8.4&#x8282;&#xff09",{"_index":3253,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x9012;&#x51cf",{"_index":2518,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x9012;&#x589e",{"_index":2516,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x9012;&#x589e;&#x4e0e;&#x9012;&#x51cf;&#x64cd;&#x4f5c;&#x7b26;&#x7528;&#x4e8e;&#x6539;&#x53d8;&#x4e00;&#x4e2a;&#x7ed9;&#x5b9a;&#x7684;&#x503c;&#xff0c;&#x56e0;&#x6b64;&#x4e0d;&#x80fd;&#x88ab;&#x7528;&#x4e8e;&#x4e00;&#x4e2a",{"_index":5136,"title":{},"body":{"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{}}}],["x9017;&#x53f7",{"_index":4579,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["x9017;&#x53f7;&#xff0c;&#x9694;&#x5f00",{"_index":4527,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["x901a;&#x5e38;&#xff0c;haxe&#x7f16;&#x8bd1;&#x5668;&#x53ea;&#x751f;&#x6210;&#x4e00;&#x4e2a;&#x5355;&#x72ec;&#x7684;&#x7c7b;&#x6216;&#x8005;&#x51fd;&#x6570;&#xff0c;&#x5373;&#x4f7f;&#x5b83;&#x6709;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x3002;&#x751f;&#x6210;&#x7684;&#x4ee3;&#x7801;&#x4e4b;&#x540e;&#x53ef;&#x80fd;&#x5fc5;&#x987b;&#x6267;&#x884c;&#x4e00;&#x4e9b;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#x53ef;&#x80fd;&#x4f1a;&#x5f71;&#x54cd;&#x4e00;&#x4e9b;&#x6027;&#x80fd;&#x3002;&#x8fd9;&#x53d1;&#x751f;&#x5728;&#x4e00;&#x4e2a;&#x81ea;&#x7136;&#x62bd;&#x8c61;&#x6982;&#x5ff5;&#x4e2d;&#xff0c;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x4ee3;&#x7801;&#x751f;&#x6210;&#x5668;&#x5fc5;&#x987b;&#x5047;&#x8bbe;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x53ef;&#x4ee5;&#x662f;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x3002",{"_index":3730,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x901a;&#x7528;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#xff08;&#x7b2c;3.5.5&#x8282;&#xff09;&#x4e86;&#x89e3;&#x66f4;&#x591a;&#x7ec6;&#x8282;&#x3002",{"_index":3970,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x901a;&#x8fc7",{"_index":1344,"title":{},"body":{"10.标准库/10.10.Json/10.10.Json.html#10-10-Json":{},"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{},"10.标准库/10.9.Xml/10.9.Xml.html#10-9-Xml":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x901a;&#x8fc7;&#x4e0b;&#x9762;&#x7684;&#x8bed;&#x6cd5;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x7f16;&#x8bd1;&#x65f6;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#xff1a",{"_index":5112,"title":{},"body":{"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{}}}],["x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":2143,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#迭代":{}}}],["x901a;&#x8fc7;&#x4f7f;&#x7528;&#x5206;&#x7ec4;&#xff0c;&#x7279;&#x5b9a;&#x4fe1;&#x606f;&#x53ef;&#x4ee5;&#x88ab;&#x4ece;&#x4e00;&#x4e2a;&#x5339;&#x914d;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x4e2d;&#x63d0;&#x53d6;&#x3002;&#x5982;&#x679c",{"_index":1783,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{}}}],["x901a;&#x8fc7;&#x540d;&#x5b57;&#x89e3;&#x6790;&#x3002;&#x5b9e;&#x4f8b;&#x7136;&#x540e;&#x88ab;&#x4f7f;&#x7528",{"_index":2457,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x901a;&#x8fc7;&#x540d;&#x79f0",{"_index":2276,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["x901a;&#x8fc7;&#x5b83;&#x7684",{"_index":3353,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x901a;&#x8fc7;&#x6269;&#x5c55;&#x3001",{"_index":2929,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x901a;&#x8fc7;&#x6dfb;&#x52a0",{"_index":3248,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x901a;&#x8fc7;&#x8fd9;&#x4e9b;&#xff0c;&#x5c31;&#x4e0d;&#x9700;&#x8981;&#x7ed5;&#x8fc7;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x56e0;&#x4e3a;&#x7f16;&#x8bd1;&#x5668;&#x53ef;&#x4ee5;&#x76f4;&#x63a5;&#x4f7f;&#x7528;&#x63d0;&#x4f9b;&#x7684;&#x5e38;&#x6570;&#x3002",{"_index":6338,"title":{},"body":{"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{}}}],["x901a;&#x8fc7;&#x9ed8;&#x8ba4;&#x7684",{"_index":3304,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x901a;&#x914d;&#x7b26;&#x5bfc;&#x5165",{"_index":4195,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x9075;&#x5b88;&#x524d;&#x9762;&#x8bb2;&#x8ff0;&#x8fc7;&#x7684;&#x89e3;&#x6790;&#x987a;&#x5e8f;&#xff08;&#x7b2c;3.7.3&#x8282;&#xff09;&#xff0c;&#x591a;&#x4e2a;&#x4f7f;&#x7528;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x4ece;&#x5e95;&#x90e8;&#x5230;&#x5934;&#x90e8;&#x68c0;&#x67e5;&#xff0c;&#x800c;&#x5728;&#x6bcf;&#x4e2a;&#x6a21;&#x5757;&#x7684;&#x7c7b;&#x578b;&#x4ee5;&#x53ca;&#x5728;&#x6bcf;&#x4e2a;&#x7c7b;&#x578b;&#x4e2d;&#x7684;&#x5b57;&#x6bb5;&#x4ece;&#x5934;&#x81f3;&#x5c3e;&#x68c0;&#x67e5;&#x3002;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#xff08;&#x800c;&#x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x4e2d;&#x7684;&#x7279;&#x5b9a;&#x7c7b;&#x578b;&#xff0c;&#x67e5;&#x770b;&#x6a21;&#x5757;&#x548c;&#x8def;&#x5f84;&#xff08;&#x7b2c;3.7&#x8282;&#xff09;&#xff09;&#x4f5c;&#x4e3a;&#x9759;&#x6001;&#x6269;&#x5c55;&#x4f1a;&#x628a;&#x6240;&#x6709;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x5e26;&#x5165;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x3002",{"_index":5488,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x9075;&#x5faa",{"_index":1085,"title":{},"body":{"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{}}}],["x9075;&#x5faa;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x7684;&#x89c4;&#x5219;&#xff0c;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x53ef;&#x4ee5;&#x5728;&#x590d;&#x5408;&#x7c7b;&#x578b;&#x4e2d;&#x89e6;&#x53d1;&#xff1a",{"_index":4063,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x90a3;&#x4e2a;gett",{"_index":4401,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x90a3;&#x6837;&#xff0c;&#x63a5;&#x4e0b;&#x6765;&#x7684;&#x51e0;&#x4e2a;&#x6708;&#xff0c;&#x7248;&#x672c;&#x7ee7;&#x7eed;&#x4fdd;&#x6301;&#x7a33;&#x5b9a;&#x3002;&#x5728;2011&#x5e74;1&#x6708;&#xff0c;hax",{"_index":1160,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x90fd;&#x53ef;&#x4ee5;&#x7528;&#x4e8e;&#x4e00;&#x4e2a;&#x63a5;&#x53d7",{"_index":2495,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x90fd;&#x6709",{"_index":6640,"title":{},"body":{"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{}}}],["x90fd;&#x6709;&#x4e00;&#x4e2a;&#x6210;&#x5458;&#x53d8;&#x91cf",{"_index":2451,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["x90fd;&#x7edf;&#x4e00;&#x4e3a",{"_index":3978,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x90fd;&#x89e3;&#x6790;&#x4e3a;&#x4e8c;&#x5143;&#x64cd;&#x4f5c;&#x7b26;&#xff0c;&#x7ed3;&#x679c;&#x4f1a;&#x89e3;&#x6790;&#x4e3a",{"_index":3703,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x91cd;&#x5199;&#x5b57;&#x6bb5;&#x662f;&#x521b;&#x5efa;&#x7c7b;&#x7684;&#x5c42;&#x7ea7;&#x7684;&#x7ed3;&#x6784;&#x3002;&#x8bb8;&#x591a;&#x8bbe;&#x8ba1;&#x6a21;&#x5f0f;&#x4f7f;&#x7528;&#x5230;&#x5b83;&#xff0c;&#x4f46;&#x662f;&#x8fd9;&#x91cc;&#x6211;&#x4eec;&#x53ea;&#x63a2;&#x7d22;&#x57fa;&#x672c;&#x7684;&#x529f;&#x80fd;&#x3002;&#x4e3a;&#x4e86;&#x5728;&#x7c7b;&#x4e2d;&#x4f7f;&#x7528;&#x91cd;&#x5199;&#xff0c;&#x9700;&#x8981;&#x8fd9;&#x4e2a;&#x7c7b;&#x6709;&#x4e00;&#x4e2a;&#x7236;&#x7c7b;&#xff08;&#x7b2c;2.3.2&#xff09;&#x3002;&#x601d;&#x8003;&#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#xff1a",{"_index":4462,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["x91cd;&#x5199;&#x65b9;&#x6cd5;&#xff08;&#x7b2c;4.3.1&#x8282;&#xff09",{"_index":2788,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x91cd;&#x590d;0&#x6216;&#x8005;&#x591a;&#x6b21",{"_index":1889,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x91cd;&#x590d;1&#x6216;&#x8005;&#x591a;&#x6b21",{"_index":1890,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["x91cd;&#x8981;&#x7684;&#x662f;&#x4f9d;&#x8d56;&#x5185;&#x8054;&#x65f6;&#x8981;&#x8bb0;&#x5f97;&#x8fd9;&#x4e2a;&#xff1a",{"_index":4710,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["x91cd;&#x8981;&#x7684;&#x662f;&#x533a;&#x5206;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x548c;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff0c;&#x5982;&#x8fd9;&#x4e2a;&#x793a;&#x4f8b;&#x5c55;&#x793a;&#x7684;&#xff1a",{"_index":2838,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x91cd;&#x8981;&#x7684;&#x662f;&#x8981;&#x7406;&#x89e3;&#x5b8f;&#x7684;&#x53c2;&#x6570;&#x4e0d;&#x4fdd;&#x8bc1;&#x88ab;&#x8bc4;&#x4f30;&#xff0c;&#x6240;&#x4ee5;&#x4efb;&#x4f55;&#x9884;&#x671f;&#x7684;&#x526f;&#x4f5c;&#x7528;&#x4e0d;&#x4fdd;&#x8bc1;&#x4f1a;&#x51fa;&#x73b0;&#x3002;&#x53e6;&#x4e00;&#x65b9;&#x9762;&#xff0c;&#x540c;&#x6837;&#x91cd;&#x8981;&#x7684;&#x662f;&#x7406;&#x89e3;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x8868;&#x8fbe;&#x5f0f;&#x53ef;&#x80fd;&#x88ab;&#x4e00;&#x4e2a;&#x5b8f;&#x590d;&#x5236;&#x548c;&#x591a;&#x6b21;&#x7528;&#x5728;&#x8fd4;&#x56de;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x4e2d;&#xff1a",{"_index":6354,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["x91cd;&#x8981;&#x7684;&#x662f;&#x8bb0;&#x4f4f",{"_index":6519,"title":{},"body":{"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{}}}],["x91cd;&#x8f7d;&#x4e00;&#x5143;&#x8fd0;&#x7b97;&#x7b26;&#x662f;&#x76f8;&#x4f3c;&#x7684;&#xff1a",{"_index":3323,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x91cd;&#x8f7d;&#x4e0e;&#x5b8f",{"_index":5181,"title":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}},"body":{}}],["x91cd;&#x8f7d;&#x5b57;&#x6bb5;&#x7684;&#x6548;&#x679c;&#x5728;&#x91cd;&#x8f7d;&#x65b9;&#x6cd5;&#xff08;&#x7b2c;4.3.1&#x8282;&#xff09;&#x8be6;&#x8ff0;&#x3002;&#x8fd9;&#x4e2a;&#x4fee;&#x9970;&#x7b26;&#x53ea;&#x5141;&#x8bb8;&#x7528;&#x4e8e;&#x65b9;&#x6cd5;&#xff08;&#x7b2c;4.3&#x8282;&#xff09;&#x5b57;&#x6bb5;&#x3002",{"_index":4727,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{}}}],["x91cd;&#x8f7d;&#x9075;&#x5b88;&#x53d8;&#x5f02;&#xff08;&#x7b2c;3.4&#x8282;&#xff09;&#x7684;&#x89c4;&#x5219;&#x3002;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x5b83;&#x4eec;&#x7684;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x5141;&#x8bb8;&#x9006;&#x53d8;&#xff08;&#x4e0d;&#x90a3;&#x4e48;&#x7279;&#x5b9a;&#x7684;&#x7c7b;&#x578b;&#xff09;&#x800c;&#x5b83;&#x4eec;&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x5141;&#x8bb8;&#x5171;&#x53d8;&#xff08;&#x66f4;&#x7279;&#x522b;&#x7684;&#x7c7b;&#x578b;&#xff09;&#x3002",{"_index":4601,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["x9519;&#x8bef;&#x4fe1;&#x606f;&#x8868;&#x660e;&#x7f16;&#x8bd1;&#x5668;&#x4e86;&#x89e3",{"_index":3011,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x9519;&#x8bef;&#x5904;&#x7406",{"_index":1470,"title":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#错误处理":{}},"body":{}}],["x9519;&#x8bef;&#xff0c;int&#x5e94;&#x8be5;&#x662f",{"_index":3116,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x952e",{"_index":3007,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x957f;&#x671f;&#x7684;&#x7f16;&#x7a0b;&#x8bed;&#x8a00;&#x8bbe;&#x8ba1;&#x70ed;&#x60c5;&#xff0c;&#x548c;&#x6df7;&#x5408;&#x4e0d;&#x540c;&#x6280;&#x672f;&#x4f5c;&#x4e3a;&#x4ed6;&#x4f7f;&#x7528",{"_index":1131,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x95ed;&#x5408;&#x7684;&#x82b1;&#x62ec;&#x53f7;&#x4e2d;&#x95f4;&#x662f;&#x679a;&#x4e3e;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":2859,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x9644;&#x5e26;&#x4e86;&#x4e00;&#x4e2a;&#x6807;&#x51c6;&#x7684;&#x6a21;&#x677f;&#x7cfb;&#x7edf;&#xff0c;&#x4f7f;&#x7528;&#x88ab;&#x4e00;&#x4e2a;&#x8f7b;&#x91cf;&#x7684",{"_index":2118,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{}}}],["x9664",{"_index":1864,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{}}}],["x9664;&#x3002",{"_index":1862,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{}}}],["x9664;&#x6cd5",{"_index":2522,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x968f;&#x540e;&#x53d1;&#x5e03;&#x4e8e;2013&#x5e74;5&#x6708;&#x3002",{"_index":1177,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x968f;&#x540e;&#x7684",{"_index":3967,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x968f;&#x7740;haxe.ds.stringmap&#x88ab;&#x5bfc;&#x5165;&#x4e4b;&#x540e;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x5c31;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x8fd9;&#x4e2a;&#x5305;&#x89e3;&#x6790",{"_index":4176,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x9690;&#x5f0f;&#x7684;&#x8f6c;&#x6362;&#xff08;&#x7b2c;2.8.1&#x8282;&#xff09",{"_index":3373,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x9694;&#x5f00;&#x3002;&#x6211;&#x4eec;&#x51b3;&#x5b9a;&#x9075;&#x5faa",{"_index":2751,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x9700;&#x8981",{"_index":4346,"title":{},"body":{"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["x9700;&#x8981;&#x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x800c;&#x4e0d;&#x662f;&#x67d0;&#x4e2a;&#x7279;&#x5b9a;&#x7684;&#x7c7b;&#x578b;&#x7684",{"_index":2836,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x9700;&#x8981;&#x4e09;&#x4e2a",{"_index":2862,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x9700;&#x8981;&#x591a;&#x4e2a",{"_index":2749,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x9700;&#x8981;&#x7684;&#x4e00;&#x4e2a;&#x503c;&#x662f;&#x4e00;&#x4e2a;&#x7c7b;&#x800c;&#x975e;&#x67d0;&#x4e2a;&#x7279;&#x5b9a;&#x7684;&#x7c7b;&#x578b;&#x65f6;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x5e94;&#x7528;&#x5230",{"_index":2811,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x9759;&#x6001;&#x5206;&#x6790;&#x4eea",{"_index":754,"title":{},"body":{"8.编译器功能/8.编译器功能.html#8-编译器功能":{}}}],["x9759;&#x6001;&#x5206;&#x6790;&#x4eea;&#x5f53;&#x524d;&#x5e26;&#x6709;&#x5982;&#x4e0b;&#x7684;&#x6a21;&#x5757;&#x3002;&#x5982;&#x679c",{"_index":6278,"title":{},"body":{"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{}}}],["x9759;&#x6001;&#x53d8;&#x91cf;&#xff08;&#x7b2c;4.1&#x8282;&#xff09;&#x548c;&#x5c5e;&#x6027;&#xff08;&#x7b2c;4.2&#x8282;&#xff09;&#x5b57;&#x6bb5;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x4efb;&#x610f;&#x7684;&#x521d;&#x59cb;&#x5316;&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5&#x7ae0;&#xff09",{"_index":4760,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{}}}],["x9759;&#x6001;&#x6269;&#x5c55",{"_index":547,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{},"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{}}}],["x9759;&#x6001;&#x6269;&#x5c55;&#x548c;&#x5b8f;&#x7684;&#x7ec4;&#x5408;&#x5728",{"_index":6629,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["x9759;&#x6001;&#x6269;&#x5c55;&#x63d0;&#x4f9b;&#x4e86;&#x4e00;&#x4e2a;&#x3002;&#x901a;&#x5e38;&#xff0c;javascript&#x8f93;&#x51fa;&#x5f88;&#x597d;&#x7684;&#x663e;&#x5f0f;&#x4e86;&#x8fd9;&#x4e2a;&#x8f6c;&#x6362;&#xff1a",{"_index":5434,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["x9759;&#x6001;&#x6269;&#x5c55;&#x662f;&#x4e00;&#x4e2a;&#x5f3a;&#x5927;&#x7684;&#x5de5;&#x5177;&#xff0c;&#x4f7f;&#x5f97;&#x53ef;&#x4ee5;&#x4e0d;&#x7528;&#x5b9e;&#x9645;&#x4fee;&#x6539;&#x5c31;&#x5bf9;&#x7c7b;&#x578b;&#x8fdb;&#x884c;&#x6269;&#x5c55;&#x3002;&#x4e0b;&#x9762;&#x7684;&#x793a;&#x4f8b;&#x5c55;&#x793a;&#x7528;&#x6cd5;&#xff1a",{"_index":5476,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x9759;&#x6001;&#x6269;&#x5c55;&#x901a;&#x5e38;&#x8ba4;&#x4e3a;&#x662f;&#x8bed;&#x6cd5;&#x7cd6;&#xff0c;&#x4e8b;&#x5b9e;&#x4e5f;&#x662f;&#x5982;&#x6b64;&#xff0c;&#x4f46;&#x662f;&#x503c;&#x5f97;&#x6ce8;&#x610f;&#x7684;&#x662f;&#xff0c;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x5bf9;&#x4ee3;&#x7801;&#x53ef;&#x8bfb;&#x6027;&#x6709;&#x4e00;&#x4e2a;&#x620f;&#x5267;&#x6027;&#x5f71;&#x54cd;&#xff1a;&#x66ff;&#x4ee3;&#x5d4c;&#x5957;&#x7684;&#x8c03;&#x7528;&#x5f62;&#x5f0f;&#x5982;f1(f2(f3(f4(x))))&#xff0c;&#x4f7f;&#x7528;&#x94fe;&#x5f0f;&#x8c03;&#x7528;&#x5f62;&#x5f0f;&#x5982;x.f4().f3().f2().f1",{"_index":5487,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09",{"_index":3381,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09;&#x5173;&#x952e;&#x5b57",{"_index":4187,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09;&#x548c;&#x5b8f;&#x7684;&#x6982;&#x5ff5;&#x6709;&#x4e00;&#x4e9b;&#x51b2;&#x7a81;&#xff1a;&#x524d;&#x8005;&#x9700;&#x8981;&#x4e00;&#x4e2a;&#x5df2;&#x77e5;&#x7c7b;&#x578b;&#x6765;&#x786e;&#x5b9a;&#x4f7f;&#x7528;&#x7684;&#x51fd;&#x6570;&#xff0c;&#x800c;&#x5b8f;&#x5728;&#x7c7b;&#x578b;&#x5316;&#x7b80;&#x5355;&#x7684;&#x8bed;&#x6cd5;&#x4e4b;&#x524d;&#x6267;&#x884c;&#x3002;&#x56e0;&#x6b64;&#x6beb;&#x4e0d;&#x5947;&#x602a;&#xff0c;&#x7ed3;&#x5408;&#x4f7f;&#x7528;&#x8fd9;&#x4e24;&#x4e2a;&#x7279;&#x6027;&#x53ef;&#x80fd;&#x5bfc;&#x81f4;&#x95ee;&#x9898;&#x3002;hax",{"_index":6625,"title":{},"body":{"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{}}}],["x9759;&#x6001;&#x65b9;&#x6cd5",{"_index":1305,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}}}],["x9759;&#x6001;&#x65b9;&#x6cd5;&#x6765;&#x7f16;&#x7801;&#x4e00;&#x4e2a",{"_index":1319,"title":{},"body":{"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{}}}],["x9759;&#x6001;&#x76ee;&#x6807;&#x5728",{"_index":2663,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x9759;&#x6001;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x62a5;&#x9519",{"_index":2682,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#x5982;&#x4e0b;&#xff1a",{"_index":2675,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x9759;&#x6001;&#x7c7b;&#x578b;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff08;&#x7b2c;2.2&#x8282;&#xff09",{"_index":2934,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x9759;&#x6001;&#x7c7b;&#x5b57;&#x6bb5;&#x5217;&#x8868;&#xff0c;&#x63cf;&#x8ff0;&#x4e3a;&#x7c7b;&#x5b57;&#x6bb5;&#x4fe1;&#x606f;&#xff08;&#x7b2c;8.5.1&#x8282;&#xff09;&#x3002",{"_index":6209,"title":{},"body":{"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["x9759;&#x6001;&#x8bed;&#x8a00;&#x76ee;&#x6807;&#xff08;&#x7b2c;2.2&#x8282;&#xff09",{"_index":3039,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x9759;&#x6001;method",{"_index":5824,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["x975e",{"_index":3889,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x975e;&#x7269;&#x7406;&#xff08;&#x7b2c;4.2.3&#x8282;&#xff09",{"_index":3540,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x9876;&#x7ea7;&#x5b8c;&#x6210",{"_index":6128,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{}}}],["x9876;&#x7ea7;&#x5b8c;&#x6210;&#x663e;&#x793a;haxe&#x7f16;&#x8bd1;&#x5668;&#x8bc6;&#x522b;&#x4e3a;&#x5173;&#x4e8e;&#x6307;&#x5b9a;&#x5b8c;&#x6210;&#x4f4d;&#x7f6e;&#x7684;&#x6240;&#x6709;&#x6807;&#x8bc6;&#x7b26;&#x3002;&#x8fd9;&#x662f;&#x552f;&#x4e00;&#x7684;&#x6211;&#x4eec;&#x9700;&#x8981;&#x4e00;&#x4e2a;&#x771f;&#x5b9e;&#x7684;&#x4f4d;&#x7f6e;&#x53c2;&#x6570;&#x6765;&#x6f14;&#x793a;&#x5b83;&#x7684;&#x6548;&#x679c;&#x7684;&#x5b8c;&#x6210;&#x65b9;&#x6cd5;&#xff1a",{"_index":6041,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["x9876;&#x7ea7;&#xff08;&#x7b2c;8.3.7&#x8282;&#xff09;&#xff1a;&#x5217;&#x51fa;&#x6240;&#x6709;&#x5728;&#x6307;&#x5b9a;&#x4f4d;&#x7f6e;&#x6709;&#x6548;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#x3002;&#xff08;&#x6a21;&#x5f0f;&#xff1a;toplevel&#xff09",{"_index":5905,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["x9879;&#x76ee;&#x5f00;&#x59cb;&#x4e8e;2005&#x5e74;8&#x6708;22&#x65e5;&#xff0c;&#x7531;&#x6cd5;&#x56fd;&#x5f00;&#x53d1;&#x8005",{"_index":1126,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x9879;&#x76ee;&#x5f00;&#x59cb;&#xff0c",{"_index":1173,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x9879;&#x76ee;&#x7684;&#x9886;&#x5bfc;&#x8005;&#xff0c;&#x4e00;&#x76f4;&#x81f4;&#x529b;&#x4e8e;&#x4f7f",{"_index":1142,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["x9884;&#x671f;&#x4e3a;array&#x7684;&#x4f4d;&#x7f6e;&#xff08;&#x5982;&#x8c03;&#x7528;&#x53c2;&#x6570;&#xff0c;&#x5757;&#x5143;&#x7d20;&#xff09;&#xff0c;$a",{"_index":6379,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#x5728;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x5728;&#x5b83;&#x88ab;&#x7c7b;&#x578b;&#x5316;&#x4e4b;&#x524d;&#x5df2;&#x77e5;&#x7684;&#x65f6;&#x5019;&#x51fa;&#x73b0;&#xff0c;&#x4f8b;&#x5982;&#xff0c;&#x56e0;&#x4e3a;&#x8868;&#x8fbe;&#x5f0f;&#x88ab;&#x770b;&#x4f5c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x8c03;&#x7528;&#x3002;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x5f71;&#x54cd;&#x8fd9;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x5316;&#xff0c;&#x901a;&#x8fc7;&#x6240;&#x8c13;&#x7684;&#x81ea;&#x4e0a;&#x800c;&#x4e0b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6.1&#x8282;&#xff09;&#x3002",{"_index":4004,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#xff08;&#x7b2c;3.6.1&#x8282;&#xff09",{"_index":4284,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x9884;&#x671f;&#x7c7b;&#x578b",{"_index":4002,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x989d;&#x5916;&#x7684;&#x529f;&#x80fd;&#x53ef;&#x901a;&#x8fc7",{"_index":5183,"title":{},"body":{"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{}}}],["x989d;&#x5916;&#x7684;&#x8bed;&#x6cd5;&#x901a;&#x5e38;&#x4f7f;&#x5f97;&#x8bed;&#x8a00;&#x89e3;&#x6790;&#x53d8;&#x5f97;&#x66f4;&#x52a0;&#x590d;&#x6742;&#xff0c;&#x540c;&#x65f6;&#x4f1a;&#x5bfc;&#x81f4;&#x52a0;&#x5165;&#x592a;&#x591a;&#x5173;&#x952e;&#x5b57;&#x3002",{"_index":5341,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x989d;&#x5916;&#x7684;&#x8bed;&#x6cd5;&#x9700;&#x8981;&#x53e6;&#x5916;&#x7684;&#x5b66;&#x4e60;&#x6210;&#x672c;&#x3002",{"_index":5342,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["x9996;&#x5148;&#xff0c;&#x521b;&#x5efa;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x7c7b;&#xff0c;&#x7ee7;&#x627f;&#x81ea",{"_index":1551,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{}}}],["x9ad8;&#x7ea7;&#x521d;&#x59cb;&#x5316;&#x6280;&#x672f;&#x5728;&#x6570;&#x7ec4;&#x63a8;&#x5bfc;&#xff08;&#x7b2c;6.6&#x8282;&#xff09;&#x4e2d;&#x8be6;&#x8ff0;&#x3002",{"_index":5201,"title":{},"body":{"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{}}}],["x:type",{"_index":6400,"title":{},"body":{"9.宏/9.3.具体化/9.3.2.类型具体化.html":{},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{}}}],["x:void",{"_index":2592,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x=(y=1",{"_index":4389,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["x=y=1",{"_index":4388,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["xaaayababzbbbw",{"_index":1813,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.4.分割.html":{},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{}}}],["xbox",{"_index":857,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["xed",{"_index":5601,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{}}}],["xfb01;eld",{"_index":215,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{},"5.表达式/5.表达式.html#5-表达式":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["xfb01;le",{"_index":714,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{}}}],["xfb01;le,it",{"_index":4175,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["xfb01;lled",{"_index":558,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xfb01;nal",{"_index":5415,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["xfb01;nd",{"_index":3971,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["xfb01;ne",{"_index":564,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xfb01;rst",{"_index":712,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["xfb01;xed",{"_index":5607,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{}}}],["xfb02;ag",{"_index":943,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["xfb02;exibl",{"_index":5347,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["xfb02;oat",{"_index":5032,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["xfb02;ow",{"_index":4713,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.1.块/5.1.块.html#5-1-块":{},"5.表达式/5.13.for/5.13.for.html#5-13-for":{},"5.表达式/5.19.return/5.19.return.html#5-19-return":{},"5.表达式/5.20.break/5.20.break.html#5-20-break":{}}}],["xff08;&#x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff09;&#x4e0d;&#x80fd;&#x88ab;&#x8d4b;&#x503c;&#x5230;&#x4e00;&#x4e2a",{"_index":2842,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["xff08;&#x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#xff09;&#x7c7b;&#x578b;&#x7684;&#x53d8;&#x91cf;&#x3002;&#x8fd9;&#x4e2a;&#x5173;&#x7cfb;&#x5c31;&#x50cf;&#x7c7b;&#x548c;&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x3002",{"_index":2843,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["xff08;&#x4f8b;&#x5982;&#xff0c;q:4n:5i45:6i7h",{"_index":2258,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff08;&#x5305;&#x62ec;&#x65e0;&#x7a77;&#x503c;&#x548c",{"_index":2432,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["xff08;&#x53ef;&#x8fed;&#x4ee3;&#x7684;&#xff09;&#x662f;&#x542b;&#x5426;&#x6709;&#x5143;&#x7d20;&#x3002;&#x4e3a;&#x4e86;&#x8fbe;&#x5230;&#x8fd9;&#x4e2a;&#x76ee;&#x7684;&#xff0c;&#x6211;&#x4eec;&#x9664;&#x4e86;&#x77e5;&#x9053;&#x53c2;&#x6570;&#x662f;&#x4e00;&#x4e2a",{"_index":3847,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["xff08;&#x548c;&#xff09",{"_index":2572,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff08;&#x5728",{"_index":3549,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff08;&#x5982",{"_index":1440,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["xff08;&#x5bf9;&#x6bd4;&#x5728",{"_index":2714,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["xff08;&#x5e7f;&#x4e49;&#x7684;&#xff09;&#x4ee3;&#x6570;&#x6570;&#x636e;&#x7c7b;&#x578b",{"_index":530,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x6216;&#xff09",{"_index":2573,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff08;&#x65e0;&#x53c2;&#x6570;&#xff09;&#xff0c",{"_index":2287,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff08;&#x65e0;&#x53c2;&#x6570;&#xff09;&#xff0c;wy3:fooy1:b:2i4n",{"_index":2280,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff08;&#x7ad6;&#x7ebf;&#x56e0;&#x7f16;&#x8f91;&#x5668;&#x95ee;&#x9898;&#x663e;&#x5f0f;&#x4e0d;&#x6b63;&#x5e38;&#xff09",{"_index":957,"title":{},"body":{"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{}}}],["xff08;&#x7b2c;10.7&#x8282;&#xff09",{"_index":2813,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["xff08;&#x7b2c;2.3&#x8282;&#xff09;&#xff1a",{"_index":525,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;2.4&#x8282;&#xff09;&#xff1a",{"_index":531,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;2.5&#x8282;&#xff09;&#xff1a",{"_index":518,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;2.8&#x8282;&#xff09;&#xff1a",{"_index":511,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;3.2&#x8282;&#xff09;&#xff1a",{"_index":571,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;4.2&#x8282;&#xff09;&#xff1a",{"_index":562,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;4.4.2&#x8282;&#xff09;&#xff1a",{"_index":534,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;5.11&#x8282;&#xff09;&#xff1a",{"_index":542,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;6.1&#x8282;&#xff09;&#xff1a",{"_index":528,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;6.10&#x8282;&#xff09;&#xff1a",{"_index":568,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;6.2&#x8282;&#xff09;&#xff1a",{"_index":514,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;6.3&#x8282;&#xff09;&#xff1a",{"_index":548,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;6.4&#x8282;&#xff09;&#xff1a",{"_index":560,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;6.5&#x8282;&#xff09;&#xff1a",{"_index":551,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;6.6&#x8282;&#xff09;&#xff1a",{"_index":521,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;6.7&#x8282;&#xff09;&#xff1a",{"_index":539,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;6.8&#x8282;&#xff09;&#xff1a",{"_index":556,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7b2c;6.9&#x8282;&#xff09;&#xff1a",{"_index":545,"title":{},"body":{"6.语言特性/6.语言特性.html#6-语言特性":{}}}],["xff08;&#x7f16;&#x7801;&#x4e3a",{"_index":2434,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{}}}],["xff08;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":3242,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["xff08;&#x975e;&#xff09",{"_index":2574,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff08;ab&#xff09;&#x64cd;&#x4f5c;&#x7b26",{"_index":3329,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["xff09",{"_index":3552,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["xff09;&#x3002",{"_index":1198,"title":{},"body":{"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{}}}],["xff09;&#x4e4b;&#x540e;&#x3002",{"_index":5912,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["xff09;&#x4e4b;&#x95f4;&#x7684;&#x7c7b;&#x6bd4;&#x3002",{"_index":2708,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["xff09;&#x4f1a;&#x663e;&#x793a;&#x5982;&#x4e0b",{"_index":3545,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff09;&#x548c;&#x7b2c;&#x4e8c;&#x4e2a;&#x8c03;&#x7528;&#xff08;&#x4e24;&#x4e2a;&#x53c2;&#x6570;&#x90fd;&#x662f",{"_index":3697,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["xff09;&#x5b57;&#x8282;&#x7801;&#xff0c",{"_index":1138,"title":{},"body":{"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{}}}],["xff09;&#x7684;&#x8fde;&#x63a5;&#x3002",{"_index":1442,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{}}}],["xff09;&#x7c7b;&#x578b;&#x7684;&#x58f0;&#x660e;&#x3002;&#x8fd9;&#x6b63;&#x662f",{"_index":3618,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["xff09;&#xff0c;&#x4f46;&#x662f;&#x4e0d;&#x80fd;&#x7528;&#x5728;&#x53d8;&#x91cf",{"_index":3387,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["xff09;&#xff0c;&#x4f46;&#x662f;&#x7b2c;&#x4e09;&#x4e2a;&#x8c03;&#x7528;&#x5f15;&#x53d1;&#x4e86;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x5668;&#x9519;&#x8bef;&#x3002",{"_index":3698,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["xff09;&#xff0c;&#x6216;&#x8005;&#x9690;&#x5f0f;&#x5730;&#x89e6;&#x53d1;&#xff0c;&#x901a;&#x8fc7;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6&#x8282;&#xff09;&#xff0c;&#x4f8b;&#x5982;&#x5f53;&#x6211;&#x4eec;&#x8c03;&#x7528",{"_index":3676,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["xff09;&#xff0c;&#x7136;&#x540e;&#x8fd9;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5206;&#x914d;&#x56d",{"_index":3244,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["xff0c",{"_index":2136,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{}}}],["xff0c;!=&#xff0c;&#xff0c",{"_index":5276,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["xff0c;&#x4e00;&#x4e2a",{"_index":1339,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["xff0c;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7684",{"_index":3077,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["xff0c;&#x4e0d;&#x7ba1;&#x5982;&#x4f55",{"_index":4400,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["xff0c;&#x4e24;&#x4e2a;null&#x503c;&#x7684",{"_index":2241,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff0c;&#x4e3a;&#x952e;&#x4f7f;&#x7528;&#x4f7f;&#x7528;&#x5b57;&#x7b26;&#x4e32;&#x5b57;&#x9762;&#x503c;&#xff1a",{"_index":2920,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["xff0c;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#x6ca1;&#x6709;&#x503c;&#x53ef;&#x4ee5;&#x88ab;&#x4f7f;&#x7528;&#x4f5c;&#x4e3a;&#x53f3;&#x4fa7;&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":4880,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["xff0c;&#x4e86;&#x89e3;&#x4e00;&#x4e9b;&#x5e38;&#x89c1;&#x7684;&#x5982;&#x4f55;&#x88ab;&#x5927;&#x5927;&#x7b80;&#x5316;&#x3002",{"_index":1035,"title":{},"body":{"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{}}}],["xff0c;&#x4ece;&#x5934;&#x81f3;&#x5c3e;&#xff0c;&#x91c7;&#x7528;&#x7b2c;&#x4e00;&#x4e2a;&#x5339;&#x914d;&#x8f93;&#x5165;&#x503c;&#x7684",{"_index":5535,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["xff0c;&#x4f46;&#x662f;&#x53ea;&#x6709;false&#x88ab;&#x68c0;&#x67e5;&#x3002",{"_index":5496,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{}}}],["xff0c;&#x4f7f",{"_index":6357,"title":{},"body":{"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{}}}],["xff0c;&#x4f7f;&#x540e;&#x9762;&#x7684",{"_index":3175,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["xff0c;&#x5176;&#x521a;&#x597d;&#x6ee1;&#x8db3;&#x8fd9;&#x4e24;&#x70b9;&#x8981;&#x6c42;&#x3002",{"_index":2978,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["xff0c;&#x5176;&#x540e;&#x662f;&#x6761;&#x4ef6;&#x8868;&#x8fbe;&#x5f0f;&#x548c;&#x4e00;&#x4e2a;&#x95ed;&#x53e3;&#x7684;&#x5706;&#x62ec;&#x53f7",{"_index":4891,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["xff0c;&#x5176;&#x5b83;&#x4e0d;&#x652f;&#x6301",{"_index":2660,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff0c;&#x5176;&#x5b83;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#x4e3a",{"_index":2678,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff0c;&#x518d;&#x8ddf;&#x6761;&#x4ef6;&#x8868;&#x8fbe;&#x5f0f;&#x548c;&#x4e00;&#x4e2a;&#x95ed;&#x53e3;&#x7684;&#x5706;&#x62ec;&#x53f7",{"_index":4904,"title":{},"body":{"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{}}}],["xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x547d;&#x4ee4",{"_index":6024,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["xff0c;&#x53ef;&#x4ee5;&#x88ab;&#x5355;&#x72ec;&#x6216;&#x8005;&#x5b8c;&#x6574;&#x7684;&#x5e26;&#x5165;&#x5230;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x3002;&#x8fd9;&#x4e9b;&#x7c7b;&#x4e3a;&#xff1a",{"_index":6451,"title":{},"body":{"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["xff0c;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x547d;&#x4ee4",{"_index":6009,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{}}}],["xff0c;&#x540e;&#x8ddf;&#x53c2;&#x6570;&#x7684;&#x6570;&#x91cf;&#xff0c;&#x540e;&#x8ddf;&#x53c2;&#x6570;&#x7684;&#x503c;&#xff08;&#x4f8b;&#x5982;&#xff0c;wy3:fooy1:a:0",{"_index":2278,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff0c;&#x540e;&#x8ddf;&#x6784;&#x9020;&#x51fd;&#x6570;&#x7684;&#x7d22;&#x5f15;&#xff08;&#x4ece;0&#x5f00;&#x59cb;&#xff09;&#xff0c;&#x540e;&#x8ddf;&#x5192;&#x53f7",{"_index":2285,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff0c;&#x548c",{"_index":2137,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#条件":{},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["xff0c;&#x548c;a",{"_index":2263,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff0c;&#x56e0;&#x4e3a;&#x8fd9;&#x65f6",{"_index":2585,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff0c;&#x56e0;&#x6b64;&#x8c03;&#x7528;&#x8868;&#x8fbe;&#x5f0f",{"_index":3894,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["xff0c;&#x5982;&#x679c;&#x88ab;&#x91cd;&#x8f7d;&#x7684;&#x5b57;&#x6bb5;&#x662f;private&#xff0c;&#x4f46;&#x662f;&#x76f8;&#x53cd;&#x5219;&#x4e0d;&#x884c;&#x3002",{"_index":4607,"title":{},"body":{"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{}}}],["xff0c;&#x5982;&#x679c;&#x8f93;&#x5165;&#x5339;&#x914d",{"_index":5570,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["xff0c;&#x5b57;&#x6bb5;&#x624d;&#x4f1a;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x7c7b;&#x578b;&#x7684;&#x4e00;&#x90e8;&#x5206;&#x3002;&#x5426;&#x5219;&#xff0c;hax",{"_index":2923,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["xff0c;&#x5b83;&#x4e5f;&#x4f1a;&#x7ed1;&#x5b9a;&#x5339;&#x914d;&#x7684;&#x503c;&#x5230;&#x8fd9;&#x4e2a;&#x53d8;&#x91cf;&#x3002",{"_index":5577,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["xff0c;&#x5b83;&#x4eec;&#x662f;&#x6ca1;&#x6709;&#x4ef7;&#x503c;&#x7684;&#xff0c;&#x4f46;&#x662f;&#x8ddf",{"_index":2884,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["xff0c;&#x5b83;&#x4fbf;&#x4e0d;&#x80fd;&#x8fd4;&#x56d",{"_index":3881,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["xff0c;&#x5b83;&#x5339;&#x914d;&#x4efb;&#x4f55;&#xff0c;&#x4f46;&#x662f;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;i&#x989d;&#x6807;&#x8bc6;&#x540d;&#x79f0;&#x5982",{"_index":5576,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{}}}],["xff0c;&#x5b83;&#x63cf;&#x8ff0;&#x548c;&#x7c7b;&#x4e4b;&#x95f4;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x7684;&#x5173;&#x7cfb;&#x3002;&#x4e00;&#x4e2a;&#x6307;&#x5b9a;&#x7684;&#x7c7b;&#xff0c;&#x5982;&#x679c;&#x88ab;&#x663e;&#x5f0f;&#x5730;&#x9648;&#x8ff0;&#x5982;&#x4e0b;&#xff0c;&#x5219;&#x53ea;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x517c;&#x5bb9;&#x4e00;&#x4e2a;&#x63a5;&#x53e3;&#xff1a",{"_index":2735,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["xff0c;&#x5b83;&#x662f;&#x4e00;&#x4e2a;&#x5bf9;&#x8c61;&#xff0c;&#x63d0;&#x4f9b;&#x5bf9;&#x6570;&#x636e;&#x7684;&#x4e2a;&#x4f53;&#x5b57;&#x8282;&#x7684;&#x8bbf;&#x95ee;&#x3002",{"_index":6150,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{}}}],["xff0c;&#x5b83;&#x662f;&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":2805,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["xff0c;&#x5b83;&#x7684;&#x5185;&#x8054;&#x8868;&#x8fbe;&#x5f0f;&#x5206;&#x914d;&#x4e00;&#x4e2a;&#x503c;&#x5230;&#x8fd9;&#x91cc;&#x3002;&#x5f53;&#x4ee5;&#x7c7b;&#x8fdb;&#x884c;&#x601d;&#x8003;&#x7684;&#x8bdd;&#xff0c;&#x8fd9;&#x53ef;&#x80fd;&#x662f;&#x4ee4;&#x4eba;&#x60ca;&#x8bb6;&#x7684;&#x3002;&#x7136;&#x800c;&#xff0c;&#x8fd9;&#x6070;&#x5de7;&#x662f;&#x6211;&#x4eec;&#x5e0c;&#x671b;&#x5728;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x8868;&#x8fbe;&#x7684;&#x3002;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x4efb;&#x4f55;&#x5185;&#x8054;&#x6210;&#x5458;&#x65b9;&#x6cd5;&#x90fd;&#x53ef;&#x4ee5;&#x5206;&#x914d;&#x5230;&#x8fd9;&#x91cc;&#xff0c;&#x4ece;&#x800c;&#x4fee;&#x6539",{"_index":3553,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff0c;&#x5b8c;&#x6210;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x547d;&#x4ee4",{"_index":5931,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["xff0c;&#x5b8c;&#x6210;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x547d;&#x4ee4",{"_index":5953,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["xff0c;&#x5c31;&#x50cf",{"_index":3628,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["xff0c;&#x5c5e;&#x6027",{"_index":3148,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["xff0c;&#x5e76;&#x4e14;&#x53ea;&#x6709;&#x5728",{"_index":2579,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff0c;&#x5e76;&#x4ee5;&#x95ed;&#x53e3;&#x7684;&#x65b9;&#x62ec;&#x53f7",{"_index":5228,"title":{},"body":{"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{}}}],["xff0c;&#x5e76;&#x4f7f;&#x7528",{"_index":1468,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{}}}],["xff0c;&#x5e76;&#x5206;&#x522b;&#x521d;&#x59cb;&#x5316;&#x5b83;&#x4eec;&#x7684;&#x503c;&#x4e3a",{"_index":2988,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["xff0c;&#x5e76;&#x548c;&#x7f16;&#x8bd1;&#x5668;&#x7684;&#x5185;&#x90e8;&#x8fd0;&#x7b97;&#x7b26;&#x5904;&#x7406;&#x7ed1;&#x5728;&#x4e00;&#x8d77",{"_index":2627,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["xff0c;&#x5e76;&#x5bf9;&#x5176;&#x5b83;&#x7684;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x63d0;&#x4f9b;&#x5b83;&#x4eec;&#x81ea;&#x5df1;&#x7684;&#x5b9e;&#x73b0;&#x3002",{"_index":1334,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["xff0c;&#x5e76;&#x5c06;&#x5176;&#x653e;&#x5728;&#x7b2c;&#x4e8c;&#x4e2a",{"_index":3090,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["xff0c;&#x5e76;&#x6253;&#x5370;&#x51fa;&#x5b83;&#x7684;&#x8fd4;&#x56de;&#x503c;&#xff1a",{"_index":3027,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["xff0c;&#x5e76;&#x6dfb;&#x52a0;&#x81ea;&#x5df1;&#x7684;&#x6d4b;&#x8bd5;&#x65b9;&#x6cd5;&#x3002;&#x6bcf;&#x4e2a;&#x6d4b;&#x8bd5;&#x65b9;&#x6cd5;&#x540d;&#x5b57;&#x90fd;&#x662f;&#x7531",{"_index":1552,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{}}}],["xff0c;&#x5e76;&#x88ab;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#xff0c;&#x9ed8;&#x8ba4;&#x503c;&#x5c06;&#x88ab;&#x4f7f;&#x7528;&#xff1a",{"_index":2698,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff0c;&#x5e76;&#x8c03;&#x7528",{"_index":1558,"title":{},"body":{"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{}}}],["xff0c;&#x5f53;&#x5de6;&#x9762;&#x7684;&#x503c;&#x7c7b;&#x578b;&#x662f",{"_index":3305,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["xff0c;&#x5faa;&#x73af;&#x5219;&#x505c;&#x6b62;&#xff0c;&#x5426;&#x5219;&#x6267;&#x884c;&#x5faa;&#x73af;&#x4f53;&#x3002",{"_index":4895,"title":{},"body":{"5.表达式/5.14.while/5.14.while.html#5-14-while":{}}}],["xff0c;&#x5fc5;&#x987b;&#x6709;&#x4e00;&#x4e2a;&#x8fde;&#x63a5;&#x5efa;&#x7acb;&#x3002;&#x6709;&#x4e24;&#x79cd;hax",{"_index":1425,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接":{}}}],["xff0c;&#x610f;&#x5473;&#x7740;&#x53ea;&#x6709;&#x7c7b;&#x548c;&#x5b83;&#x7684;&#x5b50;&#x7c7b;&#x53ef;&#x4ee5;&#x8bbf;&#x95ee;&#x5b83;&#x4eec;&#x3002;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x88ab;&#x58f0;&#x660e;&#x4e3a;&#x516c;&#x5171;&#x5b57;&#x6bb5;&#xff0c;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":4634,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["xff0c;&#x6240;&#x4ee5;&#x5982;&#x679c;&#x6211;&#x4eec;&#x6570;&#x636e;&#x7684;&#x7ed3;&#x6784;&#x5982;&#x679c;&#x662f;&#x5df2;&#x77e5;&#x7684;&#xff0c;&#x6211;&#x4eec;&#x53ef;&#x80fd;&#x60f3;&#x8981;&#x4f7f;&#x7528;&#x533f;&#x540d;&#x7ed3;&#x6784;&#xff08;&#x7b2c;2.5&#x8282;&#xff09;&#x6307;&#x5b9a;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x4e2a;&#x65b9;&#x5f0f;&#x6211;&#x4eec;&#x63d0;&#x4f9b;&#x5bf9;&#x8bbf;&#x95ee;&#x6211;&#x4eec;&#x7684;&#x6570;&#x636e;&#x7684;&#x7f16;&#x8bd1;&#x65f6;&#x68c0;&#x67e5;&#xff0c;&#x5e76;&#x751f;&#x6210;&#x51e0;&#x4e4e;&#x6700;&#x4f18;&#x7684;&#x4ee3;&#x7801;&#xff0c;&#x56e0;&#x4e3a;&#x7f16;&#x8bd1;&#x5668;&#x4e86;&#x89e3;&#x7ed3;&#x6784;&#x4e2d;&#x7684;&#x7c7b;&#x578b;&#xff1a",{"_index":1313,"title":{},"body":{"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{}}}],["xff0c;&#x6267;&#x884c;&#x4e3a",{"_index":4421,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["xff0c;&#x62a5;&#x544a;&#x4f4d;&#x7f6e;&#x4f1a;&#x88ab",{"_index":6030,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{}}}],["xff0c;&#x63a5;&#x53d7",{"_index":3321,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["xff0c;&#x662f;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x8bed;&#x6cd5;&#x4e0a;&#x7684;&#x8868;&#x793a;&#x3002;&#x5728;&#x5f88;&#x591a;&#x60c5;&#x51b5;&#x4e0b;&#x8fd9;&#x53d8;&#x5f97;&#x5f88;&#x5bb9;&#x6613;&#x4f7f;&#x7528;&#xff0c;&#x56e0;&#x4e3a;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x5b83;&#x4eec;&#x7684;&#x8def;&#x5f84;&#x7b80;&#x5355;&#x7684;&#x5f15;&#x7528;&#x3002",{"_index":6550,"title":{},"body":{"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{}}}],["xff0c;&#x663e;&#x5f0f;&#x7684;&#x58f0;&#x660e;&#x7c7b;&#x578b;&#x4e3a;base&#xff0c;&#x7136;&#x540e;&#x5728;&#x5176;&#x4e0a;&#x8c03;&#x7528",{"_index":4470,"title":{},"body":{"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{}}}],["xff0c;&#x6709;&#x6548;&#x7684;&#x8f6c;&#x53d1;&#x5305;&#x88c5;&#x7684;array&#x7c7b;&#x578b;&#x7684;iterator&#x65b9;&#x6cd5;&#x3002",{"_index":5752,"title":{},"body":{"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{}}}],["xff0c;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#x88ab;&#x5b83;&#x4eec;&#x7684;&#x7d22;&#x5f15;&#x5e8f;&#x5217;&#x5316;&#x800c;&#x4e0d;&#x662f;&#x5b83;&#x4eec;&#x7684;&#x540d;&#x5b57;&#x3002;&#x8fd9;&#x53ef;&#x4ee5;&#x4f7f;&#x7ed3;&#x679c;&#x5b57;&#x7b26;&#x4e32;&#x66f4;&#x77ed;&#xff0c;&#x4f46;&#x662f;&#x5982;&#x679c",{"_index":2445,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{}}}],["xff0c;&#x6ca1;&#x6709;&#x7c7b;&#x578b;&#x793a;&#x610f;&#xff0c;&#x7559;&#x7ed9;&#x7f16;&#x8bd1;&#x5668;&#x4ece;&#x5b83;&#x7684;&#x8c03;&#x7528;&#x4e2d;&#x63a8;&#x65ad;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x901a;&#x8fc7;return",{"_index":4585,"title":{},"body":{"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{}}}],["xff0c;&#x6dfb;&#x52a0",{"_index":2167,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["xff0c;&#x7136;&#x540e;&#x4e00;&#x4e2a;&#x53d8;&#x91cf;&#x6807;&#x8bc6;&#x7b26;&#xff0c;&#x4e4b;&#x540e;&#x4e00;&#x4e2a;&#x5173;&#x952e;&#x5b57",{"_index":4869,"title":{},"body":{"5.表达式/5.13.for/5.13.for.html#5-13-for":{}}}],["xff0c;&#x7136;&#x540e;&#x4f5c;&#x4e3a;&#x4e00;&#x4e2a",{"_index":3252,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["xff0c;&#x7136;&#x540e;&#x518d;&#x6267;&#x884c",{"_index":2578,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff0c;&#x7136;&#x540e;&#x5206;&#x522b;&#x5206;&#x914d;&#x5b83;&#x4eec;&#x5230;&#x5b9e;&#x4f8b;&#x53d8;&#x91cf",{"_index":2713,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["xff0c;&#x7136;&#x540e;&#x5e94;&#x7528",{"_index":5779,"title":{},"body":{"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{}}}],["xff0c;&#x7136;&#x540e;&#x8bbf;&#x95ee;&#x5bf9;&#x8c61;&#x7684;&#x5c5e;&#x6027;&#x3002",{"_index":2374,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["xff0c;&#x7528;&#x4e8e;&#x901a;&#x8fc7;&#x540d;&#x5b57;&#x89e3;&#x6790;&#x7c7b;&#x548c;&#x679a;&#x4e3e;&#x3002;unseri",{"_index":2452,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{}}}],["xff0c;&#x7b49;&#x4e8e;0&#x7684;2&#x5b57;&#x8282;&#xff0c;s10:sgvsbg8giq",{"_index":2265,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff0c;&#x7b97;&#x6cd5;&#x89c4;&#x5219;&#x5982;&#x4e0b;&#xff1a",{"_index":4287,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["xff0c;&#x7c7b;&#x578b;&#x5de5;&#x5177;&#x786e;&#x4fdd;expression1&#x7684;&#x7c7b;&#x578b;&#x548c",{"_index":4928,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["xff0c;&#x7ed9;&#x5b83;&#x4f20;&#x9012;&#x4e00;&#x4e2a;&#x8d44;&#x6e90;&#x6807;&#x8bc6;&#x7b26;&#xff1a",{"_index":6137,"title":{},"body":{"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{}}}],["xff0c;&#x800c;&#x4e0d;&#x662f;&#x4f7f;&#x7528",{"_index":2171,"title":{},"body":{"10.标准库/10.6.模板/10.6.模板.html#利用资源":{}}}],["xff0c;&#x800c;&#x4e0d;&#x662f;&#x88ab;&#x5177;&#x4f53;&#x5316;&#x7684;&#x4f4d;&#x7f6e;&#x3002",{"_index":6387,"title":{},"body":{"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{}}}],["xff0c;&#x800c;&#x4e14;&#x8fd9;&#x4e24;&#x79cd;&#x4fee;&#x9970;&#x4e5f;&#x90fd;&#x53ef;&#x4ee5;&#x4fee;&#x9970;&#x4e8e;&#x5b57;&#x6bb5",{"_index":5331,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["xff0c;&#x800c;&#x65b9;&#x6cd5",{"_index":3256,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["xff0c;&#x8868;&#x793a;&#x6ca1;&#x6709;&#x53c2;&#x6570;&#x548c;&#x8fd4;&#x56de;&#x3002;hax",{"_index":2603,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["xff0c;&#x8868;&#x8fbe;&#x5f0f;&#x5f62;&#x5982",{"_index":4520,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["xff0c;&#x8986;&#x76d6;&#x4e86;&#x591a;&#x6570;&#x7684;&#x7528;&#x4f8b;&#x3002;&#x53e6;&#x5916;&#xff0c;&#x5b83;&#x4eec;&#x5141;&#x8bb8;&#x8bfb;/&#x5199",{"_index":1611,"title":{},"body":{"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{}}}],["xff0c;&#x8bbf;&#x95ee;&#x5931;&#x8d25;&#x3002",{"_index":3014,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["xff0c;&#x8fd9;&#x5728;&#x6240;&#x6709;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x90fd;&#x662f;&#x4e0d;&#x6b63;&#x786e;&#x7684;&#x3002;&#x6839;&#x636e;&#x4e0d;&#x540c;&#x7684;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#xff0c;&#x6570;&#x5b66;&#x9519;&#x8bef;&#x53ef;&#x80fd;&#x5f15;&#x53d1;&#x5f02;&#x5e76;&#x5f15;&#x8d77;&#x9519;&#x8bef;&#x3002",{"_index":1931,"title":{},"body":{"10.标准库/10.4.Math/10.4.2.数学错误.html#10-4-2-数学错误":{}}}],["xff0c;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x8fd9;&#x4e9b;&#x5b57;&#x6bb5;&#x53ea;&#x80fd;&#x88ab;&#x8d4b;&#x503c;&#x4e00;&#x6b21;&#x3002;&#x540c;&#x65f6;&#x8fd9;&#x7c7b;&#x7ed3;&#x6784;&#x53ea;&#x80fd;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x5bf9;&#x5e94;&#x5b57;&#x6bb5;&#x540c;&#x6837;&#x4fee;&#x9970;&#x4e3a",{"_index":2909,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}}}],["xff0c;&#x901a;&#x8fc7;&#x5b57;&#x7b26;&#x4e32;&#x63d2;&#x503c;&#xff0c;&#x4e0d;&#x518d;&#x9700;&#x8981;&#x624b;&#x52a8;&#x8fde;&#x63a5;&#x5b57;&#x7b26;&#x4e32;&#x7684;&#x5404;&#x90e8;&#x5206;&#x3002;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#xff0c;&#x901a;&#x8fc7;&#x7f8e;&#x5143;&#x7b26;&#x53f7",{"_index":5677,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{}}}],["xff0c;&#x90a3;&#x4e48;&#x5b83;&#x4fbf;&#x4e0d;&#x80fd;&#x8fd4;&#x56d",{"_index":3883,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["xff0c;&#x91cd;&#x8f7d;&#x65b9;&#x6cd5;&#x53ef;&#x4ee5;&#x88ab;&#x8bbe;&#x7f6e;&#x4e3a",{"_index":3320,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["xff0c;&#x9700;&#x8981;&#x663e;&#x5f0f;&#x7684",{"_index":2786,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["xff0c;&#xff0c;=&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x5bf9;&#x6bd4;&#x503c;&#x3002",{"_index":5277,"title":{},"body":{"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{}}}],["xff0c;[1",{"_index":2247,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff0c;expr",{"_index":5682,"title":{},"body":{"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"9.宏/9.3.具体化/9.3.具体化.html#9-3-具体化":{}}}],["xff0c;expression2",{"_index":4923,"title":{},"body":{"5.表达式/5.16.if/5.16.if.html#5-16-if":{}}}],["xff0c;flash",{"_index":1332,"title":{},"body":{"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{}}}],["xff0c;foo.a",{"_index":2279,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff0c;foo.b(4",{"_index":2281,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff0c;foreach",{"_index":2056,"title":{},"body":{"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{}}}],["xff0c;haxe&#x5141;&#x8bb8;&#x4f7f;&#x7528;&#x66f4;&#x81ea;&#x7136;&#x7684",{"_index":4213,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["xff0c;haxe.io.bytes.ofstring(&#x201c;hello",{"_index":2266,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff0c;new",{"_index":2272,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff0c;s2&#x88ab;&#x66ff;&#x6362;&#x4e3a;b&#x3002;&#x8fd9;&#x53ef;&#x4ee5;&#x907f;&#x514d;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x8c03;&#x7528;&#xff0c;&#x6839;&#x636e;&#x76ee;&#x6807;&#x548c;&#x51fa;&#x73b0;&#x7684;&#x9891;&#x7387;&#xff0c;&#x53ef;&#x4ee5;&#x4ea7;&#x751f;&#x663e;&#x8457;&#x7684;&#x6027;&#x80fd;&#x6539;&#x8fdb;&#x3002",{"_index":4702,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{}}}],["xff0c;{4=null",{"_index":2259,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff1a",{"_index":722,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{},"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{},"10.标准库/10.6.模板/10.6.模板.html#子模板":{},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{},"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{}}}],["xff1a;&#x4e00;&#x4e2a;&#x53d8;&#x91cf;&#xff08;&#x7b2c;4.1&#x8282;&#xff09;&#x7c7b;&#x5b57;&#x6bb5;&#x4fdd;&#x5b58;&#x4e00;&#x4e2a;&#x67d0;&#x7c7b;&#x578b;&#x7684;&#x503c;&#xff0c;&#x53ef;&#x4ee5;&#x88ab;&#x8bfb;&#x53d6;&#x6216;&#x8005;&#x5199;&#x5165;&#x3002",{"_index":219,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{}}}],["xff1a;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#xff08;&#x7b2c;10.1&#x8282;&#xff09;&#xff0c;&#x5982;&#x201d;&#x201d;&#xff0c;&#x201c;foo&#x201d;&#xff0c;&#x2019;&#x2019;&#xff0c;&#x2019;bar&#x2019",{"_index":5028,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["xff1a;&#x4e00;&#x4e2a;&#x5c5e;&#x6027;&#xff08;&#x7b2c;4.2&#x8282;&#xff09;&#x7c7b;&#x5b57;&#x6bb5;&#x5b9a;&#x4e49;&#x4e00;&#x4e2a;&#x5b9a;&#x5236;&#x7684;&#x8bbf;&#x95ee;&#x884c;&#x4e3a;&#xff0c;&#x5bf9;&#x6bd4;&#x5982;&#x5728;&#x7c7b;&#x4e4b;&#x5916;&#x7684;&#xff0c;&#x770b;&#x8d77;&#x6765;&#x50cf;&#x4e00;&#x4e2a;&#x53d8;&#x91cf;&#x5b57;&#x6bb5;&#x3002",{"_index":221,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{}}}],["xff1a;&#x4e00;&#x4e2a;&#x5e03;&#x5c14;&#x503c",{"_index":5030,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["xff1a;&#x4e00;&#x4e2a;&#x6240;&#x6709;&#x5b9a;&#x4e49;&#x7684;&#x5143;&#x6570;&#x636e;&#x8be6;&#x5c3d;&#x7684;&#x5217;&#x8868;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x8fd0;&#x884c",{"_index":5836,"title":{},"body":{"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{}}}],["xff1a;&#x4e00;&#x4e2a;&#x6574;&#x578b;&#xff08;&#x7b2c;2.1.1&#x8282;&#xff09;&#xff0c;&#x4f8b;&#x5982;0&#xff0c;1&#xff0c;97121&#xff0c",{"_index":5025,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["xff1a;&#x4e00;&#x4e2a;&#x65b9;&#x6cd5;&#xff08;&#x7b2c;4.3&#x8282;&#xff09;&#x662f;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#xff0c;&#x53ef;&#x4ee5;&#x88ab;&#x8c03;&#x7528;&#x6267;&#x884c;&#x4e00;&#x4e9b;&#x4ee3;&#x7801;&#x3002",{"_index":223,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{}}}],["xff1a;&#x4e00;&#x4e2a;&#x6d6e;&#x70b9;&#x6570;&#xff08;&#x7b2c;2.1.1&#x8282;&#xff09;&#xff0c;&#x5982;0.0&#xff0c;1.&#xff0c;.3&#xff0c",{"_index":5027,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["xff1a;&#x4e0b;&#x9762;&#x7684;haxe&#x5173;&#x952e;&#x5b57;&#x4e0d;&#x80fd;&#x88ab;&#x4f7f;&#x7528;&#x4e3a;&#x6807;&#x8bc6;&#x7b26;&#xff1a",{"_index":323,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["xff1a;&#x4e0d;&#x5141;&#x8bb8;&#x8bbf;&#x95e",{"_index":4536,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["xff1a;&#x4e0d;&#x6267;&#x884c;&#x4efb;&#x4f55;dce&#x3002",{"_index":5856,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["xff1a;&#x4e0d;&#x8bba;&#x51fd;&#x6570;&#x4f55;&#x65f6;&#x51fa;&#x73b0",{"_index":3962,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x4e3a;&#x548c;&#x5b8f;&#x6709;&#x5173;&#x7684;&#x64cd;&#x4f5c;&#x63d0;&#x4f9b;&#x4e0d;&#x540c;&#x7684;&#x6269;&#x5c55;&#xff08;&#x67e5;&#x770b",{"_index":5439,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["xff1a;&#x4f7f;&#x7528;us",{"_index":5442,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["xff1a;&#x4f8b;&#x5982;&#x4e00;&#x4e2a;&#x8d1f;&#x6570;&#x88ab",{"_index":1863,"title":{},"body":{"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{}}}],["xff1a;&#x52a8;&#x6001;&#x76ee;&#x6807",{"_index":2667,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff1a;&#x5339;&#x914d;&#x5931;&#x8d25;&#xff0c;&#x56e0;&#x4e3a",{"_index":5537,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["xff1a;&#x5339;&#x914d;&#x5931;&#x8d25;&#xff0c;&#x56e0;&#x4e3a;mytree&#x53f3;&#x4fa7;&#x7684;&#x5b50;&#x6811;&#x4e0d;&#x662f;&#x4e00;&#x4e2a;leaf&#xff0c;&#x800c;&#x662f;&#x53e6;&#x4e00;&#x4e2a",{"_index":5539,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["xff1a;&#x5339;&#x914d;&#x6210;&#x529f",{"_index":5541,"title":{},"body":{"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{}}}],["xff1a;&#x53ea;&#x5141;&#x8bb8;&#x4ece;&#x5b9a;&#x4e49;&#x7684;&#x7c7b;&#x4e2d;&#x8bbf;&#x95ee;&#x3002",{"_index":4533,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["xff1a;&#x53ea;&#x6709;haxe&#x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684;&#x7c7b;&#x88ab;dce&#x5f71;&#x54cd;&#x3002;&#x8fd9;&#x662f;&#x6240;&#x6709;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x9ed8;&#x8ba4;&#x7684;&#x8bbe;&#x7f6e;&#x3002",{"_index":5855,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["xff1a;&#x53ef;&#x7a7a",{"_index":2654,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff1a;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x548c;&#x62bd;&#x8c61;&#x7c7b;&#x578b",{"_index":3557,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff1a;&#x5982;&#x679c",{"_index":3952,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x5bf9;&#x8c61;&#x88ab;&#x5206;&#x914d;&#x4e86;&#x4e00;&#x4e2a;&#x4e0e;&#x58f0;&#x660e;&#x65f6;&#x6240;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x90a3;&#x4e48;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x628a;&#x6240;&#x6709;&#x7ed9;&#x5b9a;&#x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x7684;&#x7c7b;&#x578b;&#x7edf;&#x4e00;&#x4e3a;&#x671f;&#x671b;&#x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":3973,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x5982;&#x679c;&#x5b57;&#x6bb5;&#x6709;&#x516c;&#x5f00;&#x7684;&#x53ef;&#x89c1;&#x6027;&#xff0c;&#x5219;&#x5141;&#x8bb8;&#x666e;&#x901a;&#x7684;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#xff0c;&#x5426;&#x5219;&#x7b49;&#x4e8",{"_index":4531,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["xff1a;&#x5982;&#x679c;&#x7528;&#x5728;&#x4e00;&#x4e2a;&#x7c7b;&#x4e0a;&#xff0c;&#x5b83;&#x5c31;&#x50cf",{"_index":5862,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["xff1a;&#x5b9e;&#x73b0;&#x4e3a;&#x5b8f",{"_index":3446,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["xff1a;&#x5b9e;&#x73b0;&#x7684;&#x8bed;&#x6cd5",{"_index":2747,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["xff1a;&#x5c5e;&#x6027;&#x7684",{"_index":4417,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{}}}],["xff1a;&#x610f;&#x5916;&#x7684;&#x529f;&#x80fd",{"_index":3390,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["xff1a;&#x6211;&#x4eec;&#x5728;&#x4ecb;&#x7ecd",{"_index":3957,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x6240;&#x6709;&#x7684;&#x7c7b;&#x90fd;&#x88ab;dce&#x5f71;&#x54cd;&#x3002",{"_index":5857,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["xff1a;&#x63d0;&#x4f9b;&#x529f;&#x80fd;&#x65b9;&#x6cd5;&#x5230;&#x53ef;&#x8fed;&#x4ee3;&#x5bf9;&#x8c61;&#x3002",{"_index":5437,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["xff1a;&#x63d0;&#x4f9b;&#x5b57;&#x7b26;&#x4e32;&#x7684;&#x6269;&#x5c55;&#x529f;&#x80fd;&#xff0c;&#x4f8b;&#x5982;&#x66ff;&#x6362;&#x548c;&#x53bb;&#x9664;&#x7a7a;&#x683c;&#x3002",{"_index":5436,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["xff1a;&#x63d0;&#x4f9b;&#x7c7b;&#x578b;&#x4fe1;&#x606f;&#x529f;&#x80fd;&#x5230;enum&#x548c;&#x5b83;&#x4eec;&#x7684;&#x5b9e;&#x4f8b;&#x3002",{"_index":5438,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{}}}],["xff1a;&#x67d0;&#x4e00;&#x64cd;&#x4f5c;&#x7b26;&#x4f1a;&#x671f;&#x671b;&#x4f5c;&#x7528;&#x4e8e;&#x67d0;&#x4e00;&#x79cd;&#x7c7b;&#x578b;&#x4e0a;&#xff0c;&#x5f53;&#x64cd;&#x4f5c;&#x7b26;&#x4f5c;&#x7528;&#x4e8e;&#x67d0;&#x4e00;&#x7c7b;&#x578b;&#x65f6;&#x8be5;&#x7c7b;&#x578b;&#x4f1a;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x64cd;&#x4f5c;&#x7b26;&#x671f;&#x671b;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x6bd4;&#x5982;&#xff0c;&#x8868;&#x8fbe;&#x5f0f",{"_index":3976,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684",{"_index":3179,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["xff1a;&#x6dfb;&#x52a0;&#x4e00;&#x4e2a",{"_index":725,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["xff1a;&#x6dfb;&#x52a0;&#x4e00;&#x4e2a;&#x7c7b;&#x8def;&#x5f84;&#xff0c;&#x53ef;&#x80fd;&#x662f;&#x53ef;&#x4ee5;&#x88ab;&#x53d1;&#x73b0;&#x7684;&#x4e00;&#x4e2a",{"_index":723,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["xff1a;&#x6f5c;&#x5728;&#x7c7b;&#x578b",{"_index":3536,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff1a;&#x7834;&#x574f;&#x6027;&#x529f;&#x80fd",{"_index":5354,"title":{},"body":{"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{}}}],["xff1a;&#x7c7b;&#x4f3c;get/set&#x8bbf;&#x95ee;&#xff0c;&#x4f46;&#x662f;&#x4e0d;&#x9a8c;&#x8bc1;&#x5b58;&#x53d6;&#x5668;&#x5b57;&#x6bb5;&#x7684;&#x5b58;&#x5728;&#x3002",{"_index":4535,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["xff1a;&#x7c7b;&#x5b57;&#x6bb5",{"_index":212,"title":{},"body":{"4.类字段/4.类字段.html#4-类字段":{}}}],["xff1a;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x5c1d;&#x8bd5;&#x5728;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#x58f0;&#x660e;&#x7684;&#x6240;&#x6709;&#x7ed9;&#x5b9a;&#x7684;&#x7c7b;&#x578b;&#x4e2d;&#x5bfb;&#x627e;&#x4e00;&#x4e2a;&#x6700;&#x5c0f;&#x5316;&#x7c7b;&#x578b;&#x3002;&#x8bf7;&#x53c2;&#x9605",{"_index":3969,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x8868;&#x8fbe;&#x5f0f;&#x8bed;&#x6cd5;&#x4e2d;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":3700,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["xff1a;&#x8bbe;&#x7f6e;&#x4e3b;&#x7c7b;&#x3002",{"_index":727,"title":{},"body":{"7.编译器用法/7.编译器用法.html#7-编译器用法":{}}}],["xff1a;&#x8bbf;&#x95ee;&#x88ab;&#x751f;&#x6210;&#x4e3a;&#x4e00;&#x4e2a;&#x5b58;&#x53d6;&#x5668;&#x65b9;&#x6cd5;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x786e;&#x4fdd;&#x5b58;&#x53d6;&#x5668;&#x53ef;&#x7528;&#x3002",{"_index":4534,"title":{},"body":{"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{}}}],["xff1a;&#x8f93;&#x51fa;&#x7ed3;&#x6784;&#x7684;&#x95ee;&#x9898",{"_index":5958,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{}}}],["xff1a;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x5141;&#x8bb8;&#x4f7f;&#x7528;&#x4efb;&#x4f55;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#xff0c;&#x56e0;&#x6b64;&#x8868;&#x793a;&#x4e86;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x9009;&#x62e9;&#x3002;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x5d4c;&#x5957;&#x6765;&#x5141;&#x8bb8;&#x66f4;&#x591a;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":5416,"title":{},"body":{"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{}}}],["xff1a;&#x8fd9;&#x4e9b;&#x662f;&#x4e3a;&#x7c7b;&#x3001;&#x679a;&#x4e3e;&#x548c;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5b9a;&#x4e49;&#xff0c;&#x901a;&#x8fc7",{"_index":778,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["xff1a;&#x8fd9;&#x4e9b;&#x662f;&#x666e;&#x901a;&#x7684;&#x51fd;&#x6570;&#xff0c;&#x5728;&#x5b83;&#x4eec;&#x88ab;&#x7c7b;&#x578b;&#x5316;&#x4e4b;&#x540e;&#x9a6c;&#x4e0a;&#x6267;&#x884c;&#x3002",{"_index":782,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["xff1a;&#x8fd9;&#x4e9b;&#x88ab;&#x901a;&#x8fc7;&#x547d;&#x4ee4;&#x884c;&#x63d0;&#x4f9b;&#xff0c;&#x4f7f;&#x7528",{"_index":774,"title":{},"body":{"9.宏/9.宏.html#9-宏":{}}}],["xff1a;&#x8fd9;&#x5217;&#x51fa;&#x6a21;&#x5757",{"_index":5992,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["xff1a;&#x8fd9;&#x5217;&#x51fa;haxe&#x5305;&#x7684;&#x6240;&#x6709;&#x5b50;&#x5305;&#x4ee5;&#x53ca;&#x5305;&#x4e2d;&#x7684;&#x6240;&#x6709;&#x6a21;&#x5757;&#xff1a",{"_index":5989,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["xff1a;&#x901a;&#x5e38;&#xff0c;&#x4e00;&#x4e2a;&#x88ab;dce&#x79fb;&#x9664;&#x6240;&#x6709;&#x5b57;&#x6bb5;&#x7684;&#x7c7b;&#xff08;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x5f00;&#x59cb;&#x4e3a;&#x7a7a;&#x7684;&#xff09;&#x4f1a;&#x4ece;&#x8f93;&#x51fa;&#x4e2d;&#x79fb;&#x9664;&#x3002;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x8fd9;&#x4e2a;&#x5143;&#x6570;&#x636e;&#xff0c;&#x7a7a;&#x7c7b;&#x88ab;&#x4fdd;&#x7559;&#x3002",{"_index":5864,"title":{},"body":{"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{}}}],["xff1a;&#x9759;&#x6001;&#x6269;&#x5c55",{"_index":5474,"title":{},"body":{"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{}}}],["xff1a;&#x9759;&#x6001;&#x76ee;&#x6807",{"_index":2662,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff1a;&#x9ed8;&#x8ba4;&#x503c",{"_index":2674,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff1a;argu",{"_index":2641,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["xff1a;class",{"_index":2808,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["xff1a;enum",{"_index":2865,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{}}}],["xff1a;enum&#x7684;&#x5177;&#x4f53;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":2844,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["xff1a;enumvalu",{"_index":2833,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["xff1a;hax",{"_index":3151,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["xff1a;haxe&#x5141;&#x8bb8;&#x4f7f;&#x7528",{"_index":4196,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["xff1a;k",{"_index":2219,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff1a;m",{"_index":2221,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff1a;null&#x503c",{"_index":5031,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["xff1a;p",{"_index":2223,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["xff1a;protect",{"_index":4650,"title":{},"body":{"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{}}}],["xff1a;t",{"_index":6048,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["xff1a;tru",{"_index":2227,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["xff1b",{"_index":2676,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["xff1b;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;&#x5bf9;&#x4efb;&#x4f55;&#x4e1c;&#x897f;&#x9ed8;&#x8ba4;&#x90fd;&#x662f",{"_index":2659,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xml",{"_index":64,"title":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{}},"body":{"10.标准库/10.标准库.html":{},"10.标准库/10.标准库.html#10-标准库":{},"7.编译器用法/7.1.编译器标记.html":{},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{},"10.标准库/10.9.Xml/10.9.Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{},"8.编译器功能/8.4.资源/8.4.资源.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{}}}],["xml&#x7684;&#x4e00;&#x4e2a;&#x6839;&#x5143;&#x7d20;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":2357,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{}}}],["xml&#x7ed3;&#x6784;&#x53d6;&#x51b3;&#x4e8e;&#x6bcf;&#x6761;&#x8bb0;&#x5f55;&#x7684",{"_index":6044,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{}}}],["xml&#x7ed3;&#x6784;&#x5982;&#x4e0b;&#xff1a",{"_index":5937,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{}}}],["xml.addchild(xml.createel",{"_index":2478,"title":{},"body":{"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{}}}],["xml.attribut",{"_index":2354,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["xml.createel",{"_index":2332,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{}}}],["xml.element",{"_index":2348,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{}}}],["xml.elementsnam",{"_index":2351,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{}}}],["xml.firstchild().nodevalu",{"_index":2346,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}}}],["xml.nodenam",{"_index":2345,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["xml.pars",{"_index":2333,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{}}}],["xml.parse(xmlstring).firstel",{"_index":2344,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["xml.tostr",{"_index":2477,"title":{},"body":{"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{}}}],["xmlsocket",{"_index":1392,"title":{},"body":{"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{}}}],["xmlstring",{"_index":2341,"title":{},"body":{"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{}}}],["xnn",{"_index":1252,"title":{},"body":{"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{}}}],["xor",{"_index":5156,"title":{},"body":{"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["xx",{"_index":1804,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html":{},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{}}}],["xxx",{"_index":5018,"title":{},"body":{"5.表达式/5.2.常量/5.2.常量.html":{},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{}}}],["x}&apo",{"_index":4823,"title":{},"body":{"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{}}}],["y",{"_index":351,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{},"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{}}}],["y&#x662f;&#x4e00;&#x4e2a",{"_index":2637,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["y&#x7684;&#x503c;&#xff0c;&#x5e76;&#x4e14;&#x4e0d;&#x5e8f;&#x5217;&#x5316;&#x5b83;&#x3002;&#x76f8;&#x53cd;&#xff0c;&#x6211;&#x4eec;&#x5728",{"_index":2468,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{}}}],["y&#xff09",{"_index":2274,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["y10:hi%20there,&#x201c;hi",{"_index":2231,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["y10:hi%20there,“hi",{"_index":2182,"title":{},"body":{"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{}}}],["y3:fooi12",{"_index":2399,"title":{},"body":{"10.标准库/10.8.序列化/10.8.序列化.html":{},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{}}}],["y=1的结果到x",{"_index":4390,"title":{},"body":{"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{}}}],["ye",{"_index":1285,"title":{},"body":{"10.标准库/10.1.字符串/10.1.3.Encoding.html":{},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{}}}],["year",{"_index":1768,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.6.模板/10.6.模板.html":{},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{}}}],["yield",{"_index":414,"title":{},"body":{"6.语言特性/6.语言特性.html":{},"6.语言特性/6.语言特性.html#6-语言特性":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{}}}],["z",{"_index":239,"title":{},"body":{"5.表达式/5.表达式.html":{},"5.表达式/5.表达式.html#5-表达式":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.4.Math/10.4.Math.html":{},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["z&#x540c;&#x6837;&#x662f",{"_index":2640,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["z&#x5f00;&#x59cb;&#x3002;&#x540e;&#x53ef;&#x63a5;&#x4efb;&#x610f;&#x6570;&#x91cf;&#x7684;&#x6570;&#x5b57;&#x3001;&#x4e0b;&#x5212;&#x7ebf;&#x3001;&#x5927;&#x5c0f;&#x5199;&#x5b57;&#x6bcd;&#x7684;&#x7ec4;&#x5408;&#x3002;&#x66f4;&#x591a;&#x7684;&#x9650;&#x5236;&#x53d7;&#x5236;&#x4e8e;&#x4f7f;&#x7528;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#xff0c;&#x6839;&#x636e;&#x7c7b;&#x522b;&#x8fdb;&#x884c;&#x68c0;&#x67e5;&#xff1a",{"_index":315,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["z&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x5927;&#x5199;&#x5b57;&#x6bcd;a",{"_index":314,"title":{},"body":{"5.表达式/5.表达式.html#5-表达式":{}}}],["z0",{"_index":1869,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["z]+)/g",{"_index":1806,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html":{}}}],["z]+)}/g",{"_index":1811,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{}}}],["z]?/i",{"_index":1874,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["z][a",{"_index":1873,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{}}}],["za",{"_index":1769,"title":{},"body":{"10.标准库/10.3.正则表达式/10.3.2.分组.html":{},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{}}}],["zip",{"_index":5974,"title":{},"body":{"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{}}}],["z或者一个大写字母a",{"_index":238,"title":{},"body":{"5.表达式/5.表达式.html":{}}}]],"pipeline":["stemmer"]},"store":{"index.html":{"title":"关于本文档","path":"\\index.html","body":"关于本文档 本文档由 Hexo + Doc 生成，目前还在建设中，囿于个人时间精力有限，有兴趣参与加快本文档建设的朋友可以联系我，左侧边栏上有本文档 repo 地址 另外，本文档主要基于 看云上前人翻译过的一份 进行修缮与补充 本文档并非初学者教程，并不会教你如何编程。尽管如此，每一主题都被粗糙地设计为顺序阅读，其中会穿插一些如 “先前看过的” 或是 “尚未了解的” 引用链接。在一些情况下，一个较为靠前的章节会为了便于解释相关主题而使用一些后续章节才详细展开的内容，这些内容都会附上相应的跳转链接，提前阅读这些主题通常来说问题不大。 我们会使用很多 Haxe 源代码来保持理论与实践之间的桥接。这些代码示例通常是完整的程序，并带有一个 main 函数，它们都可以被编译。不过也有时候只有最关键的部分被展示出来。源代码看起来就像这样： 1 Haxe code here 偶尔我们会演示 Haxe 代码是如何被生成的，对于这些内容，通常会以 JavaScript 目标平台的输出用作解释。此外，在本文档中我们定义了一组术语。主要用于引入一个新的类型或是一个 Haxe 专用术语。我们不会定义每个新引入的概念，譬如什么是类，以避免弄乱文本。定义看起来像这样： 定义 : 定义名称 定义描述 文档中的一些地方还有一些花絮框。这些包括非正式的信息，如为什么在 Haxe 的开发中做出某些决定，或者过去的 Haxe 版本中的某些实际功能的改变等。这类信息通常不是很重要，你可以选择跳过，因为它们只是为了传达一些花絮。花絮看起来像这样： 花絮: 关于花絮 花絮内容"},"index.html#关于本文档":{"title":"&#x5173;&#x4E8E;&#x672C;&#x6587;&#x6863;","path":"\\index.html#关于本文档","body":"&#x672C;&#x6587;&#x6863;&#x7531; Hexo + Doc &#x751F;&#x6210;&#xFF0C;&#x76EE;&#x524D;&#x8FD8;&#x5728;&#x5EFA;&#x8BBE;&#x4E2D;&#xFF0C;&#x56FF;&#x4E8E;&#x4E2A;&#x4EBA;&#x65F6;&#x95F4;&#x7CBE;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x6709;&#x5174;&#x8DA3;&#x53C2;&#x4E0E;&#x52A0;&#x5FEB;&#x672C;&#x6587;&#x6863;&#x5EFA;&#x8BBE;&#x7684;&#x670B;&#x53CB;&#x53EF;&#x4EE5;&#x8054;&#x7CFB;&#x6211;&#xFF0C;&#x5DE6;&#x4FA7;&#x8FB9;&#x680F;&#x4E0A;&#x6709;&#x672C;&#x6587;&#x6863; repo &#x5730;&#x5740; &#x53E6;&#x5916;&#xFF0C;&#x672C;&#x6587;&#x6863;&#x4E3B;&#x8981;&#x57FA;&#x4E8E; &#x770B;&#x4E91;&#x4E0A;&#x524D;&#x4EBA;&#x7FFB;&#x8BD1;&#x8FC7;&#x7684;&#x4E00;&#x4EFD; &#x8FDB;&#x884C;&#x4FEE;&#x7F2E;&#x4E0E;&#x8865;&#x5145; &#x672C;&#x6587;&#x6863;&#x5E76;&#x975E;&#x521D;&#x5B66;&#x8005;&#x6559;&#x7A0B;&#xFF0C;&#x5E76;&#x4E0D;&#x4F1A;&#x6559;&#x4F60;&#x5982;&#x4F55;&#x7F16;&#x7A0B;&#x3002;&#x5C3D;&#x7BA1;&#x5982;&#x6B64;&#xFF0C;&#x6BCF;&#x4E00;&#x4E3B;&#x9898;&#x90FD;&#x88AB;&#x7C97;&#x7CD9;&#x5730;&#x8BBE;&#x8BA1;&#x4E3A;&#x987A;&#x5E8F;&#x9605;&#x8BFB;&#xFF0C;&#x5176;&#x4E2D;&#x4F1A;&#x7A7F;&#x63D2;&#x4E00;&#x4E9B;&#x5982; &#x201C;&#x5148;&#x524D;&#x770B;&#x8FC7;&#x7684;&#x201D; &#x6216;&#x662F; &#x201C;&#x5C1A;&#x672A;&#x4E86;&#x89E3;&#x7684;&#x201D; &#x5F15;&#x7528;&#x94FE;&#x63A5;&#x3002;&#x5728;&#x4E00;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4E00;&#x4E2A;&#x8F83;&#x4E3A;&#x9760;&#x524D;&#x7684;&#x7AE0;&#x8282;&#x4F1A;&#x4E3A;&#x4E86;&#x4FBF;&#x4E8E;&#x89E3;&#x91CA;&#x76F8;&#x5173;&#x4E3B;&#x9898;&#x800C;&#x4F7F;&#x7528;&#x4E00;&#x4E9B;&#x540E;&#x7EED;&#x7AE0;&#x8282;&#x624D;&#x8BE6;&#x7EC6;&#x5C55;&#x5F00;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x8FD9;&#x4E9B;&#x5185;&#x5BB9;&#x90FD;&#x4F1A;&#x9644;&#x4E0A;&#x76F8;&#x5E94;&#x7684;&#x8DF3;&#x8F6C;&#x94FE;&#x63A5;&#xFF0C;&#x63D0;&#x524D;&#x9605;&#x8BFB;&#x8FD9;&#x4E9B;&#x4E3B;&#x9898;&#x901A;&#x5E38;&#x6765;&#x8BF4;&#x95EE;&#x9898;&#x4E0D;&#x5927;&#x3002; &#x6211;&#x4EEC;&#x4F1A;&#x4F7F;&#x7528;&#x5F88;&#x591A; Haxe &#x6E90;&#x4EE3;&#x7801;&#x6765;&#x4FDD;&#x6301;&#x7406;&#x8BBA;&#x4E0E;&#x5B9E;&#x8DF5;&#x4E4B;&#x95F4;&#x7684;&#x6865;&#x63A5;&#x3002;&#x8FD9;&#x4E9B;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x901A;&#x5E38;&#x662F;&#x5B8C;&#x6574;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x5E76;&#x5E26;&#x6709;&#x4E00;&#x4E2A; main &#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x4EEC;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x7F16;&#x8BD1;&#x3002;&#x4E0D;&#x8FC7;&#x4E5F;&#x6709;&#x65F6;&#x5019;&#x53EA;&#x6709;&#x6700;&#x5173;&#x952E;&#x7684;&#x90E8;&#x5206;&#x88AB;&#x5C55;&#x793A;&#x51FA;&#x6765;&#x3002;&#x6E90;&#x4EE3;&#x7801;&#x770B;&#x8D77;&#x6765;&#x5C31;&#x50CF;&#x8FD9;&#x6837;&#xFF1A; 1 Haxe code here &#x5076;&#x5C14;&#x6211;&#x4EEC;&#x4F1A;&#x6F14;&#x793A; Haxe &#x4EE3;&#x7801;&#x662F;&#x5982;&#x4F55;&#x88AB;&#x751F;&#x6210;&#x7684;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E9B;&#x5185;&#x5BB9;&#xFF0C;&#x901A;&#x5E38;&#x4F1A;&#x4EE5; JavaScript &#x76EE;&#x6807;&#x5E73;&#x53F0;&#x7684;&#x8F93;&#x51FA;&#x7528;&#x4F5C;&#x89E3;&#x91CA;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x5728;&#x672C;&#x6587;&#x6863;&#x4E2D;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x7EC4;&#x672F;&#x8BED;&#x3002;&#x4E3B;&#x8981;&#x7528;&#x4E8E;&#x5F15;&#x5165;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7C7B;&#x578B;&#x6216;&#x662F;&#x4E00;&#x4E2A; Haxe &#x4E13;&#x7528;&#x672F;&#x8BED;&#x3002;&#x6211;&#x4EEC;&#x4E0D;&#x4F1A;&#x5B9A;&#x4E49;&#x6BCF;&#x4E2A;&#x65B0;&#x5F15;&#x5165;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x8B6C;&#x5982;&#x4EC0;&#x4E48;&#x662F;&#x7C7B;&#xFF0C;&#x4EE5;&#x907F;&#x514D;&#x5F04;&#x4E71;&#x6587;&#x672C;&#x3002;&#x5B9A;&#x4E49;&#x770B;&#x8D77;&#x6765;&#x50CF;&#x8FD9;&#x6837;&#xFF1A; &#x5B9A;&#x4E49; : &#x5B9A;&#x4E49;&#x540D;&#x79F0; &#x5B9A;&#x4E49;&#x63CF;&#x8FF0; &#x6587;&#x6863;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x5730;&#x65B9;&#x8FD8;&#x6709;&#x4E00;&#x4E9B;&#x82B1;&#x7D6E;&#x6846;&#x3002;&#x8FD9;&#x4E9B;&#x5305;&#x62EC;&#x975E;&#x6B63;&#x5F0F;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5982;&#x4E3A;&#x4EC0;&#x4E48;&#x5728; Haxe &#x7684;&#x5F00;&#x53D1;&#x4E2D;&#x505A;&#x51FA;&#x67D0;&#x4E9B;&#x51B3;&#x5B9A;&#xFF0C;&#x6216;&#x8005;&#x8FC7;&#x53BB;&#x7684; Haxe &#x7248;&#x672C;&#x4E2D;&#x7684;&#x67D0;&#x4E9B;&#x5B9E;&#x9645;&#x529F;&#x80FD;&#x7684;&#x6539;&#x53D8;&#x7B49;&#x3002;&#x8FD9;&#x7C7B;&#x4FE1;&#x606F;&#x901A;&#x5E38;&#x4E0D;&#x662F;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x8DF3;&#x8FC7;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x4F20;&#x8FBE;&#x4E00;&#x4E9B;&#x82B1;&#x7D6E;&#x3002;&#x82B1;&#x7D6E;&#x770B;&#x8D77;&#x6765;&#x50CF;&#x8FD9;&#x6837;&#xFF1A; &#x82B1;&#x7D6E;: &#x5173;&#x4E8E;&#x82B1;&#x7D6E; &#x82B1;&#x7D6E;&#x5185;&#x5BB9;"},"1.Haxe介绍/1.Haxe介绍.html":{"title":"","path":"\\1.Haxe介绍\\1.Haxe介绍.html","body":"1.Haxe介绍 本章内容： 1.1 Haxe是什么 1.2 关于本文档 作者及贡献者 Licence 1.3 Hello World 1.4 Haxe的历史"},"1.Haxe介绍/1.Haxe介绍.html#1-Haxe介绍":{"title":"1.Haxe&#x4ECB;&#x7ECD;","path":"\\1.Haxe介绍\\1.Haxe介绍.html#1-Haxe介绍","body":"&#x672C;&#x7AE0;&#x5185;&#x5BB9;&#xFF1A; 1.1 Haxe&#x662F;&#x4EC0;&#x4E48; 1.2 &#x5173;&#x4E8E;&#x672C;&#x6587;&#x6863; &#x4F5C;&#x8005;&#x53CA;&#x8D21;&#x732E;&#x8005; Licence 1.3 Hello World 1.4 Haxe&#x7684;&#x5386;&#x53F2;"},"10.标准库/10.标准库.html":{"title":"","path":"\\10.标准库\\10.标准库.html","body":"10.标准库 本章内容： 10.1: 字符串 10.2: 数据结构 10.3: 正则 10.4: Math 10.5: Lambda 10.6: Template 10.7: 反射 10.8: 序列化 10.9: Xml 10.10: Json 10.11: 输入/输出 10.12: Sys/sys 10.13: 远程处理 10.14: 单元测试"},"10.标准库/10.标准库.html#10-标准库":{"title":"10.&#x6807;&#x51C6;&#x5E93;","path":"\\10.标准库\\10.标准库.html#10-标准库","body":"&#x672C;&#x7AE0;&#x5185;&#x5BB9;&#xFF1A; 10.1: &#x5B57;&#x7B26;&#x4E32; 10.2: &#x6570;&#x636E;&#x7ED3;&#x6784; 10.3: &#x6B63;&#x5219; 10.4: Math 10.5: Lambda 10.6: Template 10.7: &#x53CD;&#x5C04; 10.8: &#x5E8F;&#x5217;&#x5316; 10.9: Xml 10.10: Json 10.11: &#x8F93;&#x5165;/&#x8F93;&#x51FA; 10.12: Sys/sys 10.13: &#x8FDC;&#x7A0B;&#x5904;&#x7406; 10.14: &#x5355;&#x5143;&#x6D4B;&#x8BD5;"},"2.类型/2.类型.html":{"title":"","path":"\\2.类型\\2.类型.html","body":"2.类型 Haxe 编译器利用丰富的类型系统，可以在编译时检测程序中类型相关的错误。类型错误是对一个特定类型执行了一个无效操作如，除以一个字符串、尝试访问一个整数的字段，或者调用一个函数而没有传递足够（或太多）的参数。在一些语言中，这些额外的安全需要消耗很多精力，因为程序员被要求明确地分配类型到语法结构： 1 2 var myButton:MySpecialButton = new MySpecialButton(); // As3 MySpecialButton* myButton = new MySpecialButton(); // C++ 显式的类型声明在 Haxe 中并不是必须的，因为编译器可以推断类型： 1 var myButton = new MySpecialButton (); // Haxe 我们会在 类型推断（第3.6节） 中探索它的细节。现在，足以确定上面代码中的变量 myButton 是可以被认为 MySpecialButton 类的一个实例。 Haxe 的类型系统知道七个类型组： 类实例：一个指定类或者接口对象 枚举实例：Haxe 枚举类型中的一个值 结构类型：一个匿名结构，即，一个被命名的字段集合 函数类型：一个由一些参数和一个返回值组成的混合类型 动态类型：一个万能类型，可以和任何类型兼容 抽象类型：一个编译时类型，在运行时被一个不同的类型表示 单形类型：一个 unknown 类型，之后可能会成为不同的类型 下一章中，我们将描述这些类型组中的每个类型，以及它们之间如何联系。 定义: 混合类型 复合类型是指拥有子类型的类型。这包括使用 类型参数（第3.2节） 的任何类型和 函数类型（第2.6节） 。"},"2.类型/2.类型.html#2-类型":{"title":"2.&#x7C7B;&#x578B;","path":"\\2.类型\\2.类型.html#2-类型","body":"Haxe &#x7F16;&#x8BD1;&#x5668;&#x5229;&#x7528;&#x4E30;&#x5BCC;&#x7684;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x68C0;&#x6D4B;&#x7A0B;&#x5E8F;&#x4E2D;&#x7C7B;&#x578B;&#x76F8;&#x5173;&#x7684;&#x9519;&#x8BEF;&#x3002;&#x7C7B;&#x578B;&#x9519;&#x8BEF;&#x662F;&#x5BF9;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#x6267;&#x884C;&#x4E86;&#x4E00;&#x4E2A;&#x65E0;&#x6548;&#x64CD;&#x4F5C;&#x5982;&#xFF0C;&#x9664;&#x4EE5;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x3001;&#x5C1D;&#x8BD5;&#x8BBF;&#x95EE;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#x7684;&#x5B57;&#x6BB5;&#xFF0C;&#x6216;&#x8005;&#x8C03;&#x7528;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x800C;&#x6CA1;&#x6709;&#x4F20;&#x9012;&#x8DB3;&#x591F;&#xFF08;&#x6216;&#x592A;&#x591A;&#xFF09;&#x7684;&#x53C2;&#x6570;&#x3002;&#x5728;&#x4E00;&#x4E9B;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x8FD9;&#x4E9B;&#x989D;&#x5916;&#x7684;&#x5B89;&#x5168;&#x9700;&#x8981;&#x6D88;&#x8017;&#x5F88;&#x591A;&#x7CBE;&#x529B;&#xFF0C;&#x56E0;&#x4E3A;&#x7A0B;&#x5E8F;&#x5458;&#x88AB;&#x8981;&#x6C42;&#x660E;&#x786E;&#x5730;&#x5206;&#x914D;&#x7C7B;&#x578B;&#x5230;&#x8BED;&#x6CD5;&#x7ED3;&#x6784;&#xFF1A; 1 2 var myButton:MySpecialButton = new MySpecialButton(); // As3 MySpecialButton* myButton = new MySpecialButton(); // C++ &#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x58F0;&#x660E;&#x5728; Haxe &#x4E2D;&#x5E76;&#x4E0D;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x7F16;&#x8BD1;&#x5668;&#x53EF;&#x4EE5;&#x63A8;&#x65AD;&#x7C7B;&#x578B;&#xFF1A; 1 var myButton = new MySpecialButton (); // Haxe &#x6211;&#x4EEC;&#x4F1A;&#x5728; &#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09; &#x4E2D;&#x63A2;&#x7D22;&#x5B83;&#x7684;&#x7EC6;&#x8282;&#x3002;&#x73B0;&#x5728;&#xFF0C;&#x8DB3;&#x4EE5;&#x786E;&#x5B9A;&#x4E0A;&#x9762;&#x4EE3;&#x7801;&#x4E2D;&#x7684;&#x53D8;&#x91CF; myButton &#x662F;&#x53EF;&#x4EE5;&#x88AB;&#x8BA4;&#x4E3A; MySpecialButton &#x7C7B;&#x7684;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;&#x3002; Haxe &#x7684;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x77E5;&#x9053;&#x4E03;&#x4E2A;&#x7C7B;&#x578B;&#x7EC4;&#xFF1A; &#x7C7B;&#x5B9E;&#x4F8B;&#xFF1A;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7C7B;&#x6216;&#x8005;&#x63A5;&#x53E3;&#x5BF9;&#x8C61; &#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#xFF1A;Haxe &#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x503C; &#x7ED3;&#x6784;&#x7C7B;&#x578B;&#xFF1A;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF0C;&#x5373;&#xFF0C;&#x4E00;&#x4E2A;&#x88AB;&#x547D;&#x540D;&#x7684;&#x5B57;&#x6BB5;&#x96C6;&#x5408; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF1A;&#x4E00;&#x4E2A;&#x7531;&#x4E00;&#x4E9B;&#x53C2;&#x6570;&#x548C;&#x4E00;&#x4E2A;&#x8FD4;&#x56DE;&#x503C;&#x7EC4;&#x6210;&#x7684;&#x6DF7;&#x5408;&#x7C7B;&#x578B; &#x52A8;&#x6001;&#x7C7B;&#x578B;&#xFF1A;&#x4E00;&#x4E2A;&#x4E07;&#x80FD;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x548C;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x517C;&#x5BB9; &#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF1A;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x65F6;&#x7C7B;&#x578B;&#xFF0C;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x88AB;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#x8868;&#x793A; &#x5355;&#x5F62;&#x7C7B;&#x578B;&#xFF1A;&#x4E00;&#x4E2A; unknown &#x7C7B;&#x578B;&#xFF0C;&#x4E4B;&#x540E;&#x53EF;&#x80FD;&#x4F1A;&#x6210;&#x4E3A;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B; &#x4E0B;&#x4E00;&#x7AE0;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x63CF;&#x8FF0;&#x8FD9;&#x4E9B;&#x7C7B;&#x578B;&#x7EC4;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x4EE5;&#x53CA;&#x5B83;&#x4EEC;&#x4E4B;&#x95F4;&#x5982;&#x4F55;&#x8054;&#x7CFB;&#x3002; &#x5B9A;&#x4E49;: &#x6DF7;&#x5408;&#x7C7B;&#x578B; &#x590D;&#x5408;&#x7C7B;&#x578B;&#x662F;&#x6307;&#x62E5;&#x6709;&#x5B50;&#x7C7B;&#x578B;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x5305;&#x62EC;&#x4F7F;&#x7528; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09; &#x7684;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x548C; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.6&#x8282;&#xFF09; &#x3002;"},"3.类型系统/3.类型系统.html":{"title":"","path":"\\3.类型系统\\3.类型系统.html","body":"3.类型系统 我们在 类型（第2章） 学习了不同的类型，现在看看它们之间如何交互。我们从引入 typedef（第3.1节） 作为一个简单的开始， typedef 是给一个复杂类型一个名字（或别名）的机制。除此之外，当我们使用带 类型参数（第3.2节） 的类型时它也会派上用场。 很多类型安全是通过检查前面的类型组的两个指定类型是否兼容来实现的。就是说，编译器尝试对它们执行如在 统一（第3.5节） 中描述的统一。 所有的类型以模块形式组织，可以被通过路径找到。 模块和路径（第3.7节） 中会详细解释相关的机制。"},"3.类型系统/3.类型系统.html#3-类型系统":{"title":"3.&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;","path":"\\3.类型系统\\3.类型系统.html#3-类型系统","body":"&#x6211;&#x4EEC;&#x5728; &#x7C7B;&#x578B;&#xFF08;&#x7B2C;2&#x7AE0;&#xFF09; &#x5B66;&#x4E60;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x73B0;&#x5728;&#x770B;&#x770B;&#x5B83;&#x4EEC;&#x4E4B;&#x95F4;&#x5982;&#x4F55;&#x4EA4;&#x4E92;&#x3002;&#x6211;&#x4EEC;&#x4ECE;&#x5F15;&#x5165; typedef&#xFF08;&#x7B2C;3.1&#x8282;&#xFF09; &#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x5F00;&#x59CB;&#xFF0C; typedef &#x662F;&#x7ED9;&#x4E00;&#x4E2A;&#x590D;&#x6742;&#x7C7B;&#x578B;&#x4E00;&#x4E2A;&#x540D;&#x5B57;&#xFF08;&#x6216;&#x522B;&#x540D;&#xFF09;&#x7684;&#x673A;&#x5236;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x5E26; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09; &#x7684;&#x7C7B;&#x578B;&#x65F6;&#x5B83;&#x4E5F;&#x4F1A;&#x6D3E;&#x4E0A;&#x7528;&#x573A;&#x3002; &#x5F88;&#x591A;&#x7C7B;&#x578B;&#x5B89;&#x5168;&#x662F;&#x901A;&#x8FC7;&#x68C0;&#x67E5;&#x524D;&#x9762;&#x7684;&#x7C7B;&#x578B;&#x7EC4;&#x7684;&#x4E24;&#x4E2A;&#x6307;&#x5B9A;&#x7C7B;&#x578B;&#x662F;&#x5426;&#x517C;&#x5BB9;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#x3002;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x5C1D;&#x8BD5;&#x5BF9;&#x5B83;&#x4EEC;&#x6267;&#x884C;&#x5982;&#x5728; &#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09; &#x4E2D;&#x63CF;&#x8FF0;&#x7684;&#x7EDF;&#x4E00;&#x3002; &#x6240;&#x6709;&#x7684;&#x7C7B;&#x578B;&#x4EE5;&#x6A21;&#x5757;&#x5F62;&#x5F0F;&#x7EC4;&#x7EC7;&#xFF0C;&#x53EF;&#x4EE5;&#x88AB;&#x901A;&#x8FC7;&#x8DEF;&#x5F84;&#x627E;&#x5230;&#x3002; &#x6A21;&#x5757;&#x548C;&#x8DEF;&#x5F84;&#xFF08;&#x7B2C;3.7&#x8282;&#xFF09; &#x4E2D;&#x4F1A;&#x8BE6;&#x7EC6;&#x89E3;&#x91CA;&#x76F8;&#x5173;&#x7684;&#x673A;&#x5236;&#x3002;"},"4.类字段/4.类字段.html":{"title":"","path":"\\4.类字段\\4.类字段.html","body":"4.类字段 定义 ：类字段 一个类字段是类中一个变量、属性、或者方法，可以是静态或者非静态的。非静态字段被称为成员字段，所以我们有时候会说，一个静态方法或者一个成员变量。 [warning] Deﬁnition: Class Field A class ﬁeld is a variable, property or method of a class which can either be static or nonstatic. Non-static ﬁelds are referred to as member ﬁelds, so we speak of e.g. a static method or a member variable. 目前我们已经见过一般的类型和Haxe程序如何构造的。这节关于类字段的将对构造部分做出结论，同时通往Haxe的行为部分。这是因为类字段是表达式的家。 So far we have seen how types and Haxe programs in general are structured. This section about class ﬁelds concludes the structural part and at the same time bridges to the behavioral part of Haxe. This is because class ﬁelds are the place where expressions (5) are at home. 有三种类字段： There are three kinds of class ﬁelds: 变量 ：一个变量（第4.1节）类字段保存一个某类型的值，可以被读取或者写入。 属性 ：一个属性（第4.2节）类字段定义一个定制的访问行为，对比如在类之外的，看起来像一个变量字段。 方法 ：一个方法（第4.3节）是一个函数，可以被调用执行一些代码。 Variable: A variable(4.1) class ﬁeld holds a value of a certain type,which can be read or written. Property: A property (4.2) class ﬁeld deﬁnes a custom access behavior for something that, outside the class, looks like a variable ﬁeld. Method: A method (4.3) is a function which can be called to execute code. 严格说，一个变量可以被认为是一个属性带有某个访问修饰符。事实上，Haxe编译器在它们的类型解析时并不区分变量和属性，但是它们仍然在语法层面上有所区分。 Strictly speaking, a variable could be considered to be a property with certain access modiﬁers. Indeed,the Haxe Compiler does not distinguish variables and properties during its typing phase, but they remain separated at syntax level. 关于术语，一个方法是一个（静态或非静态）函数，属于一个类。其他的函数，例如表达式中一个局部函数（第5.11节），不被认为是方法。 Regarding terminology,a method is a (static or non-static) function belonging to a class. Other functions, such as a local functions (5.11) in expressions, are not considered methods."},"4.类字段/4.类字段.html#4-类字段":{"title":"4.&#x7C7B;&#x5B57;&#x6BB5;","path":"\\4.类字段\\4.类字段.html#4-类字段","body":"&#x5B9A;&#x4E49; &#xFF1A;&#x7C7B;&#x5B57;&#x6BB5; &#x4E00;&#x4E2A;&#x7C7B;&#x5B57;&#x6BB5;&#x662F;&#x7C7B;&#x4E2D;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x3001;&#x5C5E;&#x6027;&#x3001;&#x6216;&#x8005;&#x65B9;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x9759;&#x6001;&#x6216;&#x8005;&#x975E;&#x9759;&#x6001;&#x7684;&#x3002;&#x975E;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x88AB;&#x79F0;&#x4E3A;&#x6210;&#x5458;&#x5B57;&#x6BB5;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x6709;&#x65F6;&#x5019;&#x4F1A;&#x8BF4;&#xFF0C;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x3002; [warning] De&#xFB01;nition: Class Field A class &#xFB01;eld is a variable, property or method of a class which can either be static or nonstatic. Non-static &#xFB01;elds are referred to as member &#xFB01;elds, so we speak of e.g. a static method or a member variable. &#x76EE;&#x524D;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x89C1;&#x8FC7;&#x4E00;&#x822C;&#x7684;&#x7C7B;&#x578B;&#x548C;Haxe&#x7A0B;&#x5E8F;&#x5982;&#x4F55;&#x6784;&#x9020;&#x7684;&#x3002;&#x8FD9;&#x8282;&#x5173;&#x4E8E;&#x7C7B;&#x5B57;&#x6BB5;&#x7684;&#x5C06;&#x5BF9;&#x6784;&#x9020;&#x90E8;&#x5206;&#x505A;&#x51FA;&#x7ED3;&#x8BBA;&#xFF0C;&#x540C;&#x65F6;&#x901A;&#x5F80;Haxe&#x7684;&#x884C;&#x4E3A;&#x90E8;&#x5206;&#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x7C7B;&#x5B57;&#x6BB5;&#x662F;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x5BB6;&#x3002; So far we have seen how types and Haxe programs in general are structured. This section about class &#xFB01;elds concludes the structural part and at the same time bridges to the behavioral part of Haxe. This is because class &#xFB01;elds are the place where expressions (5) are at home. &#x6709;&#x4E09;&#x79CD;&#x7C7B;&#x5B57;&#x6BB5;&#xFF1A; There are three kinds of class &#xFB01;elds: &#x53D8;&#x91CF; &#xFF1A;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#xFF08;&#x7B2C;4.1&#x8282;&#xFF09;&#x7C7B;&#x5B57;&#x6BB5;&#x4FDD;&#x5B58;&#x4E00;&#x4E2A;&#x67D0;&#x7C7B;&#x578B;&#x7684;&#x503C;&#xFF0C;&#x53EF;&#x4EE5;&#x88AB;&#x8BFB;&#x53D6;&#x6216;&#x8005;&#x5199;&#x5165;&#x3002; &#x5C5E;&#x6027; &#xFF1A;&#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#x7C7B;&#x5B57;&#x6BB5;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5B9A;&#x5236;&#x7684;&#x8BBF;&#x95EE;&#x884C;&#x4E3A;&#xFF0C;&#x5BF9;&#x6BD4;&#x5982;&#x5728;&#x7C7B;&#x4E4B;&#x5916;&#x7684;&#xFF0C;&#x770B;&#x8D77;&#x6765;&#x50CF;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x5B57;&#x6BB5;&#x3002; &#x65B9;&#x6CD5; &#xFF1A;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3&#x8282;&#xFF09;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x88AB;&#x8C03;&#x7528;&#x6267;&#x884C;&#x4E00;&#x4E9B;&#x4EE3;&#x7801;&#x3002; Variable: A variable(4.1) class &#xFB01;eld holds a value of a certain type,which can be read or written. Property: A property (4.2) class &#xFB01;eld de&#xFB01;nes a custom access behavior for something that, outside the class, looks like a variable &#xFB01;eld. Method: A method (4.3) is a function which can be called to execute code. &#x4E25;&#x683C;&#x8BF4;&#xFF0C;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x53EF;&#x4EE5;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#x5E26;&#x6709;&#x67D0;&#x4E2A;&#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;Haxe&#x7F16;&#x8BD1;&#x5668;&#x5728;&#x5B83;&#x4EEC;&#x7684;&#x7C7B;&#x578B;&#x89E3;&#x6790;&#x65F6;&#x5E76;&#x4E0D;&#x533A;&#x5206;&#x53D8;&#x91CF;&#x548C;&#x5C5E;&#x6027;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x4EEC;&#x4ECD;&#x7136;&#x5728;&#x8BED;&#x6CD5;&#x5C42;&#x9762;&#x4E0A;&#x6709;&#x6240;&#x533A;&#x5206;&#x3002; Strictly speaking, a variable could be considered to be a property with certain access modi&#xFB01;ers. Indeed,the Haxe Compiler does not distinguish variables and properties during its typing phase, but they remain separated at syntax level. &#x5173;&#x4E8E;&#x672F;&#x8BED;&#xFF0C;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x4E00;&#x4E2A;&#xFF08;&#x9759;&#x6001;&#x6216;&#x975E;&#x9759;&#x6001;&#xFF09;&#x51FD;&#x6570;&#xFF0C;&#x5C5E;&#x4E8E;&#x4E00;&#x4E2A;&#x7C7B;&#x3002;&#x5176;&#x4ED6;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x4F8B;&#x5982;&#x8868;&#x8FBE;&#x5F0F;&#x4E2D;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x51FD;&#x6570;&#xFF08;&#x7B2C;5.11&#x8282;&#xFF09;&#xFF0C;&#x4E0D;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x65B9;&#x6CD5;&#x3002; Regarding terminology,a method is a (static or non-static) function belonging to a class. Other functions, such as a local functions (5.11) in expressions, are not considered methods."},"5.表达式/5.表达式.html":{"title":"","path":"\\5.表达式\\5.表达式.html","body":"5.表达式 Haxe中的表达式定义了程序需要做什么。多数表达式可以在方法（第4.3节）体中找到，它们被结合来描述方法的功能。本节解释不同类型的表达式。一些定义可以提供帮助： Expressions in Haxe deﬁne what a program does. Most expressions are found in the body of a method (4.3), where they are combined to express what that method should do. This section explains the different kinds of expressions. Some deﬁnitions help here: Name 定义：Name 一个名称通常指代 一个类型 一个局部变量 一个局部函数，或者 一个字段 Deﬁnition : Name A general name may refer to a type, a local variable, a local function or a ﬁeld. Identiﬁer 定义：标识符 Haxe的标识符由一个下划线_、一个美元符号$，一个小写字母a-z或者一个大写字母A-Z开始。后可接任意数量的数字、下划线、大小写字母的组合。更多的限制受制于使用的上下文，根据类别进行检查： 类型名必须使用大写的字母或者一个下划线开始。 美元符号不允许用于任何类别的名字的开头（美元名字多数用于宏的具体化（第9.3节））。 [warning] Deﬁnition : Identiﬁer Haxe identiﬁers start with an underscore _, a dollar $, a lower-case character a-z or an upper-case character A-Z. After that, any combination and number of _, A-Z, a-z and 0-9 may follow. Further limitations follow from the usage context, which are checked upon typing: Type names must start with an upper-case letter A-Z or an underscore _. Leading dollars are not allowed for any kind of name(5)(dollar-names are mostly used for macro reiﬁcation (9.3)). Since Haxe 3.3.0 Haxe保留前置 _hx_ 的标识符在内部使用。这并不是强制的被解析器或者类型检查器执行。 Haxe reserves the identiﬁer preﬁx hx for internal use. This is not enforced by the parser or typer. 关键字 ：下面的Haxe关键字不能被使用为标识符： Keywords The following Haxe keywords may not be used as identiﬁers: abstract break case cast catch class continue default do dynamic else enum extends extern false for function if implements import in inline interface macro new null override package private public return static switch this throw true try typedef untyped using var while"},"5.表达式/5.表达式.html#5-表达式":{"title":"5.&#x8868;&#x8FBE;&#x5F0F;","path":"\\5.表达式\\5.表达式.html#5-表达式","body":"Haxe&#x4E2D;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5B9A;&#x4E49;&#x4E86;&#x7A0B;&#x5E8F;&#x9700;&#x8981;&#x505A;&#x4EC0;&#x4E48;&#x3002;&#x591A;&#x6570;&#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x4EE5;&#x5728;&#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3&#x8282;&#xFF09;&#x4F53;&#x4E2D;&#x627E;&#x5230;&#xFF0C;&#x5B83;&#x4EEC;&#x88AB;&#x7ED3;&#x5408;&#x6765;&#x63CF;&#x8FF0;&#x65B9;&#x6CD5;&#x7684;&#x529F;&#x80FD;&#x3002;&#x672C;&#x8282;&#x89E3;&#x91CA;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x4E00;&#x4E9B;&#x5B9A;&#x4E49;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x5E2E;&#x52A9;&#xFF1A; Expressions in Haxe de&#xFB01;ne what a program does. Most expressions are found in the body of a method (4.3), where they are combined to express what that method should do. This section explains the different kinds of expressions. Some de&#xFB01;nitions help here: Name &#x5B9A;&#x4E49;&#xFF1A;Name &#x4E00;&#x4E2A;&#x540D;&#x79F0;&#x901A;&#x5E38;&#x6307;&#x4EE3; &#x4E00;&#x4E2A;&#x7C7B;&#x578B; &#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x53D8;&#x91CF; &#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x51FD;&#x6570;&#xFF0C;&#x6216;&#x8005; &#x4E00;&#x4E2A;&#x5B57;&#x6BB5; De&#xFB01;nition : Name A general name may refer to a type, a local variable, a local function or a &#xFB01;eld. Identi&#xFB01;er &#x5B9A;&#x4E49;&#xFF1A;&#x6807;&#x8BC6;&#x7B26; Haxe&#x7684;&#x6807;&#x8BC6;&#x7B26;&#x7531;&#x4E00;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;_&#x3001;&#x4E00;&#x4E2A;&#x7F8E;&#x5143;&#x7B26;&#x53F7;$&#xFF0C;&#x4E00;&#x4E2A;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;a-z&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x5927;&#x5199;&#x5B57;&#x6BCD;A-Z&#x5F00;&#x59CB;&#x3002;&#x540E;&#x53EF;&#x63A5;&#x4EFB;&#x610F;&#x6570;&#x91CF;&#x7684;&#x6570;&#x5B57;&#x3001;&#x4E0B;&#x5212;&#x7EBF;&#x3001;&#x5927;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;&#x7684;&#x7EC4;&#x5408;&#x3002;&#x66F4;&#x591A;&#x7684;&#x9650;&#x5236;&#x53D7;&#x5236;&#x4E8E;&#x4F7F;&#x7528;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x6839;&#x636E;&#x7C7B;&#x522B;&#x8FDB;&#x884C;&#x68C0;&#x67E5;&#xFF1A; &#x7C7B;&#x578B;&#x540D;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x5927;&#x5199;&#x7684;&#x5B57;&#x6BCD;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x4E0B;&#x5212;&#x7EBF;&#x5F00;&#x59CB;&#x3002; &#x7F8E;&#x5143;&#x7B26;&#x53F7;&#x4E0D;&#x5141;&#x8BB8;&#x7528;&#x4E8E;&#x4EFB;&#x4F55;&#x7C7B;&#x522B;&#x7684;&#x540D;&#x5B57;&#x7684;&#x5F00;&#x5934;&#xFF08;&#x7F8E;&#x5143;&#x540D;&#x5B57;&#x591A;&#x6570;&#x7528;&#x4E8E;&#x5B8F;&#x7684;&#x5177;&#x4F53;&#x5316;&#xFF08;&#x7B2C;9.3&#x8282;&#xFF09;&#xFF09;&#x3002; [warning] De&#xFB01;nition : Identi&#xFB01;er Haxe identi&#xFB01;ers start with an underscore _, a dollar $, a lower-case character a-z or an upper-case character A-Z. After that, any combination and number of _, A-Z, a-z and 0-9 may follow. Further limitations follow from the usage context, which are checked upon typing: Type names must start with an upper-case letter A-Z or an underscore _. Leading dollars are not allowed for any kind of name(5)(dollar-names are mostly used for macro rei&#xFB01;cation (9.3)). Since Haxe 3.3.0 Haxe&#x4FDD;&#x7559;&#x524D;&#x7F6E; _hx_ &#x7684;&#x6807;&#x8BC6;&#x7B26;&#x5728;&#x5185;&#x90E8;&#x4F7F;&#x7528;&#x3002;&#x8FD9;&#x5E76;&#x4E0D;&#x662F;&#x5F3A;&#x5236;&#x7684;&#x88AB;&#x89E3;&#x6790;&#x5668;&#x6216;&#x8005;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x5668;&#x6267;&#x884C;&#x3002; Haxe reserves the identi&#xFB01;er pre&#xFB01;x hx for internal use. This is not enforced by the parser or typer. &#x5173;&#x952E;&#x5B57; &#xFF1A;&#x4E0B;&#x9762;&#x7684;Haxe&#x5173;&#x952E;&#x5B57;&#x4E0D;&#x80FD;&#x88AB;&#x4F7F;&#x7528;&#x4E3A;&#x6807;&#x8BC6;&#x7B26;&#xFF1A; Keywords The following Haxe keywords may not be used as identi&#xFB01;ers: abstract break case cast catch class continue default do dynamic else enum extends extern false for function if implements import in inline interface macro new null override package private public return static switch this throw true try typedef untyped using var while"},"6.语言特性/6.语言特性.html":{"title":"","path":"\\6.语言特性\\6.语言特性.html","body":"6.语言特性 抽象类型 （第2.8节）： 一个抽象类型是一个编译时构造，在运行时以一个不同的方式表示。这允许给存在的类型一个全新的意义。 Abstract types (2.8): An abstract type is a compile-time construct which is represented in a different way at runtime. This allows giving a whole new meaning to existing types. 外部类 （第6.2节）： 外部类可以被用于以一个类型安全的方式描述目标语言特定的交互。 Extern classes (6.2): Externs can be used to describe target-speciﬁc interaction in a type-safe manner. 匿名结构 （第2.5节）： 数据可以被简单的组织为匿名结构，减少小型数据类的必要性。 Anonymous structures (2.5): Data can easily be grouped in anonymous structures, minimizing the necessity of small data classes. 1 2 var point =  x: 0 , y: 10 ; point.x += 10 ; 数组推导 （第6.6节）： 使用 for 循环和一些逻辑快速创建和填充数组。 Array Comprehension (6.6): Create and populate arrays quickly using for loops and logic. 1 var evenNumbers = [ for (i in 0. . .100 ) if (i\\% 2 == 0 ) i ]; 类，接口和继承 （第2.3节）： Haxe允许用类组织代码，使其成为一个面向对象语言。通常相关的功能如Jave等语言所支持的，包括继承和接口。 Classes, interfaces and inheritance (2.3): Haxe allows structuring code in classes, making it an object-oriented language. Common related features known from languages such as Java are supported, including inheritance and interfaces. 条件编译 （第6.1节）： 条件编译允许根据编译参数编译特定的代码。这有助于抽象目标语言特定的差异，但是也可以用于其他的目的，如更详细的调试。 Conditional compilation (6.1): Conditional Compilation allows compiling speciﬁc code depending on compilation parameters. This is instrumental for abstracting target-speciﬁc differences,but can also be used for other purposes, such as more detailed debugging. 1 2 3 4 5 \\ # if js js.Browser.alert( \"Hello\" ); \\ # elseif sys Sys.println( \"Hello\" ); \\ # end （广义的）代数数据类型 （第2.4节）： 结构可以通过代数数据类型（ADT）描述，如Haxe语言中的枚举。除此之外，Haxe支持它们的广义的变体如GADT。 (Generalized) Algebraic Data Types (2.4): Structure can be expressed through algebraic data types (ADT), which are known as enums in the Haxe Language. Furthermore, Haxe supports their generalized variant known as GADT. 1 2 3 4 5 enum Result  Success(data: Array  Int ); UserError(msg: String ); SystemError(msg: String , position: PosInfos );  内联调用 （第4.4.2节）： 函数可以被设计为内联，使它们的代码直接插入调用的位置。通过手动的内联不用使代码重复这可以产生显著的效能提升。 Inlined calls (4.4.2): Functions can be designated as being inline, allowing their code to be inserted at call-site. This can yield signiﬁcant performance beneﬁts with out resorting to code duplication via manual inlining. 迭代器 （第6.7节）： 迭代一组值，例如一个数组的元素，在Haxe中可以很容易的迭代。定制类可以快速的实现迭代器功能来允许迭代。 Iterators (6.7): Iterating over a set of values, e.g. the elements of an array, is very easy in Haxe courtesy of iterators. Custom classes can quickly implement iterator functionality to allow iteration. 1 2 3 for (i in [ 1 , 2 , 3 ])  trace (i);  局部函数和闭包 （第5.11节）： Haxe中的函数不限于类字段，并可以被声明为表达式，允许强大的闭包。 Local functions and closures (5.11): Functions in Haxe are not limited to class ﬁelds and can be declared in expressions as well, allowing powerful closures. 1 2 3 4 5 6 7 var buffer = \"\" ; function append (s: String )  buffer += s;  append( \"foo\" ); append( \"bar\" ); trace (buffer); // foobar 元数据 （第6.9节）： 添加元数据到字段，类或者表达式。这可以和编译器、宏，或者运行时的类沟通信息。 Metadata (6.9): Add metadata to ﬁelds, classes or expressions. This can communicate information to the compiler, macros, or runtime classes. 1 2 3 4 class MyClass  @range( 1 , 8 ) var value: Int ;  trace (haxe.rtti.Meta.getFields(MyClass).value.range); // [1,8] 静态扩展 （第6.3节）： 存在的类和其它类型可以被额外的功能来扩展，通过使用静态扩展。 Static Extensions (6.3): Existing classes and other types can be augmented with additional functionality through using static extensions. 1 2 using StringTools; \" Me &amp; You \" .trim().htmlEscape(); 字符串插值 （第6.5节）： 字符串通过一个单引号声明，可以在当前的上下文访问变量。 String Interpolation (6.5): Strings declared with a single quotes are able to access variables in the current context. 1 trace (’My name is $name and I work in $job.industry’); 偏函数应用 （第6.8节）： 任何函数可以应用为局部的，提供某些参数的值，然后保留其它的作为之后的字段。 Partial function application (6.8): Any function can be applied partially, providing the values of some arguments and leaving the rest to be ﬁlled in later. 1 2 3 4 var map = new haxe .ds.IntMap(); var setToTwelve = map. set .bind( _ , 12 ); setToTwelve( 1 ); setToTwelve( 2 ); 模式匹配 （第6.4节）： 复杂的结构可以被根据模式来匹配，从一个枚举或者一个结构中提取信息，并对特定的值组合定义特定的操作。 Pattern Matching (6.4): Complex structures can be matched against patterns, extracting information from an enum or a structure and deﬁning speciﬁc operations for speciﬁc value combination. 1 2 3 4 5 var a =  foo: 12 ; switch (a)  case  foo: i : trace (i); default :  属性 （第4.2节）： 变量类字段可以被涉及为属性，通过定制的read和write访问，可以更精细的访问控制。 Properties (4.2): Variable class ﬁelds can be designed as properties with custom read and write access, allowing ﬁne grained access control. 1 2 3 4 5 6 7 8 public var color( get , set ); function get_color ()  return element.style.backgroundColor;  function set_color (c: String )  trace (’Setting background of element to $c’); return element.style.backgroundColor = c;  访问控制 （第6.10节）： 访问控制语言特性使用Haxe元数据语法来禁止或者允许访问类或者字段。 Access control (6.10): The access control language feature uses the Haxe metadata syntax to force or allow access classes or ﬁelds. 类型参数、约束和变异 （第3.2节）： 类型可以通过类型参数来参数化，使类型化的容器和其它复杂的数据结构可用。类型参数也可以被约束为某些类型并遵守变异规则。 Type Parameters, Constraints and Variance (3.2): Types can be parametrized with type parameters, allowing typed containers and other complex data structures. Type parameters can also be constrained to certain types and respect variance rules. 1 2 3 4 5 6 7 8 class Main  A   static function main ()  new Main  String ( \"foo\" ); new Main ( 12 ); // use type inference  function new (a: A )   "},"6.语言特性/6.语言特性.html#6-语言特性":{"title":"6.&#x8BED;&#x8A00;&#x7279;&#x6027;","path":"\\6.语言特性\\6.语言特性.html#6-语言特性","body":"&#x62BD;&#x8C61;&#x7C7B;&#x578B; &#xFF08;&#x7B2C;2.8&#x8282;&#xFF09;&#xFF1A; &#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x662F;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x65F6;&#x6784;&#x9020;&#xFF0C;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x4EE5;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x65B9;&#x5F0F;&#x8868;&#x793A;&#x3002;&#x8FD9;&#x5141;&#x8BB8;&#x7ED9;&#x5B58;&#x5728;&#x7684;&#x7C7B;&#x578B;&#x4E00;&#x4E2A;&#x5168;&#x65B0;&#x7684;&#x610F;&#x4E49;&#x3002; Abstract types (2.8): An abstract type is a compile-time construct which is represented in a different way at runtime. This allows giving a whole new meaning to existing types. &#x5916;&#x90E8;&#x7C7B; &#xFF08;&#x7B2C;6.2&#x8282;&#xFF09;&#xFF1A; &#x5916;&#x90E8;&#x7C7B;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x4E8E;&#x4EE5;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x5B89;&#x5168;&#x7684;&#x65B9;&#x5F0F;&#x63CF;&#x8FF0;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7279;&#x5B9A;&#x7684;&#x4EA4;&#x4E92;&#x3002; Extern classes (6.2): Externs can be used to describe target-speci&#xFB01;c interaction in a type-safe manner. &#x533F;&#x540D;&#x7ED3;&#x6784; &#xFF08;&#x7B2C;2.5&#x8282;&#xFF09;&#xFF1A; &#x6570;&#x636E;&#x53EF;&#x4EE5;&#x88AB;&#x7B80;&#x5355;&#x7684;&#x7EC4;&#x7EC7;&#x4E3A;&#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF0C;&#x51CF;&#x5C11;&#x5C0F;&#x578B;&#x6570;&#x636E;&#x7C7B;&#x7684;&#x5FC5;&#x8981;&#x6027;&#x3002; Anonymous structures (2.5): Data can easily be grouped in anonymous structures, minimizing the necessity of small data classes. 1 2 var point = { x: 0 , y: 10 }; point.x += 10 ; &#x6570;&#x7EC4;&#x63A8;&#x5BFC; &#xFF08;&#x7B2C;6.6&#x8282;&#xFF09;&#xFF1A; &#x4F7F;&#x7528; for &#x5FAA;&#x73AF;&#x548C;&#x4E00;&#x4E9B;&#x903B;&#x8F91;&#x5FEB;&#x901F;&#x521B;&#x5EFA;&#x548C;&#x586B;&#x5145;&#x6570;&#x7EC4;&#x3002; Array Comprehension (6.6): Create and populate arrays quickly using for loops and logic. 1 var evenNumbers = [ for (i in 0. . .100 ) if (i\\% 2 == 0 ) i ]; &#x7C7B;&#xFF0C;&#x63A5;&#x53E3;&#x548C;&#x7EE7;&#x627F; &#xFF08;&#x7B2C;2.3&#x8282;&#xFF09;&#xFF1A; Haxe&#x5141;&#x8BB8;&#x7528;&#x7C7B;&#x7EC4;&#x7EC7;&#x4EE3;&#x7801;&#xFF0C;&#x4F7F;&#x5176;&#x6210;&#x4E3A;&#x4E00;&#x4E2A;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x8BED;&#x8A00;&#x3002;&#x901A;&#x5E38;&#x76F8;&#x5173;&#x7684;&#x529F;&#x80FD;&#x5982;Jave&#x7B49;&#x8BED;&#x8A00;&#x6240;&#x652F;&#x6301;&#x7684;&#xFF0C;&#x5305;&#x62EC;&#x7EE7;&#x627F;&#x548C;&#x63A5;&#x53E3;&#x3002; Classes, interfaces and inheritance (2.3): Haxe allows structuring code in classes, making it an object-oriented language. Common related features known from languages such as Java are supported, including inheritance and interfaces. &#x6761;&#x4EF6;&#x7F16;&#x8BD1; &#xFF08;&#x7B2C;6.1&#x8282;&#xFF09;&#xFF1A; &#x6761;&#x4EF6;&#x7F16;&#x8BD1;&#x5141;&#x8BB8;&#x6839;&#x636E;&#x7F16;&#x8BD1;&#x53C2;&#x6570;&#x7F16;&#x8BD1;&#x7279;&#x5B9A;&#x7684;&#x4EE3;&#x7801;&#x3002;&#x8FD9;&#x6709;&#x52A9;&#x4E8E;&#x62BD;&#x8C61;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7279;&#x5B9A;&#x7684;&#x5DEE;&#x5F02;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x5176;&#x4ED6;&#x7684;&#x76EE;&#x7684;&#xFF0C;&#x5982;&#x66F4;&#x8BE6;&#x7EC6;&#x7684;&#x8C03;&#x8BD5;&#x3002; Conditional compilation (6.1): Conditional Compilation allows compiling speci&#xFB01;c code depending on compilation parameters. This is instrumental for abstracting target-speci&#xFB01;c differences,but can also be used for other purposes, such as more detailed debugging. 1 2 3 4 5 \\ # if js js.Browser.alert( Hello ); \\ # elseif sys Sys.println( Hello ); \\ # end &#xFF08;&#x5E7F;&#x4E49;&#x7684;&#xFF09;&#x4EE3;&#x6570;&#x6570;&#x636E;&#x7C7B;&#x578B; &#xFF08;&#x7B2C;2.4&#x8282;&#xFF09;&#xFF1A; &#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4EE3;&#x6570;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF08;ADT&#xFF09;&#x63CF;&#x8FF0;&#xFF0C;&#x5982;Haxe&#x8BED;&#x8A00;&#x4E2D;&#x7684;&#x679A;&#x4E3E;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;Haxe&#x652F;&#x6301;&#x5B83;&#x4EEC;&#x7684;&#x5E7F;&#x4E49;&#x7684;&#x53D8;&#x4F53;&#x5982;GADT&#x3002; (Generalized) Algebraic Data Types (2.4): Structure can be expressed through algebraic data types (ADT), which are known as enums in the Haxe Language. Furthermore, Haxe supports their generalized variant known as GADT. 1 2 3 4 5 enum Result { Success(data: Array  Int ); UserError(msg: String ); SystemError(msg: String , position: PosInfos ); } &#x5185;&#x8054;&#x8C03;&#x7528; &#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09;&#xFF1A; &#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x88AB;&#x8BBE;&#x8BA1;&#x4E3A;&#x5185;&#x8054;&#xFF0C;&#x4F7F;&#x5B83;&#x4EEC;&#x7684;&#x4EE3;&#x7801;&#x76F4;&#x63A5;&#x63D2;&#x5165;&#x8C03;&#x7528;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x901A;&#x8FC7;&#x624B;&#x52A8;&#x7684;&#x5185;&#x8054;&#x4E0D;&#x7528;&#x4F7F;&#x4EE3;&#x7801;&#x91CD;&#x590D;&#x8FD9;&#x53EF;&#x4EE5;&#x4EA7;&#x751F;&#x663E;&#x8457;&#x7684;&#x6548;&#x80FD;&#x63D0;&#x5347;&#x3002; Inlined calls (4.4.2): Functions can be designated as being inline, allowing their code to be inserted at call-site. This can yield signi&#xFB01;cant performance bene&#xFB01;ts with out resorting to code duplication via manual inlining. &#x8FED;&#x4EE3;&#x5668; &#xFF08;&#x7B2C;6.7&#x8282;&#xFF09;&#xFF1A; &#x8FED;&#x4EE3;&#x4E00;&#x7EC4;&#x503C;&#xFF0C;&#x4F8B;&#x5982;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x5728;Haxe&#x4E2D;&#x53EF;&#x4EE5;&#x5F88;&#x5BB9;&#x6613;&#x7684;&#x8FED;&#x4EE3;&#x3002;&#x5B9A;&#x5236;&#x7C7B;&#x53EF;&#x4EE5;&#x5FEB;&#x901F;&#x7684;&#x5B9E;&#x73B0;&#x8FED;&#x4EE3;&#x5668;&#x529F;&#x80FD;&#x6765;&#x5141;&#x8BB8;&#x8FED;&#x4EE3;&#x3002; Iterators (6.7): Iterating over a set of values, e.g. the elements of an array, is very easy in Haxe courtesy of iterators. Custom classes can quickly implement iterator functionality to allow iteration. 1 2 3 for (i in [ 1 , 2 , 3 ]) { trace (i); } &#x5C40;&#x90E8;&#x51FD;&#x6570;&#x548C;&#x95ED;&#x5305; &#xFF08;&#x7B2C;5.11&#x8282;&#xFF09;&#xFF1A; Haxe&#x4E2D;&#x7684;&#x51FD;&#x6570;&#x4E0D;&#x9650;&#x4E8E;&#x7C7B;&#x5B57;&#x6BB5;&#xFF0C;&#x5E76;&#x53EF;&#x4EE5;&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x5141;&#x8BB8;&#x5F3A;&#x5927;&#x7684;&#x95ED;&#x5305;&#x3002; Local functions and closures (5.11): Functions in Haxe are not limited to class &#xFB01;elds and can be declared in expressions as well, allowing powerful closures. 1 2 3 4 5 6 7 var buffer =  ; function append (s: String ) { buffer += s; } append( foo ); append( bar ); trace (buffer); // foobar &#x5143;&#x6570;&#x636E; &#xFF08;&#x7B2C;6.9&#x8282;&#xFF09;&#xFF1A; &#x6DFB;&#x52A0;&#x5143;&#x6570;&#x636E;&#x5230;&#x5B57;&#x6BB5;&#xFF0C;&#x7C7B;&#x6216;&#x8005;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x548C;&#x7F16;&#x8BD1;&#x5668;&#x3001;&#x5B8F;&#xFF0C;&#x6216;&#x8005;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x7C7B;&#x6C9F;&#x901A;&#x4FE1;&#x606F;&#x3002; Metadata (6.9): Add metadata to &#xFB01;elds, classes or expressions. This can communicate information to the compiler, macros, or runtime classes. 1 2 3 4 class MyClass { @range( 1 , 8 ) var value: Int ; } trace (haxe.rtti.Meta.getFields(MyClass).value.range); // [1,8] &#x9759;&#x6001;&#x6269;&#x5C55; &#xFF08;&#x7B2C;6.3&#x8282;&#xFF09;&#xFF1A; &#x5B58;&#x5728;&#x7684;&#x7C7B;&#x548C;&#x5176;&#x5B83;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x989D;&#x5916;&#x7684;&#x529F;&#x80FD;&#x6765;&#x6269;&#x5C55;&#xFF0C;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x9759;&#x6001;&#x6269;&#x5C55;&#x3002; Static Extensions (6.3): Existing classes and other types can be augmented with additional functionality through using static extensions. 1 2 using StringTools;  Me &amp; You  .trim().htmlEscape(); &#x5B57;&#x7B26;&#x4E32;&#x63D2;&#x503C; &#xFF08;&#x7B2C;6.5&#x8282;&#xFF09;&#xFF1A; &#x5B57;&#x7B26;&#x4E32;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5355;&#x5F15;&#x53F7;&#x58F0;&#x660E;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x5F53;&#x524D;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x8BBF;&#x95EE;&#x53D8;&#x91CF;&#x3002; String Interpolation (6.5): Strings declared with a single quotes are able to access variables in the current context. 1 trace (&#x2019;My name is $name and I work in ${job.industry}&#x2019;); &#x504F;&#x51FD;&#x6570;&#x5E94;&#x7528; &#xFF08;&#x7B2C;6.8&#x8282;&#xFF09;&#xFF1A; &#x4EFB;&#x4F55;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x5E94;&#x7528;&#x4E3A;&#x5C40;&#x90E8;&#x7684;&#xFF0C;&#x63D0;&#x4F9B;&#x67D0;&#x4E9B;&#x53C2;&#x6570;&#x7684;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x4FDD;&#x7559;&#x5176;&#x5B83;&#x7684;&#x4F5C;&#x4E3A;&#x4E4B;&#x540E;&#x7684;&#x5B57;&#x6BB5;&#x3002; Partial function application (6.8): Any function can be applied partially, providing the values of some arguments and leaving the rest to be &#xFB01;lled in later. 1 2 3 4 var map = new haxe .ds.IntMap(); var setToTwelve = map. set .bind( _ , 12 ); setToTwelve( 1 ); setToTwelve( 2 ); &#x6A21;&#x5F0F;&#x5339;&#x914D; &#xFF08;&#x7B2C;6.4&#x8282;&#xFF09;&#xFF1A; &#x590D;&#x6742;&#x7684;&#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x88AB;&#x6839;&#x636E;&#x6A21;&#x5F0F;&#x6765;&#x5339;&#x914D;&#xFF0C;&#x4ECE;&#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x4E2D;&#x63D0;&#x53D6;&#x4FE1;&#x606F;&#xFF0C;&#x5E76;&#x5BF9;&#x7279;&#x5B9A;&#x7684;&#x503C;&#x7EC4;&#x5408;&#x5B9A;&#x4E49;&#x7279;&#x5B9A;&#x7684;&#x64CD;&#x4F5C;&#x3002; Pattern Matching (6.4): Complex structures can be matched against patterns, extracting information from an enum or a structure and de&#xFB01;ning speci&#xFB01;c operations for speci&#xFB01;c value combination. 1 2 3 4 5 var a = { foo: 12 }; switch (a) { case { foo: i }: trace (i); default : } &#x5C5E;&#x6027; &#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#xFF1A; &#x53D8;&#x91CF;&#x7C7B;&#x5B57;&#x6BB5;&#x53EF;&#x4EE5;&#x88AB;&#x6D89;&#x53CA;&#x4E3A;&#x5C5E;&#x6027;&#xFF0C;&#x901A;&#x8FC7;&#x5B9A;&#x5236;&#x7684;read&#x548C;write&#x8BBF;&#x95EE;&#xFF0C;&#x53EF;&#x4EE5;&#x66F4;&#x7CBE;&#x7EC6;&#x7684;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x3002; Properties (4.2): Variable class &#xFB01;elds can be designed as properties with custom read and write access, allowing &#xFB01;ne grained access control. 1 2 3 4 5 6 7 8 public var color( get , set ); function get_color () { return element.style.backgroundColor; } function set_color (c: String ) { trace (&#x2019;Setting background of element to $c&#x2019;); return element.style.backgroundColor = c; } &#x8BBF;&#x95EE;&#x63A7;&#x5236; &#xFF08;&#x7B2C;6.10&#x8282;&#xFF09;&#xFF1A; &#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x8BED;&#x8A00;&#x7279;&#x6027;&#x4F7F;&#x7528;Haxe&#x5143;&#x6570;&#x636E;&#x8BED;&#x6CD5;&#x6765;&#x7981;&#x6B62;&#x6216;&#x8005;&#x5141;&#x8BB8;&#x8BBF;&#x95EE;&#x7C7B;&#x6216;&#x8005;&#x5B57;&#x6BB5;&#x3002; Access control (6.10): The access control language feature uses the Haxe metadata syntax to force or allow access classes or &#xFB01;elds. &#x7C7B;&#x578B;&#x53C2;&#x6570;&#x3001;&#x7EA6;&#x675F;&#x548C;&#x53D8;&#x5F02; &#xFF08;&#x7B2C;3.2&#x8282;&#xFF09;&#xFF1A; &#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x6765;&#x53C2;&#x6570;&#x5316;&#xFF0C;&#x4F7F;&#x7C7B;&#x578B;&#x5316;&#x7684;&#x5BB9;&#x5668;&#x548C;&#x5176;&#x5B83;&#x590D;&#x6742;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x53EF;&#x7528;&#x3002;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x7EA6;&#x675F;&#x4E3A;&#x67D0;&#x4E9B;&#x7C7B;&#x578B;&#x5E76;&#x9075;&#x5B88;&#x53D8;&#x5F02;&#x89C4;&#x5219;&#x3002; Type Parameters, Constraints and Variance (3.2): Types can be parametrized with type parameters, allowing typed containers and other complex data structures. Type parameters can also be constrained to certain types and respect variance rules. 1 2 3 4 5 6 7 8 class Main  A  { static function main () { new Main  String ( foo ); new Main ( 12 ); // use type inference } function new (a: A ) { } }"},"7.编译器用法/7.1.hxml.html":{"title":"","path":"\\7.编译器用法\\7.1.hxml.html","body":"7.1HXML Compiler arguments can be stored in a .hxml file and can be executed with haxe . In hxml it is possible to use newlines and comments which makes it easier to maintain Haxe build configurations. It is possible to supply more arguments after the hxml file, e.g. haxe build.hxml --debug . Example: This example has a configuration which compiles the class file website.HomePage.hx to JavaScript into a file called bin/homepage.js , which is located in the src class path. And uses full dead code elimination. 1 2 3 4 --class-path src --dce full --js bin/homepage.js --main website.HomePage Multiple build compilations Hxml configurations allow multiple compilation using these arguments: --next Separate several Haxe compilations. --each Append preceding parameters to all haxe compilations separated by --next . This reduces the repeating params. Example: This example has a configuration which compiles three different classes into their own JavaScript files. Each build uses src as class path and uses full dead code elimination. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 --class-path src --dce full --each --js bin/homepage.js --main website.HomePage --next --js bin/gallery.js --main website.GalleryPage --next --js bin/contact.js --main website.ContactPage Comments inside hxml Inside .hxml files use a hash (i.e. # ) to comment out the rest of the line. Calling build configurations inside HXML: It is possible to create a configuration that looks like this: 1 2 3 4 5 build-server.hxml --next build-website.hxml --next build-game.hxml Comment: There is a case when library’s directory’s hxml files can override your project’s hxml during compilation. To avoid this include your -lib library before -cp src -main Main . See this haxe#7683 issue for more details."},"7.编译器用法/7.1.hxml.html#7-1HXML":{"title":"7.1HXML","path":"\\7.编译器用法\\7.1.hxml.html#7-1HXML","body":"Compiler arguments can be stored in a .hxml file and can be executed with haxe . In hxml it is possible to use newlines and comments which makes it easier to maintain Haxe build configurations. It is possible to supply more arguments after the hxml file, e.g. haxe build.hxml --debug . Example: This example has a configuration which compiles the class file website.HomePage.hx to JavaScript into a file called bin/homepage.js , which is located in the src class path. And uses full dead code elimination. 1 2 3 4 --class-path src --dce full --js bin/homepage.js --main website.HomePage Multiple build compilations Hxml configurations allow multiple compilation using these arguments: --next Separate several Haxe compilations. --each Append preceding parameters to all haxe compilations separated by --next . This reduces the repeating params. Example: This example has a configuration which compiles three different classes into their own JavaScript files. Each build uses src as class path and uses full dead code elimination. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 --class-path src --dce full --each --js bin/homepage.js --main website.HomePage --next --js bin/gallery.js --main website.GalleryPage --next --js bin/contact.js --main website.ContactPage Comments inside hxml Inside .hxml files use a hash (i.e. # ) to comment out the rest of the line. Calling build configurations inside HXML: It is possible to create a configuration that looks like this: 1 2 3 4 5 build-server.hxml --next build-website.hxml --next build-game.hxml Comment: There is a case when library&#x2019;s directory&#x2019;s hxml files can override your project&#x2019;s hxml during compilation. To avoid this include your -lib library before -cp src -main Main . See this haxe#7683 issue for more details."},"7.编译器用法/7.编译器用法.html":{"title":"","path":"\\7.编译器用法\\7.编译器用法.html","body":"7.编译器用法 基本使用 Haxe编译器通常从命令行调用，使用一些参数来回答两个问题： Basic Usage The Haxe Compiler is typically invoked from command line with several arguments which have to answer two questions: 什么应该被编译？ 输出应该是什么？ What should be compiled? What should the output be? 要回答第一个问题，通常通过 -cp path 参数提供一个类路径就足够了，主要的类通过 -main dot_path 参数被编译。Haxe编译器然后解析main类的文件，开始编译。 To answer the ﬁrst question, it is usually sufﬁcient to provide a class path via the -cp path argument, along with the main class to be compiled via the -main dot_path argument. The Haxe Compiler then resolves the main class ﬁle and begins compilation. 第二个问题通常归结要提供一个特定的描述目标语言的参数。每个Haxe目标语言都有一个专用的命令行开关，例如 -js file_name 用于JavaScript，-php directory用于PHP。根据目标语言的性质，参数值可能是一个文件名（对于-js，-swf和neko），也可能是一个目录路径。 The second question usually comes down to providing an argument specifying the desired target. Each Haxe target has a dedicated command line switch, such as -js file_name for JavaScript and -php directory for PHP. Depending on the nature of the target, the argument value is either a ﬁle name (for -js, -swf and neko) or a directory path. 一般的参数 输入 ： Common arguments Input : -cp path ：添加一个类路径，可能是可以被发现的一个 .hx 源文件或者一个包（子目录）。 -lib library_name ：添加一个 Haxelib（第11章）库。默认，本地Haxelib仓库中最新的版本被使用。要使用特定版本，可以使用 -lib library_name:version 。 -main dot_path ：设置主类。 -cp path Addsaclasspathwhere .hx source ﬁles or packages (sub-directories) can be found. -lib library_name Adds a Haxelib (Chapter 11) library. By default the most recent version in the local Haxelib repository is used. To use speciﬁc version, -lib library_name:version can be used. -main dot_path Sets the main class. 输出 : output ： -js filename：生成JavaScript（第12.1节）源代码到指定文件。 -as3 directory：生成ActionScript 3源代码到指定目录。 -swf file_name：生成指定文件为Flash（第12.2节） .swf 文件。 -neko file_name : 生成Neko（第12.3节）二进制到指定文件。 -php directory：生成PHP（第12.4节）源代码到指定目录。 -cpp directory：生成 C++（第12.5节）源代码到指定目录，并使用原生C++编译器编译。 -cs directory：生成C#（第12.7节）源代码到指定目录。 -java directory：生成Java（第12.6节）源代码到指定目录，并使用Java编译器编译。 -python file_name：生成Python（第12.8节）源代码到指定文件。 -js file_name Generates JavaScript (12.1) source code in speciﬁed ﬁle. -as3 directory Generates ActionScript 3 source code in speciﬁed directory. -swf file_name Generates the speciﬁed ﬁle as Flash (12.2) .swf. -neko file_name Generates Neko (12.3) binary as speciﬁed ﬁle. -php directory Generates PHP (12.4) source code in speciﬁed directory. -cpp directory Generates C++(12.5) source code in speciﬁed directory and compiles it using native C++ compiler. -cs directory Generates C# (12.7) source code in speciﬁed directory. -java directory Generates Java (12.6) source code in speciﬁed directory and compiles it using the Java Compiler. -python file_name Generates Python (12.8) source code in the speciﬁed ﬁle."},"7.编译器用法/7.编译器用法.html#7-编译器用法":{"title":"7.&#x7F16;&#x8BD1;&#x5668;&#x7528;&#x6CD5;","path":"\\7.编译器用法\\7.编译器用法.html#7-编译器用法","body":"&#x57FA;&#x672C;&#x4F7F;&#x7528; Haxe&#x7F16;&#x8BD1;&#x5668;&#x901A;&#x5E38;&#x4ECE;&#x547D;&#x4EE4;&#x884C;&#x8C03;&#x7528;&#xFF0C;&#x4F7F;&#x7528;&#x4E00;&#x4E9B;&#x53C2;&#x6570;&#x6765;&#x56DE;&#x7B54;&#x4E24;&#x4E2A;&#x95EE;&#x9898;&#xFF1A; Basic Usage The Haxe Compiler is typically invoked from command line with several arguments which have to answer two questions: &#x4EC0;&#x4E48;&#x5E94;&#x8BE5;&#x88AB;&#x7F16;&#x8BD1;&#xFF1F; &#x8F93;&#x51FA;&#x5E94;&#x8BE5;&#x662F;&#x4EC0;&#x4E48;&#xFF1F; What should be compiled? What should the output be? &#x8981;&#x56DE;&#x7B54;&#x7B2C;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x901A;&#x5E38;&#x901A;&#x8FC7; -cp path &#x53C2;&#x6570;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x7C7B;&#x8DEF;&#x5F84;&#x5C31;&#x8DB3;&#x591F;&#x4E86;&#xFF0C;&#x4E3B;&#x8981;&#x7684;&#x7C7B;&#x901A;&#x8FC7; -main dot_path &#x53C2;&#x6570;&#x88AB;&#x7F16;&#x8BD1;&#x3002;Haxe&#x7F16;&#x8BD1;&#x5668;&#x7136;&#x540E;&#x89E3;&#x6790;main&#x7C7B;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x5F00;&#x59CB;&#x7F16;&#x8BD1;&#x3002; To answer the &#xFB01;rst question, it is usually suf&#xFB01;cient to provide a class path via the -cp path argument, along with the main class to be compiled via the -main dot_path argument. The Haxe Compiler then resolves the main class &#xFB01;le and begins compilation. &#x7B2C;&#x4E8C;&#x4E2A;&#x95EE;&#x9898;&#x901A;&#x5E38;&#x5F52;&#x7ED3;&#x8981;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x63CF;&#x8FF0;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x53C2;&#x6570;&#x3002;&#x6BCF;&#x4E2A;Haxe&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x4E13;&#x7528;&#x7684;&#x547D;&#x4EE4;&#x884C;&#x5F00;&#x5173;&#xFF0C;&#x4F8B;&#x5982; -js file_name &#x7528;&#x4E8E;JavaScript&#xFF0C;-php directory&#x7528;&#x4E8E;PHP&#x3002;&#x6839;&#x636E;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x53C2;&#x6570;&#x503C;&#x53EF;&#x80FD;&#x662F;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x540D;&#xFF08;&#x5BF9;&#x4E8E;-js&#xFF0C;-swf&#x548C;neko&#xFF09;&#xFF0C;&#x4E5F;&#x53EF;&#x80FD;&#x662F;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;&#x8DEF;&#x5F84;&#x3002; The second question usually comes down to providing an argument specifying the desired target. Each Haxe target has a dedicated command line switch, such as -js file_name for JavaScript and -php directory for PHP. Depending on the nature of the target, the argument value is either a &#xFB01;le name (for -js, -swf and neko) or a directory path. &#x4E00;&#x822C;&#x7684;&#x53C2;&#x6570; &#x8F93;&#x5165; &#xFF1A; Common arguments Input : -cp path &#xFF1A;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x7C7B;&#x8DEF;&#x5F84;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x53EF;&#x4EE5;&#x88AB;&#x53D1;&#x73B0;&#x7684;&#x4E00;&#x4E2A; .hx &#x6E90;&#x6587;&#x4EF6;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x5305;&#xFF08;&#x5B50;&#x76EE;&#x5F55;&#xFF09;&#x3002; -lib library_name &#xFF1A;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A; Haxelib&#xFF08;&#x7B2C;11&#x7AE0;&#xFF09;&#x5E93;&#x3002;&#x9ED8;&#x8BA4;&#xFF0C;&#x672C;&#x5730;Haxelib&#x4ED3;&#x5E93;&#x4E2D;&#x6700;&#x65B0;&#x7684;&#x7248;&#x672C;&#x88AB;&#x4F7F;&#x7528;&#x3002;&#x8981;&#x4F7F;&#x7528;&#x7279;&#x5B9A;&#x7248;&#x672C;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; -lib library_name:version &#x3002; -main dot_path &#xFF1A;&#x8BBE;&#x7F6E;&#x4E3B;&#x7C7B;&#x3002; -cp path Addsaclasspathwhere .hx source &#xFB01;les or packages (sub-directories) can be found. -lib library_name Adds a Haxelib (Chapter 11) library. By default the most recent version in the local Haxelib repository is used. To use speci&#xFB01;c version, -lib library_name:version can be used. -main dot_path Sets the main class. &#x8F93;&#x51FA; : output &#xFF1A; -js filename&#xFF1A;&#x751F;&#x6210;JavaScript&#xFF08;&#x7B2C;12.1&#x8282;&#xFF09;&#x6E90;&#x4EE3;&#x7801;&#x5230;&#x6307;&#x5B9A;&#x6587;&#x4EF6;&#x3002; -as3 directory&#xFF1A;&#x751F;&#x6210;ActionScript 3&#x6E90;&#x4EE3;&#x7801;&#x5230;&#x6307;&#x5B9A;&#x76EE;&#x5F55;&#x3002; -swf file_name&#xFF1A;&#x751F;&#x6210;&#x6307;&#x5B9A;&#x6587;&#x4EF6;&#x4E3A;Flash&#xFF08;&#x7B2C;12.2&#x8282;&#xFF09; .swf &#x6587;&#x4EF6;&#x3002; -neko file_name : &#x751F;&#x6210;Neko&#xFF08;&#x7B2C;12.3&#x8282;&#xFF09;&#x4E8C;&#x8FDB;&#x5236;&#x5230;&#x6307;&#x5B9A;&#x6587;&#x4EF6;&#x3002; -php directory&#xFF1A;&#x751F;&#x6210;PHP&#xFF08;&#x7B2C;12.4&#x8282;&#xFF09;&#x6E90;&#x4EE3;&#x7801;&#x5230;&#x6307;&#x5B9A;&#x76EE;&#x5F55;&#x3002; -cpp directory&#xFF1A;&#x751F;&#x6210; C++&#xFF08;&#x7B2C;12.5&#x8282;&#xFF09;&#x6E90;&#x4EE3;&#x7801;&#x5230;&#x6307;&#x5B9A;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;&#x539F;&#x751F;C++&#x7F16;&#x8BD1;&#x5668;&#x7F16;&#x8BD1;&#x3002; -cs directory&#xFF1A;&#x751F;&#x6210;C#&#xFF08;&#x7B2C;12.7&#x8282;&#xFF09;&#x6E90;&#x4EE3;&#x7801;&#x5230;&#x6307;&#x5B9A;&#x76EE;&#x5F55;&#x3002; -java directory&#xFF1A;&#x751F;&#x6210;Java&#xFF08;&#x7B2C;12.6&#x8282;&#xFF09;&#x6E90;&#x4EE3;&#x7801;&#x5230;&#x6307;&#x5B9A;&#x76EE;&#x5F55;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;Java&#x7F16;&#x8BD1;&#x5668;&#x7F16;&#x8BD1;&#x3002; -python file_name&#xFF1A;&#x751F;&#x6210;Python&#xFF08;&#x7B2C;12.8&#x8282;&#xFF09;&#x6E90;&#x4EE3;&#x7801;&#x5230;&#x6307;&#x5B9A;&#x6587;&#x4EF6;&#x3002; -js file_name Generates JavaScript (12.1) source code in speci&#xFB01;ed &#xFB01;le. -as3 directory Generates ActionScript 3 source code in speci&#xFB01;ed directory. -swf file_name Generates the speci&#xFB01;ed &#xFB01;le as Flash (12.2) .swf. -neko file_name Generates Neko (12.3) binary as speci&#xFB01;ed &#xFB01;le. -php directory Generates PHP (12.4) source code in speci&#xFB01;ed directory. -cpp directory Generates C++(12.5) source code in speci&#xFB01;ed directory and compiles it using native C++ compiler. -cs directory Generates C# (12.7) source code in speci&#xFB01;ed directory. -java directory Generates Java (12.6) source code in speci&#xFB01;ed directory and compiles it using the Java Compiler. -python file_name Generates Python (12.8) source code in the speci&#xFB01;ed &#xFB01;le."},"8.编译器功能/8.编译器功能.html":{"title":"","path":"\\8.编译器功能\\8.编译器功能.html","body":"8.编译器功能 本章内容： 8.1 内建编译器元数据 8.2 无用代码消除 8.3 编译器服务 8.4 资源 8.5 运行时类型信息 8.6 静态分析仪"},"8.编译器功能/8.编译器功能.html#8-编译器功能":{"title":"8.&#x7F16;&#x8BD1;&#x5668;&#x529F;&#x80FD;","path":"\\8.编译器功能\\8.编译器功能.html#8-编译器功能","body":"&#x672C;&#x7AE0;&#x5185;&#x5BB9;&#xFF1A; 8.1 &#x5185;&#x5EFA;&#x7F16;&#x8BD1;&#x5668;&#x5143;&#x6570;&#x636E; 8.2 &#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664; 8.3 &#x7F16;&#x8BD1;&#x5668;&#x670D;&#x52A1; 8.4 &#x8D44;&#x6E90; 8.5 &#x8FD0;&#x884C;&#x65F6;&#x7C7B;&#x578B;&#x4FE1;&#x606F; 8.6 &#x9759;&#x6001;&#x5206;&#x6790;&#x4EEA;"},"9.宏/9.宏.html":{"title":"","path":"\\9.宏\\9.宏.html","body":"9.宏 宏毫无疑问是Haxe中最先进的功能。它们经常被认为是黑魔法，只有少数人能够精通，但其实它们没有什么魔法（当然也没有黑暗）。 定义：抽象语法树（AST） AST是解析Haxe代码到一个类型化的结构的结果。这个结构被通过在Haxe标准库的 haxe/macro/Expr.hx 定义的类型暴露给宏。 编译中宏的规则如下： 一个基本的宏是一个语法转换。它接受0或者多个表达式（第5章）并返回一个表达式。如果一个宏被调用，它实际上从它调用的位置插入代码。在这方面，它可以被跟一个预处理，如C++中的 #define对比，但是一个Haxe 宏并不是一个文本替换工具。 我们可以识别不同种类的宏，它们运行在特定的编译阶段： 初始化宏 ：这些被通过命令行提供，使用 –macro 编译器参数。它们在编译器参数被处理、类型器上下文被创建之后，但在任何类型化开始之前执行（查看初始化宏（第9.7节））。 构建宏 ：这些是为类、枚举和抽象类型定义，通过 @:build 或者 @:autoBuild 元数据（第6.9节）定义。在每次类型化时执行，在类型被设置之后（包括跟其它类型的关系，比如类的继承），但是在它的字段被类型化之前（查看类型构建（第9.5节））。 表达式宏 ：这些是普通的函数，在它们被类型化之后马上执行。"},"9.宏/9.宏.html#9-宏":{"title":"9.&#x5B8F;","path":"\\9.宏\\9.宏.html#9-宏","body":"&#x5B8F;&#x6BEB;&#x65E0;&#x7591;&#x95EE;&#x662F;Haxe&#x4E2D;&#x6700;&#x5148;&#x8FDB;&#x7684;&#x529F;&#x80FD;&#x3002;&#x5B83;&#x4EEC;&#x7ECF;&#x5E38;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x9ED1;&#x9B54;&#x6CD5;&#xFF0C;&#x53EA;&#x6709;&#x5C11;&#x6570;&#x4EBA;&#x80FD;&#x591F;&#x7CBE;&#x901A;&#xFF0C;&#x4F46;&#x5176;&#x5B9E;&#x5B83;&#x4EEC;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x9B54;&#x6CD5;&#xFF08;&#x5F53;&#x7136;&#x4E5F;&#x6CA1;&#x6709;&#x9ED1;&#x6697;&#xFF09;&#x3002; &#x5B9A;&#x4E49;&#xFF1A;&#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;&#xFF08;AST&#xFF09; AST&#x662F;&#x89E3;&#x6790;Haxe&#x4EE3;&#x7801;&#x5230;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x5316;&#x7684;&#x7ED3;&#x6784;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#x88AB;&#x901A;&#x8FC7;&#x5728;Haxe&#x6807;&#x51C6;&#x5E93;&#x7684; haxe/macro/Expr.hx &#x5B9A;&#x4E49;&#x7684;&#x7C7B;&#x578B;&#x66B4;&#x9732;&#x7ED9;&#x5B8F;&#x3002; &#x7F16;&#x8BD1;&#x4E2D;&#x5B8F;&#x7684;&#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A; &#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x7684;&#x5B8F;&#x662F;&#x4E00;&#x4E2A;&#x8BED;&#x6CD5;&#x8F6C;&#x6362;&#x3002;&#x5B83;&#x63A5;&#x53D7;0&#x6216;&#x8005;&#x591A;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09;&#x5E76;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5B8F;&#x88AB;&#x8C03;&#x7528;&#xFF0C;&#x5B83;&#x5B9E;&#x9645;&#x4E0A;&#x4ECE;&#x5B83;&#x8C03;&#x7528;&#x7684;&#x4F4D;&#x7F6E;&#x63D2;&#x5165;&#x4EE3;&#x7801;&#x3002;&#x5728;&#x8FD9;&#x65B9;&#x9762;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x8DDF;&#x4E00;&#x4E2A;&#x9884;&#x5904;&#x7406;&#xFF0C;&#x5982;C++&#x4E2D;&#x7684; #define&#x5BF9;&#x6BD4;&#xFF0C;&#x4F46;&#x662F;&#x4E00;&#x4E2A;Haxe &#x5B8F;&#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x6587;&#x672C;&#x66FF;&#x6362;&#x5DE5;&#x5177;&#x3002; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BC6;&#x522B;&#x4E0D;&#x540C;&#x79CD;&#x7C7B;&#x7684;&#x5B8F;&#xFF0C;&#x5B83;&#x4EEC;&#x8FD0;&#x884C;&#x5728;&#x7279;&#x5B9A;&#x7684;&#x7F16;&#x8BD1;&#x9636;&#x6BB5;&#xFF1A; &#x521D;&#x59CB;&#x5316;&#x5B8F; &#xFF1A;&#x8FD9;&#x4E9B;&#x88AB;&#x901A;&#x8FC7;&#x547D;&#x4EE4;&#x884C;&#x63D0;&#x4F9B;&#xFF0C;&#x4F7F;&#x7528; &#x2013;macro &#x7F16;&#x8BD1;&#x5668;&#x53C2;&#x6570;&#x3002;&#x5B83;&#x4EEC;&#x5728;&#x7F16;&#x8BD1;&#x5668;&#x53C2;&#x6570;&#x88AB;&#x5904;&#x7406;&#x3001;&#x7C7B;&#x578B;&#x5668;&#x4E0A;&#x4E0B;&#x6587;&#x88AB;&#x521B;&#x5EFA;&#x4E4B;&#x540E;&#xFF0C;&#x4F46;&#x5728;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x5316;&#x5F00;&#x59CB;&#x4E4B;&#x524D;&#x6267;&#x884C;&#xFF08;&#x67E5;&#x770B;&#x521D;&#x59CB;&#x5316;&#x5B8F;&#xFF08;&#x7B2C;9.7&#x8282;&#xFF09;&#xFF09;&#x3002; &#x6784;&#x5EFA;&#x5B8F; &#xFF1A;&#x8FD9;&#x4E9B;&#x662F;&#x4E3A;&#x7C7B;&#x3001;&#x679A;&#x4E3E;&#x548C;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5B9A;&#x4E49;&#xFF0C;&#x901A;&#x8FC7; @:build &#x6216;&#x8005; @:autoBuild &#x5143;&#x6570;&#x636E;&#xFF08;&#x7B2C;6.9&#x8282;&#xFF09;&#x5B9A;&#x4E49;&#x3002;&#x5728;&#x6BCF;&#x6B21;&#x7C7B;&#x578B;&#x5316;&#x65F6;&#x6267;&#x884C;&#xFF0C;&#x5728;&#x7C7B;&#x578B;&#x88AB;&#x8BBE;&#x7F6E;&#x4E4B;&#x540E;&#xFF08;&#x5305;&#x62EC;&#x8DDF;&#x5176;&#x5B83;&#x7C7B;&#x578B;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x6BD4;&#x5982;&#x7C7B;&#x7684;&#x7EE7;&#x627F;&#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x5B83;&#x7684;&#x5B57;&#x6BB5;&#x88AB;&#x7C7B;&#x578B;&#x5316;&#x4E4B;&#x524D;&#xFF08;&#x67E5;&#x770B;&#x7C7B;&#x578B;&#x6784;&#x5EFA;&#xFF08;&#x7B2C;9.5&#x8282;&#xFF09;&#xFF09;&#x3002; &#x8868;&#x8FBE;&#x5F0F;&#x5B8F; &#xFF1A;&#x8FD9;&#x4E9B;&#x662F;&#x666E;&#x901A;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5728;&#x5B83;&#x4EEC;&#x88AB;&#x7C7B;&#x578B;&#x5316;&#x4E4B;&#x540E;&#x9A6C;&#x4E0A;&#x6267;&#x884C;&#x3002;"},"7.编译器用法/7.1.编译器标记.html":{"title":"","path":"\\7.编译器用法\\7.1.编译器标记.html","body":"7.2.编译器标记 从Haxe 3.0开始，你可以通过运行 haxe –help-defines 获得支持的编译器标记（第6.1节）列表。 Starting from Haxe 3.0, you can get the list of supported compiler ﬂags (6.1) by running haxe --help-defines 标记 描述 absolute-path 打印绝对文件路径到trace 输出 advanced-telemetry 允许SWF被Monocle工具实测 analyzer 使用静态的分析仪用于优化（实验） as3 当输出flash9 as3源代码时定义 check-xml-proxy 检查xml代理用到的字段 core-api 定义到核心api上下文 core-api-serialize 使用C#中的Serializable 属性标记一些生成的代码 api 类 cppia 生成实验性的c++指令集 dce=[mode:std\\ full\\ no](mode:std\\ full\\ no) （竖线因编辑器问题显式不正常） 设置无用代码消除（第8.2节）模式（默认为 std） dce-debug 显式无用代码消除（第8.2节）日志 debug 当使用 -debug编译时激活 display 编译过程中激活 dll-export GenCPP 实验性链接 dll-import GenCPP 实验性链接 doc-gen 不执行任何 移除/改变， 以正确的生成文档 dump 为内部的调试转储完全类型化的 AST到一个转储子目录 - 使用dump-pretty进行Haxe风格的格式化。 dump-dependencies 转储类依赖关系到一个转储目录 dump-ignore-var-ids 从不美观的dumps移除变量的IDs（有助于diff） fdb 为FDB交互调试启用完整的flash调试信息 file-extension 输出c++源代码文件名后缀 flash-strict flash目标的严格类型 flash-use-stage 保留SWF库的初始阶段 force-lib-check 强制编译器检查 -net-lib 和 -java-lib 添加的类（内部） force-native-property Tag all properties with :nativeProperty metadata for 3.1 compatibility format-warning Print a warning for each formated string, for 2.x compatibility gencommon-debug GenCommon internal haxe-boot Given the name ‘haxe’ to the flash boot class instead of a generated name haxe-ver 当前Haxe版本值 hxcpp-api-level Provided to allow compatibility between hxcpp versions include-prefix prepend path to generated include files interp The code is compiled to be run with –interp java-ver=[version:5-7] 设置目标的Java版本 js-classic Don’t use a function wrapper and strict mode in JS output js-es5 Generate JS for ES5-compliant runtimes js-unflatten Generate nested objects for packages and types keep-old-output Keep old source files in the output directory (for C#/Java) loop-unroll-max-cost Maximum cost (number of expressions * iterations) before loop unrolling is canceled (default 250) macro Defined when code is compiled in the macro context macro-times Display per-macro timing when used with –times net-ver= version:20-45 设置目标的.NET版本 net-target= Sets the .NET target. Defaults to net. xbox, micro (Micro Framework, compact (Compact Framework) are some valid values neko-source Output neko source instead of bytecode neko-v1 Keep Neko 1.x compatibility network-sandbox Use local network sandbox instead of local file access one no-compilation Disable CPP final compilation no-copt Disable completion optimization (for debug purposes) no-debug Remove all debug macros from cpp output no-deprecation-warnings Do not warn if fields annotated with @:deprecated are used no-flash-override Change overrides on some basic classes into HX suffixed methods flash only no-opt Disable optimizations no-pattern-matching Disable pattern matching no-inline Disable inlining no-root GenCS internal no-macro-cache Disable macro context caching no-simplify Disable simplification filter no-swf-compress Disable SWF output compression no-traces Disable all trace calls php-prefix Compiled with –php-prefix real-position Disables haxe source mapping when targetting C# replace-files GenCommon internal scriptable GenCPP internal shallow-expose Expose types to surrounding scope of Haxe generated closure without writing to window object source-map-content Include the hx sources as part of the JS source map swc Output a SWC instead of a SWF swf-compress-level= level:1-9 Set the amount of compression for the SWF output swf-debug-password= Set a password for debugging. The password field is encrypted by using the MD5 algorithm and prevents unauthorised debugging of your swf. Without this flag -D fdb will use no password. swf-direct-blit Use hardware acceleration to blit graphics swf-gpu Use GPU compositing features when drawing graphics swf-metadata=file.xml Include contents of file.xml as metadata in the swf. swf-preloader-frame Insert empty first frame in swf. To be used together with -D flash-use-stage and -swf-lib swf-protected Compile Haxe private as protected in the SWF instead of public swf-script-timeout Maximum ActionScript processing time before script stuck dialog box displays (in seconds) swf-use-doabc Use DoAbc swf-tag instead of DoAbcDefine sys Defined for all system platforms unsafe Allow unsafe code when targeting C# use-nekoc Use nekoc compiler instead of internal one use-rtti-doc Allows access to documentation during compilation vcproj GenCPP internal"},"7.编译器用法/7.1.编译器标记.html#7-2-编译器标记":{"title":"7.2.&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;","path":"\\7.编译器用法\\7.1.编译器标记.html#7-2-编译器标记","body":"&#x4ECE;Haxe 3.0&#x5F00;&#x59CB;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8FD0;&#x884C; haxe &#x2013;help-defines &#x83B7;&#x5F97;&#x652F;&#x6301;&#x7684;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#xFF08;&#x7B2C;6.1&#x8282;&#xFF09;&#x5217;&#x8868;&#x3002; Starting from Haxe 3.0, you can get the list of supported compiler &#xFB02;ags (6.1) by running haxe --help-defines &#x6807;&#x8BB0; &#x63CF;&#x8FF0; absolute-path &#x6253;&#x5370;&#x7EDD;&#x5BF9;&#x6587;&#x4EF6;&#x8DEF;&#x5F84;&#x5230;trace &#x8F93;&#x51FA; advanced-telemetry &#x5141;&#x8BB8;SWF&#x88AB;Monocle&#x5DE5;&#x5177;&#x5B9E;&#x6D4B; analyzer &#x4F7F;&#x7528;&#x9759;&#x6001;&#x7684;&#x5206;&#x6790;&#x4EEA;&#x7528;&#x4E8E;&#x4F18;&#x5316;&#xFF08;&#x5B9E;&#x9A8C;&#xFF09; as3 &#x5F53;&#x8F93;&#x51FA;flash9 as3&#x6E90;&#x4EE3;&#x7801;&#x65F6;&#x5B9A;&#x4E49; check-xml-proxy &#x68C0;&#x67E5;xml&#x4EE3;&#x7406;&#x7528;&#x5230;&#x7684;&#x5B57;&#x6BB5; core-api &#x5B9A;&#x4E49;&#x5230;&#x6838;&#x5FC3;api&#x4E0A;&#x4E0B;&#x6587; core-api-serialize &#x4F7F;&#x7528;C#&#x4E2D;&#x7684;Serializable &#x5C5E;&#x6027;&#x6807;&#x8BB0;&#x4E00;&#x4E9B;&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801; api &#x7C7B; cppia &#x751F;&#x6210;&#x5B9E;&#x9A8C;&#x6027;&#x7684;c++&#x6307;&#x4EE4;&#x96C6; dce=[mode:std\\ full\\ no](mode:std\\ full\\ no) &#xFF08;&#x7AD6;&#x7EBF;&#x56E0;&#x7F16;&#x8F91;&#x5668;&#x95EE;&#x9898;&#x663E;&#x5F0F;&#x4E0D;&#x6B63;&#x5E38;&#xFF09; &#x8BBE;&#x7F6E;&#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664;&#xFF08;&#x7B2C;8.2&#x8282;&#xFF09;&#x6A21;&#x5F0F;&#xFF08;&#x9ED8;&#x8BA4;&#x4E3A; std&#xFF09; dce-debug &#x663E;&#x5F0F;&#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664;&#xFF08;&#x7B2C;8.2&#x8282;&#xFF09;&#x65E5;&#x5FD7; debug &#x5F53;&#x4F7F;&#x7528; -debug&#x7F16;&#x8BD1;&#x65F6;&#x6FC0;&#x6D3B; display &#x7F16;&#x8BD1;&#x8FC7;&#x7A0B;&#x4E2D;&#x6FC0;&#x6D3B; dll-export GenCPP &#x5B9E;&#x9A8C;&#x6027;&#x94FE;&#x63A5; dll-import GenCPP &#x5B9E;&#x9A8C;&#x6027;&#x94FE;&#x63A5; doc-gen &#x4E0D;&#x6267;&#x884C;&#x4EFB;&#x4F55; &#x79FB;&#x9664;/&#x6539;&#x53D8;&#xFF0C; &#x4EE5;&#x6B63;&#x786E;&#x7684;&#x751F;&#x6210;&#x6587;&#x6863; dump &#x4E3A;&#x5185;&#x90E8;&#x7684;&#x8C03;&#x8BD5;&#x8F6C;&#x50A8;&#x5B8C;&#x5168;&#x7C7B;&#x578B;&#x5316;&#x7684; AST&#x5230;&#x4E00;&#x4E2A;&#x8F6C;&#x50A8;&#x5B50;&#x76EE;&#x5F55; - &#x4F7F;&#x7528;dump-pretty&#x8FDB;&#x884C;Haxe&#x98CE;&#x683C;&#x7684;&#x683C;&#x5F0F;&#x5316;&#x3002; dump-dependencies &#x8F6C;&#x50A8;&#x7C7B;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x5230;&#x4E00;&#x4E2A;&#x8F6C;&#x50A8;&#x76EE;&#x5F55; dump-ignore-var-ids &#x4ECE;&#x4E0D;&#x7F8E;&#x89C2;&#x7684;dumps&#x79FB;&#x9664;&#x53D8;&#x91CF;&#x7684;IDs&#xFF08;&#x6709;&#x52A9;&#x4E8E;diff&#xFF09; fdb &#x4E3A;FDB&#x4EA4;&#x4E92;&#x8C03;&#x8BD5;&#x542F;&#x7528;&#x5B8C;&#x6574;&#x7684;flash&#x8C03;&#x8BD5;&#x4FE1;&#x606F; file-extension &#x8F93;&#x51FA;c++&#x6E90;&#x4EE3;&#x7801;&#x6587;&#x4EF6;&#x540D;&#x540E;&#x7F00; flash-strict flash&#x76EE;&#x6807;&#x7684;&#x4E25;&#x683C;&#x7C7B;&#x578B; flash-use-stage &#x4FDD;&#x7559;SWF&#x5E93;&#x7684;&#x521D;&#x59CB;&#x9636;&#x6BB5; force-lib-check &#x5F3A;&#x5236;&#x7F16;&#x8BD1;&#x5668;&#x68C0;&#x67E5; -net-lib &#x548C; -java-lib &#x6DFB;&#x52A0;&#x7684;&#x7C7B;&#xFF08;&#x5185;&#x90E8;&#xFF09; force-native-property Tag all properties with :nativeProperty metadata for 3.1 compatibility format-warning Print a warning for each formated string, for 2.x compatibility gencommon-debug GenCommon internal haxe-boot Given the name &#x2018;haxe&#x2019; to the flash boot class instead of a generated name haxe-ver &#x5F53;&#x524D;Haxe&#x7248;&#x672C;&#x503C; hxcpp-api-level Provided to allow compatibility between hxcpp versions include-prefix prepend path to generated include files interp The code is compiled to be run with &#x2013;interp java-ver=[version:5-7] &#x8BBE;&#x7F6E;&#x76EE;&#x6807;&#x7684;Java&#x7248;&#x672C; js-classic Don&#x2019;t use a function wrapper and strict mode in JS output js-es5 Generate JS for ES5-compliant runtimes js-unflatten Generate nested objects for packages and types keep-old-output Keep old source files in the output directory (for C#/Java) loop-unroll-max-cost Maximum cost (number of expressions * iterations) before loop unrolling is canceled (default 250) macro Defined when code is compiled in the macro context macro-times Display per-macro timing when used with &#x2013;times net-ver= version:20-45 &#x8BBE;&#x7F6E;&#x76EE;&#x6807;&#x7684;.NET&#x7248;&#x672C; net-target= Sets the .NET target. Defaults to net. xbox, micro (Micro Framework, compact (Compact Framework) are some valid values neko-source Output neko source instead of bytecode neko-v1 Keep Neko 1.x compatibility network-sandbox Use local network sandbox instead of local file access one no-compilation Disable CPP final compilation no-copt Disable completion optimization (for debug purposes) no-debug Remove all debug macros from cpp output no-deprecation-warnings Do not warn if fields annotated with @:deprecated are used no-flash-override Change overrides on some basic classes into HX suffixed methods flash only no-opt Disable optimizations no-pattern-matching Disable pattern matching no-inline Disable inlining no-root GenCS internal no-macro-cache Disable macro context caching no-simplify Disable simplification filter no-swf-compress Disable SWF output compression no-traces Disable all trace calls php-prefix Compiled with &#x2013;php-prefix real-position Disables haxe source mapping when targetting C# replace-files GenCommon internal scriptable GenCPP internal shallow-expose Expose types to surrounding scope of Haxe generated closure without writing to window object source-map-content Include the hx sources as part of the JS source map swc Output a SWC instead of a SWF swf-compress-level= level:1-9 Set the amount of compression for the SWF output swf-debug-password= Set a password for debugging. The password field is encrypted by using the MD5 algorithm and prevents unauthorised debugging of your swf. Without this flag -D fdb will use no password. swf-direct-blit Use hardware acceleration to blit graphics swf-gpu Use GPU compositing features when drawing graphics swf-metadata=file.xml Include contents of file.xml as metadata in the swf. swf-preloader-frame Insert empty first frame in swf. To be used together with -D flash-use-stage and -swf-lib swf-protected Compile Haxe private as protected in the SWF instead of public swf-script-timeout Maximum ActionScript processing time before script stuck dialog box displays (in seconds) swf-use-doabc Use DoAbc swf-tag instead of DoAbcDefine sys Defined for all system platforms unsafe Allow unsafe code when targeting C# use-nekoc Use nekoc compiler instead of internal one use-rtti-doc Allows access to documentation during compilation vcproj GenCPP internal"},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html":{"title":"","path":"\\1.Haxe介绍\\1.1.Haxe是什么\\1.1.Haxe是什么.html","body":"1.1.Haxe是什么 Haxe 由一个高级的、开源编程语言和一个编译器构成。它允许使用一个 ECMAScript 规范面向对象的语法编写编译程序到多种目标平台。得益于适当的抽象，它可以维护一个单一基础代码，并支持编译到多种目标平台。 Haxe 是强类型，但是类型系统可以在需要的地方被推翻。利用类型信息，Haxe 类型系统可以在编译时检测那些可能只在目标语言运行时才被注意到的错误。此外，类型信息可以被目标语言生成器用来生成优化的、健壮的代码。 目前, Haxe 支持九个目标语言用于不同的用例： 名称 输出类型 主要用途 JavaScript Sourcecode Browser, Desktop, Mobile, Server Neko Bytecode Desktop, Server PHP Sourcecode Server Python Sourcecode Desktop, Server C++ Sourcecode Desktop, Mobile, Server ActionScript 3 Sourcecode Browser, Desktop, Mobile Flash Bytecode Browser, Desktop, Mobile Java Sourcecode Desktop, Server C# Sourcecode Desktop, Mobile, Server 第一部分余下的内容简要概述了 一个Haxe 程序的模样，和自2005年开始以来的进化。 类型（第2章） 介绍了 Haxe 中七种不同的类型，和它们之间的交互。在 类型系统（第3章） 中将继续对类型的讨论，如 类型统一、类型参数和类型推断等。 类字段（第4章） 所有内容都是关于 Haxe 类的结构，其中包括一些其它的话题、属性的处理、内联字段和泛型函数等。 在 表达式（第5章） 中我们了解如何通过使用表达式实际上上程序做些什么。 语言特性（第6章） 详细描述了一些 Haxe 的特性，如模式匹配、字符串插值 和无用代码消除。这总结了 Haxe 语言参考。 接下来是 Haxe 编译器参考，首先在进入 编译器的高级功能（第8章） 之前讲述基础的 编译器用法（第7章） 。然后，将探索令人兴奋的内容， Haxe 的 宏（第9章） ，了解一些常见的如何被大大简化。 后面的章节中， 标准库（第10章） 探索 Haxe 标准库中重要的类型和概念。然后学习 Haxe 的包管理系统 Haxelib（第11章） 。 Haxe 抽象了许多目标平台的差异，但是有时和目标平台直接交互也是非常重要的，在 目标平台细节（第12章） 中，我们将讨论这个主题。"},"1.Haxe介绍/1.1.Haxe是什么/1.1.Haxe是什么.html#1-1-Haxe是什么":{"title":"1.1.Haxe&#x662F;&#x4EC0;&#x4E48;","path":"\\1.Haxe介绍\\1.1.Haxe是什么\\1.1.Haxe是什么.html#1-1-Haxe是什么","body":"Haxe &#x7531;&#x4E00;&#x4E2A;&#x9AD8;&#x7EA7;&#x7684;&#x3001;&#x5F00;&#x6E90;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x548C;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x5668;&#x6784;&#x6210;&#x3002;&#x5B83;&#x5141;&#x8BB8;&#x4F7F;&#x7528;&#x4E00;&#x4E2A; ECMAScript &#x89C4;&#x8303;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x8BED;&#x6CD5;&#x7F16;&#x5199;&#x7F16;&#x8BD1;&#x7A0B;&#x5E8F;&#x5230;&#x591A;&#x79CD;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002;&#x5F97;&#x76CA;&#x4E8E;&#x9002;&#x5F53;&#x7684;&#x62BD;&#x8C61;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x5355;&#x4E00;&#x57FA;&#x7840;&#x4EE3;&#x7801;&#xFF0C;&#x5E76;&#x652F;&#x6301;&#x7F16;&#x8BD1;&#x5230;&#x591A;&#x79CD;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002; Haxe &#x662F;&#x5F3A;&#x7C7B;&#x578B;&#xFF0C;&#x4F46;&#x662F;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x53EF;&#x4EE5;&#x5728;&#x9700;&#x8981;&#x7684;&#x5730;&#x65B9;&#x88AB;&#x63A8;&#x7FFB;&#x3002;&#x5229;&#x7528;&#x7C7B;&#x578B;&#x4FE1;&#x606F;&#xFF0C;Haxe &#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x53EF;&#x4EE5;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x68C0;&#x6D4B;&#x90A3;&#x4E9B;&#x53EF;&#x80FD;&#x53EA;&#x5728;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x8FD0;&#x884C;&#x65F6;&#x624D;&#x88AB;&#x6CE8;&#x610F;&#x5230;&#x7684;&#x9519;&#x8BEF;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x7C7B;&#x578B;&#x4FE1;&#x606F;&#x53EF;&#x4EE5;&#x88AB;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x751F;&#x6210;&#x5668;&#x7528;&#x6765;&#x751F;&#x6210;&#x4F18;&#x5316;&#x7684;&#x3001;&#x5065;&#x58EE;&#x7684;&#x4EE3;&#x7801;&#x3002; &#x76EE;&#x524D;, Haxe &#x652F;&#x6301;&#x4E5D;&#x4E2A;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7528;&#x4E8E;&#x4E0D;&#x540C;&#x7684;&#x7528;&#x4F8B;&#xFF1A; &#x540D;&#x79F0; &#x8F93;&#x51FA;&#x7C7B;&#x578B; &#x4E3B;&#x8981;&#x7528;&#x9014; JavaScript Sourcecode Browser, Desktop, Mobile, Server Neko Bytecode Desktop, Server PHP Sourcecode Server Python Sourcecode Desktop, Server C++ Sourcecode Desktop, Mobile, Server ActionScript 3 Sourcecode Browser, Desktop, Mobile Flash Bytecode Browser, Desktop, Mobile Java Sourcecode Desktop, Server C# Sourcecode Desktop, Mobile, Server &#x7B2C;&#x4E00;&#x90E8;&#x5206;&#x4F59;&#x4E0B;&#x7684;&#x5185;&#x5BB9;&#x7B80;&#x8981;&#x6982;&#x8FF0;&#x4E86; &#x4E00;&#x4E2A;Haxe &#x7A0B;&#x5E8F;&#x7684;&#x6A21;&#x6837;&#xFF0C;&#x548C;&#x81EA;2005&#x5E74;&#x5F00;&#x59CB;&#x4EE5;&#x6765;&#x7684;&#x8FDB;&#x5316;&#x3002; &#x7C7B;&#x578B;&#xFF08;&#x7B2C;2&#x7AE0;&#xFF09; &#x4ECB;&#x7ECD;&#x4E86; Haxe &#x4E2D;&#x4E03;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x548C;&#x5B83;&#x4EEC;&#x4E4B;&#x95F4;&#x7684;&#x4EA4;&#x4E92;&#x3002;&#x5728; &#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#xFF08;&#x7B2C;3&#x7AE0;&#xFF09; &#x4E2D;&#x5C06;&#x7EE7;&#x7EED;&#x5BF9;&#x7C7B;&#x578B;&#x7684;&#x8BA8;&#x8BBA;&#xFF0C;&#x5982; &#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x3001;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x548C;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x7B49;&#x3002; &#x7C7B;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;4&#x7AE0;&#xFF09; &#x6240;&#x6709;&#x5185;&#x5BB9;&#x90FD;&#x662F;&#x5173;&#x4E8E; Haxe &#x7C7B;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5176;&#x4E2D;&#x5305;&#x62EC;&#x4E00;&#x4E9B;&#x5176;&#x5B83;&#x7684;&#x8BDD;&#x9898;&#x3001;&#x5C5E;&#x6027;&#x7684;&#x5904;&#x7406;&#x3001;&#x5185;&#x8054;&#x5B57;&#x6BB5;&#x548C;&#x6CDB;&#x578B;&#x51FD;&#x6570;&#x7B49;&#x3002; &#x5728; &#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09; &#x4E2D;&#x6211;&#x4EEC;&#x4E86;&#x89E3;&#x5982;&#x4F55;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x8868;&#x8FBE;&#x5F0F;&#x5B9E;&#x9645;&#x4E0A;&#x4E0A;&#x7A0B;&#x5E8F;&#x505A;&#x4E9B;&#x4EC0;&#x4E48;&#x3002; &#x8BED;&#x8A00;&#x7279;&#x6027;&#xFF08;&#x7B2C;6&#x7AE0;&#xFF09; &#x8BE6;&#x7EC6;&#x63CF;&#x8FF0;&#x4E86;&#x4E00;&#x4E9B; Haxe &#x7684;&#x7279;&#x6027;&#xFF0C;&#x5982;&#x6A21;&#x5F0F;&#x5339;&#x914D;&#x3001;&#x5B57;&#x7B26;&#x4E32;&#x63D2;&#x503C; &#x548C;&#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664;&#x3002;&#x8FD9;&#x603B;&#x7ED3;&#x4E86; Haxe &#x8BED;&#x8A00;&#x53C2;&#x8003;&#x3002; &#x63A5;&#x4E0B;&#x6765;&#x662F; Haxe &#x7F16;&#x8BD1;&#x5668;&#x53C2;&#x8003;&#xFF0C;&#x9996;&#x5148;&#x5728;&#x8FDB;&#x5165; &#x7F16;&#x8BD1;&#x5668;&#x7684;&#x9AD8;&#x7EA7;&#x529F;&#x80FD;&#xFF08;&#x7B2C;8&#x7AE0;&#xFF09; &#x4E4B;&#x524D;&#x8BB2;&#x8FF0;&#x57FA;&#x7840;&#x7684; &#x7F16;&#x8BD1;&#x5668;&#x7528;&#x6CD5;&#xFF08;&#x7B2C;7&#x7AE0;&#xFF09; &#x3002;&#x7136;&#x540E;&#xFF0C;&#x5C06;&#x63A2;&#x7D22;&#x4EE4;&#x4EBA;&#x5174;&#x594B;&#x7684;&#x5185;&#x5BB9;&#xFF0C; Haxe &#x7684; &#x5B8F;&#xFF08;&#x7B2C;9&#x7AE0;&#xFF09; &#xFF0C;&#x4E86;&#x89E3;&#x4E00;&#x4E9B;&#x5E38;&#x89C1;&#x7684;&#x5982;&#x4F55;&#x88AB;&#x5927;&#x5927;&#x7B80;&#x5316;&#x3002; &#x540E;&#x9762;&#x7684;&#x7AE0;&#x8282;&#x4E2D;&#xFF0C; &#x6807;&#x51C6;&#x5E93;&#xFF08;&#x7B2C;10&#x7AE0;&#xFF09; &#x63A2;&#x7D22; Haxe &#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x91CD;&#x8981;&#x7684;&#x7C7B;&#x578B;&#x548C;&#x6982;&#x5FF5;&#x3002;&#x7136;&#x540E;&#x5B66;&#x4E60; Haxe &#x7684;&#x5305;&#x7BA1;&#x7406;&#x7CFB;&#x7EDF; Haxelib&#xFF08;&#x7B2C;11&#x7AE0;&#xFF09; &#x3002; Haxe &#x62BD;&#x8C61;&#x4E86;&#x8BB8;&#x591A;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x7684;&#x5DEE;&#x5F02;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x65F6;&#x548C;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x76F4;&#x63A5;&#x4EA4;&#x4E92;&#x4E5F;&#x662F;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x7684;&#xFF0C;&#x5728; &#x76EE;&#x6807;&#x5E73;&#x53F0;&#x7EC6;&#x8282;&#xFF08;&#x7B2C;12&#x7AE0;&#xFF09; &#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x8BA8;&#x8BBA;&#x8FD9;&#x4E2A;&#x4E3B;&#x9898;&#x3002;"},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html":{"title":"","path":"\\1.Haxe介绍\\1.2.关于本文档\\1.2.1.作者及贡献者.html","body":"1.2.1.作者及贡献者 本文档大部分内容是由 Simon Krajewski 就职于 Haxe 基金会时 编写。我们感谢这些人的贡献： Dan Korostelev：追加内容和编辑 Caleb Harper：追加内容和编辑 Joseﬁene Pertosa：编辑 Miha Lunar：编辑 Nicolas Cannasse：Haxe 之父"},"1.Haxe介绍/1.2.关于本文档/1.2.1.作者及贡献者.html#1-2-1-作者及贡献者":{"title":"1.2.1.&#x4F5C;&#x8005;&#x53CA;&#x8D21;&#x732E;&#x8005;","path":"\\1.Haxe介绍\\1.2.关于本文档\\1.2.1.作者及贡献者.html#1-2-1-作者及贡献者","body":"&#x672C;&#x6587;&#x6863;&#x5927;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#x662F;&#x7531; Simon Krajewski &#x5C31;&#x804C;&#x4E8E; Haxe &#x57FA;&#x91D1;&#x4F1A;&#x65F6; &#x7F16;&#x5199;&#x3002;&#x6211;&#x4EEC;&#x611F;&#x8C22;&#x8FD9;&#x4E9B;&#x4EBA;&#x7684;&#x8D21;&#x732E;&#xFF1A; Dan Korostelev&#xFF1A;&#x8FFD;&#x52A0;&#x5185;&#x5BB9;&#x548C;&#x7F16;&#x8F91; Caleb Harper&#xFF1A;&#x8FFD;&#x52A0;&#x5185;&#x5BB9;&#x548C;&#x7F16;&#x8F91; Jose&#xFB01;ene Pertosa&#xFF1A;&#x7F16;&#x8F91; Miha Lunar&#xFF1A;&#x7F16;&#x8F91; Nicolas Cannasse&#xFF1A;Haxe &#x4E4B;&#x7236;"},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html":{"title":"","path":"\\1.Haxe介绍\\1.2.关于本文档\\1.2.关于本文档.html","body":"1.2.关于本文档 本文档翻译自 Haxe 3 官方手册。因此，它不是一个初学者教程，并不会教你如何编程。然而，主题都被粗略设计为便于阅读，对相关话题进行引用，如，一些之前看到的，和尚未了解的。在一些情况下，如果可以简化解释，一个较早的章节会使用后面的一些章节的信息。这些引用将有相应的连接，提前阅读这些话题，通常不是什么问题。 我们会使用很多 Haxe 源代码来保持理论和实际的连接。这些代码示例通常是完整的程序，并带有一个 main 函数，它们都可以被编译。然而，有时候只有最重要的部分被展示出来。源代码看起来就像这样： 1 Haxe code here 偶尔地，我们会演示 Haxe 代码怎样被生成，对于这些，通常会显示 JavaScript 目标平台。此外，在本文档中我们定义了一组术语。主要用于引入一个新的类型或者一个 Haxe 专用术语。我们不会定义每个新引入的概念，譬如什么是类，以避免弄乱文本。定义看起来像这样： 定义 : 定义名称 定义描述 文档中的一些地方还有一些花絮框。这些包括非正式的信息，如为什么在 Haxe 的开发中做出某些决定，或者过去的 Haxe 版本中的某些实际功能的改变等。这类信息通常不是很重要，你可以选择跳过，因为它们只是为了传达一些花絮。花絮看起来像这样： 花絮: 关于花絮 花絮内容"},"1.Haxe介绍/1.2.关于本文档/1.2.关于本文档.html#1-2-关于本文档":{"title":"1.2.&#x5173;&#x4E8E;&#x672C;&#x6587;&#x6863;","path":"\\1.Haxe介绍\\1.2.关于本文档\\1.2.关于本文档.html#1-2-关于本文档","body":"&#x672C;&#x6587;&#x6863;&#x7FFB;&#x8BD1;&#x81EA; Haxe 3 &#x5B98;&#x65B9;&#x624B;&#x518C;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5B83;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x521D;&#x5B66;&#x8005;&#x6559;&#x7A0B;&#xFF0C;&#x5E76;&#x4E0D;&#x4F1A;&#x6559;&#x4F60;&#x5982;&#x4F55;&#x7F16;&#x7A0B;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4E3B;&#x9898;&#x90FD;&#x88AB;&#x7C97;&#x7565;&#x8BBE;&#x8BA1;&#x4E3A;&#x4FBF;&#x4E8E;&#x9605;&#x8BFB;&#xFF0C;&#x5BF9;&#x76F8;&#x5173;&#x8BDD;&#x9898;&#x8FDB;&#x884C;&#x5F15;&#x7528;&#xFF0C;&#x5982;&#xFF0C;&#x4E00;&#x4E9B;&#x4E4B;&#x524D;&#x770B;&#x5230;&#x7684;&#xFF0C;&#x548C;&#x5C1A;&#x672A;&#x4E86;&#x89E3;&#x7684;&#x3002;&#x5728;&#x4E00;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x5982;&#x679C;&#x53EF;&#x4EE5;&#x7B80;&#x5316;&#x89E3;&#x91CA;&#xFF0C;&#x4E00;&#x4E2A;&#x8F83;&#x65E9;&#x7684;&#x7AE0;&#x8282;&#x4F1A;&#x4F7F;&#x7528;&#x540E;&#x9762;&#x7684;&#x4E00;&#x4E9B;&#x7AE0;&#x8282;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x8FD9;&#x4E9B;&#x5F15;&#x7528;&#x5C06;&#x6709;&#x76F8;&#x5E94;&#x7684;&#x8FDE;&#x63A5;&#xFF0C;&#x63D0;&#x524D;&#x9605;&#x8BFB;&#x8FD9;&#x4E9B;&#x8BDD;&#x9898;&#xFF0C;&#x901A;&#x5E38;&#x4E0D;&#x662F;&#x4EC0;&#x4E48;&#x95EE;&#x9898;&#x3002; &#x6211;&#x4EEC;&#x4F1A;&#x4F7F;&#x7528;&#x5F88;&#x591A; Haxe &#x6E90;&#x4EE3;&#x7801;&#x6765;&#x4FDD;&#x6301;&#x7406;&#x8BBA;&#x548C;&#x5B9E;&#x9645;&#x7684;&#x8FDE;&#x63A5;&#x3002;&#x8FD9;&#x4E9B;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x901A;&#x5E38;&#x662F;&#x5B8C;&#x6574;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x5E76;&#x5E26;&#x6709;&#x4E00;&#x4E2A; main &#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x4EEC;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x7F16;&#x8BD1;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x53EA;&#x6709;&#x6700;&#x91CD;&#x8981;&#x7684;&#x90E8;&#x5206;&#x88AB;&#x5C55;&#x793A;&#x51FA;&#x6765;&#x3002;&#x6E90;&#x4EE3;&#x7801;&#x770B;&#x8D77;&#x6765;&#x5C31;&#x50CF;&#x8FD9;&#x6837;&#xFF1A; 1 Haxe code here &#x5076;&#x5C14;&#x5730;&#xFF0C;&#x6211;&#x4EEC;&#x4F1A;&#x6F14;&#x793A; Haxe &#x4EE3;&#x7801;&#x600E;&#x6837;&#x88AB;&#x751F;&#x6210;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E9B;&#xFF0C;&#x901A;&#x5E38;&#x4F1A;&#x663E;&#x793A; JavaScript &#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x5728;&#x672C;&#x6587;&#x6863;&#x4E2D;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x7EC4;&#x672F;&#x8BED;&#x3002;&#x4E3B;&#x8981;&#x7528;&#x4E8E;&#x5F15;&#x5165;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7C7B;&#x578B;&#x6216;&#x8005;&#x4E00;&#x4E2A; Haxe &#x4E13;&#x7528;&#x672F;&#x8BED;&#x3002;&#x6211;&#x4EEC;&#x4E0D;&#x4F1A;&#x5B9A;&#x4E49;&#x6BCF;&#x4E2A;&#x65B0;&#x5F15;&#x5165;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x8B6C;&#x5982;&#x4EC0;&#x4E48;&#x662F;&#x7C7B;&#xFF0C;&#x4EE5;&#x907F;&#x514D;&#x5F04;&#x4E71;&#x6587;&#x672C;&#x3002;&#x5B9A;&#x4E49;&#x770B;&#x8D77;&#x6765;&#x50CF;&#x8FD9;&#x6837;&#xFF1A; &#x5B9A;&#x4E49; : &#x5B9A;&#x4E49;&#x540D;&#x79F0; &#x5B9A;&#x4E49;&#x63CF;&#x8FF0; &#x6587;&#x6863;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x5730;&#x65B9;&#x8FD8;&#x6709;&#x4E00;&#x4E9B;&#x82B1;&#x7D6E;&#x6846;&#x3002;&#x8FD9;&#x4E9B;&#x5305;&#x62EC;&#x975E;&#x6B63;&#x5F0F;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5982;&#x4E3A;&#x4EC0;&#x4E48;&#x5728; Haxe &#x7684;&#x5F00;&#x53D1;&#x4E2D;&#x505A;&#x51FA;&#x67D0;&#x4E9B;&#x51B3;&#x5B9A;&#xFF0C;&#x6216;&#x8005;&#x8FC7;&#x53BB;&#x7684; Haxe &#x7248;&#x672C;&#x4E2D;&#x7684;&#x67D0;&#x4E9B;&#x5B9E;&#x9645;&#x529F;&#x80FD;&#x7684;&#x6539;&#x53D8;&#x7B49;&#x3002;&#x8FD9;&#x7C7B;&#x4FE1;&#x606F;&#x901A;&#x5E38;&#x4E0D;&#x662F;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x8DF3;&#x8FC7;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x4F20;&#x8FBE;&#x4E00;&#x4E9B;&#x82B1;&#x7D6E;&#x3002;&#x82B1;&#x7D6E;&#x770B;&#x8D77;&#x6765;&#x50CF;&#x8FD9;&#x6837;&#xFF1A; &#x82B1;&#x7D6E;: &#x5173;&#x4E8E;&#x82B1;&#x7D6E; &#x82B1;&#x7D6E;&#x5185;&#x5BB9;"},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html":{"title":"","path":"\\1.Haxe介绍\\1.2.关于本文档\\1.2.2.License.html","body":"1.2.2.License Haxe 基金会的 Haxe手册 遵循 Creative Commons Attribution 4.0 International 许可。基于 https://github.com/HaxeFoundation/HaxeManual 上的一个项目。"},"1.Haxe介绍/1.2.关于本文档/1.2.2.License.html#1-2-2-License":{"title":"1.2.2.License","path":"\\1.Haxe介绍\\1.2.关于本文档\\1.2.2.License.html#1-2-2-License","body":"Haxe &#x57FA;&#x91D1;&#x4F1A;&#x7684; Haxe&#x624B;&#x518C; &#x9075;&#x5FAA; Creative Commons Attribution 4.0 International &#x8BB8;&#x53EF;&#x3002;&#x57FA;&#x4E8E; https://github.com/HaxeFoundation/HaxeManual &#x4E0A;&#x7684;&#x4E00;&#x4E2A;&#x9879;&#x76EE;&#x3002;"},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html":{"title":"","path":"\\1.Haxe介绍\\1.4.Haxe的历史\\1.4.Haxe的历史.html","body":"1.4.Haxe的历史 Haxe 项目开始于2005年8月22日，由法国开发者 Nicolas Cannasse 创建，作为流行的开源 ActionScript 2编译器 MTASC（Motion-Twin Action Script Compiler）和内部的MTypes语言继任者，尝试将类型推断的应用成为一个面向对象语言。Nicolas 长期的编程语言设计热情，和混合不同技术作为他使用 Motion-Twin 进行游戏开发工作中一部分的新机会出现，催生了一个全新语言的产生。 开始时 Haxe 被拼写为 haXe，之后，它的 beta 版本在2006年2月发布，附带了第一个支持的目标平台 AVM2（Adobe Virtual Machine ）字节码， 和 Nicolas 自己的 Neko 虚拟机 3 。 Nicolas Cannasse，目前仍是 Haxe 项目的领导者，一直致力于使 Haxe 更加智能，随后在2006年5月发布了 Haxe 1.0 。第一个主要版本开始支持 JavaScript 代码生成，并已经有一些定义今天的 Haxe 的基础，如类型推断和结构子类。 Haxe 1 在两年中经历了几个小的版本，在2006年8月添加了支持 haxelib工具的 Flash AVM 2 目标平台，在2007年3月增加的对 ActionScript 3 目标的支持。这几个月里，Haxe 更加聚焦于稳定性的提升，它的几个小版本里的 bug 得到修复。 Haxe 2.0 在2008年7月发布，引入了 PHP 目标平台，这要感谢Franco Ponticelli 。在 Hugh Sanderson 的努力下，在2007年7月的 Haxe 2.04 版本中加入了 C++ 目标平台。 正如Haxe 1 那样，接下来的几个月，版本继续保持稳定。在2011年1月，Haxe 2.04 发布，开始支持 宏。几乎同时，Bruno Garcia 加入团队，作为 JavaScript 平台的维护者，并在随后的 2.08 和 2.09 版本中做了更大的改进。 在 2.09版本之后，Simon Krajewski 加入团队，开始了 Haxe 3 的开发。此外，Java 和 C# 目标平台也找到加入到 Haxe 版本中的方式。然后，决定建立最终的 Haxe 2 版本，即2012年7月发布的 Haxe 2.10 。 2012年底，Haxe 3 项目开始， Haxe 编译器团队，现在由最近建立的 Haxe 基金会 提供资金支持，开始聚焦于下一个主要版本。Haxe 3 随后发布于2013年5月。"},"1.Haxe介绍/1.4.Haxe的历史/1.4.Haxe的历史.html#1-4-Haxe的历史":{"title":"1.4.Haxe&#x7684;&#x5386;&#x53F2;","path":"\\1.Haxe介绍\\1.4.Haxe的历史\\1.4.Haxe的历史.html#1-4-Haxe的历史","body":"Haxe &#x9879;&#x76EE;&#x5F00;&#x59CB;&#x4E8E;2005&#x5E74;8&#x6708;22&#x65E5;&#xFF0C;&#x7531;&#x6CD5;&#x56FD;&#x5F00;&#x53D1;&#x8005; Nicolas Cannasse &#x521B;&#x5EFA;&#xFF0C;&#x4F5C;&#x4E3A;&#x6D41;&#x884C;&#x7684;&#x5F00;&#x6E90; ActionScript 2&#x7F16;&#x8BD1;&#x5668; MTASC&#xFF08;Motion-Twin Action Script Compiler&#xFF09;&#x548C;&#x5185;&#x90E8;&#x7684;MTypes&#x8BED;&#x8A00;&#x7EE7;&#x4EFB;&#x8005;&#xFF0C;&#x5C1D;&#x8BD5;&#x5C06;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x7684;&#x5E94;&#x7528;&#x6210;&#x4E3A;&#x4E00;&#x4E2A;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x8BED;&#x8A00;&#x3002;Nicolas &#x957F;&#x671F;&#x7684;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x8BBE;&#x8BA1;&#x70ED;&#x60C5;&#xFF0C;&#x548C;&#x6DF7;&#x5408;&#x4E0D;&#x540C;&#x6280;&#x672F;&#x4F5C;&#x4E3A;&#x4ED6;&#x4F7F;&#x7528; Motion-Twin &#x8FDB;&#x884C;&#x6E38;&#x620F;&#x5F00;&#x53D1;&#x5DE5;&#x4F5C;&#x4E2D;&#x4E00;&#x90E8;&#x5206;&#x7684;&#x65B0;&#x673A;&#x4F1A;&#x51FA;&#x73B0;&#xFF0C;&#x50AC;&#x751F;&#x4E86;&#x4E00;&#x4E2A;&#x5168;&#x65B0;&#x8BED;&#x8A00;&#x7684;&#x4EA7;&#x751F;&#x3002; &#x5F00;&#x59CB;&#x65F6; Haxe &#x88AB;&#x62FC;&#x5199;&#x4E3A; haXe&#xFF0C;&#x4E4B;&#x540E;&#xFF0C;&#x5B83;&#x7684; beta &#x7248;&#x672C;&#x5728;2006&#x5E74;2&#x6708;&#x53D1;&#x5E03;&#xFF0C;&#x9644;&#x5E26;&#x4E86;&#x7B2C;&#x4E00;&#x4E2A;&#x652F;&#x6301;&#x7684;&#x76EE;&#x6807;&#x5E73;&#x53F0; AVM2&#xFF08;Adobe Virtual Machine &#xFF09;&#x5B57;&#x8282;&#x7801;&#xFF0C; &#x548C; Nicolas &#x81EA;&#x5DF1;&#x7684; Neko &#x865A;&#x62DF;&#x673A; 3 &#x3002; Nicolas Cannasse&#xFF0C;&#x76EE;&#x524D;&#x4ECD;&#x662F; Haxe &#x9879;&#x76EE;&#x7684;&#x9886;&#x5BFC;&#x8005;&#xFF0C;&#x4E00;&#x76F4;&#x81F4;&#x529B;&#x4E8E;&#x4F7F; Haxe &#x66F4;&#x52A0;&#x667A;&#x80FD;&#xFF0C;&#x968F;&#x540E;&#x5728;2006&#x5E74;5&#x6708;&#x53D1;&#x5E03;&#x4E86; Haxe 1.0 &#x3002;&#x7B2C;&#x4E00;&#x4E2A;&#x4E3B;&#x8981;&#x7248;&#x672C;&#x5F00;&#x59CB;&#x652F;&#x6301; JavaScript &#x4EE3;&#x7801;&#x751F;&#x6210;&#xFF0C;&#x5E76;&#x5DF2;&#x7ECF;&#x6709;&#x4E00;&#x4E9B;&#x5B9A;&#x4E49;&#x4ECA;&#x5929;&#x7684; Haxe &#x7684;&#x57FA;&#x7840;&#xFF0C;&#x5982;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x548C;&#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x3002; Haxe 1 &#x5728;&#x4E24;&#x5E74;&#x4E2D;&#x7ECF;&#x5386;&#x4E86;&#x51E0;&#x4E2A;&#x5C0F;&#x7684;&#x7248;&#x672C;&#xFF0C;&#x5728;2006&#x5E74;8&#x6708;&#x6DFB;&#x52A0;&#x4E86;&#x652F;&#x6301; haxelib&#x5DE5;&#x5177;&#x7684; Flash AVM 2 &#x76EE;&#x6807;&#x5E73;&#x53F0;&#xFF0C;&#x5728;2007&#x5E74;3&#x6708;&#x589E;&#x52A0;&#x7684;&#x5BF9; ActionScript 3 &#x76EE;&#x6807;&#x7684;&#x652F;&#x6301;&#x3002;&#x8FD9;&#x51E0;&#x4E2A;&#x6708;&#x91CC;&#xFF0C;Haxe &#x66F4;&#x52A0;&#x805A;&#x7126;&#x4E8E;&#x7A33;&#x5B9A;&#x6027;&#x7684;&#x63D0;&#x5347;&#xFF0C;&#x5B83;&#x7684;&#x51E0;&#x4E2A;&#x5C0F;&#x7248;&#x672C;&#x91CC;&#x7684; bug &#x5F97;&#x5230;&#x4FEE;&#x590D;&#x3002; Haxe 2.0 &#x5728;2008&#x5E74;7&#x6708;&#x53D1;&#x5E03;&#xFF0C;&#x5F15;&#x5165;&#x4E86; PHP &#x76EE;&#x6807;&#x5E73;&#x53F0;&#xFF0C;&#x8FD9;&#x8981;&#x611F;&#x8C22;Franco Ponticelli &#x3002;&#x5728; Hugh Sanderson &#x7684;&#x52AA;&#x529B;&#x4E0B;&#xFF0C;&#x5728;2007&#x5E74;7&#x6708;&#x7684; Haxe 2.04 &#x7248;&#x672C;&#x4E2D;&#x52A0;&#x5165;&#x4E86; C++ &#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002; &#x6B63;&#x5982;Haxe 1 &#x90A3;&#x6837;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x51E0;&#x4E2A;&#x6708;&#xFF0C;&#x7248;&#x672C;&#x7EE7;&#x7EED;&#x4FDD;&#x6301;&#x7A33;&#x5B9A;&#x3002;&#x5728;2011&#x5E74;1&#x6708;&#xFF0C;Haxe 2.04 &#x53D1;&#x5E03;&#xFF0C;&#x5F00;&#x59CB;&#x652F;&#x6301; &#x5B8F;&#x3002;&#x51E0;&#x4E4E;&#x540C;&#x65F6;&#xFF0C;Bruno Garcia &#x52A0;&#x5165;&#x56E2;&#x961F;&#xFF0C;&#x4F5C;&#x4E3A; JavaScript &#x5E73;&#x53F0;&#x7684;&#x7EF4;&#x62A4;&#x8005;&#xFF0C;&#x5E76;&#x5728;&#x968F;&#x540E;&#x7684; 2.08 &#x548C; 2.09 &#x7248;&#x672C;&#x4E2D;&#x505A;&#x4E86;&#x66F4;&#x5927;&#x7684;&#x6539;&#x8FDB;&#x3002; &#x5728; 2.09&#x7248;&#x672C;&#x4E4B;&#x540E;&#xFF0C;Simon Krajewski &#x52A0;&#x5165;&#x56E2;&#x961F;&#xFF0C;&#x5F00;&#x59CB;&#x4E86; Haxe 3 &#x7684;&#x5F00;&#x53D1;&#x3002;&#x6B64;&#x5916;&#xFF0C;Java &#x548C; C# &#x76EE;&#x6807;&#x5E73;&#x53F0;&#x4E5F;&#x627E;&#x5230;&#x52A0;&#x5165;&#x5230; Haxe &#x7248;&#x672C;&#x4E2D;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x7136;&#x540E;&#xFF0C;&#x51B3;&#x5B9A;&#x5EFA;&#x7ACB;&#x6700;&#x7EC8;&#x7684; Haxe 2 &#x7248;&#x672C;&#xFF0C;&#x5373;2012&#x5E74;7&#x6708;&#x53D1;&#x5E03;&#x7684; Haxe 2.10 &#x3002; 2012&#x5E74;&#x5E95;&#xFF0C;Haxe 3 &#x9879;&#x76EE;&#x5F00;&#x59CB;&#xFF0C; Haxe &#x7F16;&#x8BD1;&#x5668;&#x56E2;&#x961F;&#xFF0C;&#x73B0;&#x5728;&#x7531;&#x6700;&#x8FD1;&#x5EFA;&#x7ACB;&#x7684; Haxe &#x57FA;&#x91D1;&#x4F1A; &#x63D0;&#x4F9B;&#x8D44;&#x91D1;&#x652F;&#x6301;&#xFF0C;&#x5F00;&#x59CB;&#x805A;&#x7126;&#x4E8E;&#x4E0B;&#x4E00;&#x4E2A;&#x4E3B;&#x8981;&#x7248;&#x672C;&#x3002;Haxe 3 &#x968F;&#x540E;&#x53D1;&#x5E03;&#x4E8E;2013&#x5E74;5&#x6708;&#x3002;"},"1.Haxe介绍/1.3Hello World/1.3Hello World.html":{"title":"","path":"\\1.Haxe介绍\\1.3Hello World\\1.3Hello World.html","body":"1.3Hello World 下面的程序被编译并运行后，将打印 “ Hello World ”： 1 2 3 4 5 6 class Main  static public function main (): Void  trace ( \"Hello World\" );   可以保存上面的代码到一个 Main.hx 文件，并使用 Haxe 编译器运行命令： -main Main --interp 。然后生成如下输出： Main.hx:3: Hello world 。从其中我们可以了解到以下几件事情： Haxe 程序被保存为 .hx 扩展名的文件 Haxe编译器是一个命令行工具，可以在调用时使用参数 如 -main Main 和 --interp Haxe 程序使用类（Main，首字母大写），类中包含函数（main，首字母小写） 包含主要 Haxe 类文件的名字和类的名字相同（本例中的 Main.hx ）。"},"1.Haxe介绍/1.3Hello World/1.3Hello World.html#1-3Hello-World":{"title":"1.3Hello World","path":"\\1.Haxe介绍\\1.3Hello World\\1.3Hello World.html#1-3Hello-World","body":"&#x4E0B;&#x9762;&#x7684;&#x7A0B;&#x5E8F;&#x88AB;&#x7F16;&#x8BD1;&#x5E76;&#x8FD0;&#x884C;&#x540E;&#xFF0C;&#x5C06;&#x6253;&#x5370; &#x201C; Hello World &#x201D;&#xFF1A; 1 2 3 4 5 6 class Main { static public function main (): Void { trace ( Hello World ); } } &#x53EF;&#x4EE5;&#x4FDD;&#x5B58;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x5230;&#x4E00;&#x4E2A; Main.hx &#x6587;&#x4EF6;&#xFF0C;&#x5E76;&#x4F7F;&#x7528; Haxe &#x7F16;&#x8BD1;&#x5668;&#x8FD0;&#x884C;&#x547D;&#x4EE4;&#xFF1A; -main Main --interp &#x3002;&#x7136;&#x540E;&#x751F;&#x6210;&#x5982;&#x4E0B;&#x8F93;&#x51FA;&#xFF1A; Main.hx:3: Hello world &#x3002;&#x4ECE;&#x5176;&#x4E2D;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4E86;&#x89E3;&#x5230;&#x4EE5;&#x4E0B;&#x51E0;&#x4EF6;&#x4E8B;&#x60C5;&#xFF1A; Haxe &#x7A0B;&#x5E8F;&#x88AB;&#x4FDD;&#x5B58;&#x4E3A; .hx &#x6269;&#x5C55;&#x540D;&#x7684;&#x6587;&#x4EF6; Haxe&#x7F16;&#x8BD1;&#x5668;&#x662F;&#x4E00;&#x4E2A;&#x547D;&#x4EE4;&#x884C;&#x5DE5;&#x5177;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x8C03;&#x7528;&#x65F6;&#x4F7F;&#x7528;&#x53C2;&#x6570; &#x5982; -main Main &#x548C; --interp Haxe &#x7A0B;&#x5E8F;&#x4F7F;&#x7528;&#x7C7B;&#xFF08;Main&#xFF0C;&#x9996;&#x5B57;&#x6BCD;&#x5927;&#x5199;&#xFF09;&#xFF0C;&#x7C7B;&#x4E2D;&#x5305;&#x542B;&#x51FD;&#x6570;&#xFF08;main&#xFF0C;&#x9996;&#x5B57;&#x6BCD;&#x5C0F;&#x5199;&#xFF09; &#x5305;&#x542B;&#x4E3B;&#x8981; Haxe &#x7C7B;&#x6587;&#x4EF6;&#x7684;&#x540D;&#x5B57;&#x548C;&#x7C7B;&#x7684;&#x540D;&#x5B57;&#x76F8;&#x540C;&#xFF08;&#x672C;&#x4F8B;&#x4E2D;&#x7684; Main.hx &#xFF09;&#x3002;"},"10.标准库/10.1.字符串/10.1.2.Unicode.html":{"title":"","path":"\\10.标准库\\10.1.字符串\\10.1.2.Unicode.html","body":"10.1.2.Unicode since Haxe 4.0.0 All Haxe targets except Neko support Unicode in strings by default. The compile-time define target.unicode is set on targets where Unicode is supported. A string in Haxe code represents a valid sequence of Unicode codepoints. Due to differing internal representations of strings across targets, only the basic multilingual plane (BMP) is supported consistently: every BMP Unicode codepoint corresponds to exactly one string character. It is still possible to work with strings including non-BMP characters on all targets without having to manually decode surrogate pairs by using the Unicode iterators API provided in the standard library."},"10.标准库/10.1.字符串/10.1.2.Unicode.html#10-1-2-Unicode":{"title":"10.1.2.Unicode","path":"\\10.标准库\\10.1.字符串\\10.1.2.Unicode.html#10-1-2-Unicode","body":"since Haxe 4.0.0 All Haxe targets except Neko support Unicode in strings by default. The compile-time define target.unicode is set on targets where Unicode is supported. A string in Haxe code represents a valid sequence of Unicode codepoints. Due to differing internal representations of strings across targets, only the basic multilingual plane (BMP) is supported consistently: every BMP Unicode codepoint corresponds to exactly one string character. It is still possible to work with strings including non-BMP characters on all targets without having to manually decode surrogate pairs by using the Unicode iterators API provided in the standard library."},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html":{"title":"","path":"\\10.标准库\\10.1.字符串\\10.1.1.字符串字面值.html","body":"10.1.1.字符串字面值 A string literal is a sequence of characters inside a pair of double quotes or single quotes: 1 2 3 var a = \"foo\" ; var b = 'foo' ; trace (a == b); // true The only difference between the two forms is that single-quoted literals allow string interpolation . Escape sequences Sequence Meaning Unicode codepoint (decimal) Unicode codepoint (hexadecimal) \\t horizontal tab (TAB) 9 0x09 \\n new line (LF) 10 0x0A \\r new line (CR) 13 0x0D \\ double quote 34 0x22 \\&#39; single quote 39 0x27 \\\\\\\\\\\\\\\\ backslash 92 0x5C \\NNN ASCII escape where NNN is 3 octal digits 0 - 127 0x00 - 0x7F \\xNN ASCII escape where NN is a pair of hexadecimal digits 0 - 127 0x00 - 0x7F \\uNNNN Unicode escape where NNNN is 4 hexadecimal digits 0 - 65535 0x0000 - 0xFFFF \\u{N...} Unicode escape where N... is 1-6 hexadecimal digits 0 - 1114111 0x000000 - 0x10FFFF"},"10.标准库/10.1.字符串/10.1.1.字符串字面值.html#10-1-1-字符串字面值":{"title":"10.1.1.&#x5B57;&#x7B26;&#x4E32;&#x5B57;&#x9762;&#x503C;","path":"\\10.标准库\\10.1.字符串\\10.1.1.字符串字面值.html#10-1-1-字符串字面值","body":"A string literal is a sequence of characters inside a pair of double quotes or single quotes: 1 2 3 var a = foo ; var b = &apos;foo&apos; ; trace (a == b); // true The only difference between the two forms is that single-quoted literals allow string interpolation . Escape sequences Sequence Meaning Unicode codepoint (decimal) Unicode codepoint (hexadecimal) \\t horizontal tab (TAB) 9 0x09 \\n new line (LF) 10 0x0A \\r new line (CR) 13 0x0D \\ double quote 34 0x22 \\&apos; single quote 39 0x27 \\\\\\\\\\\\\\\\ backslash 92 0x5C \\NNN ASCII escape where NNN is 3 octal digits 0 - 127 0x00 - 0x7F \\xNN ASCII escape where NN is a pair of hexadecimal digits 0 - 127 0x00 - 0x7F \\uNNNN Unicode escape where NNNN is 4 hexadecimal digits 0 - 65535 0x0000 - 0xFFFF \\u{N...} Unicode escape where N... is 1-6 hexadecimal digits 0 - 1114111 0x000000 - 0x10FFFF"},"10.标准库/10.1.字符串/10.1.字符串.html":{"title":"","path":"\\10.标准库\\10.1.字符串\\10.1.字符串.html","body":"10.1.字符串 类型 : String 一个字符串是一个字符序列。 字符编码 使用 .code 属性到一个常量单字节，可以编译它的ASCII字节码： 1 #.code // will compile as 35 查看 String API 了解更多关于它的方法的介绍。"},"10.标准库/10.1.字符串/10.1.字符串.html#10-1-字符串":{"title":"10.1.&#x5B57;&#x7B26;&#x4E32;","path":"\\10.标准库\\10.1.字符串\\10.1.字符串.html#10-1-字符串","body":"&#x7C7B;&#x578B; : String &#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x5E8F;&#x5217;&#x3002;"},"10.标准库/10.1.字符串/10.1.字符串.html#字符编码":{"title":"&#x5B57;&#x7B26;&#x7F16;&#x7801;","path":"\\10.标准库\\10.1.字符串\\10.1.字符串.html#字符编码","body":"&#x4F7F;&#x7528; .code &#x5C5E;&#x6027;&#x5230;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;&#x5355;&#x5B57;&#x8282;&#xFF0C;&#x53EF;&#x4EE5;&#x7F16;&#x8BD1;&#x5B83;&#x7684;ASCII&#x5B57;&#x8282;&#x7801;&#xFF1A; 1 #.code // will compile as 35 &#x67E5;&#x770B; String API &#x4E86;&#x89E3;&#x66F4;&#x591A;&#x5173;&#x4E8E;&#x5B83;&#x7684;&#x65B9;&#x6CD5;&#x7684;&#x4ECB;&#x7ECD;&#x3002;"},"10.标准库/10.1.字符串/10.1.3.Encoding.html":{"title":"","path":"\\10.标准库\\10.1.字符串\\10.1.3.Encoding.html","body":"10.1.3.Encoding On some targets, the internal representation is UTF-16, which means that non-BMP Unicode codepoints are represented using surrogate pairs. The compile-time define target.utf16 is set when the target uses UTF-16 internally. Null-bytes in strings Some Haxe targets disallow null-bytes (Unicode codepoint 0) in strings. Additionally, some Haxe core APIs assume a null-byte terminates strings. To consistently deal with binary data, including null-bytes, use the haxe.io.Bytes API. Target details Target target.unicode target.utf16 Internal encoding Null-byte allowed Flash yes yes UTF-16 no JavaScript yes yes UTF-16 yes (except in some old browsers) ActionScript 3 yes yes UTF-16 no C++ yes yes ASCII or UTF-16 (if needed) yes Java yes yes UTF-16 yes JVM yes yes UTF-16 yes C# yes yes UTF-16 yes Python yes no Latin-1, UCS-2, or UCS-4 (see PEP 393 ) yes Lua yes no UTF-8 yes PHP yes no binary yes Eval yes no UTF-8 yes Neko no no binary yes HashLink yes yes UTF-16 no"},"10.标准库/10.1.字符串/10.1.3.Encoding.html#10-1-3-Encoding":{"title":"10.1.3.Encoding","path":"\\10.标准库\\10.1.字符串\\10.1.3.Encoding.html#10-1-3-Encoding","body":"On some targets, the internal representation is UTF-16, which means that non-BMP Unicode codepoints are represented using surrogate pairs. The compile-time define target.utf16 is set when the target uses UTF-16 internally. Null-bytes in strings Some Haxe targets disallow null-bytes (Unicode codepoint 0) in strings. Additionally, some Haxe core APIs assume a null-byte terminates strings. To consistently deal with binary data, including null-bytes, use the haxe.io.Bytes API. Target details Target target.unicode target.utf16 Internal encoding Null-byte allowed Flash yes yes UTF-16 no JavaScript yes yes UTF-16 yes (except in some old browsers) ActionScript 3 yes yes UTF-16 no C++ yes yes ASCII or UTF-16 (if needed) yes Java yes yes UTF-16 yes JVM yes yes UTF-16 yes C# yes yes UTF-16 yes Python yes no Latin-1, UCS-2, or UCS-4 (see PEP 393 ) yes Lua yes no UTF-8 yes PHP yes no binary yes Eval yes no UTF-8 yes Neko no no binary yes HashLink yes yes UTF-16 no"},"10.标准库/10.10.Json/10.10.1.解析JSON.html":{"title":"","path":"\\10.标准库\\10.10.Json\\10.10.1.解析JSON.html","body":"10.10.1.解析JSON 使用 haxe.Json.parse 静态方法 来解析 JSON 数据，并从中获取一个 Haxe 值： 1 2 3 4 5 6 7 class Main  static function main ()  var s = '\"rating\": 5' ; var o = haxe.Json.parse(s); trace (o); //  rating: 5    注意，haxe.Json.parse 返回的对象的类型是 Dynamic ，所以如果我们数据的结构如果是已知的，我们可能想要使用匿名结构（第2.5节）指定类型。这个方式我们提供对访问我们的数据的编译时检查，并生成几乎最优的代码，因为编译器了解结构中的类型： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 typedef MyData =  var name: String ; var tags: Array  String ;  class Main  static function main ()  var s = ' \"name\": \"Haxe\", \"tags\": [\"awesome\"] ' ; var o: MyData = haxe.Json.parse(s); trace (o.name); // Haxe (a string) // awesome (a string in an array) trace (o.tags[ 0 ]);  "},"10.标准库/10.10.Json/10.10.1.解析JSON.html#10-10-1-解析JSON":{"title":"10.10.1.&#x89E3;&#x6790;JSON","path":"\\10.标准库\\10.10.Json\\10.10.1.解析JSON.html#10-10-1-解析JSON","body":"&#x4F7F;&#x7528; haxe.Json.parse &#x9759;&#x6001;&#x65B9;&#x6CD5; &#x6765;&#x89E3;&#x6790; JSON &#x6570;&#x636E;&#xFF0C;&#x5E76;&#x4ECE;&#x4E2D;&#x83B7;&#x53D6;&#x4E00;&#x4E2A; Haxe &#x503C;&#xFF1A; 1 2 3 4 5 6 7 class Main { static function main () { var s = &apos;{rating: 5}&apos; ; var o = haxe.Json.parse(s); trace (o); // { rating: 5 } } } &#x6CE8;&#x610F;&#xFF0C;haxe.Json.parse &#x8FD4;&#x56DE;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x7C7B;&#x578B;&#x662F; Dynamic &#xFF0C;&#x6240;&#x4EE5;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x6570;&#x636E;&#x7684;&#x7ED3;&#x6784;&#x5982;&#x679C;&#x662F;&#x5DF2;&#x77E5;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x60F3;&#x8981;&#x4F7F;&#x7528;&#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF08;&#x7B2C;2.5&#x8282;&#xFF09;&#x6307;&#x5B9A;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x4E2A;&#x65B9;&#x5F0F;&#x6211;&#x4EEC;&#x63D0;&#x4F9B;&#x5BF9;&#x8BBF;&#x95EE;&#x6211;&#x4EEC;&#x7684;&#x6570;&#x636E;&#x7684;&#x7F16;&#x8BD1;&#x65F6;&#x68C0;&#x67E5;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x51E0;&#x4E4E;&#x6700;&#x4F18;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x56E0;&#x4E3A;&#x7F16;&#x8BD1;&#x5668;&#x4E86;&#x89E3;&#x7ED3;&#x6784;&#x4E2D;&#x7684;&#x7C7B;&#x578B;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 typedef MyData = { var name: String ; var tags: Array  String ; } class Main { static function main () { var s = &apos;{ name: Haxe, tags: [awesome] }&apos; ; var o: MyData = haxe.Json.parse(s); trace (o.name); // Haxe (a string) // awesome (a string in an array) trace (o.tags[ 0 ]); } }"},"10.标准库/10.10.Json/10.10.2.编码JSON.html":{"title":"","path":"\\10.标准库\\10.10.Json\\10.10.2.编码JSON.html","body":"10.10.2.编码JSON 使用 haxe.Json.stringify 静态方法来编码一个 Haxe 值到 JSON 字符串： 1 2 3 4 5 6 7 class Main  static function main ()  var o = rating: 5 ; var s = haxe.Json.stringify(o); trace (s); // \"rating\":5  "},"10.标准库/10.10.Json/10.10.2.编码JSON.html#10-10-2-编码JSON":{"title":"10.10.2.&#x7F16;&#x7801;JSON","path":"\\10.标准库\\10.10.Json\\10.10.2.编码JSON.html#10-10-2-编码JSON","body":"&#x4F7F;&#x7528; haxe.Json.stringify &#x9759;&#x6001;&#x65B9;&#x6CD5;&#x6765;&#x7F16;&#x7801;&#x4E00;&#x4E2A; Haxe &#x503C;&#x5230; JSON &#x5B57;&#x7B26;&#x4E32;&#xFF1A; 1 2 3 4 5 6 7 class Main { static function main () { var o = {rating: 5 }; var s = haxe.Json.stringify(o); trace (s); // {rating:5} } }"},"10.标准库/10.10.Json/10.10.3.实现细节.html":{"title":"","path":"\\10.标准库\\10.10.Json\\10.10.3.实现细节.html","body":"10.10.3.实现细节 haxe.Json API 自动使用原生的实现在它可用的目标平台，即 JavaScript ，Flash 和PHP ，并对其它的目标平台提供它们自己的实现。 Haxe自身实现的用法可以强制使用 -D haxeJSON 编译器标记开启。这也提供通过索引、字符串类型键的map（第10.2.5节）和类实例序列化枚举（第2.4节）。 旧版的浏览器（例如IE7）可能没有原生的 JSON 实现。如果需要支持它们，我们可以在HTML页面包含一个在互联网上的可用的JSON实现。另外 ，一个 -D old_browser 编译器标记可以使 haxe.Json尝试使用原生 JSON，如果不被支持，则回退到它自己的实现。"},"10.标准库/10.10.Json/10.10.3.实现细节.html#10-10-3-实现细节":{"title":"10.10.3.&#x5B9E;&#x73B0;&#x7EC6;&#x8282;","path":"\\10.标准库\\10.10.Json\\10.10.3.实现细节.html#10-10-3-实现细节","body":"haxe.Json API &#x81EA;&#x52A8;&#x4F7F;&#x7528;&#x539F;&#x751F;&#x7684;&#x5B9E;&#x73B0;&#x5728;&#x5B83;&#x53EF;&#x7528;&#x7684;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#xFF0C;&#x5373; JavaScript &#xFF0C;Flash &#x548C;PHP &#xFF0C;&#x5E76;&#x5BF9;&#x5176;&#x5B83;&#x7684;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x63D0;&#x4F9B;&#x5B83;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;&#x5B9E;&#x73B0;&#x3002; Haxe&#x81EA;&#x8EAB;&#x5B9E;&#x73B0;&#x7684;&#x7528;&#x6CD5;&#x53EF;&#x4EE5;&#x5F3A;&#x5236;&#x4F7F;&#x7528; -D haxeJSON &#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#x5F00;&#x542F;&#x3002;&#x8FD9;&#x4E5F;&#x63D0;&#x4F9B;&#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x3001;&#x5B57;&#x7B26;&#x4E32;&#x7C7B;&#x578B;&#x952E;&#x7684;map&#xFF08;&#x7B2C;10.2.5&#x8282;&#xFF09;&#x548C;&#x7C7B;&#x5B9E;&#x4F8B;&#x5E8F;&#x5217;&#x5316;&#x679A;&#x4E3E;&#xFF08;&#x7B2C;2.4&#x8282;&#xFF09;&#x3002; &#x65E7;&#x7248;&#x7684;&#x6D4F;&#x89C8;&#x5668;&#xFF08;&#x4F8B;&#x5982;IE7&#xFF09;&#x53EF;&#x80FD;&#x6CA1;&#x6709;&#x539F;&#x751F;&#x7684; JSON &#x5B9E;&#x73B0;&#x3002;&#x5982;&#x679C;&#x9700;&#x8981;&#x652F;&#x6301;&#x5B83;&#x4EEC;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5728;HTML&#x9875;&#x9762;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x5728;&#x4E92;&#x8054;&#x7F51;&#x4E0A;&#x7684;&#x53EF;&#x7528;&#x7684;JSON&#x5B9E;&#x73B0;&#x3002;&#x53E6;&#x5916; &#xFF0C;&#x4E00;&#x4E2A; -D old_browser &#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#x53EF;&#x4EE5;&#x4F7F; haxe.Json&#x5C1D;&#x8BD5;&#x4F7F;&#x7528;&#x539F;&#x751F; JSON&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x88AB;&#x652F;&#x6301;&#xFF0C;&#x5219;&#x56DE;&#x9000;&#x5230;&#x5B83;&#x81EA;&#x5DF1;&#x7684;&#x5B9E;&#x73B0;&#x3002;"},"10.标准库/10.10.Json/10.10.Json.html":{"title":"","path":"\\10.标准库\\10.10.Json\\10.10.Json.html","body":"10.10.Json Haxe 通过 haxe.Json 类内置支持（反）序列化 JSON 数据。"},"10.标准库/10.10.Json/10.10.Json.html#10-10-Json":{"title":"10.10.Json","path":"\\10.标准库\\10.10.Json\\10.10.Json.html#10-10-Json","body":"Haxe &#x901A;&#x8FC7; haxe.Json &#x7C7B;&#x5185;&#x7F6E;&#x652F;&#x6301;&#xFF08;&#x53CD;&#xFF09;&#x5E8F;&#x5217;&#x5316; JSON &#x6570;&#x636E;&#x3002;"},"10.标准库/10.12.Sys/10.12.1.Threading.html":{"title":"","path":"\\10.标准库\\10.12.Sys\\10.12.1.Threading.html","body":"10.12.1.Threading since Haxe 4.0.0 A unified threading API is available on some sys targets. The compile-time define target.threaded is set when the API is available. The API allows very simple creation of threads from functions: 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main  public static function main (): Void  # if (target.threaded) sys.thread.Thread.create(() -  while ( true )  trace ( \"other thread\" ); Sys.sleep( 1 );  ); Sys.sleep( 3 ); # end   All spawned threads are treated as daemon threads, meaning that the main thread will not wait for their completion. Due to threads having access to a shared memory space with all the Haxe variables and objects, it is possible to run into issues due to deadlocks and race conditions. The standard library provides some core synchronization constructs in the sys.thread package."},"10.标准库/10.12.Sys/10.12.1.Threading.html#10-12-1-Threading":{"title":"10.12.1.Threading","path":"\\10.标准库\\10.12.Sys\\10.12.1.Threading.html#10-12-1-Threading","body":"since Haxe 4.0.0 A unified threading API is available on some sys targets. The compile-time define target.threaded is set when the API is available. The API allows very simple creation of threads from functions: 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main { public static function main (): Void { # if (target.threaded) sys.thread.Thread.create(() - { while ( true ) { trace ( other thread ); Sys.sleep( 1 ); } }); Sys.sleep( 3 ); # end } } All spawned threads are treated as daemon threads, meaning that the main thread will not wait for their completion. Due to threads having access to a shared memory space with all the Haxe variables and objects, it is possible to run into issues due to deadlocks and race conditions. The standard library provides some core synchronization constructs in the sys.thread package."},"10.标准库/10.11.InputOutput/10.11.InputOutput.html":{"title":"","path":"\\10.标准库\\10.11.InputOutput\\10.11.InputOutput.html","body":"10.11.Input/Output 官方文档暂缺。"},"10.标准库/10.11.InputOutput/10.11.InputOutput.html#10-11-Input-Output":{"title":"10.11.Input/Output","path":"\\10.标准库\\10.11.InputOutput\\10.11.InputOutput.html#10-11-Input-Output","body":"&#x5B98;&#x65B9;&#x6587;&#x6863;&#x6682;&#x7F3A;&#x3002;"},"10.标准库/10.12.Sys/10.12.Sys.html":{"title":"","path":"\\10.标准库\\10.12.Sys\\10.12.Sys.html","body":"10.12.Sys The majority of Haxe targets are so-called “sys” targets. This means the targets have access to system APIs such as the filesystem, networking, threads, and more. The only non-sys targets supported by Haxe are Flash, JavaScript, and ActionScript 3, although JavaScript can support sys APIs when running under Node.js runtime. Related content See the sys package on the API documentation for more details on its classes."},"10.标准库/10.12.Sys/10.12.Sys.html#10-12-Sys":{"title":"10.12.Sys","path":"\\10.标准库\\10.12.Sys\\10.12.Sys.html#10-12-Sys","body":"The majority of Haxe targets are so-called &#x201C;sys&#x201D; targets. This means the targets have access to system APIs such as the filesystem, networking, threads, and more. The only non-sys targets supported by Haxe are Flash, JavaScript, and ActionScript 3, although JavaScript can support sys APIs when running under Node.js runtime. Related content See the sys package on the API documentation for more details on its classes."},"10.标准库/10.13.远程处理/10.13.1.远程连接.html":{"title":"","path":"\\10.标准库\\10.13.远程处理\\10.13.1.远程连接.html","body":"10.13.1.远程连接 为了使用 remoting ，必须有一个连接建立。有两种Haxe 远程连接： haxe.remoting.Connection 是用于同步连接，调用一个方法时结果可以直接获得。 haxe.remoting.AsyncConnection 用于异步连接，结果是在执行过程中之后发生的事件。 启动一个连接 有一些目标平台特定的构造函数用于不同的目的，可以用来设置一个连接： 所有目标平台 HttpAsyncConnection.urlConnect(url:String) ： 返回一个到指定URL的异步连接，可以连接到一个Haxe服务端应用。 Flash ExternalConnection.jsConnect(name:STRING, ctx:Context) ： 允许一个到本地JavaScript Haxe 代码的连接。JS Haxe代码必须被包含 ExternalConnection 类进行编译。这只适用于Flash Player 8 和更高版本。 AMFConnection.urlConnect(url:String) 和 AMFConnection.connect(cnx: NetConnection) ： 允许到一个 AMF远程服务器 （如 Flash 媒体服务器 或者 AMFPHP ）的连接。 SocketConnection.create(sock:flash.XMLSocket) ： 允许在XMLSocket上进行远程通讯。 LocalConnection.connect(name:String) ： 允许在Flash LocalConnection上进行远程通讯。 JavaScript ExternalConnection.flashConnect(name:String, obj:String, ctx:Context) 允许连接到一个指定的Flash对象。Haxe Flash内容必须被加载，并且它必须包含 haxe.remoting.Connection 类。只用于Flash8 或更高版本。 Neko HttpConnection.urlConnect(url:String) 像异步版本一样使用，但是在同步模式下工作。 SocketConnection.create(…) 允许实时和一个使用一个XML Socket来连接服务的Flash客户端通讯。 远程上下文 在平台之间通讯之前，一个远程处理的上下文必须被定义。这是一个可以被客户端代码的连接上调用的共享的API。 这个服务代码示例创建和共享一个API ： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Server  function new ()   function foo (x, y)  return x + y;  static function main ()  var ctx = new haxe .remoting.Context(); ctx.addObject( \"Server\" , new Server ()); if (haxe.remoting.HttpConnection.handleRequest(ctx))  return ;  // handle normal request trace ( \"This is a remoting server !\" );   使用连接 连接使用起来非常方便。一旦连接被获得，使用经典的点语法来屏幕一个路径，然后使用 call() 调用远程上下文中的方法，并获得结果。异步连接接受一个附加的函数参数，在结果获得之后被调用。 客户端代码示例连接到服务端远程上下文并调用这个API上的一个函数 foo()。 1 2 3 4 5 6 7 class Client  static function main ()  var cnx = haxe.remoting.HttpAsyncConnection.urlConnect( \"http://localhost/\" ); cnx.setErrorHandler( function (err) trace ( 'Error: $err');  ); cnx.Server.foo.call([1,2], function(data) trace(' Result: $data '););   要使它用于Neko目标平台，设置一个Neko Web 服务器，指向Client中的url到 “ http://localhost:2000/remoting.n” ，并使用 -main Server -neko remoting.n 编译 Server 。 错误处理 当在异步调用中发生一个错误，就像上面例子中看到的，错误处理程序将被调用。 当在同步调用中发生一个错误，在访客端一个异常被抛出，就像我们调用一个本地方法。 数据序列化 Haxe 远程处理可以发送多种不同种类的数据。查看 序列化（第10.8节）。 查看API文档中的 remoting 包 详细了解它的类。"},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#10-13-1-远程连接":{"title":"10.13.1.&#x8FDC;&#x7A0B;&#x8FDE;&#x63A5;","path":"\\10.标准库\\10.13.远程处理\\10.13.1.远程连接.html#10-13-1-远程连接","body":"&#x4E3A;&#x4E86;&#x4F7F;&#x7528; remoting &#xFF0C;&#x5FC5;&#x987B;&#x6709;&#x4E00;&#x4E2A;&#x8FDE;&#x63A5;&#x5EFA;&#x7ACB;&#x3002;&#x6709;&#x4E24;&#x79CD;Haxe &#x8FDC;&#x7A0B;&#x8FDE;&#x63A5;&#xFF1A; haxe.remoting.Connection &#x662F;&#x7528;&#x4E8E;&#x540C;&#x6B65;&#x8FDE;&#x63A5;&#xFF0C;&#x8C03;&#x7528;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x65F6;&#x7ED3;&#x679C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x83B7;&#x5F97;&#x3002; haxe.remoting.AsyncConnection &#x7528;&#x4E8E;&#x5F02;&#x6B65;&#x8FDE;&#x63A5;&#xFF0C;&#x7ED3;&#x679C;&#x662F;&#x5728;&#x6267;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E4B;&#x540E;&#x53D1;&#x751F;&#x7684;&#x4E8B;&#x4EF6;&#x3002;"},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#启动一个连接":{"title":"&#x542F;&#x52A8;&#x4E00;&#x4E2A;&#x8FDE;&#x63A5;","path":"\\10.标准库\\10.13.远程处理\\10.13.1.远程连接.html#启动一个连接","body":"&#x6709;&#x4E00;&#x4E9B;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x7279;&#x5B9A;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x7528;&#x4E8E;&#x4E0D;&#x540C;&#x7684;&#x76EE;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x8FDE;&#x63A5;&#xFF1A; &#x6240;&#x6709;&#x76EE;&#x6807;&#x5E73;&#x53F0; HttpAsyncConnection.urlConnect(url:String) &#xFF1A; &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5230;&#x6307;&#x5B9A;URL&#x7684;&#x5F02;&#x6B65;&#x8FDE;&#x63A5;&#xFF0C;&#x53EF;&#x4EE5;&#x8FDE;&#x63A5;&#x5230;&#x4E00;&#x4E2A;Haxe&#x670D;&#x52A1;&#x7AEF;&#x5E94;&#x7528;&#x3002; Flash ExternalConnection.jsConnect(name:STRING, ctx:Context) &#xFF1A; &#x5141;&#x8BB8;&#x4E00;&#x4E2A;&#x5230;&#x672C;&#x5730;JavaScript Haxe &#x4EE3;&#x7801;&#x7684;&#x8FDE;&#x63A5;&#x3002;JS Haxe&#x4EE3;&#x7801;&#x5FC5;&#x987B;&#x88AB;&#x5305;&#x542B; ExternalConnection &#x7C7B;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#x3002;&#x8FD9;&#x53EA;&#x9002;&#x7528;&#x4E8E;Flash Player 8 &#x548C;&#x66F4;&#x9AD8;&#x7248;&#x672C;&#x3002; AMFConnection.urlConnect(url:String) &#x548C; AMFConnection.connect(cnx: NetConnection) &#xFF1A; &#x5141;&#x8BB8;&#x5230;&#x4E00;&#x4E2A; AMF&#x8FDC;&#x7A0B;&#x670D;&#x52A1;&#x5668; &#xFF08;&#x5982; Flash &#x5A92;&#x4F53;&#x670D;&#x52A1;&#x5668; &#x6216;&#x8005; AMFPHP &#xFF09;&#x7684;&#x8FDE;&#x63A5;&#x3002; SocketConnection.create(sock:flash.XMLSocket) &#xFF1A; &#x5141;&#x8BB8;&#x5728;XMLSocket&#x4E0A;&#x8FDB;&#x884C;&#x8FDC;&#x7A0B;&#x901A;&#x8BAF;&#x3002; LocalConnection.connect(name:String) &#xFF1A; &#x5141;&#x8BB8;&#x5728;Flash LocalConnection&#x4E0A;&#x8FDB;&#x884C;&#x8FDC;&#x7A0B;&#x901A;&#x8BAF;&#x3002; JavaScript ExternalConnection.flashConnect(name:String, obj:String, ctx:Context) &#x5141;&#x8BB8;&#x8FDE;&#x63A5;&#x5230;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7684;Flash&#x5BF9;&#x8C61;&#x3002;Haxe Flash&#x5185;&#x5BB9;&#x5FC5;&#x987B;&#x88AB;&#x52A0;&#x8F7D;&#xFF0C;&#x5E76;&#x4E14;&#x5B83;&#x5FC5;&#x987B;&#x5305;&#x542B; haxe.remoting.Connection &#x7C7B;&#x3002;&#x53EA;&#x7528;&#x4E8E;Flash8 &#x6216;&#x66F4;&#x9AD8;&#x7248;&#x672C;&#x3002; Neko HttpConnection.urlConnect(url:String) &#x50CF;&#x5F02;&#x6B65;&#x7248;&#x672C;&#x4E00;&#x6837;&#x4F7F;&#x7528;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x540C;&#x6B65;&#x6A21;&#x5F0F;&#x4E0B;&#x5DE5;&#x4F5C;&#x3002; SocketConnection.create(&#x2026;) &#x5141;&#x8BB8;&#x5B9E;&#x65F6;&#x548C;&#x4E00;&#x4E2A;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;XML Socket&#x6765;&#x8FDE;&#x63A5;&#x670D;&#x52A1;&#x7684;Flash&#x5BA2;&#x6237;&#x7AEF;&#x901A;&#x8BAF;&#x3002;"},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#远程上下文":{"title":"&#x8FDC;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;","path":"\\10.标准库\\10.13.远程处理\\10.13.1.远程连接.html#远程上下文","body":"&#x5728;&#x5E73;&#x53F0;&#x4E4B;&#x95F4;&#x901A;&#x8BAF;&#x4E4B;&#x524D;&#xFF0C;&#x4E00;&#x4E2A;&#x8FDC;&#x7A0B;&#x5904;&#x7406;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x5FC5;&#x987B;&#x88AB;&#x5B9A;&#x4E49;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x88AB;&#x5BA2;&#x6237;&#x7AEF;&#x4EE3;&#x7801;&#x7684;&#x8FDE;&#x63A5;&#x4E0A;&#x8C03;&#x7528;&#x7684;&#x5171;&#x4EAB;&#x7684;API&#x3002; &#x8FD9;&#x4E2A;&#x670D;&#x52A1;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x521B;&#x5EFA;&#x548C;&#x5171;&#x4EAB;&#x4E00;&#x4E2A;API &#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Server { function new () { } function foo (x, y) { return x + y; } static function main () { var ctx = new haxe .remoting.Context(); ctx.addObject( Server , new Server ()); if (haxe.remoting.HttpConnection.handleRequest(ctx)) { return ; } // handle normal request trace ( This is a remoting server ! ); } }"},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#使用连接":{"title":"&#x4F7F;&#x7528;&#x8FDE;&#x63A5;","path":"\\10.标准库\\10.13.远程处理\\10.13.1.远程连接.html#使用连接","body":"&#x8FDE;&#x63A5;&#x4F7F;&#x7528;&#x8D77;&#x6765;&#x975E;&#x5E38;&#x65B9;&#x4FBF;&#x3002;&#x4E00;&#x65E6;&#x8FDE;&#x63A5;&#x88AB;&#x83B7;&#x5F97;&#xFF0C;&#x4F7F;&#x7528;&#x7ECF;&#x5178;&#x7684;&#x70B9;&#x8BED;&#x6CD5;&#x6765;&#x5C4F;&#x5E55;&#x4E00;&#x4E2A;&#x8DEF;&#x5F84;&#xFF0C;&#x7136;&#x540E;&#x4F7F;&#x7528; call() &#x8C03;&#x7528;&#x8FDC;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5E76;&#x83B7;&#x5F97;&#x7ED3;&#x679C;&#x3002;&#x5F02;&#x6B65;&#x8FDE;&#x63A5;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x9644;&#x52A0;&#x7684;&#x51FD;&#x6570;&#x53C2;&#x6570;&#xFF0C;&#x5728;&#x7ED3;&#x679C;&#x83B7;&#x5F97;&#x4E4B;&#x540E;&#x88AB;&#x8C03;&#x7528;&#x3002; &#x5BA2;&#x6237;&#x7AEF;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x8FDE;&#x63A5;&#x5230;&#x670D;&#x52A1;&#x7AEF;&#x8FDC;&#x7A0B;&#x4E0A;&#x4E0B;&#x6587;&#x5E76;&#x8C03;&#x7528;&#x8FD9;&#x4E2A;API&#x4E0A;&#x7684;&#x4E00;&#x4E2A;&#x51FD;&#x6570; foo()&#x3002; 1 2 3 4 5 6 7 class Client { static function main () { var cnx = haxe.remoting.HttpAsyncConnection.urlConnect( http://localhost/ ); cnx.setErrorHandler( function (err) trace ( &apos;Error: $err&apos;); } ); cnx.Server.foo.call([1,2], function(data) trace(&apos; Result: $data &apos;);); } } &#x8981;&#x4F7F;&#x5B83;&#x7528;&#x4E8E;Neko&#x76EE;&#x6807;&#x5E73;&#x53F0;&#xFF0C;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;Neko Web &#x670D;&#x52A1;&#x5668;&#xFF0C;&#x6307;&#x5411;Client&#x4E2D;&#x7684;url&#x5230; &#x201C; http://localhost:2000/remoting.n&#x201D; &#xFF0C;&#x5E76;&#x4F7F;&#x7528; -main Server -neko remoting.n &#x7F16;&#x8BD1; Server &#x3002;"},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#错误处理":{"title":"&#x9519;&#x8BEF;&#x5904;&#x7406;","path":"\\10.标准库\\10.13.远程处理\\10.13.1.远程连接.html#错误处理","body":"&#x5F53;&#x5728;&#x5F02;&#x6B65;&#x8C03;&#x7528;&#x4E2D;&#x53D1;&#x751F;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#xFF0C;&#x5C31;&#x50CF;&#x4E0A;&#x9762;&#x4F8B;&#x5B50;&#x4E2D;&#x770B;&#x5230;&#x7684;&#xFF0C;&#x9519;&#x8BEF;&#x5904;&#x7406;&#x7A0B;&#x5E8F;&#x5C06;&#x88AB;&#x8C03;&#x7528;&#x3002; &#x5F53;&#x5728;&#x540C;&#x6B65;&#x8C03;&#x7528;&#x4E2D;&#x53D1;&#x751F;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#xFF0C;&#x5728;&#x8BBF;&#x5BA2;&#x7AEF;&#x4E00;&#x4E2A;&#x5F02;&#x5E38;&#x88AB;&#x629B;&#x51FA;&#xFF0C;&#x5C31;&#x50CF;&#x6211;&#x4EEC;&#x8C03;&#x7528;&#x4E00;&#x4E2A;&#x672C;&#x5730;&#x65B9;&#x6CD5;&#x3002;"},"10.标准库/10.13.远程处理/10.13.1.远程连接.html#数据序列化":{"title":"&#x6570;&#x636E;&#x5E8F;&#x5217;&#x5316;","path":"\\10.标准库\\10.13.远程处理\\10.13.1.远程连接.html#数据序列化","body":"Haxe &#x8FDC;&#x7A0B;&#x5904;&#x7406;&#x53EF;&#x4EE5;&#x53D1;&#x9001;&#x591A;&#x79CD;&#x4E0D;&#x540C;&#x79CD;&#x7C7B;&#x7684;&#x6570;&#x636E;&#x3002;&#x67E5;&#x770B; &#x5E8F;&#x5217;&#x5316;&#xFF08;&#x7B2C;10.8&#x8282;&#xFF09;&#x3002; &#x67E5;&#x770B;API&#x6587;&#x6863;&#x4E2D;&#x7684; remoting &#x5305; &#x8BE6;&#x7EC6;&#x4E86;&#x89E3;&#x5B83;&#x7684;&#x7C7B;&#x3002;"},"10.标准库/10.13.远程处理/10.13.远程处理.html":{"title":"","path":"\\10.标准库\\10.13.远程处理\\10.13.远程处理.html","body":"10.13.远程处理 Haxe 远程处理是一个在不同平台之间通讯的方式。通过Haxe的远程处理，应用可以透明的传送数据，发送数据，和在服务端/客户端之间调用方法。 在API 文档中查看 remoting 包了解它的类的更多细节。"},"10.标准库/10.13.远程处理/10.13.远程处理.html#10-13-远程处理":{"title":"10.13.&#x8FDC;&#x7A0B;&#x5904;&#x7406;","path":"\\10.标准库\\10.13.远程处理\\10.13.远程处理.html#10-13-远程处理","body":"Haxe &#x8FDC;&#x7A0B;&#x5904;&#x7406;&#x662F;&#x4E00;&#x4E2A;&#x5728;&#x4E0D;&#x540C;&#x5E73;&#x53F0;&#x4E4B;&#x95F4;&#x901A;&#x8BAF;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x901A;&#x8FC7;Haxe&#x7684;&#x8FDC;&#x7A0B;&#x5904;&#x7406;&#xFF0C;&#x5E94;&#x7528;&#x53EF;&#x4EE5;&#x900F;&#x660E;&#x7684;&#x4F20;&#x9001;&#x6570;&#x636E;&#xFF0C;&#x53D1;&#x9001;&#x6570;&#x636E;&#xFF0C;&#x548C;&#x5728;&#x670D;&#x52A1;&#x7AEF;/&#x5BA2;&#x6237;&#x7AEF;&#x4E4B;&#x95F4;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x3002; &#x5728;API &#x6587;&#x6863;&#x4E2D;&#x67E5;&#x770B; remoting &#x5305;&#x4E86;&#x89E3;&#x5B83;&#x7684;&#x7C7B;&#x7684;&#x66F4;&#x591A;&#x7EC6;&#x8282;&#x3002;"},"10.标准库/10.13.远程处理/10.13.2.实现细节.html":{"title":"","path":"\\10.标准库\\10.13.远程处理\\10.13.2.实现细节.html","body":"10.13.2.实现细节 JavaScript 安全细节 包含js客户端的html页面必须在跟服务器运行的同样的域名下提供服务。同源策略限制一个源上的一个文档或脚本如何和另一个源上的资源交互。同源策略作为一种手段来防止一些跨站点请求伪造攻击。 要跨域使用remoting，需要通过在 .htaccess 中定义头 X-Haxe-Remotinig 来启用CORS（cross-origin资源共享）。 1 2 3 4 # Enable CORS Header set Access-Control-Allow-Origin * Header set Access-Control-Allow-Methods: GET,POST,OPTIONS,DELETE,PUT Header set Access-Control-Allow-Headers: X-Haxe-Remoting 查看 同源策略 了解更多这个话题的信息。 也要注意，这意味着页面不能被从文件系统直接提供服务： 1 file:///C:/example/path/index.html Flash安全细节 当 Flash 访问一个不同域名的服务器，设置服务器上一个 crossdomain.xml 文件，使用 X-Haxe 头。 1 2 3 4  cross-domain-policy   allow-access-from domain = \"*\" / !-- or the appropriate domains --  allow-http-request-headers-from domain = \"*\" headers = \"X-Haxe*\" / / cross-domain-policy  不确保参数类型 关于在一个方法被远程调用时参数类型会被遵守，没有任何种类的保证。也就是说即使函数foo的参数类型化为 Int，客户端仍然可以在调用方法时使用字符串作为参数。这可以导致一些情况下的安全问题。当不确定时，在函数被调用使用 Std.is 方法检查参数类型。"},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#10-13-2-实现细节":{"title":"10.13.2.&#x5B9E;&#x73B0;&#x7EC6;&#x8282;","path":"\\10.标准库\\10.13.远程处理\\10.13.2.实现细节.html#10-13-2-实现细节","body":""},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#JavaScript-安全细节":{"title":"JavaScript &#x5B89;&#x5168;&#x7EC6;&#x8282;","path":"\\10.标准库\\10.13.远程处理\\10.13.2.实现细节.html#JavaScript-安全细节","body":"&#x5305;&#x542B;js&#x5BA2;&#x6237;&#x7AEF;&#x7684;html&#x9875;&#x9762;&#x5FC5;&#x987B;&#x5728;&#x8DDF;&#x670D;&#x52A1;&#x5668;&#x8FD0;&#x884C;&#x7684;&#x540C;&#x6837;&#x7684;&#x57DF;&#x540D;&#x4E0B;&#x63D0;&#x4F9B;&#x670D;&#x52A1;&#x3002;&#x540C;&#x6E90;&#x7B56;&#x7565;&#x9650;&#x5236;&#x4E00;&#x4E2A;&#x6E90;&#x4E0A;&#x7684;&#x4E00;&#x4E2A;&#x6587;&#x6863;&#x6216;&#x811A;&#x672C;&#x5982;&#x4F55;&#x548C;&#x53E6;&#x4E00;&#x4E2A;&#x6E90;&#x4E0A;&#x7684;&#x8D44;&#x6E90;&#x4EA4;&#x4E92;&#x3002;&#x540C;&#x6E90;&#x7B56;&#x7565;&#x4F5C;&#x4E3A;&#x4E00;&#x79CD;&#x624B;&#x6BB5;&#x6765;&#x9632;&#x6B62;&#x4E00;&#x4E9B;&#x8DE8;&#x7AD9;&#x70B9;&#x8BF7;&#x6C42;&#x4F2A;&#x9020;&#x653B;&#x51FB;&#x3002; &#x8981;&#x8DE8;&#x57DF;&#x4F7F;&#x7528;remoting&#xFF0C;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x5728; .htaccess &#x4E2D;&#x5B9A;&#x4E49;&#x5934; X-Haxe-Remotinig &#x6765;&#x542F;&#x7528;CORS&#xFF08;cross-origin&#x8D44;&#x6E90;&#x5171;&#x4EAB;&#xFF09;&#x3002; 1 2 3 4 # Enable CORS Header set Access-Control-Allow-Origin * Header set Access-Control-Allow-Methods: GET,POST,OPTIONS,DELETE,PUT Header set Access-Control-Allow-Headers: X-Haxe-Remoting &#x67E5;&#x770B; &#x540C;&#x6E90;&#x7B56;&#x7565; &#x4E86;&#x89E3;&#x66F4;&#x591A;&#x8FD9;&#x4E2A;&#x8BDD;&#x9898;&#x7684;&#x4FE1;&#x606F;&#x3002; &#x4E5F;&#x8981;&#x6CE8;&#x610F;&#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x9875;&#x9762;&#x4E0D;&#x80FD;&#x88AB;&#x4ECE;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x76F4;&#x63A5;&#x63D0;&#x4F9B;&#x670D;&#x52A1;&#xFF1A; 1 file:///C:/example/path/index.html"},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#Flash安全细节":{"title":"Flash&#x5B89;&#x5168;&#x7EC6;&#x8282;","path":"\\10.标准库\\10.13.远程处理\\10.13.2.实现细节.html#Flash安全细节","body":"&#x5F53; Flash &#x8BBF;&#x95EE;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x57DF;&#x540D;&#x7684;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x8BBE;&#x7F6E;&#x670D;&#x52A1;&#x5668;&#x4E0A;&#x4E00;&#x4E2A; crossdomain.xml &#x6587;&#x4EF6;&#xFF0C;&#x4F7F;&#x7528; X-Haxe &#x5934;&#x3002; 1 2 3 4  cross-domain-policy   allow-access-from domain = * / !-- or the appropriate domains --  allow-http-request-headers-from domain = * headers = X-Haxe* / / cross-domain-policy "},"10.标准库/10.13.远程处理/10.13.2.实现细节.html#不确保参数类型":{"title":"&#x4E0D;&#x786E;&#x4FDD;&#x53C2;&#x6570;&#x7C7B;&#x578B;","path":"\\10.标准库\\10.13.远程处理\\10.13.2.实现细节.html#不确保参数类型","body":"&#x5173;&#x4E8E;&#x5728;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x88AB;&#x8FDC;&#x7A0B;&#x8C03;&#x7528;&#x65F6;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x4F1A;&#x88AB;&#x9075;&#x5B88;&#xFF0C;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x79CD;&#x7C7B;&#x7684;&#x4FDD;&#x8BC1;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5373;&#x4F7F;&#x51FD;&#x6570;foo&#x7684;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x5316;&#x4E3A; Int&#xFF0C;&#x5BA2;&#x6237;&#x7AEF;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x5728;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x65F6;&#x4F7F;&#x7528;&#x5B57;&#x7B26;&#x4E32;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x5BFC;&#x81F4;&#x4E00;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#x7684;&#x5B89;&#x5168;&#x95EE;&#x9898;&#x3002;&#x5F53;&#x4E0D;&#x786E;&#x5B9A;&#x65F6;&#xFF0C;&#x5728;&#x51FD;&#x6570;&#x88AB;&#x8C03;&#x7528;&#x4F7F;&#x7528; Std.is &#x65B9;&#x6CD5;&#x68C0;&#x67E5;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x3002;"},"10.标准库/10.14.单元测试/10.14.单元测试.html":{"title":"","path":"\\10.标准库\\10.14.单元测试\\10.14.单元测试.html","body":"10.14.单元测试 Haxe标准库在 haxe.unit 包中提供基础的单元测试类。 创建新的测试用例 首先，创建一个新的类，继承自 haxe.unit.TestCase ，并添加自己的测试方法。每个测试方法名字都是由 “test”开始。 1 2 3 4 5 class MyTestCase extends haxe . unit . TestCase  public function testBasic ()  assertEquals( \"A\" , \"A\" );   运行单元测试 要运行测试， haxe.unit.TestRunner 的一个实例必须被创建。使用 add 方法添加 TestCase ，并调用 run 开始测试。 1 2 3 4 5 6 7 8 9 10 class Main  static function main ()  var r = new haxe .unit.TestRunner(); r.add( new MyTestCase ()); // add other TestCases here // finally, run the tests r.run();   测试的结果大致如下： 1 2 3 Class: MyTestCase . OK 1 tests, 0 failed, 1 success 测试函数 haxe.unit.TestCase 类有三个测试函数。 assertEquals(a,b) 如果a和b相等则成功，a是测试的值，b是期望的值。 assertTrue(a) 如果a为 true 则成功。 assertFalse(a) 如果a 为 false 则成功。 安装和拆卸 要在测试之前或之后运行代码，可以重载TestCase 中的 setup 和 tearDown 。 setup 在每个测试运行之前调用。 tearDown 在每个测试运行之后调用。 1 2 3 4 5 6 7 8 9 10 11 class MyTestCase extends haxe . unit . TestCase  var value: String ; override public function setup ()  value = \"foo\" ;  public function testSetup ()  assertEquals( \"foo\" , value);   比较复杂对象 使用复杂对象，可能难于生成预期的值来比较实际值。assertEquals 不做深度的对比也可能是一个问题。解决这些问题的一个方法是使用一个字符串作为预期的值，并对比它和使用 Std.string 转换为字符串的实际值 。下面是使用数组的一个简单示例： 1 2 3 4 public function testArray ()  var actual = [ 1 , 2 , 3 ]; assertEquals( \"[1, 2, 3]\" , Std.string(actual));  在API文档中查看 haxe.unit 包了解更多细节。"},"10.标准库/10.14.单元测试/10.14.单元测试.html#10-14-单元测试":{"title":"10.14.&#x5355;&#x5143;&#x6D4B;&#x8BD5;","path":"\\10.标准库\\10.14.单元测试\\10.14.单元测试.html#10-14-单元测试","body":"Haxe&#x6807;&#x51C6;&#x5E93;&#x5728; haxe.unit &#x5305;&#x4E2D;&#x63D0;&#x4F9B;&#x57FA;&#x7840;&#x7684;&#x5355;&#x5143;&#x6D4B;&#x8BD5;&#x7C7B;&#x3002;"},"10.标准库/10.14.单元测试/10.14.单元测试.html#创建新的测试用例":{"title":"&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;","path":"\\10.标准库\\10.14.单元测试\\10.14.单元测试.html#创建新的测试用例","body":"&#x9996;&#x5148;&#xFF0C;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7C7B;&#xFF0C;&#x7EE7;&#x627F;&#x81EA; haxe.unit.TestCase &#xFF0C;&#x5E76;&#x6DFB;&#x52A0;&#x81EA;&#x5DF1;&#x7684;&#x6D4B;&#x8BD5;&#x65B9;&#x6CD5;&#x3002;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x65B9;&#x6CD5;&#x540D;&#x5B57;&#x90FD;&#x662F;&#x7531; &#x201C;test&#x201D;&#x5F00;&#x59CB;&#x3002; 1 2 3 4 5 class MyTestCase extends haxe . unit . TestCase { public function testBasic () { assertEquals( A , A ); } }"},"10.标准库/10.14.单元测试/10.14.单元测试.html#运行单元测试":{"title":"&#x8FD0;&#x884C;&#x5355;&#x5143;&#x6D4B;&#x8BD5;","path":"\\10.标准库\\10.14.单元测试\\10.14.单元测试.html#运行单元测试","body":"&#x8981;&#x8FD0;&#x884C;&#x6D4B;&#x8BD5;&#xFF0C; haxe.unit.TestRunner &#x7684;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;&#x5FC5;&#x987B;&#x88AB;&#x521B;&#x5EFA;&#x3002;&#x4F7F;&#x7528; add &#x65B9;&#x6CD5;&#x6DFB;&#x52A0; TestCase &#xFF0C;&#x5E76;&#x8C03;&#x7528; run &#x5F00;&#x59CB;&#x6D4B;&#x8BD5;&#x3002; 1 2 3 4 5 6 7 8 9 10 class Main { static function main () { var r = new haxe .unit.TestRunner(); r.add( new MyTestCase ()); // add other TestCases here // finally, run the tests r.run(); } } &#x6D4B;&#x8BD5;&#x7684;&#x7ED3;&#x679C;&#x5927;&#x81F4;&#x5982;&#x4E0B;&#xFF1A; 1 2 3 Class: MyTestCase . OK 1 tests, 0 failed, 1 success"},"10.标准库/10.14.单元测试/10.14.单元测试.html#测试函数":{"title":"&#x6D4B;&#x8BD5;&#x51FD;&#x6570;","path":"\\10.标准库\\10.14.单元测试\\10.14.单元测试.html#测试函数","body":"haxe.unit.TestCase &#x7C7B;&#x6709;&#x4E09;&#x4E2A;&#x6D4B;&#x8BD5;&#x51FD;&#x6570;&#x3002; assertEquals(a,b) &#x5982;&#x679C;a&#x548C;b&#x76F8;&#x7B49;&#x5219;&#x6210;&#x529F;&#xFF0C;a&#x662F;&#x6D4B;&#x8BD5;&#x7684;&#x503C;&#xFF0C;b&#x662F;&#x671F;&#x671B;&#x7684;&#x503C;&#x3002; assertTrue(a) &#x5982;&#x679C;a&#x4E3A; true &#x5219;&#x6210;&#x529F;&#x3002; assertFalse(a) &#x5982;&#x679C;a &#x4E3A; false &#x5219;&#x6210;&#x529F;&#x3002;"},"10.标准库/10.14.单元测试/10.14.单元测试.html#安装和拆卸":{"title":"&#x5B89;&#x88C5;&#x548C;&#x62C6;&#x5378;","path":"\\10.标准库\\10.14.单元测试\\10.14.单元测试.html#安装和拆卸","body":"&#x8981;&#x5728;&#x6D4B;&#x8BD5;&#x4E4B;&#x524D;&#x6216;&#x4E4B;&#x540E;&#x8FD0;&#x884C;&#x4EE3;&#x7801;&#xFF0C;&#x53EF;&#x4EE5;&#x91CD;&#x8F7D;TestCase &#x4E2D;&#x7684; setup &#x548C; tearDown &#x3002; setup &#x5728;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x8FD0;&#x884C;&#x4E4B;&#x524D;&#x8C03;&#x7528;&#x3002; tearDown &#x5728;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x8FD0;&#x884C;&#x4E4B;&#x540E;&#x8C03;&#x7528;&#x3002; 1 2 3 4 5 6 7 8 9 10 11 class MyTestCase extends haxe . unit . TestCase { var value: String ; override public function setup () { value = foo ; } public function testSetup () { assertEquals( foo , value); } }"},"10.标准库/10.14.单元测试/10.14.单元测试.html#比较复杂对象":{"title":"&#x6BD4;&#x8F83;&#x590D;&#x6742;&#x5BF9;&#x8C61;","path":"\\10.标准库\\10.14.单元测试\\10.14.单元测试.html#比较复杂对象","body":"&#x4F7F;&#x7528;&#x590D;&#x6742;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x80FD;&#x96BE;&#x4E8E;&#x751F;&#x6210;&#x9884;&#x671F;&#x7684;&#x503C;&#x6765;&#x6BD4;&#x8F83;&#x5B9E;&#x9645;&#x503C;&#x3002;assertEquals &#x4E0D;&#x505A;&#x6DF1;&#x5EA6;&#x7684;&#x5BF9;&#x6BD4;&#x4E5F;&#x53EF;&#x80FD;&#x662F;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x89E3;&#x51B3;&#x8FD9;&#x4E9B;&#x95EE;&#x9898;&#x7684;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4F5C;&#x4E3A;&#x9884;&#x671F;&#x7684;&#x503C;&#xFF0C;&#x5E76;&#x5BF9;&#x6BD4;&#x5B83;&#x548C;&#x4F7F;&#x7528; Std.string &#x8F6C;&#x6362;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5B9E;&#x9645;&#x503C; &#x3002;&#x4E0B;&#x9762;&#x662F;&#x4F7F;&#x7528;&#x6570;&#x7EC4;&#x7684;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x793A;&#x4F8B;&#xFF1A; 1 2 3 4 public function testArray () { var actual = [ 1 , 2 , 3 ]; assertEquals( [1, 2, 3] , Std.string(actual)); } &#x5728;API&#x6587;&#x6863;&#x4E2D;&#x67E5;&#x770B; haxe.unit &#x5305;&#x4E86;&#x89E3;&#x66F4;&#x591A;&#x7EC6;&#x8282;&#x3002;"},"10.标准库/10.2.数据结构/10.2.1.数组.html":{"title":"","path":"\\10.标准库\\10.2.数据结构\\10.2.1.数组.html","body":"10.2.1.数组 一个数组是一个元素的集合。它有一个类型参数（第3.2节），对应这些元素的类型。数组可以被通过以下三种方式创建： 使用它们的构造函数 ： new Array() 使用数组声明语法（第5.5节） ： [1, 2, 3] 使用数组推导（第6.6节） ： [for (i in 0…10) if ( i % 2 == 0 ) i] 数组附带一个 API ，覆盖了多数的用例。另外，它们允许读/写 的数组访问（第5.8节）： 1 2 3 4 5 6 7 8 class Main  static public function main ()  var a = [ 1 , 2 , 3 ]; trace (a[ 1 ]); // 2 a[ 1 ] = 1 ; trace (a[ 1 ]); // 1   由于 Haxe 中的数组访问是没有边界的，即，数组保证不会抛出异常，这需要进一步讨论： 如果对一个不存在的索引做出一个读访问，将根据目标语言返回一个值。 如果对一个越界的正索引做出一个写访问，则在最后有定义的索引与这个新写入的索引项之间的所有位置插入null（或者静态目标语言（第2.2节）中基本类型（第2.1节）的默认值（第2.2节））。 如果使用一个负索引写访问，结果是未指定的。 数组在它的元素之上定义了一个迭代器（第6.7节）。这个迭代通常由编译器优化后以一个 while 循环（第5.14节）配合数组下标进行： 1 2 3 4 5 6 7 8 9 10 class Main  static public function main ()  var scores = [ 110 , 170 , 35 ]; var sum = 0 ; for (score in scores)  sum += score;  trace (sum); // 315   Haxe 生成这个优化后的 JavaScript 输出： 1 2 3 4 5 6 7 8 9 10 11 Main.main = function ()  var scores = [ 110 , 170 , 35 ]; var sum = 0 ; var _g = 0 ; while (_g  scores.length)  var score = scores[_g]; ++_g; sum += score;  console.log(sum); ; Haxe 不允许混合类型的数组，除非参数类型被限强制为 Dynamic（第2.7节）： 1 2 3 4 5 6 7 8 9 10 class Main  static public function main ()  // Compile Error: Arrays of mixed types are only allowed if the type is // forced to ArrayDynamic //var myArray = [10, \"Bob\", false]; // ArrayDynamic with mixed types var myExplicitArray: Array  Dynamic  = [ 10 , \"Sally\" , true ];   花絮 : 动态数组 在Haxe 2中，混合类型的数组声明是被允许的。在Haxe 3中，数组只有显式声明为 Array 才可以为混合类型。 查看数组API了解它的方法的详细内容。"},"10.标准库/10.2.数据结构/10.2.1.数组.html#10-2-1-数组":{"title":"10.2.1.&#x6570;&#x7EC4;","path":"\\10.标准库\\10.2.数据结构\\10.2.1.数组.html#10-2-1-数组","body":"&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x662F;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x96C6;&#x5408;&#x3002;&#x5B83;&#x6709;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09;&#xFF0C;&#x5BF9;&#x5E94;&#x8FD9;&#x4E9B;&#x5143;&#x7D20;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x6570;&#x7EC4;&#x53EF;&#x4EE5;&#x88AB;&#x901A;&#x8FC7;&#x4EE5;&#x4E0B;&#x4E09;&#x79CD;&#x65B9;&#x5F0F;&#x521B;&#x5EFA;&#xFF1A; &#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570; &#xFF1A; new Array() &#x4F7F;&#x7528;&#x6570;&#x7EC4;&#x58F0;&#x660E;&#x8BED;&#x6CD5;&#xFF08;&#x7B2C;5.5&#x8282;&#xFF09; &#xFF1A; [1, 2, 3] &#x4F7F;&#x7528;&#x6570;&#x7EC4;&#x63A8;&#x5BFC;&#xFF08;&#x7B2C;6.6&#x8282;&#xFF09; &#xFF1A; [for (i in 0&#x2026;10) if ( i % 2 == 0 ) i] &#x6570;&#x7EC4;&#x9644;&#x5E26;&#x4E00;&#x4E2A; API &#xFF0C;&#x8986;&#x76D6;&#x4E86;&#x591A;&#x6570;&#x7684;&#x7528;&#x4F8B;&#x3002;&#x53E6;&#x5916;&#xFF0C;&#x5B83;&#x4EEC;&#x5141;&#x8BB8;&#x8BFB;/&#x5199; &#x7684;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#xFF08;&#x7B2C;5.8&#x8282;&#xFF09;&#xFF1A; 1 2 3 4 5 6 7 8 class Main { static public function main () { var a = [ 1 , 2 , 3 ]; trace (a[ 1 ]); // 2 a[ 1 ] = 1 ; trace (a[ 1 ]); // 1 } } &#x7531;&#x4E8E; Haxe &#x4E2D;&#x7684;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x662F;&#x6CA1;&#x6709;&#x8FB9;&#x754C;&#x7684;&#xFF0C;&#x5373;&#xFF0C;&#x6570;&#x7EC4;&#x4FDD;&#x8BC1;&#x4E0D;&#x4F1A;&#x629B;&#x51FA;&#x5F02;&#x5E38;&#xFF0C;&#x8FD9;&#x9700;&#x8981;&#x8FDB;&#x4E00;&#x6B65;&#x8BA8;&#x8BBA;&#xFF1A; &#x5982;&#x679C;&#x5BF9;&#x4E00;&#x4E2A;&#x4E0D;&#x5B58;&#x5728;&#x7684;&#x7D22;&#x5F15;&#x505A;&#x51FA;&#x4E00;&#x4E2A;&#x8BFB;&#x8BBF;&#x95EE;&#xFF0C;&#x5C06;&#x6839;&#x636E;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x503C;&#x3002; &#x5982;&#x679C;&#x5BF9;&#x4E00;&#x4E2A;&#x8D8A;&#x754C;&#x7684;&#x6B63;&#x7D22;&#x5F15;&#x505A;&#x51FA;&#x4E00;&#x4E2A;&#x5199;&#x8BBF;&#x95EE;&#xFF0C;&#x5219;&#x5728;&#x6700;&#x540E;&#x6709;&#x5B9A;&#x4E49;&#x7684;&#x7D22;&#x5F15;&#x4E0E;&#x8FD9;&#x4E2A;&#x65B0;&#x5199;&#x5165;&#x7684;&#x7D22;&#x5F15;&#x9879;&#x4E4B;&#x95F4;&#x7684;&#x6240;&#x6709;&#x4F4D;&#x7F6E;&#x63D2;&#x5165;null&#xFF08;&#x6216;&#x8005;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09;&#x4E2D;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.1&#x8282;&#xFF09;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09;&#xFF09;&#x3002; &#x5982;&#x679C;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x8D1F;&#x7D22;&#x5F15;&#x5199;&#x8BBF;&#x95EE;&#xFF0C;&#x7ED3;&#x679C;&#x662F;&#x672A;&#x6307;&#x5B9A;&#x7684;&#x3002; &#x6570;&#x7EC4;&#x5728;&#x5B83;&#x7684;&#x5143;&#x7D20;&#x4E4B;&#x4E0A;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#xFF08;&#x7B2C;6.7&#x8282;&#xFF09;&#x3002;&#x8FD9;&#x4E2A;&#x8FED;&#x4EE3;&#x901A;&#x5E38;&#x7531;&#x7F16;&#x8BD1;&#x5668;&#x4F18;&#x5316;&#x540E;&#x4EE5;&#x4E00;&#x4E2A; while &#x5FAA;&#x73AF;&#xFF08;&#x7B2C;5.14&#x8282;&#xFF09;&#x914D;&#x5408;&#x6570;&#x7EC4;&#x4E0B;&#x6807;&#x8FDB;&#x884C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 class Main { static public function main () { var scores = [ 110 , 170 , 35 ]; var sum = 0 ; for (score in scores) { sum += score; } trace (sum); // 315 } } Haxe &#x751F;&#x6210;&#x8FD9;&#x4E2A;&#x4F18;&#x5316;&#x540E;&#x7684; JavaScript &#x8F93;&#x51FA;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 Main.main = function () { var scores = [ 110 , 170 , 35 ]; var sum = 0 ; var _g = 0 ; while (_g  scores.length) { var score = scores[_g]; ++_g; sum += score; } console.log(sum); }; Haxe &#x4E0D;&#x5141;&#x8BB8;&#x6DF7;&#x5408;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x9664;&#x975E;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x88AB;&#x9650;&#x5F3A;&#x5236;&#x4E3A; Dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 class Main { static public function main () { // Compile Error: Arrays of mixed types are only allowed if the type is // forced to ArrayDynamic //var myArray = [10, Bob, false]; // ArrayDynamic with mixed types var myExplicitArray: Array  Dynamic  = [ 10 , Sally , true ]; } } &#x82B1;&#x7D6E; : &#x52A8;&#x6001;&#x6570;&#x7EC4; &#x5728;Haxe 2&#x4E2D;&#xFF0C;&#x6DF7;&#x5408;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x7EC4;&#x58F0;&#x660E;&#x662F;&#x88AB;&#x5141;&#x8BB8;&#x7684;&#x3002;&#x5728;Haxe 3&#x4E2D;&#xFF0C;&#x6570;&#x7EC4;&#x53EA;&#x6709;&#x663E;&#x5F0F;&#x58F0;&#x660E;&#x4E3A; Array &#x624D;&#x53EF;&#x4EE5;&#x4E3A;&#x6DF7;&#x5408;&#x7C7B;&#x578B;&#x3002; &#x67E5;&#x770B;&#x6570;&#x7EC4;API&#x4E86;&#x89E3;&#x5B83;&#x7684;&#x65B9;&#x6CD5;&#x7684;&#x8BE6;&#x7EC6;&#x5185;&#x5BB9;&#x3002;"},"10.标准库/10.2.数据结构/10.2.2.向量.html":{"title":"","path":"\\10.标准库\\10.2.数据结构\\10.2.2.向量.html","body":"10.2.2.向量 一个向量是一个优化的固定长度的元素集合。很像数组（第10.2.1节），它只有一种类型参数（第3.2节），所有向量的元素必须是特定类型，可以使用一个 for 循环（第5.13节）迭代，并使用数组访问（第2.8.3节）的语法访问。然而，不像数组和立标，向量长度是被创建时指定的，并且之后不能被修改。 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main  static function main ()  var vec = new haxe .ds.Vector( 10 ); for (i in 0. ..vec.length)  vec[i] = i;  trace (vec[ 0 ]); // 0 trace (vec[ 5 ]); // 5 trace (vec[ 9 ]); // 9   haxe.ds.Vector 被实现为一个抽象类型（Abstract）（第2.8节），在给定目标语言的原生数组实现之上，是更快速的固定长度的集合，因为存储它的元素的内存被预分配了。 查看Vector API 来详细了解向量方法。"},"10.标准库/10.2.数据结构/10.2.2.向量.html#10-2-2-向量":{"title":"10.2.2.&#x5411;&#x91CF;","path":"\\10.标准库\\10.2.数据结构\\10.2.2.向量.html#10-2-2-向量","body":"&#x4E00;&#x4E2A;&#x5411;&#x91CF;&#x662F;&#x4E00;&#x4E2A;&#x4F18;&#x5316;&#x7684;&#x56FA;&#x5B9A;&#x957F;&#x5EA6;&#x7684;&#x5143;&#x7D20;&#x96C6;&#x5408;&#x3002;&#x5F88;&#x50CF;&#x6570;&#x7EC4;&#xFF08;&#x7B2C;10.2.1&#x8282;&#xFF09;&#xFF0C;&#x5B83;&#x53EA;&#x6709;&#x4E00;&#x79CD;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09;&#xFF0C;&#x6240;&#x6709;&#x5411;&#x91CF;&#x7684;&#x5143;&#x7D20;&#x5FC5;&#x987B;&#x662F;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E00;&#x4E2A; for &#x5FAA;&#x73AF;&#xFF08;&#x7B2C;5.13&#x8282;&#xFF09;&#x8FED;&#x4EE3;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#xFF08;&#x7B2C;2.8.3&#x8282;&#xFF09;&#x7684;&#x8BED;&#x6CD5;&#x8BBF;&#x95EE;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4E0D;&#x50CF;&#x6570;&#x7EC4;&#x548C;&#x7ACB;&#x6807;&#xFF0C;&#x5411;&#x91CF;&#x957F;&#x5EA6;&#x662F;&#x88AB;&#x521B;&#x5EFA;&#x65F6;&#x6307;&#x5B9A;&#x7684;&#xFF0C;&#x5E76;&#x4E14;&#x4E4B;&#x540E;&#x4E0D;&#x80FD;&#x88AB;&#x4FEE;&#x6539;&#x3002; 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main { static function main () { var vec = new haxe .ds.Vector( 10 ); for (i in 0. ..vec.length) { vec[i] = i; } trace (vec[ 0 ]); // 0 trace (vec[ 5 ]); // 5 trace (vec[ 9 ]); // 9 } } haxe.ds.Vector &#x88AB;&#x5B9E;&#x73B0;&#x4E3A;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF08;Abstract&#xFF09;&#xFF08;&#x7B2C;2.8&#x8282;&#xFF09;&#xFF0C;&#x5728;&#x7ED9;&#x5B9A;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x539F;&#x751F;&#x6570;&#x7EC4;&#x5B9E;&#x73B0;&#x4E4B;&#x4E0A;&#xFF0C;&#x662F;&#x66F4;&#x5FEB;&#x901F;&#x7684;&#x56FA;&#x5B9A;&#x957F;&#x5EA6;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x56E0;&#x4E3A;&#x5B58;&#x50A8;&#x5B83;&#x7684;&#x5143;&#x7D20;&#x7684;&#x5185;&#x5B58;&#x88AB;&#x9884;&#x5206;&#x914D;&#x4E86;&#x3002; &#x67E5;&#x770B;Vector API &#x6765;&#x8BE6;&#x7EC6;&#x4E86;&#x89E3;&#x5411;&#x91CF;&#x65B9;&#x6CD5;&#x3002;"},"10.标准库/10.2.数据结构/10.2.3.列表.html":{"title":"","path":"\\10.标准库\\10.2.数据结构\\10.2.3.列表.html","body":"10.2.3.列表 列表是一个存储的元素的集合。从表面上看，一个列表类似于一个数组。然而，潜在的实现非常不同。这体现在一些功能差异： 列表不能被使用方括号索引，即 [0] 形式。 列表不能被初始化。 没有列表推导。 列表在迭代的时候可以自由修改和删除元素。 使用列表的一个简单例子： 1 2 3 4 5 6 7 8 class Main  static public function main ()  var myList = new List  Int (); for (ii in 0. . .5 ) myList.add(ii); trace (myList); //0, 1, 2, 3, 4   查看List API 详细了解列表方法。"},"10.标准库/10.2.数据结构/10.2.3.列表.html#10-2-3-列表":{"title":"10.2.3.&#x5217;&#x8868;","path":"\\10.标准库\\10.2.数据结构\\10.2.3.列表.html#10-2-3-列表","body":"&#x5217;&#x8868;&#x662F;&#x4E00;&#x4E2A;&#x5B58;&#x50A8;&#x7684;&#x5143;&#x7D20;&#x7684;&#x96C6;&#x5408;&#x3002;&#x4ECE;&#x8868;&#x9762;&#x4E0A;&#x770B;&#xFF0C;&#x4E00;&#x4E2A;&#x5217;&#x8868;&#x7C7B;&#x4F3C;&#x4E8E;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x6F5C;&#x5728;&#x7684;&#x5B9E;&#x73B0;&#x975E;&#x5E38;&#x4E0D;&#x540C;&#x3002;&#x8FD9;&#x4F53;&#x73B0;&#x5728;&#x4E00;&#x4E9B;&#x529F;&#x80FD;&#x5DEE;&#x5F02;&#xFF1A; &#x5217;&#x8868;&#x4E0D;&#x80FD;&#x88AB;&#x4F7F;&#x7528;&#x65B9;&#x62EC;&#x53F7;&#x7D22;&#x5F15;&#xFF0C;&#x5373; [0] &#x5F62;&#x5F0F;&#x3002; &#x5217;&#x8868;&#x4E0D;&#x80FD;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x3002; &#x6CA1;&#x6709;&#x5217;&#x8868;&#x63A8;&#x5BFC;&#x3002; &#x5217;&#x8868;&#x5728;&#x8FED;&#x4EE3;&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x81EA;&#x7531;&#x4FEE;&#x6539;&#x548C;&#x5220;&#x9664;&#x5143;&#x7D20;&#x3002; &#x4F7F;&#x7528;&#x5217;&#x8868;&#x7684;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x4F8B;&#x5B50;&#xFF1A; 1 2 3 4 5 6 7 8 class Main { static public function main () { var myList = new List  Int (); for (ii in 0. . .5 ) myList.add(ii); trace (myList); //{0, 1, 2, 3, 4} } } &#x67E5;&#x770B;List API &#x8BE6;&#x7EC6;&#x4E86;&#x89E3;&#x5217;&#x8868;&#x65B9;&#x6CD5;&#x3002;"},"10.标准库/10.2.数据结构/10.2.5.Map.html":{"title":"","path":"\\10.标准库\\10.2.数据结构\\10.2.5.Map.html","body":"10.2.5.Map Map 是一个键值对组成的容器。一个 Map 也通常被称为一个关联数组、字典或者符号表。下面的代码是要给简短的使用Map的示例： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class Main  static public function main ()  // Maps are initialized like arrays, but // use the map literal syntax with the // ’=’ operator. Maps can have their // key value types defined explicity var map1: Map  Int , String  = [ 1 = \"one\" , 2 = \"two\" ]; // Or they can infer their key value types var map2 = [ \"one\" = 1 , \"two\" = 2 , \"three\" = 3 ]; $type(map2); // MapString, Int // Keys must be unique // Error: Duplicate Key //var map3 = [1=\"dog\", 1=\"cat\"]; // Maps values can be accessed using array // accessors \"[]\" var map4 = [ \"M\" = \"Monday\" , \"T\" = \"Tuesday\" ]; trace (map4[ \"M\" ]); //Monday // Maps iterate over their values by // default var valueSum; for (value in map4)  trace (value); // Monday \\n Tuesday  // Can iterate over keys by using the // keys() method for (key in map4.keys())  trace (key); // M \\n T  // Like arrays, a new Map can be made using // comprehension var map5 = [ for (key in map4.keys()) key = \"FRIDAY!!\" ]; // M = FRIDAY!!, T = FRIDAY!! trace (map5);   在后台，Map 是一个抽象类型。在编译时，它被转换为集中特定类型之一，取决于键的类型： String ： haxe.ds.StringMap Int : haxe.ds.IntMap EnumValue ： haxe.ds.EnumValueMap {} ： haxe.ds.ObjectMap Map类型在运行时不存在，被上面的对象之一取代。Map使用它的键类型定义数组访问（第2.8.3节）。 查看Map API 详细了解它的方法。"},"10.标准库/10.2.数据结构/10.2.5.Map.html#10-2-5-Map":{"title":"10.2.5.Map","path":"\\10.标准库\\10.2.数据结构\\10.2.5.Map.html#10-2-5-Map","body":"Map &#x662F;&#x4E00;&#x4E2A;&#x952E;&#x503C;&#x5BF9;&#x7EC4;&#x6210;&#x7684;&#x5BB9;&#x5668;&#x3002;&#x4E00;&#x4E2A; Map &#x4E5F;&#x901A;&#x5E38;&#x88AB;&#x79F0;&#x4E3A;&#x4E00;&#x4E2A;&#x5173;&#x8054;&#x6570;&#x7EC4;&#x3001;&#x5B57;&#x5178;&#x6216;&#x8005;&#x7B26;&#x53F7;&#x8868;&#x3002;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x662F;&#x8981;&#x7ED9;&#x7B80;&#x77ED;&#x7684;&#x4F7F;&#x7528;Map&#x7684;&#x793A;&#x4F8B;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class Main { static public function main () { // Maps are initialized like arrays, but // use the map literal syntax with the // &#x2019;=&#x2019; operator. Maps can have their // key value types defined explicity var map1: Map  Int , String  = [ 1 = one , 2 = two ]; // Or they can infer their key value types var map2 = [ one = 1 , two = 2 , three = 3 ]; $type(map2); // MapString, Int // Keys must be unique // Error: Duplicate Key //var map3 = [1=dog, 1=cat]; // Maps values can be accessed using array // accessors [] var map4 = [ M = Monday , T = Tuesday ]; trace (map4[ M ]); //Monday // Maps iterate over their values by // default var valueSum; for (value in map4) { trace (value); // Monday \\n Tuesday } // Can iterate over keys by using the // keys() method for (key in map4.keys()) { trace (key); // M \\n T } // Like arrays, a new Map can be made using // comprehension var map5 = [ for (key in map4.keys()) key = FRIDAY!! ]; // {M = FRIDAY!!, T = FRIDAY!!} trace (map5); } } &#x5728;&#x540E;&#x53F0;&#xFF0C;Map &#x662F;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x3002;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#xFF0C;&#x5B83;&#x88AB;&#x8F6C;&#x6362;&#x4E3A;&#x96C6;&#x4E2D;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#x4E4B;&#x4E00;&#xFF0C;&#x53D6;&#x51B3;&#x4E8E;&#x952E;&#x7684;&#x7C7B;&#x578B;&#xFF1A; String &#xFF1A; haxe.ds.StringMap Int : haxe.ds.IntMap EnumValue &#xFF1A; haxe.ds.EnumValueMap {} &#xFF1A; haxe.ds.ObjectMap Map&#x7C7B;&#x578B;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x88AB;&#x4E0A;&#x9762;&#x7684;&#x5BF9;&#x8C61;&#x4E4B;&#x4E00;&#x53D6;&#x4EE3;&#x3002;Map&#x4F7F;&#x7528;&#x5B83;&#x7684;&#x952E;&#x7C7B;&#x578B;&#x5B9A;&#x4E49;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#xFF08;&#x7B2C;2.8.3&#x8282;&#xFF09;&#x3002; &#x67E5;&#x770B;Map API &#x8BE6;&#x7EC6;&#x4E86;&#x89E3;&#x5B83;&#x7684;&#x65B9;&#x6CD5;&#x3002;"},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html":{"title":"","path":"\\10.标准库\\10.2.数据结构\\10.2.4.GenericStack.html","body":"10.2.4.GenericStack 一个 GenericStack，就像数组和列表，是一个存储元素的容器。它有一个类型参数（第3.2节），这个堆栈的所有元素必须是特定类型。这里有一个初始化和使用GenericStack的小示例程序。 1 2 3 4 5 6 7 8 9 10 11 import haxe.ds.GenericStack; class Main  static public function main ()  var myStack = new GenericStack  Int (); for (ii in 0. . .5 ) myStack.add(ii); trace (myStack); //4, 3, 2, 1, 0 trace (myStack.pop()); //4   花絮 : FastList 在Haxe 2中， GenericStack类被称为 FastList 。由于它的行为非常接近传统的堆栈，所以在Haxe 3中修改了名字。 GenericStack 中的 Generic 是字面的。它被通过 :generic 元数据归结。根据目标语言，这可以提升静态目标语言的性能。查看 Generic（第3.3节）了解详细内容。 查看GenericStack API 详细了解它的方法。"},"10.标准库/10.2.数据结构/10.2.4.GenericStack.html#10-2-4-GenericStack":{"title":"10.2.4.GenericStack","path":"\\10.标准库\\10.2.数据结构\\10.2.4.GenericStack.html#10-2-4-GenericStack","body":"&#x4E00;&#x4E2A; GenericStack&#xFF0C;&#x5C31;&#x50CF;&#x6570;&#x7EC4;&#x548C;&#x5217;&#x8868;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x5B58;&#x50A8;&#x5143;&#x7D20;&#x7684;&#x5BB9;&#x5668;&#x3002;&#x5B83;&#x6709;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09;&#xFF0C;&#x8FD9;&#x4E2A;&#x5806;&#x6808;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5FC5;&#x987B;&#x662F;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x91CC;&#x6709;&#x4E00;&#x4E2A;&#x521D;&#x59CB;&#x5316;&#x548C;&#x4F7F;&#x7528;GenericStack&#x7684;&#x5C0F;&#x793A;&#x4F8B;&#x7A0B;&#x5E8F;&#x3002; 1 2 3 4 5 6 7 8 9 10 11 import haxe.ds.GenericStack; class Main { static public function main () { var myStack = new GenericStack  Int (); for (ii in 0. . .5 ) myStack.add(ii); trace (myStack); //{4, 3, 2, 1, 0} trace (myStack.pop()); //4 } } &#x82B1;&#x7D6E; : FastList &#x5728;Haxe 2&#x4E2D;&#xFF0C; GenericStack&#x7C7B;&#x88AB;&#x79F0;&#x4E3A; FastList &#x3002;&#x7531;&#x4E8E;&#x5B83;&#x7684;&#x884C;&#x4E3A;&#x975E;&#x5E38;&#x63A5;&#x8FD1;&#x4F20;&#x7EDF;&#x7684;&#x5806;&#x6808;&#xFF0C;&#x6240;&#x4EE5;&#x5728;Haxe 3&#x4E2D;&#x4FEE;&#x6539;&#x4E86;&#x540D;&#x5B57;&#x3002; GenericStack &#x4E2D;&#x7684; Generic &#x662F;&#x5B57;&#x9762;&#x7684;&#x3002;&#x5B83;&#x88AB;&#x901A;&#x8FC7; :generic &#x5143;&#x6570;&#x636E;&#x5F52;&#x7ED3;&#x3002;&#x6839;&#x636E;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF0C;&#x8FD9;&#x53EF;&#x4EE5;&#x63D0;&#x5347;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x6027;&#x80FD;&#x3002;&#x67E5;&#x770B; Generic&#xFF08;&#x7B2C;3.3&#x8282;&#xFF09;&#x4E86;&#x89E3;&#x8BE6;&#x7EC6;&#x5185;&#x5BB9;&#x3002; &#x67E5;&#x770B;GenericStack API &#x8BE6;&#x7EC6;&#x4E86;&#x89E3;&#x5B83;&#x7684;&#x65B9;&#x6CD5;&#x3002;"},"10.标准库/10.2.数据结构/10.2.数据结构.html":{"title":"","path":"\\10.标准库\\10.2.数据结构\\10.2.数据结构.html","body":"10.2.数据结构 本节内容： 10.2.1: 数组 10.2.2: 向量 10.2.3: 列表 10.2.4: GenericStack 10.2.5: Map 10.2.6: Option"},"10.标准库/10.2.数据结构/10.2.数据结构.html#10-2-数据结构":{"title":"10.2.&#x6570;&#x636E;&#x7ED3;&#x6784;","path":"\\10.标准库\\10.2.数据结构\\10.2.数据结构.html#10-2-数据结构","body":"&#x672C;&#x8282;&#x5185;&#x5BB9;&#xFF1A; 10.2.1: &#x6570;&#x7EC4; 10.2.2: &#x5411;&#x91CF; 10.2.3: &#x5217;&#x8868; 10.2.4: GenericStack 10.2.5: Map 10.2.6: Option"},"10.标准库/10.2.数据结构/10.2.6.Option.html":{"title":"","path":"\\10.标准库\\10.2.数据结构\\10.2.6.Option.html","body":"10.2.6.Option 一个 Option 是Haxe标准库中的一个枚举，如下形式定义： 1 2 3 4 enum Option  T   Some(v: T ); None;  它可以被使用在各种各样的状况，比如 沟通一个方法是否有一个有效的返回，如果是的话，它返回什么值： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import haxe.ds.Option; class Main  static public function main ()  var result = trySomething(); switch (result)  case None: trace ( \"Got None\" ); case Some(s): trace ( \"Got a value: \" +s);   static function trySomething (): Option  String   if (Math.random()  0.5 )  return None;  else  return Some( \"Success\" );   "},"10.标准库/10.2.数据结构/10.2.6.Option.html#10-2-6-Option":{"title":"10.2.6.Option","path":"\\10.标准库\\10.2.数据结构\\10.2.6.Option.html#10-2-6-Option","body":"&#x4E00;&#x4E2A; Option &#x662F;Haxe&#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#xFF0C;&#x5982;&#x4E0B;&#x5F62;&#x5F0F;&#x5B9A;&#x4E49;&#xFF1A; 1 2 3 4 enum Option  T  { Some(v: T ); None; } &#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x4F7F;&#x7528;&#x5728;&#x5404;&#x79CD;&#x5404;&#x6837;&#x7684;&#x72B6;&#x51B5;&#xFF0C;&#x6BD4;&#x5982; &#x6C9F;&#x901A;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x5426;&#x6709;&#x4E00;&#x4E2A;&#x6709;&#x6548;&#x7684;&#x8FD4;&#x56DE;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x7684;&#x8BDD;&#xFF0C;&#x5B83;&#x8FD4;&#x56DE;&#x4EC0;&#x4E48;&#x503C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import haxe.ds.Option; class Main { static public function main () { var result = trySomething(); switch (result) { case None: trace ( Got None ); case Some(s): trace ( Got a value:  +s); } } static function trySomething (): Option  String  { if (Math.random()  0.5 ) { return None; } else { return Some( Success ); } } }"},"10.标准库/10.3.正则表达式/10.3.2.分组.html":{"title":"","path":"\\10.标准库\\10.3.正则表达式\\10.3.2.分组.html","body":"10.3.2.分组 通过使用分组，特定信息可以被从一个匹配的字符串中提取。如果 match() 返回 true，我们可以使用 matched(X) 方法过的分组，X是正则表达似乎模式定义的分组的号码： 1 2 3 4 5 6 7 8 9 10 class Main  static function main ()  var str = \"Nicolas is 26 years old\" ; var r = ~/([A-Za-z]+) is ([ 0 -9 ]+) years old/; r.match(str); trace (r.matched( 1 )); // \"Nicolas\" trace (r.matched( 2 )); // \"26\"   注意，分组号从1开始，r.matched(0) 总是返回整个匹配的子串。 r.matchedPos() 返回这个子串在原字符串中的位置： 1 2 3 4 5 6 7 8 9 10 class Main  static function main ()  var str = \"abcdeeeeefghi\" ; var r = ~/e+/; r.match(str); trace (r.matched( 0 )); // \"eeeee\" //  pos : 4, len : 5  trace (r.matchedPos());   另外，r.matchedLeft() 和 r.matchedRight() 可以用来获得匹配的子串左侧或者右侧的子串： 1 2 3 4 5 6 7 8 9 class Main  static function main ()  var r = ~/b/; r.match( \"abc\" ); trace (r.matchedLeft()); // a trace (r.matched( 0 )); // b trace (r.matchedRight()); // c  "},"10.标准库/10.3.正则表达式/10.3.2.分组.html#10-3-2-分组":{"title":"10.3.2.&#x5206;&#x7EC4;","path":"\\10.标准库\\10.3.正则表达式\\10.3.2.分组.html#10-3-2-分组","body":"&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x5206;&#x7EC4;&#xFF0C;&#x7279;&#x5B9A;&#x4FE1;&#x606F;&#x53EF;&#x4EE5;&#x88AB;&#x4ECE;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x63D0;&#x53D6;&#x3002;&#x5982;&#x679C; match() &#x8FD4;&#x56DE; true&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; matched(X) &#x65B9;&#x6CD5;&#x8FC7;&#x7684;&#x5206;&#x7EC4;&#xFF0C;X&#x662F;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x4F3C;&#x4E4E;&#x6A21;&#x5F0F;&#x5B9A;&#x4E49;&#x7684;&#x5206;&#x7EC4;&#x7684;&#x53F7;&#x7801;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 class Main { static function main () { var str = Nicolas is 26 years old ; var r = ~/([A-Za-z]+) is ([ 0 -9 ]+) years old/; r.match(str); trace (r.matched( 1 )); // Nicolas trace (r.matched( 2 )); // 26 } } &#x6CE8;&#x610F;&#xFF0C;&#x5206;&#x7EC4;&#x53F7;&#x4ECE;1&#x5F00;&#x59CB;&#xFF0C;r.matched(0) &#x603B;&#x662F;&#x8FD4;&#x56DE;&#x6574;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x5B50;&#x4E32;&#x3002; r.matchedPos() &#x8FD4;&#x56DE;&#x8FD9;&#x4E2A;&#x5B50;&#x4E32;&#x5728;&#x539F;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 class Main { static function main () { var str = abcdeeeeefghi ; var r = ~/e+/; r.match(str); trace (r.matched( 0 )); // eeeee // { pos : 4, len : 5 } trace (r.matchedPos()); } } &#x53E6;&#x5916;&#xFF0C;r.matchedLeft() &#x548C; r.matchedRight() &#x53EF;&#x4EE5;&#x7528;&#x6765;&#x83B7;&#x5F97;&#x5339;&#x914D;&#x7684;&#x5B50;&#x4E32;&#x5DE6;&#x4FA7;&#x6216;&#x8005;&#x53F3;&#x4FA7;&#x7684;&#x5B50;&#x4E32;&#xFF1A; 1 2 3 4 5 6 7 8 9 class Main { static function main () { var r = ~/b/; r.match( abc ); trace (r.matchedLeft()); // a trace (r.matched( 0 )); // b trace (r.matchedRight()); // c } }"},"10.标准库/10.3.正则表达式/10.3.1.匹配.html":{"title":"","path":"\\10.标准库\\10.3.正则表达式\\10.3.1.匹配.html","body":"10.3.1.匹配 可能正则表达式最常用的一个地方就是检查一个字符串是否匹配特定模式。正则表达式对象的 match 方法可以用来做这些： 1 2 3 4 5 6 7 8 9 class Main  static function main ()  var r = ~/world/; var str = \"hello world\" ; // true : 'world' was found in the string trace (r.match(str)); trace (r.match( \"hello !\" )); // false  "},"10.标准库/10.3.正则表达式/10.3.1.匹配.html#10-3-1-匹配":{"title":"10.3.1.&#x5339;&#x914D;","path":"\\10.标准库\\10.3.正则表达式\\10.3.1.匹配.html#10-3-1-匹配","body":"&#x53EF;&#x80FD;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x6700;&#x5E38;&#x7528;&#x7684;&#x4E00;&#x4E2A;&#x5730;&#x65B9;&#x5C31;&#x662F;&#x68C0;&#x67E5;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x5339;&#x914D;&#x7279;&#x5B9A;&#x6A21;&#x5F0F;&#x3002;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x5BF9;&#x8C61;&#x7684; match &#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x505A;&#x8FD9;&#x4E9B;&#xFF1A; 1 2 3 4 5 6 7 8 9 class Main { static function main () { var r = ~/world/; var str = hello world ; // true : &apos;world&apos; was found in the string trace (r.match(str)); trace (r.match( hello ! )); // false } }"},"10.标准库/10.3.正则表达式/10.3.3.替换.html":{"title":"","path":"\\10.标准库\\10.3.正则表达式\\10.3.3.替换.html","body":"10.3.3.替换 一个正则表达式也可以被用于替换字符串的一部分： 1 2 3 4 5 6 7 8 9 class Main  static function main ()  var str = \"aaabcbcbcbz\" ; // g : replace all instances var r = ~/b[^c]/g; // \"aaabcbcbcxx\" trace (r.replace(str, \"xx\" ));   在替换中，我们可以使用 $X 来重用一个匹配的组： 1 2 3 4 5 6 7 8 class Main  static function main ()  var str = \"hello 0 again\" ; var r = ~/([a-z]+)/g; // \"*hello* 0 *again*\" trace (r.replace(str, \"*$1*\" ));  "},"10.标准库/10.3.正则表达式/10.3.3.替换.html#10-3-3-替换":{"title":"10.3.3.&#x66FF;&#x6362;","path":"\\10.标准库\\10.3.正则表达式\\10.3.3.替换.html#10-3-3-替换","body":"&#x4E00;&#x4E2A;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x4E8E;&#x66FF;&#x6362;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF1A; 1 2 3 4 5 6 7 8 9 class Main { static function main () { var str = aaabcbcbcbz ; // g : replace all instances var r = ~/b[^c]/g; // aaabcbcbcxx trace (r.replace(str, xx )); } } &#x5728;&#x66FF;&#x6362;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; $X &#x6765;&#x91CD;&#x7528;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x7EC4;&#xFF1A; 1 2 3 4 5 6 7 8 class Main { static function main () { var str = {hello} {0} {again} ; var r = ~/{([a-z]+)}/g; // *hello* {0} *again* trace (r.replace(str, *$1* )); } }"},"10.标准库/10.3.正则表达式/10.3.4.分割.html":{"title":"","path":"\\10.标准库\\10.3.正则表达式\\10.3.4.分割.html","body":"10.3.4.分割 一个正则表达式也可以用来分割一个字符串到几个子串： 1 2 3 4 5 6 7 8 class Main  static function main ()  var str = \"XaaaYababZbbbW\" ; var r = ~/[ab]+/g; // [\"X\",\"Y\",\"Z\",\"W\"] trace (r.split(str));  "},"10.标准库/10.3.正则表达式/10.3.4.分割.html#10-3-4-分割":{"title":"10.3.4.&#x5206;&#x5272;","path":"\\10.标准库\\10.3.正则表达式\\10.3.4.分割.html#10-3-4-分割","body":"&#x4E00;&#x4E2A;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x5206;&#x5272;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5230;&#x51E0;&#x4E2A;&#x5B50;&#x4E32;&#xFF1A; 1 2 3 4 5 6 7 8 class Main { static function main () { var str = XaaaYababZbbbW ; var r = ~/[ab]+/g; // [X,Y,Z,W] trace (r.split(str)); } }"},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html":{"title":"","path":"\\10.标准库\\10.3.正则表达式\\10.3.6.实现细节.html","body":"10.3.6.实现细节 正则表达式的实现： 在JavaScript中，运行时使用对象 RegExp 提供实现。 在Neko 和C++中，使用 PCRE 库。 在Flash、PHP、C#和Java中，使用原生的实现。 在Flash 6 /8 中，实现不可用。"},"10.标准库/10.3.正则表达式/10.3.6.实现细节.html#10-3-6-实现细节":{"title":"10.3.6.&#x5B9E;&#x73B0;&#x7EC6;&#x8282;","path":"\\10.标准库\\10.3.正则表达式\\10.3.6.实现细节.html#10-3-6-实现细节","body":"&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x5B9E;&#x73B0;&#xFF1A; &#x5728;JavaScript&#x4E2D;&#xFF0C;&#x8FD0;&#x884C;&#x65F6;&#x4F7F;&#x7528;&#x5BF9;&#x8C61; RegExp &#x63D0;&#x4F9B;&#x5B9E;&#x73B0;&#x3002; &#x5728;Neko &#x548C;C++&#x4E2D;&#xFF0C;&#x4F7F;&#x7528; PCRE &#x5E93;&#x3002; &#x5728;Flash&#x3001;PHP&#x3001;C#&#x548C;Java&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x539F;&#x751F;&#x7684;&#x5B9E;&#x73B0;&#x3002; &#x5728;Flash 6 /8 &#x4E2D;&#xFF0C;&#x5B9E;&#x73B0;&#x4E0D;&#x53EF;&#x7528;&#x3002;"},"10.标准库/10.3.正则表达式/10.3.5.Map.html":{"title":"","path":"\\10.标准库\\10.3.正则表达式\\10.3.5.Map.html","body":"10.3.5.Map 正则表达式对象的 map 方法可以用于使用一个自定义函数替换匹配的子串。这个函数把一个正则表达式对象作为第一个参数，所以我们可以使用它得到进行匹配的更多信息，并进行条件替换。例如： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Main  static function main ()  var r = ~/(dog|fox)/g; var s = \"The quick brown fox jumped over the lazy dog.\" ; var s2 = r.map(s, function (r)  var match = r.matched( 0 ); switch (match)  case 'dog' : return 'fox '; case ' fox ': return ' dog '; default: throw ' Unknown animal: $match '; ; ); trace(s2); // The quick brown dog jumped over the lazy fox.  "},"10.标准库/10.3.正则表达式/10.3.5.Map.html#10-3-5-Map":{"title":"10.3.5.Map","path":"\\10.标准库\\10.3.正则表达式\\10.3.5.Map.html#10-3-5-Map","body":"&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x5BF9;&#x8C61;&#x7684; map &#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x81EA;&#x5B9A;&#x4E49;&#x51FD;&#x6570;&#x66FF;&#x6362;&#x5339;&#x914D;&#x7684;&#x5B50;&#x4E32;&#x3002;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x628A;&#x4E00;&#x4E2A;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5B83;&#x5F97;&#x5230;&#x8FDB;&#x884C;&#x5339;&#x914D;&#x7684;&#x66F4;&#x591A;&#x4FE1;&#x606F;&#xFF0C;&#x5E76;&#x8FDB;&#x884C;&#x6761;&#x4EF6;&#x66FF;&#x6362;&#x3002;&#x4F8B;&#x5982;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Main { static function main () { var r = ~/(dog|fox)/g; var s = The quick brown fox jumped over the lazy dog. ; var s2 = r.map(s, function (r) { var match = r.matched( 0 ); switch (match) { case &apos;dog&apos; : return &apos;fox &apos;; case &apos; fox &apos;: return &apos; dog &apos;; default: throw &apos; Unknown animal: $match &apos;; }; }); trace(s2); // The quick brown dog jumped over the lazy fox. } }"},"10.标准库/10.4.Math/10.4.1.特殊数值.html":{"title":"","path":"\\10.标准库\\10.4.Math\\10.4.1.特殊数值.html","body":"10.4.1.特殊数值 math 库有一些关于特殊数值的定义： NaN（非数字）：当一个不正确的数学操作被执行时返回，例如 Math.sqrt(-1)。 POSITIVE_INFINITY：如一个整数被 0 除。 NEGATIVE_INFINITY ：例如一个负数被 0 除 。 PI ： 3.1415…"},"10.标准库/10.4.Math/10.4.1.特殊数值.html#10-4-1-特殊数值":{"title":"10.4.1.&#x7279;&#x6B8A;&#x6570;&#x503C;","path":"\\10.标准库\\10.4.Math\\10.4.1.特殊数值.html#10-4-1-特殊数值","body":"math &#x5E93;&#x6709;&#x4E00;&#x4E9B;&#x5173;&#x4E8E;&#x7279;&#x6B8A;&#x6570;&#x503C;&#x7684;&#x5B9A;&#x4E49;&#xFF1A; NaN&#xFF08;&#x975E;&#x6570;&#x5B57;&#xFF09;&#xFF1A;&#x5F53;&#x4E00;&#x4E2A;&#x4E0D;&#x6B63;&#x786E;&#x7684;&#x6570;&#x5B66;&#x64CD;&#x4F5C;&#x88AB;&#x6267;&#x884C;&#x65F6;&#x8FD4;&#x56DE;&#xFF0C;&#x4F8B;&#x5982; Math.sqrt(-1)&#x3002; POSITIVE_INFINITY&#xFF1A;&#x5982;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#x88AB; 0 &#x9664;&#x3002; NEGATIVE_INFINITY &#xFF1A;&#x4F8B;&#x5982;&#x4E00;&#x4E2A;&#x8D1F;&#x6570;&#x88AB; 0 &#x9664; &#x3002; PI &#xFF1A; 3.1415&#x2026;"},"10.标准库/10.3.正则表达式/10.3.正则表达式.html":{"title":"","path":"\\10.标准库\\10.3.正则表达式\\10.3.正则表达式.html","body":"10.3.正则表达式 Haxe 内置支持 正则表达式。它们可以用来验证字符串格式，转换一个字符串，或者从给定文本中提取一些规则数据。 Haxe创建正则表达式有特定的语法。我们可以创建一个正则表达式对象通过输入其到 ~/ 组合和一个单独的 / 符号中： 1 var r = ˜/haxe/i; 或者，我们可以使用正则语法创建正则表达式： 1 var r = new EReg ( \"haxe\" , \"i\" ); 第一个参数是正则表达式模式字符串，第二个是标记字符串（后面查看）。 我们可以使用标准的正则表达式模式，如： . 任何字符 * 重复0或者多次 + 重复1或者多次 ? 可选的0或者1次 [A-Z0-9] 字符范围 [ˆ\\r\\n\\t] 不在范围内的字符 (…) 括号匹配字符的分组 ˆ 字符串起始字符（在多行匹配模式中一行的起始字符） $ 字符串的尾字符（多行匹配模式下一行的尾字符） | “OR”语句 例如，下面的增则表达式匹配有效的 email 地址： 1 ~/[A-Z0-9._\\%-]+@[A-Z0-9.-]+\\.[A-Z][A-Z][A-Z]?/i; 注意 正则表达式结尾的 i 是一个标记，作用是启用不区分大小写的匹配。 可能的标记如下： i 不区分大小写匹配 g 全局替换或者分割，查看后面 m 多行匹配， ˆ 和 $ 表示一行的开头和结尾 s 点号 . 将也匹配新行（Neko，C++，PHP，Flash 和Java 目标） u 使用UTF-8匹配（Neko 和 C++目标） 查看EReg API 详细了解它的方法。"},"10.标准库/10.3.正则表达式/10.3.正则表达式.html#10-3-正则表达式":{"title":"10.3.&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;","path":"\\10.标准库\\10.3.正则表达式\\10.3.正则表达式.html#10-3-正则表达式","body":"Haxe &#x5185;&#x7F6E;&#x652F;&#x6301; &#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x9A8C;&#x8BC1;&#x5B57;&#x7B26;&#x4E32;&#x683C;&#x5F0F;&#xFF0C;&#x8F6C;&#x6362;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6216;&#x8005;&#x4ECE;&#x7ED9;&#x5B9A;&#x6587;&#x672C;&#x4E2D;&#x63D0;&#x53D6;&#x4E00;&#x4E9B;&#x89C4;&#x5219;&#x6570;&#x636E;&#x3002; Haxe&#x521B;&#x5EFA;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x6709;&#x7279;&#x5B9A;&#x7684;&#x8BED;&#x6CD5;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x5BF9;&#x8C61;&#x901A;&#x8FC7;&#x8F93;&#x5165;&#x5176;&#x5230; ~/ &#x7EC4;&#x5408;&#x548C;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684; / &#x7B26;&#x53F7;&#x4E2D;&#xFF1A; 1 var r = &#x2DC;/haxe/i; &#x6216;&#x8005;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6B63;&#x5219;&#x8BED;&#x6CD5;&#x521B;&#x5EFA;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A; 1 var r = new EReg ( haxe , i ); &#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x662F;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x6A21;&#x5F0F;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x662F;&#x6807;&#x8BB0;&#x5B57;&#x7B26;&#x4E32;&#xFF08;&#x540E;&#x9762;&#x67E5;&#x770B;&#xFF09;&#x3002; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6807;&#x51C6;&#x7684;&#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x6A21;&#x5F0F;&#xFF0C;&#x5982;&#xFF1A; . &#x4EFB;&#x4F55;&#x5B57;&#x7B26; * &#x91CD;&#x590D;0&#x6216;&#x8005;&#x591A;&#x6B21; + &#x91CD;&#x590D;1&#x6216;&#x8005;&#x591A;&#x6B21; ? &#x53EF;&#x9009;&#x7684;0&#x6216;&#x8005;1&#x6B21; [A-Z0-9] &#x5B57;&#x7B26;&#x8303;&#x56F4; [&#x2C6;\\r\\n\\t] &#x4E0D;&#x5728;&#x8303;&#x56F4;&#x5185;&#x7684;&#x5B57;&#x7B26; (&#x2026;) &#x62EC;&#x53F7;&#x5339;&#x914D;&#x5B57;&#x7B26;&#x7684;&#x5206;&#x7EC4; &#x2C6; &#x5B57;&#x7B26;&#x4E32;&#x8D77;&#x59CB;&#x5B57;&#x7B26;&#xFF08;&#x5728;&#x591A;&#x884C;&#x5339;&#x914D;&#x6A21;&#x5F0F;&#x4E2D;&#x4E00;&#x884C;&#x7684;&#x8D77;&#x59CB;&#x5B57;&#x7B26;&#xFF09; $ &#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5C3E;&#x5B57;&#x7B26;&#xFF08;&#x591A;&#x884C;&#x5339;&#x914D;&#x6A21;&#x5F0F;&#x4E0B;&#x4E00;&#x884C;&#x7684;&#x5C3E;&#x5B57;&#x7B26;&#xFF09; | &#x201C;OR&#x201D;&#x8BED;&#x53E5; &#x4F8B;&#x5982;&#xFF0C;&#x4E0B;&#x9762;&#x7684;&#x589E;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x5339;&#x914D;&#x6709;&#x6548;&#x7684; email &#x5730;&#x5740;&#xFF1A; 1 ~/[A-Z0-9._\\%-]+@[A-Z0-9.-]+\\.[A-Z][A-Z][A-Z]?/i; &#x6CE8;&#x610F; &#x6B63;&#x5219;&#x8868;&#x8FBE;&#x5F0F;&#x7ED3;&#x5C3E;&#x7684; i &#x662F;&#x4E00;&#x4E2A;&#x6807;&#x8BB0;&#xFF0C;&#x4F5C;&#x7528;&#x662F;&#x542F;&#x7528;&#x4E0D;&#x533A;&#x5206;&#x5927;&#x5C0F;&#x5199;&#x7684;&#x5339;&#x914D;&#x3002; &#x53EF;&#x80FD;&#x7684;&#x6807;&#x8BB0;&#x5982;&#x4E0B;&#xFF1A; i &#x4E0D;&#x533A;&#x5206;&#x5927;&#x5C0F;&#x5199;&#x5339;&#x914D; g &#x5168;&#x5C40;&#x66FF;&#x6362;&#x6216;&#x8005;&#x5206;&#x5272;&#xFF0C;&#x67E5;&#x770B;&#x540E;&#x9762; m &#x591A;&#x884C;&#x5339;&#x914D;&#xFF0C; &#x2C6; &#x548C; $ &#x8868;&#x793A;&#x4E00;&#x884C;&#x7684;&#x5F00;&#x5934;&#x548C;&#x7ED3;&#x5C3E; s &#x70B9;&#x53F7; . &#x5C06;&#x4E5F;&#x5339;&#x914D;&#x65B0;&#x884C;&#xFF08;Neko&#xFF0C;C++&#xFF0C;PHP&#xFF0C;Flash &#x548C;Java &#x76EE;&#x6807;&#xFF09; u &#x4F7F;&#x7528;UTF-8&#x5339;&#x914D;&#xFF08;Neko &#x548C; C++&#x76EE;&#x6807;&#xFF09; &#x67E5;&#x770B;EReg API &#x8BE6;&#x7EC6;&#x4E86;&#x89E3;&#x5B83;&#x7684;&#x65B9;&#x6CD5;&#x3002;"},"10.标准库/10.4.Math/10.4.3.整数数学.html":{"title":"","path":"\\10.标准库\\10.4.Math\\10.4.3.整数数学.html","body":"10.4.3.整数数学 如果你的目标平台可以利用整数运算，例如整数除法，它可以被包裹到 Std.int() 中 来改进性能。Haxe编译器就可以对整数运算进行优化。一个例子： 1 var intDivision = Std.int( 6.2 / 4.7 );"},"10.标准库/10.4.Math/10.4.3.整数数学.html#10-4-3-整数数学":{"title":"10.4.3.&#x6574;&#x6570;&#x6570;&#x5B66;","path":"\\10.标准库\\10.4.Math\\10.4.3.整数数学.html#10-4-3-整数数学","body":"&#x5982;&#x679C;&#x4F60;&#x7684;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x6574;&#x6570;&#x8FD0;&#x7B97;&#xFF0C;&#x4F8B;&#x5982;&#x6574;&#x6570;&#x9664;&#x6CD5;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x5305;&#x88F9;&#x5230; Std.int() &#x4E2D; &#x6765;&#x6539;&#x8FDB;&#x6027;&#x80FD;&#x3002;Haxe&#x7F16;&#x8BD1;&#x5668;&#x5C31;&#x53EF;&#x4EE5;&#x5BF9;&#x6574;&#x6570;&#x8FD0;&#x7B97;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#x3002;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; 1 var intDivision = Std.int( 6.2 / 4.7 );"},"10.标准库/10.4.Math/10.4.2.数学错误.html":{"title":"","path":"\\10.标准库\\10.4.Math\\10.4.2.数学错误.html","body":"10.4.2.数学错误 虽然 neko 可以流畅的处理数学错误，如除数为 0 ，这在所有目标语言都是不正确的。根据不同的目标平台，数学错误可能引发异并引起错误。"},"10.标准库/10.4.Math/10.4.2.数学错误.html#10-4-2-数学错误":{"title":"10.4.2.&#x6570;&#x5B66;&#x9519;&#x8BEF;","path":"\\10.标准库\\10.4.Math\\10.4.2.数学错误.html#10-4-2-数学错误","body":"&#x867D;&#x7136; neko &#x53EF;&#x4EE5;&#x6D41;&#x7545;&#x7684;&#x5904;&#x7406;&#x6570;&#x5B66;&#x9519;&#x8BEF;&#xFF0C;&#x5982;&#x9664;&#x6570;&#x4E3A; 0 &#xFF0C;&#x8FD9;&#x5728;&#x6240;&#x6709;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x90FD;&#x662F;&#x4E0D;&#x6B63;&#x786E;&#x7684;&#x3002;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x7684;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#xFF0C;&#x6570;&#x5B66;&#x9519;&#x8BEF;&#x53EF;&#x80FD;&#x5F15;&#x53D1;&#x5F02;&#x5E76;&#x5F15;&#x8D77;&#x9519;&#x8BEF;&#x3002;"},"10.标准库/10.4.Math/10.4.4.扩展.html":{"title":"","path":"\\10.标准库\\10.4.Math\\10.4.4.扩展.html","body":"10.4.4.扩展 经常看到静态扩展使用 math 库。这个代码展示一个简单的例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class MathStaticExtension  /* Converts an angle in radians to degrees */ inline public static function toDegrees (radians: Float ): Float  return radians * 180 / Math.PI;   using MathStaticExtension; class Main  public static function main ()  var ang = 1 / 2 *Math.PI; trace (ang.toDegrees()); //90  "},"10.标准库/10.4.Math/10.4.4.扩展.html#10-4-4-扩展":{"title":"10.4.4.&#x6269;&#x5C55;","path":"\\10.标准库\\10.4.Math\\10.4.4.扩展.html#10-4-4-扩展","body":"&#x7ECF;&#x5E38;&#x770B;&#x5230;&#x9759;&#x6001;&#x6269;&#x5C55;&#x4F7F;&#x7528; math &#x5E93;&#x3002;&#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x5C55;&#x793A;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x4F8B;&#x5B50;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class MathStaticExtension { /* Converts an angle in radians to degrees */ inline public static function toDegrees (radians: Float ): Float { return radians * 180 / Math.PI; } } using MathStaticExtension; class Main { public static function main () { var ang = 1 / 2 *Math.PI; trace (ang.toDegrees()); //90 } }"},"10.标准库/10.4.Math/10.4.Math.html":{"title":"","path":"\\10.标准库\\10.4.Math\\10.4.Math.html","body":"10.4.Math Haxe 包括了一个浮点数数学库，用于一些常见的数学运算。多数函数用于操作和返回浮点数。然而，一个 Int 类型 可以用于接受 Float 的地方，Haxe也会在多数数值运算中转换Int 为 Float（查看数值运算符（第2.1.3）了解更多）。 这里是一些math库使用的例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Main  static public function main ()  var x = 1 / 2 ; var y = 20.2 ; var z = -2 ; trace (Math.abs(z)); //2 trace (Math.sin(x*Math.PI)); //1 trace (Math.ceil(y)); //21 // log is the natural logarithm trace (Math.log(Math.exp( 5 ))); //5 // Output for neko target, may vary // depending on platform trace ( 1 / 0 ); //inf trace ( -1 / 0 ); //-inf trace (Math.sqrt( -1 )); //nan   查看 Math API 了解所有可用的函数。"},"10.标准库/10.4.Math/10.4.Math.html#10-4-Math":{"title":"10.4.Math","path":"\\10.标准库\\10.4.Math\\10.4.Math.html#10-4-Math","body":"Haxe &#x5305;&#x62EC;&#x4E86;&#x4E00;&#x4E2A;&#x6D6E;&#x70B9;&#x6570;&#x6570;&#x5B66;&#x5E93;&#xFF0C;&#x7528;&#x4E8E;&#x4E00;&#x4E9B;&#x5E38;&#x89C1;&#x7684;&#x6570;&#x5B66;&#x8FD0;&#x7B97;&#x3002;&#x591A;&#x6570;&#x51FD;&#x6570;&#x7528;&#x4E8E;&#x64CD;&#x4F5C;&#x548C;&#x8FD4;&#x56DE;&#x6D6E;&#x70B9;&#x6570;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B; &#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x63A5;&#x53D7; Float &#x7684;&#x5730;&#x65B9;&#xFF0C;Haxe&#x4E5F;&#x4F1A;&#x5728;&#x591A;&#x6570;&#x6570;&#x503C;&#x8FD0;&#x7B97;&#x4E2D;&#x8F6C;&#x6362;Int &#x4E3A; Float&#xFF08;&#x67E5;&#x770B;&#x6570;&#x503C;&#x8FD0;&#x7B97;&#x7B26;&#xFF08;&#x7B2C;2.1.3&#xFF09;&#x4E86;&#x89E3;&#x66F4;&#x591A;&#xFF09;&#x3002; &#x8FD9;&#x91CC;&#x662F;&#x4E00;&#x4E9B;math&#x5E93;&#x4F7F;&#x7528;&#x7684;&#x4F8B;&#x5B50;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Main { static public function main () { var x = 1 / 2 ; var y = 20.2 ; var z = -2 ; trace (Math.abs(z)); //2 trace (Math.sin(x*Math.PI)); //1 trace (Math.ceil(y)); //21 // log is the natural logarithm trace (Math.log(Math.exp( 5 ))); //5 // Output for neko target, may vary // depending on platform trace ( 1 / 0 ); //inf trace ( -1 / 0 ); //-inf trace (Math.sqrt( -1 )); //nan } } &#x67E5;&#x770B; Math API &#x4E86;&#x89E3;&#x6240;&#x6709;&#x53EF;&#x7528;&#x7684;&#x51FD;&#x6570;&#x3002;"},"10.标准库/10.5.Lambda/10.5.Lambda.html":{"title":"","path":"\\10.标准库\\10.5.Lambda\\10.5.Lambda.html","body":"10.5.Lambda 定义：Lambda Lambda 是一个函数式语言概念，在Haxe中它允许你应用一个函数到一个列表或者迭代（第6.7节）。Lambda 类是一个函数方法的集合，以使Haxe使用函数风格编程。 通过 using Lambda（查看静态扩展（第6.3节））它被完美的使用，然后作为一个 Iterator 类型的扩展。 在静态目标平台，使用 Iterator 结构可能慢于直接对已知类型执行操作，比如 Array 和 List 。 Lambda 函数 Lambda 类允许我们一次操作一整个迭代。这通常是更好的循环方式，因为它不太容易出错，并且更易读取。方便起见，Array 和 List 类包含一些频繁使用的Lambda 类中的方法。 查看一个例子。exists 函数被指定为： 1 static function existsA( it : IterableA, f : A - Bool ) : Bool 多数Lambda 函数以同样的方式调用。所有Lambda 函数的第一个参数都是要操作目标的 Iterator 。有许多也把一个函数作为一个参数。 Lambda.array，Lambda.list 转换Iterator 为 Array 或 List 。它总是返回一个新的实例。 Lambda.count 计算元素的数量。如果可迭代的是一个 Array 或者 List，则使用它们更快速的 length 属性。 Lambda.empty 确定是否可迭代对象为空。对于所有可迭代对象最好使用这个函数；也快于对比length属性（或者 Lambda.count 的结果）是否为0。 Lambda.has 确定是否特定元素存在于可迭代对象中。 Lambda.exists 确定是否条件是可以被一个元素满足的。 Lambda.indexOf 找出某个特定元素的索引。 Lambda.find 找到给定搜索函数的第一个元素。 Lambda.foreach 确定是否每个元素满足一个条件。 Lambda.iter 对每个元素调用一个函数。 Lambda.concat 合并两个可迭代对象，返回一个新的 List 。 Lambda.filter 找到满足一个条件的元素，返回一个新的 List 。 Lambda.map， Lambda.mapi 应用一个转换到每个元素，返回一个新的 List 。 Lambda.fold 功能性折叠，也被称为缩小、积聚、压缩或者注入。 这个例子演示了Lambda的 filter 和 map 函数对一组字符串的操作： 1 2 3 4 5 6 7 8 9 10 11 12 using Lambda; class Main  static function main ()  var words = [ 'car' , 'boat' , 'cat' , 'frog' ]; var isThreeLetters = function (word) return word.length == 3 ; var capitalize = function (word) return word.toUpperCase(); // Three letter words and capitalized. trace (words.filter(isThreeLetters).map(capitalize)); // [CAR,CAT]   这个例子演示了 Lambda的 count，has ，foreach 和 fold 函数操作一组整数： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 using Lambda; class Main  static function main ()  var numbers = [ 1 , 3 , 5 , 6 , 7 , 8 ]; trace (numbers.count()); // 6 trace (numbers.has( 4 )); // false // test if all numbers are greater/smaller than 20 trace (numbers.foreach( function (v) return v  20 )); // true trace (numbers.foreach( function (v) return v  20 )); // false // sum all the numbers var sum = function (num, total) return total += num; trace (numbers.fold(sum, 0 )); // 30   查看 Lambda API 了解所有可用的函数。"},"10.标准库/10.5.Lambda/10.5.Lambda.html#10-5-Lambda":{"title":"10.5.Lambda","path":"\\10.标准库\\10.5.Lambda\\10.5.Lambda.html#10-5-Lambda","body":"&#x5B9A;&#x4E49;&#xFF1A;Lambda Lambda &#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5F0F;&#x8BED;&#x8A00;&#x6982;&#x5FF5;&#xFF0C;&#x5728;Haxe&#x4E2D;&#x5B83;&#x5141;&#x8BB8;&#x4F60;&#x5E94;&#x7528;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5230;&#x4E00;&#x4E2A;&#x5217;&#x8868;&#x6216;&#x8005;&#x8FED;&#x4EE3;&#xFF08;&#x7B2C;6.7&#x8282;&#xFF09;&#x3002;Lambda &#x7C7B;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x65B9;&#x6CD5;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x4EE5;&#x4F7F;Haxe&#x4F7F;&#x7528;&#x51FD;&#x6570;&#x98CE;&#x683C;&#x7F16;&#x7A0B;&#x3002; &#x901A;&#x8FC7; using Lambda&#xFF08;&#x67E5;&#x770B;&#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09;&#xFF09;&#x5B83;&#x88AB;&#x5B8C;&#x7F8E;&#x7684;&#x4F7F;&#x7528;&#xFF0C;&#x7136;&#x540E;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A; Iterator &#x7C7B;&#x578B;&#x7684;&#x6269;&#x5C55;&#x3002; &#x5728;&#x9759;&#x6001;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#xFF0C;&#x4F7F;&#x7528; Iterator &#x7ED3;&#x6784;&#x53EF;&#x80FD;&#x6162;&#x4E8E;&#x76F4;&#x63A5;&#x5BF9;&#x5DF2;&#x77E5;&#x7C7B;&#x578B;&#x6267;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x6BD4;&#x5982; Array &#x548C; List &#x3002;"},"10.标准库/10.5.Lambda/10.5.Lambda.html#Lambda-函数":{"title":"Lambda &#x51FD;&#x6570;","path":"\\10.标准库\\10.5.Lambda\\10.5.Lambda.html#Lambda-函数","body":"Lambda &#x7C7B;&#x5141;&#x8BB8;&#x6211;&#x4EEC;&#x4E00;&#x6B21;&#x64CD;&#x4F5C;&#x4E00;&#x6574;&#x4E2A;&#x8FED;&#x4EE3;&#x3002;&#x8FD9;&#x901A;&#x5E38;&#x662F;&#x66F4;&#x597D;&#x7684;&#x5FAA;&#x73AF;&#x65B9;&#x5F0F;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4E0D;&#x592A;&#x5BB9;&#x6613;&#x51FA;&#x9519;&#xFF0C;&#x5E76;&#x4E14;&#x66F4;&#x6613;&#x8BFB;&#x53D6;&#x3002;&#x65B9;&#x4FBF;&#x8D77;&#x89C1;&#xFF0C;Array &#x548C; List &#x7C7B;&#x5305;&#x542B;&#x4E00;&#x4E9B;&#x9891;&#x7E41;&#x4F7F;&#x7528;&#x7684;Lambda &#x7C7B;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#x3002; &#x67E5;&#x770B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x3002;exists &#x51FD;&#x6570;&#x88AB;&#x6307;&#x5B9A;&#x4E3A;&#xFF1A; 1 static function existsA( it : IterableA, f : A - Bool ) : Bool &#x591A;&#x6570;Lambda &#x51FD;&#x6570;&#x4EE5;&#x540C;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#x8C03;&#x7528;&#x3002;&#x6240;&#x6709;Lambda &#x51FD;&#x6570;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x90FD;&#x662F;&#x8981;&#x64CD;&#x4F5C;&#x76EE;&#x6807;&#x7684; Iterator &#x3002;&#x6709;&#x8BB8;&#x591A;&#x4E5F;&#x628A;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x3002; Lambda.array&#xFF0C;Lambda.list &#x8F6C;&#x6362;Iterator &#x4E3A; Array &#x6216; List &#x3002;&#x5B83;&#x603B;&#x662F;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x5B9E;&#x4F8B;&#x3002; Lambda.count &#x8BA1;&#x7B97;&#x5143;&#x7D20;&#x7684;&#x6570;&#x91CF;&#x3002;&#x5982;&#x679C;&#x53EF;&#x8FED;&#x4EE3;&#x7684;&#x662F;&#x4E00;&#x4E2A; Array &#x6216;&#x8005; List&#xFF0C;&#x5219;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x66F4;&#x5FEB;&#x901F;&#x7684; length &#x5C5E;&#x6027;&#x3002; Lambda.empty &#x786E;&#x5B9A;&#x662F;&#x5426;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x4E3A;&#x7A7A;&#x3002;&#x5BF9;&#x4E8E;&#x6240;&#x6709;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x6700;&#x597D;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#xFF1B;&#x4E5F;&#x5FEB;&#x4E8E;&#x5BF9;&#x6BD4;length&#x5C5E;&#x6027;&#xFF08;&#x6216;&#x8005; Lambda.count &#x7684;&#x7ED3;&#x679C;&#xFF09;&#x662F;&#x5426;&#x4E3A;0&#x3002; Lambda.has &#x786E;&#x5B9A;&#x662F;&#x5426;&#x7279;&#x5B9A;&#x5143;&#x7D20;&#x5B58;&#x5728;&#x4E8E;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x4E2D;&#x3002; Lambda.exists &#x786E;&#x5B9A;&#x662F;&#x5426;&#x6761;&#x4EF6;&#x662F;&#x53EF;&#x4EE5;&#x88AB;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x6EE1;&#x8DB3;&#x7684;&#x3002; Lambda.indexOf &#x627E;&#x51FA;&#x67D0;&#x4E2A;&#x7279;&#x5B9A;&#x5143;&#x7D20;&#x7684;&#x7D22;&#x5F15;&#x3002; Lambda.find &#x627E;&#x5230;&#x7ED9;&#x5B9A;&#x641C;&#x7D22;&#x51FD;&#x6570;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x3002; Lambda.foreach &#x786E;&#x5B9A;&#x662F;&#x5426;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x6EE1;&#x8DB3;&#x4E00;&#x4E2A;&#x6761;&#x4EF6;&#x3002; Lambda.iter &#x5BF9;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x8C03;&#x7528;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x3002; Lambda.concat &#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x65B0;&#x7684; List &#x3002; Lambda.filter &#x627E;&#x5230;&#x6EE1;&#x8DB3;&#x4E00;&#x4E2A;&#x6761;&#x4EF6;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x65B0;&#x7684; List &#x3002; Lambda.map&#xFF0C; Lambda.mapi &#x5E94;&#x7528;&#x4E00;&#x4E2A;&#x8F6C;&#x6362;&#x5230;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x65B0;&#x7684; List &#x3002; Lambda.fold &#x529F;&#x80FD;&#x6027;&#x6298;&#x53E0;&#xFF0C;&#x4E5F;&#x88AB;&#x79F0;&#x4E3A;&#x7F29;&#x5C0F;&#x3001;&#x79EF;&#x805A;&#x3001;&#x538B;&#x7F29;&#x6216;&#x8005;&#x6CE8;&#x5165;&#x3002; &#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x6F14;&#x793A;&#x4E86;Lambda&#x7684; filter &#x548C; map &#x51FD;&#x6570;&#x5BF9;&#x4E00;&#x7EC4;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x64CD;&#x4F5C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 using Lambda; class Main { static function main () { var words = [ &apos;car&apos; , &apos;boat&apos; , &apos;cat&apos; , &apos;frog&apos; ]; var isThreeLetters = function (word) return word.length == 3 ; var capitalize = function (word) return word.toUpperCase(); // Three letter words and capitalized. trace (words.filter(isThreeLetters).map(capitalize)); // [CAR,CAT] } } &#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x6F14;&#x793A;&#x4E86; Lambda&#x7684; count&#xFF0C;has &#xFF0C;foreach &#x548C; fold &#x51FD;&#x6570;&#x64CD;&#x4F5C;&#x4E00;&#x7EC4;&#x6574;&#x6570;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 using Lambda; class Main { static function main () { var numbers = [ 1 , 3 , 5 , 6 , 7 , 8 ]; trace (numbers.count()); // 6 trace (numbers.has( 4 )); // false // test if all numbers are greater/smaller than 20 trace (numbers.foreach( function (v) return v  20 )); // true trace (numbers.foreach( function (v) return v  20 )); // false // sum all the numbers var sum = function (num, total) return total += num; trace (numbers.fold(sum, 0 )); // 30 } } &#x67E5;&#x770B; Lambda API &#x4E86;&#x89E3;&#x6240;&#x6709;&#x53EF;&#x7528;&#x7684;&#x51FD;&#x6570;&#x3002;"},"10.标准库/10.6.模板/10.6.模板.html":{"title":"","path":"\\10.标准库\\10.6.模板\\10.6.模板.html","body":"10.6.模板 Haxe 附带了一个标准的模板系统，使用被一个轻量的 haxe.Template 类解释的简单的语法。 模板是一个字符串或者一个文件，用来产生任何种类的取决于输入内容的字符串输出。这是一个小的模板例子： 1 2 3 4 5 6 7 8 9 class Main  static function main ()  var sample = \"My name is strong::name::/strong, em::age::/em years old\" ; var user = name: \"Mark \", age:30; var template = new haxe.Template(sample); var output = template.execute(user); trace(output);   控制台会输出 ： The console will trace My name is Mark, 30 years old. 表达式 ::name:: 变量名 ::expr.field:: 字段访问 ::(expr):: 表达式 expr 被评估 ::(e1 op e2):: 对 e1 和 e2 应用操作符 op ::(135):: 整数 135 。Float类型常量是不允许的 条件 可以使用 ::if flag1:: 测试条件。可选地，条件可以使用 ::elseif flag2:: 或者 ::else:: 。关闭条件使用 ::end:: 。 1 : : if isValid: : valid : : else : : invalid : :end: : 运算符可以被使用，但是不处理运算符优先级。因此需要需要把每个操作放入括号 () 。目前，如下的运算符被允许： + ， - ， * ， / ，  ，  ， = ， = ， == ， != ， &amp;&amp; ，和 || 。 例如， ::((1 + 3) == (2 + 2)):: 会显示 true 。 1 : : if (points == 10 ): : Great! : :end: : 要比较一个字符串，使用双引号 “ 到模板中。 1 : : if (name == \"Mark\" ): : Hi Mark : :end: : 迭代 通过使用 ::foreach:: 迭代一个结构。结束循环使用 ::end:: 。 1 2 3 4 5 6 7 8 9 10 11 12 table tr thName/th thAge/th /tr : :foreach users: : tr td::name::/td td::age::/td /tr : :end: : /table 子模板 要在一个模板中包括另一个模板，传递子模板结果字符串作为一个参数。 1 2 3 4 5 6 7 8 var users = [name: \"Mark \", age:30, name:\" John \", age:45]; var userTemplate = new haxe.Template(\" : :foreach users: : : :name: :(: :age: :) : :end: : \"); var userOutput = userTemplate.execute(users: users); var template = new haxe.Template(\" The users are : :users: : \"); var output = template.execute(users: userOutput); trace(output); 控制台会输出 ： The users are Mark(30) John(45). 模板宏 当部分模板被渲染时要调用自定义的函数，提供一个 宏(macros) 对象到 Template.execute 的参数即可。键会作为模板变量名，值引用一个应该返回 String 的回调函数。这个宏函数的第一个参数总是一个 resolve() 方法，后跟指定的参数。 resolve 函数可以被调用来从模板上下文中取回值。如果 macros 没有这个字段，结果将是未指定的。 下面的例子传递它本身作为宏函数上下文，并从模板执行 display ： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Main  static function main ()  new Main ();  public function new ()  var user = name: \"Mark \", distance:3500; var sample = \" The results: $$display(: :user: :,: :time: :) \"; var template = new haxe.Template(sample); var output = template.execute(user:user, time: 15, this); trace(output);  function display(resolve:String-Dynamic, user:User, time:Int)  return user.name + \" ran \" + (user.distance/1000) + \" kilometers in \" + time + \" minutes \";   typedef User = name:String, distance:Int 控制台会输出如下结果： Mark ran 3.5 kilometers in 15 minutes. 全局 使用 Template.globals 对象来存储可以被贯穿整个 haxe.Template 实例中应用的值。它的优先级低于 Template.execute 的上下文参数。 利用资源 要从代码中分离内容，考虑使用资源嵌入系统（第8.4节）。存放模板内容到一个新的文档，叫做 sample.mtt ，添加 -resource sample.mtt@my_sample 到编译器参数，使用 haxe.Resource.getString 来检索内容。 1 2 3 4 5 6 7 8 9 class Main  static function main ()  var sample = haxe.Resource.getString( \"my_sample\" ); var user = name: \"Mark \", age:30; var template = new haxe.Template(sample); var output = template.execute(user); trace(output);   当在服务端运行模板系统，你可以简单的使用 neko.Lib.print 或者 php.Lib.print ，而不是使用 trace 来显示 HTML 模板给用户。 查看 Template API 详细了解它的方法。"},"10.标准库/10.6.模板/10.6.模板.html#10-6-模板":{"title":"10.6.&#x6A21;&#x677F;","path":"\\10.标准库\\10.6.模板\\10.6.模板.html#10-6-模板","body":"Haxe &#x9644;&#x5E26;&#x4E86;&#x4E00;&#x4E2A;&#x6807;&#x51C6;&#x7684;&#x6A21;&#x677F;&#x7CFB;&#x7EDF;&#xFF0C;&#x4F7F;&#x7528;&#x88AB;&#x4E00;&#x4E2A;&#x8F7B;&#x91CF;&#x7684; haxe.Template &#x7C7B;&#x89E3;&#x91CA;&#x7684;&#x7B80;&#x5355;&#x7684;&#x8BED;&#x6CD5;&#x3002; &#x6A21;&#x677F;&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#xFF0C;&#x7528;&#x6765;&#x4EA7;&#x751F;&#x4EFB;&#x4F55;&#x79CD;&#x7C7B;&#x7684;&#x53D6;&#x51B3;&#x4E8E;&#x8F93;&#x5165;&#x5185;&#x5BB9;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8F93;&#x51FA;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5C0F;&#x7684;&#x6A21;&#x677F;&#x4F8B;&#x5B50;&#xFF1A; 1 2 3 4 5 6 7 8 9 class Main { static function main () { var sample = My name is strong::name::/strong, em::age::/em years old ; var user = {name: Mark , age:30}; var template = new haxe.Template(sample); var output = template.execute(user); trace(output); } } &#x63A7;&#x5236;&#x53F0;&#x4F1A;&#x8F93;&#x51FA; &#xFF1A; The console will trace My name is Mark, 30 years old."},"10.标准库/10.6.模板/10.6.模板.html#表达式":{"title":"&#x8868;&#x8FBE;&#x5F0F;","path":"\\10.标准库\\10.6.模板\\10.6.模板.html#表达式","body":"::name:: &#x53D8;&#x91CF;&#x540D; ::expr.field:: &#x5B57;&#x6BB5;&#x8BBF;&#x95EE; ::(expr):: &#x8868;&#x8FBE;&#x5F0F; expr &#x88AB;&#x8BC4;&#x4F30; ::(e1 op e2):: &#x5BF9; e1 &#x548C; e2 &#x5E94;&#x7528;&#x64CD;&#x4F5C;&#x7B26; op ::(135):: &#x6574;&#x6570; 135 &#x3002;Float&#x7C7B;&#x578B;&#x5E38;&#x91CF;&#x662F;&#x4E0D;&#x5141;&#x8BB8;&#x7684;"},"10.标准库/10.6.模板/10.6.模板.html#条件":{"title":"&#x6761;&#x4EF6;","path":"\\10.标准库\\10.6.模板\\10.6.模板.html#条件","body":"&#x53EF;&#x4EE5;&#x4F7F;&#x7528; ::if flag1:: &#x6D4B;&#x8BD5;&#x6761;&#x4EF6;&#x3002;&#x53EF;&#x9009;&#x5730;&#xFF0C;&#x6761;&#x4EF6;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; ::elseif flag2:: &#x6216;&#x8005; ::else:: &#x3002;&#x5173;&#x95ED;&#x6761;&#x4EF6;&#x4F7F;&#x7528; ::end:: &#x3002; 1 : : if isValid: : valid : : else : : invalid : :end: : &#x8FD0;&#x7B97;&#x7B26;&#x53EF;&#x4EE5;&#x88AB;&#x4F7F;&#x7528;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x5904;&#x7406;&#x8FD0;&#x7B97;&#x7B26;&#x4F18;&#x5148;&#x7EA7;&#x3002;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x9700;&#x8981;&#x628A;&#x6BCF;&#x4E2A;&#x64CD;&#x4F5C;&#x653E;&#x5165;&#x62EC;&#x53F7; () &#x3002;&#x76EE;&#x524D;&#xFF0C;&#x5982;&#x4E0B;&#x7684;&#x8FD0;&#x7B97;&#x7B26;&#x88AB;&#x5141;&#x8BB8;&#xFF1A; + &#xFF0C; - &#xFF0C; * &#xFF0C; / &#xFF0C;  &#xFF0C;  &#xFF0C; = &#xFF0C; = &#xFF0C; == &#xFF0C; != &#xFF0C; &amp;&amp; &#xFF0C;&#x548C; || &#x3002; &#x4F8B;&#x5982;&#xFF0C; ::((1 + 3) == (2 + 2)):: &#x4F1A;&#x663E;&#x793A; true &#x3002; 1 : : if (points == 10 ): : Great! : :end: : &#x8981;&#x6BD4;&#x8F83;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4F7F;&#x7528;&#x53CC;&#x5F15;&#x53F7; &#x201C; &#x5230;&#x6A21;&#x677F;&#x4E2D;&#x3002; 1 : : if (name == Mark ): : Hi Mark : :end: :"},"10.标准库/10.6.模板/10.6.模板.html#迭代":{"title":"&#x8FED;&#x4EE3;","path":"\\10.标准库\\10.6.模板\\10.6.模板.html#迭代","body":"&#x901A;&#x8FC7;&#x4F7F;&#x7528; ::foreach:: &#x8FED;&#x4EE3;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x3002;&#x7ED3;&#x675F;&#x5FAA;&#x73AF;&#x4F7F;&#x7528; ::end:: &#x3002; 1 2 3 4 5 6 7 8 9 10 11 12 table tr thName/th thAge/th /tr : :foreach users: : tr td::name::/td td::age::/td /tr : :end: : /table"},"10.标准库/10.6.模板/10.6.模板.html#子模板":{"title":"&#x5B50;&#x6A21;&#x677F;","path":"\\10.标准库\\10.6.模板\\10.6.模板.html#子模板","body":"&#x8981;&#x5728;&#x4E00;&#x4E2A;&#x6A21;&#x677F;&#x4E2D;&#x5305;&#x62EC;&#x53E6;&#x4E00;&#x4E2A;&#x6A21;&#x677F;&#xFF0C;&#x4F20;&#x9012;&#x5B50;&#x6A21;&#x677F;&#x7ED3;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x3002; 1 2 3 4 5 6 7 8 var users = [{name: Mark , age:30}, {name: John , age:45}]; var userTemplate = new haxe.Template( : :foreach users: : : :name: :(: :age: :) : :end: : ); var userOutput = userTemplate.execute({users: users}); var template = new haxe.Template( The users are : :users: : ); var output = template.execute({users: userOutput}); trace(output); &#x63A7;&#x5236;&#x53F0;&#x4F1A;&#x8F93;&#x51FA; &#xFF1A; The users are Mark(30) John(45)."},"10.标准库/10.6.模板/10.6.模板.html#模板宏":{"title":"&#x6A21;&#x677F;&#x5B8F;","path":"\\10.标准库\\10.6.模板\\10.6.模板.html#模板宏","body":"&#x5F53;&#x90E8;&#x5206;&#x6A21;&#x677F;&#x88AB;&#x6E32;&#x67D3;&#x65F6;&#x8981;&#x8C03;&#x7528;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A; &#x5B8F;(macros) &#x5BF9;&#x8C61;&#x5230; Template.execute &#x7684;&#x53C2;&#x6570;&#x5373;&#x53EF;&#x3002;&#x952E;&#x4F1A;&#x4F5C;&#x4E3A;&#x6A21;&#x677F;&#x53D8;&#x91CF;&#x540D;&#xFF0C;&#x503C;&#x5F15;&#x7528;&#x4E00;&#x4E2A;&#x5E94;&#x8BE5;&#x8FD4;&#x56DE; String &#x7684;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#x3002;&#x8FD9;&#x4E2A;&#x5B8F;&#x51FD;&#x6570;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x603B;&#x662F;&#x4E00;&#x4E2A; resolve() &#x65B9;&#x6CD5;&#xFF0C;&#x540E;&#x8DDF;&#x6307;&#x5B9A;&#x7684;&#x53C2;&#x6570;&#x3002; resolve &#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x88AB;&#x8C03;&#x7528;&#x6765;&#x4ECE;&#x6A21;&#x677F;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x53D6;&#x56DE;&#x503C;&#x3002;&#x5982;&#x679C; macros &#x6CA1;&#x6709;&#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#xFF0C;&#x7ED3;&#x679C;&#x5C06;&#x662F;&#x672A;&#x6307;&#x5B9A;&#x7684;&#x3002; &#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4F20;&#x9012;&#x5B83;&#x672C;&#x8EAB;&#x4F5C;&#x4E3A;&#x5B8F;&#x51FD;&#x6570;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x5E76;&#x4ECE;&#x6A21;&#x677F;&#x6267;&#x884C; display &#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Main { static function main () { new Main (); } public function new () { var user = {name: Mark , distance:3500}; var sample =  The results: $$display(: :user: :,: :time: :) ; var template = new haxe.Template(sample); var output = template.execute({user:user, time: 15}, this); trace(output); } function display(resolve:String-Dynamic, user:User, time:Int) { return user.name +  ran  + (user.distance/1000) +  kilometers in  + time +  minutes ; } } typedef User = {name:String, distance:Int} &#x63A7;&#x5236;&#x53F0;&#x4F1A;&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#x7ED3;&#x679C;&#xFF1A; Mark ran 3.5 kilometers in 15 minutes."},"10.标准库/10.6.模板/10.6.模板.html#全局":{"title":"&#x5168;&#x5C40;","path":"\\10.标准库\\10.6.模板\\10.6.模板.html#全局","body":"&#x4F7F;&#x7528; Template.globals &#x5BF9;&#x8C61;&#x6765;&#x5B58;&#x50A8;&#x53EF;&#x4EE5;&#x88AB;&#x8D2F;&#x7A7F;&#x6574;&#x4E2A; haxe.Template &#x5B9E;&#x4F8B;&#x4E2D;&#x5E94;&#x7528;&#x7684;&#x503C;&#x3002;&#x5B83;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x4F4E;&#x4E8E; Template.execute &#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x53C2;&#x6570;&#x3002;"},"10.标准库/10.6.模板/10.6.模板.html#利用资源":{"title":"&#x5229;&#x7528;&#x8D44;&#x6E90;","path":"\\10.标准库\\10.6.模板\\10.6.模板.html#利用资源","body":"&#x8981;&#x4ECE;&#x4EE3;&#x7801;&#x4E2D;&#x5206;&#x79BB;&#x5185;&#x5BB9;&#xFF0C;&#x8003;&#x8651;&#x4F7F;&#x7528;&#x8D44;&#x6E90;&#x5D4C;&#x5165;&#x7CFB;&#x7EDF;&#xFF08;&#x7B2C;8.4&#x8282;&#xFF09;&#x3002;&#x5B58;&#x653E;&#x6A21;&#x677F;&#x5185;&#x5BB9;&#x5230;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6587;&#x6863;&#xFF0C;&#x53EB;&#x505A; sample.mtt &#xFF0C;&#x6DFB;&#x52A0; -resource sample.mtt@my_sample &#x5230;&#x7F16;&#x8BD1;&#x5668;&#x53C2;&#x6570;&#xFF0C;&#x4F7F;&#x7528; haxe.Resource.getString &#x6765;&#x68C0;&#x7D22;&#x5185;&#x5BB9;&#x3002; 1 2 3 4 5 6 7 8 9 class Main { static function main () { var sample = haxe.Resource.getString( my_sample ); var user = {name: Mark , age:30}; var template = new haxe.Template(sample); var output = template.execute(user); trace(output); } } &#x5F53;&#x5728;&#x670D;&#x52A1;&#x7AEF;&#x8FD0;&#x884C;&#x6A21;&#x677F;&#x7CFB;&#x7EDF;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7684;&#x4F7F;&#x7528; neko.Lib.print &#x6216;&#x8005; php.Lib.print &#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4F7F;&#x7528; trace &#x6765;&#x663E;&#x793A; HTML &#x6A21;&#x677F;&#x7ED9;&#x7528;&#x6237;&#x3002; &#x67E5;&#x770B; Template API &#x8BE6;&#x7EC6;&#x4E86;&#x89E3;&#x5B83;&#x7684;&#x65B9;&#x6CD5;&#x3002;"},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html":{"title":"","path":"\\10.标准库\\10.8.序列化\\10.8.1.格式化序列化.html","body":"10.8.1.格式化序列化 每个支持的值被转换为一个不同前缀字符、后跟需要的数据。 null: n Int: 0为z，或者 i 后跟整数显示（例如 i456） Float: NaN ：k 负无穷 ：m 正无穷 ：p 有限的浮点数 ： d 后跟浮点数显示（如d1.45e-8） Bool ：true 为 t，false 为 f String: y 后跟url编码的字符串长度，然后是冒号 : 和url编码（如 y10:hi%20there,“hi there”） 名称-值 对: 一个序列化的字符串表示名称后跟序列化的值 结构: o 后跟 名称-值对的列表，以g 终止？（例如，oy1:xi2y1:kng，{x:2, k:null}） List: l 后跟序列化的项的列表，后跟h（例如，lnnh ，两个null值的 List） Array: a 后跟序列化的项的列表，后跟h。对于多个连续的 null 值， 使用u 后跟null的数量（例如 ai1i2u4i7ni9h ，[1, 2, null, null, null, null, 7， null, 9]） Date: v 后跟 date 自己（例如 v2010-01-01 12：45：10） haxe.ds.StringMap: b 后跟 名-值对，后跟 h（例如，by1:xi2y1:knh，{“x”= 2, “k”= null}） haxe.ds.IntMap: q 后跟键值对，后跟h。每个键表示为 :（例如，q:4n:5i45:6i7h ，{4=null, 5= 45, 6=7}） haxe.ds.ObjectMap: M 后跟序列化的值对表示键跟值，后跟h haxe.io.Bytes: s 后跟 base64编码字节长度，然后冒号 : ，和A-Za-z0-9% 表示的字节码（例如，s3:AAA ，等于0的2字节，s10:SGVsbG8gIQ ，haxe.io.Bytes.ofString(“Hello !”)） exception: x 后跟异常值 类实例: c 后跟序列化的类名，后跟字段的名-值对，后跟g（例如，cy5:Pointy1:xzy1:yzg ，new Point(0, 0)）（有两个整数字段 x 和 y） 枚举实例 (通过名称): w 后跟序列化的枚举名称，后跟序列化的构造函数名，后跟冒号 : ，后跟参数的数量，后跟参数的值（例如，wy3:Fooy1:A:0 ，Foo.A （无参数），wy3:Fooy1:B:2i4n ，Foo.B(4, null)） 枚举实例(通过索引): j 后跟序列化的枚举名称，后跟冒号 : ，后跟构造函数的索引（从0开始），后跟冒号 :， 后跟参数的数量，后跟参数的值（例如，jy3:Foo:0:0 ， Foo.A （无参数）， jy3:Foo:1:2i4n ，Foo.B(4, null)） 缓存引用: String: R 后跟在字符串缓存中相应的索引（例如，R456） class, enum 或 structure ： r 后跟对象缓存中的相应索引（如，r42） 自定义: C 后跟类名，后跟自定义序列化数据，后跟 g 缓存的元素和枚举构造函数从0开始索引。"},"10.标准库/10.8.序列化/10.8.1.格式化序列化.html#10-8-1-格式化序列化":{"title":"10.8.1.&#x683C;&#x5F0F;&#x5316;&#x5E8F;&#x5217;&#x5316;","path":"\\10.标准库\\10.8.序列化\\10.8.1.格式化序列化.html#10-8-1-格式化序列化","body":"&#x6BCF;&#x4E2A;&#x652F;&#x6301;&#x7684;&#x503C;&#x88AB;&#x8F6C;&#x6362;&#x4E3A;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x524D;&#x7F00;&#x5B57;&#x7B26;&#x3001;&#x540E;&#x8DDF;&#x9700;&#x8981;&#x7684;&#x6570;&#x636E;&#x3002; null: n Int: 0&#x4E3A;z&#xFF0C;&#x6216;&#x8005; i &#x540E;&#x8DDF;&#x6574;&#x6570;&#x663E;&#x793A;&#xFF08;&#x4F8B;&#x5982; i456&#xFF09; Float: NaN &#xFF1A;k &#x8D1F;&#x65E0;&#x7A77; &#xFF1A;m &#x6B63;&#x65E0;&#x7A77; &#xFF1A;p &#x6709;&#x9650;&#x7684;&#x6D6E;&#x70B9;&#x6570; &#xFF1A; d &#x540E;&#x8DDF;&#x6D6E;&#x70B9;&#x6570;&#x663E;&#x793A;&#xFF08;&#x5982;d1.45e-8&#xFF09; Bool &#xFF1A;true &#x4E3A; t&#xFF0C;false &#x4E3A; f String: y &#x540E;&#x8DDF;url&#x7F16;&#x7801;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;&#xFF0C;&#x7136;&#x540E;&#x662F;&#x5192;&#x53F7; : &#x548C;url&#x7F16;&#x7801;&#xFF08;&#x5982; y10:hi%20there,&#x201C;hi there&#x201D;&#xFF09; &#x540D;&#x79F0;-&#x503C; &#x5BF9;: &#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8868;&#x793A;&#x540D;&#x79F0;&#x540E;&#x8DDF;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x503C; &#x7ED3;&#x6784;: o &#x540E;&#x8DDF; &#x540D;&#x79F0;-&#x503C;&#x5BF9;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x4EE5;g &#x7EC8;&#x6B62;&#xFF1F;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;oy1:xi2y1:kng&#xFF0C;{x:2, k:null}&#xFF09; List: l &#x540E;&#x8DDF;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x9879;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x540E;&#x8DDF;h&#xFF08;&#x4F8B;&#x5982;&#xFF0C;lnnh &#xFF0C;&#x4E24;&#x4E2A;null&#x503C;&#x7684; List&#xFF09; Array: a &#x540E;&#x8DDF;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x9879;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x540E;&#x8DDF;h&#x3002;&#x5BF9;&#x4E8E;&#x591A;&#x4E2A;&#x8FDE;&#x7EED;&#x7684; null &#x503C;&#xFF0C; &#x4F7F;&#x7528;u &#x540E;&#x8DDF;null&#x7684;&#x6570;&#x91CF;&#xFF08;&#x4F8B;&#x5982; ai1i2u4i7ni9h &#xFF0C;[1, 2, null, null, null, null, 7&#xFF0C; null, 9]&#xFF09; Date: v &#x540E;&#x8DDF; date &#x81EA;&#x5DF1;&#xFF08;&#x4F8B;&#x5982; v2010-01-01 12&#xFF1A;45&#xFF1A;10&#xFF09; haxe.ds.StringMap: b &#x540E;&#x8DDF; &#x540D;-&#x503C;&#x5BF9;&#xFF0C;&#x540E;&#x8DDF; h&#xFF08;&#x4F8B;&#x5982;&#xFF0C;by1:xi2y1:knh&#xFF0C;{&#x201C;x&#x201D;= 2, &#x201C;k&#x201D;= null}&#xFF09; haxe.ds.IntMap: q &#x540E;&#x8DDF;&#x952E;&#x503C;&#x5BF9;&#xFF0C;&#x540E;&#x8DDF;h&#x3002;&#x6BCF;&#x4E2A;&#x952E;&#x8868;&#x793A;&#x4E3A; :&#xFF08;&#x4F8B;&#x5982;&#xFF0C;q:4n:5i45:6i7h &#xFF0C;{4=null, 5= 45, 6=7}&#xFF09; haxe.ds.ObjectMap: M &#x540E;&#x8DDF;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x503C;&#x5BF9;&#x8868;&#x793A;&#x952E;&#x8DDF;&#x503C;&#xFF0C;&#x540E;&#x8DDF;h haxe.io.Bytes: s &#x540E;&#x8DDF; base64&#x7F16;&#x7801;&#x5B57;&#x8282;&#x957F;&#x5EA6;&#xFF0C;&#x7136;&#x540E;&#x5192;&#x53F7; : &#xFF0C;&#x548C;A-Za-z0-9% &#x8868;&#x793A;&#x7684;&#x5B57;&#x8282;&#x7801;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;s3:AAA &#xFF0C;&#x7B49;&#x4E8E;0&#x7684;2&#x5B57;&#x8282;&#xFF0C;s10:SGVsbG8gIQ &#xFF0C;haxe.io.Bytes.ofString(&#x201C;Hello !&#x201D;)&#xFF09; exception: x &#x540E;&#x8DDF;&#x5F02;&#x5E38;&#x503C; &#x7C7B;&#x5B9E;&#x4F8B;: c &#x540E;&#x8DDF;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x7C7B;&#x540D;&#xFF0C;&#x540E;&#x8DDF;&#x5B57;&#x6BB5;&#x7684;&#x540D;-&#x503C;&#x5BF9;&#xFF0C;&#x540E;&#x8DDF;g&#xFF08;&#x4F8B;&#x5982;&#xFF0C;cy5:Pointy1:xzy1:yzg &#xFF0C;new Point(0, 0)&#xFF09;&#xFF08;&#x6709;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#x5B57;&#x6BB5; x &#x548C; y&#xFF09; &#x679A;&#x4E3E;&#x5B9E;&#x4F8B; (&#x901A;&#x8FC7;&#x540D;&#x79F0;): w &#x540E;&#x8DDF;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x679A;&#x4E3E;&#x540D;&#x79F0;&#xFF0C;&#x540E;&#x8DDF;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x540D;&#xFF0C;&#x540E;&#x8DDF;&#x5192;&#x53F7; : &#xFF0C;&#x540E;&#x8DDF;&#x53C2;&#x6570;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x540E;&#x8DDF;&#x53C2;&#x6570;&#x7684;&#x503C;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;wy3:Fooy1:A:0 &#xFF0C;Foo.A &#xFF08;&#x65E0;&#x53C2;&#x6570;&#xFF09;&#xFF0C;wy3:Fooy1:B:2i4n &#xFF0C;Foo.B(4, null)&#xFF09; &#x679A;&#x4E3E;&#x5B9E;&#x4F8B;(&#x901A;&#x8FC7;&#x7D22;&#x5F15;): j &#x540E;&#x8DDF;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x679A;&#x4E3E;&#x540D;&#x79F0;&#xFF0C;&#x540E;&#x8DDF;&#x5192;&#x53F7; : &#xFF0C;&#x540E;&#x8DDF;&#x6784;&#x9020;&#x51FD;&#x6570;&#x7684;&#x7D22;&#x5F15;&#xFF08;&#x4ECE;0&#x5F00;&#x59CB;&#xFF09;&#xFF0C;&#x540E;&#x8DDF;&#x5192;&#x53F7; :&#xFF0C; &#x540E;&#x8DDF;&#x53C2;&#x6570;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x540E;&#x8DDF;&#x53C2;&#x6570;&#x7684;&#x503C;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;jy3:Foo:0:0 &#xFF0C; Foo.A &#xFF08;&#x65E0;&#x53C2;&#x6570;&#xFF09;&#xFF0C; jy3:Foo:1:2i4n &#xFF0C;Foo.B(4, null)&#xFF09; &#x7F13;&#x5B58;&#x5F15;&#x7528;: String: R &#x540E;&#x8DDF;&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x7F13;&#x5B58;&#x4E2D;&#x76F8;&#x5E94;&#x7684;&#x7D22;&#x5F15;&#xFF08;&#x4F8B;&#x5982;&#xFF0C;R456&#xFF09; class, enum &#x6216; structure &#xFF1A; r &#x540E;&#x8DDF;&#x5BF9;&#x8C61;&#x7F13;&#x5B58;&#x4E2D;&#x7684;&#x76F8;&#x5E94;&#x7D22;&#x5F15;&#xFF08;&#x5982;&#xFF0C;r42&#xFF09; &#x81EA;&#x5B9A;&#x4E49;: C &#x540E;&#x8DDF;&#x7C7B;&#x540D;&#xFF0C;&#x540E;&#x8DDF;&#x81EA;&#x5B9A;&#x4E49;&#x5E8F;&#x5217;&#x5316;&#x6570;&#x636E;&#xFF0C;&#x540E;&#x8DDF; g &#x7F13;&#x5B58;&#x7684;&#x5143;&#x7D20;&#x548C;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4ECE;0&#x5F00;&#x59CB;&#x7D22;&#x5F15;&#x3002;"},"10.标准库/10.7.反射/10.7.反射.html":{"title":"","path":"\\10.标准库\\10.7.反射\\10.7.反射.html","body":"10.7.反射 Haxe 支持运行时的类型和字段反射。必须注意，因为运行时表示不同目标平台之间的一般差异。为了正确的使用反射，需要理解哪种类别的操作是被支持的，哪些不是。鉴于反射的动态特性，这不能总是被在编译时确定。 反射API由两个类组成： Reflect ： 一个轻量级的API，很好的使用于匿名结构，但是对类的有限支持。 Type ： 适用于类和枚举的更加健壮的API 。 可用的方法在 Reflect 和 Type API中详细介绍。 Reflection 是一个强大的工具，但是重要的是，理解它为什么也可能引起问题。举个例子，一些函数接受一个 String 参数，并试图解析它为一个类型或者字段。这很容易带来类型错误： 1 2 3 4 5 class Main  static function main ()  trace (Type.resolveClass( \"Mian\" )); // null   然而，即使没有类型错误，也很容易遇到意料之外的行为： 1 2 3 4 5 6 class Main  static function main ()  // null trace (Type.resolveClass( \"haxe.Template\" ));   这里的问题是，编译器从来没有真正的”看到“ haxe.Template 类型，所以它不会编译输出。此外，即使它看到过这个类型，仍然可能从有问题发生，在无用代码消除（第8.2节）消除的仅通过反射使用的类型或字段。 另一组问题来自于一个事实，一些反射函数有意的接受 Dyanmic（第2.7节） 类型的参数，也就是说，编译器不能检查在参数中传递的是不是正确的。如下的例子演示了当使用 callMethod 时一个常见的错误： 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main  static function main ()  // wrong //Reflect.callMethod(Main, \"f\", []); // right Reflect.callMethod(Main, Reflect.field(Main, \"f\" ), []);  static function f ()  trace ( 'Called' );   注释掉的调用可以被编译器接受，因为它分配字符串 “f” 到被指定为 Dynamic 类型的函数参数 func 。 当使用反射时一个好的建议是，包装它到被原本类型安全的代码调用的一个应用或者API的一些函数中。看一下这个例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 typedef MyStructure =  name: String , score: Int  class Main  static function main ()  var data = reflective(); // At this point data is nicely typed as MyStructure  static function reflective (): MyStructure  // Work with reflection here to get some values we want to return. return  name: \"Reflection \", score: 0    尽管方法 reflective 能和反射一起使用（对于这个事件，而且是Dynamic），但它返回值是一个类型化的结构，可以使调用者使用类型安全的方式。"},"10.标准库/10.7.反射/10.7.反射.html#10-7-反射":{"title":"10.7.&#x53CD;&#x5C04;","path":"\\10.标准库\\10.7.反射\\10.7.反射.html#10-7-反射","body":"Haxe &#x652F;&#x6301;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x7C7B;&#x578B;&#x548C;&#x5B57;&#x6BB5;&#x53CD;&#x5C04;&#x3002;&#x5FC5;&#x987B;&#x6CE8;&#x610F;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD0;&#x884C;&#x65F6;&#x8868;&#x793A;&#x4E0D;&#x540C;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x822C;&#x5DEE;&#x5F02;&#x3002;&#x4E3A;&#x4E86;&#x6B63;&#x786E;&#x7684;&#x4F7F;&#x7528;&#x53CD;&#x5C04;&#xFF0C;&#x9700;&#x8981;&#x7406;&#x89E3;&#x54EA;&#x79CD;&#x7C7B;&#x522B;&#x7684;&#x64CD;&#x4F5C;&#x662F;&#x88AB;&#x652F;&#x6301;&#x7684;&#xFF0C;&#x54EA;&#x4E9B;&#x4E0D;&#x662F;&#x3002;&#x9274;&#x4E8E;&#x53CD;&#x5C04;&#x7684;&#x52A8;&#x6001;&#x7279;&#x6027;&#xFF0C;&#x8FD9;&#x4E0D;&#x80FD;&#x603B;&#x662F;&#x88AB;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x786E;&#x5B9A;&#x3002; &#x53CD;&#x5C04;API&#x7531;&#x4E24;&#x4E2A;&#x7C7B;&#x7EC4;&#x6210;&#xFF1A; Reflect &#xFF1A; &#x4E00;&#x4E2A;&#x8F7B;&#x91CF;&#x7EA7;&#x7684;API&#xFF0C;&#x5F88;&#x597D;&#x7684;&#x4F7F;&#x7528;&#x4E8E;&#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x7C7B;&#x7684;&#x6709;&#x9650;&#x652F;&#x6301;&#x3002; Type &#xFF1A; &#x9002;&#x7528;&#x4E8E;&#x7C7B;&#x548C;&#x679A;&#x4E3E;&#x7684;&#x66F4;&#x52A0;&#x5065;&#x58EE;&#x7684;API &#x3002; &#x53EF;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#x5728; Reflect &#x548C; Type API&#x4E2D;&#x8BE6;&#x7EC6;&#x4ECB;&#x7ECD;&#x3002; Reflection &#x662F;&#x4E00;&#x4E2A;&#x5F3A;&#x5927;&#x7684;&#x5DE5;&#x5177;&#xFF0C;&#x4F46;&#x662F;&#x91CD;&#x8981;&#x7684;&#x662F;&#xFF0C;&#x7406;&#x89E3;&#x5B83;&#x4E3A;&#x4EC0;&#x4E48;&#x4E5F;&#x53EF;&#x80FD;&#x5F15;&#x8D77;&#x95EE;&#x9898;&#x3002;&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x4E00;&#x4E9B;&#x51FD;&#x6570;&#x63A5;&#x53D7;&#x4E00;&#x4E2A; String &#x53C2;&#x6570;&#xFF0C;&#x5E76;&#x8BD5;&#x56FE;&#x89E3;&#x6790;&#x5B83;&#x4E3A;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x6216;&#x8005;&#x5B57;&#x6BB5;&#x3002;&#x8FD9;&#x5F88;&#x5BB9;&#x6613;&#x5E26;&#x6765;&#x7C7B;&#x578B;&#x9519;&#x8BEF;&#xFF1A; 1 2 3 4 5 class Main { static function main () { trace (Type.resolveClass( Mian )); // null } } &#x7136;&#x800C;&#xFF0C;&#x5373;&#x4F7F;&#x6CA1;&#x6709;&#x7C7B;&#x578B;&#x9519;&#x8BEF;&#xFF0C;&#x4E5F;&#x5F88;&#x5BB9;&#x6613;&#x9047;&#x5230;&#x610F;&#x6599;&#x4E4B;&#x5916;&#x7684;&#x884C;&#x4E3A;&#xFF1A; 1 2 3 4 5 6 class Main { static function main () { // null trace (Type.resolveClass( haxe.Template )); } } &#x8FD9;&#x91CC;&#x7684;&#x95EE;&#x9898;&#x662F;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4ECE;&#x6765;&#x6CA1;&#x6709;&#x771F;&#x6B63;&#x7684;&#x201D;&#x770B;&#x5230;&#x201C; haxe.Template &#x7C7B;&#x578B;&#xFF0C;&#x6240;&#x4EE5;&#x5B83;&#x4E0D;&#x4F1A;&#x7F16;&#x8BD1;&#x8F93;&#x51FA;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x5373;&#x4F7F;&#x5B83;&#x770B;&#x5230;&#x8FC7;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x4ECD;&#x7136;&#x53EF;&#x80FD;&#x4ECE;&#x6709;&#x95EE;&#x9898;&#x53D1;&#x751F;&#xFF0C;&#x5728;&#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664;&#xFF08;&#x7B2C;8.2&#x8282;&#xFF09;&#x6D88;&#x9664;&#x7684;&#x4EC5;&#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x4F7F;&#x7528;&#x7684;&#x7C7B;&#x578B;&#x6216;&#x5B57;&#x6BB5;&#x3002; &#x53E6;&#x4E00;&#x7EC4;&#x95EE;&#x9898;&#x6765;&#x81EA;&#x4E8E;&#x4E00;&#x4E2A;&#x4E8B;&#x5B9E;&#xFF0C;&#x4E00;&#x4E9B;&#x53CD;&#x5C04;&#x51FD;&#x6570;&#x6709;&#x610F;&#x7684;&#x63A5;&#x53D7; Dyanmic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09; &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4E0D;&#x80FD;&#x68C0;&#x67E5;&#x5728;&#x53C2;&#x6570;&#x4E2D;&#x4F20;&#x9012;&#x7684;&#x662F;&#x4E0D;&#x662F;&#x6B63;&#x786E;&#x7684;&#x3002;&#x5982;&#x4E0B;&#x7684;&#x4F8B;&#x5B50;&#x6F14;&#x793A;&#x4E86;&#x5F53;&#x4F7F;&#x7528; callMethod &#x65F6;&#x4E00;&#x4E2A;&#x5E38;&#x89C1;&#x7684;&#x9519;&#x8BEF;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main { static function main () { // wrong //Reflect.callMethod(Main, f, []); // right Reflect.callMethod(Main, Reflect.field(Main, f ), []); } static function f () { trace ( &apos;Called&apos; ); } } &#x6CE8;&#x91CA;&#x6389;&#x7684;&#x8C03;&#x7528;&#x53EF;&#x4EE5;&#x88AB;&#x7F16;&#x8BD1;&#x5668;&#x63A5;&#x53D7;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x5206;&#x914D;&#x5B57;&#x7B26;&#x4E32; &#x201C;f&#x201D; &#x5230;&#x88AB;&#x6307;&#x5B9A;&#x4E3A; Dynamic &#x7C7B;&#x578B;&#x7684;&#x51FD;&#x6570;&#x53C2;&#x6570; func &#x3002; &#x5F53;&#x4F7F;&#x7528;&#x53CD;&#x5C04;&#x65F6;&#x4E00;&#x4E2A;&#x597D;&#x7684;&#x5EFA;&#x8BAE;&#x662F;&#xFF0C;&#x5305;&#x88C5;&#x5B83;&#x5230;&#x88AB;&#x539F;&#x672C;&#x7C7B;&#x578B;&#x5B89;&#x5168;&#x7684;&#x4EE3;&#x7801;&#x8C03;&#x7528;&#x7684;&#x4E00;&#x4E2A;&#x5E94;&#x7528;&#x6216;&#x8005;API&#x7684;&#x4E00;&#x4E9B;&#x51FD;&#x6570;&#x4E2D;&#x3002;&#x770B;&#x4E00;&#x4E0B;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 typedef MyStructure = { name: String , score: Int } class Main { static function main () { var data = reflective(); // At this point data is nicely typed as MyStructure } static function reflective (): MyStructure { // Work with reflection here to get some values we want to return. return { name: Reflection , score: 0 } } } &#x5C3D;&#x7BA1;&#x65B9;&#x6CD5; reflective &#x80FD;&#x548C;&#x53CD;&#x5C04;&#x4E00;&#x8D77;&#x4F7F;&#x7528;&#xFF08;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x4E8B;&#x4EF6;&#xFF0C;&#x800C;&#x4E14;&#x662F;Dynamic&#xFF09;&#xFF0C;&#x4F46;&#x5B83;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x5316;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x8C03;&#x7528;&#x8005;&#x4F7F;&#x7528;&#x7C7B;&#x578B;&#x5B89;&#x5168;&#x7684;&#x65B9;&#x5F0F;&#x3002;"},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html":{"title":"","path":"\\10.标准库\\10.9.Xml\\10.9.1.开始使用Xml.html","body":"10.9.1.开始使用Xml 创建一个根元素 Xml的一个根元素可以使用 Xml.createElement 方法创建。 1 2 var root = Xml.createElement( 'root' ); trace (root); // root / 一个根节点元素也可以通过解析一个字符串包含的 XML 数据来创建。 1 2 var root = Xml.parse( 'root /' ).firstElement(); trace (root); // root / 创建子元素 可以使用 addChild 方法添加子元素到根。 1 2 3 var child: Xml = Xml.createElement( 'child' ); root.addChild(child); trace (root); // rootchild//root 可以使用 set() 方法为元素添加属性。 1 2 child. set ( 'name' , 'John' ); trace (root); // rootchild name=\"John\"//root 访问元素和值 这段代码解析一个 XML 字符串为一个 对象结构 Xml ，然后访问对象的属性。 1 2 3 4 5 6 var xmlString = 'hello name=\"world!\"Haxe is great!/hello' ; var xml: Xml = Xml.parse(xmlString).firstElement(); trace (xml.nodeName); // hello trace (xml. get ( 'name' )); // world! trace (xml.firstChild().nodeValue); // Haxe is great! firstChild 和firstElement 之间的不同是，第二个函数返回的第一个子元素为Xml.Element 类型。 迭代 Xml 元素 我也也可以用其它方法迭代每个子节点或元素。 1 2 3 4 5 6 7 8 9 10 11 12 for (child in xml)  // iterate on all children.  for (elt in xml.elements())  // iterate on all elements.  for (user in xml.elementsNamed( \"user\" ))  // iterate on all elements with a nodeName \"user\".  for (att in xml.attributes())  // iterator on all attributes.  查看 Xml API 文档详细了解它的方法。"},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#10-9-1-开始使用Xml":{"title":"10.9.1.&#x5F00;&#x59CB;&#x4F7F;&#x7528;Xml","path":"\\10.标准库\\10.9.Xml\\10.9.1.开始使用Xml.html#10-9-1-开始使用Xml","body":""},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建一个根元素":{"title":"&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6839;&#x5143;&#x7D20;","path":"\\10.标准库\\10.9.Xml\\10.9.1.开始使用Xml.html#创建一个根元素","body":"Xml&#x7684;&#x4E00;&#x4E2A;&#x6839;&#x5143;&#x7D20;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; Xml.createElement &#x65B9;&#x6CD5;&#x521B;&#x5EFA;&#x3002; 1 2 var root = Xml.createElement( &apos;root&apos; ); trace (root); // root / &#x4E00;&#x4E2A;&#x6839;&#x8282;&#x70B9;&#x5143;&#x7D20;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x89E3;&#x6790;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5305;&#x542B;&#x7684; XML &#x6570;&#x636E;&#x6765;&#x521B;&#x5EFA;&#x3002; 1 2 var root = Xml.parse( &apos;root /&apos; ).firstElement(); trace (root); // root /"},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#创建子元素":{"title":"&#x521B;&#x5EFA;&#x5B50;&#x5143;&#x7D20;","path":"\\10.标准库\\10.9.Xml\\10.9.1.开始使用Xml.html#创建子元素","body":"&#x53EF;&#x4EE5;&#x4F7F;&#x7528; addChild &#x65B9;&#x6CD5;&#x6DFB;&#x52A0;&#x5B50;&#x5143;&#x7D20;&#x5230;&#x6839;&#x3002; 1 2 3 var child: Xml = Xml.createElement( &apos;child&apos; ); root.addChild(child); trace (root); // rootchild//root &#x53EF;&#x4EE5;&#x4F7F;&#x7528; set() &#x65B9;&#x6CD5;&#x4E3A;&#x5143;&#x7D20;&#x6DFB;&#x52A0;&#x5C5E;&#x6027;&#x3002; 1 2 child. set ( &apos;name&apos; , &apos;John&apos; ); trace (root); // rootchild name=John//root"},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#访问元素和值":{"title":"&#x8BBF;&#x95EE;&#x5143;&#x7D20;&#x548C;&#x503C;","path":"\\10.标准库\\10.9.Xml\\10.9.1.开始使用Xml.html#访问元素和值","body":"&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x89E3;&#x6790;&#x4E00;&#x4E2A; XML &#x5B57;&#x7B26;&#x4E32;&#x4E3A;&#x4E00;&#x4E2A; &#x5BF9;&#x8C61;&#x7ED3;&#x6784; Xml &#xFF0C;&#x7136;&#x540E;&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x7684;&#x5C5E;&#x6027;&#x3002; 1 2 3 4 5 6 var xmlString = &apos;hello name=world!Haxe is great!/hello&apos; ; var xml: Xml = Xml.parse(xmlString).firstElement(); trace (xml.nodeName); // hello trace (xml. get ( &apos;name&apos; )); // world! trace (xml.firstChild().nodeValue); // Haxe is great! firstChild &#x548C;firstElement &#x4E4B;&#x95F4;&#x7684;&#x4E0D;&#x540C;&#x662F;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5B50;&#x5143;&#x7D20;&#x4E3A;Xml.Element &#x7C7B;&#x578B;&#x3002;"},"10.标准库/10.9.Xml/10.9.1.开始使用Xml.html#迭代-Xml-元素":{"title":"&#x8FED;&#x4EE3; Xml &#x5143;&#x7D20;","path":"\\10.标准库\\10.9.Xml\\10.9.1.开始使用Xml.html#迭代-Xml-元素","body":"&#x6211;&#x4E5F;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x5176;&#x5B83;&#x65B9;&#x6CD5;&#x8FED;&#x4EE3;&#x6BCF;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#x6216;&#x5143;&#x7D20;&#x3002; 1 2 3 4 5 6 7 8 9 10 11 12 for (child in xml) { // iterate on all children. } for (elt in xml.elements()) { // iterate on all elements. } for (user in xml.elementsNamed( user )) { // iterate on all elements with a nodeName user. } for (att in xml.attributes()) { // iterator on all attributes. } &#x67E5;&#x770B; Xml API &#x6587;&#x6863;&#x8BE6;&#x7EC6;&#x4E86;&#x89E3;&#x5B83;&#x7684;&#x65B9;&#x6CD5;&#x3002;"},"10.标准库/10.9.Xml/10.9.2.解析Xml.html":{"title":"","path":"\\10.标准库\\10.9.Xml\\10.9.2.解析Xml.html","body":"10.9.2.解析Xml 静态方法 Xml.parse 可以用来解析 XML 数据 并从其中获得一个 Haxe 值。 1 2 var xml = Xml.parse( 'rootHaxe is great!/root' ).firstElement(); trace (xml.firstChild().nodeValue);"},"10.标准库/10.9.Xml/10.9.2.解析Xml.html#10-9-2-解析Xml":{"title":"10.9.2.&#x89E3;&#x6790;Xml","path":"\\10.标准库\\10.9.Xml\\10.9.2.解析Xml.html#10-9-2-解析Xml","body":"&#x9759;&#x6001;&#x65B9;&#x6CD5; Xml.parse &#x53EF;&#x4EE5;&#x7528;&#x6765;&#x89E3;&#x6790; XML &#x6570;&#x636E; &#x5E76;&#x4ECE;&#x5176;&#x4E2D;&#x83B7;&#x5F97;&#x4E00;&#x4E2A; Haxe &#x503C;&#x3002; 1 2 var xml = Xml.parse( &apos;rootHaxe is great!/root&apos; ).firstElement(); trace (xml.firstChild().nodeValue);"},"10.标准库/10.8.序列化/10.8.序列化.html":{"title":"","path":"\\10.标准库\\10.8.序列化\\10.8.序列化.html","body":"10.8.序列化 许多运行时值可以被序列化或反序列化，使用 haxe.Serializer 和 haxe.Unserializer 类。都支持两种用法： 创建一个实例，并不断的调用 serialize / unserialize 方法来处理多个值。 调用它们的静态 run 方法来 序列化/反序列化 一个单独的值。 下面的例子演示了第一种用法： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import haxe.Serializer; import haxe.Unserializer; class Main  static function main ()  var serializer = new Serializer (); serializer.serialize( \"foo\" ); serializer.serialize( 12 ); var s = serializer.toString(); trace (s); // y3:fooi12 var unserializer = new Unserializer (s); trace (unserializer.unserialize()); // foo trace (unserializer.unserialize()); // 12   序列化的结果（这里存储在局部变量 s）是一个 String，并且可以被任意甚至远程地传递。它的格式以 序列化格式（第10.8.1节）描述。 支持的值 null Bool， Int 和 Float （包括无穷值和 NaN） String Date haxe.io.Bytes （编码为 base64） Array 和 List haxe.ds.StringMap， haxe.ds.IntMap 和 haxe.ds.ObjectMap 匿名结构 Haxe 类实例（并不是原生的） 枚举实例 序列化配置 序列化可以以两种方式配置。对于一个静态变量，可以被设置来改变所有 haxe.Serializer 实例，一个成员变量可以被设置来影响一个特定实例： USE_CACHE，userCache ： 如果为 true，重复的结构或类/枚举实例被参照序列化。这可以避免递归数据的无限循环更长的序列化时间。默认，对象缓存是禁用的；然而字符串总是被缓存。 USE_ENUM_INDEX，useEnumIndex ： 如果为 true ，枚举构造函数被它们的索引序列化而不是它们的名字。这可以使结果字符串更短，但是如果 枚举构造函数在反序列化之前被插入到这个类型，将会打断。这个行为默认是禁止的。 反序列化行为 如果序列化结果被存储，之后使用于反序列化，必须注意当使用类和枚举实例时要保持兼容性。之后重要的是准确理解反序列化如何实现的。 做反序列化的地方类型必须在运行时可以获得的。如果无用代码消除被激活，只是通过序列化使用的类型可能会被删除。 每个 Unserializer 都有一个成员变量 resolver ，用于通过名字解析类和枚举。Unserializer 一经创建，它被设置为 Unserializer.DEFAULT_RESOLVER 。它和实例成员都可以被设置为一个定制 分析器。 类使用 resolver.resolveClass(name) 通过名字解析。实例然后被使用 Type.createEmptyInstance 创建，这意味着 这个类构造函数没有被调用。最终，实例字段根据序列化的值被设置。 枚举使用 resolver.resolveEnum(name)通过名字及诶系。枚举实例然后被使用 Type.createEnum创建，如果可用，则使用序列化的参数值。如果构造函数参数由于序列化被改变，结果是未指定的。 自定义的（反）序列化 如果一个类定义了成员方法 hxSerialize，这个方法被序列化器调用，允许对类的自定义序列化。同样，如果一个类定义了成员方法 hxUnserialize，它被反序列化器调用： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import haxe.Serializer; import haxe.Unserializer; class Main  var x: Int ; var y: Int ; static function main ()  var s = Serializer.run( new Main ( 1 , 2 )); var c: Main = Unserializer.run(s); trace (c.x); // 1 trace (c.y); // -1  function new (x, y)  this .x = x; this .y = y;  @:keep function hxSerialize (s: Serializer )  s.serialize(x);  @:keep function hxUnserialize (u: Unserializer )  x = u.unserialize(); y = -1 ;   在这个例子中，我们决定要忽略成员变量 y的值，并且不序列化它。相反，我们在 hxUnserialize中默认它为 -1 。两个方法都使用 @:keep 元数据注解，以防止无用代码消除删除它们，因为它们在代码中从未恰当的引用。 查看 Serializer 和 Unserializer API 文档了解详细内容。"},"10.标准库/10.8.序列化/10.8.序列化.html#10-8-序列化":{"title":"10.8.&#x5E8F;&#x5217;&#x5316;","path":"\\10.标准库\\10.8.序列化\\10.8.序列化.html#10-8-序列化","body":"&#x8BB8;&#x591A;&#x8FD0;&#x884C;&#x65F6;&#x503C;&#x53EF;&#x4EE5;&#x88AB;&#x5E8F;&#x5217;&#x5316;&#x6216;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#xFF0C;&#x4F7F;&#x7528; haxe.Serializer &#x548C; haxe.Unserializer &#x7C7B;&#x3002;&#x90FD;&#x652F;&#x6301;&#x4E24;&#x79CD;&#x7528;&#x6CD5;&#xFF1A; &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;&#xFF0C;&#x5E76;&#x4E0D;&#x65AD;&#x7684;&#x8C03;&#x7528; serialize / unserialize &#x65B9;&#x6CD5;&#x6765;&#x5904;&#x7406;&#x591A;&#x4E2A;&#x503C;&#x3002; &#x8C03;&#x7528;&#x5B83;&#x4EEC;&#x7684;&#x9759;&#x6001; run &#x65B9;&#x6CD5;&#x6765; &#x5E8F;&#x5217;&#x5316;/&#x53CD;&#x5E8F;&#x5217;&#x5316; &#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x503C;&#x3002; &#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x6F14;&#x793A;&#x4E86;&#x7B2C;&#x4E00;&#x79CD;&#x7528;&#x6CD5;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import haxe.Serializer; import haxe.Unserializer; class Main { static function main () { var serializer = new Serializer (); serializer.serialize( foo ); serializer.serialize( 12 ); var s = serializer.toString(); trace (s); // y3:fooi12 var unserializer = new Unserializer (s); trace (unserializer.unserialize()); // foo trace (unserializer.unserialize()); // 12 } } &#x5E8F;&#x5217;&#x5316;&#x7684;&#x7ED3;&#x679C;&#xFF08;&#x8FD9;&#x91CC;&#x5B58;&#x50A8;&#x5728;&#x5C40;&#x90E8;&#x53D8;&#x91CF; s&#xFF09;&#x662F;&#x4E00;&#x4E2A; String&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x88AB;&#x4EFB;&#x610F;&#x751A;&#x81F3;&#x8FDC;&#x7A0B;&#x5730;&#x4F20;&#x9012;&#x3002;&#x5B83;&#x7684;&#x683C;&#x5F0F;&#x4EE5; &#x5E8F;&#x5217;&#x5316;&#x683C;&#x5F0F;&#xFF08;&#x7B2C;10.8.1&#x8282;&#xFF09;&#x63CF;&#x8FF0;&#x3002;"},"10.标准库/10.8.序列化/10.8.序列化.html#支持的值":{"title":"&#x652F;&#x6301;&#x7684;&#x503C;","path":"\\10.标准库\\10.8.序列化\\10.8.序列化.html#支持的值","body":"null Bool&#xFF0C; Int &#x548C; Float &#xFF08;&#x5305;&#x62EC;&#x65E0;&#x7A77;&#x503C;&#x548C; NaN&#xFF09; String Date haxe.io.Bytes &#xFF08;&#x7F16;&#x7801;&#x4E3A; base64&#xFF09; Array &#x548C; List haxe.ds.StringMap&#xFF0C; haxe.ds.IntMap &#x548C; haxe.ds.ObjectMap &#x533F;&#x540D;&#x7ED3;&#x6784; Haxe &#x7C7B;&#x5B9E;&#x4F8B;&#xFF08;&#x5E76;&#x4E0D;&#x662F;&#x539F;&#x751F;&#x7684;&#xFF09; &#x679A;&#x4E3E;&#x5B9E;&#x4F8B;"},"10.标准库/10.8.序列化/10.8.序列化.html#序列化配置":{"title":"&#x5E8F;&#x5217;&#x5316;&#x914D;&#x7F6E;","path":"\\10.标准库\\10.8.序列化\\10.8.序列化.html#序列化配置","body":"&#x5E8F;&#x5217;&#x5316;&#x53EF;&#x4EE5;&#x4EE5;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x914D;&#x7F6E;&#x3002;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x53D8;&#x91CF;&#xFF0C;&#x53EF;&#x4EE5;&#x88AB;&#x8BBE;&#x7F6E;&#x6765;&#x6539;&#x53D8;&#x6240;&#x6709; haxe.Serializer &#x5B9E;&#x4F8B;&#xFF0C;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x53EF;&#x4EE5;&#x88AB;&#x8BBE;&#x7F6E;&#x6765;&#x5F71;&#x54CD;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x5B9E;&#x4F8B;&#xFF1A; USE_CACHE&#xFF0C;userCache &#xFF1A; &#x5982;&#x679C;&#x4E3A; true&#xFF0C;&#x91CD;&#x590D;&#x7684;&#x7ED3;&#x6784;&#x6216;&#x7C7B;/&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x88AB;&#x53C2;&#x7167;&#x5E8F;&#x5217;&#x5316;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x9012;&#x5F52;&#x6570;&#x636E;&#x7684;&#x65E0;&#x9650;&#x5FAA;&#x73AF;&#x66F4;&#x957F;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x65F6;&#x95F4;&#x3002;&#x9ED8;&#x8BA4;&#xFF0C;&#x5BF9;&#x8C61;&#x7F13;&#x5B58;&#x662F;&#x7981;&#x7528;&#x7684;&#xFF1B;&#x7136;&#x800C;&#x5B57;&#x7B26;&#x4E32;&#x603B;&#x662F;&#x88AB;&#x7F13;&#x5B58;&#x3002; USE_ENUM_INDEX&#xFF0C;useEnumIndex &#xFF1A; &#x5982;&#x679C;&#x4E3A; true &#xFF0C;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#x88AB;&#x5B83;&#x4EEC;&#x7684;&#x7D22;&#x5F15;&#x5E8F;&#x5217;&#x5316;&#x800C;&#x4E0D;&#x662F;&#x5B83;&#x4EEC;&#x7684;&#x540D;&#x5B57;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x4F7F;&#x7ED3;&#x679C;&#x5B57;&#x7B26;&#x4E32;&#x66F4;&#x77ED;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C; &#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#x5728;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x4E4B;&#x524D;&#x88AB;&#x63D2;&#x5165;&#x5230;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x5C06;&#x4F1A;&#x6253;&#x65AD;&#x3002;&#x8FD9;&#x4E2A;&#x884C;&#x4E3A;&#x9ED8;&#x8BA4;&#x662F;&#x7981;&#x6B62;&#x7684;&#x3002;"},"10.标准库/10.8.序列化/10.8.序列化.html#反序列化行为":{"title":"&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x884C;&#x4E3A;","path":"\\10.标准库\\10.8.序列化\\10.8.序列化.html#反序列化行为","body":"&#x5982;&#x679C;&#x5E8F;&#x5217;&#x5316;&#x7ED3;&#x679C;&#x88AB;&#x5B58;&#x50A8;&#xFF0C;&#x4E4B;&#x540E;&#x4F7F;&#x7528;&#x4E8E;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#xFF0C;&#x5FC5;&#x987B;&#x6CE8;&#x610F;&#x5F53;&#x4F7F;&#x7528;&#x7C7B;&#x548C;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x65F6;&#x8981;&#x4FDD;&#x6301;&#x517C;&#x5BB9;&#x6027;&#x3002;&#x4E4B;&#x540E;&#x91CD;&#x8981;&#x7684;&#x662F;&#x51C6;&#x786E;&#x7406;&#x89E3;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x7684;&#x3002; &#x505A;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x5730;&#x65B9;&#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x7684;&#x3002;&#x5982;&#x679C;&#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664;&#x88AB;&#x6FC0;&#x6D3B;&#xFF0C;&#x53EA;&#x662F;&#x901A;&#x8FC7;&#x5E8F;&#x5217;&#x5316;&#x4F7F;&#x7528;&#x7684;&#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x4F1A;&#x88AB;&#x5220;&#x9664;&#x3002; &#x6BCF;&#x4E2A; Unserializer &#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF; resolver &#xFF0C;&#x7528;&#x4E8E;&#x901A;&#x8FC7;&#x540D;&#x5B57;&#x89E3;&#x6790;&#x7C7B;&#x548C;&#x679A;&#x4E3E;&#x3002;Unserializer &#x4E00;&#x7ECF;&#x521B;&#x5EFA;&#xFF0C;&#x5B83;&#x88AB;&#x8BBE;&#x7F6E;&#x4E3A; Unserializer.DEFAULT_RESOLVER &#x3002;&#x5B83;&#x548C;&#x5B9E;&#x4F8B;&#x6210;&#x5458;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x8BBE;&#x7F6E;&#x4E3A;&#x4E00;&#x4E2A;&#x5B9A;&#x5236; &#x5206;&#x6790;&#x5668;&#x3002; &#x7C7B;&#x4F7F;&#x7528; resolver.resolveClass(name) &#x901A;&#x8FC7;&#x540D;&#x5B57;&#x89E3;&#x6790;&#x3002;&#x5B9E;&#x4F8B;&#x7136;&#x540E;&#x88AB;&#x4F7F;&#x7528; Type.createEmptyInstance &#x521B;&#x5EFA;&#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x7740; &#x8FD9;&#x4E2A;&#x7C7B;&#x6784;&#x9020;&#x51FD;&#x6570;&#x6CA1;&#x6709;&#x88AB;&#x8C03;&#x7528;&#x3002;&#x6700;&#x7EC8;&#xFF0C;&#x5B9E;&#x4F8B;&#x5B57;&#x6BB5;&#x6839;&#x636E;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x503C;&#x88AB;&#x8BBE;&#x7F6E;&#x3002; &#x679A;&#x4E3E;&#x4F7F;&#x7528; resolver.resolveEnum(name)&#x901A;&#x8FC7;&#x540D;&#x5B57;&#x53CA;&#x8BF6;&#x7CFB;&#x3002;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x7136;&#x540E;&#x88AB;&#x4F7F;&#x7528; Type.createEnum&#x521B;&#x5EFA;&#xFF0C;&#x5982;&#x679C;&#x53EF;&#x7528;&#xFF0C;&#x5219;&#x4F7F;&#x7528;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x53C2;&#x6570;&#x503C;&#x3002;&#x5982;&#x679C;&#x6784;&#x9020;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x7531;&#x4E8E;&#x5E8F;&#x5217;&#x5316;&#x88AB;&#x6539;&#x53D8;&#xFF0C;&#x7ED3;&#x679C;&#x662F;&#x672A;&#x6307;&#x5B9A;&#x7684;&#x3002;"},"10.标准库/10.8.序列化/10.8.序列化.html#自定义的（反）序列化":{"title":"&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#xFF08;&#x53CD;&#xFF09;&#x5E8F;&#x5217;&#x5316;","path":"\\10.标准库\\10.8.序列化\\10.8.序列化.html#自定义的（反）序列化","body":"&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x5B9A;&#x4E49;&#x4E86;&#x6210;&#x5458;&#x65B9;&#x6CD5; hxSerialize&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x88AB;&#x5E8F;&#x5217;&#x5316;&#x5668;&#x8C03;&#x7528;&#xFF0C;&#x5141;&#x8BB8;&#x5BF9;&#x7C7B;&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x5E8F;&#x5217;&#x5316;&#x3002;&#x540C;&#x6837;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x5B9A;&#x4E49;&#x4E86;&#x6210;&#x5458;&#x65B9;&#x6CD5; hxUnserialize&#xFF0C;&#x5B83;&#x88AB;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x5668;&#x8C03;&#x7528;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import haxe.Serializer; import haxe.Unserializer; class Main { var x: Int ; var y: Int ; static function main () { var s = Serializer.run( new Main ( 1 , 2 )); var c: Main = Unserializer.run(s); trace (c.x); // 1 trace (c.y); // -1 } function new (x, y) { this .x = x; this .y = y; } @:keep function hxSerialize (s: Serializer ) { s.serialize(x); } @:keep function hxUnserialize (u: Unserializer ) { x = u.unserialize(); y = -1 ; } } &#x5728;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x51B3;&#x5B9A;&#x8981;&#x5FFD;&#x7565;&#x6210;&#x5458;&#x53D8;&#x91CF; y&#x7684;&#x503C;&#xFF0C;&#x5E76;&#x4E14;&#x4E0D;&#x5E8F;&#x5217;&#x5316;&#x5B83;&#x3002;&#x76F8;&#x53CD;&#xFF0C;&#x6211;&#x4EEC;&#x5728; hxUnserialize&#x4E2D;&#x9ED8;&#x8BA4;&#x5B83;&#x4E3A; -1 &#x3002;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x90FD;&#x4F7F;&#x7528; @:keep &#x5143;&#x6570;&#x636E;&#x6CE8;&#x89E3;&#xFF0C;&#x4EE5;&#x9632;&#x6B62;&#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664;&#x5220;&#x9664;&#x5B83;&#x4EEC;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x5728;&#x4EE3;&#x7801;&#x4E2D;&#x4ECE;&#x672A;&#x6070;&#x5F53;&#x7684;&#x5F15;&#x7528;&#x3002; &#x67E5;&#x770B; Serializer &#x548C; Unserializer API &#x6587;&#x6863;&#x4E86;&#x89E3;&#x8BE6;&#x7EC6;&#x5185;&#x5BB9;&#x3002;"},"10.标准库/10.9.Xml/10.9.Xml.html":{"title":"","path":"\\10.标准库\\10.9.Xml\\10.9.Xml.html","body":"10.9.Xml Haxe 通过 haxe.XML 类内置提供对使用XML数据的支持。"},"10.标准库/10.9.Xml/10.9.Xml.html#10-9-Xml":{"title":"10.9.Xml","path":"\\10.标准库\\10.9.Xml\\10.9.Xml.html#10-9-Xml","body":"Haxe &#x901A;&#x8FC7; haxe.XML &#x7C7B;&#x5185;&#x7F6E;&#x63D0;&#x4F9B;&#x5BF9;&#x4F7F;&#x7528;XML&#x6570;&#x636E;&#x7684;&#x652F;&#x6301;&#x3002;"},"10.标准库/10.9.Xml/10.9.3.编码Xml.html":{"title":"","path":"\\10.标准库\\10.9.Xml\\10.9.3.编码Xml.html","body":"10.9.3.编码Xml xml.toString() 方法可以用来获取字符串的表示。 1 2 3 4 5 var xml = Xml.createElement( 'root' ); xml.addChild(Xml.createElement( 'child1' )); xml.addChild(Xml.createElement( 'child2' )); trace (xml.toString()); // rootchild1/child2//root"},"10.标准库/10.9.Xml/10.9.3.编码Xml.html#10-9-3-编码Xml":{"title":"10.9.3.&#x7F16;&#x7801;Xml","path":"\\10.标准库\\10.9.Xml\\10.9.3.编码Xml.html#10-9-3-编码Xml","body":"xml.toString() &#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x83B7;&#x53D6;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x8868;&#x793A;&#x3002; 1 2 3 4 5 var xml = Xml.createElement( &apos;root&apos; ); xml.addChild(Xml.createElement( &apos;child1&apos; )); xml.addChild(Xml.createElement( &apos;child2&apos; )); trace (xml.toString()); // rootchild1/child2//root"},"2.类型/2.1.基本类型/2.1.1.数值类型.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.1.数值类型.html","body":"2.1.1.数值类型 Float 类型： Float 表示一个双精度 IEEE 64 位浮点数 Int 类型： Int 表示一个整数 虽然每个 Int 都可以用于一个接受 Float 类型的地方（确切的说，Int 可以赋值到 Float 类型，或者使用 Float 类型统一 Int），而反过来则不行：分配一个 Float 类型到一个 Int 类型可能会丢失精度，是不被隐式的允许的。"},"2.类型/2.1.基本类型/2.1.1.数值类型.html#2-1-1-数值类型":{"title":"2.1.1.&#x6570;&#x503C;&#x7C7B;&#x578B;","path":"\\2.类型\\2.1.基本类型\\2.1.1.数值类型.html#2-1-1-数值类型","body":""},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{"title":"Float","path":"\\2.类型\\2.1.基本类型\\2.1.1.数值类型.html#Float","body":"&#x7C7B;&#x578B;&#xFF1A; Float &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x53CC;&#x7CBE;&#x5EA6; IEEE 64 &#x4F4D;&#x6D6E;&#x70B9;&#x6570;"},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{"title":"Int","path":"\\2.类型\\2.1.基本类型\\2.1.1.数值类型.html#Int","body":"&#x7C7B;&#x578B;&#xFF1A; Int &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x6574;&#x6570; &#x867D;&#x7136;&#x6BCF;&#x4E2A; Int &#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x4E00;&#x4E2A;&#x63A5;&#x53D7; Float &#x7C7B;&#x578B;&#x7684;&#x5730;&#x65B9;&#xFF08;&#x786E;&#x5207;&#x7684;&#x8BF4;&#xFF0C;Int &#x53EF;&#x4EE5;&#x8D4B;&#x503C;&#x5230; Float &#x7C7B;&#x578B;&#xFF0C;&#x6216;&#x8005;&#x4F7F;&#x7528; Float &#x7C7B;&#x578B;&#x7EDF;&#x4E00; Int&#xFF09;&#xFF0C;&#x800C;&#x53CD;&#x8FC7;&#x6765;&#x5219;&#x4E0D;&#x884C;&#xFF1A;&#x5206;&#x914D;&#x4E00;&#x4E2A; Float &#x7C7B;&#x578B;&#x5230;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x4F1A;&#x4E22;&#x5931;&#x7CBE;&#x5EA6;&#xFF0C;&#x662F;&#x4E0D;&#x88AB;&#x9690;&#x5F0F;&#x7684;&#x5141;&#x8BB8;&#x7684;&#x3002;"},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.3.数值运算符.html","body":"2.1.3.数值运算符 下面是Haxe中数值运算符的列表，根据优先级分组： 算术运算符 运算符 操作 操作数1 操作数2 返回值 ++ 递增 Int N/A Int Float N/A Float – 递减 Int N/A Int Float N/A Float + 加法 Float Float Float Float Int Float Int Float Float Int Int Int - 减法 Float Float Float Float Int Float Int Float Float Int Int Int * 乘法 Float Float Float Float Int Float Int Float Float Int Int Int / 除法 Float Float Float Float Int Float Int Float Float Int Int Float % 模运算 Float Float Float Float Int Float Int Float Float Int Int Int 比较运算符 运算符 操作 操作数1 操作数2 返回值 == 相等 Float/Int Float/Int Bool != 不等 Float/Int Float/Int Bool  小于 Float/Int Float/Int Bool = 小于等于 Float/Int Float/Int Bool  大于 Float/Int Float/Int Bool = 大于等于 Float/Int Float/Int Bool 位运算 运算符 操作 操作数1 操作数2 返回值 ~ 位非 Int N/A Int &amp; 位与 Int Int Int \\ 位或 Int Int Int ^ 异或 Int Int Int  左位移 Int Int Int  右位移 Int Int Int  无符号右位移 Int Int Int 枚举的相等性 ： 无参数的枚举总是表示同样的值，所以 == 。 带有参数的枚举可以通过 a.equals(b) 的形式比较（是 Type.enumEquals() 的简化）。 动态类型 ： 至少涉及一个动态类型值的比较未被指定，视目标平台而定。"},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#2-1-3-数值运算符":{"title":"2.1.3.&#x6570;&#x503C;&#x8FD0;&#x7B97;&#x7B26;","path":"\\2.类型\\2.1.基本类型\\2.1.3.数值运算符.html#2-1-3-数值运算符","body":"&#x4E0B;&#x9762;&#x662F;Haxe&#x4E2D;&#x6570;&#x503C;&#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x6839;&#x636E;&#x4F18;&#x5148;&#x7EA7;&#x5206;&#x7EC4;&#xFF1A;"},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{"title":"&#x7B97;&#x672F;&#x8FD0;&#x7B97;&#x7B26;","path":"\\2.类型\\2.1.基本类型\\2.1.3.数值运算符.html#算术运算符","body":"&#x8FD0;&#x7B97;&#x7B26; &#x64CD;&#x4F5C; &#x64CD;&#x4F5C;&#x6570;1 &#x64CD;&#x4F5C;&#x6570;2 &#x8FD4;&#x56DE;&#x503C; ++ &#x9012;&#x589E; Int N/A Int Float N/A Float &#x2013; &#x9012;&#x51CF; Int N/A Int Float N/A Float + &#x52A0;&#x6CD5; Float Float Float Float Int Float Int Float Float Int Int Int - &#x51CF;&#x6CD5; Float Float Float Float Int Float Int Float Float Int Int Int * &#x4E58;&#x6CD5; Float Float Float Float Int Float Int Float Float Int Int Int / &#x9664;&#x6CD5; Float Float Float Float Int Float Int Float Float Int Int Float % &#x6A21;&#x8FD0;&#x7B97; Float Float Float Float Int Float Int Float Float Int Int Int"},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{"title":"&#x6BD4;&#x8F83;&#x8FD0;&#x7B97;&#x7B26;","path":"\\2.类型\\2.1.基本类型\\2.1.3.数值运算符.html#比较运算符","body":"&#x8FD0;&#x7B97;&#x7B26; &#x64CD;&#x4F5C; &#x64CD;&#x4F5C;&#x6570;1 &#x64CD;&#x4F5C;&#x6570;2 &#x8FD4;&#x56DE;&#x503C; == &#x76F8;&#x7B49; Float/Int Float/Int Bool != &#x4E0D;&#x7B49; Float/Int Float/Int Bool  &#x5C0F;&#x4E8E; Float/Int Float/Int Bool = &#x5C0F;&#x4E8E;&#x7B49;&#x4E8E; Float/Int Float/Int Bool  &#x5927;&#x4E8E; Float/Int Float/Int Bool = &#x5927;&#x4E8E;&#x7B49;&#x4E8E; Float/Int Float/Int Bool"},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{"title":"&#x4F4D;&#x8FD0;&#x7B97;","path":"\\2.类型\\2.1.基本类型\\2.1.3.数值运算符.html#位运算","body":"&#x8FD0;&#x7B97;&#x7B26; &#x64CD;&#x4F5C; &#x64CD;&#x4F5C;&#x6570;1 &#x64CD;&#x4F5C;&#x6570;2 &#x8FD4;&#x56DE;&#x503C; ~ &#x4F4D;&#x975E; Int N/A Int &amp; &#x4F4D;&#x4E0E; Int Int Int \\ &#x4F4D;&#x6216; Int Int Int ^ &#x5F02;&#x6216; Int Int Int  &#x5DE6;&#x4F4D;&#x79FB; Int Int Int  &#x53F3;&#x4F4D;&#x79FB; Int Int Int  &#x65E0;&#x7B26;&#x53F7;&#x53F3;&#x4F4D;&#x79FB; Int Int Int &#x679A;&#x4E3E;&#x7684;&#x76F8;&#x7B49;&#x6027; &#xFF1A; &#x65E0;&#x53C2;&#x6570;&#x7684;&#x679A;&#x4E3E;&#x603B;&#x662F;&#x8868;&#x793A;&#x540C;&#x6837;&#x7684;&#x503C;&#xFF0C;&#x6240;&#x4EE5; == &#x3002; &#x5E26;&#x6709;&#x53C2;&#x6570;&#x7684;&#x679A;&#x4E3E;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; a.equals(b) &#x7684;&#x5F62;&#x5F0F;&#x6BD4;&#x8F83;&#xFF08;&#x662F; Type.enumEquals() &#x7684;&#x7B80;&#x5316;&#xFF09;&#x3002; &#x52A8;&#x6001;&#x7C7B;&#x578B; &#xFF1A; &#x81F3;&#x5C11;&#x6D89;&#x53CA;&#x4E00;&#x4E2A;&#x52A8;&#x6001;&#x7C7B;&#x578B;&#x503C;&#x7684;&#x6BD4;&#x8F83;&#x672A;&#x88AB;&#x6307;&#x5B9A;&#xFF0C;&#x89C6;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x800C;&#x5B9A;&#x3002;"},"2.类型/2.1.基本类型/2.1.2.溢出.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.2.溢出.html","body":"2.1.2.溢出 出于性能原因，Haxe 编译器不实施任何溢出行为。溢出检查的任务落到目标平台。这里是一些溢出行为的平台特定提示： C++，Java，C#，Neko，Flash：32位带符号整数有通常的溢出惯例。 PHP，JS，Flash 8：没有原生的 Int 类型，如果到达浮点数限制（252）则会发生精度的损失。 另外， haxe.Int32 和 haxe.Int64 类可以用来确保正确的溢出行为，与平台无关，而额外的计算成本取决于目标平台。"},"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{"title":"2.1.2.&#x6EA2;&#x51FA;","path":"\\2.类型\\2.1.基本类型\\2.1.2.溢出.html#2-1-2-溢出","body":"&#x51FA;&#x4E8E;&#x6027;&#x80FD;&#x539F;&#x56E0;&#xFF0C;Haxe &#x7F16;&#x8BD1;&#x5668;&#x4E0D;&#x5B9E;&#x65BD;&#x4EFB;&#x4F55;&#x6EA2;&#x51FA;&#x884C;&#x4E3A;&#x3002;&#x6EA2;&#x51FA;&#x68C0;&#x67E5;&#x7684;&#x4EFB;&#x52A1;&#x843D;&#x5230;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002;&#x8FD9;&#x91CC;&#x662F;&#x4E00;&#x4E9B;&#x6EA2;&#x51FA;&#x884C;&#x4E3A;&#x7684;&#x5E73;&#x53F0;&#x7279;&#x5B9A;&#x63D0;&#x793A;&#xFF1A; C++&#xFF0C;Java&#xFF0C;C#&#xFF0C;Neko&#xFF0C;Flash&#xFF1A;32&#x4F4D;&#x5E26;&#x7B26;&#x53F7;&#x6574;&#x6570;&#x6709;&#x901A;&#x5E38;&#x7684;&#x6EA2;&#x51FA;&#x60EF;&#x4F8B;&#x3002; PHP&#xFF0C;JS&#xFF0C;Flash 8&#xFF1A;&#x6CA1;&#x6709;&#x539F;&#x751F;&#x7684; Int &#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x5230;&#x8FBE;&#x6D6E;&#x70B9;&#x6570;&#x9650;&#x5236;&#xFF08;252&#xFF09;&#x5219;&#x4F1A;&#x53D1;&#x751F;&#x7CBE;&#x5EA6;&#x7684;&#x635F;&#x5931;&#x3002; &#x53E6;&#x5916;&#xFF0C; haxe.Int32 &#x548C; haxe.Int64 &#x7C7B;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x786E;&#x4FDD;&#x6B63;&#x786E;&#x7684;&#x6EA2;&#x51FA;&#x884C;&#x4E3A;&#xFF0C;&#x4E0E;&#x5E73;&#x53F0;&#x65E0;&#x5173;&#xFF0C;&#x800C;&#x989D;&#x5916;&#x7684;&#x8BA1;&#x7B97;&#x6210;&#x672C;&#x53D6;&#x51B3;&#x4E8E;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002;"},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.4.Bool类型.html","body":"2.1.4.Bool类型 类型 : Bool 类型表示一个非 true 即 false 的值。 Bool 类型的值经常出现在条件中，例如 if(5.16) 和 while(5.14) 。下面的运算符接受并返回 Bool 类型的值： &amp;&amp; （和） || （或） ! （非） Haxe 保证混合的布尔表达式在运行时从左到右被评估，并且只进行需要的评估。 例如，表达式 A &amp;&amp; B 会首先执行 A ，然后再执行 B ，并且只有在 A 的结果为 true 的时候才继续执行 B 。同样，表达式 A || B 在 A 的执行结果为 true 的时候不会执行 B ，因为这时 B 的值是无关紧要的。在如下情况这很重要： 1 if (object != null &amp;&amp; object.field == 1 )   如果 object 为 null 的时候访问 object.field 会导致一个运行时错误，但是对 object != null 的检查则会防止它。"},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{"title":"2.1.4.Bool&#x7C7B;&#x578B;","path":"\\2.类型\\2.1.基本类型\\2.1.4.Bool类型.html#2-1-4-Bool类型","body":"&#x7C7B;&#x578B; : Bool &#x7C7B;&#x578B;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x975E; true &#x5373; false &#x7684;&#x503C;&#x3002; Bool &#x7C7B;&#x578B;&#x7684;&#x503C;&#x7ECF;&#x5E38;&#x51FA;&#x73B0;&#x5728;&#x6761;&#x4EF6;&#x4E2D;&#xFF0C;&#x4F8B;&#x5982; if(5.16) &#x548C; while(5.14) &#x3002;&#x4E0B;&#x9762;&#x7684;&#x8FD0;&#x7B97;&#x7B26;&#x63A5;&#x53D7;&#x5E76;&#x8FD4;&#x56DE; Bool &#x7C7B;&#x578B;&#x7684;&#x503C;&#xFF1A; &amp;&amp; &#xFF08;&#x548C;&#xFF09; || &#xFF08;&#x6216;&#xFF09; ! &#xFF08;&#x975E;&#xFF09; Haxe &#x4FDD;&#x8BC1;&#x6DF7;&#x5408;&#x7684;&#x5E03;&#x5C14;&#x8868;&#x8FBE;&#x5F0F;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x88AB;&#x8BC4;&#x4F30;&#xFF0C;&#x5E76;&#x4E14;&#x53EA;&#x8FDB;&#x884C;&#x9700;&#x8981;&#x7684;&#x8BC4;&#x4F30;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F; A &amp;&amp; B &#x4F1A;&#x9996;&#x5148;&#x6267;&#x884C; A &#xFF0C;&#x7136;&#x540E;&#x518D;&#x6267;&#x884C; B &#xFF0C;&#x5E76;&#x4E14;&#x53EA;&#x6709;&#x5728; A &#x7684;&#x7ED3;&#x679C;&#x4E3A; true &#x7684;&#x65F6;&#x5019;&#x624D;&#x7EE7;&#x7EED;&#x6267;&#x884C; B &#x3002;&#x540C;&#x6837;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F; A || B &#x5728; A &#x7684;&#x6267;&#x884C;&#x7ED3;&#x679C;&#x4E3A; true &#x7684;&#x65F6;&#x5019;&#x4E0D;&#x4F1A;&#x6267;&#x884C; B &#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x65F6; B &#x7684;&#x503C;&#x662F;&#x65E0;&#x5173;&#x7D27;&#x8981;&#x7684;&#x3002;&#x5728;&#x5982;&#x4E0B;&#x60C5;&#x51B5;&#x8FD9;&#x5F88;&#x91CD;&#x8981;&#xFF1A; 1 if (object != null &amp;&amp; object.field == 1 ) { } &#x5982;&#x679C; object &#x4E3A; null &#x7684;&#x65F6;&#x5019;&#x8BBF;&#x95EE; object.field &#x4F1A;&#x5BFC;&#x81F4;&#x4E00;&#x4E2A;&#x8FD0;&#x884C;&#x65F6;&#x9519;&#x8BEF;&#xFF0C;&#x4F46;&#x662F;&#x5BF9; object != null &#x7684;&#x68C0;&#x67E5;&#x5219;&#x4F1A;&#x9632;&#x6B62;&#x5B83;&#x3002;"},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.5.Void类型.html","body":"2.1.5.Void类型 类型 : Void Void 表示一个类型的缺失。它用来表达一些东西（通常是一个函数）没有值。 Void 是类型系统中的一个特殊情况，因为它实际上不是一个类型。它用来表达一个类型的缺失，多数应用于函数参数和返回类型。我们在开始的 “Hello World” 例子中已经见到过 Void 。 1 2 3 4 5 class Main  static public function main (): Void  trace ( \"Hello World\" );   在 函数类型（第2.6节） 中将会探索函数类型的详细信息，这里快速预览一下：例子中函数 main 的类型为 Void-Void ，表示没有参数和返回。Haxe 不允许 Void 类型的字段和变量，如果尝试这样声明，它会发出抱怨： 1 2 // Void类型的参数和变量是不被允许的 var x: Void ; 注：在实际编写测试代码的时候，尝试在类的 main 函数内定义 var x:Void; 并未报错，而作为类字段进行定义则不能编译，提示 “Fields of type Void are not allowed”。【环境：Haxe 3.3.0-rc.1】"},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{"title":"2.1.5.Void&#x7C7B;&#x578B;","path":"\\2.类型\\2.1.基本类型\\2.1.5.Void类型.html#2-1-5-Void类型","body":"&#x7C7B;&#x578B; : Void Void &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x7684;&#x7F3A;&#x5931;&#x3002;&#x5B83;&#x7528;&#x6765;&#x8868;&#x8FBE;&#x4E00;&#x4E9B;&#x4E1C;&#x897F;&#xFF08;&#x901A;&#x5E38;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF09;&#x6CA1;&#x6709;&#x503C;&#x3002; Void &#x662F;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x5B9E;&#x9645;&#x4E0A;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x5B83;&#x7528;&#x6765;&#x8868;&#x8FBE;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x7684;&#x7F3A;&#x5931;&#xFF0C;&#x591A;&#x6570;&#x5E94;&#x7528;&#x4E8E;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x3002;&#x6211;&#x4EEC;&#x5728;&#x5F00;&#x59CB;&#x7684; &#x201C;Hello World&#x201D; &#x4F8B;&#x5B50;&#x4E2D;&#x5DF2;&#x7ECF;&#x89C1;&#x5230;&#x8FC7; Void &#x3002; 1 2 3 4 5 class Main { static public function main (): Void { trace ( Hello World ); } } &#x5728; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.6&#x8282;&#xFF09; &#x4E2D;&#x5C06;&#x4F1A;&#x63A2;&#x7D22;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x7684;&#x8BE6;&#x7EC6;&#x4FE1;&#x606F;&#xFF0C;&#x8FD9;&#x91CC;&#x5FEB;&#x901F;&#x9884;&#x89C8;&#x4E00;&#x4E0B;&#xFF1A;&#x4F8B;&#x5B50;&#x4E2D;&#x51FD;&#x6570; main &#x7684;&#x7C7B;&#x578B;&#x4E3A; Void-Void &#xFF0C;&#x8868;&#x793A;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x3002;Haxe &#x4E0D;&#x5141;&#x8BB8; Void &#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x548C;&#x53D8;&#x91CF;&#xFF0C;&#x5982;&#x679C;&#x5C1D;&#x8BD5;&#x8FD9;&#x6837;&#x58F0;&#x660E;&#xFF0C;&#x5B83;&#x4F1A;&#x53D1;&#x51FA;&#x62B1;&#x6028;&#xFF1A; 1 2 // Void&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x548C;&#x53D8;&#x91CF;&#x662F;&#x4E0D;&#x88AB;&#x5141;&#x8BB8;&#x7684; var x: Void ; &#x6CE8;&#xFF1A;&#x5728;&#x5B9E;&#x9645;&#x7F16;&#x5199;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C1D;&#x8BD5;&#x5728;&#x7C7B;&#x7684; main &#x51FD;&#x6570;&#x5185;&#x5B9A;&#x4E49; var x:Void; &#x5E76;&#x672A;&#x62A5;&#x9519;&#xFF0C;&#x800C;&#x4F5C;&#x4E3A;&#x7C7B;&#x5B57;&#x6BB5;&#x8FDB;&#x884C;&#x5B9A;&#x4E49;&#x5219;&#x4E0D;&#x80FD;&#x7F16;&#x8BD1;&#xFF0C;&#x63D0;&#x793A; &#x201C;Fields of type Void are not allowed&#x201D;&#x3002;&#x3010;&#x73AF;&#x5883;&#xFF1A;Haxe 3.3.0-rc.1&#x3011;"},"2.类型/2.1.基本类型/2.1.基本类型.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.基本类型.html","body":"2.1.基本类型 基本类型包括 Bool，Float 和 Int。它们在语句中可以简单的通过值识别： true 和 false 是 Bool 值 1 , 0 , -1 和 0xFF0000 是 Int 值 1.0 , 0.0 , -1.0 , 1e10 是 Float 值 在 Haxe 中，基本类型并不是 类（第2.3节） 。它们被实现为 抽象类型（第2.8节） ，并和编译器的内部运算符处理绑在一起 —— 像下一节描述的那样处理。"},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{"title":"2.1.&#x57FA;&#x672C;&#x7C7B;&#x578B;","path":"\\2.类型\\2.1.基本类型\\2.1.基本类型.html#2-1-基本类型","body":"&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x5305;&#x62EC; Bool&#xFF0C;Float &#x548C; Int&#x3002;&#x5B83;&#x4EEC;&#x5728;&#x8BED;&#x53E5;&#x4E2D;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7684;&#x901A;&#x8FC7;&#x503C;&#x8BC6;&#x522B;&#xFF1A; true &#x548C; false &#x662F; Bool &#x503C; 1 , 0 , -1 &#x548C; 0xFF0000 &#x662F; Int &#x503C; 1.0 , 0.0 , -1.0 , 1e10 &#x662F; Float &#x503C; &#x5728; Haxe &#x4E2D;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x5E76;&#x4E0D;&#x662F; &#x7C7B;&#xFF08;&#x7B2C;2.3&#x8282;&#xFF09; &#x3002;&#x5B83;&#x4EEC;&#x88AB;&#x5B9E;&#x73B0;&#x4E3A; &#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.8&#x8282;&#xFF09; &#xFF0C;&#x5E76;&#x548C;&#x7F16;&#x8BD1;&#x5668;&#x7684;&#x5185;&#x90E8;&#x8FD0;&#x7B97;&#x7B26;&#x5904;&#x7406;&#x7ED1;&#x5728;&#x4E00;&#x8D77; &#x2014;&#x2014; &#x50CF;&#x4E0B;&#x4E00;&#x8282;&#x63CF;&#x8FF0;&#x7684;&#x90A3;&#x6837;&#x5904;&#x7406;&#x3002;"},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{"title":"","path":"\\2.类型\\2.2.为空性\\2.2.1.可选参数和为空性.html","body":"2.2.1.可选参数和为空性 当考虑为空性的时候，可选参数也必须被解释。特别地，在不能为空的原生可选参数和可能为空的 Haxe 特定可选参数之间，肯定有一个区别。区别是通过使用问号标记可选参数来实现： 1 2 3 4 5 6 7 8 // x是一个原生 Int（不能为空） function foo (x : Int = 0 )  // y是一个 NullT类型 (可空) function bar ( ?y : Int )  // z同样是 NullT function opt ( ?z : Int = -1 )  花絮 ：Argument 和 Parameter 在一些其它的编程语言中，argument 和 parameter 可以交替使用。在 Haxe 中，argument 在针对方法的时候使用，而 parameter 是指 类型参数（第3.2节） 。"},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{"title":"2.2.1.&#x53EF;&#x9009;&#x53C2;&#x6570;&#x548C;&#x4E3A;&#x7A7A;&#x6027;","path":"\\2.类型\\2.2.为空性\\2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性","body":"&#x5F53;&#x8003;&#x8651;&#x4E3A;&#x7A7A;&#x6027;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x4E5F;&#x5FC5;&#x987B;&#x88AB;&#x89E3;&#x91CA;&#x3002;&#x7279;&#x522B;&#x5730;&#xFF0C;&#x5728;&#x4E0D;&#x80FD;&#x4E3A;&#x7A7A;&#x7684;&#x539F;&#x751F;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x548C;&#x53EF;&#x80FD;&#x4E3A;&#x7A7A;&#x7684; Haxe &#x7279;&#x5B9A;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x4E4B;&#x95F4;&#xFF0C;&#x80AF;&#x5B9A;&#x6709;&#x4E00;&#x4E2A;&#x533A;&#x522B;&#x3002;&#x533A;&#x522B;&#x662F;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x95EE;&#x53F7;&#x6807;&#x8BB0;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x6765;&#x5B9E;&#x73B0;&#xFF1A; 1 2 3 4 5 6 7 8 // x&#x662F;&#x4E00;&#x4E2A;&#x539F;&#x751F; Int&#xFF08;&#x4E0D;&#x80FD;&#x4E3A;&#x7A7A;&#xFF09; function foo (x : Int = 0 ) {} // y&#x662F;&#x4E00;&#x4E2A; NullT&#x7C7B;&#x578B; (&#x53EF;&#x7A7A;) function bar ( ?y : Int ) {} // z&#x540C;&#x6837;&#x662F; NullT function opt ( ?z : Int = -1 ) {} &#x82B1;&#x7D6E; &#xFF1A;Argument &#x548C; Parameter &#x5728;&#x4E00;&#x4E9B;&#x5176;&#x5B83;&#x7684;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;argument &#x548C; parameter &#x53EF;&#x4EE5;&#x4EA4;&#x66FF;&#x4F7F;&#x7528;&#x3002;&#x5728; Haxe &#x4E2D;&#xFF0C;argument &#x5728;&#x9488;&#x5BF9;&#x65B9;&#x6CD5;&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;&#xFF0C;&#x800C; parameter &#x662F;&#x6307; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09; &#x3002;"},"2.类型/2.2.为空性/2.2.为空性.html":{"title":"","path":"\\2.类型\\2.2.为空性\\2.2.为空性.html","body":"2.2.为空性 定义 ：可空 在 Haxe 中如果 null 对于一个类型是有效的值，则认为类型是可空的。 在编程语言中有一个单独、整洁的为空性定义非常常见。然而，Haxe 由于其目标语言的本身性质，需要在这个问题中找到一个妥协：因此目标语言中的一些被允许使用 null ；事实上，对任何东西默认都是 null ，其它不支持 null 的则使用某些类型。这使两种类型目标语言的区别是必要的： 定义 ：静态目标 静态目标在 null 不是一个有效的基本类型的值时，使用它们自己的类型系统。这在 Flash，C++，Java 和 C# 目标语言中是正确的。 定义 ：动态目标 动态目标的类型使用更为宽松，并允许基本类型使用 null 值。这应用于 JavaScript，PHP，Neko 和 Flash 6-8 目标语言中。 当在动态目标语言使用 null 时不需要担心；然而，静态目标中可能需要一些思考。首先，基本类型被初始化为它们的默认值。 定义 ：默认值 静态目标语言中，基本类型的默认值如下： Int —— 0 ； Float —— Flash 中为 NaN ，其它静态目标语言中为 0.0 ； Bool —— false 。 得出一个结论，Haxe 编译器不允许在静态目标语言上分配 null 到一个基本类型。为了实现它，基本类型必须被包装为 Null 。 1 2 3 4 // 静态目标平台报错 var a: Int = null ; // 允许的 var b: Null  Int  = null ; 同样，基本类型不能被跟 null 比较，除非包装它： 1 2 3 4 5 6 7 var a : Int = 0 ; // 静态目标平台报错 if ( a == null )  ...  var b : Null  Int  = 0 ; if ( b != null )  ...  // 允许的 这个限制延伸到所有 统一（第3.5节） 被执行的情况。 定义： NullT 在静态目标语言中，可以使用 NullInt 、 NullFloat 、和 NullBool 类型来允许 null 作为一个值。在动态目标语言，这样做没有影响。 NullT 也可以被用于其它类型用以表示 null 是一个允许的值。 如果一个 null 值被隐藏在 Null 或者 Dynamic 中 ，并被分配到一个基本类型，默认值将被使用： 1 2 3 4 var n : Null  Int  = null ; var a : Int = n; trace (n); // 输出 null trace (a); // 在静态目标平台输出 0"},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{"title":"2.2.&#x4E3A;&#x7A7A;&#x6027;","path":"\\2.类型\\2.2.为空性\\2.2.为空性.html#2-2-为空性","body":"&#x5B9A;&#x4E49; &#xFF1A;&#x53EF;&#x7A7A; &#x5728; Haxe &#x4E2D;&#x5982;&#x679C; null &#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x662F;&#x6709;&#x6548;&#x7684;&#x503C;&#xFF0C;&#x5219;&#x8BA4;&#x4E3A;&#x7C7B;&#x578B;&#x662F;&#x53EF;&#x7A7A;&#x7684;&#x3002; &#x5728;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x3001;&#x6574;&#x6D01;&#x7684;&#x4E3A;&#x7A7A;&#x6027;&#x5B9A;&#x4E49;&#x975E;&#x5E38;&#x5E38;&#x89C1;&#x3002;&#x7136;&#x800C;&#xFF0C;Haxe &#x7531;&#x4E8E;&#x5176;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x672C;&#x8EAB;&#x6027;&#x8D28;&#xFF0C;&#x9700;&#x8981;&#x5728;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x4E2D;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x59A5;&#x534F;&#xFF1A;&#x56E0;&#x6B64;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x88AB;&#x5141;&#x8BB8;&#x4F7F;&#x7528; null &#xFF1B;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x5BF9;&#x4EFB;&#x4F55;&#x4E1C;&#x897F;&#x9ED8;&#x8BA4;&#x90FD;&#x662F; null &#xFF0C;&#x5176;&#x5B83;&#x4E0D;&#x652F;&#x6301; null &#x7684;&#x5219;&#x4F7F;&#x7528;&#x67D0;&#x4E9B;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x4F7F;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x533A;&#x522B;&#x662F;&#x5FC5;&#x8981;&#x7684;&#xFF1A; &#x5B9A;&#x4E49; &#xFF1A;&#x9759;&#x6001;&#x76EE;&#x6807; &#x9759;&#x6001;&#x76EE;&#x6807;&#x5728; null &#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x6548;&#x7684;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x7684;&#x503C;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x3002;&#x8FD9;&#x5728; Flash&#xFF0C;C++&#xFF0C;Java &#x548C; C# &#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#x662F;&#x6B63;&#x786E;&#x7684;&#x3002; &#x5B9A;&#x4E49; &#xFF1A;&#x52A8;&#x6001;&#x76EE;&#x6807; &#x52A8;&#x6001;&#x76EE;&#x6807;&#x7684;&#x7C7B;&#x578B;&#x4F7F;&#x7528;&#x66F4;&#x4E3A;&#x5BBD;&#x677E;&#xFF0C;&#x5E76;&#x5141;&#x8BB8;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x4F7F;&#x7528; null &#x503C;&#x3002;&#x8FD9;&#x5E94;&#x7528;&#x4E8E; JavaScript&#xFF0C;PHP&#xFF0C;Neko &#x548C; Flash 6-8 &#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#x3002; &#x5F53;&#x5728;&#x52A8;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4F7F;&#x7528; null &#x65F6;&#x4E0D;&#x9700;&#x8981;&#x62C5;&#x5FC3;&#xFF1B;&#x7136;&#x800C;&#xFF0C;&#x9759;&#x6001;&#x76EE;&#x6807;&#x4E2D;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x601D;&#x8003;&#x3002;&#x9996;&#x5148;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x5B83;&#x4EEC;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x3002; &#x5B9A;&#x4E49; &#xFF1A;&#x9ED8;&#x8BA4;&#x503C; &#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x5982;&#x4E0B;&#xFF1A; Int &#x2014;&#x2014; 0 &#xFF1B; Float &#x2014;&#x2014; Flash &#x4E2D;&#x4E3A; NaN &#xFF0C;&#x5176;&#x5B83;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#x4E3A; 0.0 &#xFF1B; Bool &#x2014;&#x2014; false &#x3002; &#x5F97;&#x51FA;&#x4E00;&#x4E2A;&#x7ED3;&#x8BBA;&#xFF0C;Haxe &#x7F16;&#x8BD1;&#x5668;&#x4E0D;&#x5141;&#x8BB8;&#x5728;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E0A;&#x5206;&#x914D; null &#x5230;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x3002;&#x4E3A;&#x4E86;&#x5B9E;&#x73B0;&#x5B83;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x88AB;&#x5305;&#x88C5;&#x4E3A; Null &#x3002; 1 2 3 4 // &#x9759;&#x6001;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x62A5;&#x9519; var a: Int = null ; // &#x5141;&#x8BB8;&#x7684; var b: Null  Int  = null ; &#x540C;&#x6837;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x4E0D;&#x80FD;&#x88AB;&#x8DDF; null &#x6BD4;&#x8F83;&#xFF0C;&#x9664;&#x975E;&#x5305;&#x88C5;&#x5B83;&#xFF1A; 1 2 3 4 5 6 7 var a : Int = 0 ; // &#x9759;&#x6001;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x62A5;&#x9519; if ( a == null ) { ... } var b : Null  Int  = 0 ; if ( b != null ) { ... } // &#x5141;&#x8BB8;&#x7684; &#x8FD9;&#x4E2A;&#x9650;&#x5236;&#x5EF6;&#x4F38;&#x5230;&#x6240;&#x6709; &#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09; &#x88AB;&#x6267;&#x884C;&#x7684;&#x60C5;&#x51B5;&#x3002; &#x5B9A;&#x4E49;&#xFF1A; NullT &#x5728;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; NullInt &#x3001; NullFloat &#x3001;&#x548C; NullBool &#x7C7B;&#x578B;&#x6765;&#x5141;&#x8BB8; null &#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x503C;&#x3002;&#x5728;&#x52A8;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF0C;&#x8FD9;&#x6837;&#x505A;&#x6CA1;&#x6709;&#x5F71;&#x54CD;&#x3002; NullT &#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x4E8E;&#x5176;&#x5B83;&#x7C7B;&#x578B;&#x7528;&#x4EE5;&#x8868;&#x793A; null &#x662F;&#x4E00;&#x4E2A;&#x5141;&#x8BB8;&#x7684;&#x503C;&#x3002; &#x5982;&#x679C;&#x4E00;&#x4E2A; null &#x503C;&#x88AB;&#x9690;&#x85CF;&#x5728; Null &#x6216;&#x8005; Dynamic &#x4E2D; &#xFF0C;&#x5E76;&#x88AB;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x5C06;&#x88AB;&#x4F7F;&#x7528;&#xFF1A; 1 2 3 4 var n : Null  Int  = null ; var a : Int = n; trace (n); // &#x8F93;&#x51FA; null trace (a); // &#x5728;&#x9759;&#x6001;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x8F93;&#x51FA; 0"},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{"title":"","path":"\\2.类型\\2.3.类实例\\2.3.1.类的构造函数.html","body":"2.3.1.类的构造函数 类的实例通过调用类的构造函数（一个通常称为实例化的过程）创建。类实例的另一个称呼叫做对象。然而，我们更倾向于使用术语“类的实例”来强调 类/类实例和 枚举/ 枚举实例（第2.4节 ）之间的类比。 1 var p = new Point ( -1 , 65 ); 这会生成一个 Point 类的实例，它被分配到一个变量 p 上。 Point 的构造函数接受两个参数 -1 和 65 ，然后分别分配它们到实例变量 x 和 y （对比在 类实例（第2.3节） 中它的定义）。我们将在 new（第5.12节） 中重新审视 new 表达式的精确意思。现在，只要把它当作调用类的构造函数并返回适当的对象。"},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{"title":"2.3.1.&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;","path":"\\2.类型\\2.3.类实例\\2.3.1.类的构造函数.html#2-3-1-类的构造函数","body":"&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x901A;&#x8FC7;&#x8C03;&#x7528;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF08;&#x4E00;&#x4E2A;&#x901A;&#x5E38;&#x79F0;&#x4E3A;&#x5B9E;&#x4F8B;&#x5316;&#x7684;&#x8FC7;&#x7A0B;&#xFF09;&#x521B;&#x5EFA;&#x3002;&#x7C7B;&#x5B9E;&#x4F8B;&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x79F0;&#x547C;&#x53EB;&#x505A;&#x5BF9;&#x8C61;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x6211;&#x4EEC;&#x66F4;&#x503E;&#x5411;&#x4E8E;&#x4F7F;&#x7528;&#x672F;&#x8BED;&#x201C;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x201D;&#x6765;&#x5F3A;&#x8C03; &#x7C7B;/&#x7C7B;&#x5B9E;&#x4F8B;&#x548C; &#x679A;&#x4E3E;/ &#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#xFF08;&#x7B2C;2.4&#x8282; &#xFF09;&#x4E4B;&#x95F4;&#x7684;&#x7C7B;&#x6BD4;&#x3002; 1 var p = new Point ( -1 , 65 ); &#x8FD9;&#x4F1A;&#x751F;&#x6210;&#x4E00;&#x4E2A; Point &#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x5B83;&#x88AB;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A;&#x53D8;&#x91CF; p &#x4E0A;&#x3002; Point &#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x63A5;&#x53D7;&#x4E24;&#x4E2A;&#x53C2;&#x6570; -1 &#x548C; 65 &#xFF0C;&#x7136;&#x540E;&#x5206;&#x522B;&#x5206;&#x914D;&#x5B83;&#x4EEC;&#x5230;&#x5B9E;&#x4F8B;&#x53D8;&#x91CF; x &#x548C; y &#xFF08;&#x5BF9;&#x6BD4;&#x5728; &#x7C7B;&#x5B9E;&#x4F8B;&#xFF08;&#x7B2C;2.3&#x8282;&#xFF09; &#x4E2D;&#x5B83;&#x7684;&#x5B9A;&#x4E49;&#xFF09;&#x3002;&#x6211;&#x4EEC;&#x5C06;&#x5728; new&#xFF08;&#x7B2C;5.12&#x8282;&#xFF09; &#x4E2D;&#x91CD;&#x65B0;&#x5BA1;&#x89C6; new &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7CBE;&#x786E;&#x610F;&#x601D;&#x3002;&#x73B0;&#x5728;&#xFF0C;&#x53EA;&#x8981;&#x628A;&#x5B83;&#x5F53;&#x4F5C;&#x8C03;&#x7528;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x5E76;&#x8FD4;&#x56DE;&#x9002;&#x5F53;&#x7684;&#x5BF9;&#x8C61;&#x3002;"},"2.类型/2.3.类实例/2.3.3.接口.html":{"title":"","path":"\\2.类型\\2.3.类实例\\2.3.3.接口.html","body":"2.3.3.接口 一个接口可以被理解为类的签名，因为它描述了类的公共字段。接口不提供实现，而是纯粹的结构上的信息： 1 2 3 interface Printable  public function toString (): String ;  语法和类的相似，但有以下例外： 使用 interface 关键字而不是 class 关键字 函数不需要任何表达式 每个字段必须有一个显式的类型 接口，它不像 结构子类型化（第3.5.2节） ，它描述和类之间一个静态的关系。一个指定的类，如果被显式地陈述如下，则只被认为是兼容一个接口： 1 class Point implements Printable   这里， implements 关键字表示 Point 类有一个到 Printable 接口的“is-a”关系，即每个 Point 的实例同时也是 Printable 接口的实例。虽然一个类只能有一个父类，但是它可以通过使用多个 implements 关键字实现多个接口： 1 2 class Point implements Printable implements Serializable 编译器检查是否实现了假设。也就是说，它确保类实际上实现了接口必须的所有字段。一个字段，如果类或者任何它的父类提供了一个实现，那么它被认为是实现了。接口字段不限于方法。也可以是变量或者属性： 1 2 3 4 5 6 7 8 9 10 interface Placeable  public var x: Float ; public var y: Float ;  class Main implements Placeable  public var x: Float ; public var y: Float ; static public function main ()    接口可以扩展多个其它的接口，使用 extends 关键字： 1 interface Debuggable extends Printable extends Serializable 花絮 ：实现的语法 Haxe 3.0 之前 需要多个 implements 关键字，使用逗号 , 隔开。我们决定遵循 Java 事实上的标准，免除了逗号。这个是 Haxe 2 和 Haxe 3 之间的一个致命变更。"},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{"title":"2.3.3.&#x63A5;&#x53E3;","path":"\\2.类型\\2.3.类实例\\2.3.3.接口.html#2-3-3-接口","body":"&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#x53EF;&#x4EE5;&#x88AB;&#x7406;&#x89E3;&#x4E3A;&#x7C7B;&#x7684;&#x7B7E;&#x540D;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x63CF;&#x8FF0;&#x4E86;&#x7C7B;&#x7684;&#x516C;&#x5171;&#x5B57;&#x6BB5;&#x3002;&#x63A5;&#x53E3;&#x4E0D;&#x63D0;&#x4F9B;&#x5B9E;&#x73B0;&#xFF0C;&#x800C;&#x662F;&#x7EAF;&#x7CB9;&#x7684;&#x7ED3;&#x6784;&#x4E0A;&#x7684;&#x4FE1;&#x606F;&#xFF1A; 1 2 3 interface Printable { public function toString (): String ; } &#x8BED;&#x6CD5;&#x548C;&#x7C7B;&#x7684;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x6709;&#x4EE5;&#x4E0B;&#x4F8B;&#x5916;&#xFF1A; &#x4F7F;&#x7528; interface &#x5173;&#x952E;&#x5B57;&#x800C;&#x4E0D;&#x662F; class &#x5173;&#x952E;&#x5B57; &#x51FD;&#x6570;&#x4E0D;&#x9700;&#x8981;&#x4EFB;&#x4F55;&#x8868;&#x8FBE;&#x5F0F; &#x6BCF;&#x4E2A;&#x5B57;&#x6BB5;&#x5FC5;&#x987B;&#x6709;&#x4E00;&#x4E2A;&#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B; &#x63A5;&#x53E3;&#xFF0C;&#x5B83;&#x4E0D;&#x50CF; &#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316;&#xFF08;&#x7B2C;3.5.2&#x8282;&#xFF09; &#xFF0C;&#x5B83;&#x63CF;&#x8FF0;&#x548C;&#x7C7B;&#x4E4B;&#x95F4;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x7684;&#x5173;&#x7CFB;&#x3002;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7684;&#x7C7B;&#xFF0C;&#x5982;&#x679C;&#x88AB;&#x663E;&#x5F0F;&#x5730;&#x9648;&#x8FF0;&#x5982;&#x4E0B;&#xFF0C;&#x5219;&#x53EA;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x517C;&#x5BB9;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#xFF1A; 1 class Point implements Printable { } &#x8FD9;&#x91CC;&#xFF0C; implements &#x5173;&#x952E;&#x5B57;&#x8868;&#x793A; Point &#x7C7B;&#x6709;&#x4E00;&#x4E2A;&#x5230; Printable &#x63A5;&#x53E3;&#x7684;&#x201C;is-a&#x201D;&#x5173;&#x7CFB;&#xFF0C;&#x5373;&#x6BCF;&#x4E2A; Point &#x7684;&#x5B9E;&#x4F8B;&#x540C;&#x65F6;&#x4E5F;&#x662F; Printable &#x63A5;&#x53E3;&#x7684;&#x5B9E;&#x4F8B;&#x3002;&#x867D;&#x7136;&#x4E00;&#x4E2A;&#x7C7B;&#x53EA;&#x80FD;&#x6709;&#x4E00;&#x4E2A;&#x7236;&#x7C7B;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x591A;&#x4E2A; implements &#x5173;&#x952E;&#x5B57;&#x5B9E;&#x73B0;&#x591A;&#x4E2A;&#x63A5;&#x53E3;&#xFF1A; 1 2 class Point implements Printable implements Serializable &#x7F16;&#x8BD1;&#x5668;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x5B9E;&#x73B0;&#x4E86;&#x5047;&#x8BBE;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5B83;&#x786E;&#x4FDD;&#x7C7B;&#x5B9E;&#x9645;&#x4E0A;&#x5B9E;&#x73B0;&#x4E86;&#x63A5;&#x53E3;&#x5FC5;&#x987B;&#x7684;&#x6240;&#x6709;&#x5B57;&#x6BB5;&#x3002;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF0C;&#x5982;&#x679C;&#x7C7B;&#x6216;&#x8005;&#x4EFB;&#x4F55;&#x5B83;&#x7684;&#x7236;&#x7C7B;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x5B9E;&#x73B0;&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x5B9E;&#x73B0;&#x4E86;&#x3002;&#x63A5;&#x53E3;&#x5B57;&#x6BB5;&#x4E0D;&#x9650;&#x4E8E;&#x65B9;&#x6CD5;&#x3002;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x53D8;&#x91CF;&#x6216;&#x8005;&#x5C5E;&#x6027;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 interface Placeable { public var x: Float ; public var y: Float ; } class Main implements Placeable { public var x: Float ; public var y: Float ; static public function main () { } } &#x63A5;&#x53E3;&#x53EF;&#x4EE5;&#x6269;&#x5C55;&#x591A;&#x4E2A;&#x5176;&#x5B83;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x4F7F;&#x7528; extends &#x5173;&#x952E;&#x5B57;&#xFF1A; 1 interface Debuggable extends Printable extends Serializable &#x82B1;&#x7D6E; &#xFF1A;&#x5B9E;&#x73B0;&#x7684;&#x8BED;&#x6CD5; Haxe 3.0 &#x4E4B;&#x524D; &#x9700;&#x8981;&#x591A;&#x4E2A; implements &#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4F7F;&#x7528;&#x9017;&#x53F7; , &#x9694;&#x5F00;&#x3002;&#x6211;&#x4EEC;&#x51B3;&#x5B9A;&#x9075;&#x5FAA; Java &#x4E8B;&#x5B9E;&#x4E0A;&#x7684;&#x6807;&#x51C6;&#xFF0C;&#x514D;&#x9664;&#x4E86;&#x9017;&#x53F7;&#x3002;&#x8FD9;&#x4E2A;&#x662F; Haxe 2 &#x548C; Haxe 3 &#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x4E2A;&#x81F4;&#x547D;&#x53D8;&#x66F4;&#x3002;"},"2.类型/2.3.类实例/2.3.2.继承.html":{"title":"","path":"\\2.类型\\2.3.类实例\\2.3.2.继承.html","body":"2.3.2.继承 类可以继承自其它的类，在 Haxe 中通过 extends 关键字指示： 1 2 3 4 5 6 7 class Point3 extends Point  var z : Int ; public function new (x,y,z)  super (x,y); this .z = z;   这个关系通常被称为 “is-a”（subsumption，包含架构，指的是类的父子继承关系）：任何 Point3 类的实例同时也是 Point 类的实例。 Point 则作为 Point3 的父类，而 Point3 则是 Point 的子类。一个类可以有许多子类，但是只有一个父类。术语“一个 class X 的父类”通常指它的直接父类、父类的父类等。 上面的代码和原来的 Point 类很相似，使用了两个新的部分： extends Point 表示这个类继承自 Point 类。 super(x, y) 是调用父类的构造函数，本例中即 Point.new 。 在子类中定义它们自己的构造函数并不是必须的，但是如果定义了，则调用 super() 是强制性的。这不像其它一些面向对象语言，这个调用可以出现在构造函数代码中的任何地方，而不是必须作为第一个表达式。 一个类可以重写它父类的 方法（第4.3节） ，需要显式的 override 关键字。效果和限制将在 重写方法（第4.3.1节） 中详细介绍。"},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{"title":"2.3.2.&#x7EE7;&#x627F;","path":"\\2.类型\\2.3.类实例\\2.3.2.继承.html#2-3-2-继承","body":"&#x7C7B;&#x53EF;&#x4EE5;&#x7EE7;&#x627F;&#x81EA;&#x5176;&#x5B83;&#x7684;&#x7C7B;&#xFF0C;&#x5728; Haxe &#x4E2D;&#x901A;&#x8FC7; extends &#x5173;&#x952E;&#x5B57;&#x6307;&#x793A;&#xFF1A; 1 2 3 4 5 6 7 class Point3 extends Point { var z : Int ; public function new (x,y,z) { super (x,y); this .z = z; } } &#x8FD9;&#x4E2A;&#x5173;&#x7CFB;&#x901A;&#x5E38;&#x88AB;&#x79F0;&#x4E3A; &#x201C;is-a&#x201D;&#xFF08;subsumption&#xFF0C;&#x5305;&#x542B;&#x67B6;&#x6784;&#xFF0C;&#x6307;&#x7684;&#x662F;&#x7C7B;&#x7684;&#x7236;&#x5B50;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#xFF09;&#xFF1A;&#x4EFB;&#x4F55; Point3 &#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x540C;&#x65F6;&#x4E5F;&#x662F; Point &#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x3002; Point &#x5219;&#x4F5C;&#x4E3A; Point3 &#x7684;&#x7236;&#x7C7B;&#xFF0C;&#x800C; Point3 &#x5219;&#x662F; Point &#x7684;&#x5B50;&#x7C7B;&#x3002;&#x4E00;&#x4E2A;&#x7C7B;&#x53EF;&#x4EE5;&#x6709;&#x8BB8;&#x591A;&#x5B50;&#x7C7B;&#xFF0C;&#x4F46;&#x662F;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7236;&#x7C7B;&#x3002;&#x672F;&#x8BED;&#x201C;&#x4E00;&#x4E2A; class X &#x7684;&#x7236;&#x7C7B;&#x201D;&#x901A;&#x5E38;&#x6307;&#x5B83;&#x7684;&#x76F4;&#x63A5;&#x7236;&#x7C7B;&#x3001;&#x7236;&#x7C7B;&#x7684;&#x7236;&#x7C7B;&#x7B49;&#x3002; &#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x548C;&#x539F;&#x6765;&#x7684; Point &#x7C7B;&#x5F88;&#x76F8;&#x4F3C;&#xFF0C;&#x4F7F;&#x7528;&#x4E86;&#x4E24;&#x4E2A;&#x65B0;&#x7684;&#x90E8;&#x5206;&#xFF1A; extends Point &#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x7C7B;&#x7EE7;&#x627F;&#x81EA; Point &#x7C7B;&#x3002; super(x, y) &#x662F;&#x8C03;&#x7528;&#x7236;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x672C;&#x4F8B;&#x4E2D;&#x5373; Point.new &#x3002; &#x5728;&#x5B50;&#x7C7B;&#x4E2D;&#x5B9A;&#x4E49;&#x5B83;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x5E76;&#x4E0D;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x5B9A;&#x4E49;&#x4E86;&#xFF0C;&#x5219;&#x8C03;&#x7528; super() &#x662F;&#x5F3A;&#x5236;&#x6027;&#x7684;&#x3002;&#x8FD9;&#x4E0D;&#x50CF;&#x5176;&#x5B83;&#x4E00;&#x4E9B;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x8BED;&#x8A00;&#xFF0C;&#x8FD9;&#x4E2A;&#x8C03;&#x7528;&#x53EF;&#x4EE5;&#x51FA;&#x73B0;&#x5728;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4EE3;&#x7801;&#x4E2D;&#x7684;&#x4EFB;&#x4F55;&#x5730;&#x65B9;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5FC5;&#x987B;&#x4F5C;&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x3002; &#x4E00;&#x4E2A;&#x7C7B;&#x53EF;&#x4EE5;&#x91CD;&#x5199;&#x5B83;&#x7236;&#x7C7B;&#x7684; &#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3&#x8282;&#xFF09; &#xFF0C;&#x9700;&#x8981;&#x663E;&#x5F0F;&#x7684; override &#x5173;&#x952E;&#x5B57;&#x3002;&#x6548;&#x679C;&#x548C;&#x9650;&#x5236;&#x5C06;&#x5728; &#x91CD;&#x5199;&#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3.1&#x8282;&#xFF09; &#x4E2D;&#x8BE6;&#x7EC6;&#x4ECB;&#x7ECD;&#x3002;"},"2.类型/2.3.类实例/2.3.类实例.html":{"title":"","path":"\\2.类型\\2.3.类实例\\2.3.类实例.html","body":"2.3.类实例 和许多面向对象语言类似，类是大多数 Haxe 程序中主要的数据结构。每个 Haxe 类都有一个确定的名字，一个隐含的路径和零或者多个类字段。这里我们将关注类的一般结构和它们的关系，而 类字段（第4章） 的细节部分在后面进行讲解。 如下代码示例作为本节剩余部分的基础： 1 2 3 4 5 6 7 8 9 10 11 class Point  var x : Int ; var y : Int ; public function new (x,y)  this .x = x; this .y = y;  public function toString ()  return \"Point(\" +x+ \",\" +y+ \")\" ;   从语义上讲，这个类表示二维空间内的一个点，但是这里它是什么并不重要。我们来描述一下这个结构： 关键字 class 表示我们定义一个类 Point 是类的名称，可以使用任何符合类型标识符规则的字符 包围在花括号 {} 中间的是类的字段 它由两个 Int 类型变量字段 x 和 y 组成 后面是一个特定的函数字段叫做 new ，它是类的构造函数 还有一个普通的函数 toString 在 Haxe 中有一个特殊类型，可以兼容所有的类： 类型 ：Class 这个类型可以兼容所有类型，也就是说，所有类（而不是它们的实例）可以被分配给它。在编译时， Class 是所有类的基础类型。然而，这个关系并不会反映在生成的代码中。当一个 API 需要的一个值是一个类而非某个特定的类型时，可以使用这个类型。这应用到 Haxe 反射API （第10.7节） 中的一些方法。"},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{"title":"2.3.&#x7C7B;&#x5B9E;&#x4F8B;","path":"\\2.类型\\2.3.类实例\\2.3.类实例.html#2-3-类实例","body":"&#x548C;&#x8BB8;&#x591A;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x8BED;&#x8A00;&#x7C7B;&#x4F3C;&#xFF0C;&#x7C7B;&#x662F;&#x5927;&#x591A;&#x6570; Haxe &#x7A0B;&#x5E8F;&#x4E2D;&#x4E3B;&#x8981;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;&#x6BCF;&#x4E2A; Haxe &#x7C7B;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x786E;&#x5B9A;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x4E00;&#x4E2A;&#x9690;&#x542B;&#x7684;&#x8DEF;&#x5F84;&#x548C;&#x96F6;&#x6216;&#x8005;&#x591A;&#x4E2A;&#x7C7B;&#x5B57;&#x6BB5;&#x3002;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x5C06;&#x5173;&#x6CE8;&#x7C7B;&#x7684;&#x4E00;&#x822C;&#x7ED3;&#x6784;&#x548C;&#x5B83;&#x4EEC;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x800C; &#x7C7B;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;4&#x7AE0;&#xFF09; &#x7684;&#x7EC6;&#x8282;&#x90E8;&#x5206;&#x5728;&#x540E;&#x9762;&#x8FDB;&#x884C;&#x8BB2;&#x89E3;&#x3002; &#x5982;&#x4E0B;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x4F5C;&#x4E3A;&#x672C;&#x8282;&#x5269;&#x4F59;&#x90E8;&#x5206;&#x7684;&#x57FA;&#x7840;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 class Point { var x : Int ; var y : Int ; public function new (x,y) { this .x = x; this .y = y; } public function toString () { return Point( +x+ , +y+ ) ; } } &#x4ECE;&#x8BED;&#x4E49;&#x4E0A;&#x8BB2;&#xFF0C;&#x8FD9;&#x4E2A;&#x7C7B;&#x8868;&#x793A;&#x4E8C;&#x7EF4;&#x7A7A;&#x95F4;&#x5185;&#x7684;&#x4E00;&#x4E2A;&#x70B9;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x5B83;&#x662F;&#x4EC0;&#x4E48;&#x5E76;&#x4E0D;&#x91CD;&#x8981;&#x3002;&#x6211;&#x4EEC;&#x6765;&#x63CF;&#x8FF0;&#x4E00;&#x4E0B;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#xFF1A; &#x5173;&#x952E;&#x5B57; class &#x8868;&#x793A;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x7C7B; Point &#x662F;&#x7C7B;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4EFB;&#x4F55;&#x7B26;&#x5408;&#x7C7B;&#x578B;&#x6807;&#x8BC6;&#x7B26;&#x89C4;&#x5219;&#x7684;&#x5B57;&#x7B26; &#x5305;&#x56F4;&#x5728;&#x82B1;&#x62EC;&#x53F7; {} &#x4E2D;&#x95F4;&#x7684;&#x662F;&#x7C7B;&#x7684;&#x5B57;&#x6BB5; &#x5B83;&#x7531;&#x4E24;&#x4E2A; Int &#x7C7B;&#x578B;&#x53D8;&#x91CF;&#x5B57;&#x6BB5; x &#x548C; y &#x7EC4;&#x6210; &#x540E;&#x9762;&#x662F;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x51FD;&#x6570;&#x5B57;&#x6BB5;&#x53EB;&#x505A; new &#xFF0C;&#x5B83;&#x662F;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570; &#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x666E;&#x901A;&#x7684;&#x51FD;&#x6570; toString &#x5728; Haxe &#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x517C;&#x5BB9;&#x6240;&#x6709;&#x7684;&#x7C7B;&#xFF1A; &#x7C7B;&#x578B; &#xFF1A;Class &#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x517C;&#x5BB9;&#x6240;&#x6709;&#x7C7B;&#x578B;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6240;&#x6709;&#x7C7B;&#xFF08;&#x800C;&#x4E0D;&#x662F;&#x5B83;&#x4EEC;&#x7684;&#x5B9E;&#x4F8B;&#xFF09;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x7ED9;&#x5B83;&#x3002;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#xFF0C; Class &#x662F;&#x6240;&#x6709;&#x7C7B;&#x7684;&#x57FA;&#x7840;&#x7C7B;&#x578B;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x4E2A;&#x5173;&#x7CFB;&#x5E76;&#x4E0D;&#x4F1A;&#x53CD;&#x6620;&#x5728;&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#x3002;&#x5F53;&#x4E00;&#x4E2A; API &#x9700;&#x8981;&#x7684;&#x4E00;&#x4E2A;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x800C;&#x975E;&#x67D0;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x5E94;&#x7528;&#x5230; Haxe &#x53CD;&#x5C04;API &#xFF08;&#x7B2C;10.7&#x8282;&#xFF09; &#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x65B9;&#x6CD5;&#x3002;"},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{"title":"","path":"\\2.类型\\2.4.枚举实例\\2.4.1.Enum构造函数.html","body":"2.4.1.Enum构造函数 类似于类和它们的构造函数，枚举通过使用它们的一个构造函数提供了一种实例化方式。然而，与类不同，枚举提供了多个可以简单的通过它们的名字使用的构造函数： 1 2 3 var a = Red; var b = Green; var c = Rgb( 255 , 255 , 0 ) 在这段代码中变量 a ， b 和 c 的类型为 Color 。变量 c 使用 Rgb 构造函数和参数来初始化。 所有枚举实例都可以被分配到一个名为 EnumValue 的特定类型 。 EnumValue 类型 ：EnumValue EnumValue 是一个特别的类型，统一所有的枚举实例。它被 Haxe 标准库使用，来提供对所有枚举实例的某些操作，可以用在用户代码中一个 需要一个枚举实例而不是某个特定的类型的 API 的情况。 重要的是区分枚举类型和枚举构造函数，如这个示例展示的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 enum Color  Red; Green; Blue; Rgb(r: Int ,g: Int ,b: Int );  class Main  public static function main () var ec: EnumValue = Red; //有效 var en: Enum Color = Color; //有效 // error, Color 应该是 EnumColor // var x :EnumColor = Red;   如果上面注释掉的行没有被注释，程序不会通过编译，因为 Red （一个枚举构造函数）不能被赋值到一个 Enum （一个枚举类型）类型的变量。这个关系就像类和类的实例。 Enum 花絮 ：Enum的具体类型参数 手册的一个读者困惑于上面示例中 Color 和 Enum 的区别。事实上，这里使用一个具体类型参数是没有意义的，只是用于演示目的。通常我们会在这里省略类型，让 类型推断（第3.6节） 来处理它。然而，推断的类型可能和 Enum 不同。编译器推断出一个将枚举的构造函数 作为“字段”的伪类型。自 Haxe3.2.0 起，就不能在语法中表达这个类型，而且也没有必要这么做。"},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{"title":"2.4.1.Enum&#x6784;&#x9020;&#x51FD;&#x6570;","path":"\\2.类型\\2.4.枚举实例\\2.4.1.Enum构造函数.html#2-4-1-Enum构造函数","body":"&#x7C7B;&#x4F3C;&#x4E8E;&#x7C7B;&#x548C;&#x5B83;&#x4EEC;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x679A;&#x4E3E;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x7684;&#x4E00;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x5B9E;&#x4F8B;&#x5316;&#x65B9;&#x5F0F;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4E0E;&#x7C7B;&#x4E0D;&#x540C;&#xFF0C;&#x679A;&#x4E3E;&#x63D0;&#x4F9B;&#x4E86;&#x591A;&#x4E2A;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7684;&#x901A;&#x8FC7;&#x5B83;&#x4EEC;&#x7684;&#x540D;&#x5B57;&#x4F7F;&#x7528;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF1A; 1 2 3 var a = Red; var b = Green; var c = Rgb( 255 , 255 , 0 ) &#x5728;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x4E2D;&#x53D8;&#x91CF; a &#xFF0C; b &#x548C; c &#x7684;&#x7C7B;&#x578B;&#x4E3A; Color &#x3002;&#x53D8;&#x91CF; c &#x4F7F;&#x7528; Rgb &#x6784;&#x9020;&#x51FD;&#x6570;&#x548C;&#x53C2;&#x6570;&#x6765;&#x521D;&#x59CB;&#x5316;&#x3002; &#x6240;&#x6709;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A;&#x540D;&#x4E3A; EnumValue &#x7684;&#x7279;&#x5B9A;&#x7C7B;&#x578B; &#x3002;"},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{"title":"EnumValue","path":"\\2.类型\\2.4.枚举实例\\2.4.1.Enum构造函数.html#EnumValue","body":"&#x7C7B;&#x578B; &#xFF1A;EnumValue EnumValue &#x662F;&#x4E00;&#x4E2A;&#x7279;&#x522B;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x7EDF;&#x4E00;&#x6240;&#x6709;&#x7684;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x3002;&#x5B83;&#x88AB; Haxe &#x6807;&#x51C6;&#x5E93;&#x4F7F;&#x7528;&#xFF0C;&#x6765;&#x63D0;&#x4F9B;&#x5BF9;&#x6240;&#x6709;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x7684;&#x67D0;&#x4E9B;&#x64CD;&#x4F5C;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x5728;&#x7528;&#x6237;&#x4EE3;&#x7801;&#x4E2D;&#x4E00;&#x4E2A; &#x9700;&#x8981;&#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x800C;&#x4E0D;&#x662F;&#x67D0;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#x7684; API &#x7684;&#x60C5;&#x51B5;&#x3002; &#x91CD;&#x8981;&#x7684;&#x662F;&#x533A;&#x5206;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x548C;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x8FD9;&#x4E2A;&#x793A;&#x4F8B;&#x5C55;&#x793A;&#x7684;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 enum Color { Red; Green; Blue; Rgb(r: Int ,g: Int ,b: Int ); } class Main { public static function main (){ var ec: EnumValue = Red; //&#x6709;&#x6548; var en: Enum Color = Color; //&#x6709;&#x6548; // error, Color &#x5E94;&#x8BE5;&#x662F; EnumColor // var x :EnumColor = Red; } } &#x5982;&#x679C;&#x4E0A;&#x9762;&#x6CE8;&#x91CA;&#x6389;&#x7684;&#x884C;&#x6CA1;&#x6709;&#x88AB;&#x6CE8;&#x91CA;&#xFF0C;&#x7A0B;&#x5E8F;&#x4E0D;&#x4F1A;&#x901A;&#x8FC7;&#x7F16;&#x8BD1;&#xFF0C;&#x56E0;&#x4E3A; Red &#xFF08;&#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF09;&#x4E0D;&#x80FD;&#x88AB;&#x8D4B;&#x503C;&#x5230;&#x4E00;&#x4E2A; Enum &#xFF08;&#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#xFF09;&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;&#x3002;&#x8FD9;&#x4E2A;&#x5173;&#x7CFB;&#x5C31;&#x50CF;&#x7C7B;&#x548C;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x3002;"},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{"title":"Enum","path":"\\2.类型\\2.4.枚举实例\\2.4.1.Enum构造函数.html#Enum","body":"&#x82B1;&#x7D6E; &#xFF1A;Enum&#x7684;&#x5177;&#x4F53;&#x7C7B;&#x578B;&#x53C2;&#x6570; &#x624B;&#x518C;&#x7684;&#x4E00;&#x4E2A;&#x8BFB;&#x8005;&#x56F0;&#x60D1;&#x4E8E;&#x4E0A;&#x9762;&#x793A;&#x4F8B;&#x4E2D; Color &#x548C; Enum &#x7684;&#x533A;&#x522B;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x662F;&#x6CA1;&#x6709;&#x610F;&#x4E49;&#x7684;&#xFF0C;&#x53EA;&#x662F;&#x7528;&#x4E8E;&#x6F14;&#x793A;&#x76EE;&#x7684;&#x3002;&#x901A;&#x5E38;&#x6211;&#x4EEC;&#x4F1A;&#x5728;&#x8FD9;&#x91CC;&#x7701;&#x7565;&#x7C7B;&#x578B;&#xFF0C;&#x8BA9; &#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09; &#x6765;&#x5904;&#x7406;&#x5B83;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x63A8;&#x65AD;&#x7684;&#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x548C; Enum &#x4E0D;&#x540C;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x63A8;&#x65AD;&#x51FA;&#x4E00;&#x4E2A;&#x5C06;&#x679A;&#x4E3E;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570; &#x4F5C;&#x4E3A;&#x201C;&#x5B57;&#x6BB5;&#x201D;&#x7684;&#x4F2A;&#x7C7B;&#x578B;&#x3002;&#x81EA; Haxe3.2.0 &#x8D77;&#xFF0C;&#x5C31;&#x4E0D;&#x80FD;&#x5728;&#x8BED;&#x6CD5;&#x4E2D;&#x8868;&#x8FBE;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x800C;&#x4E14;&#x4E5F;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x8FD9;&#x4E48;&#x505A;&#x3002;"},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{"title":"","path":"\\2.类型\\2.4.枚举实例\\2.4.枚举实例.html","body":"2.4.枚举实例 Haxe 提供了强大的枚举类型（简写：enum），它实际上是一个代数数据类型（ADT）。虽然它们不能有任何表达式，但用来描述数据结构是非常实用的： 1 2 3 4 5 6 enum Color  Red; Green; Blue; Rgb(r: Int , g: Int , b: Int );  从语义上看，这个 enum 描述了一个颜色，可能是红色，绿色，蓝色或者一个特定的 RGB 值。它的语法构成如下： 关键字 enum 表示我们要声明一个枚举 Color 是枚举类型的名称，可以是任何符合类型标识符规则的字符 闭合的花括号中间是枚举的构造函数 Red ， Green 和 Blue 不需要参数 而 Rgb 需要三个 Int 类型的参数，分别是 r ， g 和 b Haxe 类型系统提供一个和所有的枚举类型统一的类型： Enum 类型 ：Enum 这个类型可以兼容所有的枚举类型。在编译时， Enum 可以被看作枚举类型的通用基本类型。然而，这个关系不会反应在生成的代码中。"},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{"title":"2.4.&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;","path":"\\2.类型\\2.4.枚举实例\\2.4.枚举实例.html#2-4-枚举实例","body":"Haxe &#x63D0;&#x4F9B;&#x4E86;&#x5F3A;&#x5927;&#x7684;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#xFF08;&#x7B80;&#x5199;&#xFF1A;enum&#xFF09;&#xFF0C;&#x5B83;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E00;&#x4E2A;&#x4EE3;&#x6570;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF08;ADT&#xFF09;&#x3002;&#x867D;&#x7136;&#x5B83;&#x4EEC;&#x4E0D;&#x80FD;&#x6709;&#x4EFB;&#x4F55;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x4F46;&#x7528;&#x6765;&#x63CF;&#x8FF0;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x662F;&#x975E;&#x5E38;&#x5B9E;&#x7528;&#x7684;&#xFF1A; 1 2 3 4 5 6 enum Color { Red; Green; Blue; Rgb(r: Int , g: Int , b: Int ); } &#x4ECE;&#x8BED;&#x4E49;&#x4E0A;&#x770B;&#xFF0C;&#x8FD9;&#x4E2A; enum &#x63CF;&#x8FF0;&#x4E86;&#x4E00;&#x4E2A;&#x989C;&#x8272;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x7EA2;&#x8272;&#xFF0C;&#x7EFF;&#x8272;&#xFF0C;&#x84DD;&#x8272;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684; RGB &#x503C;&#x3002;&#x5B83;&#x7684;&#x8BED;&#x6CD5;&#x6784;&#x6210;&#x5982;&#x4E0B;&#xFF1A; &#x5173;&#x952E;&#x5B57; enum &#x8868;&#x793A;&#x6211;&#x4EEC;&#x8981;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x679A;&#x4E3E; Color &#x662F;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55;&#x7B26;&#x5408;&#x7C7B;&#x578B;&#x6807;&#x8BC6;&#x7B26;&#x89C4;&#x5219;&#x7684;&#x5B57;&#x7B26; &#x95ED;&#x5408;&#x7684;&#x82B1;&#x62EC;&#x53F7;&#x4E2D;&#x95F4;&#x662F;&#x679A;&#x4E3E;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570; Red &#xFF0C; Green &#x548C; Blue &#x4E0D;&#x9700;&#x8981;&#x53C2;&#x6570; &#x800C; Rgb &#x9700;&#x8981;&#x4E09;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5206;&#x522B;&#x662F; r &#xFF0C; g &#x548C; b Haxe &#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x548C;&#x6240;&#x6709;&#x7684;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x7684;&#x7C7B;&#x578B;&#xFF1A;"},"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{"title":"Enum","path":"\\2.类型\\2.4.枚举实例\\2.4.枚举实例.html#Enum","body":"&#x7C7B;&#x578B; &#xFF1A;Enum &#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x517C;&#x5BB9;&#x6240;&#x6709;&#x7684;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x3002;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#xFF0C; Enum &#x53EF;&#x4EE5;&#x88AB;&#x770B;&#x4F5C;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x7684;&#x901A;&#x7528;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x4E2A;&#x5173;&#x7CFB;&#x4E0D;&#x4F1A;&#x53CD;&#x5E94;&#x5728;&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#x3002;"},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{"title":"","path":"\\2.类型\\2.4.枚举实例\\2.4.2.使用枚举.html","body":"2.4.2.使用枚举 如果只有一组有限的值被允许使用，那么枚举类型是一个不错的选择。个体的 构造函数（第2.4.1节） 表示允许的变型，并使编译器检查是否所有可能的值都被遵守的。可以在这里看到： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 enum Color  Red; Green; Blue; Rgb(r: Int , g: Int , b: Int );  class Main  public static function main () var color = getColor(); switch (color) case Red: trace ( \"color was red\" ); case Green: trace ( \"color was green\" ); case Blue: trace ( \"color was blue\" ); case Rgb(r,g,b): trace ( \"color had a red value of \" + r);   static function getColor (): Color  return Rgb( 255 , 0 , 255 );   在检索通过分配 getColor() 的返回值分配给 color 的值之后，一个 switch 语句（第5.17节） 根据 color 值进行分支。前三个情况是 Red ， Green 和 Blue ，它们是没有价值的，但是跟 Color 中没有参数的构造函数一致。最后的 Rgb(r,g,b) 展示如何提取构造函数中的参数值：它们可以作为局部变量使用在 case 表达式主体中，就像使用了一个 var 表达式（第5.10节） 一样。关于使用 switch 语句的高级信息将在 模式匹配（第6.4节） 章节进一步探索。"},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{"title":"2.4.2.&#x4F7F;&#x7528;&#x679A;&#x4E3E;","path":"\\2.类型\\2.4.枚举实例\\2.4.2.使用枚举.html#2-4-2-使用枚举","body":"&#x5982;&#x679C;&#x53EA;&#x6709;&#x4E00;&#x7EC4;&#x6709;&#x9650;&#x7684;&#x503C;&#x88AB;&#x5141;&#x8BB8;&#x4F7F;&#x7528;&#xFF0C;&#x90A3;&#x4E48;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x9519;&#x7684;&#x9009;&#x62E9;&#x3002;&#x4E2A;&#x4F53;&#x7684; &#x6784;&#x9020;&#x51FD;&#x6570;&#xFF08;&#x7B2C;2.4.1&#x8282;&#xFF09; &#x8868;&#x793A;&#x5141;&#x8BB8;&#x7684;&#x53D8;&#x578B;&#xFF0C;&#x5E76;&#x4F7F;&#x7F16;&#x8BD1;&#x5668;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x503C;&#x90FD;&#x88AB;&#x9075;&#x5B88;&#x7684;&#x3002;&#x53EF;&#x4EE5;&#x5728;&#x8FD9;&#x91CC;&#x770B;&#x5230;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 enum Color { Red; Green; Blue; Rgb(r: Int , g: Int , b: Int ); } class Main { public static function main (){ var color = getColor(); switch (color){ case Red: trace ( color was red ); case Green: trace ( color was green ); case Blue: trace ( color was blue ); case Rgb(r,g,b): trace ( color had a red value of  + r); } } static function getColor (): Color { return Rgb( 255 , 0 , 255 ); } } &#x5728;&#x68C0;&#x7D22;&#x901A;&#x8FC7;&#x5206;&#x914D; getColor() &#x7684;&#x8FD4;&#x56DE;&#x503C;&#x5206;&#x914D;&#x7ED9; color &#x7684;&#x503C;&#x4E4B;&#x540E;&#xFF0C;&#x4E00;&#x4E2A; switch &#x8BED;&#x53E5;&#xFF08;&#x7B2C;5.17&#x8282;&#xFF09; &#x6839;&#x636E; color &#x503C;&#x8FDB;&#x884C;&#x5206;&#x652F;&#x3002;&#x524D;&#x4E09;&#x4E2A;&#x60C5;&#x51B5;&#x662F; Red &#xFF0C; Green &#x548C; Blue &#xFF0C;&#x5B83;&#x4EEC;&#x662F;&#x6CA1;&#x6709;&#x4EF7;&#x503C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x8DDF; Color &#x4E2D;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E00;&#x81F4;&#x3002;&#x6700;&#x540E;&#x7684; Rgb(r,g,b) &#x5C55;&#x793A;&#x5982;&#x4F55;&#x63D0;&#x53D6;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x7684;&#x53C2;&#x6570;&#x503C;&#xFF1A;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x4F7F;&#x7528;&#x5728; case &#x8868;&#x8FBE;&#x5F0F;&#x4E3B;&#x4F53;&#x4E2D;&#xFF0C;&#x5C31;&#x50CF;&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x4E2A; var &#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5.10&#x8282;&#xFF09; &#x4E00;&#x6837;&#x3002;&#x5173;&#x4E8E;&#x4F7F;&#x7528; switch &#x8BED;&#x53E5;&#x7684;&#x9AD8;&#x7EA7;&#x4FE1;&#x606F;&#x5C06;&#x5728; &#x6A21;&#x5F0F;&#x5339;&#x914D;&#xFF08;&#x7B2C;6.4&#x8282;&#xFF09; &#x7AE0;&#x8282;&#x8FDB;&#x4E00;&#x6B65;&#x63A2;&#x7D22;&#x3002;"},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.2.结构类型的类记法.html","body":"2.5.2. 结构类型的类记法 如果想要定义一个 结构类型 时，Haxe 允许使用在 类字段（第4章） 中所使用的语法来定义结构类型。下面的 typedef（第3.1节） 声明了一个 Point 类型，它包含了两个 Int 类型的 变量字段 x 和 y ： 1 2 3 4 typedef Point =  var x : Int ; var y : Int ;  2.4.2Class Notation for Structure Types When defining a structure type, Haxe allows the use of the same syntax described in Class Fields . The following typedef declares a Point type with variable fields x and y of type Int : 1 2 3 4 typedef Point =  var x : Int ; var y : Int ;  since Haxe 4.0.0 The fields of a structure may also be declared with final , which only allows them to be assigned once. Such a structure will only unify with other types if the corresponding fields are also final . 结构的字段也可以被修饰为 final ，这意味着这些字段只能被赋值一次。同时这类结构只能被统一为对应字段同样修饰为 final 的类型。"},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{"title":"2.5.2. &#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x7684;&#x7C7B;&#x8BB0;&#x6CD5;","path":"\\2.类型\\2.5.匿名结构\\2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法","body":"&#x5982;&#x679C;&#x60F3;&#x8981;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A; &#x7ED3;&#x6784;&#x7C7B;&#x578B; &#x65F6;&#xFF0C;Haxe &#x5141;&#x8BB8;&#x4F7F;&#x7528;&#x5728; &#x7C7B;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;4&#x7AE0;&#xFF09; &#x4E2D;&#x6240;&#x4F7F;&#x7528;&#x7684;&#x8BED;&#x6CD5;&#x6765;&#x5B9A;&#x4E49;&#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x3002;&#x4E0B;&#x9762;&#x7684; typedef&#xFF08;&#x7B2C;3.1&#x8282;&#xFF09; &#x58F0;&#x660E;&#x4E86;&#x4E00;&#x4E2A; Point &#x7C7B;&#x578B;&#xFF0C;&#x5B83;&#x5305;&#x542B;&#x4E86;&#x4E24;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684; &#x53D8;&#x91CF;&#x5B57;&#x6BB5; x &#x548C; y &#xFF1A; 1 2 3 4 typedef Point = { var x : Int ; var y : Int ; } 2.4.2Class Notation for Structure Types When defining a structure type, Haxe allows the use of the same syntax described in Class Fields . The following typedef declares a Point type with variable fields x and y of type Int : 1 2 3 4 typedef Point = { var x : Int ; var y : Int ; } since Haxe 4.0.0 The fields of a structure may also be declared with final , which only allows them to be assigned once. Such a structure will only unify with other types if the corresponding fields are also final . &#x7ED3;&#x6784;&#x7684;&#x5B57;&#x6BB5;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x4FEE;&#x9970;&#x4E3A; final &#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x8FD9;&#x4E9B;&#x5B57;&#x6BB5;&#x53EA;&#x80FD;&#x88AB;&#x8D4B;&#x503C;&#x4E00;&#x6B21;&#x3002;&#x540C;&#x65F6;&#x8FD9;&#x7C7B;&#x7ED3;&#x6784;&#x53EA;&#x80FD;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x5BF9;&#x5E94;&#x5B57;&#x6BB5;&#x540C;&#x6837;&#x4FEE;&#x9970;&#x4E3A; final &#x7684;&#x7C7B;&#x578B;&#x3002;"},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{"title":"2.4.2Class Notation for Structure Types","path":"\\2.类型\\2.5.匿名结构\\2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types","body":"When defining a structure type, Haxe allows the use of the same syntax described in Class Fields . The following typedef declares a Point type with variable fields x and y of type Int : 1 2 3 4 typedef Point = { var x : Int ; var y : Int ; } since Haxe 4.0.0 The fields of a structure may also be declared with final , which only allows them to be assigned once. Such a structure will only unify with other types if the corresponding fields are also final . &#x7ED3;&#x6784;&#x7684;&#x5B57;&#x6BB5;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x4FEE;&#x9970;&#x4E3A; final &#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x8FD9;&#x4E9B;&#x5B57;&#x6BB5;&#x53EA;&#x80FD;&#x88AB;&#x8D4B;&#x503C;&#x4E00;&#x6B21;&#x3002;&#x540C;&#x65F6;&#x8FD9;&#x7C7B;&#x7ED3;&#x6784;&#x53EA;&#x80FD;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x5BF9;&#x5E94;&#x5B57;&#x6BB5;&#x540C;&#x6837;&#x4FEE;&#x9970;&#x4E3A; final &#x7684;&#x7C7B;&#x578B;&#x3002;"},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.1.结构值的JSON形式.html","body":"2.5.1.结构值的JSON形式 还可以为匿名结构使用 JavaScript 对象记法 ，为键使用使用字符串字面值： 1 var point =  \"x\" : 1 , \"y\" : -5 ; 虽然允许任意的字符串字面值，但如必须是有效的 Haxe 标识符（第5章） ，字段才会被认为是类型的一部分。否则，Haxe 的语法不会允许对该字段访问的表达式，并且必须通过使用 Reflect.field 和 Reflect.setField 来使用 反射（10.7） 。 It is also possible to use JavaScript Object Notation for structures by using string literals for the keys: 1 var point =  \"x\" : 1 , \"y\" : -5 ; While any string literal is allowed, the field is only considered part of the type if it is a valid Haxe identifier . Otherwise, Haxe syntax does not allow expressing access to such a field, and reflection has to be employed through the use of Reflect.field and Reflect.setField instead."},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{"title":"2.5.1.&#x7ED3;&#x6784;&#x503C;&#x7684;JSON&#x5F62;&#x5F0F;","path":"\\2.类型\\2.5.匿名结构\\2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式","body":"&#x8FD8;&#x53EF;&#x4EE5;&#x4E3A;&#x533F;&#x540D;&#x7ED3;&#x6784;&#x4F7F;&#x7528; JavaScript &#x5BF9;&#x8C61;&#x8BB0;&#x6CD5; &#xFF0C;&#x4E3A;&#x952E;&#x4F7F;&#x7528;&#x4F7F;&#x7528;&#x5B57;&#x7B26;&#x4E32;&#x5B57;&#x9762;&#x503C;&#xFF1A; 1 var point = { x : 1 , y : -5 }; &#x867D;&#x7136;&#x5141;&#x8BB8;&#x4EFB;&#x610F;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5B57;&#x9762;&#x503C;&#xFF0C;&#x4F46;&#x5982;&#x5FC5;&#x987B;&#x662F;&#x6709;&#x6548;&#x7684; Haxe &#x6807;&#x8BC6;&#x7B26;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09; &#xFF0C;&#x5B57;&#x6BB5;&#x624D;&#x4F1A;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x7C7B;&#x578B;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x3002;&#x5426;&#x5219;&#xFF0C;Haxe &#x7684;&#x8BED;&#x6CD5;&#x4E0D;&#x4F1A;&#x5141;&#x8BB8;&#x5BF9;&#x8BE5;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x5E76;&#x4E14;&#x5FC5;&#x987B;&#x901A;&#x8FC7;&#x4F7F;&#x7528; Reflect.field &#x548C; Reflect.setField &#x6765;&#x4F7F;&#x7528; &#x53CD;&#x5C04;&#xFF08;10.7&#xFF09; &#x3002; It is also possible to use JavaScript Object Notation for structures by using string literals for the keys: 1 var point = { x : 1 , y : -5 }; While any string literal is allowed, the field is only considered part of the type if it is a valid Haxe identifier . Otherwise, Haxe syntax does not allow expressing access to such a field, and reflection has to be employed through the use of Reflect.field and Reflect.setField instead."},"2.类型/2.5.匿名结构/2.5.4.性能影响.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.4.性能影响.html","body":"2.5.4.性能影响 通过扩展、 结构子类型化（第3.5.2） 使用匿名结构，在编译为 动态类型目标语言（第2.2节） 时不会对性能产生影响。然而，对于 静态类型目标语言（第2.2节） 来说，必须执行一个动态的查找，这通常会慢于对静态字段的访问。"},"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{"title":"2.5.4.&#x6027;&#x80FD;&#x5F71;&#x54CD;","path":"\\2.类型\\2.5.匿名结构\\2.5.4.性能影响.html#2-5-4-性能影响","body":"&#x901A;&#x8FC7;&#x6269;&#x5C55;&#x3001; &#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316;&#xFF08;&#x7B2C;3.5.2&#xFF09; &#x4F7F;&#x7528;&#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x7F16;&#x8BD1;&#x4E3A; &#x52A8;&#x6001;&#x7C7B;&#x578B;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09; &#x65F6;&#x4E0D;&#x4F1A;&#x5BF9;&#x6027;&#x80FD;&#x4EA7;&#x751F;&#x5F71;&#x54CD;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x5BF9;&#x4E8E; &#x9759;&#x6001;&#x7C7B;&#x578B;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09; &#x6765;&#x8BF4;&#xFF0C;&#x5FC5;&#x987B;&#x6267;&#x884C;&#x4E00;&#x4E2A;&#x52A8;&#x6001;&#x7684;&#x67E5;&#x627E;&#xFF0C;&#x8FD9;&#x901A;&#x5E38;&#x4F1A;&#x6162;&#x4E8E;&#x5BF9;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x7684;&#x8BBF;&#x95EE;&#x3002;"},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.3.可选字段.html","body":"2.5.3 Optional Fields 结构类型的字段可以被修饰为可选的。在标准形式的声明下，通过位于字段名称前放置一个问号 ? 进行修饰。 Fields of a structure type can be made optional. In the standard notation, this is achieved by prefixing the field name with a question mark ? : 1 2 3 4 5 typedef User =  age : Int , name : String , ?phoneNumber : String  在类记法（Class Notation) 形式的声明下，则可以使用 @:optional 元数据来修饰可选字段 In class notation, the @:optional metadata can be used instead: 1 2 3 4 5 typedef User =  var age : Int ; var name : String ; @:optional var phoneNumber : String;  从 Haxe 4.0 开始，允许在类记法的结构声明中使用问号 ? 修饰可选字段： 1 2 3 4 5 typedef User =  var age : Int ; var name : String ; var ?phoneNumber : String ; "},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{"title":"2.5.3 Optional Fields","path":"\\2.类型\\2.5.匿名结构\\2.5.3.可选字段.html#2-5-3-Optional-Fields","body":"&#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x53EF;&#x4EE5;&#x88AB;&#x4FEE;&#x9970;&#x4E3A;&#x53EF;&#x9009;&#x7684;&#x3002;&#x5728;&#x6807;&#x51C6;&#x5F62;&#x5F0F;&#x7684;&#x58F0;&#x660E;&#x4E0B;&#xFF0C;&#x901A;&#x8FC7;&#x4F4D;&#x4E8E;&#x5B57;&#x6BB5;&#x540D;&#x79F0;&#x524D;&#x653E;&#x7F6E;&#x4E00;&#x4E2A;&#x95EE;&#x53F7; ? &#x8FDB;&#x884C;&#x4FEE;&#x9970;&#x3002; Fields of a structure type can be made optional. In the standard notation, this is achieved by prefixing the field name with a question mark ? : 1 2 3 4 5 typedef User = { age : Int , name : String , ?phoneNumber : String } &#x5728;&#x7C7B;&#x8BB0;&#x6CD5;&#xFF08;Class Notation) &#x5F62;&#x5F0F;&#x7684;&#x58F0;&#x660E;&#x4E0B;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; @:optional &#x5143;&#x6570;&#x636E;&#x6765;&#x4FEE;&#x9970;&#x53EF;&#x9009;&#x5B57;&#x6BB5; In class notation, the @:optional metadata can be used instead: 1 2 3 4 5 typedef User = { var age : Int ; var name : String ; @:optional var phoneNumber : String; } &#x4ECE; Haxe 4.0 &#x5F00;&#x59CB;&#xFF0C;&#x5141;&#x8BB8;&#x5728;&#x7C7B;&#x8BB0;&#x6CD5;&#x7684;&#x7ED3;&#x6784;&#x58F0;&#x660E;&#x4E2D;&#x4F7F;&#x7528;&#x95EE;&#x53F7; ? &#x4FEE;&#x9970;&#x53EF;&#x9009;&#x5B57;&#x6BB5;&#xFF1A; 1 2 3 4 5 typedef User = { var age : Int ; var name : String ; var ?phoneNumber : String ; }"},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.5.扩展.html","body":"2.5.5.扩展 扩展被用于表示该结构具有某个给定类型的所有字段外，还具有一些额外的字段： Extensions are used to express that a structure has all the fields of a given type as well as some additional fields of its own: 1 2 3 4 5 6 7 8 9 10 11 12 typedef IterableWithLengthT =   IterableT, // read only property var length( default , null ): Int ;  class Main  static public function main ()  var array = [ 1 , 2 , 3 ]; var t: IterableWithLength  Int  = array;   大于操作符  被用于表示创建一个 IterableT 的扩展。然后补充额外的类字段，此例中，需要一个 Int 类型的 只读 属性 length 。 The greater-than operator  denotes that an extension of IterableT is being created, with the additional class fields following. In this case, a read-only property length of type Int is required. 为了能与 IterableWithLengthT 兼容，一个类必须能够与 IterableT 兼容的同时提供一个 只读 的 Int 类型属性 length 。以上例子中赋值了一个 Array ，其刚好满足这两点要求。 In order to be compatible with IterableWithLengthT , a type must be compatible with IterableT and provide a read-only length property of type Int . The previous example assigns an Array , which happens to fulfill these requirements. since Haxe 3.1.0 多个结构可以被同时扩展： Multiple structures can be extended at once: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 typedef WithLength =  var length( default , null ): Int ;  typedef IterableWithLengthAndPushT =   IterableT,  WithLength, function push (a: T ): Int ;  class Main  static public function main ()  var array = [ 1 , 2 , 3 ]; var t: IterableWithLengthAndPush  Int  = array;   since Haxe 4.0.0 有一个额外的记法可以被用于扩展，通过以 &amp; 符号分格每一个欲扩展的结构来表示。 An alternative notation for extension can be used, denoted by separating each extended structure with an &amp; symbol. 1 2 3 4 5 6 7 8 9 10 11 12 typedef Point2D =  var x: Int ; var y: Int ;  typedef Point3D = Point2D &amp; z: Int ; class Main  static public function main ()  var point: Point3D = x: 5 , y: 3 , z: 1 ;   补充另一例子： 1 2 3 4 5 6 7 8 9 10 11 typedef IterableWithLengthAndPushT =   IterableT,  WithLength, function push (a: T ): Int ;  //可以改写为： typedef IterableWithLengthAndPushT = IterableT &amp; WithLength &amp;  function push (a: T ): Int ; "},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{"title":"2.5.5.&#x6269;&#x5C55;","path":"\\2.类型\\2.5.匿名结构\\2.5.5.扩展.html#2-5-5-扩展","body":"&#x6269;&#x5C55;&#x88AB;&#x7528;&#x4E8E;&#x8868;&#x793A;&#x8BE5;&#x7ED3;&#x6784;&#x5177;&#x6709;&#x67D0;&#x4E2A;&#x7ED9;&#x5B9A;&#x7C7B;&#x578B;&#x7684;&#x6240;&#x6709;&#x5B57;&#x6BB5;&#x5916;&#xFF0C;&#x8FD8;&#x5177;&#x6709;&#x4E00;&#x4E9B;&#x989D;&#x5916;&#x7684;&#x5B57;&#x6BB5;&#xFF1A; Extensions are used to express that a structure has all the fields of a given type as well as some additional fields of its own: 1 2 3 4 5 6 7 8 9 10 11 12 typedef IterableWithLengthT = {  IterableT, // read only property var length( default , null ): Int ; } class Main { static public function main () { var array = [ 1 , 2 , 3 ]; var t: IterableWithLength  Int  = array; } } &#x5927;&#x4E8E;&#x64CD;&#x4F5C;&#x7B26;  &#x88AB;&#x7528;&#x4E8E;&#x8868;&#x793A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A; IterableT &#x7684;&#x6269;&#x5C55;&#x3002;&#x7136;&#x540E;&#x8865;&#x5145;&#x989D;&#x5916;&#x7684;&#x7C7B;&#x5B57;&#x6BB5;&#xFF0C;&#x6B64;&#x4F8B;&#x4E2D;&#xFF0C;&#x9700;&#x8981;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684; &#x53EA;&#x8BFB; &#x5C5E;&#x6027; length &#x3002; The greater-than operator  denotes that an extension of IterableT is being created, with the additional class fields following. In this case, a read-only property length of type Int is required. &#x4E3A;&#x4E86;&#x80FD;&#x4E0E; IterableWithLengthT &#x517C;&#x5BB9;&#xFF0C;&#x4E00;&#x4E2A;&#x7C7B;&#x5FC5;&#x987B;&#x80FD;&#x591F;&#x4E0E; IterableT &#x517C;&#x5BB9;&#x7684;&#x540C;&#x65F6;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A; &#x53EA;&#x8BFB; &#x7684; Int &#x7C7B;&#x578B;&#x5C5E;&#x6027; length &#x3002;&#x4EE5;&#x4E0A;&#x4F8B;&#x5B50;&#x4E2D;&#x8D4B;&#x503C;&#x4E86;&#x4E00;&#x4E2A; Array &#xFF0C;&#x5176;&#x521A;&#x597D;&#x6EE1;&#x8DB3;&#x8FD9;&#x4E24;&#x70B9;&#x8981;&#x6C42;&#x3002; In order to be compatible with IterableWithLengthT , a type must be compatible with IterableT and provide a read-only length property of type Int . The previous example assigns an Array , which happens to fulfill these requirements. since Haxe 3.1.0 &#x591A;&#x4E2A;&#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x88AB;&#x540C;&#x65F6;&#x6269;&#x5C55;&#xFF1A; Multiple structures can be extended at once: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 typedef WithLength = { var length( default , null ): Int ; } typedef IterableWithLengthAndPushT = {  IterableT,  WithLength, function push (a: T ): Int ; } class Main { static public function main () { var array = [ 1 , 2 , 3 ]; var t: IterableWithLengthAndPush  Int  = array; } } since Haxe 4.0.0 &#x6709;&#x4E00;&#x4E2A;&#x989D;&#x5916;&#x7684;&#x8BB0;&#x6CD5;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x4E8E;&#x6269;&#x5C55;&#xFF0C;&#x901A;&#x8FC7;&#x4EE5; &amp; &#x7B26;&#x53F7;&#x5206;&#x683C;&#x6BCF;&#x4E00;&#x4E2A;&#x6B32;&#x6269;&#x5C55;&#x7684;&#x7ED3;&#x6784;&#x6765;&#x8868;&#x793A;&#x3002; An alternative notation for extension can be used, denoted by separating each extended structure with an &amp; symbol. 1 2 3 4 5 6 7 8 9 10 11 12 typedef Point2D = { var x: Int ; var y: Int ; } typedef Point3D = Point2D &amp; {z: Int }; class Main { static public function main () { var point: Point3D = {x: 5 , y: 3 , z: 1 }; } } &#x8865;&#x5145;&#x53E6;&#x4E00;&#x4F8B;&#x5B50;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 typedef IterableWithLengthAndPushT = {  IterableT,  WithLength, function push (a: T ): Int ; } //&#x53EF;&#x4EE5;&#x6539;&#x5199;&#x4E3A;&#xFF1A; typedef IterableWithLengthAndPushT = IterableT &amp; WithLength &amp; { function push (a: T ): Int ; }"},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.匿名结构.html","body":"2.5.匿名结构 匿名结构可以用来组织数据，而不用显式地创建一个类型。下面的示例创建了一个结构，包含两个字段 x 和 name ，并分别初始化它们的值为 12 和 “ foo ”： 1 2 3 4 5 class Main  static public function main ()  var myStructure =  x: 12 , name: \"foo \";   一般语法规则如下： 一个包括在花括号 {} 内的结构 一个使用逗号 , 分隔的键值对列表 冒号 : 用来分隔的键和值，键名必须是一个有效的 标识符（第5章） 值可以是任何 Haxe 表达式 规则 4 意味着结构可以被嵌套和混合，如： 1 2 3 4 5 6 7 8 var user =  name : \"Nicolas \", age : 32, pos : [//这是一个数组  x : 0, y : 0 , //这是一个匿名结构  x : 1, y : -1 //这也是一个匿名结构 ], ; 匿名结构的字段像类一样可以通过点号操作符 . 访问，如下： 1 2 3 4 // 获取键 name 的值，即 \"Nicolas\" user.name; // 设置 键 age 的值为 33 user.age = 33 ; 值得注意的是，使用匿名结构不会破坏类型系统。编译器确保只能访问可用的字段，也就是说，如下的程序不会编译： 1 2 3 4 5 6 7 class Test  static public function main ()  var point =  x: 0 . 0 , y: 12 . 0 ; //  y : Float, x : Float  没有字段 z point.z;   错误信息表明编译器了解 point 的类型：它是一个包含了两个 Float 类型 x 和 y 字段的匿名结构。由于它没有字段 z ，访问失败。 point 的类型通过 类型推断（第3.6节） 被得知，这使得我们不需要为局部变量使用显式的类型声明。但是，如果 point 是一个字段，那么它必须通过如下形式进行声明： 1 2 3 4 5 class Path  var start :  x : Int , y : Int ; var target :  x : Int , y : Int ; var current :  x : Int , y : Int ;  为了避免这种冗余的类型声明形式，尤其是对于更复杂的结构，建议使用一个 typedef（第3.1节） 关键字： 1 2 3 4 5 6 7 typedef Point =  x : Int , y : Int  class Path  var start : Point ; var target : Point ; var current : Point ; "},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{"title":"2.5.&#x533F;&#x540D;&#x7ED3;&#x6784;","path":"\\2.类型\\2.5.匿名结构\\2.5.匿名结构.html#2-5-匿名结构","body":"&#x533F;&#x540D;&#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x7EC4;&#x7EC7;&#x6570;&#x636E;&#xFF0C;&#x800C;&#x4E0D;&#x7528;&#x663E;&#x5F0F;&#x5730;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x4E0B;&#x9762;&#x7684;&#x793A;&#x4F8B;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#xFF0C;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x5B57;&#x6BB5; x &#x548C; name &#xFF0C;&#x5E76;&#x5206;&#x522B;&#x521D;&#x59CB;&#x5316;&#x5B83;&#x4EEC;&#x7684;&#x503C;&#x4E3A; 12 &#x548C; &#x201C; foo &#x201D;&#xFF1A; 1 2 3 4 5 class Main { static public function main () { var myStructure = { x: 12 , name: foo }; } } &#x4E00;&#x822C;&#x8BED;&#x6CD5;&#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A; &#x4E00;&#x4E2A;&#x5305;&#x62EC;&#x5728;&#x82B1;&#x62EC;&#x53F7; {} &#x5185;&#x7684;&#x7ED3;&#x6784; &#x4E00;&#x4E2A;&#x4F7F;&#x7528;&#x9017;&#x53F7; , &#x5206;&#x9694;&#x7684;&#x952E;&#x503C;&#x5BF9;&#x5217;&#x8868; &#x5192;&#x53F7; : &#x7528;&#x6765;&#x5206;&#x9694;&#x7684;&#x952E;&#x548C;&#x503C;&#xFF0C;&#x952E;&#x540D;&#x5FC5;&#x987B;&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x6548;&#x7684; &#x6807;&#x8BC6;&#x7B26;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09; &#x503C;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55; Haxe &#x8868;&#x8FBE;&#x5F0F; &#x89C4;&#x5219; 4 &#x610F;&#x5473;&#x7740;&#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x88AB;&#x5D4C;&#x5957;&#x548C;&#x6DF7;&#x5408;&#xFF0C;&#x5982;&#xFF1A; 1 2 3 4 5 6 7 8 var user = { name : Nicolas , age : 32, pos : [//&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x6570;&#x7EC4; { x : 0, y : 0 }, //&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x7ED3;&#x6784; { x : 1, y : -1 }//&#x8FD9;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x7ED3;&#x6784; ], }; &#x533F;&#x540D;&#x7ED3;&#x6784;&#x7684;&#x5B57;&#x6BB5;&#x50CF;&#x7C7B;&#x4E00;&#x6837;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x70B9;&#x53F7;&#x64CD;&#x4F5C;&#x7B26; . &#x8BBF;&#x95EE;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A; 1 2 3 4 // &#x83B7;&#x53D6;&#x952E; name &#x7684;&#x503C;&#xFF0C;&#x5373; Nicolas user.name; // &#x8BBE;&#x7F6E; &#x952E; age &#x7684;&#x503C;&#x4E3A; 33 user.age = 33 ; &#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x4F7F;&#x7528;&#x533F;&#x540D;&#x7ED3;&#x6784;&#x4E0D;&#x4F1A;&#x7834;&#x574F;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x786E;&#x4FDD;&#x53EA;&#x80FD;&#x8BBF;&#x95EE;&#x53EF;&#x7528;&#x7684;&#x5B57;&#x6BB5;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x4E0B;&#x7684;&#x7A0B;&#x5E8F;&#x4E0D;&#x4F1A;&#x7F16;&#x8BD1;&#xFF1A; 1 2 3 4 5 6 7 class Test { static public function main () { var point = { x: 0 . 0 , y: 12 . 0 }; // { y : Float, x : Float } &#x6CA1;&#x6709;&#x5B57;&#x6BB5; z point.z; } } &#x9519;&#x8BEF;&#x4FE1;&#x606F;&#x8868;&#x660E;&#x7F16;&#x8BD1;&#x5668;&#x4E86;&#x89E3; point &#x7684;&#x7C7B;&#x578B;&#xFF1A;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x5305;&#x542B;&#x4E86;&#x4E24;&#x4E2A; Float &#x7C7B;&#x578B; x &#x548C; y &#x5B57;&#x6BB5;&#x7684;&#x533F;&#x540D;&#x7ED3;&#x6784;&#x3002;&#x7531;&#x4E8E;&#x5B83;&#x6CA1;&#x6709;&#x5B57;&#x6BB5; z &#xFF0C;&#x8BBF;&#x95EE;&#x5931;&#x8D25;&#x3002; point &#x7684;&#x7C7B;&#x578B;&#x901A;&#x8FC7; &#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09; &#x88AB;&#x5F97;&#x77E5;&#xFF0C;&#x8FD9;&#x4F7F;&#x5F97;&#x6211;&#x4EEC;&#x4E0D;&#x9700;&#x8981;&#x4E3A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x4F7F;&#x7528;&#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x58F0;&#x660E;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x5982;&#x679C; point &#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x5FC5;&#x987B;&#x901A;&#x8FC7;&#x5982;&#x4E0B;&#x5F62;&#x5F0F;&#x8FDB;&#x884C;&#x58F0;&#x660E;&#xFF1A; 1 2 3 4 5 class Path { var start : { x : Int , y : Int }; var target : { x : Int , y : Int }; var current : { x : Int , y : Int }; } &#x4E3A;&#x4E86;&#x907F;&#x514D;&#x8FD9;&#x79CD;&#x5197;&#x4F59;&#x7684;&#x7C7B;&#x578B;&#x58F0;&#x660E;&#x5F62;&#x5F0F;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5BF9;&#x4E8E;&#x66F4;&#x590D;&#x6742;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;&#x4E00;&#x4E2A; typedef&#xFF08;&#x7B2C;3.1&#x8282;&#xFF09; &#x5173;&#x952E;&#x5B57;&#xFF1A; 1 2 3 4 5 6 7 typedef Point = { x : Int , y : Int } class Path { var start : Point ; var target : Point ; var current : Point ; }"},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{"title":"","path":"\\2.类型\\2.6.函数类型\\2.6.1.可选参数.html","body":"2.6.1.可选参数 可选参数通过在参数标识符前面前置一个问号 ? 来声明： 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main  static public function main ()  // ?i : Int - ?s : String - String $type(test); trace (test()); // i: null, s: null trace (test( 1 )); // i: 1, s: null trace (test( 1 , \"foo\" )); // i: 1, s: foo trace (test( \"foo\" )); // i: null, s: foo  static function test (?i: Int , ?s: String )  return \"i: \" +i + \", s: \" +s;   函数 test 有两个可选参数：Int 类型的 i 和 String 类型的 s 。这在第3行的函数类型输出直接反映出来。这个例子程序调用了4次 test ，并打印出它的返回值： 第一次调用不带任何参数 第二次调用带有一个单独的参数 1 第三次调用带了两个参数 1 和 “ foo “ 第四次调用只有单独的参数 “ foo ” 输出内容显示，函数调用中被省略的可选参数的值为 null 。这意味着这些参数的类型必须认可 null 作为值，这是在 为空性（第2.2节） 中讨论的问题。 当编译到一个 静态语言目标（第2.2节） 时，Haxe 编译器通过推断它们的类型为 Null 确保可选的基本类型的参数是可空的。前三个调用非常直观，第四个可能是一个惊喜：如果提供的值可以分配到一个之后的参数，确实允许跳过可选参数。"},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{"title":"2.6.1.&#x53EF;&#x9009;&#x53C2;&#x6570;","path":"\\2.类型\\2.6.函数类型\\2.6.1.可选参数.html#2-6-1-可选参数","body":"&#x53EF;&#x9009;&#x53C2;&#x6570;&#x901A;&#x8FC7;&#x5728;&#x53C2;&#x6570;&#x6807;&#x8BC6;&#x7B26;&#x524D;&#x9762;&#x524D;&#x7F6E;&#x4E00;&#x4E2A;&#x95EE;&#x53F7; ? &#x6765;&#x58F0;&#x660E;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main { static public function main () { // ?i : Int - ?s : String - String $type(test); trace (test()); // i: null, s: null trace (test( 1 )); // i: 1, s: null trace (test( 1 , foo )); // i: 1, s: foo trace (test( foo )); // i: null, s: foo } static function test (?i: Int , ?s: String ) { return i:  +i + , s:  +s; } } &#x51FD;&#x6570; test &#x6709;&#x4E24;&#x4E2A;&#x53EF;&#x9009;&#x53C2;&#x6570;&#xFF1A;Int &#x7C7B;&#x578B;&#x7684; i &#x548C; String &#x7C7B;&#x578B;&#x7684; s &#x3002;&#x8FD9;&#x5728;&#x7B2C;3&#x884C;&#x7684;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x8F93;&#x51FA;&#x76F4;&#x63A5;&#x53CD;&#x6620;&#x51FA;&#x6765;&#x3002;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x7A0B;&#x5E8F;&#x8C03;&#x7528;&#x4E86;4&#x6B21; test &#xFF0C;&#x5E76;&#x6253;&#x5370;&#x51FA;&#x5B83;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#xFF1A; &#x7B2C;&#x4E00;&#x6B21;&#x8C03;&#x7528;&#x4E0D;&#x5E26;&#x4EFB;&#x4F55;&#x53C2;&#x6570; &#x7B2C;&#x4E8C;&#x6B21;&#x8C03;&#x7528;&#x5E26;&#x6709;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x53C2;&#x6570; 1 &#x7B2C;&#x4E09;&#x6B21;&#x8C03;&#x7528;&#x5E26;&#x4E86;&#x4E24;&#x4E2A;&#x53C2;&#x6570; 1 &#x548C; &#x201C; foo &#x201C; &#x7B2C;&#x56DB;&#x6B21;&#x8C03;&#x7528;&#x53EA;&#x6709;&#x5355;&#x72EC;&#x7684;&#x53C2;&#x6570; &#x201C; foo &#x201D; &#x8F93;&#x51FA;&#x5185;&#x5BB9;&#x663E;&#x793A;&#xFF0C;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x4E2D;&#x88AB;&#x7701;&#x7565;&#x7684;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x7684;&#x503C;&#x4E3A; null &#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x8FD9;&#x4E9B;&#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x8BA4;&#x53EF; null &#x4F5C;&#x4E3A;&#x503C;&#xFF0C;&#x8FD9;&#x662F;&#x5728; &#x4E3A;&#x7A7A;&#x6027;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09; &#x4E2D;&#x8BA8;&#x8BBA;&#x7684;&#x95EE;&#x9898;&#x3002; &#x5F53;&#x7F16;&#x8BD1;&#x5230;&#x4E00;&#x4E2A; &#x9759;&#x6001;&#x8BED;&#x8A00;&#x76EE;&#x6807;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09; &#x65F6;&#xFF0C;Haxe &#x7F16;&#x8BD1;&#x5668;&#x901A;&#x8FC7;&#x63A8;&#x65AD;&#x5B83;&#x4EEC;&#x7684;&#x7C7B;&#x578B;&#x4E3A; Null &#x786E;&#x4FDD;&#x53EF;&#x9009;&#x7684;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x662F;&#x53EF;&#x7A7A;&#x7684;&#x3002;&#x524D;&#x4E09;&#x4E2A;&#x8C03;&#x7528;&#x975E;&#x5E38;&#x76F4;&#x89C2;&#xFF0C;&#x7B2C;&#x56DB;&#x4E2A;&#x53EF;&#x80FD;&#x662F;&#x4E00;&#x4E2A;&#x60CA;&#x559C;&#xFF1A;&#x5982;&#x679C;&#x63D0;&#x4F9B;&#x7684;&#x503C;&#x53EF;&#x4EE5;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A;&#x4E4B;&#x540E;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x786E;&#x5B9E;&#x5141;&#x8BB8;&#x8DF3;&#x8FC7;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x3002;"},"2.类型/2.6.函数类型/2.6.2.默认值.html":{"title":"","path":"\\2.类型\\2.6.函数类型\\2.6.2.默认值.html","body":"2.6.2.默认值 Haxe 允许通过分配一个常量值来为参数提供默认值，： 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main  static public function main ()  // ?i : Int - ?s : String - String $type(test); trace (test()); // i: 12, s: bar trace (test( 1 )); // i: 1, s: bar trace (test( 1 , \"foo\" )); // i: 1, s: foo trace (test( \"foo\" )); // i: 12, s: foo  static function test (?i = 12 , s = \"bar\" )  return \"i: \" +i + \", s: \" +s;   这个示例和前面 可选参数（第2.6.1节） 中的非常相似，唯一的区别是函数的参数 i 和 s 被赋值为 12 和 “ bar ”。效果是，默认值取代 null 被使用，可以在调用时省略某个参数。Haxe 中的默认值并不是类型的一部分，而且不能在调用时更改函数的默认值（意指只应用于当次调用，而不会改变函数的默认值定义。除非函数是 内联（第4.4.2节） 的，被认为是一个比较典型的处理）。在一些目标语言中，编译器可能仍然传递 null 作为省略的参数值，生成类似于这样的代码到函数中： 1 2 3 4 5 static function test (i = 12 , s = \"bar\" )  if (i == null ) i = 12 ; if (s == null ) s = \"bar\" ; return \"i: \" +i + \", s: \" +s;  在一个不使用默认值可能有时更可行的方案的性能关键代码中，这应该被考虑。"},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{"title":"2.6.2.&#x9ED8;&#x8BA4;&#x503C;","path":"\\2.类型\\2.6.函数类型\\2.6.2.默认值.html#2-6-2-默认值","body":"Haxe &#x5141;&#x8BB8;&#x901A;&#x8FC7;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;&#x503C;&#x6765;&#x4E3A;&#x53C2;&#x6570;&#x63D0;&#x4F9B;&#x9ED8;&#x8BA4;&#x503C;&#xFF0C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main { static public function main () { // ?i : Int - ?s : String - String $type(test); trace (test()); // i: 12, s: bar trace (test( 1 )); // i: 1, s: bar trace (test( 1 , foo )); // i: 1, s: foo trace (test( foo )); // i: 12, s: foo } static function test (?i = 12 , s = bar ) { return i:  +i + , s:  +s; } } &#x8FD9;&#x4E2A;&#x793A;&#x4F8B;&#x548C;&#x524D;&#x9762; &#x53EF;&#x9009;&#x53C2;&#x6570;&#xFF08;&#x7B2C;2.6.1&#x8282;&#xFF09; &#x4E2D;&#x7684;&#x975E;&#x5E38;&#x76F8;&#x4F3C;&#xFF0C;&#x552F;&#x4E00;&#x7684;&#x533A;&#x522B;&#x662F;&#x51FD;&#x6570;&#x7684;&#x53C2;&#x6570; i &#x548C; s &#x88AB;&#x8D4B;&#x503C;&#x4E3A; 12 &#x548C; &#x201C; bar &#x201D;&#x3002;&#x6548;&#x679C;&#x662F;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x53D6;&#x4EE3; null &#x88AB;&#x4F7F;&#x7528;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x8C03;&#x7528;&#x65F6;&#x7701;&#x7565;&#x67D0;&#x4E2A;&#x53C2;&#x6570;&#x3002;Haxe &#x4E2D;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x5E76;&#x4E0D;&#x662F;&#x7C7B;&#x578B;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x800C;&#x4E14;&#x4E0D;&#x80FD;&#x5728;&#x8C03;&#x7528;&#x65F6;&#x66F4;&#x6539;&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#xFF08;&#x610F;&#x6307;&#x53EA;&#x5E94;&#x7528;&#x4E8E;&#x5F53;&#x6B21;&#x8C03;&#x7528;&#xFF0C;&#x800C;&#x4E0D;&#x4F1A;&#x6539;&#x53D8;&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x5B9A;&#x4E49;&#x3002;&#x9664;&#x975E;&#x51FD;&#x6570;&#x662F; &#x5185;&#x8054;&#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09; &#x7684;&#xFF0C;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x5178;&#x578B;&#x7684;&#x5904;&#x7406;&#xFF09;&#x3002;&#x5728;&#x4E00;&#x4E9B;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x53EF;&#x80FD;&#x4ECD;&#x7136;&#x4F20;&#x9012; null &#x4F5C;&#x4E3A;&#x7701;&#x7565;&#x7684;&#x53C2;&#x6570;&#x503C;&#xFF0C;&#x751F;&#x6210;&#x7C7B;&#x4F3C;&#x4E8E;&#x8FD9;&#x6837;&#x7684;&#x4EE3;&#x7801;&#x5230;&#x51FD;&#x6570;&#x4E2D;&#xFF1A; 1 2 3 4 5 static function test (i = 12 , s = bar ) { if (i == null ) i = 12 ; if (s == null ) s = bar ; return i:  +i + , s:  +s; } &#x5728;&#x4E00;&#x4E2A;&#x4E0D;&#x4F7F;&#x7528;&#x9ED8;&#x8BA4;&#x503C;&#x53EF;&#x80FD;&#x6709;&#x65F6;&#x66F4;&#x53EF;&#x884C;&#x7684;&#x65B9;&#x6848;&#x7684;&#x6027;&#x80FD;&#x5173;&#x952E;&#x4EE3;&#x7801;&#x4E2D;&#xFF0C;&#x8FD9;&#x5E94;&#x8BE5;&#x88AB;&#x8003;&#x8651;&#x3002;"},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{"title":"","path":"\\2.类型\\2.7.动态类型\\2.7.1.Dynamic使用类型参数.html","body":"2.7.1.Dynamic使用类型参数 Dynamic 是一个特殊的类型，因为它允许使用和不使用一个 类型参数（第3.2节） 来进行显式的声明。如果这样一个类型参数被提供， Dynamic（第2.7节） 中描述的 语义被限制为所有的字段兼容该参数类型： 1 2 3 4 5 6 7 var att : Dynamic  String  = xml.attributes; // 有效, 值为一个 String 类型 att.name = \"Nicolas\" ; // dito (这个文档太旧了) att.age = \"26\" ; // error,值不是 String 类型 att.income = 0 ;"},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{"title":"2.7.1.Dynamic&#x4F7F;&#x7528;&#x7C7B;&#x578B;&#x53C2;&#x6570;","path":"\\2.类型\\2.7.动态类型\\2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数","body":"Dynamic &#x662F;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x5141;&#x8BB8;&#x4F7F;&#x7528;&#x548C;&#x4E0D;&#x4F7F;&#x7528;&#x4E00;&#x4E2A; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09; &#x6765;&#x8FDB;&#x884C;&#x663E;&#x5F0F;&#x7684;&#x58F0;&#x660E;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x88AB;&#x63D0;&#x4F9B;&#xFF0C; Dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09; &#x4E2D;&#x63CF;&#x8FF0;&#x7684; &#x8BED;&#x4E49;&#x88AB;&#x9650;&#x5236;&#x4E3A;&#x6240;&#x6709;&#x7684;&#x5B57;&#x6BB5;&#x517C;&#x5BB9;&#x8BE5;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#xFF1A; 1 2 3 4 5 6 7 var att : Dynamic  String  = xml.attributes; // &#x6709;&#x6548;, &#x503C;&#x4E3A;&#x4E00;&#x4E2A; String &#x7C7B;&#x578B; att.name = Nicolas ; // dito (&#x8FD9;&#x4E2A;&#x6587;&#x6863;&#x592A;&#x65E7;&#x4E86;) att.age = 26 ; // error,&#x503C;&#x4E0D;&#x662F; String &#x7C7B;&#x578B; att.income = 0 ;"},"2.类型/2.6.函数类型/2.6.函数类型.html":{"title":"","path":"\\2.类型\\2.6.函数类型\\2.6.函数类型.html","body":"2.6.函数类型 函数类型，连同 单形（第2.9节） 一起，通常是对 Haxe 用户隐藏的很好的一个类型，尽管它们无处不在。我们可以使用 $type ，一个特定的 Haxe 标识符，可以在编译时输出它的表达式的类型，来使它们表现出来： 1 2 3 4 5 6 7 8 9 10 class Main  static public function main ()  // i : Int - s : String - Bool $type(test); $type(test( 1 , \"foo\" )); // Bool  static function test (i: Int , s: String ): Bool  return true ;   函数 test 的声明和 $type 语句的输出有非常强的相似，但也有微妙的区别： 函数参数被特殊的箭头符号 - 分隔，而不是逗号 , 函数返回类型出现在结尾的另一个 - 符号之后 不论哪个记法，很明显，函数 test 接受第一个 Int 类型的参数，第二个 String 类型的参数，并返回一个 Bool 类型值。如果调用这个函数，例如 test(1,foo) ，并将其放在第二个 $type 语句中，Haxe 类型检查器检查 1 是否可以被分配到 Int 类型参数，然后检查 “ foo “ 是否可以被分配到 String 类型参数。调用的类型然后就会和 test 函数返回值的类型相同，即，一个 Bool 类型。 如果一个函数类型有其它函数类型的参数或者返回值，则可以使用括号对它们进行正确的分组。例如， Int-(Int-Void)-Void 表示一个函数，第一个参数为 Int 类型，第二个参数是函数 Int-Void 类型，返回 Void 。"},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{"title":"2.6.&#x51FD;&#x6570;&#x7C7B;&#x578B;","path":"\\2.类型\\2.6.函数类型\\2.6.函数类型.html#2-6-函数类型","body":"&#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF0C;&#x8FDE;&#x540C; &#x5355;&#x5F62;&#xFF08;&#x7B2C;2.9&#x8282;&#xFF09; &#x4E00;&#x8D77;&#xFF0C;&#x901A;&#x5E38;&#x662F;&#x5BF9; Haxe &#x7528;&#x6237;&#x9690;&#x85CF;&#x7684;&#x5F88;&#x597D;&#x7684;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x5C3D;&#x7BA1;&#x5B83;&#x4EEC;&#x65E0;&#x5904;&#x4E0D;&#x5728;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; $type &#xFF0C;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684; Haxe &#x6807;&#x8BC6;&#x7B26;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x8F93;&#x51FA;&#x5B83;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x6765;&#x4F7F;&#x5B83;&#x4EEC;&#x8868;&#x73B0;&#x51FA;&#x6765;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 class Main { static public function main () { // i : Int - s : String - Bool $type(test); $type(test( 1 , foo )); // Bool } static function test (i: Int , s: String ): Bool { return true ; } } &#x51FD;&#x6570; test &#x7684;&#x58F0;&#x660E;&#x548C; $type &#x8BED;&#x53E5;&#x7684;&#x8F93;&#x51FA;&#x6709;&#x975E;&#x5E38;&#x5F3A;&#x7684;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x4E5F;&#x6709;&#x5FAE;&#x5999;&#x7684;&#x533A;&#x522B;&#xFF1A; &#x51FD;&#x6570;&#x53C2;&#x6570;&#x88AB;&#x7279;&#x6B8A;&#x7684;&#x7BAD;&#x5934;&#x7B26;&#x53F7; - &#x5206;&#x9694;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x9017;&#x53F7; , &#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x51FA;&#x73B0;&#x5728;&#x7ED3;&#x5C3E;&#x7684;&#x53E6;&#x4E00;&#x4E2A; - &#x7B26;&#x53F7;&#x4E4B;&#x540E; &#x4E0D;&#x8BBA;&#x54EA;&#x4E2A;&#x8BB0;&#x6CD5;&#xFF0C;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x51FD;&#x6570; test &#x63A5;&#x53D7;&#x7B2C;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A; String &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A; Bool &#x7C7B;&#x578B;&#x503C;&#x3002;&#x5982;&#x679C;&#x8C03;&#x7528;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x4F8B;&#x5982; test(1,foo) &#xFF0C;&#x5E76;&#x5C06;&#x5176;&#x653E;&#x5728;&#x7B2C;&#x4E8C;&#x4E2A; $type &#x8BED;&#x53E5;&#x4E2D;&#xFF0C;Haxe &#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x5668;&#x68C0;&#x67E5; 1 &#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230; Int &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x68C0;&#x67E5; &#x201C; foo &#x201C; &#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230; String &#x7C7B;&#x578B;&#x53C2;&#x6570;&#x3002;&#x8C03;&#x7528;&#x7684;&#x7C7B;&#x578B;&#x7136;&#x540E;&#x5C31;&#x4F1A;&#x548C; test &#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#x7684;&#x7C7B;&#x578B;&#x76F8;&#x540C;&#xFF0C;&#x5373;&#xFF0C;&#x4E00;&#x4E2A; Bool &#x7C7B;&#x578B;&#x3002; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x6709;&#x5176;&#x5B83;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x6216;&#x8005;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x62EC;&#x53F7;&#x5BF9;&#x5B83;&#x4EEC;&#x8FDB;&#x884C;&#x6B63;&#x786E;&#x7684;&#x5206;&#x7EC4;&#x3002;&#x4F8B;&#x5982;&#xFF0C; Int-(Int-Void)-Void &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4E3A; Int &#x7C7B;&#x578B;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x662F;&#x51FD;&#x6570; Int-Void &#x7C7B;&#x578B;&#xFF0C;&#x8FD4;&#x56DE; Void &#x3002;"},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{"title":"","path":"\\2.类型\\2.7.动态类型\\2.7.2.实现Dynamic.html","body":"2.7.2.实现Dynamic 类可以 实现（第2.3.3节） Dynamic 类型，和提供任意字段访问的 Dynamic 。前一种情况，字段可以有任何类型，而后一种，它们被限制兼容参数类型： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class ImplementsDynamic implements Dynamic  String   public var present: Int ; public function new ()   class Main  static public function main ()  var c = new ImplementsDynamic (); // 有效的，present 是一个存在的字段 c.present = 1 ; // 有效，分配的值是一个 String c.stringField = \"foo\" ; // 错误，Int应该是 String //c.intField = 1;   实现 Dynamic 不符合实现其它接口的需求。预期的字段仍然必须被明确实现。实现 Dynamic 的类（带或者不带类型参数）也可以利用一个特别的方法名字叫做 resolve 。如果一个 读访问（第4.2节） 被做出，而且被讨论的字段不存在， resolve 方法被调用，并以这个字段的名字作为参数： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Resolve implements Dynamic  String   public var present: Int ; public function new ()  function resolve (field: String )  return \"Tried to resolve \" +field;   class Main  static public function main ()  var c = new Resolve (); c.present = 2 ; trace (c.present); trace (c.resolveMe);  "},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{"title":"2.7.2.&#x5B9E;&#x73B0;Dynamic","path":"\\2.类型\\2.7.动态类型\\2.7.2.实现Dynamic.html#2-7-2-实现Dynamic","body":"&#x7C7B;&#x53EF;&#x4EE5; &#x5B9E;&#x73B0;&#xFF08;&#x7B2C;2.3.3&#x8282;&#xFF09; Dynamic &#x7C7B;&#x578B;&#xFF0C;&#x548C;&#x63D0;&#x4F9B;&#x4EFB;&#x610F;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x7684; Dynamic &#x3002;&#x524D;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x5B57;&#x6BB5;&#x53EF;&#x4EE5;&#x6709;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#xFF0C;&#x800C;&#x540E;&#x4E00;&#x79CD;&#xFF0C;&#x5B83;&#x4EEC;&#x88AB;&#x9650;&#x5236;&#x517C;&#x5BB9;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class ImplementsDynamic implements Dynamic  String  { public var present: Int ; public function new () {} } class Main { static public function main () { var c = new ImplementsDynamic (); // &#x6709;&#x6548;&#x7684;&#xFF0C;present &#x662F;&#x4E00;&#x4E2A;&#x5B58;&#x5728;&#x7684;&#x5B57;&#x6BB5; c.present = 1 ; // &#x6709;&#x6548;&#xFF0C;&#x5206;&#x914D;&#x7684;&#x503C;&#x662F;&#x4E00;&#x4E2A; String c.stringField = foo ; // &#x9519;&#x8BEF;&#xFF0C;Int&#x5E94;&#x8BE5;&#x662F; String //c.intField = 1; } } &#x5B9E;&#x73B0; Dynamic &#x4E0D;&#x7B26;&#x5408;&#x5B9E;&#x73B0;&#x5176;&#x5B83;&#x63A5;&#x53E3;&#x7684;&#x9700;&#x6C42;&#x3002;&#x9884;&#x671F;&#x7684;&#x5B57;&#x6BB5;&#x4ECD;&#x7136;&#x5FC5;&#x987B;&#x88AB;&#x660E;&#x786E;&#x5B9E;&#x73B0;&#x3002;&#x5B9E;&#x73B0; Dynamic &#x7684;&#x7C7B;&#xFF08;&#x5E26;&#x6216;&#x8005;&#x4E0D;&#x5E26;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF09;&#x4E5F;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x4E00;&#x4E2A;&#x7279;&#x522B;&#x7684;&#x65B9;&#x6CD5;&#x540D;&#x5B57;&#x53EB;&#x505A; resolve &#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A; &#x8BFB;&#x8BBF;&#x95EE;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09; &#x88AB;&#x505A;&#x51FA;&#xFF0C;&#x800C;&#x4E14;&#x88AB;&#x8BA8;&#x8BBA;&#x7684;&#x5B57;&#x6BB5;&#x4E0D;&#x5B58;&#x5728;&#xFF0C; resolve &#x65B9;&#x6CD5;&#x88AB;&#x8C03;&#x7528;&#xFF0C;&#x5E76;&#x4EE5;&#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#x7684;&#x540D;&#x5B57;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Resolve implements Dynamic  String  { public var present: Int ; public function new () {} function resolve (field: String ) { return Tried to resolve  +field; } } class Main { static public function main () { var c = new Resolve (); c.present = 2 ; trace (c.present); trace (c.resolveMe); } }"},"2.类型/2.7.动态类型/2.7.动态类型.html":{"title":"","path":"\\2.类型\\2.7.动态类型\\2.7.动态类型.html","body":"2.7.动态类型 虽然 Haxe 有一个静态的类型系统，但这个类型系统实际上可以通过使用 Dynamic 类型关闭。一个 动态值可以被赋值给任何类型；而任何值都可以被分配到动态类型。这有一些缺点： 编译器将不会再在接受指定类型的赋值、函数调用和其它构造中进行类型检查。 某些优化，特别是编译为静态目标语言时，将不能再被使用。 一些常见的错误，例如字段访问中的一个拼写错误，将不能在编译时被发现，可能会引发运行时的错误。 如果字段是通过 Dynamic 类型使用， 无用代码消除（第8.2节） 不能检测使用到的字段 使用 Dynamic 类型可能引发运行时错误的例子非常容易出现。思考下面的两行代码到静态目标语言的编译： 1 2 var d: Dynamic = 1 ; d.foo; 尝试在 Flash 播放器运行编译后的程序，会产生一个错误 ，属性 foo 在 数值类型中没有找到，而且没有默认值。不使用 Dynamic，这会在编译时被侦测到。 花絮 ：Haxe 3之前的 Dynamic 类型推断 Haxe 3 编译器从不推断一个类型为 Dynamic 类型，所以用户必须明确它。之前的 Haxe 版本曾经推断 数组为一个混合类型，如 [1, true, foo] 为 Array 。我们发现这个行为会引发太多的类型问题，因此在 Haxe 3 中移除了它。 应该尽量少的使用 Dynamic 类型，因为很多情况下都有更好的选择，但是有时候实际会用到它。Haxe 反射（第10.7节） API中部分使用了 Dynamic 类型，而且有时候它是在处理编译时未知的自定义数据结构最好选择。当被用一个 单形（第2.9节） 统一（第3.5节） 的时候，Dynamic 类型以一种特殊的方式运行。单形没有绑定到 Dynamic，这可以在如下例子中带来令人惊喜的结果： 1 2 3 4 5 6 7 8 9 10 11 12 class Main  static function main ()  var jsonData = ’[ 1 , 2 , 3 ]’; var json = haxe.Json.parse(jsonData); $type(json); // Unknown0 for (i in 0. ..json.length)  // Array access is not allowed on // + length : Int  trace (json[ 0 ]);    尽管 Json.parse 的返回类型是 Dynamic 类型，局部变量 json 的类型并没有绑定到动态类型，仍然保持了一个单形。然后它在 json.length 字段访问上被推断为一个 匿名结构（第2.5节） ，使后面的 json[0] 数组访问失败。为了避免这个问题，变量 json 可以通过使用 var json:Dynamic 显式的声明为 Dynamic 类型。 花絮 ：标准库中的 Dynamic 类型 Dynamic 类型在 Haxe 3 之前非常频繁的使用在标准库中。随着 Haxe 类型系统的持续改进，Dynamic 类型的出现在通往 Haxe 3的版本被减少。"},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{"title":"2.7.&#x52A8;&#x6001;&#x7C7B;&#x578B;","path":"\\2.类型\\2.7.动态类型\\2.7.动态类型.html#2-7-动态类型","body":"&#x867D;&#x7136; Haxe &#x6709;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x7684;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#xFF0C;&#x4F46;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x5B9E;&#x9645;&#x4E0A;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528; Dynamic &#x7C7B;&#x578B;&#x5173;&#x95ED;&#x3002;&#x4E00;&#x4E2A; &#x52A8;&#x6001;&#x503C;&#x53EF;&#x4EE5;&#x88AB;&#x8D4B;&#x503C;&#x7ED9;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#xFF1B;&#x800C;&#x4EFB;&#x4F55;&#x503C;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230;&#x52A8;&#x6001;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x6709;&#x4E00;&#x4E9B;&#x7F3A;&#x70B9;&#xFF1A; &#x7F16;&#x8BD1;&#x5668;&#x5C06;&#x4E0D;&#x4F1A;&#x518D;&#x5728;&#x63A5;&#x53D7;&#x6307;&#x5B9A;&#x7C7B;&#x578B;&#x7684;&#x8D4B;&#x503C;&#x3001;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x548C;&#x5176;&#x5B83;&#x6784;&#x9020;&#x4E2D;&#x8FDB;&#x884C;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x3002; &#x67D0;&#x4E9B;&#x4F18;&#x5316;&#xFF0C;&#x7279;&#x522B;&#x662F;&#x7F16;&#x8BD1;&#x4E3A;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x65F6;&#xFF0C;&#x5C06;&#x4E0D;&#x80FD;&#x518D;&#x88AB;&#x4F7F;&#x7528;&#x3002; &#x4E00;&#x4E9B;&#x5E38;&#x89C1;&#x7684;&#x9519;&#x8BEF;&#xFF0C;&#x4F8B;&#x5982;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x62FC;&#x5199;&#x9519;&#x8BEF;&#xFF0C;&#x5C06;&#x4E0D;&#x80FD;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x88AB;&#x53D1;&#x73B0;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x5F15;&#x53D1;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x9519;&#x8BEF;&#x3002; &#x5982;&#x679C;&#x5B57;&#x6BB5;&#x662F;&#x901A;&#x8FC7; Dynamic &#x7C7B;&#x578B;&#x4F7F;&#x7528;&#xFF0C; &#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664;&#xFF08;&#x7B2C;8.2&#x8282;&#xFF09; &#x4E0D;&#x80FD;&#x68C0;&#x6D4B;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x5B57;&#x6BB5; &#x4F7F;&#x7528; Dynamic &#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x5F15;&#x53D1;&#x8FD0;&#x884C;&#x65F6;&#x9519;&#x8BEF;&#x7684;&#x4F8B;&#x5B50;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x51FA;&#x73B0;&#x3002;&#x601D;&#x8003;&#x4E0B;&#x9762;&#x7684;&#x4E24;&#x884C;&#x4EE3;&#x7801;&#x5230;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x7F16;&#x8BD1;&#xFF1A; 1 2 var d: Dynamic = 1 ; d.foo; &#x5C1D;&#x8BD5;&#x5728; Flash &#x64AD;&#x653E;&#x5668;&#x8FD0;&#x884C;&#x7F16;&#x8BD1;&#x540E;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x9519;&#x8BEF; &#xFF0C;&#x5C5E;&#x6027; foo &#x5728; &#x6570;&#x503C;&#x7C7B;&#x578B;&#x4E2D;&#x6CA1;&#x6709;&#x627E;&#x5230;&#xFF0C;&#x800C;&#x4E14;&#x6CA1;&#x6709;&#x9ED8;&#x8BA4;&#x503C;&#x3002;&#x4E0D;&#x4F7F;&#x7528; Dynamic&#xFF0C;&#x8FD9;&#x4F1A;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x88AB;&#x4FA6;&#x6D4B;&#x5230;&#x3002; &#x82B1;&#x7D6E; &#xFF1A;Haxe 3&#x4E4B;&#x524D;&#x7684; Dynamic &#x7C7B;&#x578B;&#x63A8;&#x65AD; Haxe 3 &#x7F16;&#x8BD1;&#x5668;&#x4ECE;&#x4E0D;&#x63A8;&#x65AD;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x4E3A; Dynamic &#x7C7B;&#x578B;&#xFF0C;&#x6240;&#x4EE5;&#x7528;&#x6237;&#x5FC5;&#x987B;&#x660E;&#x786E;&#x5B83;&#x3002;&#x4E4B;&#x524D;&#x7684; Haxe &#x7248;&#x672C;&#x66FE;&#x7ECF;&#x63A8;&#x65AD; &#x6570;&#x7EC4;&#x4E3A;&#x4E00;&#x4E2A;&#x6DF7;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x5982; [1, true, foo] &#x4E3A; Array &#x3002;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x8FD9;&#x4E2A;&#x884C;&#x4E3A;&#x4F1A;&#x5F15;&#x53D1;&#x592A;&#x591A;&#x7684;&#x7C7B;&#x578B;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x6B64;&#x5728; Haxe 3 &#x4E2D;&#x79FB;&#x9664;&#x4E86;&#x5B83;&#x3002; &#x5E94;&#x8BE5;&#x5C3D;&#x91CF;&#x5C11;&#x7684;&#x4F7F;&#x7528; Dynamic &#x7C7B;&#x578B;&#xFF0C;&#x56E0;&#x4E3A;&#x5F88;&#x591A;&#x60C5;&#x51B5;&#x4E0B;&#x90FD;&#x6709;&#x66F4;&#x597D;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x65F6;&#x5019;&#x5B9E;&#x9645;&#x4F1A;&#x7528;&#x5230;&#x5B83;&#x3002;Haxe &#x53CD;&#x5C04;&#xFF08;&#x7B2C;10.7&#x8282;&#xFF09; API&#x4E2D;&#x90E8;&#x5206;&#x4F7F;&#x7528;&#x4E86; Dynamic &#x7C7B;&#x578B;&#xFF0C;&#x800C;&#x4E14;&#x6709;&#x65F6;&#x5019;&#x5B83;&#x662F;&#x5728;&#x5904;&#x7406;&#x7F16;&#x8BD1;&#x65F6;&#x672A;&#x77E5;&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x6700;&#x597D;&#x9009;&#x62E9;&#x3002;&#x5F53;&#x88AB;&#x7528;&#x4E00;&#x4E2A; &#x5355;&#x5F62;&#xFF08;&#x7B2C;2.9&#x8282;&#xFF09; &#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09; &#x7684;&#x65F6;&#x5019;&#xFF0C;Dynamic &#x7C7B;&#x578B;&#x4EE5;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x65B9;&#x5F0F;&#x8FD0;&#x884C;&#x3002;&#x5355;&#x5F62;&#x6CA1;&#x6709;&#x7ED1;&#x5B9A;&#x5230; Dynamic&#xFF0C;&#x8FD9;&#x53EF;&#x4EE5;&#x5728;&#x5982;&#x4E0B;&#x4F8B;&#x5B50;&#x4E2D;&#x5E26;&#x6765;&#x4EE4;&#x4EBA;&#x60CA;&#x559C;&#x7684;&#x7ED3;&#x679C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 class Main { static function main () { var jsonData = &#x2019;[ 1 , 2 , 3 ]&#x2019;; var json = haxe.Json.parse(jsonData); $type(json); // Unknown0 for (i in 0. ..json.length) { // Array access is not allowed on // {+ length : Int } trace (json[ 0 ]); } } } &#x5C3D;&#x7BA1; Json.parse &#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x662F; Dynamic &#x7C7B;&#x578B;&#xFF0C;&#x5C40;&#x90E8;&#x53D8;&#x91CF; json &#x7684;&#x7C7B;&#x578B;&#x5E76;&#x6CA1;&#x6709;&#x7ED1;&#x5B9A;&#x5230;&#x52A8;&#x6001;&#x7C7B;&#x578B;&#xFF0C;&#x4ECD;&#x7136;&#x4FDD;&#x6301;&#x4E86;&#x4E00;&#x4E2A;&#x5355;&#x5F62;&#x3002;&#x7136;&#x540E;&#x5B83;&#x5728; json.length &#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x4E0A;&#x88AB;&#x63A8;&#x65AD;&#x4E3A;&#x4E00;&#x4E2A; &#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF08;&#x7B2C;2.5&#x8282;&#xFF09; &#xFF0C;&#x4F7F;&#x540E;&#x9762;&#x7684; json[0] &#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x5931;&#x8D25;&#x3002;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x53D8;&#x91CF; json &#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528; var json:Dynamic &#x663E;&#x5F0F;&#x7684;&#x58F0;&#x660E;&#x4E3A; Dynamic &#x7C7B;&#x578B;&#x3002; &#x82B1;&#x7D6E; &#xFF1A;&#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684; Dynamic &#x7C7B;&#x578B; Dynamic &#x7C7B;&#x578B;&#x5728; Haxe 3 &#x4E4B;&#x524D;&#x975E;&#x5E38;&#x9891;&#x7E41;&#x7684;&#x4F7F;&#x7528;&#x5728;&#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x3002;&#x968F;&#x7740; Haxe &#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x7684;&#x6301;&#x7EED;&#x6539;&#x8FDB;&#xFF0C;Dynamic &#x7C7B;&#x578B;&#x7684;&#x51FA;&#x73B0;&#x5728;&#x901A;&#x5F80; Haxe 3&#x7684;&#x7248;&#x672C;&#x88AB;&#x51CF;&#x5C11;&#x3002;"},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.1.隐式类型转换.html","body":"2.8.1.隐式类型转换 与类不同，抽象类型允许定义隐式转换。有两种类型的隐式转换： 直接转换： 允许抽象类型和其它类型之间的直接转换。这通过从或者往抽象类型添加规则来定义，而且只允许用于和抽象类型的潜在类型统一的类型。 类字段： 允许通过调用特别的转换函数进行转换。这些函数通过使用 @:to 和 @:from 元数据定义。这种类型的转换允许用于所有类型。 如下的代码示例展示直接转换的一个例子： 1 2 3 4 5 6 7 8 9 10 11 12 abstract MyAbstract ( Int ) from Int to Int  inline function new (i: Int )  this = i;   class Main  static public function main ()  var a: MyAbstract = 12 ; var b: Int = a;   我们声明 MyAbstract 可以是从或者到 Int 类型，意思是它可以被用 Int 分配，并且可以分配到 Int 类型。这在第9和10行展示，第一个分配 Int 12 到 MyAbstract 类型的变量 a （通过使用 from Int 声明 ），然后这个抽象类型分配回 Int 类型变量 b （通过使用 to Int 声明）。 另一种的类字段转换有相同的语义，但是定义完全不同： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 abstract MyAbstract ( Int )  inline function new (i: Int )  this = i;  @:from static public function fromString (s: String )  return new MyAbstract (Std.parseInt(s));  @:to public function toArray ()  return [ this ];   class Main  static public function main ()  var a: MyAbstract = \"3\" ; var b: Array  Int  = a; trace (b); // [3]   通过添加 @:from 到一个静态函数，这个函数获得资格作为从它的参数类型到抽象类型的隐式转换函数。这些函数必须返回一个抽象类型的值。它们还必须被声明为静态的 ： 类似的，添加 @:to 到一个函数，它获取资格作为从抽象类型到它的返回类型的隐式转换函数。这些函数通常是成员函数，但是它们可以被声明为静态 ，然后作为一个 选择函数（第2.8.4节） 。 在例子中，方法 fromString 允许分配值 “ 3 ” 到 MyAbstract 类型的变量 a ，而方法 toArray 允许分配抽象类型到 Array 类型的变量 b 。 当使用这种类型的转换，转换函数的调用被插入在需要的地方。当查看 JavaScript 输出的时候会很明显： 1 2 var a = _ImplicitCastField.MyAbstract_Impl_.fromString( \"3\" ); var b = _ImplicitCastField.MyAbstract_Impl_.toArray(a); 这可以被进一步优化，通过 内联（第4.4.2节） 两种转换函数，使得输出如下： 1 2 var a = Std.parseInt( \"3\" ); var b = [a]; 当分配一个类型 A 到一个类型 B，并且至少它们中的一个为抽象类型时，选择的规则很简单： 1.如果 A 不是一个抽象类型，去到 3 2.如果 A 定义了一个允许到 B 的 to 转换，去到6 3.如果 B 不是一个抽象类型，去到 5 4.如果 B 定义一个允许到 A 的 from 转换，去到6 5.停止，统一失败 6.停止，统一成功 经过设计，隐式转换不被传递，就像下面的例子展示的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 abstract A ( Int )  public function new () this = 0 ; @:to public function toB() return new B();  abstract B ( Int )  public function new () this = 0 ; @:to public function toC() return new C();  abstract C ( Int )  public function new () this = 0 ;  class Main  static public function main ()  var a = new A (); var b: B = a; // valid, uses A.toB var c: C = b; // valid, uses B.toC var c: C = a; // error, A should be C   虽然从 A 到 B 的转换和从 B 到 C 的转换分别是允许的，而一个传递的从 A 到 C 的转换则不允许。这是为了避免不明确的转换路径，并保持一个简单的选择规则。 Unlike classes, abstracts allow defining implicit casts. There are two kinds of implicit casts: Direct: Allows direct casting of the abstract type to or from another type. This is defined by adding to and from rules to the abstract type and is only allowed for types which unify with the underlying type of the abstract. Class field: Allows casting via calls to special cast functions. These functions are defined using @:to and @:from metadata. This kind of cast is allowed for all types. The following code example shows an example of direct casting: 1 2 3 4 5 6 7 8 9 10 11 12 abstract MyAbstract ( Int ) from Int to Int  inline function new (i: Int )  this = i;   class Main  static public function main ()  var a: MyAbstract = 12 ; var b: Int = a;   We declare MyAbstract as being from Int and to Int , appropriately meaning it can be assigned from Int and assigned to Int . This is shown in lines 9 and 10, where we first assign the Int 12 to variable a of type MyAbstract (this works due to the from Int declaration) and then that abstract back to variable b of type Int (this works due to the to Int declaration). Class field casts have the same semantics, but are defined completely differently: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 abstract MyAbstract ( Int )  inline function new (i: Int )  this = i;  @:from static public function fromString (s: String )  return new MyAbstract (Std.parseInt(s));  @:to public function toArray ()  return [ this ];   class Main  static public function main ()  var a: MyAbstract = \"3\" ; var b: Array  Int  = a; trace (b); // [3]   By adding @:from to a static function, that function qualifies as an implicit cast function from its argument type to the abstract. These functions must return a value of the abstract type. They must also be declared static . Similarly, adding @:to to a function qualifies it as implicit cast function from the abstract to its return type. In the previous example, the method fromString allows the assignment of value 3 to variable a of type MyAbstract while the method toArray allows assigning that abstract to variable b of type ArrayInt . When using this kind of cast, calls to the cast functions are inserted where required. This becomes obvious when looking at the JavaScript output: 1 2 var a = _ImplicitCastField.MyAbstract_Impl_.fromString( \"3\" ); var b = _ImplicitCastField.MyAbstract_Impl_.toArray(a); This can be further optimized by inlining both cast functions, turning the output into the following: 1 2 var a = Std.parseInt( \"3\" ); var b = [a]; The selection algorithm when assigning a type A to a type B where at least one is an abstract is simple: If A is not an abstract, go to 3. If A defines a to -conversion that admits B , go to 6. If B is not an abstract, go to 5. If B defines a from -conversion that admits A , go to 6. Stop, unification fails. Stop, unification succeeds. By design, implicit casts are not transitive , as the following example shows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 abstract A ( Int )  public function new () this = 0 ; @:to public function toB() return new B();  abstract B ( Int )  public function new () this = 0 ; @:to public function toC() return new C();  abstract C ( Int )  public function new () this = 0 ;  class Main  static public function main ()  var a = new A (); var b: B = a; // valid, uses A.toB var c: C = b; // valid, uses B.toC var c: C = a; // error, A should be C   While the individual casts from A to B and from B to C are allowed, a transitive cast from A to C is not. This is to avoid ambiguous cast paths and retain a simple selection algorithm."},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{"title":"2.8.1.&#x9690;&#x5F0F;&#x7C7B;&#x578B;&#x8F6C;&#x6362;","path":"\\2.类型\\2.8.抽象类型\\2.8.1.隐式类型转换.html#2-8-1-隐式类型转换","body":"&#x4E0E;&#x7C7B;&#x4E0D;&#x540C;&#xFF0C;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5141;&#x8BB8;&#x5B9A;&#x4E49;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#x3002;&#x6709;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#xFF1A; &#x76F4;&#x63A5;&#x8F6C;&#x6362;&#xFF1A; &#x5141;&#x8BB8;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x548C;&#x5176;&#x5B83;&#x7C7B;&#x578B;&#x4E4B;&#x95F4;&#x7684;&#x76F4;&#x63A5;&#x8F6C;&#x6362;&#x3002;&#x8FD9;&#x901A;&#x8FC7;&#x4ECE;&#x6216;&#x8005;&#x5F80;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x6DFB;&#x52A0;&#x89C4;&#x5219;&#x6765;&#x5B9A;&#x4E49;&#xFF0C;&#x800C;&#x4E14;&#x53EA;&#x5141;&#x8BB8;&#x7528;&#x4E8E;&#x548C;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x7684;&#x7C7B;&#x578B;&#x3002; &#x7C7B;&#x5B57;&#x6BB5;&#xFF1A; &#x5141;&#x8BB8;&#x901A;&#x8FC7;&#x8C03;&#x7528;&#x7279;&#x522B;&#x7684;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#x3002;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x901A;&#x8FC7;&#x4F7F;&#x7528; @:to &#x548C; @:from &#x5143;&#x6570;&#x636E;&#x5B9A;&#x4E49;&#x3002;&#x8FD9;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x8F6C;&#x6362;&#x5141;&#x8BB8;&#x7528;&#x4E8E;&#x6240;&#x6709;&#x7C7B;&#x578B;&#x3002; &#x5982;&#x4E0B;&#x7684;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x5C55;&#x793A;&#x76F4;&#x63A5;&#x8F6C;&#x6362;&#x7684;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 abstract MyAbstract ( Int ) from Int to Int { inline function new (i: Int ) { this = i; } } class Main { static public function main () { var a: MyAbstract = 12 ; var b: Int = a; } } &#x6211;&#x4EEC;&#x58F0;&#x660E; MyAbstract &#x53EF;&#x4EE5;&#x662F;&#x4ECE;&#x6216;&#x8005;&#x5230; Int &#x7C7B;&#x578B;&#xFF0C;&#x610F;&#x601D;&#x662F;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x7528; Int &#x5206;&#x914D;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x5206;&#x914D;&#x5230; Int &#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x5728;&#x7B2C;9&#x548C;10&#x884C;&#x5C55;&#x793A;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x5206;&#x914D; Int 12 &#x5230; MyAbstract &#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF; a &#xFF08;&#x901A;&#x8FC7;&#x4F7F;&#x7528; from Int &#x58F0;&#x660E; &#xFF09;&#xFF0C;&#x7136;&#x540E;&#x8FD9;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5206;&#x914D;&#x56DE; Int &#x7C7B;&#x578B;&#x53D8;&#x91CF; b &#xFF08;&#x901A;&#x8FC7;&#x4F7F;&#x7528; to Int &#x58F0;&#x660E;&#xFF09;&#x3002; &#x53E6;&#x4E00;&#x79CD;&#x7684;&#x7C7B;&#x5B57;&#x6BB5;&#x8F6C;&#x6362;&#x6709;&#x76F8;&#x540C;&#x7684;&#x8BED;&#x4E49;&#xFF0C;&#x4F46;&#x662F;&#x5B9A;&#x4E49;&#x5B8C;&#x5168;&#x4E0D;&#x540C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 abstract MyAbstract ( Int ) { inline function new (i: Int ) { this = i; } @:from static public function fromString (s: String ) { return new MyAbstract (Std.parseInt(s)); } @:to public function toArray () { return [ this ]; } } class Main { static public function main () { var a: MyAbstract = 3 ; var b: Array  Int  = a; trace (b); // [3] } } &#x901A;&#x8FC7;&#x6DFB;&#x52A0; @:from &#x5230;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x51FD;&#x6570;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x83B7;&#x5F97;&#x8D44;&#x683C;&#x4F5C;&#x4E3A;&#x4ECE;&#x5B83;&#x7684;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x5230;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#x3002;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x5FC5;&#x987B;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x503C;&#x3002;&#x5B83;&#x4EEC;&#x8FD8;&#x5FC5;&#x987B;&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x9759;&#x6001;&#x7684; &#xFF1A; &#x7C7B;&#x4F3C;&#x7684;&#xFF0C;&#x6DFB;&#x52A0; @:to &#x5230;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x83B7;&#x53D6;&#x8D44;&#x683C;&#x4F5C;&#x4E3A;&#x4ECE;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5230;&#x5B83;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x7684;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#x3002;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x901A;&#x5E38;&#x662F;&#x6210;&#x5458;&#x51FD;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x9759;&#x6001; &#xFF0C;&#x7136;&#x540E;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A; &#x9009;&#x62E9;&#x51FD;&#x6570;&#xFF08;&#x7B2C;2.8.4&#x8282;&#xFF09; &#x3002; &#x5728;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x65B9;&#x6CD5; fromString &#x5141;&#x8BB8;&#x5206;&#x914D;&#x503C; &#x201C; 3 &#x201D; &#x5230; MyAbstract &#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF; a &#xFF0C;&#x800C;&#x65B9;&#x6CD5; toArray &#x5141;&#x8BB8;&#x5206;&#x914D;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5230; Array &#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF; b &#x3002; &#x5F53;&#x4F7F;&#x7528;&#x8FD9;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x8F6C;&#x6362;&#xFF0C;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#x7684;&#x8C03;&#x7528;&#x88AB;&#x63D2;&#x5165;&#x5728;&#x9700;&#x8981;&#x7684;&#x5730;&#x65B9;&#x3002;&#x5F53;&#x67E5;&#x770B; JavaScript &#x8F93;&#x51FA;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x5F88;&#x660E;&#x663E;&#xFF1A; 1 2 var a = _ImplicitCastField.MyAbstract_Impl_.fromString( 3 ); var b = _ImplicitCastField.MyAbstract_Impl_.toArray(a); &#x8FD9;&#x53EF;&#x4EE5;&#x88AB;&#x8FDB;&#x4E00;&#x6B65;&#x4F18;&#x5316;&#xFF0C;&#x901A;&#x8FC7; &#x5185;&#x8054;&#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09; &#x4E24;&#x79CD;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#xFF0C;&#x4F7F;&#x5F97;&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#xFF1A; 1 2 var a = Std.parseInt( 3 ); var b = [a]; &#x5F53;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x7C7B;&#x578B; A &#x5230;&#x4E00;&#x4E2A;&#x7C7B;&#x578B; B&#xFF0C;&#x5E76;&#x4E14;&#x81F3;&#x5C11;&#x5B83;&#x4EEC;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x4E3A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x65F6;&#xFF0C;&#x9009;&#x62E9;&#x7684;&#x89C4;&#x5219;&#x5F88;&#x7B80;&#x5355;&#xFF1A; 1.&#x5982;&#x679C; A &#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x53BB;&#x5230; 3 2.&#x5982;&#x679C; A &#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x5141;&#x8BB8;&#x5230; B &#x7684; to &#x8F6C;&#x6362;&#xFF0C;&#x53BB;&#x5230;6 3.&#x5982;&#x679C; B &#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x53BB;&#x5230; 5 4.&#x5982;&#x679C; B &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5141;&#x8BB8;&#x5230; A &#x7684; from &#x8F6C;&#x6362;&#xFF0C;&#x53BB;&#x5230;6 5.&#x505C;&#x6B62;&#xFF0C;&#x7EDF;&#x4E00;&#x5931;&#x8D25; 6.&#x505C;&#x6B62;&#xFF0C;&#x7EDF;&#x4E00;&#x6210;&#x529F; &#x7ECF;&#x8FC7;&#x8BBE;&#x8BA1;&#xFF0C;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#x4E0D;&#x88AB;&#x4F20;&#x9012;&#xFF0C;&#x5C31;&#x50CF;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x5C55;&#x793A;&#x7684;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 abstract A ( Int ) { public function new () this = 0 ; @:to public function toB() return new B(); } abstract B ( Int ) { public function new () this = 0 ; @:to public function toC() return new C(); } abstract C ( Int ) { public function new () this = 0 ; } class Main { static public function main () { var a = new A (); var b: B = a; // valid, uses A.toB var c: C = b; // valid, uses B.toC var c: C = a; // error, A should be C } } &#x867D;&#x7136;&#x4ECE; A &#x5230; B &#x7684;&#x8F6C;&#x6362;&#x548C;&#x4ECE; B &#x5230; C &#x7684;&#x8F6C;&#x6362;&#x5206;&#x522B;&#x662F;&#x5141;&#x8BB8;&#x7684;&#xFF0C;&#x800C;&#x4E00;&#x4E2A;&#x4F20;&#x9012;&#x7684;&#x4ECE; A &#x5230; C &#x7684;&#x8F6C;&#x6362;&#x5219;&#x4E0D;&#x5141;&#x8BB8;&#x3002;&#x8FD9;&#x662F;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x4E0D;&#x660E;&#x786E;&#x7684;&#x8F6C;&#x6362;&#x8DEF;&#x5F84;&#xFF0C;&#x5E76;&#x4FDD;&#x6301;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x9009;&#x62E9;&#x89C4;&#x5219;&#x3002; Unlike classes, abstracts allow defining implicit casts. There are two kinds of implicit casts: Direct: Allows direct casting of the abstract type to or from another type. This is defined by adding to and from rules to the abstract type and is only allowed for types which unify with the underlying type of the abstract. Class field: Allows casting via calls to special cast functions. These functions are defined using @:to and @:from metadata. This kind of cast is allowed for all types. The following code example shows an example of direct casting: 1 2 3 4 5 6 7 8 9 10 11 12 abstract MyAbstract ( Int ) from Int to Int { inline function new (i: Int ) { this = i; } } class Main { static public function main () { var a: MyAbstract = 12 ; var b: Int = a; } } We declare MyAbstract as being from Int and to Int , appropriately meaning it can be assigned from Int and assigned to Int . This is shown in lines 9 and 10, where we first assign the Int 12 to variable a of type MyAbstract (this works due to the from Int declaration) and then that abstract back to variable b of type Int (this works due to the to Int declaration). Class field casts have the same semantics, but are defined completely differently: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 abstract MyAbstract ( Int ) { inline function new (i: Int ) { this = i; } @:from static public function fromString (s: String ) { return new MyAbstract (Std.parseInt(s)); } @:to public function toArray () { return [ this ]; } } class Main { static public function main () { var a: MyAbstract = 3 ; var b: Array  Int  = a; trace (b); // [3] } } By adding @:from to a static function, that function qualifies as an implicit cast function from its argument type to the abstract. These functions must return a value of the abstract type. They must also be declared static . Similarly, adding @:to to a function qualifies it as implicit cast function from the abstract to its return type. In the previous example, the method fromString allows the assignment of value 3 to variable a of type MyAbstract while the method toArray allows assigning that abstract to variable b of type ArrayInt . When using this kind of cast, calls to the cast functions are inserted where required. This becomes obvious when looking at the JavaScript output: 1 2 var a = _ImplicitCastField.MyAbstract_Impl_.fromString( 3 ); var b = _ImplicitCastField.MyAbstract_Impl_.toArray(a); This can be further optimized by inlining both cast functions, turning the output into the following: 1 2 var a = Std.parseInt( 3 ); var b = [a]; The selection algorithm when assigning a type A to a type B where at least one is an abstract is simple: If A is not an abstract, go to 3. If A defines a to -conversion that admits B , go to 6. If B is not an abstract, go to 5. If B defines a from -conversion that admits A , go to 6. Stop, unification fails. Stop, unification succeeds. By design, implicit casts are not transitive , as the following example shows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 abstract A ( Int ) { public function new () this = 0 ; @:to public function toB() return new B(); } abstract B ( Int ) { public function new () this = 0 ; @:to public function toC() return new C(); } abstract C ( Int ) { public function new () this = 0 ; } class Main { static public function main () { var a = new A (); var b: B = a; // valid, uses A.toB var c: C = b; // valid, uses B.toC var c: C = a; // error, A should be C } } While the individual casts from A to B and from B to C are allowed, a transitive cast from A to C is not. This is to avoid ambiguous cast paths and retain a simple selection algorithm."},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.2.运算符重载.html","body":"2.8.2.运算符重载 抽象类型通过添加 @:op 元数据到类字段，允许一元和二元运算符的重载： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 abstract MyAbstract ( String )  public inline function new (s: String )  this = s;  @:op(A * B) public function repeat (rhs: Int ): MyAbstract  var s: StringBuf = new StringBuf (); for (i in 0. ..rhs) s.add( this ); return new MyAbstract (s.toString());   class Main  static public function main ()  var a = new MyAbstract ( \"foo\" ); trace (a * 3 ); // foofoofoo   通过默认的 @:op(A*B) ，当左面的值类型是 MyAbstract 而且右侧值是 Int 类型的时候，函数 repeat 作为乘法 * 运算符的运算符。用法在第17行显示，编译到 JavaScript 之后代码成为这样： 1 console.log(_AbstractOperatorOverload.MyAbstract_Impl_.repeat(a, 3 )); 类似于通过 类字段（第2.8.1） 方式隐式转换，重载之后的方法的调用被插入到需要的地方。 示例中的 repeat 函数是不可交换的：当 MyAbstract * Int 工作， Int * MyAbstract 则不工作。如果这应该同时允许，可以添加 @:commutative 元数据。如果它只可以为 Int * MyAbstract 工作，而不是为 MyAbstract * Int ，重载方法可以被设置为 static ，接受 Int 和 MyAbstract 分别作为第一个和第二个类型。 重载一元运算符是相似的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 abstract MyAbstract ( String )  public inline function new (s: String )  this = s;  @:op(++A) public function pre() return \"pre\" + this ; @:op(A++) public function post() return this + \"post\" ;  class Main  static public function main ()  var a = new MyAbstract ( \"foo\" ); trace (++a); // prefoo trace (a++); // foopost   二元运算和一元运算符重载都可以返回任何类型。 暴露潜在类型的操作 还可以省略 @:op 函数的方法体，但是只有抽象类型的潜在类型允许涉及的操作，并且结果类型可以被赋值回抽象类型的时候。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 abstract MyAbstractInt ( Int ) from Int to Int  // 下面一行从潜在类型Int暴露 （AB）操作符 // 注意，并没有使用函数体 @:op(A  B) static function gt( a:MyAbstractInt, b:MyAbstractInt ) : Bool;  class Main  static function main ()  var a: MyAbstractInt = 42 ; if (a  0 ) trace (’Works fine,  operation implemented!’); // 小于操作符没有实现 // 这会引起一个 “不能对比MyAbstractInt 和 Int”的错误: if (a  100 )    "},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{"title":"2.8.2.&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;","path":"\\2.类型\\2.8.抽象类型\\2.8.2.运算符重载.html#2-8-2-运算符重载","body":"&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x901A;&#x8FC7;&#x6DFB;&#x52A0; @:op &#x5143;&#x6570;&#x636E;&#x5230;&#x7C7B;&#x5B57;&#x6BB5;&#xFF0C;&#x5141;&#x8BB8;&#x4E00;&#x5143;&#x548C;&#x4E8C;&#x5143;&#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x91CD;&#x8F7D;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 abstract MyAbstract ( String ) { public inline function new (s: String ) { this = s; } @:op(A * B) public function repeat (rhs: Int ): MyAbstract { var s: StringBuf = new StringBuf (); for (i in 0. ..rhs) s.add( this ); return new MyAbstract (s.toString()); } } class Main { static public function main () { var a = new MyAbstract ( foo ); trace (a * 3 ); // foofoofoo } } &#x901A;&#x8FC7;&#x9ED8;&#x8BA4;&#x7684; @:op(A*B) &#xFF0C;&#x5F53;&#x5DE6;&#x9762;&#x7684;&#x503C;&#x7C7B;&#x578B;&#x662F; MyAbstract &#x800C;&#x4E14;&#x53F3;&#x4FA7;&#x503C;&#x662F; Int &#x7C7B;&#x578B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x51FD;&#x6570; repeat &#x4F5C;&#x4E3A;&#x4E58;&#x6CD5; * &#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x8FD0;&#x7B97;&#x7B26;&#x3002;&#x7528;&#x6CD5;&#x5728;&#x7B2C;17&#x884C;&#x663E;&#x793A;&#xFF0C;&#x7F16;&#x8BD1;&#x5230; JavaScript &#x4E4B;&#x540E;&#x4EE3;&#x7801;&#x6210;&#x4E3A;&#x8FD9;&#x6837;&#xFF1A; 1 console.log(_AbstractOperatorOverload.MyAbstract_Impl_.repeat(a, 3 )); &#x7C7B;&#x4F3C;&#x4E8E;&#x901A;&#x8FC7; &#x7C7B;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;2.8.1&#xFF09; &#x65B9;&#x5F0F;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#xFF0C;&#x91CD;&#x8F7D;&#x4E4B;&#x540E;&#x7684;&#x65B9;&#x6CD5;&#x7684;&#x8C03;&#x7528;&#x88AB;&#x63D2;&#x5165;&#x5230;&#x9700;&#x8981;&#x7684;&#x5730;&#x65B9;&#x3002; &#x793A;&#x4F8B;&#x4E2D;&#x7684; repeat &#x51FD;&#x6570;&#x662F;&#x4E0D;&#x53EF;&#x4EA4;&#x6362;&#x7684;&#xFF1A;&#x5F53; MyAbstract * Int &#x5DE5;&#x4F5C;&#xFF0C; Int * MyAbstract &#x5219;&#x4E0D;&#x5DE5;&#x4F5C;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x5E94;&#x8BE5;&#x540C;&#x65F6;&#x5141;&#x8BB8;&#xFF0C;&#x53EF;&#x4EE5;&#x6DFB;&#x52A0; @:commutative &#x5143;&#x6570;&#x636E;&#x3002;&#x5982;&#x679C;&#x5B83;&#x53EA;&#x53EF;&#x4EE5;&#x4E3A; Int * MyAbstract &#x5DE5;&#x4F5C;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4E3A; MyAbstract * Int &#xFF0C;&#x91CD;&#x8F7D;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x88AB;&#x8BBE;&#x7F6E;&#x4E3A; static &#xFF0C;&#x63A5;&#x53D7; Int &#x548C; MyAbstract &#x5206;&#x522B;&#x4F5C;&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x548C;&#x7B2C;&#x4E8C;&#x4E2A;&#x7C7B;&#x578B;&#x3002; &#x91CD;&#x8F7D;&#x4E00;&#x5143;&#x8FD0;&#x7B97;&#x7B26;&#x662F;&#x76F8;&#x4F3C;&#x7684;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 abstract MyAbstract ( String ) { public inline function new (s: String ) { this = s; } @:op(++A) public function pre() return pre + this ; @:op(A++) public function post() return this + post ; } class Main { static public function main () { var a = new MyAbstract ( foo ); trace (++a); // prefoo trace (a++); // foopost } } &#x4E8C;&#x5143;&#x8FD0;&#x7B97;&#x548C;&#x4E00;&#x5143;&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;&#x90FD;&#x53EF;&#x4EE5;&#x8FD4;&#x56DE;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x3002; &#x66B4;&#x9732;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7684;&#x64CD;&#x4F5C; &#x8FD8;&#x53EF;&#x4EE5;&#x7701;&#x7565; @:op &#x51FD;&#x6570;&#x7684;&#x65B9;&#x6CD5;&#x4F53;&#xFF0C;&#x4F46;&#x662F;&#x53EA;&#x6709;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x5141;&#x8BB8;&#x6D89;&#x53CA;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5E76;&#x4E14;&#x7ED3;&#x679C;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x8D4B;&#x503C;&#x56DE;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x65F6;&#x5019;&#x3002; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 abstract MyAbstractInt ( Int ) from Int to Int { // &#x4E0B;&#x9762;&#x4E00;&#x884C;&#x4ECE;&#x6F5C;&#x5728;&#x7C7B;&#x578B;Int&#x66B4;&#x9732; &#xFF08;AB&#xFF09;&#x64CD;&#x4F5C;&#x7B26; // &#x6CE8;&#x610F;&#xFF0C;&#x5E76;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x51FD;&#x6570;&#x4F53; @:op(A  B) static function gt( a:MyAbstractInt, b:MyAbstractInt ) : Bool; } class Main { static function main () { var a: MyAbstractInt = 42 ; if (a  0 ) trace (&#x2019;Works fine,  operation implemented!&#x2019;); // &#x5C0F;&#x4E8E;&#x64CD;&#x4F5C;&#x7B26;&#x6CA1;&#x6709;&#x5B9E;&#x73B0; // &#x8FD9;&#x4F1A;&#x5F15;&#x8D77;&#x4E00;&#x4E2A; &#x201C;&#x4E0D;&#x80FD;&#x5BF9;&#x6BD4;MyAbstractInt &#x548C; Int&#x201D;&#x7684;&#x9519;&#x8BEF;: if (a  100 ) { } } }"},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.3.数组访问.html","body":"2.8.3.数组访问 数组访问描述了特定的语法，传统上用于访问数组中的某个偏移量的值。通常只允许带有 Int 类型的参数。然而，使用抽象类型也可以定义自己的数组访问方法。 Haxe 标准库（第10章） 通过它的 Map 类型应用这种方式，其中下面两个方法可以被发现： 1 2 3 4 5 6 7 8 9 10 @:arrayAccess public inline function get (key: K )  return this . get (key);  @:arrayAccess public inline function arrayWrite (k: K , v: V ): V  this . set (k, v); return v;  有两种数组访问方法： 如果一个 @:arrayAccess 方法接受一个参数，它是一个 getter ； 如果一个 @:arrayAccess 方法接受两个参数，它是一个 setter 。 然后下面看到的 get 和 arrayWrite 方法允许这样使用： 1 2 3 4 5 6 7 class Main  public static function main ()  var map = new Map (); map[ \"foo\" ] = 1 ; trace (map[ \"foo\" ]);   在这一点上，看到数组访问字段的调用被插入到输入内容应该不会太让人吃惊： 1 2 map. set ( \"foo\" , 1 ); console.log(map. get ( \"foo\" )); // 1 数组访问解析的顺序 由于Haxe 3.2 版本之前的一个 bug，检查 :arrayAccess 字段的顺序是未被定义的。在 3.2 版本中已经修复所以现在总是从上到下进行检查字段： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 abstract AString ( String )  public function new (s) this = s; @:arrayAccess function getInt1(k:Int)  return this .charAt(k);  @:arrayAccess function getInt2(k:Int)  return this .charAt(k).toUpperCase();   class Main  static function main ()  var a = new AString ( \"foo\" ); trace (a[ 0 ]); // f   数组访问 a[0] 被解析到 getInt1 字段，使得小写的 f 被返回。结果可能和 Haxe 3.2 之前的版本不同。 先定义的字段有优先级，即使它们需要一个 隐式的转换（第2.8.1节） 。"},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{"title":"2.8.3.&#x6570;&#x7EC4;&#x8BBF;&#x95EE;","path":"\\2.类型\\2.8.抽象类型\\2.8.3.数组访问.html#2-8-3-数组访问","body":"&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x63CF;&#x8FF0;&#x4E86;&#x7279;&#x5B9A;&#x7684;&#x8BED;&#x6CD5;&#xFF0C;&#x4F20;&#x7EDF;&#x4E0A;&#x7528;&#x4E8E;&#x8BBF;&#x95EE;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x67D0;&#x4E2A;&#x504F;&#x79FB;&#x91CF;&#x7684;&#x503C;&#x3002;&#x901A;&#x5E38;&#x53EA;&#x5141;&#x8BB8;&#x5E26;&#x6709; Int &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4F7F;&#x7528;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x4E5F;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x81EA;&#x5DF1;&#x7684;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x65B9;&#x6CD5;&#x3002; Haxe &#x6807;&#x51C6;&#x5E93;&#xFF08;&#x7B2C;10&#x7AE0;&#xFF09; &#x901A;&#x8FC7;&#x5B83;&#x7684; Map &#x7C7B;&#x578B;&#x5E94;&#x7528;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#xFF0C;&#x5176;&#x4E2D;&#x4E0B;&#x9762;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x88AB;&#x53D1;&#x73B0;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 @:arrayAccess public inline function get (key: K ) { return this . get (key); } @:arrayAccess public inline function arrayWrite (k: K , v: V ): V { this . set (k, v); return v; } &#x6709;&#x4E24;&#x79CD;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x65B9;&#x6CD5;&#xFF1A; &#x5982;&#x679C;&#x4E00;&#x4E2A; @:arrayAccess &#x65B9;&#x6CD5;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5B83;&#x662F;&#x4E00;&#x4E2A; getter &#xFF1B; &#x5982;&#x679C;&#x4E00;&#x4E2A; @:arrayAccess &#x65B9;&#x6CD5;&#x63A5;&#x53D7;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5B83;&#x662F;&#x4E00;&#x4E2A; setter &#x3002; &#x7136;&#x540E;&#x4E0B;&#x9762;&#x770B;&#x5230;&#x7684; get &#x548C; arrayWrite &#x65B9;&#x6CD5;&#x5141;&#x8BB8;&#x8FD9;&#x6837;&#x4F7F;&#x7528;&#xFF1A; 1 2 3 4 5 6 7 class Main { public static function main () { var map = new Map (); map[ foo ] = 1 ; trace (map[ foo ]); } } &#x5728;&#x8FD9;&#x4E00;&#x70B9;&#x4E0A;&#xFF0C;&#x770B;&#x5230;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x5B57;&#x6BB5;&#x7684;&#x8C03;&#x7528;&#x88AB;&#x63D2;&#x5165;&#x5230;&#x8F93;&#x5165;&#x5185;&#x5BB9;&#x5E94;&#x8BE5;&#x4E0D;&#x4F1A;&#x592A;&#x8BA9;&#x4EBA;&#x5403;&#x60CA;&#xFF1A; 1 2 map. set ( foo , 1 ); console.log(map. get ( foo )); // 1 &#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x89E3;&#x6790;&#x7684;&#x987A;&#x5E8F; &#x7531;&#x4E8E;Haxe 3.2 &#x7248;&#x672C;&#x4E4B;&#x524D;&#x7684;&#x4E00;&#x4E2A; bug&#xFF0C;&#x68C0;&#x67E5; :arrayAccess &#x5B57;&#x6BB5;&#x7684;&#x987A;&#x5E8F;&#x662F;&#x672A;&#x88AB;&#x5B9A;&#x4E49;&#x7684;&#x3002;&#x5728; 3.2 &#x7248;&#x672C;&#x4E2D;&#x5DF2;&#x7ECF;&#x4FEE;&#x590D;&#x6240;&#x4EE5;&#x73B0;&#x5728;&#x603B;&#x662F;&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#x8FDB;&#x884C;&#x68C0;&#x67E5;&#x5B57;&#x6BB5;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 abstract AString ( String ) { public function new (s) this = s; @:arrayAccess function getInt1(k:Int) { return this .charAt(k); } @:arrayAccess function getInt2(k:Int) { return this .charAt(k).toUpperCase(); } } class Main { static function main () { var a = new AString ( foo ); trace (a[ 0 ]); // f } } &#x6570;&#x7EC4;&#x8BBF;&#x95EE; a[0] &#x88AB;&#x89E3;&#x6790;&#x5230; getInt1 &#x5B57;&#x6BB5;&#xFF0C;&#x4F7F;&#x5F97;&#x5C0F;&#x5199;&#x7684; f &#x88AB;&#x8FD4;&#x56DE;&#x3002;&#x7ED3;&#x679C;&#x53EF;&#x80FD;&#x548C; Haxe 3.2 &#x4E4B;&#x524D;&#x7684;&#x7248;&#x672C;&#x4E0D;&#x540C;&#x3002; &#x5148;&#x5B9A;&#x4E49;&#x7684;&#x5B57;&#x6BB5;&#x6709;&#x4F18;&#x5148;&#x7EA7;&#xFF0C;&#x5373;&#x4F7F;&#x5B83;&#x4EEC;&#x9700;&#x8981;&#x4E00;&#x4E2A; &#x9690;&#x5F0F;&#x7684;&#x8F6C;&#x6362;&#xFF08;&#x7B2C;2.8.1&#x8282;&#xFF09; &#x3002;"},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.4.选择函数.html","body":"2.8.4.选择函数 由于编译器提升抽象成员函数为静态函数，可以手动定义静态函数并使用它们到一个抽象类的实例。这里的语法和那些第一个函数参数类型决定函数被定义为什么类型的 静态扩展（第6.3节） 类似，： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 abstract MyAbstract  T ( T ) from T  public function new (t: T ) this = t; function get () return this ; @:impl static public function getString (v: MyAbstract  String ): String  return v. get ();   class Main  static public function main ()  var a = new MyAbstract ( \"foo\" ); a.getString(); var b = new MyAbstract ( 1 ); // Int should be MyAbstractString b.getString();   抽象类型 MyAbstract 的方法 getString 被定义为接受一个 MyAbstract 类型首参数。这使它在第14行可以用在变量 a 上（因为 a 的类型为 MyAbstract ），但是不能用在变量 b 上， b 的类型是 MyAbstract 。 花絮 ：意外的功能 选择函数是被发现的，而不是真的设计了它的用法。在第一次提到这个想法后，只需要编译器中的一点调整就可以使它们工作。它们的这些发现还引入了多类型抽象类型，比如 Map 。"},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{"title":"2.8.4.&#x9009;&#x62E9;&#x51FD;&#x6570;","path":"\\2.类型\\2.8.抽象类型\\2.8.4.选择函数.html#2-8-4-选择函数","body":"&#x7531;&#x4E8E;&#x7F16;&#x8BD1;&#x5668;&#x63D0;&#x5347;&#x62BD;&#x8C61;&#x6210;&#x5458;&#x51FD;&#x6570;&#x4E3A;&#x9759;&#x6001;&#x51FD;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x624B;&#x52A8;&#x5B9A;&#x4E49;&#x9759;&#x6001;&#x51FD;&#x6570;&#x5E76;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x5230;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x3002;&#x8FD9;&#x91CC;&#x7684;&#x8BED;&#x6CD5;&#x548C;&#x90A3;&#x4E9B;&#x7B2C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x51B3;&#x5B9A;&#x51FD;&#x6570;&#x88AB;&#x5B9A;&#x4E49;&#x4E3A;&#x4EC0;&#x4E48;&#x7C7B;&#x578B;&#x7684; &#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09; &#x7C7B;&#x4F3C;&#xFF0C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 abstract MyAbstract  T ( T ) from T { public function new (t: T ) this = t; function get () return this ; @:impl static public function getString (v: MyAbstract  String ): String { return v. get (); } } class Main { static public function main () { var a = new MyAbstract ( foo ); a.getString(); var b = new MyAbstract ( 1 ); // Int should be MyAbstractString b.getString(); } } &#x62BD;&#x8C61;&#x7C7B;&#x578B; MyAbstract &#x7684;&#x65B9;&#x6CD5; getString &#x88AB;&#x5B9A;&#x4E49;&#x4E3A;&#x63A5;&#x53D7;&#x4E00;&#x4E2A; MyAbstract &#x7C7B;&#x578B;&#x9996;&#x53C2;&#x6570;&#x3002;&#x8FD9;&#x4F7F;&#x5B83;&#x5728;&#x7B2C;14&#x884C;&#x53EF;&#x4EE5;&#x7528;&#x5728;&#x53D8;&#x91CF; a &#x4E0A;&#xFF08;&#x56E0;&#x4E3A; a &#x7684;&#x7C7B;&#x578B;&#x4E3A; MyAbstract &#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x80FD;&#x7528;&#x5728;&#x53D8;&#x91CF; b &#x4E0A;&#xFF0C; b &#x7684;&#x7C7B;&#x578B;&#x662F; MyAbstract &#x3002; &#x82B1;&#x7D6E; &#xFF1A;&#x610F;&#x5916;&#x7684;&#x529F;&#x80FD; &#x9009;&#x62E9;&#x51FD;&#x6570;&#x662F;&#x88AB;&#x53D1;&#x73B0;&#x7684;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x8BBE;&#x8BA1;&#x4E86;&#x5B83;&#x7684;&#x7528;&#x6CD5;&#x3002;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x63D0;&#x5230;&#x8FD9;&#x4E2A;&#x60F3;&#x6CD5;&#x540E;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x7F16;&#x8BD1;&#x5668;&#x4E2D;&#x7684;&#x4E00;&#x70B9;&#x8C03;&#x6574;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x5B83;&#x4EEC;&#x5DE5;&#x4F5C;&#x3002;&#x5B83;&#x4EEC;&#x7684;&#x8FD9;&#x4E9B;&#x53D1;&#x73B0;&#x8FD8;&#x5F15;&#x5165;&#x4E86;&#x591A;&#x7C7B;&#x578B;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x6BD4;&#x5982; Map &#x3002;"},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.5.枚举抽象类型.html","body":"2.8.5.枚举抽象类型 Haxe 3.0版本之后 通过添加 :enum 元数据到一个抽象类型的定义，这个抽象类可以被用来定义有限值的集合： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @:enum abstract HttpStatus ( Int )  var NotFound = 404 ; var MethodNotAllowed = 405 ;  class Main  static public function main ()  var status = HttpStatus.NotFound; var msg = printStatus(status);  static function printStatus (status: HttpStatus )  return switch (status)  case NotFound: \"Not found \"; case MethodNotAllowed: \" Method not allowed \";    Haxe 编译器使用它们的值替换所有的字段访问到 HttpStatus 抽象类型，在 JavaScript 的输出则很明显： 1 2 3 4 5 6 7 8 9 10 11 12 Main.main = function ()  var status = 404 ; var msg = Main.printStatus(status); ; Main.printStatus = function (status)  switch (status)  case 404 : return \"Not found \"; case 405: return \" Method not allowed \";  ; 这和访问 内联（第4.4.2节） 声明的变量很相似，但是有几个优点： 类型工具可以确保集合的所有值会被正确分配类型。 匹配模式在 匹配（第6.4节） 一个枚举抽象类型时检查其 穷尽性（第6.4.10节） 。 用更少的语句定义字段。"},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{"title":"2.8.5.&#x679A;&#x4E3E;&#x62BD;&#x8C61;&#x7C7B;&#x578B;","path":"\\2.类型\\2.8.抽象类型\\2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型","body":"Haxe 3.0&#x7248;&#x672C;&#x4E4B;&#x540E; &#x901A;&#x8FC7;&#x6DFB;&#x52A0; :enum &#x5143;&#x6570;&#x636E;&#x5230;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x8FD9;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x6765;&#x5B9A;&#x4E49;&#x6709;&#x9650;&#x503C;&#x7684;&#x96C6;&#x5408;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @:enum abstract HttpStatus ( Int ) { var NotFound = 404 ; var MethodNotAllowed = 405 ; } class Main { static public function main () { var status = HttpStatus.NotFound; var msg = printStatus(status); } static function printStatus (status: HttpStatus ) { return switch (status) { case NotFound: Not found ; case MethodNotAllowed:  Method not allowed ; } } } Haxe &#x7F16;&#x8BD1;&#x5668;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x7684;&#x503C;&#x66FF;&#x6362;&#x6240;&#x6709;&#x7684;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x5230; HttpStatus &#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x5728; JavaScript &#x7684;&#x8F93;&#x51FA;&#x5219;&#x5F88;&#x660E;&#x663E;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 Main.main = function () { var status = 404 ; var msg = Main.printStatus(status); }; Main.printStatus = function (status) { switch (status) { case 404 : return Not found ; case 405: return  Method not allowed ; } }; &#x8FD9;&#x548C;&#x8BBF;&#x95EE; &#x5185;&#x8054;&#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09; &#x58F0;&#x660E;&#x7684;&#x53D8;&#x91CF;&#x5F88;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x51E0;&#x4E2A;&#x4F18;&#x70B9;&#xFF1A; &#x7C7B;&#x578B;&#x5DE5;&#x5177;&#x53EF;&#x4EE5;&#x786E;&#x4FDD;&#x96C6;&#x5408;&#x7684;&#x6240;&#x6709;&#x503C;&#x4F1A;&#x88AB;&#x6B63;&#x786E;&#x5206;&#x914D;&#x7C7B;&#x578B;&#x3002; &#x5339;&#x914D;&#x6A21;&#x5F0F;&#x5728; &#x5339;&#x914D;&#xFF08;&#x7B2C;6.4&#x8282;&#xFF09; &#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x65F6;&#x68C0;&#x67E5;&#x5176; &#x7A77;&#x5C3D;&#x6027;&#xFF08;&#x7B2C;6.4.10&#x8282;&#xFF09; &#x3002; &#x7528;&#x66F4;&#x5C11;&#x7684;&#x8BED;&#x53E5;&#x5B9A;&#x4E49;&#x5B57;&#x6BB5;&#x3002;"},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.6.转发抽象类型字段.html","body":"2.8.6.转发抽象类型字段 Haxe 3.0版本之后 当包装一个潜在类型，有时候需要保持部分它的功能。因为手工编写转发函数非常繁琐，Haxe 允许添加 :forward 元数据到一个抽象类型： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @:forward(push, pop) abstract MyArray  S ( ArrayS )  public inline function new ()  this = [];   class Main  static public function main ()  var myArray = new MyArray (); myArray.push( 12 ); myArray.pop(); // MyArrayInt has no field length //myArray.length;   这个例子中的 MyArray 抽象类封装了 Array。它的 :forward 元数据有两个参数，对应要被转发到潜在类型的字段名。在这个例子中， main 方法实例化 MyArray 并访问它的 push 和 pop 方法。注释行表明 length 字段是不可用的。 像往常一样我们可以查看 JavaScript 输出来看一下代码如何生成： 1 2 3 4 5 Main.main = function ()  var myArray = []; myArray.push( 12 ); myArray.pop(); ; 也可以使用 :forward 而不带任何参数，来转发所有字段。当然 Haxe 编译器仍然保证字段实际上存在于潜在类型。 花絮 ：实现为宏 :enum 和 :forward 功能都是最初被使用 构建宏（第9.5节） 实现的。虽然这可以在非宏代码很好的运行，但是如果这些功能从宏内部运行它会引起问题。这个实现后来被移到编译器中。"},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{"title":"2.8.6.&#x8F6C;&#x53D1;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5B57;&#x6BB5;","path":"\\2.类型\\2.8.抽象类型\\2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段","body":"Haxe 3.0&#x7248;&#x672C;&#x4E4B;&#x540E; &#x5F53;&#x5305;&#x88C5;&#x4E00;&#x4E2A;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x9700;&#x8981;&#x4FDD;&#x6301;&#x90E8;&#x5206;&#x5B83;&#x7684;&#x529F;&#x80FD;&#x3002;&#x56E0;&#x4E3A;&#x624B;&#x5DE5;&#x7F16;&#x5199;&#x8F6C;&#x53D1;&#x51FD;&#x6570;&#x975E;&#x5E38;&#x7E41;&#x7410;&#xFF0C;Haxe &#x5141;&#x8BB8;&#x6DFB;&#x52A0; :forward &#x5143;&#x6570;&#x636E;&#x5230;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @:forward(push, pop) abstract MyArray  S ( ArrayS ) { public inline function new () { this = []; } } class Main { static public function main () { var myArray = new MyArray (); myArray.push( 12 ); myArray.pop(); // MyArrayInt has no field length //myArray.length; } } &#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x4E2D;&#x7684; MyArray &#x62BD;&#x8C61;&#x7C7B;&#x5C01;&#x88C5;&#x4E86; Array&#x3002;&#x5B83;&#x7684; :forward &#x5143;&#x6570;&#x636E;&#x6709;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5BF9;&#x5E94;&#x8981;&#x88AB;&#x8F6C;&#x53D1;&#x5230;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x540D;&#x3002;&#x5728;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C; main &#x65B9;&#x6CD5;&#x5B9E;&#x4F8B;&#x5316; MyArray &#x5E76;&#x8BBF;&#x95EE;&#x5B83;&#x7684; push &#x548C; pop &#x65B9;&#x6CD5;&#x3002;&#x6CE8;&#x91CA;&#x884C;&#x8868;&#x660E; length &#x5B57;&#x6BB5;&#x662F;&#x4E0D;&#x53EF;&#x7528;&#x7684;&#x3002; &#x50CF;&#x5F80;&#x5E38;&#x4E00;&#x6837;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x67E5;&#x770B; JavaScript &#x8F93;&#x51FA;&#x6765;&#x770B;&#x4E00;&#x4E0B;&#x4EE3;&#x7801;&#x5982;&#x4F55;&#x751F;&#x6210;&#xFF1A; 1 2 3 4 5 Main.main = function () { var myArray = []; myArray.push( 12 ); myArray.pop(); }; &#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; :forward &#x800C;&#x4E0D;&#x5E26;&#x4EFB;&#x4F55;&#x53C2;&#x6570;&#xFF0C;&#x6765;&#x8F6C;&#x53D1;&#x6240;&#x6709;&#x5B57;&#x6BB5;&#x3002;&#x5F53;&#x7136; Haxe &#x7F16;&#x8BD1;&#x5668;&#x4ECD;&#x7136;&#x4FDD;&#x8BC1;&#x5B57;&#x6BB5;&#x5B9E;&#x9645;&#x4E0A;&#x5B58;&#x5728;&#x4E8E;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x3002; &#x82B1;&#x7D6E; &#xFF1A;&#x5B9E;&#x73B0;&#x4E3A;&#x5B8F; :enum &#x548C; :forward &#x529F;&#x80FD;&#x90FD;&#x662F;&#x6700;&#x521D;&#x88AB;&#x4F7F;&#x7528; &#x6784;&#x5EFA;&#x5B8F;&#xFF08;&#x7B2C;9.5&#x8282;&#xFF09; &#x5B9E;&#x73B0;&#x7684;&#x3002;&#x867D;&#x7136;&#x8FD9;&#x53EF;&#x4EE5;&#x5728;&#x975E;&#x5B8F;&#x4EE3;&#x7801;&#x5F88;&#x597D;&#x7684;&#x8FD0;&#x884C;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x8FD9;&#x4E9B;&#x529F;&#x80FD;&#x4ECE;&#x5B8F;&#x5185;&#x90E8;&#x8FD0;&#x884C;&#x5B83;&#x4F1A;&#x5F15;&#x8D77;&#x95EE;&#x9898;&#x3002;&#x8FD9;&#x4E2A;&#x5B9E;&#x73B0;&#x540E;&#x6765;&#x88AB;&#x79FB;&#x5230;&#x7F16;&#x8BD1;&#x5668;&#x4E2D;&#x3002;"},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.7.核心类型抽象.html","body":"2.8.7.核心类型抽象 Haxe 标准库定义了一组基础类型作为核心类型抽象。它们通过 :coreType 元数据识别，而且缺失一个潜在类型的声明。这些抽象类型仍然可以被理解为表示不同的类型。不过，这个类型是 Haxe 目标语言原生的。 引入自定义核心类型抽象在用户代码中是很有必要的，因为它需要 Haxe 目标语言可以理解它的意思。然而，对于宏的作者和新的 Haxe 目标语言可能是很有趣的用例。 与难懂的抽象类型的相比，核心类型抽象有下面的属性： 它们没有潜在类型。 它们被认为是可空的，除非带有 :notNull 元数据的注解。 它们被允许没有表达式形式的 数组访问（第2.8.3节） 函数声明。 没有表达式的 运算符重载字段（第2.8.2节） 不会被强制追随 Haxe 的类型语法形式。"},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{"title":"2.8.7.&#x6838;&#x5FC3;&#x7C7B;&#x578B;&#x62BD;&#x8C61;","path":"\\2.类型\\2.8.抽象类型\\2.8.7.核心类型抽象.html#2-8-7-核心类型抽象","body":"Haxe &#x6807;&#x51C6;&#x5E93;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x7EC4;&#x57FA;&#x7840;&#x7C7B;&#x578B;&#x4F5C;&#x4E3A;&#x6838;&#x5FC3;&#x7C7B;&#x578B;&#x62BD;&#x8C61;&#x3002;&#x5B83;&#x4EEC;&#x901A;&#x8FC7; :coreType &#x5143;&#x6570;&#x636E;&#x8BC6;&#x522B;&#xFF0C;&#x800C;&#x4E14;&#x7F3A;&#x5931;&#x4E00;&#x4E2A;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7684;&#x58F0;&#x660E;&#x3002;&#x8FD9;&#x4E9B;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x88AB;&#x7406;&#x89E3;&#x4E3A;&#x8868;&#x793A;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x4E0D;&#x8FC7;&#xFF0C;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x662F; Haxe &#x76EE;&#x6807;&#x8BED;&#x8A00;&#x539F;&#x751F;&#x7684;&#x3002; &#x5F15;&#x5165;&#x81EA;&#x5B9A;&#x4E49;&#x6838;&#x5FC3;&#x7C7B;&#x578B;&#x62BD;&#x8C61;&#x5728;&#x7528;&#x6237;&#x4EE3;&#x7801;&#x4E2D;&#x662F;&#x5F88;&#x6709;&#x5FC5;&#x8981;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x9700;&#x8981; Haxe &#x76EE;&#x6807;&#x8BED;&#x8A00;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x5B83;&#x7684;&#x610F;&#x601D;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x5BF9;&#x4E8E;&#x5B8F;&#x7684;&#x4F5C;&#x8005;&#x548C;&#x65B0;&#x7684; Haxe &#x76EE;&#x6807;&#x8BED;&#x8A00;&#x53EF;&#x80FD;&#x662F;&#x5F88;&#x6709;&#x8DA3;&#x7684;&#x7528;&#x4F8B;&#x3002; &#x4E0E;&#x96BE;&#x61C2;&#x7684;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x76F8;&#x6BD4;&#xFF0C;&#x6838;&#x5FC3;&#x7C7B;&#x578B;&#x62BD;&#x8C61;&#x6709;&#x4E0B;&#x9762;&#x7684;&#x5C5E;&#x6027;&#xFF1A; &#x5B83;&#x4EEC;&#x6CA1;&#x6709;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x3002; &#x5B83;&#x4EEC;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x53EF;&#x7A7A;&#x7684;&#xFF0C;&#x9664;&#x975E;&#x5E26;&#x6709; :notNull &#x5143;&#x6570;&#x636E;&#x7684;&#x6CE8;&#x89E3;&#x3002; &#x5B83;&#x4EEC;&#x88AB;&#x5141;&#x8BB8;&#x6CA1;&#x6709;&#x8868;&#x8FBE;&#x5F0F;&#x5F62;&#x5F0F;&#x7684; &#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#xFF08;&#x7B2C;2.8.3&#x8282;&#xFF09; &#x51FD;&#x6570;&#x58F0;&#x660E;&#x3002; &#x6CA1;&#x6709;&#x8868;&#x8FBE;&#x5F0F;&#x7684; &#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;2.8.2&#x8282;&#xFF09; &#x4E0D;&#x4F1A;&#x88AB;&#x5F3A;&#x5236;&#x8FFD;&#x968F; Haxe &#x7684;&#x7C7B;&#x578B;&#x8BED;&#x6CD5;&#x5F62;&#x5F0F;&#x3002;"},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.抽象类型.html","body":"2.8.抽象类型 一个抽象类型在运行时实际上是一个不同的类型。它是一个编译时功能，在固有类型之上定义来修改或者增强它们的行为的类型： 1 2 3 4 5 abstract AbstractInt ( Int )  inline public function new (i: Int )  this = i;   从这个例子我们可以得出以下几点 ： 关键字 abstract 表示我们声明一个抽象类型 AbstractInt 是抽象类型的名称，可以是任何符合类型标识符规则的字符 圆括号 () 中的是潜在的类型 Int 大括号 {} 中的是字段 构造函数 new 接受一个 Int 类型的参数 i 潜在类型 定义 ：潜在类型 抽象类型的潜在类型是用来代表抽象类型在运行时的类型。通常是一个具体的（即非抽象的）类型，但是也可以是另一个抽象类型。 这个语法让人联想到类，语义上它们事实的确非常相似。实际上，每个在抽象类型“体”中的（即所有花括号之后的一切）都被解析为类字段。抽象类型可以有 方法（第4.3节） 字段和 非物理（第4.2.3节） 属性（第4.2节） 字段。此外，抽象类型可以被像类一样实例化和使用： 1 2 3 4 5 6 class Main  static public function main ()  var a = new AbstractInt ( 12 ); trace (a); //12   如前所述，抽象类型是一个编译时功能，所以看看上面示例实际生成的内容会很有趣。一个合适的目标是 JavaScript，它往往可以生成简洁干净的代码。编译上面的代码（使用 haxe -main MyAbstract -js myabstract.js ）会显示如下 JavaScript 代码： 1 2 var a = 12 ; console.log(a); 抽象类型 Abstract 在输出中完全消失了，剩下的只是一个它潜在类型的值，Int。因为 Abstract 的构造函数是内联的 （在 内联部分（第4.4.2节） 我们将进行学习的内容 ） ，它的内联表达式分配一个值到这里。当以类进行思考的话，这可能是令人惊讶的。然而，这恰巧是我们希望在抽象类型的上下文中表达的。抽象类型的任何内联成员方法都可以分配到这里，从而修改 “内部的值”。在这点上，一个好的问题是 “如果一个成员函数没有被内联声明将发生什么”，因为代码显然必须放到某个地方。Haxe 创建一个私有类，即已知的实现类，它将所有的抽象成员函数作为接受一个附加的类型为潜在类型的首参数的静态函数。虽然技术上上这是一个实现细节，但它可以被用于 选择函数（第2.8.4节） 。 花絮 ：基本类型和抽象类型 在抽象类型到来之前，所有基本类型都实现为外部类或者枚举。虽然这很好的考虑了某些方面，如 Int 是 Float 的一个“子类”，但这也在别处引起问题。例如，通过 Float 作为一个外部类，它会和空的结构 {} 统一，使得不可能限制一个类型只接受真正的对象。 An abstract type is a type which is actually a different type at run-time. It is a compile-time feature which defines types “over” concrete types in order to modify or augment their behavior: 1 2 3 4 5 abstract AbstractInt ( Int )  inline public function new (i: Int )  this = i;   We can derive the following from this example: The keyword abstract denotes that we are declaring an abstract type. AbstractInt is the name of the abstract type and could be anything conforming to the rules for type identifiers. The underlying type Int is enclosed in parentheses () . The fields are enclosed in curly braces {} , which are a constructor function new accepting one argument i of type Int . Define: Underlying Type The underlying type of an abstract is the type which is used to represent said abstract at runtime. It is usually a concrete (i.e. non-abstract) type but could be another abstract type as well. The syntax is reminiscent of classes and the semantics are indeed similar. In fact, everything in the “body” of an abstract (everything after the opening curly brace) is parsed as class fields. Abstracts may have method fields and non- physical property fields. Furthermore, abstracts can be instantiated and used just like classes: 1 2 3 4 5 6 class Main  static public function main ()  var a = new AbstractInt ( 12 ); trace (a); // 12   As mentioned before, abstracts are a compile-time feature, so it is interesting to see what the above actually generates. A suitable target for this is JavaScript, which tends to generate concise and clean code. Compiling the above using haxe --main MyAbstract --js myabstract.js shows this JavaScript code: 1 2 var a = 12 ; console.log(a); The abstract type Abstract completely disappeared from the output and all that is left is a value of its underlying type, Int . This is because the constructor of Abstract is inlined - something we shall learn about later in the section Inline - and its inlined expression assigns a value to this . This might be surprising when thinking in terms of classes. However, it is precisely what we want to express in the context of abstracts. Any inlined member method of an abstract can assign to this and thus modify the “internal value”. One problem may be apparent - what happens if a member function is not declared inline? The code obviously must be placed somewhere! Haxe handles this by creating a private class, known as the implementation class , which contains all the abstract member functions as static functions accepting an additional first argument this of the underlying type. Trivia: Basic Types and abstracts Before the advent of abstract types, all basic types were implemented as extern classes or enums. While this nicely took care of some aspects such as Int being a “child class” of Float , it caused issues elsewhere. For instance, with Float being an extern class, it would unify with the empty structure {} , making it impossible to constrain a type to accept only real objects."},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{"title":"2.8.&#x62BD;&#x8C61;&#x7C7B;&#x578B;","path":"\\2.类型\\2.8.抽象类型\\2.8.抽象类型.html#2-8-抽象类型","body":"&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x65F6;&#x529F;&#x80FD;&#xFF0C;&#x5728;&#x56FA;&#x6709;&#x7C7B;&#x578B;&#x4E4B;&#x4E0A;&#x5B9A;&#x4E49;&#x6765;&#x4FEE;&#x6539;&#x6216;&#x8005;&#x589E;&#x5F3A;&#x5B83;&#x4EEC;&#x7684;&#x884C;&#x4E3A;&#x7684;&#x7C7B;&#x578B;&#xFF1A; 1 2 3 4 5 abstract AbstractInt ( Int ) { inline public function new (i: Int ) { this = i; } } &#x4ECE;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x4EE5;&#x4E0B;&#x51E0;&#x70B9; &#xFF1A; &#x5173;&#x952E;&#x5B57; abstract &#x8868;&#x793A;&#x6211;&#x4EEC;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B; AbstractInt &#x662F;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55;&#x7B26;&#x5408;&#x7C7B;&#x578B;&#x6807;&#x8BC6;&#x7B26;&#x89C4;&#x5219;&#x7684;&#x5B57;&#x7B26; &#x5706;&#x62EC;&#x53F7; () &#x4E2D;&#x7684;&#x662F;&#x6F5C;&#x5728;&#x7684;&#x7C7B;&#x578B; Int &#x5927;&#x62EC;&#x53F7; {} &#x4E2D;&#x7684;&#x662F;&#x5B57;&#x6BB5; &#x6784;&#x9020;&#x51FD;&#x6570; new &#x63A5;&#x53D7;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570; i &#x6F5C;&#x5728;&#x7C7B;&#x578B; &#x5B9A;&#x4E49; &#xFF1A;&#x6F5C;&#x5728;&#x7C7B;&#x578B; &#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x662F;&#x7528;&#x6765;&#x4EE3;&#x8868;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x901A;&#x5E38;&#x662F;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x7684;&#xFF08;&#x5373;&#x975E;&#x62BD;&#x8C61;&#x7684;&#xFF09;&#x7C7B;&#x578B;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x53E6;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x3002; &#x8FD9;&#x4E2A;&#x8BED;&#x6CD5;&#x8BA9;&#x4EBA;&#x8054;&#x60F3;&#x5230;&#x7C7B;&#xFF0C;&#x8BED;&#x4E49;&#x4E0A;&#x5B83;&#x4EEC;&#x4E8B;&#x5B9E;&#x7684;&#x786E;&#x975E;&#x5E38;&#x76F8;&#x4F3C;&#x3002;&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x6BCF;&#x4E2A;&#x5728;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x201C;&#x4F53;&#x201D;&#x4E2D;&#x7684;&#xFF08;&#x5373;&#x6240;&#x6709;&#x82B1;&#x62EC;&#x53F7;&#x4E4B;&#x540E;&#x7684;&#x4E00;&#x5207;&#xFF09;&#x90FD;&#x88AB;&#x89E3;&#x6790;&#x4E3A;&#x7C7B;&#x5B57;&#x6BB5;&#x3002;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x6709; &#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3&#x8282;&#xFF09; &#x5B57;&#x6BB5;&#x548C; &#x975E;&#x7269;&#x7406;&#xFF08;&#x7B2C;4.2.3&#x8282;&#xFF09; &#x5C5E;&#x6027;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09; &#x5B57;&#x6BB5;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x50CF;&#x7C7B;&#x4E00;&#x6837;&#x5B9E;&#x4F8B;&#x5316;&#x548C;&#x4F7F;&#x7528;&#xFF1A; 1 2 3 4 5 6 class Main { static public function main () { var a = new AbstractInt ( 12 ); trace (a); //12 } } &#x5982;&#x524D;&#x6240;&#x8FF0;&#xFF0C;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x662F;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x65F6;&#x529F;&#x80FD;&#xFF0C;&#x6240;&#x4EE5;&#x770B;&#x770B;&#x4E0A;&#x9762;&#x793A;&#x4F8B;&#x5B9E;&#x9645;&#x751F;&#x6210;&#x7684;&#x5185;&#x5BB9;&#x4F1A;&#x5F88;&#x6709;&#x8DA3;&#x3002;&#x4E00;&#x4E2A;&#x5408;&#x9002;&#x7684;&#x76EE;&#x6807;&#x662F; JavaScript&#xFF0C;&#x5B83;&#x5F80;&#x5F80;&#x53EF;&#x4EE5;&#x751F;&#x6210;&#x7B80;&#x6D01;&#x5E72;&#x51C0;&#x7684;&#x4EE3;&#x7801;&#x3002;&#x7F16;&#x8BD1;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF08;&#x4F7F;&#x7528; haxe -main MyAbstract -js myabstract.js &#xFF09;&#x4F1A;&#x663E;&#x793A;&#x5982;&#x4E0B; JavaScript &#x4EE3;&#x7801;&#xFF1A; 1 2 var a = 12 ; console.log(a); &#x62BD;&#x8C61;&#x7C7B;&#x578B; Abstract &#x5728;&#x8F93;&#x51FA;&#x4E2D;&#x5B8C;&#x5168;&#x6D88;&#x5931;&#x4E86;&#xFF0C;&#x5269;&#x4E0B;&#x7684;&#x53EA;&#x662F;&#x4E00;&#x4E2A;&#x5B83;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7684;&#x503C;&#xFF0C;Int&#x3002;&#x56E0;&#x4E3A; Abstract &#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x662F;&#x5185;&#x8054;&#x7684; &#xFF08;&#x5728; &#x5185;&#x8054;&#x90E8;&#x5206;&#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09; &#x6211;&#x4EEC;&#x5C06;&#x8FDB;&#x884C;&#x5B66;&#x4E60;&#x7684;&#x5185;&#x5BB9; &#xFF09; &#xFF0C;&#x5B83;&#x7684;&#x5185;&#x8054;&#x8868;&#x8FBE;&#x5F0F;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x503C;&#x5230;&#x8FD9;&#x91CC;&#x3002;&#x5F53;&#x4EE5;&#x7C7B;&#x8FDB;&#x884C;&#x601D;&#x8003;&#x7684;&#x8BDD;&#xFF0C;&#x8FD9;&#x53EF;&#x80FD;&#x662F;&#x4EE4;&#x4EBA;&#x60CA;&#x8BB6;&#x7684;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x6070;&#x5DE7;&#x662F;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x5728;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x8868;&#x8FBE;&#x7684;&#x3002;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x4EFB;&#x4F55;&#x5185;&#x8054;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#x90FD;&#x53EF;&#x4EE5;&#x5206;&#x914D;&#x5230;&#x8FD9;&#x91CC;&#xFF0C;&#x4ECE;&#x800C;&#x4FEE;&#x6539; &#x201C;&#x5185;&#x90E8;&#x7684;&#x503C;&#x201D;&#x3002;&#x5728;&#x8FD9;&#x70B9;&#x4E0A;&#xFF0C;&#x4E00;&#x4E2A;&#x597D;&#x7684;&#x95EE;&#x9898;&#x662F; &#x201C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#x51FD;&#x6570;&#x6CA1;&#x6709;&#x88AB;&#x5185;&#x8054;&#x58F0;&#x660E;&#x5C06;&#x53D1;&#x751F;&#x4EC0;&#x4E48;&#x201D;&#xFF0C;&#x56E0;&#x4E3A;&#x4EE3;&#x7801;&#x663E;&#x7136;&#x5FC5;&#x987B;&#x653E;&#x5230;&#x67D0;&#x4E2A;&#x5730;&#x65B9;&#x3002;Haxe &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x79C1;&#x6709;&#x7C7B;&#xFF0C;&#x5373;&#x5DF2;&#x77E5;&#x7684;&#x5B9E;&#x73B0;&#x7C7B;&#xFF0C;&#x5B83;&#x5C06;&#x6240;&#x6709;&#x7684;&#x62BD;&#x8C61;&#x6210;&#x5458;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x9644;&#x52A0;&#x7684;&#x7C7B;&#x578B;&#x4E3A;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7684;&#x9996;&#x53C2;&#x6570;&#x7684;&#x9759;&#x6001;&#x51FD;&#x6570;&#x3002;&#x867D;&#x7136;&#x6280;&#x672F;&#x4E0A;&#x4E0A;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5B9E;&#x73B0;&#x7EC6;&#x8282;&#xFF0C;&#x4F46;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x4E8E; &#x9009;&#x62E9;&#x51FD;&#x6570;&#xFF08;&#x7B2C;2.8.4&#x8282;&#xFF09; &#x3002; &#x82B1;&#x7D6E; &#xFF1A;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x548C;&#x62BD;&#x8C61;&#x7C7B;&#x578B; &#x5728;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5230;&#x6765;&#x4E4B;&#x524D;&#xFF0C;&#x6240;&#x6709;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x90FD;&#x5B9E;&#x73B0;&#x4E3A;&#x5916;&#x90E8;&#x7C7B;&#x6216;&#x8005;&#x679A;&#x4E3E;&#x3002;&#x867D;&#x7136;&#x8FD9;&#x5F88;&#x597D;&#x7684;&#x8003;&#x8651;&#x4E86;&#x67D0;&#x4E9B;&#x65B9;&#x9762;&#xFF0C;&#x5982; Int &#x662F; Float &#x7684;&#x4E00;&#x4E2A;&#x201C;&#x5B50;&#x7C7B;&#x201D;&#xFF0C;&#x4F46;&#x8FD9;&#x4E5F;&#x5728;&#x522B;&#x5904;&#x5F15;&#x8D77;&#x95EE;&#x9898;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x901A;&#x8FC7; Float &#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5916;&#x90E8;&#x7C7B;&#xFF0C;&#x5B83;&#x4F1A;&#x548C;&#x7A7A;&#x7684;&#x7ED3;&#x6784; {} &#x7EDF;&#x4E00;&#xFF0C;&#x4F7F;&#x5F97;&#x4E0D;&#x53EF;&#x80FD;&#x9650;&#x5236;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53EA;&#x63A5;&#x53D7;&#x771F;&#x6B63;&#x7684;&#x5BF9;&#x8C61;&#x3002; An abstract type is a type which is actually a different type at run-time. It is a compile-time feature which defines types &#x201C;over&#x201D; concrete types in order to modify or augment their behavior: 1 2 3 4 5 abstract AbstractInt ( Int ) { inline public function new (i: Int ) { this = i; } } We can derive the following from this example: The keyword abstract denotes that we are declaring an abstract type. AbstractInt is the name of the abstract type and could be anything conforming to the rules for type identifiers. The underlying type Int is enclosed in parentheses () . The fields are enclosed in curly braces {} , which are a constructor function new accepting one argument i of type Int . Define: Underlying Type The underlying type of an abstract is the type which is used to represent said abstract at runtime. It is usually a concrete (i.e. non-abstract) type but could be another abstract type as well. The syntax is reminiscent of classes and the semantics are indeed similar. In fact, everything in the &#x201C;body&#x201D; of an abstract (everything after the opening curly brace) is parsed as class fields. Abstracts may have method fields and non- physical property fields. Furthermore, abstracts can be instantiated and used just like classes: 1 2 3 4 5 6 class Main { static public function main () { var a = new AbstractInt ( 12 ); trace (a); // 12 } } As mentioned before, abstracts are a compile-time feature, so it is interesting to see what the above actually generates. A suitable target for this is JavaScript, which tends to generate concise and clean code. Compiling the above using haxe --main MyAbstract --js myabstract.js shows this JavaScript code: 1 2 var a = 12 ; console.log(a); The abstract type Abstract completely disappeared from the output and all that is left is a value of its underlying type, Int . This is because the constructor of Abstract is inlined - something we shall learn about later in the section Inline - and its inlined expression assigns a value to this . This might be surprising when thinking in terms of classes. However, it is precisely what we want to express in the context of abstracts. Any inlined member method of an abstract can assign to this and thus modify the &#x201C;internal value&#x201D;. One problem may be apparent - what happens if a member function is not declared inline? The code obviously must be placed somewhere! Haxe handles this by creating a private class, known as the implementation class , which contains all the abstract member functions as static functions accepting an additional first argument this of the underlying type. Trivia: Basic Types and abstracts Before the advent of abstract types, all basic types were implemented as extern classes or enums. While this nicely took care of some aspects such as Int being a &#x201C;child class&#x201D; of Float , it caused issues elsewhere. For instance, with Float being an extern class, it would unify with the empty structure {} , making it impossible to constrain a type to accept only real objects."},"2.类型/2.9.单形/2.9.单形.html":{"title":"","path":"\\2.类型\\2.9.单形\\2.9.单形.html","body":"2.9.单形 一个单形（Monomorph）会在 一致性检查（3.5） 时变形（morph）为另外一个类型。有关这一类型的进一步细节将在 类型推断（3.6）中进行解释。 A monomorph is a type which may, through unification(3.5), morph into a different type later. Further details about this type are explained in the section on type inference(3.6)"},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{"title":"2.9.&#x5355;&#x5F62;","path":"\\2.类型\\2.9.单形\\2.9.单形.html#2-9-单形","body":"&#x4E00;&#x4E2A;&#x5355;&#x5F62;&#xFF08;Monomorph&#xFF09;&#x4F1A;&#x5728; &#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#xFF08;3.5&#xFF09; &#x65F6;&#x53D8;&#x5F62;&#xFF08;morph&#xFF09;&#x4E3A;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x6709;&#x5173;&#x8FD9;&#x4E00;&#x7C7B;&#x578B;&#x7684;&#x8FDB;&#x4E00;&#x6B65;&#x7EC6;&#x8282;&#x5C06;&#x5728; &#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;3.6&#xFF09;&#x4E2D;&#x8FDB;&#x884C;&#x89E3;&#x91CA;&#x3002; A monomorph is a type which may, through unification(3.5), morph into a different type later. Further details about this type are explained in the section on type inference(3.6)"},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{"title":"","path":"\\3.类型系统\\3.2.类型参数\\3.2.1.约束.html","body":"3.2.1.约束 类型参数可以通过多种类型被约束： Type parameters can be constrained to multiple types: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 typedef Measurable =  public var length( default , null ): Int ;  class Main  static public function main ()  trace (test([])); trace (test([ \"bar\" , \"foo\" ])); // String should be IterableString // test(\"foo\");  # if (haxe_ver = 4) static function testT:IterableString &amp; Measurable(a:T)  # else static function testT:(IterableString, Measurable)(a:T)  # end if (a.length == 0 ) return \"empty\" ; return a.iterator().next();   方法 test 的类型参数 T 被约束为 IterableString 和 Measurable 。后者为方便起见使用了 typedef（第3.1节）关键字定义且需要兼容有一个 Int 类型 名为 length 的只读属性（第4.2节）。约束指明一个兼容的类型满足： The test method contains a type parameter T that is constrained to the types IterableString and Measurable . The latter is defined using a typedef (3.1) for convenience and requires compatible types to have a read-only property (4.2) named length of type Int . The constraints then indicate that a type is compatible if: 与 IterableString 兼容 并具有一个 Int 类型且名为 length 的属性 it is compatible with IterableString and has a length property of type Int . 我们可以看到，在第7行调用 test 并传递一个空数组，以及第8行传递 ArrayString 是没有问题的。因为数组具有 length 属性以及 iterable 方法。然而，传递一个字符串作为参数，如第9行则会导致约束失败，因为字符串不兼容 IterableT 。 In the above example, we can see that invoking test with an empty array on line 7 and an ArrayString on line 8 works fine. This is because Array has both a length property and an iterator method. However, passing a String as argument on line 9 fails the constraint check because String is not compatible with IterableT ."},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{"title":"3.2.1.&#x7EA6;&#x675F;","path":"\\3.类型系统\\3.2.类型参数\\3.2.1.约束.html#3-2-1-约束","body":"&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x591A;&#x79CD;&#x7C7B;&#x578B;&#x88AB;&#x7EA6;&#x675F;&#xFF1A; Type parameters can be constrained to multiple types: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 typedef Measurable = { public var length( default , null ): Int ; } class Main { static public function main () { trace (test([])); trace (test([ bar , foo ])); // String should be IterableString // test(foo); } # if (haxe_ver = 4) static function testT:IterableString &amp; Measurable(a:T) { # else static function testT:(IterableString, Measurable)(a:T) { # end if (a.length == 0 ) return empty ; return a.iterator().next(); } } &#x65B9;&#x6CD5; test &#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570; T &#x88AB;&#x7EA6;&#x675F;&#x4E3A; IterableString &#x548C; Measurable &#x3002;&#x540E;&#x8005;&#x4E3A;&#x65B9;&#x4FBF;&#x8D77;&#x89C1;&#x4F7F;&#x7528;&#x4E86; typedef&#xFF08;&#x7B2C;3.1&#x8282;&#xFF09;&#x5173;&#x952E;&#x5B57;&#x5B9A;&#x4E49;&#x4E14;&#x9700;&#x8981;&#x517C;&#x5BB9;&#x6709;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B; &#x540D;&#x4E3A; length &#x7684;&#x53EA;&#x8BFB;&#x5C5E;&#x6027;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#x3002;&#x7EA6;&#x675F;&#x6307;&#x660E;&#x4E00;&#x4E2A;&#x517C;&#x5BB9;&#x7684;&#x7C7B;&#x578B;&#x6EE1;&#x8DB3;&#xFF1A; The test method contains a type parameter T that is constrained to the types IterableString and Measurable . The latter is defined using a typedef (3.1) for convenience and requires compatible types to have a read-only property (4.2) named length of type Int . The constraints then indicate that a type is compatible if: &#x4E0E; IterableString &#x517C;&#x5BB9; &#x5E76;&#x5177;&#x6709;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x4E14;&#x540D;&#x4E3A; length &#x7684;&#x5C5E;&#x6027; it is compatible with IterableString and has a length property of type Int . &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x5728;&#x7B2C;7&#x884C;&#x8C03;&#x7528; test &#x5E76;&#x4F20;&#x9012;&#x4E00;&#x4E2A;&#x7A7A;&#x6570;&#x7EC4;&#xFF0C;&#x4EE5;&#x53CA;&#x7B2C;8&#x884C;&#x4F20;&#x9012; ArrayString &#x662F;&#x6CA1;&#x6709;&#x95EE;&#x9898;&#x7684;&#x3002;&#x56E0;&#x4E3A;&#x6570;&#x7EC4;&#x5177;&#x6709; length &#x5C5E;&#x6027;&#x4EE5;&#x53CA; iterable &#x65B9;&#x6CD5;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4F20;&#x9012;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x7B2C;9&#x884C;&#x5219;&#x4F1A;&#x5BFC;&#x81F4;&#x7EA6;&#x675F;&#x5931;&#x8D25;&#xFF0C;&#x56E0;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x4E0D;&#x517C;&#x5BB9; IterableT &#x3002; In the above example, we can see that invoking test with an empty array on line 7 and an ArrayString on line 8 works fine. This is because Array has both a length property and an iterator method. However, passing a String as argument on line 9 fails the constraint check because String is not compatible with IterableT ."},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{"title":"","path":"\\3.类型系统\\3.1.Typedef\\3.1.Typedef.html","body":"3.1.Typedef 在讨论 匿名结构（第2.5节 ） 的时候我们简要的介绍了如何通过关键字 typedef 给定一个名字来缩短一个复杂的 匿名结构（第2.5节 ）类型的声明。这正是 typedef 所擅长的事情。给匿名结构类型命名甚至可以认为是它们的主要用途。事实上，这种方式的使用是如此的常见以至于许多 Haxe 用户甚至认为 typedef 实际上就是结构类型。 typedef 可以给任何其它的类型命名： 1 typedef IA = Array  Int ; 这使我们能使用 IA 到我们通常使用 ArrayInt 的地方。虽然这只不过节省了几次敲键盘的次数，但在用于更复杂、混合的类型时会产生很大的差异。再一次，这正是为什么 typedef 和结构看起来那么连贯的原因： 1 2 3 4 typedef User =  var age : Int ; var name : String ;  一个 typedef 并不是一个文本的替换，而是实际上一个真实的类型。它甚至可以有 类型参数（第3.2节） ，就像 Haxe 标准库中的 Iterable 类型所展示的： 1 2 3 typedef IterableT =  function iterator () : Iterator T;  可选字段 标记一个结构类型中的字段为可选，使用 @:optional 元数据。 1 2 3 4 5 typedef User =  var age : Int ; var name : String ; @:optional var phoneNumber : String; "},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{"title":"3.1.Typedef","path":"\\3.类型系统\\3.1.Typedef\\3.1.Typedef.html#3-1-Typedef","body":"&#x5728;&#x8BA8;&#x8BBA; &#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF08;&#x7B2C;2.5&#x8282; &#xFF09; &#x7684;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x7B80;&#x8981;&#x7684;&#x4ECB;&#x7ECD;&#x4E86;&#x5982;&#x4F55;&#x901A;&#x8FC7;&#x5173;&#x952E;&#x5B57; typedef &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x540D;&#x5B57;&#x6765;&#x7F29;&#x77ED;&#x4E00;&#x4E2A;&#x590D;&#x6742;&#x7684; &#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF08;&#x7B2C;2.5&#x8282; &#xFF09;&#x7C7B;&#x578B;&#x7684;&#x58F0;&#x660E;&#x3002;&#x8FD9;&#x6B63;&#x662F; typedef &#x6240;&#x64C5;&#x957F;&#x7684;&#x4E8B;&#x60C5;&#x3002;&#x7ED9;&#x533F;&#x540D;&#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x547D;&#x540D;&#x751A;&#x81F3;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;&#x5B83;&#x4EEC;&#x7684;&#x4E3B;&#x8981;&#x7528;&#x9014;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x7684;&#x4F7F;&#x7528;&#x662F;&#x5982;&#x6B64;&#x7684;&#x5E38;&#x89C1;&#x4EE5;&#x81F3;&#x4E8E;&#x8BB8;&#x591A; Haxe &#x7528;&#x6237;&#x751A;&#x81F3;&#x8BA4;&#x4E3A; typedef &#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x3002; typedef &#x53EF;&#x4EE5;&#x7ED9;&#x4EFB;&#x4F55;&#x5176;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x547D;&#x540D;&#xFF1A; 1 typedef IA = Array  Int ; &#x8FD9;&#x4F7F;&#x6211;&#x4EEC;&#x80FD;&#x4F7F;&#x7528; IA &#x5230;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x4F7F;&#x7528; ArrayInt &#x7684;&#x5730;&#x65B9;&#x3002;&#x867D;&#x7136;&#x8FD9;&#x53EA;&#x4E0D;&#x8FC7;&#x8282;&#x7701;&#x4E86;&#x51E0;&#x6B21;&#x6572;&#x952E;&#x76D8;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x4F46;&#x5728;&#x7528;&#x4E8E;&#x66F4;&#x590D;&#x6742;&#x3001;&#x6DF7;&#x5408;&#x7684;&#x7C7B;&#x578B;&#x65F6;&#x4F1A;&#x4EA7;&#x751F;&#x5F88;&#x5927;&#x7684;&#x5DEE;&#x5F02;&#x3002;&#x518D;&#x4E00;&#x6B21;&#xFF0C;&#x8FD9;&#x6B63;&#x662F;&#x4E3A;&#x4EC0;&#x4E48; typedef &#x548C;&#x7ED3;&#x6784;&#x770B;&#x8D77;&#x6765;&#x90A3;&#x4E48;&#x8FDE;&#x8D2F;&#x7684;&#x539F;&#x56E0;&#xFF1A; 1 2 3 4 typedef User = { var age : Int ; var name : String ; } &#x4E00;&#x4E2A; typedef &#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x6587;&#x672C;&#x7684;&#x66FF;&#x6362;&#xFF0C;&#x800C;&#x662F;&#x5B9E;&#x9645;&#x4E0A;&#x4E00;&#x4E2A;&#x771F;&#x5B9E;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x5B83;&#x751A;&#x81F3;&#x53EF;&#x4EE5;&#x6709; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09; &#xFF0C;&#x5C31;&#x50CF; Haxe &#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684; Iterable &#x7C7B;&#x578B;&#x6240;&#x5C55;&#x793A;&#x7684;&#xFF1A; 1 2 3 typedef IterableT = { function iterator () : Iterator T; } &#x53EF;&#x9009;&#x5B57;&#x6BB5; &#x6807;&#x8BB0;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x4E2D;&#x7684;&#x5B57;&#x6BB5;&#x4E3A;&#x53EF;&#x9009;&#xFF0C;&#x4F7F;&#x7528; @:optional &#x5143;&#x6570;&#x636E;&#x3002; 1 2 3 4 5 typedef User = { var age : Int ; var name : String ; @:optional var phoneNumber : String; }"},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{"title":"","path":"\\3.类型系统\\3.2.类型参数\\3.2.类型参数.html","body":"3.2.类型参数 Haxe允许许多类型的参数化，就像类字段（第4章）和枚举构造函数（第2.4.1节）。类型参数通过闭合的尖括号囊括以逗号分隔的类型参数名来定义。一个简单的例子来自于Haxe标准库，就是 Array： Haxe allows parametrization of a number of types, as well as class ﬁelds (4) and enum constructors (2.4.1). Type parameters are deﬁned by enclosing comma-separated type parameter names in angle brackets . A simple example from the Haxe Standard Library is Array: 1 2 3 class Array  T   function push (x : T ) : Int ;  每当一个Array的实例被创建，它的类型参数 T 成为一个 单形（第2.9节）。也就是说，它可以被绑定到任何类型，但是一次只有一个。可以是显式地触发绑定，通过调用构造函数并显式地提供类型（ new ArrayString() ），或者隐式地触发，通过类型推断（第3.6节），例如当我们调用 arrayInstance.push(foo) 。 Whenever an instance of Array is created, its type parameter T becomes a monomorph (2.9). That is, it can be bound to any type, but only one at a time. This binding can happen explicitly by invoking the constructor with explicit types (new Array()) or implicitly by type inference (3.6), e.g. when invoking arrayInstance.push(“foo”). 在一个类的定义中使用类型参数时，除非加入了约束（第3.2.1节）否则这些类型参数都没有指定特定的类型。因此编译器必须假定这些类型参数可以被分配为任意类型使用。因此，不能访问类型参数的字段或者 类型转换（第5.23）为一个类型参数类型。也不可能为一个类型参数创建新的实例，除非类型参数是泛型（第3.3节）并且被相应的约束。 Inside the deﬁnition of a class with type parameters,these type parameters are an unspeciﬁc type. Unless constraints (3.2.1) are added, the compiler has to assume that the type parameters could be used with any type. As a consequence, it is not possible to access ﬁelds of type parameters or cast (5.23) to a type parameter type. It is also not possible to create a new instance of a type parameter type, unless the type parameter is generic (3.3) and constrained accordingly. 下面的表格展示了允许声明类型参数的地方： The following table shows where type parameters are allowed: 位置 触发绑定 注意 Class 实例化 也可以于成员字段被访问时绑定 Enum 实例化 Enum构造函数 实例化 Function 调用中 允许用于方法和命名的局部 lvalue 函数 Structure 实例化 函数类型参数在函数被调用时触发绑定，这样的类型参数（如果无约束）接受任何类型。但是，每次调用只接受一种类型。比如当一个函数有多个参数时： With function type parameters being bound upon invocation, such a type parameter (if unconstrained) accepts any type. However, only one type per invocation is accepted. This can be utilized if a function has multiple arguments: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Main  static public function main ()  equals( 1 , 1 ); // runtime message: bar should be foo equals( \"foo\" , \"bar\" ); // compiler error: String should be Int equals( 1 , \"foo\" );  static function equalsT(expected:T, actual:T)  if (actual != expected)  trace (’$actual should be $expected’);    equals 函数的 expected 参数和 actual 参数都是类型 T 。这意味着对于每个 equals 的调用，这两个参数必须是相同类型。编译器承认第一个调用（两种参数类型都是 Int ）和第二个调用（两个参数都是 String ），但是第三个调用引发了一个编译器错误。 Both of the equals function’s arguments, expected and actual , have type T . This implies that for each invocation of equals , the two arguments must be of the same type. The compiler permits the first call (both arguments being of Int ) and the second call (both arguments being of String ) but the third attempt causes a compiler error due to a type mismatch. 花絮 ：表达式语法中的类型参数 我们常常被问及，为什么一个使用类型参数的方法不能被以 methodString(x) 形式调用。编译器给出的错误信息不是很有用。这里，有一个简单的解释：上面的代码会把  和  都解析为二元操作符，结果会解析为 (method Sting)  (x) 。 Trivia: Type parameters in expression syntax We often get the question of why a method with type parameters cannot be called as methodString(x) . The error messages the compiler gives are not very helpful. However, there is a simple reason for that: the above code is parsed as if both  and  were binary operators, yielding (method  String)  (x) ."},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{"title":"3.2.&#x7C7B;&#x578B;&#x53C2;&#x6570;","path":"\\3.类型系统\\3.2.类型参数\\3.2.类型参数.html#3-2-类型参数","body":"Haxe&#x5141;&#x8BB8;&#x8BB8;&#x591A;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x5316;&#xFF0C;&#x5C31;&#x50CF;&#x7C7B;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;4&#x7AE0;&#xFF09;&#x548C;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF08;&#x7B2C;2.4.1&#x8282;&#xFF09;&#x3002;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x901A;&#x8FC7;&#x95ED;&#x5408;&#x7684;&#x5C16;&#x62EC;&#x53F7;&#x56CA;&#x62EC;&#x4EE5;&#x9017;&#x53F7;&#x5206;&#x9694;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x540D;&#x6765;&#x5B9A;&#x4E49;&#x3002;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x4F8B;&#x5B50;&#x6765;&#x81EA;&#x4E8E;Haxe&#x6807;&#x51C6;&#x5E93;&#xFF0C;&#x5C31;&#x662F; Array&#xFF1A; Haxe allows parametrization of a number of types, as well as class &#xFB01;elds (4) and enum constructors (2.4.1). Type parameters are de&#xFB01;ned by enclosing comma-separated type parameter names in angle brackets . A simple example from the Haxe Standard Library is Array: 1 2 3 class Array  T  { function push (x : T ) : Int ; } &#x6BCF;&#x5F53;&#x4E00;&#x4E2A;Array&#x7684;&#x5B9E;&#x4F8B;&#x88AB;&#x521B;&#x5EFA;&#xFF0C;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570; T &#x6210;&#x4E3A;&#x4E00;&#x4E2A; &#x5355;&#x5F62;&#xFF08;&#x7B2C;2.9&#x8282;&#xFF09;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x7ED1;&#x5B9A;&#x5230;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#xFF0C;&#x4F46;&#x662F;&#x4E00;&#x6B21;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x3002;&#x53EF;&#x4EE5;&#x662F;&#x663E;&#x5F0F;&#x5730;&#x89E6;&#x53D1;&#x7ED1;&#x5B9A;&#xFF0C;&#x901A;&#x8FC7;&#x8C03;&#x7528;&#x6784;&#x9020;&#x51FD;&#x6570;&#x5E76;&#x663E;&#x5F0F;&#x5730;&#x63D0;&#x4F9B;&#x7C7B;&#x578B;&#xFF08; new ArrayString() &#xFF09;&#xFF0C;&#x6216;&#x8005;&#x9690;&#x5F0F;&#x5730;&#x89E6;&#x53D1;&#xFF0C;&#x901A;&#x8FC7;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09;&#xFF0C;&#x4F8B;&#x5982;&#x5F53;&#x6211;&#x4EEC;&#x8C03;&#x7528; arrayInstance.push(foo) &#x3002; Whenever an instance of Array is created, its type parameter T becomes a monomorph (2.9). That is, it can be bound to any type, but only one at a time. This binding can happen explicitly by invoking the constructor with explicit types (new Array()) or implicitly by type inference (3.6), e.g. when invoking arrayInstance.push(&#x201C;foo&#x201D;). &#x5728;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5B9A;&#x4E49;&#x4E2D;&#x4F7F;&#x7528;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x65F6;&#xFF0C;&#x9664;&#x975E;&#x52A0;&#x5165;&#x4E86;&#x7EA6;&#x675F;&#xFF08;&#x7B2C;3.2.1&#x8282;&#xFF09;&#x5426;&#x5219;&#x8FD9;&#x4E9B;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x90FD;&#x6CA1;&#x6709;&#x6307;&#x5B9A;&#x7279;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x56E0;&#x6B64;&#x7F16;&#x8BD1;&#x5668;&#x5FC5;&#x987B;&#x5047;&#x5B9A;&#x8FD9;&#x4E9B;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x4E3A;&#x4EFB;&#x610F;&#x7C7B;&#x578B;&#x4F7F;&#x7528;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x4E0D;&#x80FD;&#x8BBF;&#x95EE;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x7684;&#x5B57;&#x6BB5;&#x6216;&#x8005; &#x7C7B;&#x578B;&#x8F6C;&#x6362;&#xFF08;&#x7B2C;5.23&#xFF09;&#x4E3A;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x3002;&#x4E5F;&#x4E0D;&#x53EF;&#x80FD;&#x4E3A;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x9664;&#x975E;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x662F;&#x6CDB;&#x578B;&#xFF08;&#x7B2C;3.3&#x8282;&#xFF09;&#x5E76;&#x4E14;&#x88AB;&#x76F8;&#x5E94;&#x7684;&#x7EA6;&#x675F;&#x3002; Inside the de&#xFB01;nition of a class with type parameters,these type parameters are an unspeci&#xFB01;c type. Unless constraints (3.2.1) are added, the compiler has to assume that the type parameters could be used with any type. As a consequence, it is not possible to access &#xFB01;elds of type parameters or cast (5.23) to a type parameter type. It is also not possible to create a new instance of a type parameter type, unless the type parameter is generic (3.3) and constrained accordingly. &#x4E0B;&#x9762;&#x7684;&#x8868;&#x683C;&#x5C55;&#x793A;&#x4E86;&#x5141;&#x8BB8;&#x58F0;&#x660E;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x7684;&#x5730;&#x65B9;&#xFF1A; The following table shows where type parameters are allowed: &#x4F4D;&#x7F6E; &#x89E6;&#x53D1;&#x7ED1;&#x5B9A; &#x6CE8;&#x610F; Class &#x5B9E;&#x4F8B;&#x5316; &#x4E5F;&#x53EF;&#x4EE5;&#x4E8E;&#x6210;&#x5458;&#x5B57;&#x6BB5;&#x88AB;&#x8BBF;&#x95EE;&#x65F6;&#x7ED1;&#x5B9A; Enum &#x5B9E;&#x4F8B;&#x5316; Enum&#x6784;&#x9020;&#x51FD;&#x6570; &#x5B9E;&#x4F8B;&#x5316; Function &#x8C03;&#x7528;&#x4E2D; &#x5141;&#x8BB8;&#x7528;&#x4E8E;&#x65B9;&#x6CD5;&#x548C;&#x547D;&#x540D;&#x7684;&#x5C40;&#x90E8; lvalue &#x51FD;&#x6570; Structure &#x5B9E;&#x4F8B;&#x5316; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x5728;&#x51FD;&#x6570;&#x88AB;&#x8C03;&#x7528;&#x65F6;&#x89E6;&#x53D1;&#x7ED1;&#x5B9A;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x5982;&#x679C;&#x65E0;&#x7EA6;&#x675F;&#xFF09;&#x63A5;&#x53D7;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x6BCF;&#x6B21;&#x8C03;&#x7528;&#x53EA;&#x63A5;&#x53D7;&#x4E00;&#x79CD;&#x7C7B;&#x578B;&#x3002;&#x6BD4;&#x5982;&#x5F53;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x6709;&#x591A;&#x4E2A;&#x53C2;&#x6570;&#x65F6;&#xFF1A; With function type parameters being bound upon invocation, such a type parameter (if unconstrained) accepts any type. However, only one type per invocation is accepted. This can be utilized if a function has multiple arguments: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Main { static public function main () { equals( 1 , 1 ); // runtime message: bar should be foo equals( foo , bar ); // compiler error: String should be Int equals( 1 , foo ); } static function equalsT(expected:T, actual:T) { if (actual != expected) { trace (&#x2019;$actual should be $expected&#x2019;); } } } equals &#x51FD;&#x6570;&#x7684; expected &#x53C2;&#x6570;&#x548C; actual &#x53C2;&#x6570;&#x90FD;&#x662F;&#x7C7B;&#x578B; T &#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A; equals &#x7684;&#x8C03;&#x7528;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#x5FC5;&#x987B;&#x662F;&#x76F8;&#x540C;&#x7C7B;&#x578B;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x627F;&#x8BA4;&#x7B2C;&#x4E00;&#x4E2A;&#x8C03;&#x7528;&#xFF08;&#x4E24;&#x79CD;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x90FD;&#x662F; Int &#xFF09;&#x548C;&#x7B2C;&#x4E8C;&#x4E2A;&#x8C03;&#x7528;&#xFF08;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#x90FD;&#x662F; String &#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x7B2C;&#x4E09;&#x4E2A;&#x8C03;&#x7528;&#x5F15;&#x53D1;&#x4E86;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x5668;&#x9519;&#x8BEF;&#x3002; Both of the equals function&#x2019;s arguments, expected and actual , have type T . This implies that for each invocation of equals , the two arguments must be of the same type. The compiler permits the first call (both arguments being of Int ) and the second call (both arguments being of String ) but the third attempt causes a compiler error due to a type mismatch. &#x82B1;&#x7D6E; &#xFF1A;&#x8868;&#x8FBE;&#x5F0F;&#x8BED;&#x6CD5;&#x4E2D;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570; &#x6211;&#x4EEC;&#x5E38;&#x5E38;&#x88AB;&#x95EE;&#x53CA;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x4E00;&#x4E2A;&#x4F7F;&#x7528;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x7684;&#x65B9;&#x6CD5;&#x4E0D;&#x80FD;&#x88AB;&#x4EE5; methodString(x) &#x5F62;&#x5F0F;&#x8C03;&#x7528;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x7ED9;&#x51FA;&#x7684;&#x9519;&#x8BEF;&#x4FE1;&#x606F;&#x4E0D;&#x662F;&#x5F88;&#x6709;&#x7528;&#x3002;&#x8FD9;&#x91CC;&#xFF0C;&#x6709;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x89E3;&#x91CA;&#xFF1A;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x4F1A;&#x628A;  &#x548C;  &#x90FD;&#x89E3;&#x6790;&#x4E3A;&#x4E8C;&#x5143;&#x64CD;&#x4F5C;&#x7B26;&#xFF0C;&#x7ED3;&#x679C;&#x4F1A;&#x89E3;&#x6790;&#x4E3A; (method Sting)  (x) &#x3002; Trivia: Type parameters in expression syntax We often get the question of why a method with type parameters cannot be called as methodString(x) . The error messages the compiler gives are not very helpful. However, there is a simple reason for that: the above code is parsed as if both  and  were binary operators, yielding (method  String)  (x) ."},"3.类型系统/3.3.泛型/3.3.泛型.html":{"title":"","path":"\\3.类型系统\\3.3.泛型\\3.3.泛型.html","body":"3.3.泛型 通常，Haxe编译器只生成一个单独的类或者函数，即使它有类型参数。生成的代码之后可能必须执行一些类型检查可能会影响一些性能。这发生在一个自然抽象概念中，目标语言的代码生成器必须假设一个类型参数可以是任何类型。 Usually, the Haxe Compiler generates only a single class or function even if it has type parameters. This results in a natural abstraction where the code generator for the target language has to assume that a type parameter could be of any type. The generated code then might have to perform some type checks which can be detrimental to performance. 一个类或者函数可以通过使用 :generic 元数据（第6.9节）归类为泛型。这导致编译器每个类型参数和破损的名字的混合，发射一个不同的类/函数。 一个这样的规范可以使得静态目标语言（第2.2节）的部分 性能关键型(performance-critical) 的代码得到性能提升，但代价是其生成的体量变大： A class or function can be made generic by attributing it with the :generic metadata (6.9). This causes the compiler to emit a distinct class/function per type parameter combination with mangled names. A speciﬁcation like this can yield a boost in performance-critical code portions on static targets (2.2) at the cost of a larger output size: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @:generic class MyValue  T   public var value: T ; public function new (value: T )  this .value = value;   class Main  static public function main ()  var a = new MyValue  String ( \"Hello\" ); var b = new MyValue  Int ( 42 );   似乎不常见这里的显式类型 MyValue，因为我们通常让类型推断（第3.6节）处理它。尽管如此，它确实需要在这种情况下被需要。编译器必须了解泛型类的准确类型一经构建。JavaScript输出显示结果： It seems unusual to see the explicit type MyValue here as we usually let type inference (3.6) deal with this. Nonetheless, it is indeed required in this case. The compiler has to know the exact type of a generic class upon construction. The JavaScript output shows the result: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ( function ()  \"use strict\" ; var Test = function ()  ; Test.main = function ()  var a = new MyValue_String ( \"Hello\" ); var b = new MyValue_Int ( 5 ); ; var MyValue_Int = function (value)  this .value = value; ; var MyValue_String = function (value)  this .value = value; ; Test.main(); )(); 我们可以确定 MyValue和MyVlue 已经变成 MyValue_String 和MyValue_Int 。这类似于泛型函数： We can identify that MyValue and MyValue have become MyValue_String and MyValue_Int respectively. This is similar for generic functions: 1 2 3 4 5 6 7 8 class Main  static public function main ()  method( \"foo\" ); method( 1 );  @:generic static function methodT(t:T)    再一次，JavaScript输出使其非常明显： Again, the JavaScript output makes it obvious: 1 2 3 4 5 6 7 8 9 10 11 12 ( function ()  \"use strict\" ; var Main = function ()   Main.method_Int = function (t)   Main.method_String = function (t)   Main.main = function ()  Main.method_String( \"foo\" ); Main.method_Int( 1 );  Main.main(); )();"},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{"title":"3.3.&#x6CDB;&#x578B;","path":"\\3.类型系统\\3.3.泛型\\3.3.泛型.html#3-3-泛型","body":"&#x901A;&#x5E38;&#xFF0C;Haxe&#x7F16;&#x8BD1;&#x5668;&#x53EA;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x7C7B;&#x6216;&#x8005;&#x51FD;&#x6570;&#xFF0C;&#x5373;&#x4F7F;&#x5B83;&#x6709;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x3002;&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#x4E4B;&#x540E;&#x53EF;&#x80FD;&#x5FC5;&#x987B;&#x6267;&#x884C;&#x4E00;&#x4E9B;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x53EF;&#x80FD;&#x4F1A;&#x5F71;&#x54CD;&#x4E00;&#x4E9B;&#x6027;&#x80FD;&#x3002;&#x8FD9;&#x53D1;&#x751F;&#x5728;&#x4E00;&#x4E2A;&#x81EA;&#x7136;&#x62BD;&#x8C61;&#x6982;&#x5FF5;&#x4E2D;&#xFF0C;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x4EE3;&#x7801;&#x751F;&#x6210;&#x5668;&#x5FC5;&#x987B;&#x5047;&#x8BBE;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x3002; Usually, the Haxe Compiler generates only a single class or function even if it has type parameters. This results in a natural abstraction where the code generator for the target language has to assume that a type parameter could be of any type. The generated code then might have to perform some type checks which can be detrimental to performance. &#x4E00;&#x4E2A;&#x7C7B;&#x6216;&#x8005;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528; :generic &#x5143;&#x6570;&#x636E;&#xFF08;&#x7B2C;6.9&#x8282;&#xFF09;&#x5F52;&#x7C7B;&#x4E3A;&#x6CDB;&#x578B;&#x3002;&#x8FD9;&#x5BFC;&#x81F4;&#x7F16;&#x8BD1;&#x5668;&#x6BCF;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x548C;&#x7834;&#x635F;&#x7684;&#x540D;&#x5B57;&#x7684;&#x6DF7;&#x5408;&#xFF0C;&#x53D1;&#x5C04;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x7C7B;/&#x51FD;&#x6570;&#x3002; &#x4E00;&#x4E2A;&#x8FD9;&#x6837;&#x7684;&#x89C4;&#x8303;&#x53EF;&#x4EE5;&#x4F7F;&#x5F97;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09;&#x7684;&#x90E8;&#x5206; &#x6027;&#x80FD;&#x5173;&#x952E;&#x578B;(performance-critical) &#x7684;&#x4EE3;&#x7801;&#x5F97;&#x5230;&#x6027;&#x80FD;&#x63D0;&#x5347;&#xFF0C;&#x4F46;&#x4EE3;&#x4EF7;&#x662F;&#x5176;&#x751F;&#x6210;&#x7684;&#x4F53;&#x91CF;&#x53D8;&#x5927;&#xFF1A; A class or function can be made generic by attributing it with the :generic metadata (6.9). This causes the compiler to emit a distinct class/function per type parameter combination with mangled names. A speci&#xFB01;cation like this can yield a boost in performance-critical code portions on static targets (2.2) at the cost of a larger output size: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @:generic class MyValue  T  { public var value: T ; public function new (value: T ) { this .value = value; } } class Main { static public function main () { var a = new MyValue  String ( Hello ); var b = new MyValue  Int ( 42 ); } } &#x4F3C;&#x4E4E;&#x4E0D;&#x5E38;&#x89C1;&#x8FD9;&#x91CC;&#x7684;&#x663E;&#x5F0F;&#x7C7B;&#x578B; MyValue&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x8BA9;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09;&#x5904;&#x7406;&#x5B83;&#x3002;&#x5C3D;&#x7BA1;&#x5982;&#x6B64;&#xFF0C;&#x5B83;&#x786E;&#x5B9E;&#x9700;&#x8981;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x88AB;&#x9700;&#x8981;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x5FC5;&#x987B;&#x4E86;&#x89E3;&#x6CDB;&#x578B;&#x7C7B;&#x7684;&#x51C6;&#x786E;&#x7C7B;&#x578B;&#x4E00;&#x7ECF;&#x6784;&#x5EFA;&#x3002;JavaScript&#x8F93;&#x51FA;&#x663E;&#x793A;&#x7ED3;&#x679C;&#xFF1A; It seems unusual to see the explicit type MyValue here as we usually let type inference (3.6) deal with this. Nonetheless, it is indeed required in this case. The compiler has to know the exact type of a generic class upon construction. The JavaScript output shows the result: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ( function () { use strict ; var Test = function () { }; Test.main = function () { var a = new MyValue_String ( Hello ); var b = new MyValue_Int ( 5 ); }; var MyValue_Int = function (value) { this .value = value; }; var MyValue_String = function (value) { this .value = value; }; Test.main(); })(); &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x786E;&#x5B9A; MyValue&#x548C;MyVlue &#x5DF2;&#x7ECF;&#x53D8;&#x6210; MyValue_String &#x548C;MyValue_Int &#x3002;&#x8FD9;&#x7C7B;&#x4F3C;&#x4E8E;&#x6CDB;&#x578B;&#x51FD;&#x6570;&#xFF1A; We can identify that MyValue and MyValue have become MyValue_String and MyValue_Int respectively. This is similar for generic functions: 1 2 3 4 5 6 7 8 class Main { static public function main () { method( foo ); method( 1 ); } @:generic static function methodT(t:T) { } } &#x518D;&#x4E00;&#x6B21;&#xFF0C;JavaScript&#x8F93;&#x51FA;&#x4F7F;&#x5176;&#x975E;&#x5E38;&#x660E;&#x663E;&#xFF1A; Again, the JavaScript output makes it obvious: 1 2 3 4 5 6 7 8 9 10 11 12 ( function () { use strict ; var Main = function () { } Main.method_Int = function (t) { } Main.method_String = function (t) { } Main.main = function () { Main.method_String( foo ); Main.method_Int( 1 ); } Main.main(); })();"},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.1.类与接口.html","body":"3.5.1.类与接口 当定义类之间的一致性检查行为时需要特别注意，一致性是定向检查的：也就是说我们可以赋值一个特例化的类型（例如一个子类）到一个通用类型（例如一个父类），但是反过来是不允许的。 When deﬁning uniﬁcation behavior between classes,it is important to remember that uniﬁcation is directional: We can assign a more specialized class (e.g. a child class) to a generic class (e.g. a parent class) but the reverse is not valid. 如下的赋值是允许的： 子类分配到父类 类分配到其所实现的接口 接口到基础接口 The following assignments are allowed: child class to parent class class to implementing interface interface to base interface 这组规则是可传递的，这意味着一个子类也可以被分配到其基类的基类、其基类所实现的接口、实现的接口的基础接口等，以此类推。 These rules are transitive, meaning that a child class can also be assigned to the base class of its base class,an interface its base class implements,the base interface of an implementing interface and so on."},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{"title":"3.5.1.&#x7C7B;&#x4E0E;&#x63A5;&#x53E3;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.1.类与接口.html#3-5-1-类与接口","body":"&#x5F53;&#x5B9A;&#x4E49;&#x7C7B;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x884C;&#x4E3A;&#x65F6;&#x9700;&#x8981;&#x7279;&#x522B;&#x6CE8;&#x610F;&#xFF0C;&#x4E00;&#x81F4;&#x6027;&#x662F;&#x5B9A;&#x5411;&#x68C0;&#x67E5;&#x7684;&#xFF1A;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8D4B;&#x503C;&#x4E00;&#x4E2A;&#x7279;&#x4F8B;&#x5316;&#x7684;&#x7C7B;&#x578B;&#xFF08;&#x4F8B;&#x5982;&#x4E00;&#x4E2A;&#x5B50;&#x7C7B;&#xFF09;&#x5230;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x7C7B;&#x578B;&#xFF08;&#x4F8B;&#x5982;&#x4E00;&#x4E2A;&#x7236;&#x7C7B;&#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x53CD;&#x8FC7;&#x6765;&#x662F;&#x4E0D;&#x5141;&#x8BB8;&#x7684;&#x3002; When de&#xFB01;ning uni&#xFB01;cation behavior between classes,it is important to remember that uni&#xFB01;cation is directional: We can assign a more specialized class (e.g. a child class) to a generic class (e.g. a parent class) but the reverse is not valid. &#x5982;&#x4E0B;&#x7684;&#x8D4B;&#x503C;&#x662F;&#x5141;&#x8BB8;&#x7684;&#xFF1A; &#x5B50;&#x7C7B;&#x5206;&#x914D;&#x5230;&#x7236;&#x7C7B; &#x7C7B;&#x5206;&#x914D;&#x5230;&#x5176;&#x6240;&#x5B9E;&#x73B0;&#x7684;&#x63A5;&#x53E3; &#x63A5;&#x53E3;&#x5230;&#x57FA;&#x7840;&#x63A5;&#x53E3; The following assignments are allowed: child class to parent class class to implementing interface interface to base interface &#x8FD9;&#x7EC4;&#x89C4;&#x5219;&#x662F;&#x53EF;&#x4F20;&#x9012;&#x7684;&#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x4E00;&#x4E2A;&#x5B50;&#x7C7B;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230;&#x5176;&#x57FA;&#x7C7B;&#x7684;&#x57FA;&#x7C7B;&#x3001;&#x5176;&#x57FA;&#x7C7B;&#x6240;&#x5B9E;&#x73B0;&#x7684;&#x63A5;&#x53E3;&#x3001;&#x5B9E;&#x73B0;&#x7684;&#x63A5;&#x53E3;&#x7684;&#x57FA;&#x7840;&#x63A5;&#x53E3;&#x7B49;&#xFF0C;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x3002; These rules are transitive, meaning that a child class can also be assigned to the base class of its base class,an interface its base class implements,the base interface of an implementing interface and so on."},"3.类型系统/3.4.变异/3.4.变异.html":{"title":"","path":"\\3.类型系统\\3.4.变异\\3.4.变异.html","body":"3.4.变异 虽然变异也在其它地方意义重大，但是它特别经常和类型参数一起出现，并像一个惊喜。此外，非常容易触发变异错误： While variance is also relevant in other places, it occurs particularly often with type parameters and comes as a surprise in this context. Additionally, it is very easy to trigger variance errors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Base  public function new ()    class Child extends Base   class Main  public static function main ()  var children = [ new Child ()]; // ArrayChild should be ArrayBase // Type parameters are invariant // Child should be Base var bases: Array Base = children;   显然，一个 Array 不能被分配到一个 Array，即使 Child可以被分配到Base。原因可能比较意外：因为 array 可以被写入，如通过它们的 push() 方法。忽略变异错误非常容易产生问题： Apparently,an Array cannot be assigned to an Array ,even though Child can be assigned to Base . The reason for this might be somewhat unexpected: It is not allowed because arrays can be written to, e.g. via their push() method. It is easy to generate problems by ignoring variance errors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Base  public function new ()    class Child extends Base   class OtherChild extends Base   class Main  public static function main ()  var children = [ new Child ()]; // subvert type checker var bases: Array Base = cast children; bases.push( new OtherChild ()); for (child in children)  trace (child);    这里我们使用 cast（第5.23节）破坏了类型检查，因此允许了注释行后的赋值。我们保存一个引用 bases 到原始的数组，类型为 Array。这使的推送另一个兼容Base的类型（OtherChild）到了数组。然而，我们原始的引用 children 仍然是 Array类型，当我们在迭代它的一个元素的时候遇到 OtherChild实例就会出现问题。 Here we subvert the type checker by using a cast (5.23), thus allowing the assignment after the commented line. With that we hold a reference bases to the original array, typed as Array . This allows pushing another type compatible with Base (OtherChild) onto that array. However,our original reference children is still of type Array and things go bad when we encounter the OtherChild instance in one of its elements while iterating. 如果 Array 没有 push() 方法，没有其它修改的手段，赋值则变得安全，因为没有矛盾的类型被添加到它。在Haxe中，我们可以使用结构子类型化（第3.5.2节）相应的限制类型来实现这个。 If Array had no push() method and no other means of modiﬁcation,the assignment would be safe because no incompatible type could be added to it. In Haxe, we can achieve this by restricting the type accordingly using structural subtyping (3.5.2): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Base  public function new ()    class Child extends Base   typedef MyArrayT =  public function pop (): T ;  class Main  public static function main ()  var a = [ new Child ()]; var b: MyArray Base = a;   我们可以安全的分配 b 作为 MyArray类型，MyArray 只有一个 pop() 方法。没有为 MyArray定义可以用来添加冲突类型的方法，因此被认为是协变的。 We can safely assign with b being typed as MyArray and MyArray only having a pop() method. There is no method deﬁned on MyArray which could be used to add incompatible types, it is thus said to be covariant. 协变 定义：协变 一种复合类型，如果它的组成类型可以被分配为缺少特定组件，如它们是只读，不允许写时，则被认为是协变的。 [warning] Deﬁnition: Covariance A compound type is considered covariant if its component types can be assigned to less speciﬁc components, i.e. if they are only read, but never written. 定义：抗变性 一个复合类型，如果它的组件类型可以被分配得为缺少通用的组件，如它们只写，但是不读，则被认为是抗变。 [warning] Deﬁnition: Contravariance A compound type is considered contravariant if its component types can be assigned to less generic components, i.e. if they are only written, but never read."},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{"title":"3.4.&#x53D8;&#x5F02;","path":"\\3.类型系统\\3.4.变异\\3.4.变异.html#3-4-变异","body":"&#x867D;&#x7136;&#x53D8;&#x5F02;&#x4E5F;&#x5728;&#x5176;&#x5B83;&#x5730;&#x65B9;&#x610F;&#x4E49;&#x91CD;&#x5927;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x7279;&#x522B;&#x7ECF;&#x5E38;&#x548C;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x4E00;&#x8D77;&#x51FA;&#x73B0;&#xFF0C;&#x5E76;&#x50CF;&#x4E00;&#x4E2A;&#x60CA;&#x559C;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x89E6;&#x53D1;&#x53D8;&#x5F02;&#x9519;&#x8BEF;&#xFF1A; While variance is also relevant in other places, it occurs particularly often with type parameters and comes as a surprise in this context. Additionally, it is very easy to trigger variance errors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Base { public function new () { } } class Child extends Base { } class Main { public static function main () { var children = [ new Child ()]; // ArrayChild should be ArrayBase // Type parameters are invariant // Child should be Base var bases: Array Base = children; } } &#x663E;&#x7136;&#xFF0C;&#x4E00;&#x4E2A; Array &#x4E0D;&#x80FD;&#x88AB;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A; Array&#xFF0C;&#x5373;&#x4F7F; Child&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230;Base&#x3002;&#x539F;&#x56E0;&#x53EF;&#x80FD;&#x6BD4;&#x8F83;&#x610F;&#x5916;&#xFF1A;&#x56E0;&#x4E3A; array &#x53EF;&#x4EE5;&#x88AB;&#x5199;&#x5165;&#xFF0C;&#x5982;&#x901A;&#x8FC7;&#x5B83;&#x4EEC;&#x7684; push() &#x65B9;&#x6CD5;&#x3002;&#x5FFD;&#x7565;&#x53D8;&#x5F02;&#x9519;&#x8BEF;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x4EA7;&#x751F;&#x95EE;&#x9898;&#xFF1A; Apparently,an Array cannot be assigned to an Array ,even though Child can be assigned to Base . The reason for this might be somewhat unexpected: It is not allowed because arrays can be written to, e.g. via their push() method. It is easy to generate problems by ignoring variance errors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Base { public function new () { } } class Child extends Base { } class OtherChild extends Base { } class Main { public static function main () { var children = [ new Child ()]; // subvert type checker var bases: Array Base = cast children; bases.push( new OtherChild ()); for (child in children) { trace (child); } } } &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x4F7F;&#x7528; cast&#xFF08;&#x7B2C;5.23&#x8282;&#xFF09;&#x7834;&#x574F;&#x4E86;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#xFF0C;&#x56E0;&#x6B64;&#x5141;&#x8BB8;&#x4E86;&#x6CE8;&#x91CA;&#x884C;&#x540E;&#x7684;&#x8D4B;&#x503C;&#x3002;&#x6211;&#x4EEC;&#x4FDD;&#x5B58;&#x4E00;&#x4E2A;&#x5F15;&#x7528; bases &#x5230;&#x539F;&#x59CB;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x7C7B;&#x578B;&#x4E3A; Array&#x3002;&#x8FD9;&#x4F7F;&#x7684;&#x63A8;&#x9001;&#x53E6;&#x4E00;&#x4E2A;&#x517C;&#x5BB9;Base&#x7684;&#x7C7B;&#x578B;&#xFF08;OtherChild&#xFF09;&#x5230;&#x4E86;&#x6570;&#x7EC4;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x6211;&#x4EEC;&#x539F;&#x59CB;&#x7684;&#x5F15;&#x7528; children &#x4ECD;&#x7136;&#x662F; Array&#x7C7B;&#x578B;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x5728;&#x8FED;&#x4EE3;&#x5B83;&#x7684;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x65F6;&#x5019;&#x9047;&#x5230; OtherChild&#x5B9E;&#x4F8B;&#x5C31;&#x4F1A;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x3002; Here we subvert the type checker by using a cast (5.23), thus allowing the assignment after the commented line. With that we hold a reference bases to the original array, typed as Array . This allows pushing another type compatible with Base (OtherChild) onto that array. However,our original reference children is still of type Array and things go bad when we encounter the OtherChild instance in one of its elements while iterating. &#x5982;&#x679C; Array &#x6CA1;&#x6709; push() &#x65B9;&#x6CD5;&#xFF0C;&#x6CA1;&#x6709;&#x5176;&#x5B83;&#x4FEE;&#x6539;&#x7684;&#x624B;&#x6BB5;&#xFF0C;&#x8D4B;&#x503C;&#x5219;&#x53D8;&#x5F97;&#x5B89;&#x5168;&#xFF0C;&#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x77DB;&#x76FE;&#x7684;&#x7C7B;&#x578B;&#x88AB;&#x6DFB;&#x52A0;&#x5230;&#x5B83;&#x3002;&#x5728;Haxe&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316;&#xFF08;&#x7B2C;3.5.2&#x8282;&#xFF09;&#x76F8;&#x5E94;&#x7684;&#x9650;&#x5236;&#x7C7B;&#x578B;&#x6765;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x3002; If Array had no push() method and no other means of modi&#xFB01;cation,the assignment would be safe because no incompatible type could be added to it. In Haxe, we can achieve this by restricting the type accordingly using structural subtyping (3.5.2): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Base { public function new () { } } class Child extends Base { } typedef MyArrayT = { public function pop (): T ; } class Main { public static function main () { var a = [ new Child ()]; var b: MyArray Base = a; } } &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5B89;&#x5168;&#x7684;&#x5206;&#x914D; b &#x4F5C;&#x4E3A; MyArray&#x7C7B;&#x578B;&#xFF0C;MyArray &#x53EA;&#x6709;&#x4E00;&#x4E2A; pop() &#x65B9;&#x6CD5;&#x3002;&#x6CA1;&#x6709;&#x4E3A; MyArray&#x5B9A;&#x4E49;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x6DFB;&#x52A0;&#x51B2;&#x7A81;&#x7C7B;&#x578B;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x534F;&#x53D8;&#x7684;&#x3002; We can safely assign with b being typed as MyArray and MyArray only having a pop() method. There is no method de&#xFB01;ned on MyArray which could be used to add incompatible types, it is thus said to be covariant. &#x534F;&#x53D8; &#x5B9A;&#x4E49;&#xFF1A;&#x534F;&#x53D8; &#x4E00;&#x79CD;&#x590D;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x5B83;&#x7684;&#x7EC4;&#x6210;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x4E3A;&#x7F3A;&#x5C11;&#x7279;&#x5B9A;&#x7EC4;&#x4EF6;&#xFF0C;&#x5982;&#x5B83;&#x4EEC;&#x662F;&#x53EA;&#x8BFB;&#xFF0C;&#x4E0D;&#x5141;&#x8BB8;&#x5199;&#x65F6;&#xFF0C;&#x5219;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x534F;&#x53D8;&#x7684;&#x3002; [warning] De&#xFB01;nition: Covariance A compound type is considered covariant if its component types can be assigned to less speci&#xFB01;c components, i.e. if they are only read, but never written. &#x5B9A;&#x4E49;&#xFF1A;&#x6297;&#x53D8;&#x6027; &#x4E00;&#x4E2A;&#x590D;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x5B83;&#x7684;&#x7EC4;&#x4EF6;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5F97;&#x4E3A;&#x7F3A;&#x5C11;&#x901A;&#x7528;&#x7684;&#x7EC4;&#x4EF6;&#xFF0C;&#x5982;&#x5B83;&#x4EEC;&#x53EA;&#x5199;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x8BFB;&#xFF0C;&#x5219;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x6297;&#x53D8;&#x3002; [warning] De&#xFB01;nition: Contravariance A compound type is considered contravariant if its component types can be assigned to less generic components, i.e. if they are only written, but never read."},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.2.结构子类型.html","body":"3.5.2.结构子类型 定义：结构子类型化 结构子类型化定义了具有相同结构的类型之间的一种隐式关系。 [warning] Deﬁnition: Structural Subtyping Structural subtyping deﬁnes an implicit relation between types that have the same structure. Haxe中当以下情况发生时允许结构子类型化： 一个类（第2.3节）统一为 一个结构（第2.5节）时， 一个结构 统一为 另外一个结构时 Structural sub-typing in Haxe is allowed when unifying a class (2.3) with a structure (2.5) and a structure with another structure. 以下的例子是 Haxe 标准库中 Lambda 类的一部分： The following example is part of the Lambda class of the Haxe Standard Library : 1 2 3 public static function emptyT(it : IterableT):Bool  return !it.iterator().hasNext();  empty 方法用于检查一个 Iterable （可迭代的）是含否有元素。为了达到这个目的，我们除了知道参数是一个 Iterable 之外并不需要知道该参数的具体类型。这使得我们可以通过传递一个可被统一为 IterableT 的任意类型的参数来调用 empty 方法，Haxe 标准库中的许多类型都满足这一要求。 The empty-method checks if an Iterable has an element. For this purpose, it is not necessary to know anything about the argument type other than the fact that it is considered an iterable. This allows calling the empty-method with any type that uniﬁes with Iterable which applies to a lot of types in the Haxe Standard Library. 尽管这样的类型化非常方便，但是大量地使用可能影响静态目标语言的性能，在性能影响（第2.5.4节）部分有介绍。 This kind of typing can be very convenient but extensive use may be detrimental to performance on static targets, which is detailed in Impact on Performance (Section 2.5.4)."},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{"title":"3.5.2.&#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.2.结构子类型.html#3-5-2-结构子类型","body":"&#x5B9A;&#x4E49;&#xFF1A;&#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316; &#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316;&#x5B9A;&#x4E49;&#x4E86;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7ED3;&#x6784;&#x7684;&#x7C7B;&#x578B;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x79CD;&#x9690;&#x5F0F;&#x5173;&#x7CFB;&#x3002; [warning] De&#xFB01;nition: Structural Subtyping Structural subtyping de&#xFB01;nes an implicit relation between types that have the same structure. Haxe&#x4E2D;&#x5F53;&#x4EE5;&#x4E0B;&#x60C5;&#x51B5;&#x53D1;&#x751F;&#x65F6;&#x5141;&#x8BB8;&#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316;&#xFF1A; &#x4E00;&#x4E2A;&#x7C7B;&#xFF08;&#x7B2C;2.3&#x8282;&#xFF09;&#x7EDF;&#x4E00;&#x4E3A; &#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#xFF08;&#x7B2C;2.5&#x8282;&#xFF09;&#x65F6;&#xFF0C; &#x4E00;&#x4E2A;&#x7ED3;&#x6784; &#x7EDF;&#x4E00;&#x4E3A; &#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x65F6; Structural sub-typing in Haxe is allowed when unifying a class (2.3) with a structure (2.5) and a structure with another structure. &#x4EE5;&#x4E0B;&#x7684;&#x4F8B;&#x5B50;&#x662F; Haxe &#x6807;&#x51C6;&#x5E93;&#x4E2D; Lambda &#x7C7B;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF1A; The following example is part of the Lambda class of the Haxe Standard Library : 1 2 3 public static function emptyT(it : IterableT):Bool { return !it.iterator().hasNext(); } empty &#x65B9;&#x6CD5;&#x7528;&#x4E8E;&#x68C0;&#x67E5;&#x4E00;&#x4E2A; Iterable &#xFF08;&#x53EF;&#x8FED;&#x4EE3;&#x7684;&#xFF09;&#x662F;&#x542B;&#x5426;&#x6709;&#x5143;&#x7D20;&#x3002;&#x4E3A;&#x4E86;&#x8FBE;&#x5230;&#x8FD9;&#x4E2A;&#x76EE;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x9664;&#x4E86;&#x77E5;&#x9053;&#x53C2;&#x6570;&#x662F;&#x4E00;&#x4E2A; Iterable &#x4E4B;&#x5916;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x77E5;&#x9053;&#x8BE5;&#x53C2;&#x6570;&#x7684;&#x5177;&#x4F53;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x4F7F;&#x5F97;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F20;&#x9012;&#x4E00;&#x4E2A;&#x53EF;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A; IterableT &#x7684;&#x4EFB;&#x610F;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x6765;&#x8C03;&#x7528; empty &#x65B9;&#x6CD5;&#xFF0C;Haxe &#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684;&#x8BB8;&#x591A;&#x7C7B;&#x578B;&#x90FD;&#x6EE1;&#x8DB3;&#x8FD9;&#x4E00;&#x8981;&#x6C42;&#x3002; The empty-method checks if an Iterable has an element. For this purpose, it is not necessary to know anything about the argument type other than the fact that it is considered an iterable. This allows calling the empty-method with any type that uni&#xFB01;es with Iterable which applies to a lot of types in the Haxe Standard Library. &#x5C3D;&#x7BA1;&#x8FD9;&#x6837;&#x7684;&#x7C7B;&#x578B;&#x5316;&#x975E;&#x5E38;&#x65B9;&#x4FBF;&#xFF0C;&#x4F46;&#x662F;&#x5927;&#x91CF;&#x5730;&#x4F7F;&#x7528;&#x53EF;&#x80FD;&#x5F71;&#x54CD;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x6027;&#x80FD;&#xFF0C;&#x5728;&#x6027;&#x80FD;&#x5F71;&#x54CD;&#xFF08;&#x7B2C;2.5.4&#x8282;&#xFF09;&#x90E8;&#x5206;&#x6709;&#x4ECB;&#x7ECD;&#x3002; This kind of typing can be very convenient but extensive use may be detrimental to performance on static targets, which is detailed in Impact on Performance (Section 2.5.4)."},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.3.单形.html","body":"3.5.3.单形 一个 是/含有 单形（第2.9节）的类型的一致性检查行为在类型推断（第3.6节）中详述。 Uniﬁcation of types having or being a monomorph(2.9) is detailed in Type Inference(Section3.6)."},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{"title":"3.5.3.&#x5355;&#x5F62;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.3.单形.html#3-5-3-单形","body":"&#x4E00;&#x4E2A; &#x662F;/&#x542B;&#x6709; &#x5355;&#x5F62;&#xFF08;&#x7B2C;2.9&#x8282;&#xFF09;&#x7684;&#x7C7B;&#x578B;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x884C;&#x4E3A;&#x5728;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09;&#x4E2D;&#x8BE6;&#x8FF0;&#x3002; Uni&#xFB01;cation of types having or being a monomorph(2.9) is detailed in Type Inference(Section3.6)."},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.4.函数返回.html","body":"3.5.4.函数返回 函数返回类型的一致性检查可能涉及 Void 类型（第2.1.5），因此需要对何种类型可以被统一为 Void 类型给出一个明确的定义。由于 Void 用于描述一个类型的缺省，因此它不能被分配到其他任何类型上，即使是 Dynamic 类型也不行 。这意味着如果一个函数显式声明其返回类型为 Dynamic ，它便不能返回 Void 。 Uniﬁcation of function return types may involve the Void-type (2.1.5) and requires a clear deﬁnition of what uniﬁes with Void. With Void describing the absence of a type,it is not assignable to any other type, not even Dynamic. This means that if a function is explicitly declared as returning Dynamic, it cannot return Void. 反之也一样：如果一个函数声明其返回类型为 Void ，那么它便不能返回 Dynamic 或者其他任何类型。但是这个方向上的一致性检查在函数类型的赋值操作上是被允许的： The opposite applies as well: If a function declares a return type of Void, it cannot return Dynamic or any other type. However, this direction of uniﬁcation is allowed when assigning function types: 1 var func: Void-Void = function () return \"foo\" ; rvalue 函数显然是 Void-String 类型的，但我们可以把它分配给 Void-Void 类型的变量 func 。这是因为编译器此时可以安全地假定 func 的返回类型是无关的，鉴于它不能被分配给任何 非 Void 类型。 The right-hand function clearly is of type Void-String,yet we can assign it to the variable func of type Void-Void. This is because the compiler can safely assume that the return type is irrelevant, given that it could not be assigned to any non-Void type. 补充： 1 2 var func: Void - Void = function () return 'str' ; $type(func); //此时 func 的类型依然是 Void - Void ，因此调用表达式 func() 会得到 Void 返回"},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{"title":"3.5.4.&#x51FD;&#x6570;&#x8FD4;&#x56DE;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.4.函数返回.html#3-5-4-函数返回","body":"&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x53EF;&#x80FD;&#x6D89;&#x53CA; Void &#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.1.5&#xFF09;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5BF9;&#x4F55;&#x79CD;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A; Void &#x7C7B;&#x578B;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x660E;&#x786E;&#x7684;&#x5B9A;&#x4E49;&#x3002;&#x7531;&#x4E8E; Void &#x7528;&#x4E8E;&#x63CF;&#x8FF0;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x7684;&#x7F3A;&#x7701;&#xFF0C;&#x56E0;&#x6B64;&#x5B83;&#x4E0D;&#x80FD;&#x88AB;&#x5206;&#x914D;&#x5230;&#x5176;&#x4ED6;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x4E0A;&#xFF0C;&#x5373;&#x4F7F;&#x662F; Dynamic &#x7C7B;&#x578B;&#x4E5F;&#x4E0D;&#x884C; &#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x663E;&#x5F0F;&#x58F0;&#x660E;&#x5176;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4E3A; Dynamic &#xFF0C;&#x5B83;&#x4FBF;&#x4E0D;&#x80FD;&#x8FD4;&#x56DE; Void &#x3002; Uni&#xFB01;cation of function return types may involve the Void-type (2.1.5) and requires a clear de&#xFB01;nition of what uni&#xFB01;es with Void. With Void describing the absence of a type,it is not assignable to any other type, not even Dynamic. This means that if a function is explicitly declared as returning Dynamic, it cannot return Void. &#x53CD;&#x4E4B;&#x4E5F;&#x4E00;&#x6837;&#xFF1A;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x58F0;&#x660E;&#x5176;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4E3A; Void &#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x4FBF;&#x4E0D;&#x80FD;&#x8FD4;&#x56DE; Dynamic &#x6216;&#x8005;&#x5176;&#x4ED6;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x65B9;&#x5411;&#x4E0A;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x5728;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x7684;&#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#x4E0A;&#x662F;&#x88AB;&#x5141;&#x8BB8;&#x7684;&#xFF1A; The opposite applies as well: If a function declares a return type of Void, it cannot return Dynamic or any other type. However, this direction of uni&#xFB01;cation is allowed when assigning function types: 1 var func: Void-Void = function () return foo ; rvalue &#x51FD;&#x6570;&#x663E;&#x7136;&#x662F; Void-String &#x7C7B;&#x578B;&#x7684;&#xFF0C;&#x4F46;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x5B83;&#x5206;&#x914D;&#x7ED9; Void-Void &#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF; func &#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x7F16;&#x8BD1;&#x5668;&#x6B64;&#x65F6;&#x53EF;&#x4EE5;&#x5B89;&#x5168;&#x5730;&#x5047;&#x5B9A; func &#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x662F;&#x65E0;&#x5173;&#x7684;&#xFF0C;&#x9274;&#x4E8E;&#x5B83;&#x4E0D;&#x80FD;&#x88AB;&#x5206;&#x914D;&#x7ED9;&#x4EFB;&#x4F55; &#x975E; Void &#x7C7B;&#x578B;&#x3002; The right-hand function clearly is of type Void-String,yet we can assign it to the variable func of type Void-Void. This is because the compiler can safely assume that the return type is irrelevant, given that it could not be assigned to any non-Void type. &#x8865;&#x5145;&#xFF1A; 1 2 var func: Void - Void = function () return &apos;str&apos; ; $type(func); //&#x6B64;&#x65F6; func &#x7684;&#x7C7B;&#x578B;&#x4F9D;&#x7136;&#x662F; Void - Void &#xFF0C;&#x56E0;&#x6B64;&#x8C03;&#x7528;&#x8868;&#x8FBE;&#x5F0F; func() &#x4F1A;&#x5F97;&#x5230; Void &#x8FD4;&#x56DE;"},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.5.通用基本类型.html","body":"3.5.5.通用基本类型 给定一组多种类型，这组类型中的所有类型会被统一为一个通用基本类型： Given a set of multiple types,a common base type is a type which all types of the set unify against: 1 2 3 4 5 6 7 8 9 10 11 12 13 class Base  public function new ()    class Child1 extends Base   class Child2 extends Base   class Main  static public function main ()  var a = [ new Child1 (), new Child2 ()]; $type(a); // ArrayBase   虽然 Base 没有被提及，Haxe编译器也能推断它为 Chid1 和 Child2 的通用类型 。Haxe编译器在以下情况下执行此类一致性检查： 数组声明 if / else switch 的各个 case 分支中 Although Base is not mentioned, the Haxe Compiler manages to infer it as the common type of Child1 and Child2. The Haxe Compiler employs this kind of uniﬁcation in the following situations: array declarations if/else cases of a switch"},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{"title":"3.5.5.&#x901A;&#x7528;&#x57FA;&#x672C;&#x7C7B;&#x578B;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.5.通用基本类型.html#3-5-5-通用基本类型","body":"&#x7ED9;&#x5B9A;&#x4E00;&#x7EC4;&#x591A;&#x79CD;&#x7C7B;&#x578B;&#xFF0C;&#x8FD9;&#x7EC4;&#x7C7B;&#x578B;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x7C7B;&#x578B;&#x4F1A;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#xFF1A; Given a set of multiple types,a common base type is a type which all types of the set unify against: 1 2 3 4 5 6 7 8 9 10 11 12 13 class Base { public function new () { } } class Child1 extends Base { } class Child2 extends Base { } class Main { static public function main () { var a = [ new Child1 (), new Child2 ()]; $type(a); // ArrayBase } } &#x867D;&#x7136; Base &#x6CA1;&#x6709;&#x88AB;&#x63D0;&#x53CA;&#xFF0C;Haxe&#x7F16;&#x8BD1;&#x5668;&#x4E5F;&#x80FD;&#x63A8;&#x65AD;&#x5B83;&#x4E3A; Chid1 &#x548C; Child2 &#x7684;&#x901A;&#x7528;&#x7C7B;&#x578B; &#x3002;Haxe&#x7F16;&#x8BD1;&#x5668;&#x5728;&#x4EE5;&#x4E0B;&#x60C5;&#x51B5;&#x4E0B;&#x6267;&#x884C;&#x6B64;&#x7C7B;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#xFF1A; &#x6570;&#x7EC4;&#x58F0;&#x660E; if / else switch &#x7684;&#x5404;&#x4E2A; case &#x5206;&#x652F;&#x4E2D; Although Base is not mentioned, the Haxe Compiler manages to infer it as the common type of Child1 and Child2. The Haxe Compiler employs this kind of uni&#xFB01;cation in the following situations: array declarations if/else cases of a switch"},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.一致性检查.html","body":"3.5.一致性检查 一致性检查 是 Haxe 类型系统的核心，其为Haxe程序极大地提升了健壮性（或称鲁棒性）。它描述了某一个类型与另一个类型是否兼容的过程。 Uniﬁcation is the heart of the type system and contributes immensely to the robustness of Haxe programs. It describes the process of checking if a type is compatible to another type. 一致性检查 定义：一致性 类型A 与类型 B 之间的一致性检查是一个定向过程，它会回答一个问题：A 是否可以被赋值给 B。当两者中有一个 是/含有 单形（monomorph) (2.9) 时，其类型将在一致性检查过程中产生畸变（mutate） [warning] Deﬁnition: Uniﬁcation Uniﬁcation between two types A and B is a directional process which answers the question if A can be assigned to B. It may mutate either type if it is or has a monomorph (2.9). 一致性错误非常容易被触发： Uniﬁcation errors are very easy to trigger: 1 2 3 4 5 6 class Main  static public function main ()  // Int should be String var s: String = 1 ;   当我们尝试分配一个 Int 类型的值给一个 String 类型变量时，会导致编译器尝试 把 Int 统一为 String 。当然，这是不允许的并且会使编译器发出一个错误 “Int should be String”。 We try to assign a value of type Int to a variable of type String, which causes the compiler to try and unify Int with String. This is, of course, not allowed and makes the compiler emit the error Int should be String. 在这个特殊的例子中，一致性检查在 赋值 操作时被触发，前文中的 “…是否可以被赋值给…” 的定义在此例中很直观，但这只是会执行一致性检查的其中一例： In this particular case, the uniﬁcation is triggered by an assignment, a context in which the “is assignable to” deﬁnition is intuitive. It is one of several cases where uniﬁcation is performed: 赋值 ：如果 a 被分配给 b，类型 a 会统一为 类型 b 。 Assignment : If a is assigned to b , the type of a is uniﬁed with the type of b . 函数调用 ：我们在介绍 函数类型 时已经看过一个简要的例子了。通常，编译器会尝试把第一个实际参数的类型统一为第一个形式参数的类型、把第二个实际参数类型统一为第二个形式参数的类型…以此类推。 Function call : We have brieﬂy seen this one while introducing thefunction(2.6)type. In general, the compiler tries to unify the ﬁrst given argument type with the ﬁrst expected argument type, the second given argument type with the second expected argument type and so on until all argument types are handled. 函数返回 ：不论函数何时出现 return e 表达式， e 的类型都会被统一为函数的返回类型。如果函数没有显式地声明返回类型，则返回类型会被推断为 e 的类型 且 随后的 return 表达式都会以该类型进行推断。 Function return : Whenever a function hasa return e expression, thetypeof e is uniﬁed with the function return type. If the function has no explicit return type,it is inferred to the type of e and subsequent return expressions are inferred against it. 数组声明 ：编译器会尝试在一个数组声明的所有给定的类型中寻找一个最小化类型。请参阅 通用基本类型（第3.5.5节）了解更多细节。 Array declaration: The compiler tries to ﬁnd a minimal type between all given types in an array declaration. Refer to Common Base Type (Section 3.5.5) for details. 对象声明 ：如果一个对象被分配了一个与声明时所不同的类型，那么编译器会把所有给定类型的字段的类型统一为期望类型的字段的类型。 Object declaration : If an object is declared “against” a given type, the compiler uniﬁes each given ﬁeld type with each expected ﬁeld type. 操作符一致性检查 ：某一操作符会期望作用于某一种类型上，当操作符作用于某一类型时该类型会被统一为操作符期望的类型，比如，表达式 a &amp;&amp; b 会把 a 和 b 都统一为 Bool 类型， 而表达式 a == b 会把 a 统一为 b 。 Operator uniﬁcation : Certain operators expect certain types which the given types are uniﬁed against. For instance, the expression a &amp;&amp; b uniﬁes both a and b with Bool and the expression a == b uniﬁes a with b."},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{"title":"3.5.&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.一致性检查.html#3-5-一致性检查","body":"&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5; &#x662F; Haxe &#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x7684;&#x6838;&#x5FC3;&#xFF0C;&#x5176;&#x4E3A;Haxe&#x7A0B;&#x5E8F;&#x6781;&#x5927;&#x5730;&#x63D0;&#x5347;&#x4E86;&#x5065;&#x58EE;&#x6027;&#xFF08;&#x6216;&#x79F0;&#x9C81;&#x68D2;&#x6027;&#xFF09;&#x3002;&#x5B83;&#x63CF;&#x8FF0;&#x4E86;&#x67D0;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x4E0E;&#x53E6;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x662F;&#x5426;&#x517C;&#x5BB9;&#x7684;&#x8FC7;&#x7A0B;&#x3002; Uni&#xFB01;cation is the heart of the type system and contributes immensely to the robustness of Haxe programs. It describes the process of checking if a type is compatible to another type. &#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5; &#x5B9A;&#x4E49;&#xFF1A;&#x4E00;&#x81F4;&#x6027; &#x7C7B;&#x578B;A &#x4E0E;&#x7C7B;&#x578B; B &#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x662F;&#x4E00;&#x4E2A;&#x5B9A;&#x5411;&#x8FC7;&#x7A0B;&#xFF0C;&#x5B83;&#x4F1A;&#x56DE;&#x7B54;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;A &#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB;&#x8D4B;&#x503C;&#x7ED9; B&#x3002;&#x5F53;&#x4E24;&#x8005;&#x4E2D;&#x6709;&#x4E00;&#x4E2A; &#x662F;/&#x542B;&#x6709; &#x5355;&#x5F62;&#xFF08;monomorph) (2.9) &#x65F6;&#xFF0C;&#x5176;&#x7C7B;&#x578B;&#x5C06;&#x5728;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x8FC7;&#x7A0B;&#x4E2D;&#x4EA7;&#x751F;&#x7578;&#x53D8;&#xFF08;mutate&#xFF09; [warning] De&#xFB01;nition: Uni&#xFB01;cation Uni&#xFB01;cation between two types A and B is a directional process which answers the question if A can be assigned to B. It may mutate either type if it is or has a monomorph (2.9). &#x4E00;&#x81F4;&#x6027;&#x9519;&#x8BEF;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x88AB;&#x89E6;&#x53D1;&#xFF1A; Uni&#xFB01;cation errors are very easy to trigger: 1 2 3 4 5 6 class Main { static public function main () { // Int should be String var s: String = 1 ; } } &#x5F53;&#x6211;&#x4EEC;&#x5C1D;&#x8BD5;&#x5206;&#x914D;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684;&#x503C;&#x7ED9;&#x4E00;&#x4E2A; String &#x7C7B;&#x578B;&#x53D8;&#x91CF;&#x65F6;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x7F16;&#x8BD1;&#x5668;&#x5C1D;&#x8BD5; &#x628A; Int &#x7EDF;&#x4E00;&#x4E3A; String &#x3002;&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x662F;&#x4E0D;&#x5141;&#x8BB8;&#x7684;&#x5E76;&#x4E14;&#x4F1A;&#x4F7F;&#x7F16;&#x8BD1;&#x5668;&#x53D1;&#x51FA;&#x4E00;&#x4E2A;&#x9519;&#x8BEF; &#x201C;Int should be String&#x201D;&#x3002; We try to assign a value of type Int to a variable of type String, which causes the compiler to try and unify Int with String. This is, of course, not allowed and makes the compiler emit the error Int should be String. &#x5728;&#x8FD9;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x5728; &#x8D4B;&#x503C; &#x64CD;&#x4F5C;&#x65F6;&#x88AB;&#x89E6;&#x53D1;&#xFF0C;&#x524D;&#x6587;&#x4E2D;&#x7684; &#x201C;&#x2026;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB;&#x8D4B;&#x503C;&#x7ED9;&#x2026;&#x201D; &#x7684;&#x5B9A;&#x4E49;&#x5728;&#x6B64;&#x4F8B;&#x4E2D;&#x5F88;&#x76F4;&#x89C2;&#xFF0C;&#x4F46;&#x8FD9;&#x53EA;&#x662F;&#x4F1A;&#x6267;&#x884C;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x7684;&#x5176;&#x4E2D;&#x4E00;&#x4F8B;&#xFF1A; In this particular case, the uni&#xFB01;cation is triggered by an assignment, a context in which the &#x201C;is assignable to&#x201D; de&#xFB01;nition is intuitive. It is one of several cases where uni&#xFB01;cation is performed: &#x8D4B;&#x503C; &#xFF1A;&#x5982;&#x679C; a &#x88AB;&#x5206;&#x914D;&#x7ED9; b&#xFF0C;&#x7C7B;&#x578B; a &#x4F1A;&#x7EDF;&#x4E00;&#x4E3A; &#x7C7B;&#x578B; b &#x3002; Assignment : If a is assigned to b , the type of a is uni&#xFB01;ed with the type of b . &#x51FD;&#x6570;&#x8C03;&#x7528; &#xFF1A;&#x6211;&#x4EEC;&#x5728;&#x4ECB;&#x7ECD; &#x51FD;&#x6570;&#x7C7B;&#x578B; &#x65F6;&#x5DF2;&#x7ECF;&#x770B;&#x8FC7;&#x4E00;&#x4E2A;&#x7B80;&#x8981;&#x7684;&#x4F8B;&#x5B50;&#x4E86;&#x3002;&#x901A;&#x5E38;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x5C1D;&#x8BD5;&#x628A;&#x7B2C;&#x4E00;&#x4E2A;&#x5B9E;&#x9645;&#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x5F62;&#x5F0F;&#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x3001;&#x628A;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B9E;&#x9645;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x4E3A;&#x7B2C;&#x4E8C;&#x4E2A;&#x5F62;&#x5F0F;&#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x2026;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x3002; Function call : We have brie&#xFB02;y seen this one while introducing thefunction(2.6)type. In general, the compiler tries to unify the &#xFB01;rst given argument type with the &#xFB01;rst expected argument type, the second given argument type with the second expected argument type and so on until all argument types are handled. &#x51FD;&#x6570;&#x8FD4;&#x56DE; &#xFF1A;&#x4E0D;&#x8BBA;&#x51FD;&#x6570;&#x4F55;&#x65F6;&#x51FA;&#x73B0; return e &#x8868;&#x8FBE;&#x5F0F;&#xFF0C; e &#x7684;&#x7C7B;&#x578B;&#x90FD;&#x4F1A;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x3002;&#x5982;&#x679C;&#x51FD;&#x6570;&#x6CA1;&#x6709;&#x663E;&#x5F0F;&#x5730;&#x58F0;&#x660E;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4F1A;&#x88AB;&#x63A8;&#x65AD;&#x4E3A; e &#x7684;&#x7C7B;&#x578B; &#x4E14; &#x968F;&#x540E;&#x7684; return &#x8868;&#x8FBE;&#x5F0F;&#x90FD;&#x4F1A;&#x4EE5;&#x8BE5;&#x7C7B;&#x578B;&#x8FDB;&#x884C;&#x63A8;&#x65AD;&#x3002; Function return : Whenever a function hasa return e expression, thetypeof e is uni&#xFB01;ed with the function return type. If the function has no explicit return type,it is inferred to the type of e and subsequent return expressions are inferred against it. &#x6570;&#x7EC4;&#x58F0;&#x660E; &#xFF1A;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x5C1D;&#x8BD5;&#x5728;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x58F0;&#x660E;&#x7684;&#x6240;&#x6709;&#x7ED9;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#x4E2D;&#x5BFB;&#x627E;&#x4E00;&#x4E2A;&#x6700;&#x5C0F;&#x5316;&#x7C7B;&#x578B;&#x3002;&#x8BF7;&#x53C2;&#x9605; &#x901A;&#x7528;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.5.5&#x8282;&#xFF09;&#x4E86;&#x89E3;&#x66F4;&#x591A;&#x7EC6;&#x8282;&#x3002; Array declaration: The compiler tries to &#xFB01;nd a minimal type between all given types in an array declaration. Refer to Common Base Type (Section 3.5.5) for details. &#x5BF9;&#x8C61;&#x58F0;&#x660E; &#xFF1A;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x88AB;&#x5206;&#x914D;&#x4E86;&#x4E00;&#x4E2A;&#x4E0E;&#x58F0;&#x660E;&#x65F6;&#x6240;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x90A3;&#x4E48;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x628A;&#x6240;&#x6709;&#x7ED9;&#x5B9A;&#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x7684;&#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x4E3A;&#x671F;&#x671B;&#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x7684;&#x7C7B;&#x578B;&#x3002; Object declaration : If an object is declared &#x201C;against&#x201D; a given type, the compiler uni&#xFB01;es each given &#xFB01;eld type with each expected &#xFB01;eld type. &#x64CD;&#x4F5C;&#x7B26;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5; &#xFF1A;&#x67D0;&#x4E00;&#x64CD;&#x4F5C;&#x7B26;&#x4F1A;&#x671F;&#x671B;&#x4F5C;&#x7528;&#x4E8E;&#x67D0;&#x4E00;&#x79CD;&#x7C7B;&#x578B;&#x4E0A;&#xFF0C;&#x5F53;&#x64CD;&#x4F5C;&#x7B26;&#x4F5C;&#x7528;&#x4E8E;&#x67D0;&#x4E00;&#x7C7B;&#x578B;&#x65F6;&#x8BE5;&#x7C7B;&#x578B;&#x4F1A;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x64CD;&#x4F5C;&#x7B26;&#x671F;&#x671B;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x6BD4;&#x5982;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F; a &amp;&amp; b &#x4F1A;&#x628A; a &#x548C; b &#x90FD;&#x7EDF;&#x4E00;&#x4E3A; Bool &#x7C7B;&#x578B;&#xFF0C; &#x800C;&#x8868;&#x8FBE;&#x5F0F; a == b &#x4F1A;&#x628A; a &#x7EDF;&#x4E00;&#x4E3A; b &#x3002; Operator uni&#xFB01;cation : Certain operators expect certain types which the given types are uni&#xFB01;ed against. For instance, the expression a &amp;&amp; b uni&#xFB01;es both a and b with Bool and the expression a == b uni&#xFB01;es a with b."},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{"title":"","path":"\\3.类型系统\\3.6.类型推断\\3.6.1.由上而下推断.html","body":"3.6.1.由上而下推断 大多数时候，类型自己被推断，然后可以被统一为一个预期的类型。然而在一些地方，一个预期的类型可能被用来影响推断。然后我们讨论自上而下的推断。 Most of the time,types are inferred on their own and may then be uniﬁed with an expected type. In a few places,however,an expected type may be used to inﬂuence inference. We then speak of top-down inference. 预期类型 定义：预期类型 预期的类型在表达式的类型在它被类型化之前已知的时候出现，例如，因为表达式被看作一个函数调用。它们可以影响这个表达式的类型化，通过所谓的自上而下推断（第3.6.1节）。 [warning] Deﬁnition: Expected Type Expected types occur when the type of an expression is known before that expression has been typed, e.g. because the expression is argument to a function call. They can inﬂuence typing of that expression through what is called top-down inference (3.6.1). 一个很好的例子是混合类型的数组。如在 Dynamic（第2.7节）中提到的，编译器拒绝[1,”foo”]因为它不能确定元素的类型。使用自上而下的推断，这个问题可以被克服： A good example are arrays of mixed types. As mentioned in Dynamic (Section 2.7), the compiler refuses [1, “foo”] because it cannot determine an element type. Employing top-down inference, this can be overcome: 1 2 3 4 5 class Main  static public function main ()  var a: Array  Dynamic  = [ 1 , \"foo\" ];   这里，编译器知道当类型化 [1,”foo”]，预期的类型是 Array，所以元素类型是 Dynamic 。和通常的合一行为不同，编译器会尝试（并失败）去确定一个通用类型（第3.5.5节），个别的元素不利于类型化会被统一为 Dynamic。 Here,the compiler knows while typing [1, “foo”] that the expected type is Array, so the element type is Dynamic. Instead of the usual uniﬁcation behavior where the compiler would attempt (and fail) to determine a common base type (3.5.5), the individual elements are typed against and uniﬁed with Dynamic. 在构建泛型类型参数（第3.3.1节）被引入的时候，我们看到了另一个自上而下推断的有趣用法 We have seen another interesting use of top-down inference when construction of generic type parameters (3.3.1) was introduced: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 typedef Constructible =  public function new (s: String ): Void ;  class Main  static public function main ()  var s: String = make(); var t: haxe .Template = make();  @:generic static function makeT:Constructible():T  return new T ( \"foo\" );   显式的类型 String是 被haxe.Template在这里使用的，来确定make的返回类型。这是因为方法调用为 make()，所以我们知道返回类型会分配到变量。利用这个信息，可以分别绑定 unknown 类型 T到 String和 haxe.Template 。 The explicit types String and haxe.Template are used here to determine the return type of make. This works because the method is invoked as make(),so we know the return type will be assigned to the variables. Utilizing this information, it is possible to bind the unknown type T to String and haxe.Template respectively.3.6.1.由上而下推断 大多数时候，类型自己被推断，然后可以被统一为一个预期的类型。然而在一些地方，一个预期的类型可能被用来影响推断。然后我们讨论自上而下的推断。 Most of the time,types are inferred on their own and may then be uniﬁed with an expected type. In a few places,however,an expected type may be used to inﬂuence inference. We then speak of top-down inference. 预期类型 定义：预期类型 预期的类型在表达式的类型在它被类型化之前已知的时候出现，例如，因为表达式被看作一个函数调用。它们可以影响这个表达式的类型化，通过所谓的自上而下推断（第3.6.1节）。 [warning] Deﬁnition: Expected Type Expected types occur when the type of an expression is known before that expression has been typed, e.g. because the expression is argument to a function call. They can inﬂuence typing of that expression through what is called top-down inference (3.6.1). 一个很好的例子是混合类型的数组。如在 Dynamic（第2.7节）中提到的，编译器拒绝[1,”foo”]因为它不能确定元素的类型。使用自上而下的推断，这个问题可以被克服： A good example are arrays of mixed types. As mentioned in Dynamic (Section 2.7), the compiler refuses [1, “foo”] because it cannot determine an element type. Employing top-down inference, this can be overcome: 1 2 3 4 5 6  class Main   static public function main ()   var a: Array  Dynamic  = [ 1 , \"foo\" ];      这里，编译器知道当类型化 [1,”foo”]，预期的类型是 Array，所以元素类型是 Dynamic 。和通常的合一行为不同，编译器会尝试（并失败）去确定一个通用类型（第3.5.5节），个别的元素不利于类型化会被统一为 Dynamic。 Here,the compiler knows while typing [1, “foo”] that the expected type is Array, so the element type is Dynamic. Instead of the usual uniﬁcation behavior where the compiler would attempt (and fail) to determine a common base type (3.5.5), the individual elements are typed against and uniﬁed with Dynamic. 在构建泛型类型参数（第3.3.1节）被引入的时候，我们看到了另一个自上而下推断的有趣用法 We have seen another interesting use of top-down inference when construction of generic type parameters (3.3.1) was introduced: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  typedef Constructible =   public function new (s: String ): Void ;     class Main   static public function main ()   var s: String = make();  var t: haxe .Template = make();     @:generic  static function makeT:Constructible():T   return new T ( \"foo\" );      显式的类型 String是 被haxe.Template在这里使用的，来确定make的返回类型。这是因为方法调用为 make()，所以我们知道返回类型会分配到变量。利用这个信息，可以分别绑定 unknown 类型 T到 String和 haxe.Template 。 The explicit types String and haxe.Template are used here to determine the return type of make. This works because the method is invoked as make(),so we know the return type will be assigned to the variables. Utilizing this information, it is possible to bind the unknown type T to String and haxe.Template respectively."},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{"title":"3.6.1.&#x7531;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD;","path":"\\3.类型系统\\3.6.类型推断\\3.6.1.由上而下推断.html#3-6-1-由上而下推断","body":"&#x5927;&#x591A;&#x6570;&#x65F6;&#x5019;&#xFF0C;&#x7C7B;&#x578B;&#x81EA;&#x5DF1;&#x88AB;&#x63A8;&#x65AD;&#xFF0C;&#x7136;&#x540E;&#x53EF;&#x4EE5;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x4E00;&#x4E2A;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x7136;&#x800C;&#x5728;&#x4E00;&#x4E9B;&#x5730;&#x65B9;&#xFF0C;&#x4E00;&#x4E2A;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x88AB;&#x7528;&#x6765;&#x5F71;&#x54CD;&#x63A8;&#x65AD;&#x3002;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x8BA8;&#x8BBA;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x7684;&#x63A8;&#x65AD;&#x3002; Most of the time,types are inferred on their own and may then be uni&#xFB01;ed with an expected type. In a few places,however,an expected type may be used to in&#xFB02;uence inference. We then speak of top-down inference. &#x9884;&#x671F;&#x7C7B;&#x578B; &#x5B9A;&#x4E49;&#xFF1A;&#x9884;&#x671F;&#x7C7B;&#x578B; &#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x5728;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5728;&#x5B83;&#x88AB;&#x7C7B;&#x578B;&#x5316;&#x4E4B;&#x524D;&#x5DF2;&#x77E5;&#x7684;&#x65F6;&#x5019;&#x51FA;&#x73B0;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x56E0;&#x4E3A;&#x8868;&#x8FBE;&#x5F0F;&#x88AB;&#x770B;&#x4F5C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x3002;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x5F71;&#x54CD;&#x8FD9;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5316;&#xFF0C;&#x901A;&#x8FC7;&#x6240;&#x8C13;&#x7684;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6.1&#x8282;&#xFF09;&#x3002; [warning] De&#xFB01;nition: Expected Type Expected types occur when the type of an expression is known before that expression has been typed, e.g. because the expression is argument to a function call. They can in&#xFB02;uence typing of that expression through what is called top-down inference (3.6.1). &#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x4F8B;&#x5B50;&#x662F;&#x6DF7;&#x5408;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x7EC4;&#x3002;&#x5982;&#x5728; Dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#x4E2D;&#x63D0;&#x5230;&#x7684;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x62D2;&#x7EDD;[1,&#x201D;foo&#x201D;]&#x56E0;&#x4E3A;&#x5B83;&#x4E0D;&#x80FD;&#x786E;&#x5B9A;&#x5143;&#x7D20;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x4F7F;&#x7528;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x7684;&#x63A8;&#x65AD;&#xFF0C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x88AB;&#x514B;&#x670D;&#xFF1A; A good example are arrays of mixed types. As mentioned in Dynamic (Section 2.7), the compiler refuses [1, &#x201C;foo&#x201D;] because it cannot determine an element type. Employing top-down inference, this can be overcome: 1 2 3 4 5 class Main { static public function main () { var a: Array  Dynamic  = [ 1 , foo ]; } } &#x8FD9;&#x91CC;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x77E5;&#x9053;&#x5F53;&#x7C7B;&#x578B;&#x5316; [1,&#x201D;foo&#x201D;]&#xFF0C;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x662F; Array&#xFF0C;&#x6240;&#x4EE5;&#x5143;&#x7D20;&#x7C7B;&#x578B;&#x662F; Dynamic &#x3002;&#x548C;&#x901A;&#x5E38;&#x7684;&#x5408;&#x4E00;&#x884C;&#x4E3A;&#x4E0D;&#x540C;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x5C1D;&#x8BD5;&#xFF08;&#x5E76;&#x5931;&#x8D25;&#xFF09;&#x53BB;&#x786E;&#x5B9A;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.5.5&#x8282;&#xFF09;&#xFF0C;&#x4E2A;&#x522B;&#x7684;&#x5143;&#x7D20;&#x4E0D;&#x5229;&#x4E8E;&#x7C7B;&#x578B;&#x5316;&#x4F1A;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A; Dynamic&#x3002; Here,the compiler knows while typing [1, &#x201C;foo&#x201D;] that the expected type is Array, so the element type is Dynamic. Instead of the usual uni&#xFB01;cation behavior where the compiler would attempt (and fail) to determine a common base type (3.5.5), the individual elements are typed against and uni&#xFB01;ed with Dynamic. &#x5728;&#x6784;&#x5EFA;&#x6CDB;&#x578B;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.3.1&#x8282;&#xFF09;&#x88AB;&#x5F15;&#x5165;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x4E86;&#x53E6;&#x4E00;&#x4E2A;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD;&#x7684;&#x6709;&#x8DA3;&#x7528;&#x6CD5; We have seen another interesting use of top-down inference when construction of generic type parameters (3.3.1) was introduced: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 typedef Constructible = { public function new (s: String ): Void ; } class Main { static public function main () { var s: String = make(); var t: haxe .Template = make(); } @:generic static function makeT:Constructible():T { return new T ( foo ); } } &#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B; String&#x662F; &#x88AB;haxe.Template&#x5728;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x6765;&#x786E;&#x5B9A;make&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x4E3A; make()&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4F1A;&#x5206;&#x914D;&#x5230;&#x53D8;&#x91CF;&#x3002;&#x5229;&#x7528;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#xFF0C;&#x53EF;&#x4EE5;&#x5206;&#x522B;&#x7ED1;&#x5B9A; unknown &#x7C7B;&#x578B; T&#x5230; String&#x548C; haxe.Template &#x3002; The explicit types String and haxe.Template are used here to determine the return type of make. This works because the method is invoked as make(),so we know the return type will be assigned to the variables. Utilizing this information, it is possible to bind the unknown type T to String and haxe.Template respectively.3.6.1.&#x7531;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD; &#x5927;&#x591A;&#x6570;&#x65F6;&#x5019;&#xFF0C;&#x7C7B;&#x578B;&#x81EA;&#x5DF1;&#x88AB;&#x63A8;&#x65AD;&#xFF0C;&#x7136;&#x540E;&#x53EF;&#x4EE5;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x4E00;&#x4E2A;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x7136;&#x800C;&#x5728;&#x4E00;&#x4E9B;&#x5730;&#x65B9;&#xFF0C;&#x4E00;&#x4E2A;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x88AB;&#x7528;&#x6765;&#x5F71;&#x54CD;&#x63A8;&#x65AD;&#x3002;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x8BA8;&#x8BBA;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x7684;&#x63A8;&#x65AD;&#x3002; Most of the time,types are inferred on their own and may then be uni&#xFB01;ed with an expected type. In a few places,however,an expected type may be used to in&#xFB02;uence inference. We then speak of top-down inference. &#x9884;&#x671F;&#x7C7B;&#x578B; &#x5B9A;&#x4E49;&#xFF1A;&#x9884;&#x671F;&#x7C7B;&#x578B; &#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x5728;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5728;&#x5B83;&#x88AB;&#x7C7B;&#x578B;&#x5316;&#x4E4B;&#x524D;&#x5DF2;&#x77E5;&#x7684;&#x65F6;&#x5019;&#x51FA;&#x73B0;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x56E0;&#x4E3A;&#x8868;&#x8FBE;&#x5F0F;&#x88AB;&#x770B;&#x4F5C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x3002;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x5F71;&#x54CD;&#x8FD9;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5316;&#xFF0C;&#x901A;&#x8FC7;&#x6240;&#x8C13;&#x7684;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6.1&#x8282;&#xFF09;&#x3002; [warning] De&#xFB01;nition: Expected Type Expected types occur when the type of an expression is known before that expression has been typed, e.g. because the expression is argument to a function call. They can in&#xFB02;uence typing of that expression through what is called top-down inference (3.6.1). &#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x4F8B;&#x5B50;&#x662F;&#x6DF7;&#x5408;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x7EC4;&#x3002;&#x5982;&#x5728; Dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#x4E2D;&#x63D0;&#x5230;&#x7684;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x62D2;&#x7EDD;[1,&#x201D;foo&#x201D;]&#x56E0;&#x4E3A;&#x5B83;&#x4E0D;&#x80FD;&#x786E;&#x5B9A;&#x5143;&#x7D20;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x4F7F;&#x7528;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x7684;&#x63A8;&#x65AD;&#xFF0C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x88AB;&#x514B;&#x670D;&#xFF1A; A good example are arrays of mixed types. As mentioned in Dynamic (Section 2.7), the compiler refuses [1, &#x201C;foo&#x201D;] because it cannot determine an element type. Employing top-down inference, this can be overcome: 1 2 3 4 5 6  class Main {  static public function main () {  var a: Array  Dynamic  = [ 1 , foo ];  }  }  &#x8FD9;&#x91CC;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x77E5;&#x9053;&#x5F53;&#x7C7B;&#x578B;&#x5316; [1,&#x201D;foo&#x201D;]&#xFF0C;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x662F; Array&#xFF0C;&#x6240;&#x4EE5;&#x5143;&#x7D20;&#x7C7B;&#x578B;&#x662F; Dynamic &#x3002;&#x548C;&#x901A;&#x5E38;&#x7684;&#x5408;&#x4E00;&#x884C;&#x4E3A;&#x4E0D;&#x540C;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x5C1D;&#x8BD5;&#xFF08;&#x5E76;&#x5931;&#x8D25;&#xFF09;&#x53BB;&#x786E;&#x5B9A;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.5.5&#x8282;&#xFF09;&#xFF0C;&#x4E2A;&#x522B;&#x7684;&#x5143;&#x7D20;&#x4E0D;&#x5229;&#x4E8E;&#x7C7B;&#x578B;&#x5316;&#x4F1A;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A; Dynamic&#x3002; Here,the compiler knows while typing [1, &#x201C;foo&#x201D;] that the expected type is Array, so the element type is Dynamic. Instead of the usual uni&#xFB01;cation behavior where the compiler would attempt (and fail) to determine a common base type (3.5.5), the individual elements are typed against and uni&#xFB01;ed with Dynamic. &#x5728;&#x6784;&#x5EFA;&#x6CDB;&#x578B;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.3.1&#x8282;&#xFF09;&#x88AB;&#x5F15;&#x5165;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x4E86;&#x53E6;&#x4E00;&#x4E2A;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD;&#x7684;&#x6709;&#x8DA3;&#x7528;&#x6CD5; We have seen another interesting use of top-down inference when construction of generic type parameters (3.3.1) was introduced: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  typedef Constructible = {  public function new (s: String ): Void ;  }   class Main {  static public function main () {  var s: String = make();  var t: haxe .Template = make();  }   @:generic  static function makeT:Constructible():T {  return new T ( foo );  }  }  &#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B; String&#x662F; &#x88AB;haxe.Template&#x5728;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x6765;&#x786E;&#x5B9A;make&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x4E3A; make()&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4F1A;&#x5206;&#x914D;&#x5230;&#x53D8;&#x91CF;&#x3002;&#x5229;&#x7528;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#xFF0C;&#x53EF;&#x4EE5;&#x5206;&#x522B;&#x7ED1;&#x5B9A; unknown &#x7C7B;&#x578B; T&#x5230; String&#x548C; haxe.Template &#x3002; The explicit types String and haxe.Template are used here to determine the return type of make. This works because the method is invoked as make(),so we know the return type will be assigned to the variables. Utilizing this information, it is possible to bind the unknown type T to String and haxe.Template respectively."},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{"title":"","path":"\\3.类型系统\\3.6.类型推断\\3.6.类型推断.html","body":"3.6.类型推断 类型推断的效果将会频繁出现于整个文档中。一个例子可以展示类型推断： The effects of type inference have been seen throughout this document and will continue to be important. A simple example shows type inference at work: 1 2 3 4 5 6 7 8 class Main  public static function main ()  var x = null ; $type(x); // Unknown0 x = \"foo\" ; $type(x); // String   这里有个特殊的 $type 结构在之前为了便于 函数类型（2.6） 的说明稍有提及，现在让我们来正式地介绍它： The special construct $type was previously mentioned in order to simplify the explanation of the Function Type (Section 2.6) type, so let us now introduce it ofﬁcially: 定义：$type $type 是一个可以像函数一样调用的编译时机制，它接受一个参数。编译器执行参数的表达式并输出表达式的类型。 [warning] Construct: $type $type is a compile-time mechanism being called like a function,with a single argument. The compiler evaluates the argument expression and then outputs the type of that expression. 在上面的例子中，第一个 $type 输出 Unknow0 。这是一个 单形（第2.9节），一个还不知道其类型的类型。下一行 x = foo 将一个 String 类型的字面值赋值到变量 x 上，于是触发了这个单形与 String 之间的一致性检查 。然后我们可以看到 x 的类型被改变为 String 类型了 。 In the example above, the first $type prints Unknown0 . This is a monomorph , a type that is not yet known. The next line x = foo assigns a String literal to x , which causes the unification of the monomorph with String . We then see that the type of x has changed to String . 每当一个不同于 Dynamic（第2.7节）的类型被统一为一个单形时，这个单形便会变形（morph）为该类型，并且在此之后它就不能再变形为另外的类型了。这一特性正如其名字中的 mono（单一的）所表达的一样。 Whenever a type other than Dynamic is unified with a monomorph, that monomorph morphs into that type, or in simpler terms, becomes that type. Therefore, it cannot morph into a different type afterwards, a property expressed in the mono part of its name. 遵循一致性检查的规则，类型推断可以在复合类型中触发： Following the rules of uniﬁcation, type inference can occur in compound types: 1 2 3 4 5 6 7 8 class Main  public static function main ()  var x = []; $type(x); // ArrayUnknown0 x.push( \"foo\" ); $type(x); // ArrayString   变量 x 在一开始被初始化为一个空的 Array 数组。此时我们除了知道变量 x 是一个数组外并不知道其数组元素的具体类型。此时 x 的类型必然为 ArrayUnknown0 。只有当我们为其推入一个 Sring 类型元素之后才知道其类型为 ArrayString 。 Variable x is first initialized to an empty Array . At this point, we can tell that the type of x is an array, but we do not yet know the type of the array elements. Consequently, the type of x is ArrayUnknown0 . It is only after pushing a String onto the array that we know the type to be ArrayString ."},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{"title":"3.6.&#x7C7B;&#x578B;&#x63A8;&#x65AD;","path":"\\3.类型系统\\3.6.类型推断\\3.6.类型推断.html#3-6-类型推断","body":"&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x7684;&#x6548;&#x679C;&#x5C06;&#x4F1A;&#x9891;&#x7E41;&#x51FA;&#x73B0;&#x4E8E;&#x6574;&#x4E2A;&#x6587;&#x6863;&#x4E2D;&#x3002;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x53EF;&#x4EE5;&#x5C55;&#x793A;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF1A; The effects of type inference have been seen throughout this document and will continue to be important. A simple example shows type inference at work: 1 2 3 4 5 6 7 8 class Main { public static function main () { var x = null ; $type(x); // Unknown0 x = foo ; $type(x); // String } } &#x8FD9;&#x91CC;&#x6709;&#x4E2A;&#x7279;&#x6B8A;&#x7684; $type &#x7ED3;&#x6784;&#x5728;&#x4E4B;&#x524D;&#x4E3A;&#x4E86;&#x4FBF;&#x4E8E; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF08;2.6&#xFF09; &#x7684;&#x8BF4;&#x660E;&#x7A0D;&#x6709;&#x63D0;&#x53CA;&#xFF0C;&#x73B0;&#x5728;&#x8BA9;&#x6211;&#x4EEC;&#x6765;&#x6B63;&#x5F0F;&#x5730;&#x4ECB;&#x7ECD;&#x5B83;&#xFF1A; The special construct $type was previously mentioned in order to simplify the explanation of the Function Type (Section 2.6) type, so let us now introduce it of&#xFB01;cially: &#x5B9A;&#x4E49;&#xFF1A;$type $type &#x662F;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x50CF;&#x51FD;&#x6570;&#x4E00;&#x6837;&#x8C03;&#x7528;&#x7684;&#x7F16;&#x8BD1;&#x65F6;&#x673A;&#x5236;&#xFF0C;&#x5B83;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x6267;&#x884C;&#x53C2;&#x6570;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5E76;&#x8F93;&#x51FA;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x3002; [warning] Construct: $type $type is a compile-time mechanism being called like a function,with a single argument. The compiler evaluates the argument expression and then outputs the type of that expression. &#x5728;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A; $type &#x8F93;&#x51FA; Unknow0 &#x3002;&#x8FD9;&#x662F;&#x4E00;&#x4E2A; &#x5355;&#x5F62;&#xFF08;&#x7B2C;2.9&#x8282;&#xFF09;&#xFF0C;&#x4E00;&#x4E2A;&#x8FD8;&#x4E0D;&#x77E5;&#x9053;&#x5176;&#x7C7B;&#x578B;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x4E0B;&#x4E00;&#x884C; x = foo &#x5C06;&#x4E00;&#x4E2A; String &#x7C7B;&#x578B;&#x7684;&#x5B57;&#x9762;&#x503C;&#x8D4B;&#x503C;&#x5230;&#x53D8;&#x91CF; x &#x4E0A;&#xFF0C;&#x4E8E;&#x662F;&#x89E6;&#x53D1;&#x4E86;&#x8FD9;&#x4E2A;&#x5355;&#x5F62;&#x4E0E; String &#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5; &#x3002;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230; x &#x7684;&#x7C7B;&#x578B;&#x88AB;&#x6539;&#x53D8;&#x4E3A; String &#x7C7B;&#x578B;&#x4E86; &#x3002; In the example above, the first $type prints Unknown0 . This is a monomorph , a type that is not yet known. The next line x = foo assigns a String literal to x , which causes the unification of the monomorph with String . We then see that the type of x has changed to String . &#x6BCF;&#x5F53;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x4E8E; Dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#x7684;&#x7C7B;&#x578B;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x4E00;&#x4E2A;&#x5355;&#x5F62;&#x65F6;&#xFF0C;&#x8FD9;&#x4E2A;&#x5355;&#x5F62;&#x4FBF;&#x4F1A;&#x53D8;&#x5F62;&#xFF08;morph&#xFF09;&#x4E3A;&#x8BE5;&#x7C7B;&#x578B;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x6B64;&#x4E4B;&#x540E;&#x5B83;&#x5C31;&#x4E0D;&#x80FD;&#x518D;&#x53D8;&#x5F62;&#x4E3A;&#x53E6;&#x5916;&#x7684;&#x7C7B;&#x578B;&#x4E86;&#x3002;&#x8FD9;&#x4E00;&#x7279;&#x6027;&#x6B63;&#x5982;&#x5176;&#x540D;&#x5B57;&#x4E2D;&#x7684; mono&#xFF08;&#x5355;&#x4E00;&#x7684;&#xFF09;&#x6240;&#x8868;&#x8FBE;&#x7684;&#x4E00;&#x6837;&#x3002; Whenever a type other than Dynamic is unified with a monomorph, that monomorph morphs into that type, or in simpler terms, becomes that type. Therefore, it cannot morph into a different type afterwards, a property expressed in the mono part of its name. &#x9075;&#x5FAA;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x7684;&#x89C4;&#x5219;&#xFF0C;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x53EF;&#x4EE5;&#x5728;&#x590D;&#x5408;&#x7C7B;&#x578B;&#x4E2D;&#x89E6;&#x53D1;&#xFF1A; Following the rules of uni&#xFB01;cation, type inference can occur in compound types: 1 2 3 4 5 6 7 8 class Main { public static function main () { var x = []; $type(x); // ArrayUnknown0 x.push( foo ); $type(x); // ArrayString } } &#x53D8;&#x91CF; x &#x5728;&#x4E00;&#x5F00;&#x59CB;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x4E00;&#x4E2A;&#x7A7A;&#x7684; Array &#x6570;&#x7EC4;&#x3002;&#x6B64;&#x65F6;&#x6211;&#x4EEC;&#x9664;&#x4E86;&#x77E5;&#x9053;&#x53D8;&#x91CF; x &#x662F;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x5916;&#x5E76;&#x4E0D;&#x77E5;&#x9053;&#x5176;&#x6570;&#x7EC4;&#x5143;&#x7D20;&#x7684;&#x5177;&#x4F53;&#x7C7B;&#x578B;&#x3002;&#x6B64;&#x65F6; x &#x7684;&#x7C7B;&#x578B;&#x5FC5;&#x7136;&#x4E3A; ArrayUnknown0 &#x3002;&#x53EA;&#x6709;&#x5F53;&#x6211;&#x4EEC;&#x4E3A;&#x5176;&#x63A8;&#x5165;&#x4E00;&#x4E2A; Sring &#x7C7B;&#x578B;&#x5143;&#x7D20;&#x4E4B;&#x540E;&#x624D;&#x77E5;&#x9053;&#x5176;&#x7C7B;&#x578B;&#x4E3A; ArrayString &#x3002; Variable x is first initialized to an empty Array . At this point, we can tell that the type of x is an array, but we do not yet know the type of the array elements. Consequently, the type of x is ArrayUnknown0 . It is only after pushing a String onto the array that we know the type to be ArrayString ."},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{"title":"","path":"\\3.类型系统\\3.6.类型推断\\3.6.2.局限.html","body":"3.6.2.局限 类型推断在使用局部变量的时候节省了大量手动类型化，但是有时类型系统仍然需要一些帮助。事实上，它甚至不尝试推断变量（第4.1节）或者属性（第4.2节）字段，除非它有一个直接的初始化。 Type inference saves a lot of manual type hints when working with local variables,but sometimes the type system still needs some help. In fact, it does not even try to infer the type of a variable (4.1) or property (4.2) ﬁeld unless it has a direct initialization. 也有一些情况递归调用，当类型推断有限制的时候。如果一个函数递归调用它自身，它的类型还不（完全）不知道，类型推断可能推断一个错误，太详细的类型。 There are also some cases involving recursion where type inference has limitations. If a function calls itself recursively while its type is not (completely) known yet, type inference may infer a wrong, too specialized type. 一种不同类型的限制涉及代码的可读性。如果类型推断过度使用，可能由于可见类型的缺失而难于理解程序的部分。特别是在方法签名。建议在类型推断和显式类型中找到一个好的平衡。 A different kind of limitation involves the readability of code. If type inference is overused it might be difﬁcult to understand parts of a program due to the lack of visible types. This is particularly true for method signatures. It is recommended to ﬁnd a good balance between type inference and explicit type hints."},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{"title":"3.6.2.&#x5C40;&#x9650;","path":"\\3.类型系统\\3.6.类型推断\\3.6.2.局限.html#3-6-2-局限","body":"&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x5728;&#x4F7F;&#x7528;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x7684;&#x65F6;&#x5019;&#x8282;&#x7701;&#x4E86;&#x5927;&#x91CF;&#x624B;&#x52A8;&#x7C7B;&#x578B;&#x5316;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x65F6;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x4ECD;&#x7136;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x5E2E;&#x52A9;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x5B83;&#x751A;&#x81F3;&#x4E0D;&#x5C1D;&#x8BD5;&#x63A8;&#x65AD;&#x53D8;&#x91CF;&#xFF08;&#x7B2C;4.1&#x8282;&#xFF09;&#x6216;&#x8005;&#x5C5E;&#x6027;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#x5B57;&#x6BB5;&#xFF0C;&#x9664;&#x975E;&#x5B83;&#x6709;&#x4E00;&#x4E2A;&#x76F4;&#x63A5;&#x7684;&#x521D;&#x59CB;&#x5316;&#x3002; Type inference saves a lot of manual type hints when working with local variables,but sometimes the type system still needs some help. In fact, it does not even try to infer the type of a variable (4.1) or property (4.2) &#xFB01;eld unless it has a direct initialization. &#x4E5F;&#x6709;&#x4E00;&#x4E9B;&#x60C5;&#x51B5;&#x9012;&#x5F52;&#x8C03;&#x7528;&#xFF0C;&#x5F53;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x6709;&#x9650;&#x5236;&#x7684;&#x65F6;&#x5019;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x9012;&#x5F52;&#x8C03;&#x7528;&#x5B83;&#x81EA;&#x8EAB;&#xFF0C;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x8FD8;&#x4E0D;&#xFF08;&#x5B8C;&#x5168;&#xFF09;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x53EF;&#x80FD;&#x63A8;&#x65AD;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#xFF0C;&#x592A;&#x8BE6;&#x7EC6;&#x7684;&#x7C7B;&#x578B;&#x3002; There are also some cases involving recursion where type inference has limitations. If a function calls itself recursively while its type is not (completely) known yet, type inference may infer a wrong, too specialized type. &#x4E00;&#x79CD;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x9650;&#x5236;&#x6D89;&#x53CA;&#x4EE3;&#x7801;&#x7684;&#x53EF;&#x8BFB;&#x6027;&#x3002;&#x5982;&#x679C;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x8FC7;&#x5EA6;&#x4F7F;&#x7528;&#xFF0C;&#x53EF;&#x80FD;&#x7531;&#x4E8E;&#x53EF;&#x89C1;&#x7C7B;&#x578B;&#x7684;&#x7F3A;&#x5931;&#x800C;&#x96BE;&#x4E8E;&#x7406;&#x89E3;&#x7A0B;&#x5E8F;&#x7684;&#x90E8;&#x5206;&#x3002;&#x7279;&#x522B;&#x662F;&#x5728;&#x65B9;&#x6CD5;&#x7B7E;&#x540D;&#x3002;&#x5EFA;&#x8BAE;&#x5728;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x548C;&#x663E;&#x5F0F;&#x7C7B;&#x578B;&#x4E2D;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x597D;&#x7684;&#x5E73;&#x8861;&#x3002; A different kind of limitation involves the readability of code. If type inference is overused it might be dif&#xFB01;cult to understand parts of a program due to the lack of visible types. This is particularly true for method signatures. It is recommended to &#xFB01;nd a good balance between type inference and explicit type hints."},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{"title":"","path":"\\3.类型系统\\3.7.模块和路径\\3.7.1.模块子类型.html","body":"3.7.1.模块子类型 模块子类型是一个模块中与模块不同名的类型。这使得一个 .hx 文件中可以包含多个类型声明，这些类型可以在该模块中不受限制地被调用，但从其它模块中使用时需通过 package.Modoule.Type 的形式进行访问: A module sub-type is a type declared in a module with a different name than that module. This allows a single .hx ﬁle to contain multiple types, which can be accessed unqualiﬁed from within the module, and by using package.Module.Type from other modules: 1 var e: haxe .macro.Expr.ExprDef; 此处访问了 haxe.macro.Expr 模块中的模块子类型 ExprDef 。 模块子类型的声明可能看起来如下所示： 1 2 3 4 5 6 // a/A.hx package a; class A  public function new ()   // sub-type class B  public function new ()   1 2 3 4 5 6 7 8 9 10 11 // Main.hx import a.A; class Main  static function main ()  var subtype1 = new a .A.B(); // these are also valid, but require import a.A or import a.A.B var subtype2 = new B (); var subtype3 = new a .B();   模块子类型的关系不会反映于运行时；一个修饰为 public 的模块子类型会被认为是其所在的包（package）的一个成员，比如在上面的例子中，模块子类型 ExprDef 会被生成为 haxe.macro.ExprDef 。所以当一个包中存在两个模块，且两个模块中定义了同名的模块子类型时可能会产生冲突。通常，Haxe编译器会侦测到这类情况并做出相应报告。 模块子类型也可以被声明为私有的（private）： 1 2 3 4 private class C ... private enum E  ... private typedef T ... private abstract A  ... 定义：私有类型 一个类型可以通过 private 访问修饰符被声明为私有。这会导致这个类型只能从定义它的这个模块内部直接进行访问。私有类型不像公开类型，不会成为它们所在的包的成员。 Deﬁnition: Private type A type can be made private by using the private modiﬁer. As a result,the type can only be directly accessed from within the module (3.7) it is deﬁned in. Private types, unlike public ones, do not become a member of their containing package. 类型的可访问性可以通过访问控制（第6.10节）进行更精确地控制。 The accessibility of types can be controlled more precisely by using access control ."},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{"title":"3.7.1.&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;","path":"\\3.类型系统\\3.7.模块和路径\\3.7.1.模块子类型.html#3-7-1-模块子类型","body":"&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x662F;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x4E2D;&#x4E0E;&#x6A21;&#x5757;&#x4E0D;&#x540C;&#x540D;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x4F7F;&#x5F97;&#x4E00;&#x4E2A; .hx &#x6587;&#x4EF6;&#x4E2D;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x591A;&#x4E2A;&#x7C7B;&#x578B;&#x58F0;&#x660E;&#xFF0C;&#x8FD9;&#x4E9B;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x5728;&#x8BE5;&#x6A21;&#x5757;&#x4E2D;&#x4E0D;&#x53D7;&#x9650;&#x5236;&#x5730;&#x88AB;&#x8C03;&#x7528;&#xFF0C;&#x4F46;&#x4ECE;&#x5176;&#x5B83;&#x6A21;&#x5757;&#x4E2D;&#x4F7F;&#x7528;&#x65F6;&#x9700;&#x901A;&#x8FC7; package.Modoule.Type &#x7684;&#x5F62;&#x5F0F;&#x8FDB;&#x884C;&#x8BBF;&#x95EE;: A module sub-type is a type declared in a module with a different name than that module. This allows a single .hx &#xFB01;le to contain multiple types, which can be accessed unquali&#xFB01;ed from within the module, and by using package.Module.Type from other modules: 1 var e: haxe .macro.Expr.ExprDef; &#x6B64;&#x5904;&#x8BBF;&#x95EE;&#x4E86; haxe.macro.Expr &#x6A21;&#x5757;&#x4E2D;&#x7684;&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B; ExprDef &#x3002; &#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x7684;&#x58F0;&#x660E;&#x53EF;&#x80FD;&#x770B;&#x8D77;&#x6765;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A; 1 2 3 4 5 6 // a/A.hx package a; class A { public function new () {} } // sub-type class B { public function new () {} } 1 2 3 4 5 6 7 8 9 10 11 // Main.hx import a.A; class Main { static function main () { var subtype1 = new a .A.B(); // these are also valid, but require import a.A or import a.A.B var subtype2 = new B (); var subtype3 = new a .B(); } } &#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x7684;&#x5173;&#x7CFB;&#x4E0D;&#x4F1A;&#x53CD;&#x6620;&#x4E8E;&#x8FD0;&#x884C;&#x65F6;&#xFF1B;&#x4E00;&#x4E2A;&#x4FEE;&#x9970;&#x4E3A; public &#x7684;&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x4F1A;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x5176;&#x6240;&#x5728;&#x7684;&#x5305;&#xFF08;package&#xFF09;&#x7684;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#xFF0C;&#x6BD4;&#x5982;&#x5728;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B; ExprDef &#x4F1A;&#x88AB;&#x751F;&#x6210;&#x4E3A; haxe.macro.ExprDef &#x3002;&#x6240;&#x4EE5;&#x5F53;&#x4E00;&#x4E2A;&#x5305;&#x4E2D;&#x5B58;&#x5728;&#x4E24;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x4E14;&#x4E24;&#x4E2A;&#x6A21;&#x5757;&#x4E2D;&#x5B9A;&#x4E49;&#x4E86;&#x540C;&#x540D;&#x7684;&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x51B2;&#x7A81;&#x3002;&#x901A;&#x5E38;&#xFF0C;Haxe&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x4FA6;&#x6D4B;&#x5230;&#x8FD9;&#x7C7B;&#x60C5;&#x51B5;&#x5E76;&#x505A;&#x51FA;&#x76F8;&#x5E94;&#x62A5;&#x544A;&#x3002; &#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x79C1;&#x6709;&#x7684;&#xFF08;private&#xFF09;&#xFF1A; 1 2 3 4 private class C {...} private enum E { ...} private typedef T {...} private abstract A { ...} &#x5B9A;&#x4E49;&#xFF1A;&#x79C1;&#x6709;&#x7C7B;&#x578B; &#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; private &#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x79C1;&#x6709;&#x3002;&#x8FD9;&#x4F1A;&#x5BFC;&#x81F4;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x53EA;&#x80FD;&#x4ECE;&#x5B9A;&#x4E49;&#x5B83;&#x7684;&#x8FD9;&#x4E2A;&#x6A21;&#x5757;&#x5185;&#x90E8;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x8BBF;&#x95EE;&#x3002;&#x79C1;&#x6709;&#x7C7B;&#x578B;&#x4E0D;&#x50CF;&#x516C;&#x5F00;&#x7C7B;&#x578B;&#xFF0C;&#x4E0D;&#x4F1A;&#x6210;&#x4E3A;&#x5B83;&#x4EEC;&#x6240;&#x5728;&#x7684;&#x5305;&#x7684;&#x6210;&#x5458;&#x3002; De&#xFB01;nition: Private type A type can be made private by using the private modi&#xFB01;er. As a result,the type can only be directly accessed from within the module (3.7) it is de&#xFB01;ned in. Private types, unlike public ones, do not become a member of their containing package. &#x7C7B;&#x578B;&#x7684;&#x53EF;&#x8BBF;&#x95EE;&#x6027;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#xFF08;&#x7B2C;6.10&#x8282;&#xFF09;&#x8FDB;&#x884C;&#x66F4;&#x7CBE;&#x786E;&#x5730;&#x63A7;&#x5236;&#x3002; The accessibility of types can be controlled more precisely by using access control ."},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{"title":"","path":"\\3.类型系统\\3.7.模块和路径\\3.7.2.Import.html","body":"3.7.2.Import 如果一个类型路径在一个 .hx 文件中被多次使用，那么最好是通过导入该路径来缩短书写形式。这么做使得我们使用一个类型时可以省略其包名： If a type path is used multiple times in a .hx ﬁle,it might make sense to use an import to shorten it. This allows omitting the package when using the type: 1 2 3 4 5 6 7 8 import haxe.ds.StringMap; class Main  static public function main ()  // instead of: new haxe.ds.StringMap(); new StringMap ();   随着haxe.ds.StringMap被导入之后，编译器就可以通过这个包解析 main 函数中不合法的标识符 StringMap。模块 StringMap 被告知需要被导入到当前的文件 。 With haxe.ds.StringMap being imported in the ﬁrst line,the compiler is able to resolve the unqualiﬁed identiﬁer StringMap in the main function to this package. The module StringMap is said to be imported into the current ﬁle. 在这个例子中，我们实际上导入了一个模块，而不只是模块中的一个类型。这意味着所有在被导入的模块中定义的类型都是可用的。 In this example, we are actually importing a module, not just a speciﬁc type within that module. This means that all types deﬁned within the imported module are available: 1 2 3 4 5 6 7 import haxe.macro.Expr; class Main  static public function main ()  var e: Binop = OpAdd;   类型 Binop 是haxe.macro.Expr模块中一个 enum（第2.4节）声明，因此在这个模块被导入之后就可以使用了。如果我们只要导入模块中的一个特定类型，例如，import haxe.macro.Expr.ExprDef，程序会编译失败，提示Binop类没有找到。 The type Binop is an enum (2.4) declared in the module haxe.macro.Expr,and thus available after the import of said module. If we were to import only a speciﬁc type of that module, e.g. import haxe.macro.Expr.ExprDef, the program would fail to compile with Class not found : Binop. 关于导入有几个方面需要了解： There are several aspects worth knowing about importing: 最底部的导入指令具有最高的优先级（详见 解析顺序（第3.7.3节））。 静态扩展（第6.3节）关键字 using 具有 import 的效果。 如果一个enum被导入（直接或作为模块的一部分被导入），所有它的enum构造函数（第2.4.1节）同样也被导入（这就是为什么在上面例子中允许 opAdd 的用法）。 The bottommost import takes priority (detailed in Resolution Order (Section 3.7.3)). The static extension (6.3) keyword using implies the effect of import. If an enum is imported (directly or as part of a module import), all its enum constructors (2.4.1) are also imported (this is what allows the OpAdd usage in the above example). 此外，也可以导入类的静态字段并不受限制的使用它们。 Furthermore, it is also possible to import static ﬁelds (4) of a class and use them unqualiﬁed: 1 2 3 4 5 6 7 import Math.random; class Main  static public function main ()  random();   必须特别注意，字段名或者局部变量名和包名的冲突：因为它们优先级高于包，如果有一个名为haxe的局部变量，它们会会阻挡整个haxe包的使用。 Special care has to be taken with ﬁeld names or local variable names that conﬂict with a package name: Since they take priority over packages, a local variable named haxe blocks off usage the entire haxe package. 通配符导入 ：Haxe允许使用 .* 使 import可以导入一个包中所有的模块、模块中的所有类型或者类型中的所有静态字段。通过以下例子重点了解此类导入操作只能覆盖同级的访问（only crosses a single level）： Wildcard import Haxe allows using .* to allow import of all modules in a package, all types in a module or all static ﬁelds in a type. It is important to understand that this kind of import only crosses a single level as we can see in the following example: 1 2 3 4 5 6 7 8 import haxe.macro.*; class Main  static function main ()  var expr: Expr = null ; //var expr:ExprDef = null; // Class not found : ExprDef   使用通配符到haxe.macro的导入，使这个包中的 Expr 模块可以被访问，但是它 不能使 Expr 模块的子类型 ExprDef 被访问 。这个规则当一个模块被导入时也扩展到静态字段。 Using the wildcard import on haxe.macro allows accessing Expr which is a module in this package, but it does not allow accessing ExprDef which is a sub-type of the Expr module. This rule extends to static ﬁelds when a module is imported. 当使用通配符导入一个包，编译器并不会立即处理包中的所有模块。这意味着这些模块除非被明确使用否则不会被作为输出的一部分生成。 When using wildcard imports on a package, the compiler does not eagerly process all modules in that package; modules that have not been used explicitly are not part of the generated output. 使用别名导入 如果一个类型或静态字段在一个导入它的模块中经常使用，可以为它引入别名为一个简短的名字。这也可以用来通过给定一个唯一的标识符来消除命名冲突。 Import with alias If a type or static ﬁeld is used a lot in an importing module it might help to alias it to a shorter name. This can also be used to disambiguate conﬂicting names by giving them a unique identiﬁer. 1 2 3 4 5 6 7 8 9 import String .fromCharCode in f; class Main  static function main ()  var c1 = f( 65 ); var c2 = f( 66 ); trace (c1 + c2); // AB   这里我们导入String.fromCharCode为 f，使我们可以使用 f(65) 和 f(66)。达到和局部变量一样的使用，这个方法是编译时功能，不会有运行时开销。 Here we import String.fromCharCode as f which allows us to use f(65) and f(66). While the same could be achieved with a local variable, this method is compile-time exclusive and guaranteed to have no run-time overhead. 从Haxe3.2.0后 ，Haxe允许使用更自然的 as 替代 in 。 Since Haxe 3.2.0 Haxe also allows the more natural as in place of in."},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{"title":"3.7.2.Import","path":"\\3.类型系统\\3.7.模块和路径\\3.7.2.Import.html#3-7-2-Import","body":"&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x8DEF;&#x5F84;&#x5728;&#x4E00;&#x4E2A; .hx &#x6587;&#x4EF6;&#x4E2D;&#x88AB;&#x591A;&#x6B21;&#x4F7F;&#x7528;&#xFF0C;&#x90A3;&#x4E48;&#x6700;&#x597D;&#x662F;&#x901A;&#x8FC7;&#x5BFC;&#x5165;&#x8BE5;&#x8DEF;&#x5F84;&#x6765;&#x7F29;&#x77ED;&#x4E66;&#x5199;&#x5F62;&#x5F0F;&#x3002;&#x8FD9;&#x4E48;&#x505A;&#x4F7F;&#x5F97;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x65F6;&#x53EF;&#x4EE5;&#x7701;&#x7565;&#x5176;&#x5305;&#x540D;&#xFF1A; If a type path is used multiple times in a .hx &#xFB01;le,it might make sense to use an import to shorten it. This allows omitting the package when using the type: 1 2 3 4 5 6 7 8 import haxe.ds.StringMap; class Main { static public function main () { // instead of: new haxe.ds.StringMap(); new StringMap (); } } &#x968F;&#x7740;haxe.ds.StringMap&#x88AB;&#x5BFC;&#x5165;&#x4E4B;&#x540E;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x5C31;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x5305;&#x89E3;&#x6790; main &#x51FD;&#x6570;&#x4E2D;&#x4E0D;&#x5408;&#x6CD5;&#x7684;&#x6807;&#x8BC6;&#x7B26; StringMap&#x3002;&#x6A21;&#x5757; StringMap &#x88AB;&#x544A;&#x77E5;&#x9700;&#x8981;&#x88AB;&#x5BFC;&#x5165;&#x5230;&#x5F53;&#x524D;&#x7684;&#x6587;&#x4EF6; &#x3002; With haxe.ds.StringMap being imported in the &#xFB01;rst line,the compiler is able to resolve the unquali&#xFB01;ed identi&#xFB01;er StringMap in the main function to this package. The module StringMap is said to be imported into the current &#xFB01;le. &#x5728;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5B9E;&#x9645;&#x4E0A;&#x5BFC;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x800C;&#x4E0D;&#x53EA;&#x662F;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x6240;&#x6709;&#x5728;&#x88AB;&#x5BFC;&#x5165;&#x7684;&#x6A21;&#x5757;&#x4E2D;&#x5B9A;&#x4E49;&#x7684;&#x7C7B;&#x578B;&#x90FD;&#x662F;&#x53EF;&#x7528;&#x7684;&#x3002; In this example, we are actually importing a module, not just a speci&#xFB01;c type within that module. This means that all types de&#xFB01;ned within the imported module are available: 1 2 3 4 5 6 7 import haxe.macro.Expr; class Main { static public function main () { var e: Binop = OpAdd; } } &#x7C7B;&#x578B; Binop &#x662F;haxe.macro.Expr&#x6A21;&#x5757;&#x4E2D;&#x4E00;&#x4E2A; enum&#xFF08;&#x7B2C;2.4&#x8282;&#xFF09;&#x58F0;&#x660E;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x8FD9;&#x4E2A;&#x6A21;&#x5757;&#x88AB;&#x5BFC;&#x5165;&#x4E4B;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E86;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x53EA;&#x8981;&#x5BFC;&#x5165;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;import haxe.macro.Expr.ExprDef&#xFF0C;&#x7A0B;&#x5E8F;&#x4F1A;&#x7F16;&#x8BD1;&#x5931;&#x8D25;&#xFF0C;&#x63D0;&#x793A;Binop&#x7C7B;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x3002; The type Binop is an enum (2.4) declared in the module haxe.macro.Expr,and thus available after the import of said module. If we were to import only a speci&#xFB01;c type of that module, e.g. import haxe.macro.Expr.ExprDef, the program would fail to compile with Class not found : Binop. &#x5173;&#x4E8E;&#x5BFC;&#x5165;&#x6709;&#x51E0;&#x4E2A;&#x65B9;&#x9762;&#x9700;&#x8981;&#x4E86;&#x89E3;&#xFF1A; There are several aspects worth knowing about importing: &#x6700;&#x5E95;&#x90E8;&#x7684;&#x5BFC;&#x5165;&#x6307;&#x4EE4;&#x5177;&#x6709;&#x6700;&#x9AD8;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#xFF08;&#x8BE6;&#x89C1; &#x89E3;&#x6790;&#x987A;&#x5E8F;&#xFF08;&#x7B2C;3.7.3&#x8282;&#xFF09;&#xFF09;&#x3002; &#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09;&#x5173;&#x952E;&#x5B57; using &#x5177;&#x6709; import &#x7684;&#x6548;&#x679C;&#x3002; &#x5982;&#x679C;&#x4E00;&#x4E2A;enum&#x88AB;&#x5BFC;&#x5165;&#xFF08;&#x76F4;&#x63A5;&#x6216;&#x4F5C;&#x4E3A;&#x6A21;&#x5757;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x88AB;&#x5BFC;&#x5165;&#xFF09;&#xFF0C;&#x6240;&#x6709;&#x5B83;&#x7684;enum&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF08;&#x7B2C;2.4.1&#x8282;&#xFF09;&#x540C;&#x6837;&#x4E5F;&#x88AB;&#x5BFC;&#x5165;&#xFF08;&#x8FD9;&#x5C31;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x5728;&#x4E0A;&#x9762;&#x4F8B;&#x5B50;&#x4E2D;&#x5141;&#x8BB8; opAdd &#x7684;&#x7528;&#x6CD5;&#xFF09;&#x3002; The bottommost import takes priority (detailed in Resolution Order (Section 3.7.3)). The static extension (6.3) keyword using implies the effect of import. If an enum is imported (directly or as part of a module import), all its enum constructors (2.4.1) are also imported (this is what allows the OpAdd usage in the above example). &#x6B64;&#x5916;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5BFC;&#x5165;&#x7C7B;&#x7684;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x5E76;&#x4E0D;&#x53D7;&#x9650;&#x5236;&#x7684;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x3002; Furthermore, it is also possible to import static &#xFB01;elds (4) of a class and use them unquali&#xFB01;ed: 1 2 3 4 5 6 7 import Math.random; class Main { static public function main () { random(); } } &#x5FC5;&#x987B;&#x7279;&#x522B;&#x6CE8;&#x610F;&#xFF0C;&#x5B57;&#x6BB5;&#x540D;&#x6216;&#x8005;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x540D;&#x548C;&#x5305;&#x540D;&#x7684;&#x51B2;&#x7A81;&#xFF1A;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x4F18;&#x5148;&#x7EA7;&#x9AD8;&#x4E8E;&#x5305;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x540D;&#x4E3A;haxe&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF0C;&#x5B83;&#x4EEC;&#x4F1A;&#x4F1A;&#x963B;&#x6321;&#x6574;&#x4E2A;haxe&#x5305;&#x7684;&#x4F7F;&#x7528;&#x3002; Special care has to be taken with &#xFB01;eld names or local variable names that con&#xFB02;ict with a package name: Since they take priority over packages, a local variable named haxe blocks off usage the entire haxe package. &#x901A;&#x914D;&#x7B26;&#x5BFC;&#x5165; &#xFF1A;Haxe&#x5141;&#x8BB8;&#x4F7F;&#x7528; .* &#x4F7F; import&#x53EF;&#x4EE5;&#x5BFC;&#x5165;&#x4E00;&#x4E2A;&#x5305;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x6A21;&#x5757;&#x3001;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x7C7B;&#x578B;&#x6216;&#x8005;&#x7C7B;&#x578B;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x3002;&#x901A;&#x8FC7;&#x4EE5;&#x4E0B;&#x4F8B;&#x5B50;&#x91CD;&#x70B9;&#x4E86;&#x89E3;&#x6B64;&#x7C7B;&#x5BFC;&#x5165;&#x64CD;&#x4F5C;&#x53EA;&#x80FD;&#x8986;&#x76D6;&#x540C;&#x7EA7;&#x7684;&#x8BBF;&#x95EE;&#xFF08;only crosses a single level&#xFF09;&#xFF1A; Wildcard import Haxe allows using .* to allow import of all modules in a package, all types in a module or all static &#xFB01;elds in a type. It is important to understand that this kind of import only crosses a single level as we can see in the following example: 1 2 3 4 5 6 7 8 import haxe.macro.*; class Main { static function main () { var expr: Expr = null ; //var expr:ExprDef = null; // Class not found : ExprDef } } &#x4F7F;&#x7528;&#x901A;&#x914D;&#x7B26;&#x5230;haxe.macro&#x7684;&#x5BFC;&#x5165;&#xFF0C;&#x4F7F;&#x8FD9;&#x4E2A;&#x5305;&#x4E2D;&#x7684; Expr &#x6A21;&#x5757;&#x53EF;&#x4EE5;&#x88AB;&#x8BBF;&#x95EE;&#xFF0C;&#x4F46;&#x662F;&#x5B83; &#x4E0D;&#x80FD;&#x4F7F; Expr &#x6A21;&#x5757;&#x7684;&#x5B50;&#x7C7B;&#x578B; ExprDef &#x88AB;&#x8BBF;&#x95EE; &#x3002;&#x8FD9;&#x4E2A;&#x89C4;&#x5219;&#x5F53;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x88AB;&#x5BFC;&#x5165;&#x65F6;&#x4E5F;&#x6269;&#x5C55;&#x5230;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x3002; Using the wildcard import on haxe.macro allows accessing Expr which is a module in this package, but it does not allow accessing ExprDef which is a sub-type of the Expr module. This rule extends to static &#xFB01;elds when a module is imported. &#x5F53;&#x4F7F;&#x7528;&#x901A;&#x914D;&#x7B26;&#x5BFC;&#x5165;&#x4E00;&#x4E2A;&#x5305;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x5E76;&#x4E0D;&#x4F1A;&#x7ACB;&#x5373;&#x5904;&#x7406;&#x5305;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6A21;&#x5757;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x8FD9;&#x4E9B;&#x6A21;&#x5757;&#x9664;&#x975E;&#x88AB;&#x660E;&#x786E;&#x4F7F;&#x7528;&#x5426;&#x5219;&#x4E0D;&#x4F1A;&#x88AB;&#x4F5C;&#x4E3A;&#x8F93;&#x51FA;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x751F;&#x6210;&#x3002; When using wildcard imports on a package, the compiler does not eagerly process all modules in that package; modules that have not been used explicitly are not part of the generated output. &#x4F7F;&#x7528;&#x522B;&#x540D;&#x5BFC;&#x5165; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x6216;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x5728;&#x4E00;&#x4E2A;&#x5BFC;&#x5165;&#x5B83;&#x7684;&#x6A21;&#x5757;&#x4E2D;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;&#x5B83;&#x5F15;&#x5165;&#x522B;&#x540D;&#x4E3A;&#x4E00;&#x4E2A;&#x7B80;&#x77ED;&#x7684;&#x540D;&#x5B57;&#x3002;&#x8FD9;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x901A;&#x8FC7;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x552F;&#x4E00;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#x6765;&#x6D88;&#x9664;&#x547D;&#x540D;&#x51B2;&#x7A81;&#x3002; Import with alias If a type or static &#xFB01;eld is used a lot in an importing module it might help to alias it to a shorter name. This can also be used to disambiguate con&#xFB02;icting names by giving them a unique identi&#xFB01;er. 1 2 3 4 5 6 7 8 9 import String .fromCharCode in f; class Main { static function main () { var c1 = f( 65 ); var c2 = f( 66 ); trace (c1 + c2); // AB } } &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x5BFC;&#x5165;String.fromCharCode&#x4E3A; f&#xFF0C;&#x4F7F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; f(65) &#x548C; f(66)&#x3002;&#x8FBE;&#x5230;&#x548C;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x4E00;&#x6837;&#x7684;&#x4F7F;&#x7528;&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x7F16;&#x8BD1;&#x65F6;&#x529F;&#x80FD;&#xFF0C;&#x4E0D;&#x4F1A;&#x6709;&#x8FD0;&#x884C;&#x65F6;&#x5F00;&#x9500;&#x3002; Here we import String.fromCharCode as f which allows us to use f(65) and f(66). While the same could be achieved with a local variable, this method is compile-time exclusive and guaranteed to have no run-time overhead. &#x4ECE;Haxe3.2.0&#x540E; &#xFF0C;Haxe&#x5141;&#x8BB8;&#x4F7F;&#x7528;&#x66F4;&#x81EA;&#x7136;&#x7684; as &#x66FF;&#x4EE3; in &#x3002; Since Haxe 3.2.0 Haxe also allows the more natural as in place of in."},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{"title":"","path":"\\3.类型系统\\3.7.模块和路径\\3.7.模块和路径.html","body":"3.7.模块和路径 定义：模块 所有的Haxe代码组织在模块中，通过路径定位。本质上讲，每个.hx 文件表示一个模块，其中可能包含多个类型，其中的类型可能是修饰为 private 的私有类，这种情况下只有在它所处的模块之内才能访问到它。 [warning] Deﬁnition: Module All Haxe code is organized in modules, which are addressed using paths. In essence, each .hx ﬁle represents a module which may contain several types. A type may be private, in which case only its containing module can access it. 模块和它所包含的同名类型之间的区别在设计上是模糊的。事实上，定位 haxe.ds.StringMapInt 可以认为是 haxe.ds.StringMap.StringMapInt 的简短写法。后者由四部分构成： The distinction between a module and its containing type of the same name is blurry by design. In fact, addressing haxe.ds.StringMapInt can be considered shorthand for haxe.ds.StringMap.StringMapInt . The latter version consists of four parts: 包名 haxe.ds 模块名 StringMap 类型名 StringMap 类型参数 Int 如果模块和类型名是相同的，重复的部分可以被省略，使用 haxe.ds.StringMapInt 作为速记。然而，了解扩展的记法可以帮助我们理解 是如何定位的。 If the module and type name are equal, the duplicate can be removed, leading to the haxe.ds.StringMapInt short version. However, knowing about the extended version helps with understanding how module sub-types are addressed. 路径可以通过使用 import 进一步简化，这么做通常可以省略路径中包名的部分，其中涉及无约束标识符的使用， Paths can be shortened further by using an import(3.7.2), which typically allows omitting the package part of a path. This may lead to usage of unqualiﬁed identiﬁers, for which understanding the resolution order (3.7.3) is required. 类型路径 定义：类型路径 类型的点路径由包，模块名和类型名组成。它的通常格式是 pack1.paceN.ModuleName.TypeName 。 [warning] Deﬁnition: Type path The (dot-)path to a type consists of the package, the module name and the type name. Its general form is pack1.pack2.packN.ModuleName.TypeName."},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{"title":"3.7.&#x6A21;&#x5757;&#x548C;&#x8DEF;&#x5F84;","path":"\\3.类型系统\\3.7.模块和路径\\3.7.模块和路径.html#3-7-模块和路径","body":"&#x5B9A;&#x4E49;&#xFF1A;&#x6A21;&#x5757; &#x6240;&#x6709;&#x7684;Haxe&#x4EE3;&#x7801;&#x7EC4;&#x7EC7;&#x5728;&#x6A21;&#x5757;&#x4E2D;&#xFF0C;&#x901A;&#x8FC7;&#x8DEF;&#x5F84;&#x5B9A;&#x4F4D;&#x3002;&#x672C;&#x8D28;&#x4E0A;&#x8BB2;&#xFF0C;&#x6BCF;&#x4E2A;.hx &#x6587;&#x4EF6;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x5176;&#x4E2D;&#x53EF;&#x80FD;&#x5305;&#x542B;&#x591A;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x662F;&#x4FEE;&#x9970;&#x4E3A; private &#x7684;&#x79C1;&#x6709;&#x7C7B;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x53EA;&#x6709;&#x5728;&#x5B83;&#x6240;&#x5904;&#x7684;&#x6A21;&#x5757;&#x4E4B;&#x5185;&#x624D;&#x80FD;&#x8BBF;&#x95EE;&#x5230;&#x5B83;&#x3002; [warning] De&#xFB01;nition: Module All Haxe code is organized in modules, which are addressed using paths. In essence, each .hx &#xFB01;le represents a module which may contain several types. A type may be private, in which case only its containing module can access it. &#x6A21;&#x5757;&#x548C;&#x5B83;&#x6240;&#x5305;&#x542B;&#x7684;&#x540C;&#x540D;&#x7C7B;&#x578B;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;&#x5728;&#x8BBE;&#x8BA1;&#x4E0A;&#x662F;&#x6A21;&#x7CCA;&#x7684;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x5B9A;&#x4F4D; haxe.ds.StringMapInt &#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F; haxe.ds.StringMap.StringMapInt &#x7684;&#x7B80;&#x77ED;&#x5199;&#x6CD5;&#x3002;&#x540E;&#x8005;&#x7531;&#x56DB;&#x90E8;&#x5206;&#x6784;&#x6210;&#xFF1A; The distinction between a module and its containing type of the same name is blurry by design. In fact, addressing haxe.ds.StringMapInt can be considered shorthand for haxe.ds.StringMap.StringMapInt . The latter version consists of four parts: &#x5305;&#x540D; haxe.ds &#x6A21;&#x5757;&#x540D; StringMap &#x7C7B;&#x578B;&#x540D; StringMap &#x7C7B;&#x578B;&#x53C2;&#x6570; Int &#x5982;&#x679C;&#x6A21;&#x5757;&#x548C;&#x7C7B;&#x578B;&#x540D;&#x662F;&#x76F8;&#x540C;&#x7684;&#xFF0C;&#x91CD;&#x590D;&#x7684;&#x90E8;&#x5206;&#x53EF;&#x4EE5;&#x88AB;&#x7701;&#x7565;&#xFF0C;&#x4F7F;&#x7528; haxe.ds.StringMapInt &#x4F5C;&#x4E3A;&#x901F;&#x8BB0;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4E86;&#x89E3;&#x6269;&#x5C55;&#x7684;&#x8BB0;&#x6CD5;&#x53EF;&#x4EE5;&#x5E2E;&#x52A9;&#x6211;&#x4EEC;&#x7406;&#x89E3; &#x662F;&#x5982;&#x4F55;&#x5B9A;&#x4F4D;&#x7684;&#x3002; If the module and type name are equal, the duplicate can be removed, leading to the haxe.ds.StringMapInt short version. However, knowing about the extended version helps with understanding how module sub-types are addressed. &#x8DEF;&#x5F84;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528; import &#x8FDB;&#x4E00;&#x6B65;&#x7B80;&#x5316;&#xFF0C;&#x8FD9;&#x4E48;&#x505A;&#x901A;&#x5E38;&#x53EF;&#x4EE5;&#x7701;&#x7565;&#x8DEF;&#x5F84;&#x4E2D;&#x5305;&#x540D;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x5176;&#x4E2D;&#x6D89;&#x53CA;&#x65E0;&#x7EA6;&#x675F;&#x6807;&#x8BC6;&#x7B26;&#x7684;&#x4F7F;&#x7528;&#xFF0C; Paths can be shortened further by using an import(3.7.2), which typically allows omitting the package part of a path. This may lead to usage of unquali&#xFB01;ed identi&#xFB01;ers, for which understanding the resolution order (3.7.3) is required. &#x7C7B;&#x578B;&#x8DEF;&#x5F84; &#x5B9A;&#x4E49;&#xFF1A;&#x7C7B;&#x578B;&#x8DEF;&#x5F84; &#x7C7B;&#x578B;&#x7684;&#x70B9;&#x8DEF;&#x5F84;&#x7531;&#x5305;&#xFF0C;&#x6A21;&#x5757;&#x540D;&#x548C;&#x7C7B;&#x578B;&#x540D;&#x7EC4;&#x6210;&#x3002;&#x5B83;&#x7684;&#x901A;&#x5E38;&#x683C;&#x5F0F;&#x662F; pack1.paceN.ModuleName.TypeName &#x3002; [warning] De&#xFB01;nition: Type path The (dot-)path to a type consists of the package, the module name and the type name. Its general form is pack1.pack2.packN.ModuleName.TypeName."},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{"title":"","path":"\\3.类型系统\\3.7.模块和路径\\3.7.3.解析顺序.html","body":"3.7.3.解析顺序 解析顺序一被引入就涉及到不受限制的标识符 。如 foo()，foo=1，foo.field等这些是表达式（第5章）。特别是最后一个包括类似 haxe.ds.StringMap的模块路径，haxe是一个绝对的标识符。 Resolution order comes into play as soon as unqualiﬁed identiﬁers are involved. These are expressions(5)intheformoffoo(),foo = 1andfoo.field. The last one in particular includes module paths such as haxe.ds.StringMap, where haxe is an unqualiﬁed identiﬁer. 我们描述解析顺序的算法，取决于以下的状态： We describe the resolution order algorithm here, which depends on the following state: 声明的局部变量（第5.10节）（包括函数参数） 导入（第3.7.2节）的模块，类型和静态字段 可用的静态扩展（第6.3节） 当前字段的种类（static或者成员） 当前类及其父类声明的成员字段 当前类声明的静态字段 预期的类型（第3.6.1节） untyped或者不是untyped的表达式 the declared local variables (5.10) (including function arguments) the imported (3.7.2) modules, types and statics the available static extensions (6.3) the kind (static or member) of the current ﬁeld the declared member ﬁelds on the current class and its parent classes the declared static ﬁelds on the current class the expected type (3.6.1) the expression being untyped or not 给定一个标识符 i ，算法规则如下： Given an identiﬁer i, the algorithm is as follows: 如果i 是true，false，this，super或者null，解析到匹配的 常量并停止 如果一个局部变量命名为 i为可访问的，解析它并停止 如果当前的字段是静态的，跳到6 如果当前的类或者任何它的父类有一个字段命名为 i，解析到它并停止 如果一个静态扩展带有第一个当前类类型的参数可用，解析到它并停止 如果当前的类有一个静态字段命名为 i，解析到它并停止 如果一个枚举构造函数命名为i声明在一个导入的枚举，解析到它并停止 如果一个静态方法 i 被显式导入，解析到它并停止 如果i通过一个小写字母开始，跳到11 如果类型名为 i 是可用的，解析到它并停止 如果表达式不是 untyped模式，跳到14 如果i和这个相等，解析到这个常量并停止 产生一个局部变量命名为 i，解析到它并停止 失败 If i is true, false, this, super or null, resolve to the matching constant and halt. If a local variable named i is accessible, resolve to it and halt. If the current ﬁeld is static, go to 6. If the current class or any of its parent classes has a ﬁeld named i, resolve to it and halt. If a static extension with a ﬁrst argument of the type of the current class is available,resolve to it and halt. If the current class has a static ﬁeld named i, resolve to it and halt. If an enum constructor named i is declared on an imported enum, resolve to it and halt. If a static named i is explicitly imported, resolve to it and halt. If i starts with a lower-case character, go to 11. If a type named i is available, resolve to it and halt. If the expression is not in untyped mode, go to 14 If i equals this , resolve to the this constant and halt. Generate a local variable named i, resolve to it and halt. Fail 对于第10步，也需要定义类型的解析顺序： For step 10, it is also necessary to deﬁne the resolution order of types: 如果一个类型名为 i 被导入（直接或者作为模块的部分导入），解析到它并停止 如果当前的包包含一个模块名为 i和类型名为i，解析到它并停止 如果一个类型名为i在顶层可用，解析到它并停止 失败 If a type named i is imported (directly or as part of a module), resolve to it and halt. If the current package contains a module named i with a type named i, resolve to it and halt. If a type named i is available at top-level, resolve to it and halt. Fail 对于这个算法的第一步，和之前的第5部第7步，导入决议的顺序很重要： For step 1 of this algorithm as well as steps 5 and 7 of the previous one, the order of import resolution is important: 导入的模块和静态扩展从底部到头部检查，第一个匹配的被采用 在一个给定模块，类型从头至尾检查 对于导入，如果名字相同则为匹配 对于静态扩展（第6.3节），如果名字相同并且第一个参数统一（第3.5节）则为匹配。在一个给定类型中被用作静态扩展的字段从头至尾进行检查。 Imported modules and static extensions are checked from bottom to top with the ﬁrst match being picked. Within a given module, types are checked from top to bottom. For imports, a match is made if the name equals. For static extensions (6.3), a match is made if the name equals and the ﬁrst argument uniﬁes (3.5). Within a given type being used as static extension, the ﬁelds are checked from top to bottom."},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{"title":"3.7.3.&#x89E3;&#x6790;&#x987A;&#x5E8F;","path":"\\3.类型系统\\3.7.模块和路径\\3.7.3.解析顺序.html#3-7-3-解析顺序","body":"&#x89E3;&#x6790;&#x987A;&#x5E8F;&#x4E00;&#x88AB;&#x5F15;&#x5165;&#x5C31;&#x6D89;&#x53CA;&#x5230;&#x4E0D;&#x53D7;&#x9650;&#x5236;&#x7684;&#x6807;&#x8BC6;&#x7B26; &#x3002;&#x5982; foo()&#xFF0C;foo=1&#xFF0C;foo.field&#x7B49;&#x8FD9;&#x4E9B;&#x662F;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09;&#x3002;&#x7279;&#x522B;&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5305;&#x62EC;&#x7C7B;&#x4F3C; haxe.ds.StringMap&#x7684;&#x6A21;&#x5757;&#x8DEF;&#x5F84;&#xFF0C;haxe&#x662F;&#x4E00;&#x4E2A;&#x7EDD;&#x5BF9;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#x3002; Resolution order comes into play as soon as unquali&#xFB01;ed identi&#xFB01;ers are involved. These are expressions(5)intheformoffoo(),foo = 1andfoo.field. The last one in particular includes module paths such as haxe.ds.StringMap, where haxe is an unquali&#xFB01;ed identi&#xFB01;er. &#x6211;&#x4EEC;&#x63CF;&#x8FF0;&#x89E3;&#x6790;&#x987A;&#x5E8F;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x53D6;&#x51B3;&#x4E8E;&#x4EE5;&#x4E0B;&#x7684;&#x72B6;&#x6001;&#xFF1A; We describe the resolution order algorithm here, which depends on the following state: &#x58F0;&#x660E;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF08;&#x7B2C;5.10&#x8282;&#xFF09;&#xFF08;&#x5305;&#x62EC;&#x51FD;&#x6570;&#x53C2;&#x6570;&#xFF09; &#x5BFC;&#x5165;&#xFF08;&#x7B2C;3.7.2&#x8282;&#xFF09;&#x7684;&#x6A21;&#x5757;&#xFF0C;&#x7C7B;&#x578B;&#x548C;&#x9759;&#x6001;&#x5B57;&#x6BB5; &#x53EF;&#x7528;&#x7684;&#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09; &#x5F53;&#x524D;&#x5B57;&#x6BB5;&#x7684;&#x79CD;&#x7C7B;&#xFF08;static&#x6216;&#x8005;&#x6210;&#x5458;&#xFF09; &#x5F53;&#x524D;&#x7C7B;&#x53CA;&#x5176;&#x7236;&#x7C7B;&#x58F0;&#x660E;&#x7684;&#x6210;&#x5458;&#x5B57;&#x6BB5; &#x5F53;&#x524D;&#x7C7B;&#x58F0;&#x660E;&#x7684;&#x9759;&#x6001;&#x5B57;&#x6BB5; &#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.6.1&#x8282;&#xFF09; untyped&#x6216;&#x8005;&#x4E0D;&#x662F;untyped&#x7684;&#x8868;&#x8FBE;&#x5F0F; the declared local variables (5.10) (including function arguments) the imported (3.7.2) modules, types and statics the available static extensions (6.3) the kind (static or member) of the current &#xFB01;eld the declared member &#xFB01;elds on the current class and its parent classes the declared static &#xFB01;elds on the current class the expected type (3.6.1) the expression being untyped or not &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6807;&#x8BC6;&#x7B26; i &#xFF0C;&#x7B97;&#x6CD5;&#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A; Given an identi&#xFB01;er i, the algorithm is as follows: &#x5982;&#x679C;i &#x662F;true&#xFF0C;false&#xFF0C;this&#xFF0C;super&#x6216;&#x8005;null&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5339;&#x914D;&#x7684; &#x5E38;&#x91CF;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x547D;&#x540D;&#x4E3A; i&#x4E3A;&#x53EF;&#x8BBF;&#x95EE;&#x7684;&#xFF0C;&#x89E3;&#x6790;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x5F53;&#x524D;&#x7684;&#x5B57;&#x6BB5;&#x662F;&#x9759;&#x6001;&#x7684;&#xFF0C;&#x8DF3;&#x5230;6 &#x5982;&#x679C;&#x5F53;&#x524D;&#x7684;&#x7C7B;&#x6216;&#x8005;&#x4EFB;&#x4F55;&#x5B83;&#x7684;&#x7236;&#x7C7B;&#x6709;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#x547D;&#x540D;&#x4E3A; i&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x6269;&#x5C55;&#x5E26;&#x6709;&#x7B2C;&#x4E00;&#x4E2A;&#x5F53;&#x524D;&#x7C7B;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x53EF;&#x7528;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x5F53;&#x524D;&#x7684;&#x7C7B;&#x6709;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x547D;&#x540D;&#x4E3A; i&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#x547D;&#x540D;&#x4E3A;i&#x58F0;&#x660E;&#x5728;&#x4E00;&#x4E2A;&#x5BFC;&#x5165;&#x7684;&#x679A;&#x4E3E;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5; i &#x88AB;&#x663E;&#x5F0F;&#x5BFC;&#x5165;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;i&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;&#x5F00;&#x59CB;&#xFF0C;&#x8DF3;&#x5230;11 &#x5982;&#x679C;&#x7C7B;&#x578B;&#x540D;&#x4E3A; i &#x662F;&#x53EF;&#x7528;&#x7684;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x8868;&#x8FBE;&#x5F0F;&#x4E0D;&#x662F; untyped&#x6A21;&#x5F0F;&#xFF0C;&#x8DF3;&#x5230;14 &#x5982;&#x679C;i&#x548C;&#x8FD9;&#x4E2A;&#x76F8;&#x7B49;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x8FD9;&#x4E2A;&#x5E38;&#x91CF;&#x5E76;&#x505C;&#x6B62; &#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x547D;&#x540D;&#x4E3A; i&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5931;&#x8D25; If i is true, false, this, super or null, resolve to the matching constant and halt. If a local variable named i is accessible, resolve to it and halt. If the current &#xFB01;eld is static, go to 6. If the current class or any of its parent classes has a &#xFB01;eld named i, resolve to it and halt. If a static extension with a &#xFB01;rst argument of the type of the current class is available,resolve to it and halt. If the current class has a static &#xFB01;eld named i, resolve to it and halt. If an enum constructor named i is declared on an imported enum, resolve to it and halt. If a static named i is explicitly imported, resolve to it and halt. If i starts with a lower-case character, go to 11. If a type named i is available, resolve to it and halt. If the expression is not in untyped mode, go to 14 If i equals this , resolve to the this constant and halt. Generate a local variable named i, resolve to it and halt. Fail &#x5BF9;&#x4E8E;&#x7B2C;10&#x6B65;&#xFF0C;&#x4E5F;&#x9700;&#x8981;&#x5B9A;&#x4E49;&#x7C7B;&#x578B;&#x7684;&#x89E3;&#x6790;&#x987A;&#x5E8F;&#xFF1A; For step 10, it is also necessary to de&#xFB01;ne the resolution order of types: &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x540D;&#x4E3A; i &#x88AB;&#x5BFC;&#x5165;&#xFF08;&#x76F4;&#x63A5;&#x6216;&#x8005;&#x4F5C;&#x4E3A;&#x6A21;&#x5757;&#x7684;&#x90E8;&#x5206;&#x5BFC;&#x5165;&#xFF09;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x5F53;&#x524D;&#x7684;&#x5305;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x540D;&#x4E3A; i&#x548C;&#x7C7B;&#x578B;&#x540D;&#x4E3A;i&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x540D;&#x4E3A;i&#x5728;&#x9876;&#x5C42;&#x53EF;&#x7528;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5931;&#x8D25; If a type named i is imported (directly or as part of a module), resolve to it and halt. If the current package contains a module named i with a type named i, resolve to it and halt. If a type named i is available at top-level, resolve to it and halt. Fail &#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x7B97;&#x6CD5;&#x7684;&#x7B2C;&#x4E00;&#x6B65;&#xFF0C;&#x548C;&#x4E4B;&#x524D;&#x7684;&#x7B2C;5&#x90E8;&#x7B2C;7&#x6B65;&#xFF0C;&#x5BFC;&#x5165;&#x51B3;&#x8BAE;&#x7684;&#x987A;&#x5E8F;&#x5F88;&#x91CD;&#x8981;&#xFF1A; For step 1 of this algorithm as well as steps 5 and 7 of the previous one, the order of import resolution is important: &#x5BFC;&#x5165;&#x7684;&#x6A21;&#x5757;&#x548C;&#x9759;&#x6001;&#x6269;&#x5C55;&#x4ECE;&#x5E95;&#x90E8;&#x5230;&#x5934;&#x90E8;&#x68C0;&#x67E5;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x88AB;&#x91C7;&#x7528; &#x5728;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x6A21;&#x5757;&#xFF0C;&#x7C7B;&#x578B;&#x4ECE;&#x5934;&#x81F3;&#x5C3E;&#x68C0;&#x67E5; &#x5BF9;&#x4E8E;&#x5BFC;&#x5165;&#xFF0C;&#x5982;&#x679C;&#x540D;&#x5B57;&#x76F8;&#x540C;&#x5219;&#x4E3A;&#x5339;&#x914D; &#x5BF9;&#x4E8E;&#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x540D;&#x5B57;&#x76F8;&#x540C;&#x5E76;&#x4E14;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09;&#x5219;&#x4E3A;&#x5339;&#x914D;&#x3002;&#x5728;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x7C7B;&#x578B;&#x4E2D;&#x88AB;&#x7528;&#x4F5C;&#x9759;&#x6001;&#x6269;&#x5C55;&#x7684;&#x5B57;&#x6BB5;&#x4ECE;&#x5934;&#x81F3;&#x5C3E;&#x8FDB;&#x884C;&#x68C0;&#x67E5;&#x3002; Imported modules and static extensions are checked from bottom to top with the &#xFB01;rst match being picked. Within a given module, types are checked from top to bottom. For imports, a match is made if the name equals. For static extensions (6.3), a match is made if the name equals and the &#xFB01;rst argument uni&#xFB01;es (3.5). Within a given type being used as static extension, the &#xFB01;elds are checked from top to bottom."},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html":{"title":"","path":"\\4.类字段\\4.2.属性\\4.2.1.常见访问标识符组合.html","body":"4.2.1.常见访问标识符组合 下一个例子展示了属性常用的访问标识符组合： The next example shows common access identiﬁer combinations for properties: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Main  // 从外部可读取，只在Main中写入 public var ro( default , null ): Int ; // 从外部写入，只在Main中读取 public var wo( null , default ): Int ; // 通过 getter 和 setter 访问 // get_x &amp; set_x public var x( get , set ): Int ; // 通过 getter 读取，不可写入 public var y( get , never ): Int ; // 被字段 x 需要 function get_x () return 1 ; // 被字段 x 需要 function set_x (x) return x; // 被字段 y 需要 function get_y () return 1 ; function new ()  var v = x; x = 2 ; x += 1 ;  static public function main ()  new Main ();   JavaScript 输出帮助我们理解 main 方法中的字段访问被编译为： The JavaScript output helps understand what the ﬁeld access in the main-method is compiled to: 1 2 3 4 5 6 var Main = function ()  var v = this .get_x(); this .set_x( 2 ); var _g = this ; _g.set_x(_g.get_x() + 1 ); ; 就像说明的，读取访问生成一个get_x()的调用，而写入访问生成 set_x(2)的调用，2即为被赋值到x 的值。 +=生成的方式可能看起来有点奇怪，但是可以通过下面的例子很容易的证明： As speciﬁed, the read access generates a call to get_x(), while the write access generates a call to set_x(2) where 2 is the value being assigned to x. The way the += is being generated might look a little odd at ﬁrst, but can easily be justiﬁed by the following example: 1 2 3 4 5 6 7 8 9 10 11 class Main  public var x( get , set ): Int ; function get_x () return 1 ; function set_x (x) return x; public function new ()   static public function main ()  new Main ().x += 1 ;   这里发生的是，字段的表达式部分在main方法中访问x是复杂的：它有潜在的副作用，如本例中Main的构建。因此，编译器不能生成 += 操作符 为 new Main().x = new Main().x+1， 而且必须缓存复杂的表达式到一个局部变量： What happens here is that the expression part of the ﬁeld access to x in the main method is complex: It has potential side-effects, such as the construction of Main in this case. Thus, the compiler can not generate the += operationas new Main().x = new Main().x + 1 andhas to cache the complex expression in a local variable: 1 2 3 4 Main.main = function ()  var _g = new Main (); _g.set_x(_g.get_x() + 1 ); "},"4.类字段/4.2.属性/4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合":{"title":"4.2.1.&#x5E38;&#x89C1;&#x8BBF;&#x95EE;&#x6807;&#x8BC6;&#x7B26;&#x7EC4;&#x5408;","path":"\\4.类字段\\4.2.属性\\4.2.1.常见访问标识符组合.html#4-2-1-常见访问标识符组合","body":"&#x4E0B;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x5C55;&#x793A;&#x4E86;&#x5C5E;&#x6027;&#x5E38;&#x7528;&#x7684;&#x8BBF;&#x95EE;&#x6807;&#x8BC6;&#x7B26;&#x7EC4;&#x5408;&#xFF1A; The next example shows common access identi&#xFB01;er combinations for properties: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Main { // &#x4ECE;&#x5916;&#x90E8;&#x53EF;&#x8BFB;&#x53D6;&#xFF0C;&#x53EA;&#x5728;Main&#x4E2D;&#x5199;&#x5165; public var ro( default , null ): Int ; // &#x4ECE;&#x5916;&#x90E8;&#x5199;&#x5165;&#xFF0C;&#x53EA;&#x5728;Main&#x4E2D;&#x8BFB;&#x53D6; public var wo( null , default ): Int ; // &#x901A;&#x8FC7; getter &#x548C; setter &#x8BBF;&#x95EE; // get_x &amp; set_x public var x( get , set ): Int ; // &#x901A;&#x8FC7; getter &#x8BFB;&#x53D6;&#xFF0C;&#x4E0D;&#x53EF;&#x5199;&#x5165; public var y( get , never ): Int ; // &#x88AB;&#x5B57;&#x6BB5; x &#x9700;&#x8981; function get_x () return 1 ; // &#x88AB;&#x5B57;&#x6BB5; x &#x9700;&#x8981; function set_x (x) return x; // &#x88AB;&#x5B57;&#x6BB5; y &#x9700;&#x8981; function get_y () return 1 ; function new () { var v = x; x = 2 ; x += 1 ; } static public function main () { new Main (); } } JavaScript &#x8F93;&#x51FA;&#x5E2E;&#x52A9;&#x6211;&#x4EEC;&#x7406;&#x89E3; main &#x65B9;&#x6CD5;&#x4E2D;&#x7684;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x88AB;&#x7F16;&#x8BD1;&#x4E3A;&#xFF1A; The JavaScript output helps understand what the &#xFB01;eld access in the main-method is compiled to: 1 2 3 4 5 6 var Main = function () { var v = this .get_x(); this .set_x( 2 ); var _g = this ; _g.set_x(_g.get_x() + 1 ); }; &#x5C31;&#x50CF;&#x8BF4;&#x660E;&#x7684;&#xFF0C;&#x8BFB;&#x53D6;&#x8BBF;&#x95EE;&#x751F;&#x6210;&#x4E00;&#x4E2A;get_x()&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x800C;&#x5199;&#x5165;&#x8BBF;&#x95EE;&#x751F;&#x6210; set_x(2)&#x7684;&#x8C03;&#x7528;&#xFF0C;2&#x5373;&#x4E3A;&#x88AB;&#x8D4B;&#x503C;&#x5230;x &#x7684;&#x503C;&#x3002; +=&#x751F;&#x6210;&#x7684;&#x65B9;&#x5F0F;&#x53EF;&#x80FD;&#x770B;&#x8D77;&#x6765;&#x6709;&#x70B9;&#x5947;&#x602A;&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x5F88;&#x5BB9;&#x6613;&#x7684;&#x8BC1;&#x660E;&#xFF1A; As speci&#xFB01;ed, the read access generates a call to get_x(), while the write access generates a call to set_x(2) where 2 is the value being assigned to x. The way the += is being generated might look a little odd at &#xFB01;rst, but can easily be justi&#xFB01;ed by the following example: 1 2 3 4 5 6 7 8 9 10 11 class Main { public var x( get , set ): Int ; function get_x () return 1 ; function set_x (x) return x; public function new () { } static public function main () { new Main ().x += 1 ; } } &#x8FD9;&#x91CC;&#x53D1;&#x751F;&#x7684;&#x662F;&#xFF0C;&#x5B57;&#x6BB5;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x90E8;&#x5206;&#x5728;main&#x65B9;&#x6CD5;&#x4E2D;&#x8BBF;&#x95EE;x&#x662F;&#x590D;&#x6742;&#x7684;&#xFF1A;&#x5B83;&#x6709;&#x6F5C;&#x5728;&#x7684;&#x526F;&#x4F5C;&#x7528;&#xFF0C;&#x5982;&#x672C;&#x4F8B;&#x4E2D;Main&#x7684;&#x6784;&#x5EFA;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4E0D;&#x80FD;&#x751F;&#x6210; += &#x64CD;&#x4F5C;&#x7B26; &#x4E3A; new Main().x = new Main().x+1&#xFF0C; &#x800C;&#x4E14;&#x5FC5;&#x987B;&#x7F13;&#x5B58;&#x590D;&#x6742;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5230;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF1A; What happens here is that the expression part of the &#xFB01;eld access to x in the main method is complex: It has potential side-effects, such as the construction of Main in this case. Thus, the compiler can not generate the += operationas new Main().x = new Main().x + 1 andhas to cache the complex expression in a local variable: 1 2 3 4 Main.main = function () { var _g = new Main (); _g.set_x(_g.get_x() + 1 ); }"},"4.类字段/4.1.变量/4.1.变量.html":{"title":"","path":"\\4.类字段\\4.1.变量\\4.1.变量.html","body":"4.1.变量 我们已经在前面章节的一些代码示例中看过变量字段了。变量字段保存值，是它们和大多数（非所有）属性共有的特点： We have already seen variable ﬁelds in several code examples of previous sections. Variable ﬁelds hold values, a characteristic which they share with most (but not all) properties: 1 2 3 4 5 6 7 8 9 class Main  static var member: String = \"bar\" ; public static function main ()  trace (member); member = \"foo\" ; trace (member);   从这里我们可以了解到关于变量的几点： We can learn from this that a variable 有一个名称（member） 有一个类型（String） 可能有一个常量值的初始化（“bar”） 可能有访问修饰符（第4.4节）（static） has a name (here: member), has a type (here: String), may have a constant initialization (here: “bar”) and may have access modiﬁers (4.4) (here: static) 例子首先输出member的初始值，然后在输出新的值之前设置它为 foo 。访问修饰符的影响是在所有三种类之间共享，将在单独的章节讲解。 The example ﬁrst prints the initialization value of member,then sets it to “foo” before printing its new value. The effect of access modiﬁers is shared by all three class ﬁeld kinds and explained in a separate section. 可能注意到，显式的类型并不是必须的，如果有一个初始化的值。这个情况下编译器会推断它为恰当的类型。 It should be noted that the explicit type is not required if there is an initialization value. The compiler will infer (3.6) it in this case."},"4.类字段/4.1.变量/4.1.变量.html#4-1-变量":{"title":"4.1.&#x53D8;&#x91CF;","path":"\\4.类字段\\4.1.变量\\4.1.变量.html#4-1-变量","body":"&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x5728;&#x524D;&#x9762;&#x7AE0;&#x8282;&#x7684;&#x4E00;&#x4E9B;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x4E2D;&#x770B;&#x8FC7;&#x53D8;&#x91CF;&#x5B57;&#x6BB5;&#x4E86;&#x3002;&#x53D8;&#x91CF;&#x5B57;&#x6BB5;&#x4FDD;&#x5B58;&#x503C;&#xFF0C;&#x662F;&#x5B83;&#x4EEC;&#x548C;&#x5927;&#x591A;&#x6570;&#xFF08;&#x975E;&#x6240;&#x6709;&#xFF09;&#x5C5E;&#x6027;&#x5171;&#x6709;&#x7684;&#x7279;&#x70B9;&#xFF1A; We have already seen variable &#xFB01;elds in several code examples of previous sections. Variable &#xFB01;elds hold values, a characteristic which they share with most (but not all) properties: 1 2 3 4 5 6 7 8 9 class Main { static var member: String = bar ; public static function main () { trace (member); member = foo ; trace (member); } } &#x4ECE;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4E86;&#x89E3;&#x5230;&#x5173;&#x4E8E;&#x53D8;&#x91CF;&#x7684;&#x51E0;&#x70B9;&#xFF1A; We can learn from this that a variable &#x6709;&#x4E00;&#x4E2A;&#x540D;&#x79F0;&#xFF08;member&#xFF09; &#x6709;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#xFF08;String&#xFF09; &#x53EF;&#x80FD;&#x6709;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;&#x503C;&#x7684;&#x521D;&#x59CB;&#x5316;&#xFF08;&#x201C;bar&#x201D;&#xFF09; &#x53EF;&#x80FD;&#x6709;&#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;&#xFF08;&#x7B2C;4.4&#x8282;&#xFF09;&#xFF08;static&#xFF09; has a name (here: member), has a type (here: String), may have a constant initialization (here: &#x201C;bar&#x201D;) and may have access modi&#xFB01;ers (4.4) (here: static) &#x4F8B;&#x5B50;&#x9996;&#x5148;&#x8F93;&#x51FA;member&#x7684;&#x521D;&#x59CB;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x8F93;&#x51FA;&#x65B0;&#x7684;&#x503C;&#x4E4B;&#x524D;&#x8BBE;&#x7F6E;&#x5B83;&#x4E3A; foo &#x3002;&#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;&#x7684;&#x5F71;&#x54CD;&#x662F;&#x5728;&#x6240;&#x6709;&#x4E09;&#x79CD;&#x7C7B;&#x4E4B;&#x95F4;&#x5171;&#x4EAB;&#xFF0C;&#x5C06;&#x5728;&#x5355;&#x72EC;&#x7684;&#x7AE0;&#x8282;&#x8BB2;&#x89E3;&#x3002; The example &#xFB01;rst prints the initialization value of member,then sets it to &#x201C;foo&#x201D; before printing its new value. The effect of access modi&#xFB01;ers is shared by all three class &#xFB01;eld kinds and explained in a separate section. &#x53EF;&#x80FD;&#x6CE8;&#x610F;&#x5230;&#xFF0C;&#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5E76;&#x4E0D;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x521D;&#x59CB;&#x5316;&#x7684;&#x503C;&#x3002;&#x8FD9;&#x4E2A;&#x60C5;&#x51B5;&#x4E0B;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x63A8;&#x65AD;&#x5B83;&#x4E3A;&#x6070;&#x5F53;&#x7684;&#x7C7B;&#x578B;&#x3002; It should be noted that the explicit type is not required if there is an initialization value. The compiler will infer (3.6) it in this case."},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html":{"title":"","path":"\\4.类字段\\4.2.属性\\4.2.3.getter和setter的规则.html","body":"4.2.3.getter和setter的规则 存取器方法的可见性不会影响属性的可得到与否。也就是说，如果一个属性是 public 的而且定义为有一个 getter ，不管如何 那个getter 会自我定义为private。 Visibility of accessor methods has no effect on the accessibility of its property. That is, if a property is public and deﬁned to have a getter, that getter may me deﬁned as private regardless. getter 和setter 可以访问它们的数据存储的物理字段。编译器确保这类的字段访问，如果从存取器方法本身做出，不会通过存取器方法，从而避免无限递归： Both getter and setter may access their physical ﬁeld for data storage. The compiler ensures that this kind of ﬁeld access does not go through the accessor method if made from within the accessor method itself, thus avoiding inﬁnite recursion: 1 2 3 4 5 6 7 8 9 class Main  public var x( default , set ): Int ; function set_x ( new X )  return x = new X ;  static public function main ()   然而，编译器只有如果至少一个访问标识符是default或者null的时候假设一个物理字段存在。 However, the compiler assumes that a physical ﬁeld exists only if at least one of the access identiﬁers is default or null. 物理字段 定义：物理字段 一个字段在如下任何一个情况被认为是物理的： 一个变量（第4.1节） 一个属性（第4.2节）带有 读取访问或者写入访问标识符为default或者null 一个属性带有 :isVar 元数据（第6.9节） [warning] Deﬁnition: Physical ﬁeld A ﬁeld is considered to be physical if it is either [warning] a variable (4.1) [warning] a property (4.2) with the read-access or write-access identiﬁer being default or null [warning] * a property (4.2) with :isVar metadata (6.9) 如果不是这种情况，从一个存取器内部访问字段导致一个编译错误： If this is not the case,access to the ﬁeld from within an accessor method causes a compilation error: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Main  // This field cannot be accessed because it is not a real variable public var x( get , set ): Int ; function get_x ()  return x;  function set_x (x)  return this .x = x;  static public function main ()   如果一个物理字段是真实准备的，它可以通过归于讨论的字段被强制与 :isVar 元数据。 If a physical ﬁeld is indeed intended,it can be forced by attributing the ﬁeld in question with the :isVar metadata (6.9): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Main  // @isVar forces the field to be physical allowing the program to compile. @:isVar public var x(get, set):Int; function get_x ()  return x;  function set_x (x)  return this .x = x;  static public function main ()   花絮 ：属性的 setter 类型 并不少见新的Haxe用户被setter的类型需要是T-T而不是看起来更自然的T-Void类型惊讶到。毕竟，为什么一个setter需要返回些什么呢？基本原理是，我们仍然想要可以是i用字段分配使用setter为右手表达式。给定一个链如 x=y=1 ，执行为 x=(y=1) 。为了赋值y=1的结果到x，形式必须有一个值。如果 y 有一个setter 返回Void，这是不可能的。 [warning] Trivia: Property setter type It is not uncommon for new Haxe users to be surprised by the type of a setter being required to be T-T instead of the seemingly more natural T-Void. After all, why would a setter have to return something? The rationale is that we still want to be able to use ﬁeld assignments using setters as rightside expressions. Given a chain like x = y = 1, it is evaluated as x = (y = 1). In order to assign the result of y = 1 to x, the former must have a value. If y had a setter returning Void, this would not be possible."},"4.类字段/4.2.属性/4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则":{"title":"4.2.3.getter&#x548C;setter&#x7684;&#x89C4;&#x5219;","path":"\\4.类字段\\4.2.属性\\4.2.3.getter和setter的规则.html#4-2-3-getter和setter的规则","body":"&#x5B58;&#x53D6;&#x5668;&#x65B9;&#x6CD5;&#x7684;&#x53EF;&#x89C1;&#x6027;&#x4E0D;&#x4F1A;&#x5F71;&#x54CD;&#x5C5E;&#x6027;&#x7684;&#x53EF;&#x5F97;&#x5230;&#x4E0E;&#x5426;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#x662F; public &#x7684;&#x800C;&#x4E14;&#x5B9A;&#x4E49;&#x4E3A;&#x6709;&#x4E00;&#x4E2A; getter &#xFF0C;&#x4E0D;&#x7BA1;&#x5982;&#x4F55; &#x90A3;&#x4E2A;getter &#x4F1A;&#x81EA;&#x6211;&#x5B9A;&#x4E49;&#x4E3A;private&#x3002; Visibility of accessor methods has no effect on the accessibility of its property. That is, if a property is public and de&#xFB01;ned to have a getter, that getter may me de&#xFB01;ned as private regardless. getter &#x548C;setter &#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x5B83;&#x4EEC;&#x7684;&#x6570;&#x636E;&#x5B58;&#x50A8;&#x7684;&#x7269;&#x7406;&#x5B57;&#x6BB5;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x786E;&#x4FDD;&#x8FD9;&#x7C7B;&#x7684;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#xFF0C;&#x5982;&#x679C;&#x4ECE;&#x5B58;&#x53D6;&#x5668;&#x65B9;&#x6CD5;&#x672C;&#x8EAB;&#x505A;&#x51FA;&#xFF0C;&#x4E0D;&#x4F1A;&#x901A;&#x8FC7;&#x5B58;&#x53D6;&#x5668;&#x65B9;&#x6CD5;&#xFF0C;&#x4ECE;&#x800C;&#x907F;&#x514D;&#x65E0;&#x9650;&#x9012;&#x5F52;&#xFF1A; Both getter and setter may access their physical &#xFB01;eld for data storage. The compiler ensures that this kind of &#xFB01;eld access does not go through the accessor method if made from within the accessor method itself, thus avoiding in&#xFB01;nite recursion: 1 2 3 4 5 6 7 8 9 class Main { public var x( default , set ): Int ; function set_x ( new X ) { return x = new X ; } static public function main () {} } &#x7136;&#x800C;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x53EA;&#x6709;&#x5982;&#x679C;&#x81F3;&#x5C11;&#x4E00;&#x4E2A;&#x8BBF;&#x95EE;&#x6807;&#x8BC6;&#x7B26;&#x662F;default&#x6216;&#x8005;null&#x7684;&#x65F6;&#x5019;&#x5047;&#x8BBE;&#x4E00;&#x4E2A;&#x7269;&#x7406;&#x5B57;&#x6BB5;&#x5B58;&#x5728;&#x3002; However, the compiler assumes that a physical &#xFB01;eld exists only if at least one of the access identi&#xFB01;ers is default or null. &#x7269;&#x7406;&#x5B57;&#x6BB5; &#x5B9A;&#x4E49;&#xFF1A;&#x7269;&#x7406;&#x5B57;&#x6BB5; &#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#x5728;&#x5982;&#x4E0B;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x60C5;&#x51B5;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x7269;&#x7406;&#x7684;&#xFF1A; &#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#xFF08;&#x7B2C;4.1&#x8282;&#xFF09; &#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#x5E26;&#x6709; &#x8BFB;&#x53D6;&#x8BBF;&#x95EE;&#x6216;&#x8005;&#x5199;&#x5165;&#x8BBF;&#x95EE;&#x6807;&#x8BC6;&#x7B26;&#x4E3A;default&#x6216;&#x8005;null &#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#x5E26;&#x6709; :isVar &#x5143;&#x6570;&#x636E;&#xFF08;&#x7B2C;6.9&#x8282;&#xFF09; [warning] De&#xFB01;nition: Physical &#xFB01;eld A &#xFB01;eld is considered to be physical if it is either [warning] a variable (4.1) [warning] a property (4.2) with the read-access or write-access identi&#xFB01;er being default or null [warning] * a property (4.2) with :isVar metadata (6.9) &#x5982;&#x679C;&#x4E0D;&#x662F;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x4ECE;&#x4E00;&#x4E2A;&#x5B58;&#x53D6;&#x5668;&#x5185;&#x90E8;&#x8BBF;&#x95EE;&#x5B57;&#x6BB5;&#x5BFC;&#x81F4;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x9519;&#x8BEF;&#xFF1A; If this is not the case,access to the &#xFB01;eld from within an accessor method causes a compilation error: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Main { // This field cannot be accessed because it is not a real variable public var x( get , set ): Int ; function get_x () { return x; } function set_x (x) { return this .x = x; } static public function main () {} } &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7269;&#x7406;&#x5B57;&#x6BB5;&#x662F;&#x771F;&#x5B9E;&#x51C6;&#x5907;&#x7684;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5F52;&#x4E8E;&#x8BA8;&#x8BBA;&#x7684;&#x5B57;&#x6BB5;&#x88AB;&#x5F3A;&#x5236;&#x4E0E; :isVar &#x5143;&#x6570;&#x636E;&#x3002; If a physical &#xFB01;eld is indeed intended,it can be forced by attributing the &#xFB01;eld in question with the :isVar metadata (6.9): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Main { // @isVar forces the field to be physical allowing the program to compile. @:isVar public var x(get, set):Int; function get_x () { return x; } function set_x (x) { return this .x = x; } static public function main () {} } &#x82B1;&#x7D6E; &#xFF1A;&#x5C5E;&#x6027;&#x7684; setter &#x7C7B;&#x578B; &#x5E76;&#x4E0D;&#x5C11;&#x89C1;&#x65B0;&#x7684;Haxe&#x7528;&#x6237;&#x88AB;setter&#x7684;&#x7C7B;&#x578B;&#x9700;&#x8981;&#x662F;T-T&#x800C;&#x4E0D;&#x662F;&#x770B;&#x8D77;&#x6765;&#x66F4;&#x81EA;&#x7136;&#x7684;T-Void&#x7C7B;&#x578B;&#x60CA;&#x8BB6;&#x5230;&#x3002;&#x6BD5;&#x7ADF;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x4E00;&#x4E2A;setter&#x9700;&#x8981;&#x8FD4;&#x56DE;&#x4E9B;&#x4EC0;&#x4E48;&#x5462;&#xFF1F;&#x57FA;&#x672C;&#x539F;&#x7406;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x4ECD;&#x7136;&#x60F3;&#x8981;&#x53EF;&#x4EE5;&#x662F;i&#x7528;&#x5B57;&#x6BB5;&#x5206;&#x914D;&#x4F7F;&#x7528;setter&#x4E3A;&#x53F3;&#x624B;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x94FE;&#x5982; x=y=1 &#xFF0C;&#x6267;&#x884C;&#x4E3A; x=(y=1) &#x3002;&#x4E3A;&#x4E86;&#x8D4B;&#x503C;y=1&#x7684;&#x7ED3;&#x679C;&#x5230;x&#xFF0C;&#x5F62;&#x5F0F;&#x5FC5;&#x987B;&#x6709;&#x4E00;&#x4E2A;&#x503C;&#x3002;&#x5982;&#x679C; y &#x6709;&#x4E00;&#x4E2A;setter &#x8FD4;&#x56DE;Void&#xFF0C;&#x8FD9;&#x662F;&#x4E0D;&#x53EF;&#x80FD;&#x7684;&#x3002; [warning] Trivia: Property setter type It is not uncommon for new Haxe users to be surprised by the type of a setter being required to be T-T instead of the seemingly more natural T-Void. After all, why would a setter have to return something? The rationale is that we still want to be able to use &#xFB01;eld assignments using setters as rightside expressions. Given a chain like x = y = 1, it is evaluated as x = (y = 1). In order to assign the result of y = 1 to x, the former must have a value. If y had a setter returning Void, this would not be possible."},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html":{"title":"","path":"\\4.类字段\\4.2.属性\\4.2.2.对类型系统的影响.html","body":"4.2.2.对类型系统的影响 属性的出现有对类型系统的一些影响。最重要的是，有必要理解属性是一个编译时功能，因此需要类型是已知的。如果我们要分配一个类的属性为Dynamic，字段访问不会遵守存取器方法。同样，访问限制不再应用，所有的访问是几乎公开的。 The presence of properties has several consequences on the type system. Most importantly, it is necessary to understand that properties are a compile-time feature and thus require the types to be known. If we were to assign a class with properties to Dynamic, ﬁeld access would not respect accessor methods. Likewise,access restrictions no longer apply and all access is virtually public. 当使用get 或者set 访问标识符，编译器确保getter 和setter实际上存在。下面的问题不会编译： Whenusing get or set accessidentiﬁer,the compiler ensures that the getter and setter actually exists. The following problem does not compile: 1 2 3 4 5 class Main  // Method get_x required by property x is missing public var x( get , null ): Int ; static public function main ()   方法 get_x 丢失了，但是它不必被定义到属性自己的类定义中，只要一个父类中定义了它： The method get_x is missing, but it need not be declared on the class deﬁning the property itself as long as a parent class deﬁnes it: 1 2 3 4 5 6 7 8 9 class Base  public function get_x () return 1 ;  class Main extends Base  // ok, get_x is declared by parent class public var x( get , null ): Int ; static public function main ()   dynamic 访问修饰符正常的工作就像get 或者 set，但是不会检查存在与否。 The dynamic access modiﬁer works exactly like get or set, but does not check for the existence"},"4.类字段/4.2.属性/4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响":{"title":"4.2.2.&#x5BF9;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x7684;&#x5F71;&#x54CD;","path":"\\4.类字段\\4.2.属性\\4.2.2.对类型系统的影响.html#4-2-2-对类型系统的影响","body":"&#x5C5E;&#x6027;&#x7684;&#x51FA;&#x73B0;&#x6709;&#x5BF9;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x7684;&#x4E00;&#x4E9B;&#x5F71;&#x54CD;&#x3002;&#x6700;&#x91CD;&#x8981;&#x7684;&#x662F;&#xFF0C;&#x6709;&#x5FC5;&#x8981;&#x7406;&#x89E3;&#x5C5E;&#x6027;&#x662F;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x65F6;&#x529F;&#x80FD;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x7C7B;&#x578B;&#x662F;&#x5DF2;&#x77E5;&#x7684;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8981;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5C5E;&#x6027;&#x4E3A;Dynamic&#xFF0C;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x4E0D;&#x4F1A;&#x9075;&#x5B88;&#x5B58;&#x53D6;&#x5668;&#x65B9;&#x6CD5;&#x3002;&#x540C;&#x6837;&#xFF0C;&#x8BBF;&#x95EE;&#x9650;&#x5236;&#x4E0D;&#x518D;&#x5E94;&#x7528;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x8BBF;&#x95EE;&#x662F;&#x51E0;&#x4E4E;&#x516C;&#x5F00;&#x7684;&#x3002; The presence of properties has several consequences on the type system. Most importantly, it is necessary to understand that properties are a compile-time feature and thus require the types to be known. If we were to assign a class with properties to Dynamic, &#xFB01;eld access would not respect accessor methods. Likewise,access restrictions no longer apply and all access is virtually public. &#x5F53;&#x4F7F;&#x7528;get &#x6216;&#x8005;set &#x8BBF;&#x95EE;&#x6807;&#x8BC6;&#x7B26;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x786E;&#x4FDD;getter &#x548C;setter&#x5B9E;&#x9645;&#x4E0A;&#x5B58;&#x5728;&#x3002;&#x4E0B;&#x9762;&#x7684;&#x95EE;&#x9898;&#x4E0D;&#x4F1A;&#x7F16;&#x8BD1;&#xFF1A; Whenusing get or set accessidenti&#xFB01;er,the compiler ensures that the getter and setter actually exists. The following problem does not compile: 1 2 3 4 5 class Main { // Method get_x required by property x is missing public var x( get , null ): Int ; static public function main () {} } &#x65B9;&#x6CD5; get_x &#x4E22;&#x5931;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x4E0D;&#x5FC5;&#x88AB;&#x5B9A;&#x4E49;&#x5230;&#x5C5E;&#x6027;&#x81EA;&#x5DF1;&#x7684;&#x7C7B;&#x5B9A;&#x4E49;&#x4E2D;&#xFF0C;&#x53EA;&#x8981;&#x4E00;&#x4E2A;&#x7236;&#x7C7B;&#x4E2D;&#x5B9A;&#x4E49;&#x4E86;&#x5B83;&#xFF1A; The method get_x is missing, but it need not be declared on the class de&#xFB01;ning the property itself as long as a parent class de&#xFB01;nes it: 1 2 3 4 5 6 7 8 9 class Base { public function get_x () return 1 ; } class Main extends Base { // ok, get_x is declared by parent class public var x( get , null ): Int ; static public function main () {} } dynamic &#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;&#x6B63;&#x5E38;&#x7684;&#x5DE5;&#x4F5C;&#x5C31;&#x50CF;get &#x6216;&#x8005; set&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x4F1A;&#x68C0;&#x67E5;&#x5B58;&#x5728;&#x4E0E;&#x5426;&#x3002; The dynamic access modi&#xFB01;er works exactly like get or set, but does not check for the existence"},"4.类字段/4.3.方法/4.3.1.重写方法.html":{"title":"","path":"\\4.类字段\\4.3.方法\\4.3.1.重写方法.html","body":"4.3.1.重写方法 重写字段是创建类的层级的结构。许多设计模式使用到它，但是这里我们只探索基本的功能。为了在类中使用重写，需要这个类有一个父类（第2.3.2）。思考下面的例子： Overriding ﬁelds is instrumental for creating class hierarchies. Many design patterns utilize it, but here we will explore only the basic functionality. In order to use overrides in a class, it is required that this class has a parent class (2.3.2). Let us consider the following example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Base  public function new ()   public function myMethod ()  return \"Base\" ;   class Child extends Base  public override function myMethod ()  return \"Child\" ;   class Main  static public function main ()  var child: Base = new Child (); trace (child.myMethod()); // Child   这里重要的组件是： The important components here are: Base 类，有一个方法 myMethod和一个构造函数 Child类，继承Base类也有一个方法 myMethod，通过 override关键字声明 Main 类，它的main方法创建一个Child类的实例，分配它到一个变量 child ，显式的声明类型为Base，然后在其上调用 myMethod() the class Base which has a method myMethod and a constructor, the class Child which extends Base and also has a method myMethod being declared with override, and the Main class whose main method creates an instance of Child, assigns it to a variable child of explicit type Base and calls myMethod() on it. 变量 child 被显式的类型化为 Base 来突出一个重要的不同：在编译器时类型被认为是 Base，但是运行时仍然查找正确的方法即类Child中的 myMethod。这是因为字段访问是在运行时动态解析的。 The variable child is explicitly typed as Base to highlight an important difference: At compile-time the type is known to be Base,but the runtime still ﬁnds the correct method myMethod on class Child. This is because ﬁeld access is resolved dynamically at runtime. Child 类可以访问它重载的方法，通过调用 super.methodName()： The Child class can access methods it has overriden by calling super.methodName(): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Base  public function new ()   public function myMethod ()  return \"Base\" ;   class Child extends Base  public override function myMethod ()  return \"Child\" ;  public function callHome ()  return super .myMethod();   class Main  static public function main ()  var child = new Child (); trace (child.callHome()); // Base   继承（第2.3.2节）中解释了super()在一个新的构造函数中的使用。 The section on Inheritance (Section 2.3.2) explains the use of super() from within a new constructor."},"4.类字段/4.3.方法/4.3.1.重写方法.html#4-3-1-重写方法":{"title":"4.3.1.&#x91CD;&#x5199;&#x65B9;&#x6CD5;","path":"\\4.类字段\\4.3.方法\\4.3.1.重写方法.html#4-3-1-重写方法","body":"&#x91CD;&#x5199;&#x5B57;&#x6BB5;&#x662F;&#x521B;&#x5EFA;&#x7C7B;&#x7684;&#x5C42;&#x7EA7;&#x7684;&#x7ED3;&#x6784;&#x3002;&#x8BB8;&#x591A;&#x8BBE;&#x8BA1;&#x6A21;&#x5F0F;&#x4F7F;&#x7528;&#x5230;&#x5B83;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EA;&#x63A2;&#x7D22;&#x57FA;&#x672C;&#x7684;&#x529F;&#x80FD;&#x3002;&#x4E3A;&#x4E86;&#x5728;&#x7C7B;&#x4E2D;&#x4F7F;&#x7528;&#x91CD;&#x5199;&#xFF0C;&#x9700;&#x8981;&#x8FD9;&#x4E2A;&#x7C7B;&#x6709;&#x4E00;&#x4E2A;&#x7236;&#x7C7B;&#xFF08;&#x7B2C;2.3.2&#xFF09;&#x3002;&#x601D;&#x8003;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#xFF1A; Overriding &#xFB01;elds is instrumental for creating class hierarchies. Many design patterns utilize it, but here we will explore only the basic functionality. In order to use overrides in a class, it is required that this class has a parent class (2.3.2). Let us consider the following example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Base { public function new () { } public function myMethod () { return Base ; } } class Child extends Base { public override function myMethod () { return Child ; } } class Main { static public function main () { var child: Base = new Child (); trace (child.myMethod()); // Child } } &#x8FD9;&#x91CC;&#x91CD;&#x8981;&#x7684;&#x7EC4;&#x4EF6;&#x662F;&#xFF1A; The important components here are: Base &#x7C7B;&#xFF0C;&#x6709;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5; myMethod&#x548C;&#x4E00;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570; Child&#x7C7B;&#xFF0C;&#x7EE7;&#x627F;Base&#x7C7B;&#x4E5F;&#x6709;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5; myMethod&#xFF0C;&#x901A;&#x8FC7; override&#x5173;&#x952E;&#x5B57;&#x58F0;&#x660E; Main &#x7C7B;&#xFF0C;&#x5B83;&#x7684;main&#x65B9;&#x6CD5;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;Child&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x5206;&#x914D;&#x5B83;&#x5230;&#x4E00;&#x4E2A;&#x53D8;&#x91CF; child &#xFF0C;&#x663E;&#x5F0F;&#x7684;&#x58F0;&#x660E;&#x7C7B;&#x578B;&#x4E3A;Base&#xFF0C;&#x7136;&#x540E;&#x5728;&#x5176;&#x4E0A;&#x8C03;&#x7528; myMethod() the class Base which has a method myMethod and a constructor, the class Child which extends Base and also has a method myMethod being declared with override, and the Main class whose main method creates an instance of Child, assigns it to a variable child of explicit type Base and calls myMethod() on it. &#x53D8;&#x91CF; child &#x88AB;&#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5316;&#x4E3A; Base &#x6765;&#x7A81;&#x51FA;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x4E0D;&#x540C;&#xFF1A;&#x5728;&#x7F16;&#x8BD1;&#x5668;&#x65F6;&#x7C7B;&#x578B;&#x88AB;&#x8BA4;&#x4E3A;&#x662F; Base&#xFF0C;&#x4F46;&#x662F;&#x8FD0;&#x884C;&#x65F6;&#x4ECD;&#x7136;&#x67E5;&#x627E;&#x6B63;&#x786E;&#x7684;&#x65B9;&#x6CD5;&#x5373;&#x7C7B;Child&#x4E2D;&#x7684; myMethod&#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x662F;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x52A8;&#x6001;&#x89E3;&#x6790;&#x7684;&#x3002; The variable child is explicitly typed as Base to highlight an important difference: At compile-time the type is known to be Base,but the runtime still &#xFB01;nds the correct method myMethod on class Child. This is because &#xFB01;eld access is resolved dynamically at runtime. Child &#x7C7B;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x5B83;&#x91CD;&#x8F7D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x901A;&#x8FC7;&#x8C03;&#x7528; super.methodName()&#xFF1A; The Child class can access methods it has overriden by calling super.methodName(): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Base { public function new () { } public function myMethod () { return Base ; } } class Child extends Base { public override function myMethod () { return Child ; } public function callHome () { return super .myMethod(); } } class Main { static public function main () { var child = new Child (); trace (child.callHome()); // Base } } &#x7EE7;&#x627F;&#xFF08;&#x7B2C;2.3.2&#x8282;&#xFF09;&#x4E2D;&#x89E3;&#x91CA;&#x4E86;super()&#x5728;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x7684;&#x4F7F;&#x7528;&#x3002; The section on Inheritance (Section 2.3.2) explains the use of super() from within a new constructor."},"4.类字段/4.2.属性/4.2.属性.html":{"title":"","path":"\\4.类字段\\4.2.属性\\4.2.属性.html","body":"4.2.属性 变量下面，属性是第二个选项来处理类中的数据。然而不像变量，它们提供更多的控制哪种类型的字段访问被允许，和它如何被生成。通常用处包括： Next to variables (4.1), properties are the second option for dealing with data on a class. Unlike variables however, they offer more control of which kind of ﬁeld access should be allowed and how it should be generated. Common use cases include: 有一个可以被从任何地方读取，但是只能被从定义类写入的字段 有一个调用一个getter方法获得读权限的字段 有一个调用一个setter方法获得写入权限的字段 Have a ﬁeld which can be read from anywhere,but only be written from within the deﬁning class. Have a ﬁeld which invokes a getter-method upon read-access. Have a ﬁeld which invokes a setter-method upon write-access. 当处理属性时，重要的是理解两种类型的访问： When dealing with properties, it is important to understand the two kinds of access: 定义：读取访问 一个字段的读取访问发生在右手字段访问表达式（第5.7节）使用时。包括通过 obj.field() 形式调用来访问授权读取的字段。 定义：写入访问 一个字段的写入访问发生在一个字段访问表达式被以obj.field=value格式赋一个值的时候。也可能和读取访问联合出现，对于特别的赋值操作符如 += ，表达式形如 obj.field += value 。 [warning] Deﬁnition: Read Access A read access to a ﬁeld occurs when a right-hand side ﬁeld access expression (5.7) is used. This includes calls in the form of obj.field(), where field is accessed to be read. Deﬁnition: Write Access A write access to a ﬁeld occurs when a ﬁeld access expression (5.7) is assigned a value in the form of obj.field = value. It may also occur in combination with read access (4.2) for special assignment operators such as += in expressions like obj.field += value. 读取访问和写入访问直接反映在语法形式，如下面的例子： Read access and write access are directly reﬂected in the syntax, as the following example shows: 1 2 3 4 class Main  public var x( default , null ): Int ; static public function main ()    多数情况，和变量的语法类似，实际上适用同样的规则。属性被识别，通过 For the most part, the syntax is similar to variable syntax, and the same rules indeed apply. Properties are identiﬁed by 字段名后开口的括号 ( ， 后面跟一个特定的访问标识符（这里是 default）， 逗号，隔开 另一个特殊的访问标识符（这里是null）， 和一个闭口的括号 ) the opening parenthesis ( after the ﬁeld name, followed by a special access identiﬁer (here: default), with a comma , separating another special access identiﬁer (here: null) before a closing parenthesis ). 访问标识符定义当字段被读取（第一个标识符）的行为，和写入的行为（第二个标识符）。接受的值为： The access identiﬁers deﬁne the behavior when the ﬁeld is read (ﬁrst identiﬁer) and written (second identiﬁer). The accepted values are: default ：如果字段有公开的可见性，则允许普通的字段访问，否则等于 null 访问。 null ：只允许从定义的类中访问。 get/set ：访问被生成为一个存取器方法。编译器确保存取器可用。 dynamic ：类似get/set访问，但是不验证存取器字段的存在。 never ：不允许访问 default : Allows normal ﬁeld access if the ﬁeld has public visibility, otherwise equal to null access. null : Allows access only from within the deﬁning class. get/set : Access is generated as a call to an accessor method. The compiler ensures that the accessor is available. dynamic : Like get/set access, but does not verify the existence of the accessor ﬁeld. never : Allows no access at all. 存取器方法 定义：存取器方法 一个T类型名为 filed 的字段的一个存取器方法（或者简称为存取器）是一个Void-T类型名为 get_field 的 getter，或者T-T类型名为 set_field的setter。 [warning] Deﬁnition: Accessor method An accessor method (or short accessor) for a ﬁeld named field of type T is a getter named get_field of type Void-T or a setter named set_field of type T-T. 存取器名称 花絮：存取器名称 在Haxe 2中，任意的标识符允许作为访问标识符，可以使定制的存取器方法名是被认可的。这使得部分实现非常难以处理。特别是，Reflect.getProperty() 和 Reflect.setProterty() 必须假定任何名称可能被使用，需要目标生成器生成元信息和执行查找。我们不允许这些标识符，而使用 get_ 和 set_ 命名约定，大大简化了实现。这是Haxe2 和Haxe 3之间一个阻断式的变更。 [warning] Trivia: Accessor names In Haxe 2, arbitrary identiﬁers were allowed as access identiﬁers and would lead to custom accessor method names to be admitted. This made parts of the implementation quite tricky todealwith. In particular,Reflect.getProperty() and Reflect.setProperty() had to assume that any name could have been used, requiring the target generators to generate meta-information and perform lookups. We disallowed these identiﬁers and went for the get_ and set_ naming convention which greatly simpliﬁed implementation. This was one of the breaking changes between Haxe 2 and 3."},"4.类字段/4.2.属性/4.2.属性.html#4-2-属性":{"title":"4.2.&#x5C5E;&#x6027;","path":"\\4.类字段\\4.2.属性\\4.2.属性.html#4-2-属性","body":"&#x53D8;&#x91CF;&#x4E0B;&#x9762;&#xFF0C;&#x5C5E;&#x6027;&#x662F;&#x7B2C;&#x4E8C;&#x4E2A;&#x9009;&#x9879;&#x6765;&#x5904;&#x7406;&#x7C7B;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x3002;&#x7136;&#x800C;&#x4E0D;&#x50CF;&#x53D8;&#x91CF;&#xFF0C;&#x5B83;&#x4EEC;&#x63D0;&#x4F9B;&#x66F4;&#x591A;&#x7684;&#x63A7;&#x5236;&#x54EA;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x88AB;&#x5141;&#x8BB8;&#xFF0C;&#x548C;&#x5B83;&#x5982;&#x4F55;&#x88AB;&#x751F;&#x6210;&#x3002;&#x901A;&#x5E38;&#x7528;&#x5904;&#x5305;&#x62EC;&#xFF1A; Next to variables (4.1), properties are the second option for dealing with data on a class. Unlike variables however, they offer more control of which kind of &#xFB01;eld access should be allowed and how it should be generated. Common use cases include: &#x6709;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x88AB;&#x4ECE;&#x4EFB;&#x4F55;&#x5730;&#x65B9;&#x8BFB;&#x53D6;&#xFF0C;&#x4F46;&#x662F;&#x53EA;&#x80FD;&#x88AB;&#x4ECE;&#x5B9A;&#x4E49;&#x7C7B;&#x5199;&#x5165;&#x7684;&#x5B57;&#x6BB5; &#x6709;&#x4E00;&#x4E2A;&#x8C03;&#x7528;&#x4E00;&#x4E2A;getter&#x65B9;&#x6CD5;&#x83B7;&#x5F97;&#x8BFB;&#x6743;&#x9650;&#x7684;&#x5B57;&#x6BB5; &#x6709;&#x4E00;&#x4E2A;&#x8C03;&#x7528;&#x4E00;&#x4E2A;setter&#x65B9;&#x6CD5;&#x83B7;&#x5F97;&#x5199;&#x5165;&#x6743;&#x9650;&#x7684;&#x5B57;&#x6BB5; Have a &#xFB01;eld which can be read from anywhere,but only be written from within the de&#xFB01;ning class. Have a &#xFB01;eld which invokes a getter-method upon read-access. Have a &#xFB01;eld which invokes a setter-method upon write-access. &#x5F53;&#x5904;&#x7406;&#x5C5E;&#x6027;&#x65F6;&#xFF0C;&#x91CD;&#x8981;&#x7684;&#x662F;&#x7406;&#x89E3;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x8BBF;&#x95EE;&#xFF1A; When dealing with properties, it is important to understand the two kinds of access: &#x5B9A;&#x4E49;&#xFF1A;&#x8BFB;&#x53D6;&#x8BBF;&#x95EE; &#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#x7684;&#x8BFB;&#x53D6;&#x8BBF;&#x95EE;&#x53D1;&#x751F;&#x5728;&#x53F3;&#x624B;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5.7&#x8282;&#xFF09;&#x4F7F;&#x7528;&#x65F6;&#x3002;&#x5305;&#x62EC;&#x901A;&#x8FC7; obj.field() &#x5F62;&#x5F0F;&#x8C03;&#x7528;&#x6765;&#x8BBF;&#x95EE;&#x6388;&#x6743;&#x8BFB;&#x53D6;&#x7684;&#x5B57;&#x6BB5;&#x3002; &#x5B9A;&#x4E49;&#xFF1A;&#x5199;&#x5165;&#x8BBF;&#x95EE; &#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#x7684;&#x5199;&#x5165;&#x8BBF;&#x95EE;&#x53D1;&#x751F;&#x5728;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x8868;&#x8FBE;&#x5F0F;&#x88AB;&#x4EE5;obj.field=value&#x683C;&#x5F0F;&#x8D4B;&#x4E00;&#x4E2A;&#x503C;&#x7684;&#x65F6;&#x5019;&#x3002;&#x4E5F;&#x53EF;&#x80FD;&#x548C;&#x8BFB;&#x53D6;&#x8BBF;&#x95EE;&#x8054;&#x5408;&#x51FA;&#x73B0;&#xFF0C;&#x5BF9;&#x4E8E;&#x7279;&#x522B;&#x7684;&#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#x7B26;&#x5982; += &#xFF0C;&#x8868;&#x8FBE;&#x5F0F;&#x5F62;&#x5982; obj.field += value &#x3002; [warning] De&#xFB01;nition: Read Access A read access to a &#xFB01;eld occurs when a right-hand side &#xFB01;eld access expression (5.7) is used. This includes calls in the form of obj.field(), where field is accessed to be read. De&#xFB01;nition: Write Access A write access to a &#xFB01;eld occurs when a &#xFB01;eld access expression (5.7) is assigned a value in the form of obj.field = value. It may also occur in combination with read access (4.2) for special assignment operators such as += in expressions like obj.field += value. &#x8BFB;&#x53D6;&#x8BBF;&#x95EE;&#x548C;&#x5199;&#x5165;&#x8BBF;&#x95EE;&#x76F4;&#x63A5;&#x53CD;&#x6620;&#x5728;&#x8BED;&#x6CD5;&#x5F62;&#x5F0F;&#xFF0C;&#x5982;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#xFF1A; Read access and write access are directly re&#xFB02;ected in the syntax, as the following example shows: 1 2 3 4 class Main { public var x( default , null ): Int ; static public function main () { } } &#x591A;&#x6570;&#x60C5;&#x51B5;&#xFF0C;&#x548C;&#x53D8;&#x91CF;&#x7684;&#x8BED;&#x6CD5;&#x7C7B;&#x4F3C;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x9002;&#x7528;&#x540C;&#x6837;&#x7684;&#x89C4;&#x5219;&#x3002;&#x5C5E;&#x6027;&#x88AB;&#x8BC6;&#x522B;&#xFF0C;&#x901A;&#x8FC7; For the most part, the syntax is similar to variable syntax, and the same rules indeed apply. Properties are identi&#xFB01;ed by &#x5B57;&#x6BB5;&#x540D;&#x540E;&#x5F00;&#x53E3;&#x7684;&#x62EC;&#x53F7; ( &#xFF0C; &#x540E;&#x9762;&#x8DDF;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x8BBF;&#x95EE;&#x6807;&#x8BC6;&#x7B26;&#xFF08;&#x8FD9;&#x91CC;&#x662F; default&#xFF09;&#xFF0C; &#x9017;&#x53F7;&#xFF0C;&#x9694;&#x5F00; &#x53E6;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x8BBF;&#x95EE;&#x6807;&#x8BC6;&#x7B26;&#xFF08;&#x8FD9;&#x91CC;&#x662F;null&#xFF09;&#xFF0C; &#x548C;&#x4E00;&#x4E2A;&#x95ED;&#x53E3;&#x7684;&#x62EC;&#x53F7; ) the opening parenthesis ( after the &#xFB01;eld name, followed by a special access identi&#xFB01;er (here: default), with a comma , separating another special access identi&#xFB01;er (here: null) before a closing parenthesis ). &#x8BBF;&#x95EE;&#x6807;&#x8BC6;&#x7B26;&#x5B9A;&#x4E49;&#x5F53;&#x5B57;&#x6BB5;&#x88AB;&#x8BFB;&#x53D6;&#xFF08;&#x7B2C;&#x4E00;&#x4E2A;&#x6807;&#x8BC6;&#x7B26;&#xFF09;&#x7684;&#x884C;&#x4E3A;&#xFF0C;&#x548C;&#x5199;&#x5165;&#x7684;&#x884C;&#x4E3A;&#xFF08;&#x7B2C;&#x4E8C;&#x4E2A;&#x6807;&#x8BC6;&#x7B26;&#xFF09;&#x3002;&#x63A5;&#x53D7;&#x7684;&#x503C;&#x4E3A;&#xFF1A; The access identi&#xFB01;ers de&#xFB01;ne the behavior when the &#xFB01;eld is read (&#xFB01;rst identi&#xFB01;er) and written (second identi&#xFB01;er). The accepted values are: default &#xFF1A;&#x5982;&#x679C;&#x5B57;&#x6BB5;&#x6709;&#x516C;&#x5F00;&#x7684;&#x53EF;&#x89C1;&#x6027;&#xFF0C;&#x5219;&#x5141;&#x8BB8;&#x666E;&#x901A;&#x7684;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#xFF0C;&#x5426;&#x5219;&#x7B49;&#x4E8E; null &#x8BBF;&#x95EE;&#x3002; null &#xFF1A;&#x53EA;&#x5141;&#x8BB8;&#x4ECE;&#x5B9A;&#x4E49;&#x7684;&#x7C7B;&#x4E2D;&#x8BBF;&#x95EE;&#x3002; get/set &#xFF1A;&#x8BBF;&#x95EE;&#x88AB;&#x751F;&#x6210;&#x4E3A;&#x4E00;&#x4E2A;&#x5B58;&#x53D6;&#x5668;&#x65B9;&#x6CD5;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x786E;&#x4FDD;&#x5B58;&#x53D6;&#x5668;&#x53EF;&#x7528;&#x3002; dynamic &#xFF1A;&#x7C7B;&#x4F3C;get/set&#x8BBF;&#x95EE;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x9A8C;&#x8BC1;&#x5B58;&#x53D6;&#x5668;&#x5B57;&#x6BB5;&#x7684;&#x5B58;&#x5728;&#x3002; never &#xFF1A;&#x4E0D;&#x5141;&#x8BB8;&#x8BBF;&#x95EE; default : Allows normal &#xFB01;eld access if the &#xFB01;eld has public visibility, otherwise equal to null access. null : Allows access only from within the de&#xFB01;ning class. get/set : Access is generated as a call to an accessor method. The compiler ensures that the accessor is available. dynamic : Like get/set access, but does not verify the existence of the accessor &#xFB01;eld. never : Allows no access at all. &#x5B58;&#x53D6;&#x5668;&#x65B9;&#x6CD5; &#x5B9A;&#x4E49;&#xFF1A;&#x5B58;&#x53D6;&#x5668;&#x65B9;&#x6CD5; &#x4E00;&#x4E2A;T&#x7C7B;&#x578B;&#x540D;&#x4E3A; filed &#x7684;&#x5B57;&#x6BB5;&#x7684;&#x4E00;&#x4E2A;&#x5B58;&#x53D6;&#x5668;&#x65B9;&#x6CD5;&#xFF08;&#x6216;&#x8005;&#x7B80;&#x79F0;&#x4E3A;&#x5B58;&#x53D6;&#x5668;&#xFF09;&#x662F;&#x4E00;&#x4E2A;Void-T&#x7C7B;&#x578B;&#x540D;&#x4E3A; get_field &#x7684; getter&#xFF0C;&#x6216;&#x8005;T-T&#x7C7B;&#x578B;&#x540D;&#x4E3A; set_field&#x7684;setter&#x3002; [warning] De&#xFB01;nition: Accessor method An accessor method (or short accessor) for a &#xFB01;eld named field of type T is a getter named get_field of type Void-T or a setter named set_field of type T-T. &#x5B58;&#x53D6;&#x5668;&#x540D;&#x79F0; &#x82B1;&#x7D6E;&#xFF1A;&#x5B58;&#x53D6;&#x5668;&#x540D;&#x79F0; &#x5728;Haxe 2&#x4E2D;&#xFF0C;&#x4EFB;&#x610F;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#x5141;&#x8BB8;&#x4F5C;&#x4E3A;&#x8BBF;&#x95EE;&#x6807;&#x8BC6;&#x7B26;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x5B9A;&#x5236;&#x7684;&#x5B58;&#x53D6;&#x5668;&#x65B9;&#x6CD5;&#x540D;&#x662F;&#x88AB;&#x8BA4;&#x53EF;&#x7684;&#x3002;&#x8FD9;&#x4F7F;&#x5F97;&#x90E8;&#x5206;&#x5B9E;&#x73B0;&#x975E;&#x5E38;&#x96BE;&#x4EE5;&#x5904;&#x7406;&#x3002;&#x7279;&#x522B;&#x662F;&#xFF0C;Reflect.getProperty() &#x548C; Reflect.setProterty() &#x5FC5;&#x987B;&#x5047;&#x5B9A;&#x4EFB;&#x4F55;&#x540D;&#x79F0;&#x53EF;&#x80FD;&#x88AB;&#x4F7F;&#x7528;&#xFF0C;&#x9700;&#x8981;&#x76EE;&#x6807;&#x751F;&#x6210;&#x5668;&#x751F;&#x6210;&#x5143;&#x4FE1;&#x606F;&#x548C;&#x6267;&#x884C;&#x67E5;&#x627E;&#x3002;&#x6211;&#x4EEC;&#x4E0D;&#x5141;&#x8BB8;&#x8FD9;&#x4E9B;&#x6807;&#x8BC6;&#x7B26;&#xFF0C;&#x800C;&#x4F7F;&#x7528; get_ &#x548C; set_ &#x547D;&#x540D;&#x7EA6;&#x5B9A;&#xFF0C;&#x5927;&#x5927;&#x7B80;&#x5316;&#x4E86;&#x5B9E;&#x73B0;&#x3002;&#x8FD9;&#x662F;Haxe2 &#x548C;Haxe 3&#x4E4B;&#x95F4;&#x4E00;&#x4E2A;&#x963B;&#x65AD;&#x5F0F;&#x7684;&#x53D8;&#x66F4;&#x3002; [warning] Trivia: Accessor names In Haxe 2, arbitrary identi&#xFB01;ers were allowed as access identi&#xFB01;ers and would lead to custom accessor method names to be admitted. This made parts of the implementation quite tricky todealwith. In particular,Reflect.getProperty() and Reflect.setProperty() had to assume that any name could have been used, requiring the target generators to generate meta-information and perform lookups. We disallowed these identi&#xFB01;ers and went for the get_ and set_ naming convention which greatly simpli&#xFB01;ed implementation. This was one of the breaking changes between Haxe 2 and 3."},"4.类字段/4.3.方法/4.3.方法.html":{"title":"","path":"\\4.类字段\\4.3.方法\\4.3.方法.html","body":"4.3.方法 变量保存数据，方法通过托管表达式（第5章）来定义程序的行为。我们已经在每个代码例子中看过方法字段，前面的 HelloWorld示例就包含一个 main 方法： While variables (4.1) hold data, methods are deﬁning behavior of a program by hosting expressions (5). We have seen method ﬁelds in every code example of this document with even the initial Hello World (1.3) example containing a main method: 1 2 3 4 5 class Main  static public function main (): Void  trace ( \"Hello World\" );   方法通过 function 关键字识别。我们还可以了解到，它们： Methods are identiﬁed by the function keyword. We can also learn that they 有一个名字（这里是main） 有一个参数列表（这里为 empty()） 有一个返回类型（这里是 Void） 可能有访问修饰符（第4.4节）（这里是 static 和public） 可能有一个表达式（这里是 {trace(“Hello World”);}） have a name (here: main), have an argument list (here: empty ()), have a return type (here: Void), may have access modiﬁers (4.4) (here: static and public) and may have an expression (here: {trace(“Hello World”);}). 还可以看下面的例子，了解更多参数和返回类型的知识： We can also look at the next example to learn more about arguments and return types: 1 2 3 4 5 6 7 8 9 class Main  static public function main ()  myFunc( \"foo\" , 1 );  static function myFunc (f: String , i)  return true ;   参数通过字段名后一个开口的 ( 括号开始，一个 逗号 , 作为参数列表中每个参数的分隔符号，然后跟一个闭口的 ) 括号。参数规范的附加信息在 函数类型（第2.6节）中描述。 Arguments are given by an opening parenthesis ( after the ﬁeld name, a comma , separated list of argument speciﬁcations and a closing parenthesis ). Additional information on the argument speciﬁcation is described in Function Type (Section 2.6). 例子展示了类型推断如何被使用到两个参数和返回类型上。方法 myFunc 有两个参数，但是第一个被显式赋予类型，f，为String类型。第二个参数 i ，没有类型示意，留给编译器从它的调用中推断它的类型。此外，返回类型通过return ture 表达式来推断为 Bool 。 The example demonstrates how type inference(3.6) can be used for both argument and return types. The method myFunc has two arguments but only explicitly gives the type of the ﬁrst one, f, as String. The second one, i, is not type-hinted and it is left to the compiler to infer its type from calls made to it. Likewise,the return type of the method is inferred from the return true expression as Bool."},"4.类字段/4.3.方法/4.3.方法.html#4-3-方法":{"title":"4.3.&#x65B9;&#x6CD5;","path":"\\4.类字段\\4.3.方法\\4.3.方法.html#4-3-方法","body":"&#x53D8;&#x91CF;&#x4FDD;&#x5B58;&#x6570;&#x636E;&#xFF0C;&#x65B9;&#x6CD5;&#x901A;&#x8FC7;&#x6258;&#x7BA1;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09;&#x6765;&#x5B9A;&#x4E49;&#x7A0B;&#x5E8F;&#x7684;&#x884C;&#x4E3A;&#x3002;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x5728;&#x6BCF;&#x4E2A;&#x4EE3;&#x7801;&#x4F8B;&#x5B50;&#x4E2D;&#x770B;&#x8FC7;&#x65B9;&#x6CD5;&#x5B57;&#x6BB5;&#xFF0C;&#x524D;&#x9762;&#x7684; HelloWorld&#x793A;&#x4F8B;&#x5C31;&#x5305;&#x542B;&#x4E00;&#x4E2A; main &#x65B9;&#x6CD5;&#xFF1A; While variables (4.1) hold data, methods are de&#xFB01;ning behavior of a program by hosting expressions (5). We have seen method &#xFB01;elds in every code example of this document with even the initial Hello World (1.3) example containing a main method: 1 2 3 4 5 class Main { static public function main (): Void { trace ( Hello World ); } } &#x65B9;&#x6CD5;&#x901A;&#x8FC7; function &#x5173;&#x952E;&#x5B57;&#x8BC6;&#x522B;&#x3002;&#x6211;&#x4EEC;&#x8FD8;&#x53EF;&#x4EE5;&#x4E86;&#x89E3;&#x5230;&#xFF0C;&#x5B83;&#x4EEC;&#xFF1A; Methods are identi&#xFB01;ed by the function keyword. We can also learn that they &#x6709;&#x4E00;&#x4E2A;&#x540D;&#x5B57;&#xFF08;&#x8FD9;&#x91CC;&#x662F;main&#xFF09; &#x6709;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x5217;&#x8868;&#xFF08;&#x8FD9;&#x91CC;&#x4E3A; empty()&#xFF09; &#x6709;&#x4E00;&#x4E2A;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#xFF08;&#x8FD9;&#x91CC;&#x662F; Void&#xFF09; &#x53EF;&#x80FD;&#x6709;&#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;&#xFF08;&#x7B2C;4.4&#x8282;&#xFF09;&#xFF08;&#x8FD9;&#x91CC;&#x662F; static &#x548C;public&#xFF09; &#x53EF;&#x80FD;&#x6709;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x8FD9;&#x91CC;&#x662F; {trace(&#x201C;Hello World&#x201D;);}&#xFF09; have a name (here: main), have an argument list (here: empty ()), have a return type (here: Void), may have access modi&#xFB01;ers (4.4) (here: static and public) and may have an expression (here: {trace(&#x201C;Hello World&#x201D;);}). &#x8FD8;&#x53EF;&#x4EE5;&#x770B;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x4E86;&#x89E3;&#x66F4;&#x591A;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x7684;&#x77E5;&#x8BC6;&#xFF1A; We can also look at the next example to learn more about arguments and return types: 1 2 3 4 5 6 7 8 9 class Main { static public function main () { myFunc( foo , 1 ); } static function myFunc (f: String , i) { return true ; } } &#x53C2;&#x6570;&#x901A;&#x8FC7;&#x5B57;&#x6BB5;&#x540D;&#x540E;&#x4E00;&#x4E2A;&#x5F00;&#x53E3;&#x7684; ( &#x62EC;&#x53F7;&#x5F00;&#x59CB;&#xFF0C;&#x4E00;&#x4E2A; &#x9017;&#x53F7; , &#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x5217;&#x8868;&#x4E2D;&#x6BCF;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x5206;&#x9694;&#x7B26;&#x53F7;&#xFF0C;&#x7136;&#x540E;&#x8DDF;&#x4E00;&#x4E2A;&#x95ED;&#x53E3;&#x7684; ) &#x62EC;&#x53F7;&#x3002;&#x53C2;&#x6570;&#x89C4;&#x8303;&#x7684;&#x9644;&#x52A0;&#x4FE1;&#x606F;&#x5728; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.6&#x8282;&#xFF09;&#x4E2D;&#x63CF;&#x8FF0;&#x3002; Arguments are given by an opening parenthesis ( after the &#xFB01;eld name, a comma , separated list of argument speci&#xFB01;cations and a closing parenthesis ). Additional information on the argument speci&#xFB01;cation is described in Function Type (Section 2.6). &#x4F8B;&#x5B50;&#x5C55;&#x793A;&#x4E86;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x5982;&#x4F55;&#x88AB;&#x4F7F;&#x7528;&#x5230;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4E0A;&#x3002;&#x65B9;&#x6CD5; myFunc &#x6709;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x88AB;&#x663E;&#x5F0F;&#x8D4B;&#x4E88;&#x7C7B;&#x578B;&#xFF0C;f&#xFF0C;&#x4E3A;String&#x7C7B;&#x578B;&#x3002;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570; i &#xFF0C;&#x6CA1;&#x6709;&#x7C7B;&#x578B;&#x793A;&#x610F;&#xFF0C;&#x7559;&#x7ED9;&#x7F16;&#x8BD1;&#x5668;&#x4ECE;&#x5B83;&#x7684;&#x8C03;&#x7528;&#x4E2D;&#x63A8;&#x65AD;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x901A;&#x8FC7;return ture &#x8868;&#x8FBE;&#x5F0F;&#x6765;&#x63A8;&#x65AD;&#x4E3A; Bool &#x3002; The example demonstrates how type inference(3.6) can be used for both argument and return types. The method myFunc has two arguments but only explicitly gives the type of the &#xFB01;rst one, f, as String. The second one, i, is not type-hinted and it is left to the compiler to infer its type from calls made to it. Likewise,the return type of the method is inferred from the return true expression as Bool."},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html":{"title":"","path":"\\4.类字段\\4.3.方法\\4.3.2.变异和访问修饰符的影响.html","body":"4.3.2.变异和访问修饰符的影响 重载遵守变异（第3.4节）的规则。也就是说，它们的参数类型允许逆变（不那么特定的类型）而它们的返回类型允许共变（更特别的类型）。 Overriding adheres to the rules of variance (3.4). That is, their argument types allow contravariance (less speciﬁc types) while their return type allows covariance (more speciﬁc types): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Base  public function new ()    class Child extends Base  private function method (obj: Child ): Child  return obj;   class ChildChild extends Child  public override function method (obj: Base ): ChildChild  return null ;   class Main  static public function main ()    直观的说，这是因为参数被“写入”到函数中，而返回值是从函数中“读取”。 Intuitively, this follows from the fact that arguments are “written to” the function and the return value is “read from” it. 示例也展示了如何改变可见性（第4.4.1节）：一个重载的字段可能是 public ，如果被重载的字段是private，但是相反则不行。 The example also demonstrates how visibility (4.4.1) may be changed: An overriding ﬁeld may be public if the overridden ﬁeld is private, but not the other way around. 不可能重载声明为内联（第4.4.2节）的字段。这是由于冲突的概念：当内联在编译时通过替换一个函数体的调用，重载字段必须被在运行时决定。 It is not possible to override ﬁelds which are declared as inline (4.4.2). This is due to the conﬂicting concepts: While inlining is done atcompile-time by replacinga call with thefunction body, overriding ﬁelds necessarily have to be resolved at runtime."},"4.类字段/4.3.方法/4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响":{"title":"4.3.2.&#x53D8;&#x5F02;&#x548C;&#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;&#x7684;&#x5F71;&#x54CD;","path":"\\4.类字段\\4.3.方法\\4.3.2.变异和访问修饰符的影响.html#4-3-2-变异和访问修饰符的影响","body":"&#x91CD;&#x8F7D;&#x9075;&#x5B88;&#x53D8;&#x5F02;&#xFF08;&#x7B2C;3.4&#x8282;&#xFF09;&#x7684;&#x89C4;&#x5219;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5B83;&#x4EEC;&#x7684;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x5141;&#x8BB8;&#x9006;&#x53D8;&#xFF08;&#x4E0D;&#x90A3;&#x4E48;&#x7279;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#xFF09;&#x800C;&#x5B83;&#x4EEC;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x5141;&#x8BB8;&#x5171;&#x53D8;&#xFF08;&#x66F4;&#x7279;&#x522B;&#x7684;&#x7C7B;&#x578B;&#xFF09;&#x3002; Overriding adheres to the rules of variance (3.4). That is, their argument types allow contravariance (less speci&#xFB01;c types) while their return type allows covariance (more speci&#xFB01;c types): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Base { public function new () { } } class Child extends Base { private function method (obj: Child ): Child { return obj; } } class ChildChild extends Child { public override function method (obj: Base ): ChildChild { return null ; } } class Main { static public function main () { } } &#x76F4;&#x89C2;&#x7684;&#x8BF4;&#xFF0C;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x53C2;&#x6570;&#x88AB;&#x201C;&#x5199;&#x5165;&#x201D;&#x5230;&#x51FD;&#x6570;&#x4E2D;&#xFF0C;&#x800C;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x4ECE;&#x51FD;&#x6570;&#x4E2D;&#x201C;&#x8BFB;&#x53D6;&#x201D;&#x3002; Intuitively, this follows from the fact that arguments are &#x201C;written to&#x201D; the function and the return value is &#x201C;read from&#x201D; it. &#x793A;&#x4F8B;&#x4E5F;&#x5C55;&#x793A;&#x4E86;&#x5982;&#x4F55;&#x6539;&#x53D8;&#x53EF;&#x89C1;&#x6027;&#xFF08;&#x7B2C;4.4.1&#x8282;&#xFF09;&#xFF1A;&#x4E00;&#x4E2A;&#x91CD;&#x8F7D;&#x7684;&#x5B57;&#x6BB5;&#x53EF;&#x80FD;&#x662F; public &#xFF0C;&#x5982;&#x679C;&#x88AB;&#x91CD;&#x8F7D;&#x7684;&#x5B57;&#x6BB5;&#x662F;private&#xFF0C;&#x4F46;&#x662F;&#x76F8;&#x53CD;&#x5219;&#x4E0D;&#x884C;&#x3002; The example also demonstrates how visibility (4.4.1) may be changed: An overriding &#xFB01;eld may be public if the overridden &#xFB01;eld is private, but not the other way around. &#x4E0D;&#x53EF;&#x80FD;&#x91CD;&#x8F7D;&#x58F0;&#x660E;&#x4E3A;&#x5185;&#x8054;&#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09;&#x7684;&#x5B57;&#x6BB5;&#x3002;&#x8FD9;&#x662F;&#x7531;&#x4E8E;&#x51B2;&#x7A81;&#x7684;&#x6982;&#x5FF5;&#xFF1A;&#x5F53;&#x5185;&#x8054;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x901A;&#x8FC7;&#x66FF;&#x6362;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x4F53;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x91CD;&#x8F7D;&#x5B57;&#x6BB5;&#x5FC5;&#x987B;&#x88AB;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x51B3;&#x5B9A;&#x3002; It is not possible to override &#xFB01;elds which are declared as inline (4.4.2). This is due to the con&#xFB02;icting concepts: While inlining is done atcompile-time by replacinga call with thefunction body, overriding &#xFB01;elds necessarily have to be resolved at runtime."},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html":{"title":"","path":"\\4.类字段\\4.4.访问修饰符\\4.4.1.可见性.html","body":"4.4.1.可见性 字段默认为 private ，意味着只有类和它的子类可以访问它们。它们可以被声明为公共字段，通过使用 public 访问修饰符，使它们可以在各处访问。 Fields are by default private, meaning that only the class and its sub-classes may access them. They can be made public by using the public access modiﬁer, allowing access from anywhere. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class MyClass  static public function available ()  unavailable();  static private function unavailable ()    class Main  static public function main ()  MyClass.available(); // Cannot access private field unavailable MyClass.unavailable();   MyClass类的可用字段的访问允许从Main中访问，因为它表示为 public。然而，当访问不可用的字段访问可以从类MyClass内部，但是不能从Main中访问，因为它是private（明确的私有声明，尽管这个标识符在这里是多余的） Access to ﬁeld available of class MyClass is allowed from within Main because it is denoted as being public. However, while access to ﬁeld unavailable is allowed from within class MyClass, it is not allowed from within class Main because it is private (explicitly, although this identiﬁer is redundant here). 例子展示了static字段的可见性，但是成员字段的规则是等价的。下面的示例展示了当继承（第2.3.2节）被使用时的可见性行为。 The example demonstrates visibility through static ﬁelds, but the rules for member ﬁelds are equivalent. The following example demonstrates visibility behavior for when inheritance (2.3.2) is involved. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Base  public function new ()   private function baseField ()    class Child1 extends Base  private function child1Field ()    class Child2 extends Base  public function child2Field ()  var child1 = new Child1 (); child1.baseField(); // Cannot access private field child1Field child1.child1Field();   class Main  static public function main ()    我们可以看到访问 child1.baseField() 是允许在Child2类中访问，即使child1是不同的类型，Child1 。这是因为字段被定义在它们的通用祖先类Base，相反的，字段 Child1Field不能被从Child2中访问。 We can see that access to child1.baseField() is allowed from within Child2 even though child1 is of a different type,Child1. This is because the ﬁeld is deﬁned on their common ancestor class Base, contrary to ﬁeld child1Field which can not be accessed from within Child2. 省略可见性的修饰符通常默认可见性为 private，但是有例外它会变成 public： Omitting the visibility modiﬁer usually defaults the visibility to private, but there are exceptions where it becomes public instead: 如果类被声明为 extern 如果字段被声明在一个接口（第2.3.3节） 如果字段重载（第4.3.1节）了一个 public 字段 If the class is declared as extern. If the ﬁeld is declared on an interface (2.3.3). If the ﬁeld overrides (4.3.1) a public ﬁeld. Protected 花絮 ：Protected Haxe没有类似Java和C++等其它面向对象语言中的protected概念。然而，它的private行为等同于那些语言的protected行为，所以Haxe实际上缺少的是那些语言中的 private 行为。 [warning] Trivia : Protected Haxe has no notion of a protected keyword known from Java, C++ and other object-oriented languages. However, its private behavior is equal to those language’s protected behavior, so Haxe actually lacks their real private behavior."},"4.类字段/4.4.访问修饰符/4.4.1.可见性.html#4-4-1-可见性":{"title":"4.4.1.&#x53EF;&#x89C1;&#x6027;","path":"\\4.类字段\\4.4.访问修饰符\\4.4.1.可见性.html#4-4-1-可见性","body":"&#x5B57;&#x6BB5;&#x9ED8;&#x8BA4;&#x4E3A; private &#xFF0C;&#x610F;&#x5473;&#x7740;&#x53EA;&#x6709;&#x7C7B;&#x548C;&#x5B83;&#x7684;&#x5B50;&#x7C7B;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x5B83;&#x4EEC;&#x3002;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x516C;&#x5171;&#x5B57;&#x6BB5;&#xFF0C;&#x901A;&#x8FC7;&#x4F7F;&#x7528; public &#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;&#xFF0C;&#x4F7F;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x5728;&#x5404;&#x5904;&#x8BBF;&#x95EE;&#x3002; Fields are by default private, meaning that only the class and its sub-classes may access them. They can be made public by using the public access modi&#xFB01;er, allowing access from anywhere. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class MyClass { static public function available () { unavailable(); } static private function unavailable () { } } class Main { static public function main () { MyClass.available(); // Cannot access private field unavailable MyClass.unavailable(); } } MyClass&#x7C7B;&#x7684;&#x53EF;&#x7528;&#x5B57;&#x6BB5;&#x7684;&#x8BBF;&#x95EE;&#x5141;&#x8BB8;&#x4ECE;Main&#x4E2D;&#x8BBF;&#x95EE;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x8868;&#x793A;&#x4E3A; public&#x3002;&#x7136;&#x800C;&#xFF0C;&#x5F53;&#x8BBF;&#x95EE;&#x4E0D;&#x53EF;&#x7528;&#x7684;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x53EF;&#x4EE5;&#x4ECE;&#x7C7B;MyClass&#x5185;&#x90E8;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x80FD;&#x4ECE;Main&#x4E2D;&#x8BBF;&#x95EE;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x662F;private&#xFF08;&#x660E;&#x786E;&#x7684;&#x79C1;&#x6709;&#x58F0;&#x660E;&#xFF0C;&#x5C3D;&#x7BA1;&#x8FD9;&#x4E2A;&#x6807;&#x8BC6;&#x7B26;&#x5728;&#x8FD9;&#x91CC;&#x662F;&#x591A;&#x4F59;&#x7684;&#xFF09; Access to &#xFB01;eld available of class MyClass is allowed from within Main because it is denoted as being public. However, while access to &#xFB01;eld unavailable is allowed from within class MyClass, it is not allowed from within class Main because it is private (explicitly, although this identi&#xFB01;er is redundant here). &#x4F8B;&#x5B50;&#x5C55;&#x793A;&#x4E86;static&#x5B57;&#x6BB5;&#x7684;&#x53EF;&#x89C1;&#x6027;&#xFF0C;&#x4F46;&#x662F;&#x6210;&#x5458;&#x5B57;&#x6BB5;&#x7684;&#x89C4;&#x5219;&#x662F;&#x7B49;&#x4EF7;&#x7684;&#x3002;&#x4E0B;&#x9762;&#x7684;&#x793A;&#x4F8B;&#x5C55;&#x793A;&#x4E86;&#x5F53;&#x7EE7;&#x627F;&#xFF08;&#x7B2C;2.3.2&#x8282;&#xFF09;&#x88AB;&#x4F7F;&#x7528;&#x65F6;&#x7684;&#x53EF;&#x89C1;&#x6027;&#x884C;&#x4E3A;&#x3002; The example demonstrates visibility through static &#xFB01;elds, but the rules for member &#xFB01;elds are equivalent. The following example demonstrates visibility behavior for when inheritance (2.3.2) is involved. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Base { public function new () { } private function baseField () { } } class Child1 extends Base { private function child1Field () { } } class Child2 extends Base { public function child2Field () { var child1 = new Child1 (); child1.baseField(); // Cannot access private field child1Field child1.child1Field(); } } class Main { static public function main () { } } &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x8BBF;&#x95EE; child1.baseField() &#x662F;&#x5141;&#x8BB8;&#x5728;Child2&#x7C7B;&#x4E2D;&#x8BBF;&#x95EE;&#xFF0C;&#x5373;&#x4F7F;child1&#x662F;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#xFF0C;Child1 &#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x5B57;&#x6BB5;&#x88AB;&#x5B9A;&#x4E49;&#x5728;&#x5B83;&#x4EEC;&#x7684;&#x901A;&#x7528;&#x7956;&#x5148;&#x7C7B;Base&#xFF0C;&#x76F8;&#x53CD;&#x7684;&#xFF0C;&#x5B57;&#x6BB5; Child1Field&#x4E0D;&#x80FD;&#x88AB;&#x4ECE;Child2&#x4E2D;&#x8BBF;&#x95EE;&#x3002; We can see that access to child1.baseField() is allowed from within Child2 even though child1 is of a different type,Child1. This is because the &#xFB01;eld is de&#xFB01;ned on their common ancestor class Base, contrary to &#xFB01;eld child1Field which can not be accessed from within Child2. &#x7701;&#x7565;&#x53EF;&#x89C1;&#x6027;&#x7684;&#x4FEE;&#x9970;&#x7B26;&#x901A;&#x5E38;&#x9ED8;&#x8BA4;&#x53EF;&#x89C1;&#x6027;&#x4E3A; private&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x4F8B;&#x5916;&#x5B83;&#x4F1A;&#x53D8;&#x6210; public&#xFF1A; Omitting the visibility modi&#xFB01;er usually defaults the visibility to private, but there are exceptions where it becomes public instead: &#x5982;&#x679C;&#x7C7B;&#x88AB;&#x58F0;&#x660E;&#x4E3A; extern &#x5982;&#x679C;&#x5B57;&#x6BB5;&#x88AB;&#x58F0;&#x660E;&#x5728;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#xFF08;&#x7B2C;2.3.3&#x8282;&#xFF09; &#x5982;&#x679C;&#x5B57;&#x6BB5;&#x91CD;&#x8F7D;&#xFF08;&#x7B2C;4.3.1&#x8282;&#xFF09;&#x4E86;&#x4E00;&#x4E2A; public &#x5B57;&#x6BB5; If the class is declared as extern. If the &#xFB01;eld is declared on an interface (2.3.3). If the &#xFB01;eld overrides (4.3.1) a public &#xFB01;eld. Protected &#x82B1;&#x7D6E; &#xFF1A;Protected Haxe&#x6CA1;&#x6709;&#x7C7B;&#x4F3C;Java&#x548C;C++&#x7B49;&#x5176;&#x5B83;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x8BED;&#x8A00;&#x4E2D;&#x7684;protected&#x6982;&#x5FF5;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x5B83;&#x7684;private&#x884C;&#x4E3A;&#x7B49;&#x540C;&#x4E8E;&#x90A3;&#x4E9B;&#x8BED;&#x8A00;&#x7684;protected&#x884C;&#x4E3A;&#xFF0C;&#x6240;&#x4EE5;Haxe&#x5B9E;&#x9645;&#x4E0A;&#x7F3A;&#x5C11;&#x7684;&#x662F;&#x90A3;&#x4E9B;&#x8BED;&#x8A00;&#x4E2D;&#x7684; private &#x884C;&#x4E3A;&#x3002; [warning] Trivia : Protected Haxe has no notion of a protected keyword known from Java, C++ and other object-oriented languages. However, its private behavior is equal to those language&#x2019;s protected behavior, so Haxe actually lacks their real private behavior."},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html":{"title":"","path":"\\4.类字段\\4.4.访问修饰符\\4.4.2.Inline.html","body":"4.4.2.Inline inline 关键字允许函数体被直接插入到它们调用位置。这是一个强大的优化工具，但是应该审慎使用，并不是所有函数都适用inline行为。下面的例子演示了基本的用法： The inline keyword allows function bodies to be directly inserted in place of calls to them. This can be a powerful optimization tool,but should be used judiciously as not all functions are good candidates for inline behavior. The following example demonstrates the basic usage: 1 2 3 4 5 6 7 8 9 10 11 class Main  static inline function mid (s1: Int , s2: Int )  return (s1 + s2) / 2 ;  static public function main ()  var a = 1 ; var b = 2 ; var c = mid(a, b);   生成的JavaScript输出揭示了内联的效果： The generated JavaScript output reveals the effect of inline: 1 2 3 4 5 6 7 8 9 ( function ()  \"use strict\" ; var Main = function ()   Main.main = function ()  var a = 1 ; var b = 2 ; var c = (a + b) / 2 ;  Main.main(); )(); 显然，字段mid被生成的函数体(s1 + s2)/2替换掉了调用 mid(a,b)，s1被替换为 a ，s2被替换为b。这可以避免一个函数调用，根据目标和出现的频率，可以产生显著的性能改进。 As evident, the function body (s1 + s2) / 2 of ﬁeld mid was generated in place of the call to mid(a, b), with s1 being replaced by a and s2 being replaced by b. This avoids a function call which,depending on the target and frequency of occurrences,may yield noticeable performance improvements. 并不总是容易判断是否一个函数要限定为内联函数。没有编写表达式的短函数（如a=形式的赋值）通常是一个好的选择，但是有时候更复杂的函数也可以使用内联。然而，在一些情况下内联可以实际上损害部分性能，例如，因为编译器必须创建临时变量服务于复杂的表达式。 It is not always easy to judge if a function qualiﬁes for being inline. Short functions that have no writing expressions (such as a = assignment) are usually a good choice, but even more complex functions can be candidates. However, in some cases inlining can actually be detrimental to performance, e.g. because the compiler has to create temporary variables for complex expressions. 内联并不保证执行。编译器可能由于多种原因取消内联，用户也可以通过 –no-inline 命令行参数来禁止内联。唯一的例外是如果类是 extern（第6.2节）或者如果泪字段有 :extern 元数据（第6.9节），这种情况内联被禁止。如果她不能被执行，编译器发出一个错误。 Inline is not guaranteed to be done. The compiler might cancel inlining for various reasons or a user could supply the –no-inline command line argument to disable inlining. The only exception is if the class is extern (6.2) or if the class ﬁeld has the :extern metadata (6.9), in which case inline is forced. If it cannot be done, the compiler emits an error. 重要的是依赖内联时要记得这个： It is important to remember this when relying on inline: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Main  public static function main ()   static function test ()  if (Math.random()  0.5 )  return \"ok\" ;  else  error( \"random failed\" );   @:extern static inline function error(s:String)  throw s;   如果正确的调用error是内联的，程序编译正确，因为控制流检查器满意内联的throw（第5.22节）表达式。如果内联部执行，编译器只发现一个error函数的调用并发出错误 A return is missing here。 If the call to error is inlined the program compiles correctly because the control ﬂow checker is satisﬁed due to the inlined throw (5.22) expression. If inline is not done,the compiler only sees a function call to error and emits the error A return is missing here. Inline variables The inline keyword can also be applied to variables, but only when used together with static . An inline variable must be initialized to a constant , otherwise the compiler emits an error. The value of the variable is used everywhere in place of the variable itself. The following code demonstrates the usage of an inline variable: 1 2 3 4 5 6 7 class Main  static inline final language = Haxe; static public function main()  trace(language);   The generated JavaScript shows that the language variable is not present anymore: 1 2 3 4 5 6 7 (function ($global)  use strict; var Main = function()  ; Main.main = function()  console.log(root/program/Main.hx:5:,Haxe); ; Main.main(); )(); Note that even though we call such kind of fields “variables”, inline variables can never be reassigned as the value must be known at compile-time to be inlined at the place of usage. This makes inline variables a subset of final fields , hence the usage of the final keyword in the code example above. Trivia: inline var Prior to Haxe 4, there was no final keyword. The inline variables feature however was present for a long time, using the var keyword instead of final . Using inline var still works in Haxe 4 but might be deprecated in the future, because final is more appropriate."},"4.类字段/4.4.访问修饰符/4.4.2.Inline.html#4-4-2-Inline":{"title":"4.4.2.Inline","path":"\\4.类字段\\4.4.访问修饰符\\4.4.2.Inline.html#4-4-2-Inline","body":"inline &#x5173;&#x952E;&#x5B57;&#x5141;&#x8BB8;&#x51FD;&#x6570;&#x4F53;&#x88AB;&#x76F4;&#x63A5;&#x63D2;&#x5165;&#x5230;&#x5B83;&#x4EEC;&#x8C03;&#x7528;&#x4F4D;&#x7F6E;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5F3A;&#x5927;&#x7684;&#x4F18;&#x5316;&#x5DE5;&#x5177;&#xFF0C;&#x4F46;&#x662F;&#x5E94;&#x8BE5;&#x5BA1;&#x614E;&#x4F7F;&#x7528;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x51FD;&#x6570;&#x90FD;&#x9002;&#x7528;inline&#x884C;&#x4E3A;&#x3002;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x6F14;&#x793A;&#x4E86;&#x57FA;&#x672C;&#x7684;&#x7528;&#x6CD5;&#xFF1A; The inline keyword allows function bodies to be directly inserted in place of calls to them. This can be a powerful optimization tool,but should be used judiciously as not all functions are good candidates for inline behavior. The following example demonstrates the basic usage: 1 2 3 4 5 6 7 8 9 10 11 class Main { static inline function mid (s1: Int , s2: Int ) { return (s1 + s2) / 2 ; } static public function main () { var a = 1 ; var b = 2 ; var c = mid(a, b); } } &#x751F;&#x6210;&#x7684;JavaScript&#x8F93;&#x51FA;&#x63ED;&#x793A;&#x4E86;&#x5185;&#x8054;&#x7684;&#x6548;&#x679C;&#xFF1A; The generated JavaScript output reveals the effect of inline: 1 2 3 4 5 6 7 8 9 ( function () { use strict ; var Main = function () { } Main.main = function () { var a = 1 ; var b = 2 ; var c = (a + b) / 2 ; } Main.main(); })(); &#x663E;&#x7136;&#xFF0C;&#x5B57;&#x6BB5;mid&#x88AB;&#x751F;&#x6210;&#x7684;&#x51FD;&#x6570;&#x4F53;(s1 + s2)/2&#x66FF;&#x6362;&#x6389;&#x4E86;&#x8C03;&#x7528; mid(a,b)&#xFF0C;s1&#x88AB;&#x66FF;&#x6362;&#x4E3A; a &#xFF0C;s2&#x88AB;&#x66FF;&#x6362;&#x4E3A;b&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8C03;&#x7528;&#xFF0C;&#x6839;&#x636E;&#x76EE;&#x6807;&#x548C;&#x51FA;&#x73B0;&#x7684;&#x9891;&#x7387;&#xFF0C;&#x53EF;&#x4EE5;&#x4EA7;&#x751F;&#x663E;&#x8457;&#x7684;&#x6027;&#x80FD;&#x6539;&#x8FDB;&#x3002; As evident, the function body (s1 + s2) / 2 of &#xFB01;eld mid was generated in place of the call to mid(a, b), with s1 being replaced by a and s2 being replaced by b. This avoids a function call which,depending on the target and frequency of occurrences,may yield noticeable performance improvements. &#x5E76;&#x4E0D;&#x603B;&#x662F;&#x5BB9;&#x6613;&#x5224;&#x65AD;&#x662F;&#x5426;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8981;&#x9650;&#x5B9A;&#x4E3A;&#x5185;&#x8054;&#x51FD;&#x6570;&#x3002;&#x6CA1;&#x6709;&#x7F16;&#x5199;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x77ED;&#x51FD;&#x6570;&#xFF08;&#x5982;a=&#x5F62;&#x5F0F;&#x7684;&#x8D4B;&#x503C;&#xFF09;&#x901A;&#x5E38;&#x662F;&#x4E00;&#x4E2A;&#x597D;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x65F6;&#x5019;&#x66F4;&#x590D;&#x6742;&#x7684;&#x51FD;&#x6570;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5185;&#x8054;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x5728;&#x4E00;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#x5185;&#x8054;&#x53EF;&#x4EE5;&#x5B9E;&#x9645;&#x4E0A;&#x635F;&#x5BB3;&#x90E8;&#x5206;&#x6027;&#x80FD;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x56E0;&#x4E3A;&#x7F16;&#x8BD1;&#x5668;&#x5FC5;&#x987B;&#x521B;&#x5EFA;&#x4E34;&#x65F6;&#x53D8;&#x91CF;&#x670D;&#x52A1;&#x4E8E;&#x590D;&#x6742;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x3002; It is not always easy to judge if a function quali&#xFB01;es for being inline. Short functions that have no writing expressions (such as a = assignment) are usually a good choice, but even more complex functions can be candidates. However, in some cases inlining can actually be detrimental to performance, e.g. because the compiler has to create temporary variables for complex expressions. &#x5185;&#x8054;&#x5E76;&#x4E0D;&#x4FDD;&#x8BC1;&#x6267;&#x884C;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x53EF;&#x80FD;&#x7531;&#x4E8E;&#x591A;&#x79CD;&#x539F;&#x56E0;&#x53D6;&#x6D88;&#x5185;&#x8054;&#xFF0C;&#x7528;&#x6237;&#x4E5F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; &#x2013;no-inline &#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;&#x6765;&#x7981;&#x6B62;&#x5185;&#x8054;&#x3002;&#x552F;&#x4E00;&#x7684;&#x4F8B;&#x5916;&#x662F;&#x5982;&#x679C;&#x7C7B;&#x662F; extern&#xFF08;&#x7B2C;6.2&#x8282;&#xFF09;&#x6216;&#x8005;&#x5982;&#x679C;&#x6CEA;&#x5B57;&#x6BB5;&#x6709; :extern &#x5143;&#x6570;&#x636E;&#xFF08;&#x7B2C;6.9&#x8282;&#xFF09;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x5185;&#x8054;&#x88AB;&#x7981;&#x6B62;&#x3002;&#x5982;&#x679C;&#x5979;&#x4E0D;&#x80FD;&#x88AB;&#x6267;&#x884C;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x53D1;&#x51FA;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#x3002; Inline is not guaranteed to be done. The compiler might cancel inlining for various reasons or a user could supply the &#x2013;no-inline command line argument to disable inlining. The only exception is if the class is extern (6.2) or if the class &#xFB01;eld has the :extern metadata (6.9), in which case inline is forced. If it cannot be done, the compiler emits an error. &#x91CD;&#x8981;&#x7684;&#x662F;&#x4F9D;&#x8D56;&#x5185;&#x8054;&#x65F6;&#x8981;&#x8BB0;&#x5F97;&#x8FD9;&#x4E2A;&#xFF1A; It is important to remember this when relying on inline: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Main { public static function main () { } static function test () { if (Math.random()  0.5 ) { return ok ; } else { error( random failed ); } } @:extern static inline function error(s:String) { throw s; } } &#x5982;&#x679C;&#x6B63;&#x786E;&#x7684;&#x8C03;&#x7528;error&#x662F;&#x5185;&#x8054;&#x7684;&#xFF0C;&#x7A0B;&#x5E8F;&#x7F16;&#x8BD1;&#x6B63;&#x786E;&#xFF0C;&#x56E0;&#x4E3A;&#x63A7;&#x5236;&#x6D41;&#x68C0;&#x67E5;&#x5668;&#x6EE1;&#x610F;&#x5185;&#x8054;&#x7684;throw&#xFF08;&#x7B2C;5.22&#x8282;&#xFF09;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x5982;&#x679C;&#x5185;&#x8054;&#x90E8;&#x6267;&#x884C;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x53EA;&#x53D1;&#x73B0;&#x4E00;&#x4E2A;error&#x51FD;&#x6570;&#x7684;&#x8C03;&#x7528;&#x5E76;&#x53D1;&#x51FA;&#x9519;&#x8BEF; A return is missing here&#x3002; If the call to error is inlined the program compiles correctly because the control &#xFB02;ow checker is satis&#xFB01;ed due to the inlined throw (5.22) expression. If inline is not done,the compiler only sees a function call to error and emits the error A return is missing here. Inline variables The inline keyword can also be applied to variables, but only when used together with static . An inline variable must be initialized to a constant , otherwise the compiler emits an error. The value of the variable is used everywhere in place of the variable itself. The following code demonstrates the usage of an inline variable: 1 2 3 4 5 6 7 class Main { static inline final language = Haxe; static public function main() { trace(language); } } The generated JavaScript shows that the language variable is not present anymore: 1 2 3 4 5 6 7 (function ($global) { use strict; var Main = function() { }; Main.main = function() { console.log(root/program/Main.hx:5:,Haxe); }; Main.main(); })({}); Note that even though we call such kind of fields &#x201C;variables&#x201D;, inline variables can never be reassigned as the value must be known at compile-time to be inlined at the place of usage. This makes inline variables a subset of final fields , hence the usage of the final keyword in the code example above. Trivia: inline var Prior to Haxe 4, there was no final keyword. The inline variables feature however was present for a long time, using the var keyword instead of final . Using inline var still works in Haxe 4 but might be deprecated in the future, because final is more appropriate."},"4.类字段/4.4.访问修饰符/4.4.4.Override.html":{"title":"","path":"\\4.类字段\\4.4.访问修饰符\\4.4.4.Override.html","body":"4.4.4.Override 访问修饰符 override 要求被修饰的字段声明也同时出现在父类（第2.3.2节）中。它的目的是确保类的作者意识到 override 因为这不能总是被明显的在庞大的类层级中。此外，如果字段修饰了override关键字而实际上没有重写任何东西（例如由于字段名的拼写错误导致）会引发一个错误。 The access modiﬁer override is required when a ﬁeld is declared which also exists on a parent class(2.3.2). Its purpose is to ensure that the author of a class is aware of the override as this may not always be obvious in large class hierarchies. Likewise, having override on a ﬁeld which does not actually override anything (e.g. due to a misspelled ﬁeld name) triggers an error. 重载字段的效果在重载方法（第4.3.1节）详述。这个修饰符只允许用于方法（第4.3节）字段。 The effects of overriding ﬁelds are detailed in Overriding Methods (Section 4.3.1). This modiﬁer is only allowed on method (4.3) ﬁelds."},"4.类字段/4.4.访问修饰符/4.4.4.Override.html#4-4-4-Override":{"title":"4.4.4.Override","path":"\\4.类字段\\4.4.访问修饰符\\4.4.4.Override.html#4-4-4-Override","body":"&#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26; override &#x8981;&#x6C42;&#x88AB;&#x4FEE;&#x9970;&#x7684;&#x5B57;&#x6BB5;&#x58F0;&#x660E;&#x4E5F;&#x540C;&#x65F6;&#x51FA;&#x73B0;&#x5728;&#x7236;&#x7C7B;&#xFF08;&#x7B2C;2.3.2&#x8282;&#xFF09;&#x4E2D;&#x3002;&#x5B83;&#x7684;&#x76EE;&#x7684;&#x662F;&#x786E;&#x4FDD;&#x7C7B;&#x7684;&#x4F5C;&#x8005;&#x610F;&#x8BC6;&#x5230; override &#x56E0;&#x4E3A;&#x8FD9;&#x4E0D;&#x80FD;&#x603B;&#x662F;&#x88AB;&#x660E;&#x663E;&#x7684;&#x5728;&#x5E9E;&#x5927;&#x7684;&#x7C7B;&#x5C42;&#x7EA7;&#x4E2D;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x5982;&#x679C;&#x5B57;&#x6BB5;&#x4FEE;&#x9970;&#x4E86;override&#x5173;&#x952E;&#x5B57;&#x800C;&#x5B9E;&#x9645;&#x4E0A;&#x6CA1;&#x6709;&#x91CD;&#x5199;&#x4EFB;&#x4F55;&#x4E1C;&#x897F;&#xFF08;&#x4F8B;&#x5982;&#x7531;&#x4E8E;&#x5B57;&#x6BB5;&#x540D;&#x7684;&#x62FC;&#x5199;&#x9519;&#x8BEF;&#x5BFC;&#x81F4;&#xFF09;&#x4F1A;&#x5F15;&#x53D1;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#x3002; The access modi&#xFB01;er override is required when a &#xFB01;eld is declared which also exists on a parent class(2.3.2). Its purpose is to ensure that the author of a class is aware of the override as this may not always be obvious in large class hierarchies. Likewise, having override on a &#xFB01;eld which does not actually override anything (e.g. due to a misspelled &#xFB01;eld name) triggers an error. &#x91CD;&#x8F7D;&#x5B57;&#x6BB5;&#x7684;&#x6548;&#x679C;&#x5728;&#x91CD;&#x8F7D;&#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3.1&#x8282;&#xFF09;&#x8BE6;&#x8FF0;&#x3002;&#x8FD9;&#x4E2A;&#x4FEE;&#x9970;&#x7B26;&#x53EA;&#x5141;&#x8BB8;&#x7528;&#x4E8E;&#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3&#x8282;&#xFF09;&#x5B57;&#x6BB5;&#x3002; The effects of overriding &#xFB01;elds are detailed in Overriding Methods (Section 4.3.1). This modi&#xFB01;er is only allowed on method (4.3) &#xFB01;elds."},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html":{"title":"","path":"\\4.类字段\\4.4.访问修饰符\\4.4.3.Dynamic.html","body":"4.4.3.Dynamic 方法可以通过 dynamic 关键字 使它们可绑定（重绑定）： Methods can be denoted with the dynamic keyword to make them (re-)bindable: 1 2 3 4 5 6 7 8 9 10 class Main  static dynamic function test ()  return \"original\" ;  static public function main ()  trace (test()); // original test = function ()  return \"new\" ;  trace (test()); // new   第一次调用 test() 调用了原来的函数，返回字符串 “original”。下一行，test被分配了一个新的函数。这恰恰是dynamic做到的：函数字段可以被分配一个新的函数。其结果是，下一次调用 test() 返回字符串 “new” 。 The ﬁrst call to test() invokes the original function which returns the String “original”. In the next line, test is assigned a new function. This is precisely what dynamic allows: Function ﬁelds can be assigned a new function. As a result,the next invocation of test() returnsthe String “new”. 动态字段因为明显的理由不能内联：内联是在编译时执行，动态函数必须被在运行时决定。 Dynamic ﬁelds cannot be inline for obvious reasons: While inlining is done at compiletime, dynamic functions necessarily have to be resolved at runtime."},"4.类字段/4.4.访问修饰符/4.4.3.Dynamic.html#4-4-3-Dynamic":{"title":"4.4.3.Dynamic","path":"\\4.类字段\\4.4.访问修饰符\\4.4.3.Dynamic.html#4-4-3-Dynamic","body":"&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; dynamic &#x5173;&#x952E;&#x5B57; &#x4F7F;&#x5B83;&#x4EEC;&#x53EF;&#x7ED1;&#x5B9A;&#xFF08;&#x91CD;&#x7ED1;&#x5B9A;&#xFF09;&#xFF1A; Methods can be denoted with the dynamic keyword to make them (re-)bindable: 1 2 3 4 5 6 7 8 9 10 class Main { static dynamic function test () { return original ; } static public function main () { trace (test()); // original test = function () { return new ; } trace (test()); // new } } &#x7B2C;&#x4E00;&#x6B21;&#x8C03;&#x7528; test() &#x8C03;&#x7528;&#x4E86;&#x539F;&#x6765;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x5B57;&#x7B26;&#x4E32; &#x201C;original&#x201D;&#x3002;&#x4E0B;&#x4E00;&#x884C;&#xFF0C;test&#x88AB;&#x5206;&#x914D;&#x4E86;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x51FD;&#x6570;&#x3002;&#x8FD9;&#x6070;&#x6070;&#x662F;dynamic&#x505A;&#x5230;&#x7684;&#xFF1A;&#x51FD;&#x6570;&#x5B57;&#x6BB5;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x51FD;&#x6570;&#x3002;&#x5176;&#x7ED3;&#x679C;&#x662F;&#xFF0C;&#x4E0B;&#x4E00;&#x6B21;&#x8C03;&#x7528; test() &#x8FD4;&#x56DE;&#x5B57;&#x7B26;&#x4E32; &#x201C;new&#x201D; &#x3002; The &#xFB01;rst call to test() invokes the original function which returns the String &#x201C;original&#x201D;. In the next line, test is assigned a new function. This is precisely what dynamic allows: Function &#xFB01;elds can be assigned a new function. As a result,the next invocation of test() returnsthe String &#x201C;new&#x201D;. &#x52A8;&#x6001;&#x5B57;&#x6BB5;&#x56E0;&#x4E3A;&#x660E;&#x663E;&#x7684;&#x7406;&#x7531;&#x4E0D;&#x80FD;&#x5185;&#x8054;&#xFF1A;&#x5185;&#x8054;&#x662F;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x6267;&#x884C;&#xFF0C;&#x52A8;&#x6001;&#x51FD;&#x6570;&#x5FC5;&#x987B;&#x88AB;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x51B3;&#x5B9A;&#x3002; Dynamic &#xFB01;elds cannot be inline for obvious reasons: While inlining is done at compiletime, dynamic functions necessarily have to be resolved at runtime."},"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html":{"title":"","path":"\\4.类字段\\4.4.访问修饰符\\4.4.访问修饰符.html","body":"4.4.访问修饰符 本节内容： 可见性 inline修饰符 dynamic修饰符 override修饰符 static修饰符"},"4.类字段/4.4.访问修饰符/4.4.访问修饰符.html#4-4-访问修饰符":{"title":"4.4.&#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;","path":"\\4.类字段\\4.4.访问修饰符\\4.4.访问修饰符.html#4-4-访问修饰符","body":"&#x672C;&#x8282;&#x5185;&#x5BB9;&#xFF1A; &#x53EF;&#x89C1;&#x6027; inline&#x4FEE;&#x9970;&#x7B26; dynamic&#x4FEE;&#x9970;&#x7B26; override&#x4FEE;&#x9970;&#x7B26; static&#x4FEE;&#x9970;&#x7B26;"},"4.类字段/4.4.访问修饰符/4.4.5.Static.html":{"title":"","path":"\\4.类字段\\4.4.访问修饰符\\4.4.5.Static.html","body":"4.4.5.Static 所有的字段除非修饰符标记为 static 否则都是成员字段。Static字段用在类上，就像非静态字段用在类的实例上。 所有的字段除非修饰符标记为 static 否则都是成员字段。static字段通过类使用，而非static字段通过类的实例使用。 All ﬁelds are member ﬁelds unless the modiﬁer static is used. Static ﬁelds are used “on the class” whereas non-static ﬁelds are used “on a class instance”: 1 2 3 4 5 6 7 class Main  static function main ()  Main.staticField; // static read Main.staticField = 2 ; // static write  static var staticField: Int ;  静态变量（第4.1节）和属性（第4.2节）字段可以使用任意的初始化表达式（第5章）. Static variable (4.1) and property (4.2) ﬁelds can have arbitrary initialization expressions (5)."},"4.类字段/4.4.访问修饰符/4.4.5.Static.html#4-4-5-Static":{"title":"4.4.5.Static","path":"\\4.类字段\\4.4.访问修饰符\\4.4.5.Static.html#4-4-5-Static","body":"&#x6240;&#x6709;&#x7684;&#x5B57;&#x6BB5;&#x9664;&#x975E;&#x4FEE;&#x9970;&#x7B26;&#x6807;&#x8BB0;&#x4E3A; static &#x5426;&#x5219;&#x90FD;&#x662F;&#x6210;&#x5458;&#x5B57;&#x6BB5;&#x3002;Static&#x5B57;&#x6BB5;&#x7528;&#x5728;&#x7C7B;&#x4E0A;&#xFF0C;&#x5C31;&#x50CF;&#x975E;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x7528;&#x5728;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x4E0A;&#x3002; &#x6240;&#x6709;&#x7684;&#x5B57;&#x6BB5;&#x9664;&#x975E;&#x4FEE;&#x9970;&#x7B26;&#x6807;&#x8BB0;&#x4E3A; static &#x5426;&#x5219;&#x90FD;&#x662F;&#x6210;&#x5458;&#x5B57;&#x6BB5;&#x3002;static&#x5B57;&#x6BB5;&#x901A;&#x8FC7;&#x7C7B;&#x4F7F;&#x7528;&#xFF0C;&#x800C;&#x975E;static&#x5B57;&#x6BB5;&#x901A;&#x8FC7;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x4F7F;&#x7528;&#x3002; All &#xFB01;elds are member &#xFB01;elds unless the modi&#xFB01;er static is used. Static &#xFB01;elds are used &#x201C;on the class&#x201D; whereas non-static &#xFB01;elds are used &#x201C;on a class instance&#x201D;: 1 2 3 4 5 6 7 class Main { static function main () { Main.staticField; // static read Main.staticField = 2 ; // static write } static var staticField: Int ; } &#x9759;&#x6001;&#x53D8;&#x91CF;&#xFF08;&#x7B2C;4.1&#x8282;&#xFF09;&#x548C;&#x5C5E;&#x6027;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#x5B57;&#x6BB5;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4EFB;&#x610F;&#x7684;&#x521D;&#x59CB;&#x5316;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09;. Static variable (4.1) and property (4.2) &#xFB01;elds can have arbitrary initialization expressions (5)."},"5.表达式/5.1.块/5.1.块.html":{"title":"","path":"\\5.表达式\\5.1.块\\5.1.块.html","body":"5.1.块 Haxe中的一个块由一个开口的 花括号 { 开始，以一个闭口的花括号 }结束。一个块可以包含一些表达式，每个使用分号结束。通常的语法是： A block in Haxe starts with an opening curly brace { and ends with a closing curly brace }. A block may contain several expressions, each of which is followed by a semicolon ;. The general syntax is thus: 1 2 3 4 5 6  expr1; expr2; ... exprN;  被块表达式扩展的值和类型等于最后一个子表达式的值和类型。 The value and by extension the type of a block-expression is equal to the value and the type of the last sub-expression. 块可以包含局部变量，通过 var表达式（第5.10节）声明，同样，局部函数通过 function 表达式（第5.11节）声明。它们在块和子块中中是可用的，但是不能在块的范围之外使用。同样，只有在被声明之后才可以使用。下面的例子使用 var，但是同样的规则也适用于 function 的使用： Blocks can contain local variables declared by var expression (5.10), as well as local functions declared by function expressions (5.11). These are available within the block and within sub-blocks, but not outside the block. Also, they are available only after their declaration. The following example uses var, but the same rules apply to function usage: 1 2 3 4 5 6 7 8 9 10 11 12  a; // error, a is not declared yet var a = 1 ; // declare a a; // ok, a was declared  a; // ok, a is available in sub-blocks  // ok, a is still available after // sub-blocks a;  a; // error, a is not available outside 在运行时，块从头至尾执行。控制流（如异常（第5.18节）或者返回表达式（第5.19节））可能在所有的表达式被执行之前离开块。 At runtime, blocks are evaluated from top to bottom. Control ﬂow (e.g. exceptions (5.18) or return expressions (5.19)) may leave a block before all expressions are evaluated."},"5.表达式/5.1.块/5.1.块.html#5-1-块":{"title":"5.1.&#x5757;","path":"\\5.表达式\\5.1.块\\5.1.块.html#5-1-块","body":"Haxe&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x5757;&#x7531;&#x4E00;&#x4E2A;&#x5F00;&#x53E3;&#x7684; &#x82B1;&#x62EC;&#x53F7; { &#x5F00;&#x59CB;&#xFF0C;&#x4EE5;&#x4E00;&#x4E2A;&#x95ED;&#x53E3;&#x7684;&#x82B1;&#x62EC;&#x53F7; }&#x7ED3;&#x675F;&#x3002;&#x4E00;&#x4E2A;&#x5757;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x4E00;&#x4E9B;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x6BCF;&#x4E2A;&#x4F7F;&#x7528;&#x5206;&#x53F7;&#x7ED3;&#x675F;&#x3002;&#x901A;&#x5E38;&#x7684;&#x8BED;&#x6CD5;&#x662F;&#xFF1A; A block in Haxe starts with an opening curly brace { and ends with a closing curly brace }. A block may contain several expressions, each of which is followed by a semicolon ;. The general syntax is thus: 1 2 3 4 5 6 { expr1; expr2; ... exprN; } &#x88AB;&#x5757;&#x8868;&#x8FBE;&#x5F0F;&#x6269;&#x5C55;&#x7684;&#x503C;&#x548C;&#x7C7B;&#x578B;&#x7B49;&#x4E8E;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5B50;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;&#x548C;&#x7C7B;&#x578B;&#x3002; The value and by extension the type of a block-expression is equal to the value and the type of the last sub-expression. &#x5757;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF0C;&#x901A;&#x8FC7; var&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5.10&#x8282;&#xFF09;&#x58F0;&#x660E;&#xFF0C;&#x540C;&#x6837;&#xFF0C;&#x5C40;&#x90E8;&#x51FD;&#x6570;&#x901A;&#x8FC7; function &#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5.11&#x8282;&#xFF09;&#x58F0;&#x660E;&#x3002;&#x5B83;&#x4EEC;&#x5728;&#x5757;&#x548C;&#x5B50;&#x5757;&#x4E2D;&#x4E2D;&#x662F;&#x53EF;&#x7528;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x80FD;&#x5728;&#x5757;&#x7684;&#x8303;&#x56F4;&#x4E4B;&#x5916;&#x4F7F;&#x7528;&#x3002;&#x540C;&#x6837;&#xFF0C;&#x53EA;&#x6709;&#x5728;&#x88AB;&#x58F0;&#x660E;&#x4E4B;&#x540E;&#x624D;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x3002;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4F7F;&#x7528; var&#xFF0C;&#x4F46;&#x662F;&#x540C;&#x6837;&#x7684;&#x89C4;&#x5219;&#x4E5F;&#x9002;&#x7528;&#x4E8E; function &#x7684;&#x4F7F;&#x7528;&#xFF1A; Blocks can contain local variables declared by var expression (5.10), as well as local functions declared by function expressions (5.11). These are available within the block and within sub-blocks, but not outside the block. Also, they are available only after their declaration. The following example uses var, but the same rules apply to function usage: 1 2 3 4 5 6 7 8 9 10 11 12 { a; // error, a is not declared yet var a = 1 ; // declare a a; // ok, a was declared { a; // ok, a is available in sub-blocks } // ok, a is still available after // sub-blocks a; } a; // error, a is not available outside &#x5728;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x5757;&#x4ECE;&#x5934;&#x81F3;&#x5C3E;&#x6267;&#x884C;&#x3002;&#x63A7;&#x5236;&#x6D41;&#xFF08;&#x5982;&#x5F02;&#x5E38;&#xFF08;&#x7B2C;5.18&#x8282;&#xFF09;&#x6216;&#x8005;&#x8FD4;&#x56DE;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5.19&#x8282;&#xFF09;&#xFF09;&#x53EF;&#x80FD;&#x5728;&#x6240;&#x6709;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x88AB;&#x6267;&#x884C;&#x4E4B;&#x524D;&#x79BB;&#x5F00;&#x5757;&#x3002; At runtime, blocks are evaluated from top to bottom. Control &#xFB02;ow (e.g. exceptions (5.18) or return expressions (5.19)) may leave a block before all expressions are evaluated."},"5.表达式/5.10.var/5.10.var.html":{"title":"","path":"\\5.表达式\\5.10.var\\5.10.var.html","body":"5.10.var var 关键字允许声明多个变量，通过逗号分隔。每个变量有一个有效的标识符（第5章），可选的可以有一个值分配，跟在赋值操作符 = 之后。变量也可以有一个显式的类型标记。 The var keyword allows declaring multiple variables, separated by comma ,. Each variable has a valid identiﬁer (5) and optionally a value assignment following the assignment operator =. Variables can also have an explicit type-hint. 1 2 3 4 5 6 7 var a; // declare local a var b: Int ; // declare variable b of type Int // declare variable c, initialized to value 1 var c = 1 ; // declare variable d and variable e // initialized to value 2 var d,e = 2 ; 局部变量的作用于行为在块（第5.1节）中描述。 The scoping behavior of local variables is described in Blocks (Section 5.1)."},"5.表达式/5.10.var/5.10.var.html#5-10-var":{"title":"5.10.var","path":"\\5.表达式\\5.10.var\\5.10.var.html#5-10-var","body":"var &#x5173;&#x952E;&#x5B57;&#x5141;&#x8BB8;&#x58F0;&#x660E;&#x591A;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x901A;&#x8FC7;&#x9017;&#x53F7;&#x5206;&#x9694;&#x3002;&#x6BCF;&#x4E2A;&#x53D8;&#x91CF;&#x6709;&#x4E00;&#x4E2A;&#x6709;&#x6548;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09;&#xFF0C;&#x53EF;&#x9009;&#x7684;&#x53EF;&#x4EE5;&#x6709;&#x4E00;&#x4E2A;&#x503C;&#x5206;&#x914D;&#xFF0C;&#x8DDF;&#x5728;&#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#x7B26; = &#x4E4B;&#x540E;&#x3002;&#x53D8;&#x91CF;&#x4E5F;&#x53EF;&#x4EE5;&#x6709;&#x4E00;&#x4E2A;&#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x6807;&#x8BB0;&#x3002; The var keyword allows declaring multiple variables, separated by comma ,. Each variable has a valid identi&#xFB01;er (5) and optionally a value assignment following the assignment operator =. Variables can also have an explicit type-hint. 1 2 3 4 5 6 7 var a; // declare local a var b: Int ; // declare variable b of type Int // declare variable c, initialized to value 1 var c = 1 ; // declare variable d and variable e // initialized to value 2 var d,e = 2 ; &#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x7684;&#x4F5C;&#x7528;&#x4E8E;&#x884C;&#x4E3A;&#x5728;&#x5757;&#xFF08;&#x7B2C;5.1&#x8282;&#xFF09;&#x4E2D;&#x63CF;&#x8FF0;&#x3002; The scoping behavior of local variables is described in Blocks (Section 5.1)."},"5.表达式/5.11.局部函数/5.11.局部函数.html":{"title":"","path":"\\5.表达式\\5.11.局部函数\\5.11.局部函数.html","body":"5.11.局部函数 Haxe 支持表达式中使用 类级 函数声明也支持 局部 函数声明。其语法遵循类字段方法（4.3）的语法： Haxe supports ﬁrst-class functions and allows declaring local functions in expressions. The syntax follows class ﬁeld methods (4.3): 1 2 3 4 5 6 7 8 9 class Main  static public function main ()  var value = 1 ; function myLocalFunction (i)  return value + i;  trace (myLocalFunction( 2 )); // 3   我们声明了一个 myLocalFunction 位于类字段 main 的块表达式（5.1）中。它接受一个参数，并对参数加上外部作用域中定义的 value 的值。 We declare myLocalFunction inside the block expression (5.1) of the main class ﬁeld. It takes one argument i and adds it to value, which is deﬁned in the outside scope. 其作用域等同于 变量（5.10）的作用域，且大多数情况下声明一个带命名的局部函数实际上可以被看作是把一个匿名函数赋值到一个变量上： The scoping is equivalent to that of variables (5.10) and for the most part writing a named local function can be considered equal to assigning an unnamed local function to a local variable: 1 var myLocalFunction = function (a)   但是当涉及类型参数（3.2）以及函数所处位置时有些不同。当一个函数在声明时没有被赋值给任何变量，我们称它为 ‘lvalue’ 函数，反之称其为 ‘rvalue’ 函数 lvalue 函数 需要 一个名字，且可以具有类型参数（3.2） rvalue 函数不一定有名字，但不可以具有类型参数 However, there are some differences related to type parameters and the position of the function. We speak of a “lvalue” function if it is not assigned to anything upon its declaration, and an “rvalue” function otherwise. Lvalue functions require a name and can have type parameters (3.2). Rvalue functions may have a name, but cannot have type parameters. 1 2 3 4 5 6 var func = function (); // 这是一个 rvalue 函数, 它有名字，可以通过 func 这个 “名字” 来调用它 function (); // 同样这也是一个 rvalue 函数，但是它没有名字，是个孤儿, 但是除非作为某个函数参数，否则单独这样放在某个语句块会报错。 function hasName T (); // 这是一个 lvalue 函数可以具有类型参数 var funFact = function gotNamedT(x:T) trace('T is: $x'); ; // 这样的声明不可行，尽管 gotNamed 是 lvalue 但是编译器会认为 funFact 实际上是作为 rvalue 使用，所以编译器会抛出错误提示；所以其实这种写法并不能作为某个参数来传递 var funFact = hasName; // 但是这样可以， 此时相当于 lvalue 函数 hasName 的另外一个别名为 funFact 。。。"},"5.表达式/5.11.局部函数/5.11.局部函数.html#5-11-局部函数":{"title":"5.11.&#x5C40;&#x90E8;&#x51FD;&#x6570;","path":"\\5.表达式\\5.11.局部函数\\5.11.局部函数.html#5-11-局部函数","body":"Haxe &#x652F;&#x6301;&#x8868;&#x8FBE;&#x5F0F;&#x4E2D;&#x4F7F;&#x7528; &#x7C7B;&#x7EA7; &#x51FD;&#x6570;&#x58F0;&#x660E;&#x4E5F;&#x652F;&#x6301; &#x5C40;&#x90E8; &#x51FD;&#x6570;&#x58F0;&#x660E;&#x3002;&#x5176;&#x8BED;&#x6CD5;&#x9075;&#x5FAA;&#x7C7B;&#x5B57;&#x6BB5;&#x65B9;&#x6CD5;&#xFF08;4.3&#xFF09;&#x7684;&#x8BED;&#x6CD5;&#xFF1A; Haxe supports &#xFB01;rst-class functions and allows declaring local functions in expressions. The syntax follows class &#xFB01;eld methods (4.3): 1 2 3 4 5 6 7 8 9 class Main { static public function main () { var value = 1 ; function myLocalFunction (i) { return value + i; } trace (myLocalFunction( 2 )); // 3 } } &#x6211;&#x4EEC;&#x58F0;&#x660E;&#x4E86;&#x4E00;&#x4E2A; myLocalFunction &#x4F4D;&#x4E8E;&#x7C7B;&#x5B57;&#x6BB5; main &#x7684;&#x5757;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;5.1&#xFF09;&#x4E2D;&#x3002;&#x5B83;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5E76;&#x5BF9;&#x53C2;&#x6570;&#x52A0;&#x4E0A;&#x5916;&#x90E8;&#x4F5C;&#x7528;&#x57DF;&#x4E2D;&#x5B9A;&#x4E49;&#x7684; value &#x7684;&#x503C;&#x3002; We declare myLocalFunction inside the block expression (5.1) of the main class &#xFB01;eld. It takes one argument i and adds it to value, which is de&#xFB01;ned in the outside scope. &#x5176;&#x4F5C;&#x7528;&#x57DF;&#x7B49;&#x540C;&#x4E8E; &#x53D8;&#x91CF;&#xFF08;5.10&#xFF09;&#x7684;&#x4F5C;&#x7528;&#x57DF;&#xFF0C;&#x4E14;&#x5927;&#x591A;&#x6570;&#x60C5;&#x51B5;&#x4E0B;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x5E26;&#x547D;&#x540D;&#x7684;&#x5C40;&#x90E8;&#x51FD;&#x6570;&#x5B9E;&#x9645;&#x4E0A;&#x53EF;&#x4EE5;&#x88AB;&#x770B;&#x4F5C;&#x662F;&#x628A;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x51FD;&#x6570;&#x8D4B;&#x503C;&#x5230;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x4E0A;&#xFF1A; The scoping is equivalent to that of variables (5.10) and for the most part writing a named local function can be considered equal to assigning an unnamed local function to a local variable: 1 var myLocalFunction = function (a) { } &#x4F46;&#x662F;&#x5F53;&#x6D89;&#x53CA;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;3.2&#xFF09;&#x4EE5;&#x53CA;&#x51FD;&#x6570;&#x6240;&#x5904;&#x4F4D;&#x7F6E;&#x65F6;&#x6709;&#x4E9B;&#x4E0D;&#x540C;&#x3002;&#x5F53;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5728;&#x58F0;&#x660E;&#x65F6;&#x6CA1;&#x6709;&#x88AB;&#x8D4B;&#x503C;&#x7ED9;&#x4EFB;&#x4F55;&#x53D8;&#x91CF;&#xFF0C;&#x6211;&#x4EEC;&#x79F0;&#x5B83;&#x4E3A; &#x2018;lvalue&#x2019; &#x51FD;&#x6570;&#xFF0C;&#x53CD;&#x4E4B;&#x79F0;&#x5176;&#x4E3A; &#x2018;rvalue&#x2019; &#x51FD;&#x6570; lvalue &#x51FD;&#x6570; &#x9700;&#x8981; &#x4E00;&#x4E2A;&#x540D;&#x5B57;&#xFF0C;&#x4E14;&#x53EF;&#x4EE5;&#x5177;&#x6709;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;3.2&#xFF09; rvalue &#x51FD;&#x6570;&#x4E0D;&#x4E00;&#x5B9A;&#x6709;&#x540D;&#x5B57;&#xFF0C;&#x4F46;&#x4E0D;&#x53EF;&#x4EE5;&#x5177;&#x6709;&#x7C7B;&#x578B;&#x53C2;&#x6570; However, there are some differences related to type parameters and the position of the function. We speak of a &#x201C;lvalue&#x201D; function if it is not assigned to anything upon its declaration, and an &#x201C;rvalue&#x201D; function otherwise. Lvalue functions require a name and can have type parameters (3.2). Rvalue functions may have a name, but cannot have type parameters. 1 2 3 4 5 6 var func = function (){}; // &#x8FD9;&#x662F;&#x4E00;&#x4E2A; rvalue &#x51FD;&#x6570;, &#x5B83;&#x6709;&#x540D;&#x5B57;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; func &#x8FD9;&#x4E2A; &#x201C;&#x540D;&#x5B57;&#x201D; &#x6765;&#x8C03;&#x7528;&#x5B83; function (){}; // &#x540C;&#x6837;&#x8FD9;&#x4E5F;&#x662F;&#x4E00;&#x4E2A; rvalue &#x51FD;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x6CA1;&#x6709;&#x540D;&#x5B57;&#xFF0C;&#x662F;&#x4E2A;&#x5B64;&#x513F;, &#x4F46;&#x662F;&#x9664;&#x975E;&#x4F5C;&#x4E3A;&#x67D0;&#x4E2A;&#x51FD;&#x6570;&#x53C2;&#x6570;&#xFF0C;&#x5426;&#x5219;&#x5355;&#x72EC;&#x8FD9;&#x6837;&#x653E;&#x5728;&#x67D0;&#x4E2A;&#x8BED;&#x53E5;&#x5757;&#x4F1A;&#x62A5;&#x9519;&#x3002; function hasName T (){}; // &#x8FD9;&#x662F;&#x4E00;&#x4E2A; lvalue &#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x5177;&#x6709;&#x7C7B;&#x578B;&#x53C2;&#x6570; var funFact = function gotNamedT(x:T){ trace(&apos;T is: ${x}&apos;); }; // &#x8FD9;&#x6837;&#x7684;&#x58F0;&#x660E;&#x4E0D;&#x53EF;&#x884C;&#xFF0C;&#x5C3D;&#x7BA1; gotNamed &#x662F; lvalue &#x4F46;&#x662F;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x8BA4;&#x4E3A; funFact &#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4F5C;&#x4E3A; rvalue &#x4F7F;&#x7528;&#xFF0C;&#x6240;&#x4EE5;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x629B;&#x51FA;&#x9519;&#x8BEF;&#x63D0;&#x793A;&#xFF1B;&#x6240;&#x4EE5;&#x5176;&#x5B9E;&#x8FD9;&#x79CD;&#x5199;&#x6CD5;&#x5E76;&#x4E0D;&#x80FD;&#x4F5C;&#x4E3A;&#x67D0;&#x4E2A;&#x53C2;&#x6570;&#x6765;&#x4F20;&#x9012; var funFact = hasName; // &#x4F46;&#x662F;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#xFF0C; &#x6B64;&#x65F6;&#x76F8;&#x5F53;&#x4E8E; lvalue &#x51FD;&#x6570; hasName &#x7684;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x522B;&#x540D;&#x4E3A; funFact &#x3002;&#x3002;&#x3002;"},"5.表达式/5.12.new/5.12.new.html":{"title":"","path":"\\5.表达式\\5.12.new\\5.12.new.html","body":"5.12.new new 关键字表示一个类（第2.3节）或者一个抽象类型（第2.8节）被实例化。后面跟着将要被实例化的类型的类型路径（第3.7节）。它也可以在  中显式地列出类型参数（第3.2节），通过逗号分隔。 在一个括号 () 中跟随构造器参数，同样使用逗号分隔。 The new keyword signals that a class (2.3) or an abstract (2.8) is being instantiated. It is followed by the type path (3.7) of the type which is to be instantiated. It may also list explicit type parameters (3.2) enclosed in  and separated by comma,. After an opening parenthesis () follow the constructor arguments, again separated by comma ,, with a closing parenthesis ) at the end. 1 2 3 4 5 6 7 class Main  T   static public function main ()  new Main  Int ( 12 , \"foo\" );  function new (t: T , s: String )    main方法中我们实例化一个Main类自己的实例，有一个显式的类型参数 Int 和参数 12跟 “foo” 。就如我们看到的，语法非常类似函数的调用语法（第5.9节），通常称为构造函数调用。 Within the main method we instantiate an instance of Main itself, with an explicit type parameter Int and the arguments 12 and “foo”. As we can see, the syntax is very similar to the function call syntax (5.9) and it is common to speak of “constructor calls”."},"5.表达式/5.12.new/5.12.new.html#5-12-new":{"title":"5.12.new","path":"\\5.表达式\\5.12.new\\5.12.new.html#5-12-new","body":"new &#x5173;&#x952E;&#x5B57;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x7C7B;&#xFF08;&#x7B2C;2.3&#x8282;&#xFF09;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.8&#x8282;&#xFF09;&#x88AB;&#x5B9E;&#x4F8B;&#x5316;&#x3002;&#x540E;&#x9762;&#x8DDF;&#x7740;&#x5C06;&#x8981;&#x88AB;&#x5B9E;&#x4F8B;&#x5316;&#x7684;&#x7C7B;&#x578B;&#x7684;&#x7C7B;&#x578B;&#x8DEF;&#x5F84;&#xFF08;&#x7B2C;3.7&#x8282;&#xFF09;&#x3002;&#x5B83;&#x4E5F;&#x53EF;&#x4EE5;&#x5728;  &#x4E2D;&#x663E;&#x5F0F;&#x5730;&#x5217;&#x51FA;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09;&#xFF0C;&#x901A;&#x8FC7;&#x9017;&#x53F7;&#x5206;&#x9694;&#x3002; &#x5728;&#x4E00;&#x4E2A;&#x62EC;&#x53F7; () &#x4E2D;&#x8DDF;&#x968F;&#x6784;&#x9020;&#x5668;&#x53C2;&#x6570;&#xFF0C;&#x540C;&#x6837;&#x4F7F;&#x7528;&#x9017;&#x53F7;&#x5206;&#x9694;&#x3002; The new keyword signals that a class (2.3) or an abstract (2.8) is being instantiated. It is followed by the type path (3.7) of the type which is to be instantiated. It may also list explicit type parameters (3.2) enclosed in  and separated by comma,. After an opening parenthesis () follow the constructor arguments, again separated by comma ,, with a closing parenthesis ) at the end. 1 2 3 4 5 6 7 class Main  T  { static public function main () { new Main  Int ( 12 , foo ); } function new (t: T , s: String ) { } } main&#x65B9;&#x6CD5;&#x4E2D;&#x6211;&#x4EEC;&#x5B9E;&#x4F8B;&#x5316;&#x4E00;&#x4E2A;Main&#x7C7B;&#x81EA;&#x5DF1;&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x6709;&#x4E00;&#x4E2A;&#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570; Int &#x548C;&#x53C2;&#x6570; 12&#x8DDF; &#x201C;foo&#x201D; &#x3002;&#x5C31;&#x5982;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x7684;&#xFF0C;&#x8BED;&#x6CD5;&#x975E;&#x5E38;&#x7C7B;&#x4F3C;&#x51FD;&#x6570;&#x7684;&#x8C03;&#x7528;&#x8BED;&#x6CD5;&#xFF08;&#x7B2C;5.9&#x8282;&#xFF09;&#xFF0C;&#x901A;&#x5E38;&#x79F0;&#x4E3A;&#x6784;&#x9020;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x3002; Within the main method we instantiate an instance of Main itself, with an explicit type parameter Int and the arguments 12 and &#x201C;foo&#x201D;. As we can see, the syntax is very similar to the function call syntax (5.9) and it is common to speak of &#x201C;constructor calls&#x201D;."},"5.表达式/5.13.for/5.13.for.html":{"title":"","path":"\\5.表达式\\5.13.for\\5.13.for.html","body":"5.13.for Haxe不支持像 C 中传统的 for 循环。它的 for关键字期望一个开口的圆括号 (，然后一个变量标识符，之后一个关键字 in，和一个任意表达式作为迭代的集合；在闭口的圆括号 ) 之后，是任意的循环体表达式。 Haxe does not support traditional for-loops known from C.Its for keyword expects an opening parenthesis (, then a variable identiﬁer followed by the keyword in and an arbitrary expression used as iterating collection. After the closing parenthesis ) follows an arbitrary loop body expression. 1 for (v in e1) e2; 类型工具确保 e1 的类型可以被迭代，典型的情况是是否有一个iterator方法返回一个Iterator类型，或者它本身是一个 Iterator类型。 The typer ensures that the type of e1 can be iterated over, which is typically the case if it has an iterator method returning an Iterator, or if it is an Iterator itself. 变量 v 然后可以在循环体 e2 中使用，保存了e1集合的某个个体元素。 Variable v is then available within loop body e2 and holds the value of the individual elements of collection e1. Haxe有一个特别的范围操作符控制迭代次数。这是一个二院操作符，操作两个操作数：min…max，返回一个从min（包括）到max（不包括）的IntIterator类型的实例。注意，max不能小于min。 Haxe has a special range operator to iterate over intervals. It is a binary operator taking two Int operands: min…max returns an IntIterator instance that iterates from min (inclusive) to max (exclusive). Note that max may not be smaller than min. 1 for (i in 0. . .10 ) trace (i); // 0 to 9 for表达式的类型总是 Void ，也就是说没有值可以被使用作为右侧表达式。 The type of a for expression is always Void, meaning it has no value and cannot be used as right-side expression. 循环的控制流被 break（第5.20节）表达式影响，也受 continue（第5.21节）表达式影响。 The control ﬂow of loops can be affected by break (5.20) and continue (5.21) expressions."},"5.表达式/5.13.for/5.13.for.html#5-13-for":{"title":"5.13.for","path":"\\5.表达式\\5.13.for\\5.13.for.html#5-13-for","body":"Haxe&#x4E0D;&#x652F;&#x6301;&#x50CF; C &#x4E2D;&#x4F20;&#x7EDF;&#x7684; for &#x5FAA;&#x73AF;&#x3002;&#x5B83;&#x7684; for&#x5173;&#x952E;&#x5B57;&#x671F;&#x671B;&#x4E00;&#x4E2A;&#x5F00;&#x53E3;&#x7684;&#x5706;&#x62EC;&#x53F7; (&#xFF0C;&#x7136;&#x540E;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x6807;&#x8BC6;&#x7B26;&#xFF0C;&#x4E4B;&#x540E;&#x4E00;&#x4E2A;&#x5173;&#x952E;&#x5B57; in&#xFF0C;&#x548C;&#x4E00;&#x4E2A;&#x4EFB;&#x610F;&#x8868;&#x8FBE;&#x5F0F;&#x4F5C;&#x4E3A;&#x8FED;&#x4EE3;&#x7684;&#x96C6;&#x5408;&#xFF1B;&#x5728;&#x95ED;&#x53E3;&#x7684;&#x5706;&#x62EC;&#x53F7; ) &#x4E4B;&#x540E;&#xFF0C;&#x662F;&#x4EFB;&#x610F;&#x7684;&#x5FAA;&#x73AF;&#x4F53;&#x8868;&#x8FBE;&#x5F0F;&#x3002; Haxe does not support traditional for-loops known from C.Its for keyword expects an opening parenthesis (, then a variable identi&#xFB01;er followed by the keyword in and an arbitrary expression used as iterating collection. After the closing parenthesis ) follows an arbitrary loop body expression. 1 for (v in e1) e2; &#x7C7B;&#x578B;&#x5DE5;&#x5177;&#x786E;&#x4FDD; e1 &#x7684;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x8FED;&#x4EE3;&#xFF0C;&#x5178;&#x578B;&#x7684;&#x60C5;&#x51B5;&#x662F;&#x662F;&#x5426;&#x6709;&#x4E00;&#x4E2A;iterator&#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;Iterator&#x7C7B;&#x578B;&#xFF0C;&#x6216;&#x8005;&#x5B83;&#x672C;&#x8EAB;&#x662F;&#x4E00;&#x4E2A; Iterator&#x7C7B;&#x578B;&#x3002; The typer ensures that the type of e1 can be iterated over, which is typically the case if it has an iterator method returning an Iterator, or if it is an Iterator itself. &#x53D8;&#x91CF; v &#x7136;&#x540E;&#x53EF;&#x4EE5;&#x5728;&#x5FAA;&#x73AF;&#x4F53; e2 &#x4E2D;&#x4F7F;&#x7528;&#xFF0C;&#x4FDD;&#x5B58;&#x4E86;e1&#x96C6;&#x5408;&#x7684;&#x67D0;&#x4E2A;&#x4E2A;&#x4F53;&#x5143;&#x7D20;&#x3002; Variable v is then available within loop body e2 and holds the value of the individual elements of collection e1. Haxe&#x6709;&#x4E00;&#x4E2A;&#x7279;&#x522B;&#x7684;&#x8303;&#x56F4;&#x64CD;&#x4F5C;&#x7B26;&#x63A7;&#x5236;&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x4E8C;&#x9662;&#x64CD;&#x4F5C;&#x7B26;&#xFF0C;&#x64CD;&#x4F5C;&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#x6570;&#xFF1A;min&#x2026;max&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x4ECE;min&#xFF08;&#x5305;&#x62EC;&#xFF09;&#x5230;max&#xFF08;&#x4E0D;&#x5305;&#x62EC;&#xFF09;&#x7684;IntIterator&#x7C7B;&#x578B;&#x7684;&#x5B9E;&#x4F8B;&#x3002;&#x6CE8;&#x610F;&#xFF0C;max&#x4E0D;&#x80FD;&#x5C0F;&#x4E8E;min&#x3002; Haxe has a special range operator to iterate over intervals. It is a binary operator taking two Int operands: min&#x2026;max returns an IntIterator instance that iterates from min (inclusive) to max (exclusive). Note that max may not be smaller than min. 1 for (i in 0. . .10 ) trace (i); // 0 to 9 for&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x603B;&#x662F; Void &#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x6CA1;&#x6709;&#x503C;&#x53EF;&#x4EE5;&#x88AB;&#x4F7F;&#x7528;&#x4F5C;&#x4E3A;&#x53F3;&#x4FA7;&#x8868;&#x8FBE;&#x5F0F;&#x3002; The type of a for expression is always Void, meaning it has no value and cannot be used as right-side expression. &#x5FAA;&#x73AF;&#x7684;&#x63A7;&#x5236;&#x6D41;&#x88AB; break&#xFF08;&#x7B2C;5.20&#x8282;&#xFF09;&#x8868;&#x8FBE;&#x5F0F;&#x5F71;&#x54CD;&#xFF0C;&#x4E5F;&#x53D7; continue&#xFF08;&#x7B2C;5.21&#x8282;&#xFF09;&#x8868;&#x8FBE;&#x5F0F;&#x5F71;&#x54CD;&#x3002; The control &#xFB02;ow of loops can be affected by break (5.20) and continue (5.21) expressions."},"5.表达式/5.14.while/5.14.while.html":{"title":"","path":"\\5.表达式\\5.14.while\\5.14.while.html","body":"5.14.while 一个普通的 while 循环由 while 关键字开始，后跟一个开口的圆括号 (，其后是条件表达式和一个闭口的圆括号 ) 。然后跟一个循环体表达式： A normal while loop starts with the while keyword, followed by an opening parenthesis (, the condition expression and a closing paranthesis ). After that follows the loop body expression: 1 while (condition) expression; 条件表达式必须为 Bool 类型。 The condition expression has to be of type Bool. 对应每次迭代，条件表达式都会执行。如果它执行结果为 false ，循环则停止，否则执行循环体。 Upon each iteration, the condition expression is evaluated. If it evaluates to false, the loop stops, otherwise it evaluates the loop body expression. 1 2 3 4 5 6 7 8 9 class Main  static public function main ()  var f = 0.0 ; while (f  0.5 )  trace (f); f = Math.random();    这类的while循环不保证一定执行循环体表达式：如果条件从开始就不匹配，它不会执行。这和 do-while循环（第5.15节）不同。 This kind of while-loop is not guaranteed to evaluate the loop body expression at all: If the condition does not hold from the start, it is never evaluated. This is different for do-while loops (5.15)."},"5.表达式/5.14.while/5.14.while.html#5-14-while":{"title":"5.14.while","path":"\\5.表达式\\5.14.while\\5.14.while.html#5-14-while","body":"&#x4E00;&#x4E2A;&#x666E;&#x901A;&#x7684; while &#x5FAA;&#x73AF;&#x7531; while &#x5173;&#x952E;&#x5B57;&#x5F00;&#x59CB;&#xFF0C;&#x540E;&#x8DDF;&#x4E00;&#x4E2A;&#x5F00;&#x53E3;&#x7684;&#x5706;&#x62EC;&#x53F7; (&#xFF0C;&#x5176;&#x540E;&#x662F;&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#x548C;&#x4E00;&#x4E2A;&#x95ED;&#x53E3;&#x7684;&#x5706;&#x62EC;&#x53F7; ) &#x3002;&#x7136;&#x540E;&#x8DDF;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x4F53;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A; A normal while loop starts with the while keyword, followed by an opening parenthesis (, the condition expression and a closing paranthesis ). After that follows the loop body expression: 1 while (condition) expression; &#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#x5FC5;&#x987B;&#x4E3A; Bool &#x7C7B;&#x578B;&#x3002; The condition expression has to be of type Bool. &#x5BF9;&#x5E94;&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#xFF0C;&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#x90FD;&#x4F1A;&#x6267;&#x884C;&#x3002;&#x5982;&#x679C;&#x5B83;&#x6267;&#x884C;&#x7ED3;&#x679C;&#x4E3A; false &#xFF0C;&#x5FAA;&#x73AF;&#x5219;&#x505C;&#x6B62;&#xFF0C;&#x5426;&#x5219;&#x6267;&#x884C;&#x5FAA;&#x73AF;&#x4F53;&#x3002; Upon each iteration, the condition expression is evaluated. If it evaluates to false, the loop stops, otherwise it evaluates the loop body expression. 1 2 3 4 5 6 7 8 9 class Main { static public function main () { var f = 0.0 ; while (f  0.5 ) { trace (f); f = Math.random(); } } } &#x8FD9;&#x7C7B;&#x7684;while&#x5FAA;&#x73AF;&#x4E0D;&#x4FDD;&#x8BC1;&#x4E00;&#x5B9A;&#x6267;&#x884C;&#x5FAA;&#x73AF;&#x4F53;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A;&#x5982;&#x679C;&#x6761;&#x4EF6;&#x4ECE;&#x5F00;&#x59CB;&#x5C31;&#x4E0D;&#x5339;&#x914D;&#xFF0C;&#x5B83;&#x4E0D;&#x4F1A;&#x6267;&#x884C;&#x3002;&#x8FD9;&#x548C; do-while&#x5FAA;&#x73AF;&#xFF08;&#x7B2C;5.15&#x8282;&#xFF09;&#x4E0D;&#x540C;&#x3002; This kind of while-loop is not guaranteed to evaluate the loop body expression at all: If the condition does not hold from the start, it is never evaluated. This is different for do-while loops (5.15)."},"5.表达式/5.15.do-while/5.15.do-while.html":{"title":"","path":"\\5.表达式\\5.15.do-while\\5.15.do-while.html","body":"5.15.do-while do-while 循环由 do 关键字开始，后跟循环体表达式。其后跟while 关键字，然后是一个 开口的圆括号 (，再跟条件表达式和一个闭口的圆括号 ) ： A do-while loop starts with the do keyword followed by the loop body expression. After that follows the while keyword, an opening parenthesis (, the condition expression and a closing parenthesis ): 1 do expression while (condition); 条件表达式必须为Bool类型。 The condition expression has to be of type Bool. 如语法所暗示的，循环体表达式至少会执行一次，这和 while循环（第5.14节）不同。 As the syntax suggests, the loop body expression is always evaluated at least once, unlike while (5.14) loops."},"5.表达式/5.15.do-while/5.15.do-while.html#5-15-do-while":{"title":"5.15.do-while","path":"\\5.表达式\\5.15.do-while\\5.15.do-while.html#5-15-do-while","body":"do-while &#x5FAA;&#x73AF;&#x7531; do &#x5173;&#x952E;&#x5B57;&#x5F00;&#x59CB;&#xFF0C;&#x540E;&#x8DDF;&#x5FAA;&#x73AF;&#x4F53;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x5176;&#x540E;&#x8DDF;while &#x5173;&#x952E;&#x5B57;&#xFF0C;&#x7136;&#x540E;&#x662F;&#x4E00;&#x4E2A; &#x5F00;&#x53E3;&#x7684;&#x5706;&#x62EC;&#x53F7; (&#xFF0C;&#x518D;&#x8DDF;&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#x548C;&#x4E00;&#x4E2A;&#x95ED;&#x53E3;&#x7684;&#x5706;&#x62EC;&#x53F7; ) &#xFF1A; A do-while loop starts with the do keyword followed by the loop body expression. After that follows the while keyword, an opening parenthesis (, the condition expression and a closing parenthesis ): 1 do expression while (condition); &#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#x5FC5;&#x987B;&#x4E3A;Bool&#x7C7B;&#x578B;&#x3002; The condition expression has to be of type Bool. &#x5982;&#x8BED;&#x6CD5;&#x6240;&#x6697;&#x793A;&#x7684;&#xFF0C;&#x5FAA;&#x73AF;&#x4F53;&#x8868;&#x8FBE;&#x5F0F;&#x81F3;&#x5C11;&#x4F1A;&#x6267;&#x884C;&#x4E00;&#x6B21;&#xFF0C;&#x8FD9;&#x548C; while&#x5FAA;&#x73AF;&#xFF08;&#x7B2C;5.14&#x8282;&#xFF09;&#x4E0D;&#x540C;&#x3002; As the syntax suggests, the loop body expression is always evaluated at least once, unlike while (5.14) loops."},"5.表达式/5.16.if/5.16.if.html":{"title":"","path":"\\5.表达式\\5.16.if\\5.16.if.html","body":"5.16.if 条件表达式由关键字 if 开始，然后条件表达式放在一个 () 内，如果条件符合，表达式将会执行： Conditional expressions come in the form of a leading if keyword, a condition expression enclosed in parentheses () and a expression to be evaluated in case the condition holds: 1 if (condition) expression; 条件表达式必须为Bool类型。 The condition expression has to be of type Bool. 可选的，表达式可以后跟 else 关键字作为另一个表达式，如果条件不满足，可以执行else后的表达式： Optionally, expression may be followed by the else keyword as well as another expression to be evaluated if the condition does not hold: 1 if (condition) expression1 else expression2; 这里 ，expression2 可以认为是另一个 if 表达式： Here, expression2 may consist of another if expression: 1 2 3 if (condition1) expression1 else if (condition2) expression2 else expression3 是否一个 if 表达式的值是必须的，例如，对于 var x = if(condition) expression1 else expression2 ，类型工具确保expression1的类型和 expression2 统一（第3.5节）。如果没有 else 表达式被给定，类型被推断为 Void 。 If the value of an if expression is required,e.g. forvar x = if(condition) expression1 else expression2, the typer ensures that the types of expression1 and expression2 unify (3.5). If no else expression is given, the type is inferred to be Void."},"5.表达式/5.16.if/5.16.if.html#5-16-if":{"title":"5.16.if","path":"\\5.表达式\\5.16.if\\5.16.if.html#5-16-if","body":"&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#x7531;&#x5173;&#x952E;&#x5B57; if &#x5F00;&#x59CB;&#xFF0C;&#x7136;&#x540E;&#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#x653E;&#x5728;&#x4E00;&#x4E2A; () &#x5185;&#xFF0C;&#x5982;&#x679C;&#x6761;&#x4EF6;&#x7B26;&#x5408;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F;&#x5C06;&#x4F1A;&#x6267;&#x884C;&#xFF1A; Conditional expressions come in the form of a leading if keyword, a condition expression enclosed in parentheses () and a expression to be evaluated in case the condition holds: 1 if (condition) expression; &#x6761;&#x4EF6;&#x8868;&#x8FBE;&#x5F0F;&#x5FC5;&#x987B;&#x4E3A;Bool&#x7C7B;&#x578B;&#x3002; The condition expression has to be of type Bool. &#x53EF;&#x9009;&#x7684;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x4EE5;&#x540E;&#x8DDF; else &#x5173;&#x952E;&#x5B57;&#x4F5C;&#x4E3A;&#x53E6;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x5982;&#x679C;&#x6761;&#x4EF6;&#x4E0D;&#x6EE1;&#x8DB3;&#xFF0C;&#x53EF;&#x4EE5;&#x6267;&#x884C;else&#x540E;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A; Optionally, expression may be followed by the else keyword as well as another expression to be evaluated if the condition does not hold: 1 if (condition) expression1 else expression2; &#x8FD9;&#x91CC; &#xFF0C;expression2 &#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;&#x53E6;&#x4E00;&#x4E2A; if &#x8868;&#x8FBE;&#x5F0F;&#xFF1A; Here, expression2 may consist of another if expression: 1 2 3 if (condition1) expression1 else if (condition2) expression2 else expression3 &#x662F;&#x5426;&#x4E00;&#x4E2A; if &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x5BF9;&#x4E8E; var x = if(condition) expression1 else expression2 &#xFF0C;&#x7C7B;&#x578B;&#x5DE5;&#x5177;&#x786E;&#x4FDD;expression1&#x7684;&#x7C7B;&#x578B;&#x548C; expression2 &#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709; else &#x8868;&#x8FBE;&#x5F0F;&#x88AB;&#x7ED9;&#x5B9A;&#xFF0C;&#x7C7B;&#x578B;&#x88AB;&#x63A8;&#x65AD;&#x4E3A; Void &#x3002; If the value of an if expression is required,e.g. forvar x = if(condition) expression1 else expression2, the typer ensures that the types of expression1 and expression2 unify (3.5). If no else expression is given, the type is inferred to be Void."},"5.表达式/5.17.switch/5.17.switch.html":{"title":"","path":"\\5.表达式\\5.17.switch\\5.17.switch.html","body":"5.17.switch 一个基础的 switch 表达式由 switch 关键字开始，后面是开关的主题表达式，然后是大括号内的case 表达式。case 表达式都是以case 关键字开始，后跟一个模式表达式，还有一种 defalut 关键字定义默认行为。每个case 后都跟一个冒号和一个可选的case 体表达式： A basic switch expression starts with the switch keyword and the switch subject expression, as well as the case expressions between curly braces {}. Case expressions either start with the case keyword and are followed by a pattern expression, or consist of the default keyword. In both cases a colon : and an optional case body expression follows: 1 2 3 4 5 switch subject  case pattern1: case-body-expression-1 ; case pattern2: case-body-expression-2 ; default : default-expression ;  case 体表达式从不失败，所以 break（第5.20节）关键字在Haxe是不支持的。 Case body expressions never “fall through”,sothe break (5.20) keyword is not supported in Haxe. switch 表达式可以用作一个值；这种情况，所有case体表达式的类型和default表达式的类型必须是统一的（第3.5节）。 Switch expressions can be used as value; in that case the types of all case body expressions and the default expression must unify (3.5). 更多关于模式匹配表达式的语法细节，在模式匹配（第6.4节）中详述。 Further details on syntax of pattern expressions are detailed in Pattern Matching(Section6.4)."},"5.表达式/5.17.switch/5.17.switch.html#5-17-switch":{"title":"5.17.switch","path":"\\5.表达式\\5.17.switch\\5.17.switch.html#5-17-switch","body":"&#x4E00;&#x4E2A;&#x57FA;&#x7840;&#x7684; switch &#x8868;&#x8FBE;&#x5F0F;&#x7531; switch &#x5173;&#x952E;&#x5B57;&#x5F00;&#x59CB;&#xFF0C;&#x540E;&#x9762;&#x662F;&#x5F00;&#x5173;&#x7684;&#x4E3B;&#x9898;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x7136;&#x540E;&#x662F;&#x5927;&#x62EC;&#x53F7;&#x5185;&#x7684;case &#x8868;&#x8FBE;&#x5F0F;&#x3002;case &#x8868;&#x8FBE;&#x5F0F;&#x90FD;&#x662F;&#x4EE5;case &#x5173;&#x952E;&#x5B57;&#x5F00;&#x59CB;&#xFF0C;&#x540E;&#x8DDF;&#x4E00;&#x4E2A;&#x6A21;&#x5F0F;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x79CD; defalut &#x5173;&#x952E;&#x5B57;&#x5B9A;&#x4E49;&#x9ED8;&#x8BA4;&#x884C;&#x4E3A;&#x3002;&#x6BCF;&#x4E2A;case &#x540E;&#x90FD;&#x8DDF;&#x4E00;&#x4E2A;&#x5192;&#x53F7;&#x548C;&#x4E00;&#x4E2A;&#x53EF;&#x9009;&#x7684;case &#x4F53;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A; A basic switch expression starts with the switch keyword and the switch subject expression, as well as the case expressions between curly braces {}. Case expressions either start with the case keyword and are followed by a pattern expression, or consist of the default keyword. In both cases a colon : and an optional case body expression follows: 1 2 3 4 5 switch subject { case pattern1: case-body-expression-1 ; case pattern2: case-body-expression-2 ; default : default-expression ; } case &#x4F53;&#x8868;&#x8FBE;&#x5F0F;&#x4ECE;&#x4E0D;&#x5931;&#x8D25;&#xFF0C;&#x6240;&#x4EE5; break&#xFF08;&#x7B2C;5.20&#x8282;&#xFF09;&#x5173;&#x952E;&#x5B57;&#x5728;Haxe&#x662F;&#x4E0D;&#x652F;&#x6301;&#x7684;&#x3002; Case body expressions never &#x201C;fall through&#x201D;,sothe break (5.20) keyword is not supported in Haxe. switch &#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x4EE5;&#x7528;&#x4F5C;&#x4E00;&#x4E2A;&#x503C;&#xFF1B;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x6240;&#x6709;case&#x4F53;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x548C;default&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x662F;&#x7EDF;&#x4E00;&#x7684;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09;&#x3002; Switch expressions can be used as value; in that case the types of all case body expressions and the default expression must unify (3.5). &#x66F4;&#x591A;&#x5173;&#x4E8E;&#x6A21;&#x5F0F;&#x5339;&#x914D;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x8BED;&#x6CD5;&#x7EC6;&#x8282;&#xFF0C;&#x5728;&#x6A21;&#x5F0F;&#x5339;&#x914D;&#xFF08;&#x7B2C;6.4&#x8282;&#xFF09;&#x4E2D;&#x8BE6;&#x8FF0;&#x3002; Further details on syntax of pattern expressions are detailed in Pattern Matching(Section6.4)."},"5.表达式/5.18.trycatch/5.18.trycatch.html":{"title":"","path":"\\5.表达式\\5.18.trycatch\\5.18.trycatch.html","body":"5.18.try/catch Haxe允许捕获值，使用 try/catch 语法： Haxe allows catching values using its try/catch syntax: 1 2 3 try try -expr catch (varName1: Type1 ) catch -expr -1 catch (varName2: Type2 ) catch -expr -2 如果在运行时try表达式引发一个 throw（第5.22节），它可以被任何后续的 catch块捕捉到。这些块由下面部分组成： If during runtime the evaluation of try-expression causes a throw(5.22),it can be caught by any subsequent catch block. These blocks consist of 一个变量名用来保存被抛出的值 一个显式的类型注释，决定捕捉哪种类型的值 这种情况下要执行的表达式 a variable name which holds the thrown value, an explicit type annotation which determines which types of values to catch, and the expression to execute in that case. Haxe 允许抛出和捕捉任何类型的值，它不限于继承自一个特定的异常或者错误类的类型。catch块从上至下检查，第一个和抛出的值类型兼容的被采用。 Haxe allows throwing and catching any kind of value, it is not limited to types inheriting from a speciﬁc exception or error class. Catch blocks are checked from top to bottom with the ﬁrst one whose type is compatible with the thrown value being picked. 这个过程有许多和编译时的合一（第3.5节）行为的相似之处。然而，因为检查必须在运行时进行，所以有几个限制： This process has many similarities to the compile-time uniﬁcation (3.5) behavior. However, since the check has to be done at runtime there are several restrictions: 类型必须在运行时存在：类实例（第2.3节），enum实例（第2.4节），抽象核心类型（第2.8.7节）和 动态类型（第2.7节）。 类型参数必须只能为 Dynamic（第2.7节）。 The type must exist at runtime: Class instances (2.3), enum instances (2.4), abstract core types (2.8.7) and Dynamic (2.7). Type parameters can only be Dynamic (2.7)."},"5.表达式/5.18.trycatch/5.18.trycatch.html#5-18-try-catch":{"title":"5.18.try/catch","path":"\\5.表达式\\5.18.trycatch\\5.18.trycatch.html#5-18-try-catch","body":"Haxe&#x5141;&#x8BB8;&#x6355;&#x83B7;&#x503C;&#xFF0C;&#x4F7F;&#x7528; try/catch &#x8BED;&#x6CD5;&#xFF1A; Haxe allows catching values using its try/catch syntax: 1 2 3 try try -expr catch (varName1: Type1 ) catch -expr -1 catch (varName2: Type2 ) catch -expr -2 &#x5982;&#x679C;&#x5728;&#x8FD0;&#x884C;&#x65F6;try&#x8868;&#x8FBE;&#x5F0F;&#x5F15;&#x53D1;&#x4E00;&#x4E2A; throw&#xFF08;&#x7B2C;5.22&#x8282;&#xFF09;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x4EFB;&#x4F55;&#x540E;&#x7EED;&#x7684; catch&#x5757;&#x6355;&#x6349;&#x5230;&#x3002;&#x8FD9;&#x4E9B;&#x5757;&#x7531;&#x4E0B;&#x9762;&#x90E8;&#x5206;&#x7EC4;&#x6210;&#xFF1A; If during runtime the evaluation of try-expression causes a throw(5.22),it can be caught by any subsequent catch block. These blocks consist of &#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x540D;&#x7528;&#x6765;&#x4FDD;&#x5B58;&#x88AB;&#x629B;&#x51FA;&#x7684;&#x503C; &#x4E00;&#x4E2A;&#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x6CE8;&#x91CA;&#xFF0C;&#x51B3;&#x5B9A;&#x6355;&#x6349;&#x54EA;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x503C; &#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x8981;&#x6267;&#x884C;&#x7684;&#x8868;&#x8FBE;&#x5F0F; a variable name which holds the thrown value, an explicit type annotation which determines which types of values to catch, and the expression to execute in that case. Haxe &#x5141;&#x8BB8;&#x629B;&#x51FA;&#x548C;&#x6355;&#x6349;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x7684;&#x503C;&#xFF0C;&#x5B83;&#x4E0D;&#x9650;&#x4E8E;&#x7EE7;&#x627F;&#x81EA;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x5F02;&#x5E38;&#x6216;&#x8005;&#x9519;&#x8BEF;&#x7C7B;&#x7684;&#x7C7B;&#x578B;&#x3002;catch&#x5757;&#x4ECE;&#x4E0A;&#x81F3;&#x4E0B;&#x68C0;&#x67E5;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x548C;&#x629B;&#x51FA;&#x7684;&#x503C;&#x7C7B;&#x578B;&#x517C;&#x5BB9;&#x7684;&#x88AB;&#x91C7;&#x7528;&#x3002; Haxe allows throwing and catching any kind of value, it is not limited to types inheriting from a speci&#xFB01;c exception or error class. Catch blocks are checked from top to bottom with the &#xFB01;rst one whose type is compatible with the thrown value being picked. &#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x6709;&#x8BB8;&#x591A;&#x548C;&#x7F16;&#x8BD1;&#x65F6;&#x7684;&#x5408;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09;&#x884C;&#x4E3A;&#x7684;&#x76F8;&#x4F3C;&#x4E4B;&#x5904;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x56E0;&#x4E3A;&#x68C0;&#x67E5;&#x5FC5;&#x987B;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x8FDB;&#x884C;&#xFF0C;&#x6240;&#x4EE5;&#x6709;&#x51E0;&#x4E2A;&#x9650;&#x5236;&#xFF1A; This process has many similarities to the compile-time uni&#xFB01;cation (3.5) behavior. However, since the check has to be done at runtime there are several restrictions: &#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x5B58;&#x5728;&#xFF1A;&#x7C7B;&#x5B9E;&#x4F8B;&#xFF08;&#x7B2C;2.3&#x8282;&#xFF09;&#xFF0C;enum&#x5B9E;&#x4F8B;&#xFF08;&#x7B2C;2.4&#x8282;&#xFF09;&#xFF0C;&#x62BD;&#x8C61;&#x6838;&#x5FC3;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.8.7&#x8282;&#xFF09;&#x548C; &#x52A8;&#x6001;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#x3002; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#x5FC5;&#x987B;&#x53EA;&#x80FD;&#x4E3A; Dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#x3002; The type must exist at runtime: Class instances (2.3), enum instances (2.4), abstract core types (2.8.7) and Dynamic (2.7). Type parameters can only be Dynamic (2.7)."},"5.表达式/5.19.return/5.19.return.html":{"title":"","path":"\\5.表达式\\5.19.return\\5.19.return.html","body":"5.19.return 一个return表达式可以返回也可以不返回一个值表达式： A return expression can come with or without an value expression: 1 2 return ; return expression; 它会离开它被声明所在的控制流最深的函数，当局部函数（第5.11节）被调用时需要被区别： It leaves the control-ﬂow of the innermost function it is declared in, which has to be distinguished when local functions (5.11) are involved: 1 2 3 4 5 6 7 function f1 ()  function f2 ()  return ;  f2(); expression;  return会离开局部函数 f2，但不会离开 f 1，意味着 expression仍然会被执行。 The return leaves local function f2, but not f1, meaning expression is still evaluated. 如果 return 不带值表达式使用，类型工具确保函数返回类型会返回Void 。如果它有一个值表达式，类型工具 统一（第3.5节）它的类型为它所返回的函数的返回类型（显式指定或者通过前面的return表达式推断）。 If return is used without a value expression, the typer ensures that the return type of the function it returns from is of Void. If it has a value expression,the typer uniﬁes(3.5) its type with the return type (explicitly given or inferred by previous return expressions) of the function it returns from."},"5.表达式/5.19.return/5.19.return.html#5-19-return":{"title":"5.19.return","path":"\\5.表达式\\5.19.return\\5.19.return.html#5-19-return","body":"&#x4E00;&#x4E2A;return&#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x4EE5;&#x8FD4;&#x56DE;&#x4E5F;&#x53EF;&#x4EE5;&#x4E0D;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x503C;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A; A return expression can come with or without an value expression: 1 2 return ; return expression; &#x5B83;&#x4F1A;&#x79BB;&#x5F00;&#x5B83;&#x88AB;&#x58F0;&#x660E;&#x6240;&#x5728;&#x7684;&#x63A7;&#x5236;&#x6D41;&#x6700;&#x6DF1;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5F53;&#x5C40;&#x90E8;&#x51FD;&#x6570;&#xFF08;&#x7B2C;5.11&#x8282;&#xFF09;&#x88AB;&#x8C03;&#x7528;&#x65F6;&#x9700;&#x8981;&#x88AB;&#x533A;&#x522B;&#xFF1A; It leaves the control-&#xFB02;ow of the innermost function it is declared in, which has to be distinguished when local functions (5.11) are involved: 1 2 3 4 5 6 7 function f1 () { function f2 () { return ; } f2(); expression; } return&#x4F1A;&#x79BB;&#x5F00;&#x5C40;&#x90E8;&#x51FD;&#x6570; f2&#xFF0C;&#x4F46;&#x4E0D;&#x4F1A;&#x79BB;&#x5F00; f 1&#xFF0C;&#x610F;&#x5473;&#x7740; expression&#x4ECD;&#x7136;&#x4F1A;&#x88AB;&#x6267;&#x884C;&#x3002; The return leaves local function f2, but not f1, meaning expression is still evaluated. &#x5982;&#x679C; return &#x4E0D;&#x5E26;&#x503C;&#x8868;&#x8FBE;&#x5F0F;&#x4F7F;&#x7528;&#xFF0C;&#x7C7B;&#x578B;&#x5DE5;&#x5177;&#x786E;&#x4FDD;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4F1A;&#x8FD4;&#x56DE;Void &#x3002;&#x5982;&#x679C;&#x5B83;&#x6709;&#x4E00;&#x4E2A;&#x503C;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x7C7B;&#x578B;&#x5DE5;&#x5177; &#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x4E3A;&#x5B83;&#x6240;&#x8FD4;&#x56DE;&#x7684;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#xFF08;&#x663E;&#x5F0F;&#x6307;&#x5B9A;&#x6216;&#x8005;&#x901A;&#x8FC7;&#x524D;&#x9762;&#x7684;return&#x8868;&#x8FBE;&#x5F0F;&#x63A8;&#x65AD;&#xFF09;&#x3002; If return is used without a value expression, the typer ensures that the return type of the function it returns from is of Void. If it has a value expression,the typer uni&#xFB01;es(3.5) its type with the return type (explicitly given or inferred by previous return expressions) of the function it returns from."},"5.表达式/5.2.常量/5.2.常量.html":{"title":"","path":"\\5.表达式\\5.2.常量\\5.2.常量.html","body":"5.2.常量 Haxe语法支持下面的常量： The Haxe syntax supports the following constants: Int ：一个整型（第2.1.1节），例如0，1，97121，-12， 0xFF0000 。 Float ：一个浮点数（第2.1.1节），如0.0，1.，.3，-93.2 。 String ：一个字符串（第10.1节），如””，“foo”，’’，’bar’ 。 true，false ：一个布尔值 null ：null值 Int : An integer (2.1.1), such as 0, 1, 97121, -12, 0xFF0000. Float : A ﬂoating point number (2.1.1), such as 0.0, 1., .3, -93.2. String : A string of characters (10.1), such as “”, “foo”, ’’, ’bar’. true,false : A boolean (2.1.4) value. null : The null value. 此外，内部的语法结构将标识符作为常量，可能在使用宏（第9章）时是相关的。 Furthermore, the internal syntax structure treats identiﬁers (5) as constants, which may be relevant when working with macros (9). Constants are values which are immutable. These values can be used as inline variables and default values for function arguments . All constants are literals , except for argument-less enum constructors: Example Type Note 42 , 0xFF42 Int integer constant 0.32 , 3. , 2.1e5 Float floating-point decimal constant true , false Bool boolean constant ~/haxe/gi EReg regular expression null T null value for any nullable type XXX , &#39;XXX&#39; String string literal X.code , &#39;X&#39;.code Int Unicode character codepoint MyEnum.Haxe T enum constructor with no arguments Furthermore, the internal syntax structure treats identifiers as constants, which may be relevant when working with macros ."},"5.表达式/5.2.常量/5.2.常量.html#5-2-常量":{"title":"5.2.&#x5E38;&#x91CF;","path":"\\5.表达式\\5.2.常量\\5.2.常量.html#5-2-常量","body":"Haxe&#x8BED;&#x6CD5;&#x652F;&#x6301;&#x4E0B;&#x9762;&#x7684;&#x5E38;&#x91CF;&#xFF1A; The Haxe syntax supports the following constants: Int &#xFF1A;&#x4E00;&#x4E2A;&#x6574;&#x578B;&#xFF08;&#x7B2C;2.1.1&#x8282;&#xFF09;&#xFF0C;&#x4F8B;&#x5982;0&#xFF0C;1&#xFF0C;97121&#xFF0C;-12&#xFF0C; 0xFF0000 &#x3002; Float &#xFF1A;&#x4E00;&#x4E2A;&#x6D6E;&#x70B9;&#x6570;&#xFF08;&#x7B2C;2.1.1&#x8282;&#xFF09;&#xFF0C;&#x5982;0.0&#xFF0C;1.&#xFF0C;.3&#xFF0C;-93.2 &#x3002; String &#xFF1A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF08;&#x7B2C;10.1&#x8282;&#xFF09;&#xFF0C;&#x5982;&#x201D;&#x201D;&#xFF0C;&#x201C;foo&#x201D;&#xFF0C;&#x2019;&#x2019;&#xFF0C;&#x2019;bar&#x2019; &#x3002; true&#xFF0C;false &#xFF1A;&#x4E00;&#x4E2A;&#x5E03;&#x5C14;&#x503C; null &#xFF1A;null&#x503C; Int : An integer (2.1.1), such as 0, 1, 97121, -12, 0xFF0000. Float : A &#xFB02;oating point number (2.1.1), such as 0.0, 1., .3, -93.2. String : A string of characters (10.1), such as &#x201C;&#x201D;, &#x201C;foo&#x201D;, &#x2019;&#x2019;, &#x2019;bar&#x2019;. true,false : A boolean (2.1.4) value. null : The null value. &#x6B64;&#x5916;&#xFF0C;&#x5185;&#x90E8;&#x7684;&#x8BED;&#x6CD5;&#x7ED3;&#x6784;&#x5C06;&#x6807;&#x8BC6;&#x7B26;&#x4F5C;&#x4E3A;&#x5E38;&#x91CF;&#xFF0C;&#x53EF;&#x80FD;&#x5728;&#x4F7F;&#x7528;&#x5B8F;&#xFF08;&#x7B2C;9&#x7AE0;&#xFF09;&#x65F6;&#x662F;&#x76F8;&#x5173;&#x7684;&#x3002; Furthermore, the internal syntax structure treats identi&#xFB01;ers (5) as constants, which may be relevant when working with macros (9). Constants are values which are immutable. These values can be used as inline variables and default values for function arguments . All constants are literals , except for argument-less enum constructors: Example Type Note 42 , 0xFF42 Int integer constant 0.32 , 3. , 2.1e5 Float floating-point decimal constant true , false Bool boolean constant ~/haxe/gi EReg regular expression null T null value for any nullable type XXX , &apos;XXX&apos; String string literal X.code , &apos;X&apos;.code Int Unicode character codepoint MyEnum.Haxe T enum constructor with no arguments Furthermore, the internal syntax structure treats identifiers as constants, which may be relevant when working with macros ."},"5.表达式/5.20.break/5.20.break.html":{"title":"","path":"\\5.表达式\\5.20.break\\5.20.break.html","body":"5.20.break break关键字会离开它所声明的控制流最深的循环，停止进一步的迭代： The break keyword leaves the control ﬂow of the innermost loop (for or while) it is declared in, stopping further iterations: 1 2 3 4 5 while ( true )  expression1; if (condition) break ; expression2;  这里，expression1每个迭代都会被执行，但是当条件满足，expression2则不再执行。 Here,expression1 is evaluated for each iteration,but as soon as condition holds,expression2 is not evaluated anymore. 类型工具确保它只出现在一个循环中。break关键字在Haxe并不支持用于 switch case表达式（第5.17节）。 The typer ensures that it appears only within a loop. The break keyword in switch cases (5.17) is not supported in Haxe."},"5.表达式/5.20.break/5.20.break.html#5-20-break":{"title":"5.20.break","path":"\\5.表达式\\5.20.break\\5.20.break.html#5-20-break","body":"break&#x5173;&#x952E;&#x5B57;&#x4F1A;&#x79BB;&#x5F00;&#x5B83;&#x6240;&#x58F0;&#x660E;&#x7684;&#x63A7;&#x5236;&#x6D41;&#x6700;&#x6DF1;&#x7684;&#x5FAA;&#x73AF;&#xFF0C;&#x505C;&#x6B62;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x8FED;&#x4EE3;&#xFF1A; The break keyword leaves the control &#xFB02;ow of the innermost loop (for or while) it is declared in, stopping further iterations: 1 2 3 4 5 while ( true ) { expression1; if (condition) break ; expression2; } &#x8FD9;&#x91CC;&#xFF0C;expression1&#x6BCF;&#x4E2A;&#x8FED;&#x4EE3;&#x90FD;&#x4F1A;&#x88AB;&#x6267;&#x884C;&#xFF0C;&#x4F46;&#x662F;&#x5F53;&#x6761;&#x4EF6;&#x6EE1;&#x8DB3;&#xFF0C;expression2&#x5219;&#x4E0D;&#x518D;&#x6267;&#x884C;&#x3002; Here,expression1 is evaluated for each iteration,but as soon as condition holds,expression2 is not evaluated anymore. &#x7C7B;&#x578B;&#x5DE5;&#x5177;&#x786E;&#x4FDD;&#x5B83;&#x53EA;&#x51FA;&#x73B0;&#x5728;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x4E2D;&#x3002;break&#x5173;&#x952E;&#x5B57;&#x5728;Haxe&#x5E76;&#x4E0D;&#x652F;&#x6301;&#x7528;&#x4E8E; switch case&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5.17&#x8282;&#xFF09;&#x3002; The typer ensures that it appears only within a loop. The break keyword in switch cases (5.17) is not supported in Haxe."},"5.表达式/5.21.continue/5.21.continue.html":{"title":"","path":"\\5.表达式\\5.21.continue\\5.21.continue.html","body":"5.21.continue continue关键字结束它所声明的最深处的当前迭代，使循环条件被检查于下一次迭代： The continue keyword ends the current iteration of the innermost loop (for or while) it is declared in, causing the loop condition to be checked for the next iteration: 1 2 3 4 5 while ( true )  expression1; if (condition) continue ; expression2;  这里，expression1每次迭代都被执行，但是如果条件满足，expression2不再为当前迭代执行。不像break，迭代仍然继续。 Here, expression1 is evaluatedfor each iteration, but if condition holds, expression2 is not evaluated for the current iteration. Unlike break, iterations continue. 类型工具确保它只出现在循环中。 The typer ensures that it appears only within a loop."},"5.表达式/5.21.continue/5.21.continue.html#5-21-continue":{"title":"5.21.continue","path":"\\5.表达式\\5.21.continue\\5.21.continue.html#5-21-continue","body":"continue&#x5173;&#x952E;&#x5B57;&#x7ED3;&#x675F;&#x5B83;&#x6240;&#x58F0;&#x660E;&#x7684;&#x6700;&#x6DF1;&#x5904;&#x7684;&#x5F53;&#x524D;&#x8FED;&#x4EE3;&#xFF0C;&#x4F7F;&#x5FAA;&#x73AF;&#x6761;&#x4EF6;&#x88AB;&#x68C0;&#x67E5;&#x4E8E;&#x4E0B;&#x4E00;&#x6B21;&#x8FED;&#x4EE3;&#xFF1A; The continue keyword ends the current iteration of the innermost loop (for or while) it is declared in, causing the loop condition to be checked for the next iteration: 1 2 3 4 5 while ( true ) { expression1; if (condition) continue ; expression2; } &#x8FD9;&#x91CC;&#xFF0C;expression1&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x90FD;&#x88AB;&#x6267;&#x884C;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x6761;&#x4EF6;&#x6EE1;&#x8DB3;&#xFF0C;expression2&#x4E0D;&#x518D;&#x4E3A;&#x5F53;&#x524D;&#x8FED;&#x4EE3;&#x6267;&#x884C;&#x3002;&#x4E0D;&#x50CF;break&#xFF0C;&#x8FED;&#x4EE3;&#x4ECD;&#x7136;&#x7EE7;&#x7EED;&#x3002; Here, expression1 is evaluatedfor each iteration, but if condition holds, expression2 is not evaluated for the current iteration. Unlike break, iterations continue. &#x7C7B;&#x578B;&#x5DE5;&#x5177;&#x786E;&#x4FDD;&#x5B83;&#x53EA;&#x51FA;&#x73B0;&#x5728;&#x5FAA;&#x73AF;&#x4E2D;&#x3002; The typer ensures that it appears only within a loop."},"5.表达式/5.22.throw/5.22.throw.html":{"title":"","path":"\\5.表达式\\5.22.throw\\5.22.throw.html","body":"5.22.throw Haxe允许抛出一个类型的值，使用 throw 语法： Haxe allows throwing any kind of value using its throw syntax: 1 throw expr 被抛出的值可以被catch块（第5.18节）捕捉。如果没有这样的块捕捉，行为取决于目标平台。 A value which is thrown like this can be caught by catch blocks (5.18). If no such block catches it, the behavior is target-dependent."},"5.表达式/5.22.throw/5.22.throw.html#5-22-throw":{"title":"5.22.throw","path":"\\5.表达式\\5.22.throw\\5.22.throw.html#5-22-throw","body":"Haxe&#x5141;&#x8BB8;&#x629B;&#x51FA;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x7684;&#x503C;&#xFF0C;&#x4F7F;&#x7528; throw &#x8BED;&#x6CD5;&#xFF1A; Haxe allows throwing any kind of value using its throw syntax: 1 throw expr &#x88AB;&#x629B;&#x51FA;&#x7684;&#x503C;&#x53EF;&#x4EE5;&#x88AB;catch&#x5757;&#xFF08;&#x7B2C;5.18&#x8282;&#xFF09;&#x6355;&#x6349;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x8FD9;&#x6837;&#x7684;&#x5757;&#x6355;&#x6349;&#xFF0C;&#x884C;&#x4E3A;&#x53D6;&#x51B3;&#x4E8E;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002; A value which is thrown like this can be caught by catch blocks (5.18). If no such block catches it, the behavior is target-dependent."},"5.表达式/5.23.类型转换/5.23.2.安全转换.html":{"title":"","path":"\\5.表达式\\5.23.类型转换\\5.23.2.安全转换.html","body":"5.23.2.安全转换 和不安全转换（第5.23.1节）不同，一个失败的转换的运行时行为在安全转换中被定义： Unlike unsafe casts(5.23.1),the runtime behavior in case of a failing cast is deﬁned for safe casts: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Base  public function new ()    class Child1 extends Base  class Child2 extends Base  class Main  public static function main ()  var child1: Base = new Child1 (); var child2: Base = new Child2 (); cast (child1, Base); // Exception: Class cast error cast (child1, Child2);   在这个例子中，我们首先转换一个Child1类的实例为Base，因为Child1是一个Base的子类（第2.3.2节），所以转换成功。然后尝试转换同样的类实例为 Child2，这是不被允许的，因为Child2的实例并不是Child1类型的。 In this example we ﬁrst cast a class instance of type Child1 to Base,which succeeds because Child1 is a child class (2.3.2) of Base. We then try to cast the same class instance to Child2, which is not allowed because instances of Child2 are not instances of Child1. Haxe编译器保证一个String类型的异常，在这种情况被抛出（第5.22节）。这个异常可以使用 try/catch 块捕捉到。 The Haxe compiler guarantees that an exception of type String is thrown(5.22) in this case. This exception can be caught using a try/catch block (5.18). 安全转换有一个运行时的开销。理解编译器已经发生了类型检查是很重要的，所以添加手动的检查是冗余的，例如，使用 Std.is 。预期的使用是try安全转换，然后捕捉String类型的异常。 Safe casts have a runtime overhead. It is important to understand that the compiler already generates type checks,so it is redundant to add manual checks,e.g. usingStd.is . The intended usage is to try the safe cast and catch the String exception."},"5.表达式/5.23.类型转换/5.23.2.安全转换.html#5-23-2-安全转换":{"title":"5.23.2.&#x5B89;&#x5168;&#x8F6C;&#x6362;","path":"\\5.表达式\\5.23.类型转换\\5.23.2.安全转换.html#5-23-2-安全转换","body":"&#x548C;&#x4E0D;&#x5B89;&#x5168;&#x8F6C;&#x6362;&#xFF08;&#x7B2C;5.23.1&#x8282;&#xFF09;&#x4E0D;&#x540C;&#xFF0C;&#x4E00;&#x4E2A;&#x5931;&#x8D25;&#x7684;&#x8F6C;&#x6362;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x884C;&#x4E3A;&#x5728;&#x5B89;&#x5168;&#x8F6C;&#x6362;&#x4E2D;&#x88AB;&#x5B9A;&#x4E49;&#xFF1A; Unlike unsafe casts(5.23.1),the runtime behavior in case of a failing cast is de&#xFB01;ned for safe casts: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Base { public function new () { } } class Child1 extends Base {} class Child2 extends Base {} class Main { public static function main () { var child1: Base = new Child1 (); var child2: Base = new Child2 (); cast (child1, Base); // Exception: Class cast error cast (child1, Child2); } } &#x5728;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x9996;&#x5148;&#x8F6C;&#x6362;&#x4E00;&#x4E2A;Child1&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x4E3A;Base&#xFF0C;&#x56E0;&#x4E3A;Child1&#x662F;&#x4E00;&#x4E2A;Base&#x7684;&#x5B50;&#x7C7B;&#xFF08;&#x7B2C;2.3.2&#x8282;&#xFF09;&#xFF0C;&#x6240;&#x4EE5;&#x8F6C;&#x6362;&#x6210;&#x529F;&#x3002;&#x7136;&#x540E;&#x5C1D;&#x8BD5;&#x8F6C;&#x6362;&#x540C;&#x6837;&#x7684;&#x7C7B;&#x5B9E;&#x4F8B;&#x4E3A; Child2&#xFF0C;&#x8FD9;&#x662F;&#x4E0D;&#x88AB;&#x5141;&#x8BB8;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;Child2&#x7684;&#x5B9E;&#x4F8B;&#x5E76;&#x4E0D;&#x662F;Child1&#x7C7B;&#x578B;&#x7684;&#x3002; In this example we &#xFB01;rst cast a class instance of type Child1 to Base,which succeeds because Child1 is a child class (2.3.2) of Base. We then try to cast the same class instance to Child2, which is not allowed because instances of Child2 are not instances of Child1. Haxe&#x7F16;&#x8BD1;&#x5668;&#x4FDD;&#x8BC1;&#x4E00;&#x4E2A;String&#x7C7B;&#x578B;&#x7684;&#x5F02;&#x5E38;&#xFF0C;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x88AB;&#x629B;&#x51FA;&#xFF08;&#x7B2C;5.22&#x8282;&#xFF09;&#x3002;&#x8FD9;&#x4E2A;&#x5F02;&#x5E38;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; try/catch &#x5757;&#x6355;&#x6349;&#x5230;&#x3002; The Haxe compiler guarantees that an exception of type String is thrown(5.22) in this case. This exception can be caught using a try/catch block (5.18). &#x5B89;&#x5168;&#x8F6C;&#x6362;&#x6709;&#x4E00;&#x4E2A;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x5F00;&#x9500;&#x3002;&#x7406;&#x89E3;&#x7F16;&#x8BD1;&#x5668;&#x5DF2;&#x7ECF;&#x53D1;&#x751F;&#x4E86;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x662F;&#x5F88;&#x91CD;&#x8981;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x6DFB;&#x52A0;&#x624B;&#x52A8;&#x7684;&#x68C0;&#x67E5;&#x662F;&#x5197;&#x4F59;&#x7684;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x4F7F;&#x7528; Std.is &#x3002;&#x9884;&#x671F;&#x7684;&#x4F7F;&#x7528;&#x662F;try&#x5B89;&#x5168;&#x8F6C;&#x6362;&#xFF0C;&#x7136;&#x540E;&#x6355;&#x6349;String&#x7C7B;&#x578B;&#x7684;&#x5F02;&#x5E38;&#x3002; Safe casts have a runtime overhead. It is important to understand that the compiler already generates type checks,so it is redundant to add manual checks,e.g. usingStd.is . The intended usage is to try the safe cast and catch the String exception."},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html":{"title":"","path":"\\5.表达式\\5.23.类型转换\\5.23.1.不安全转换.html","body":"5.23.1.不安全转换 Unsafe casts are useful to subvert the type system. The compiler types expr as usual and then wraps it in a monomorph (2.9). This allows the expression to be assigned to anything. 不安全的类型转换不使用任何 dynamic（第2.7节）类型，如下面例子展示的： Unsafe casts do not introduce any dynamic (2.7) types, as the following example shows: 1 2 3 4 5 6 7 8 9 10 class Main  public static function main ()  var i = 1 ; $type(i); // Int var s = cast i; $type(s); // Unknown0 Std.parseInt(s); $type(s); // String   变量 i 类型化为 Int，然后经过不安全转换 cast i 之后赋值到变量。这使 s 成为一个 unknown 类型，一个单形。根据合一（第3.5节）的一般规则，它可以之后被绑定为任何类型，例如例子中的 String 。 Variable i is typed as Int and then assigned to variables using the unsafe cast cast i. This causes s to be of an unknown type,amonomorph. Following the usual rules of uniﬁcation(3.5), it can then be bound to any type, such as String in this example. 这些转换被称为不安全的，因为无效转换的运行时行为没有被定义。而多数 动态目标语言（第2.2节）可能可以工作，但是在静态目标语言（第2.2节）可能导致未定义的错误。 These casts are called ”unsafe” because the runtime behavior for invalid casts is not deﬁned. While most dynamic targets (2.2) are likely to work, it might lead to undeﬁned errors on static targets (2.2). 不安全转换几乎没有运行时的开销。 Unsafe casts have little to no runtime overhead."},"5.表达式/5.23.类型转换/5.23.1.不安全转换.html#5-23-1-不安全转换":{"title":"5.23.1.&#x4E0D;&#x5B89;&#x5168;&#x8F6C;&#x6362;","path":"\\5.表达式\\5.23.类型转换\\5.23.1.不安全转换.html#5-23-1-不安全转换","body":"Unsafe casts are useful to subvert the type system. The compiler types expr as usual and then wraps it in a monomorph (2.9). This allows the expression to be assigned to anything. &#x4E0D;&#x5B89;&#x5168;&#x7684;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x4E0D;&#x4F7F;&#x7528;&#x4EFB;&#x4F55; dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x4E0B;&#x9762;&#x4F8B;&#x5B50;&#x5C55;&#x793A;&#x7684;&#xFF1A; Unsafe casts do not introduce any dynamic (2.7) types, as the following example shows: 1 2 3 4 5 6 7 8 9 10 class Main { public static function main () { var i = 1 ; $type(i); // Int var s = cast i; $type(s); // Unknown0 Std.parseInt(s); $type(s); // String } } &#x53D8;&#x91CF; i &#x7C7B;&#x578B;&#x5316;&#x4E3A; Int&#xFF0C;&#x7136;&#x540E;&#x7ECF;&#x8FC7;&#x4E0D;&#x5B89;&#x5168;&#x8F6C;&#x6362; cast i &#x4E4B;&#x540E;&#x8D4B;&#x503C;&#x5230;&#x53D8;&#x91CF;&#x3002;&#x8FD9;&#x4F7F; s &#x6210;&#x4E3A;&#x4E00;&#x4E2A; unknown &#x7C7B;&#x578B;&#xFF0C;&#x4E00;&#x4E2A;&#x5355;&#x5F62;&#x3002;&#x6839;&#x636E;&#x5408;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09;&#x7684;&#x4E00;&#x822C;&#x89C4;&#x5219;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x4E4B;&#x540E;&#x88AB;&#x7ED1;&#x5B9A;&#x4E3A;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#xFF0C;&#x4F8B;&#x5982;&#x4F8B;&#x5B50;&#x4E2D;&#x7684; String &#x3002; Variable i is typed as Int and then assigned to variables using the unsafe cast cast i. This causes s to be of an unknown type,amonomorph. Following the usual rules of uni&#xFB01;cation(3.5), it can then be bound to any type, such as String in this example. &#x8FD9;&#x4E9B;&#x8F6C;&#x6362;&#x88AB;&#x79F0;&#x4E3A;&#x4E0D;&#x5B89;&#x5168;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x65E0;&#x6548;&#x8F6C;&#x6362;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x884C;&#x4E3A;&#x6CA1;&#x6709;&#x88AB;&#x5B9A;&#x4E49;&#x3002;&#x800C;&#x591A;&#x6570; &#x52A8;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09;&#x53EF;&#x80FD;&#x53EF;&#x4EE5;&#x5DE5;&#x4F5C;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x672A;&#x5B9A;&#x4E49;&#x7684;&#x9519;&#x8BEF;&#x3002; These casts are called &#x201D;unsafe&#x201D; because the runtime behavior for invalid casts is not de&#xFB01;ned. While most dynamic targets (2.2) are likely to work, it might lead to unde&#xFB01;ned errors on static targets (2.2). &#x4E0D;&#x5B89;&#x5168;&#x8F6C;&#x6362;&#x51E0;&#x4E4E;&#x6CA1;&#x6709;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x5F00;&#x9500;&#x3002; Unsafe casts have little to no runtime overhead."},"5.表达式/5.23.类型转换/5.23.类型转换.html":{"title":"","path":"\\5.表达式\\5.23.类型转换\\5.23.类型转换.html","body":"5.23.类型转换 Haxe允许两种类型转换： Haxe allows two kinds of casts: 1 2 cast expr; // 不安全的类型转换 cast (expr, Type); // 安全转换"},"5.表达式/5.23.类型转换/5.23.类型转换.html#5-23-类型转换":{"title":"5.23.&#x7C7B;&#x578B;&#x8F6C;&#x6362;","path":"\\5.表达式\\5.23.类型转换\\5.23.类型转换.html#5-23-类型转换","body":"Haxe&#x5141;&#x8BB8;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#xFF1A; Haxe allows two kinds of casts: 1 2 cast expr; // &#x4E0D;&#x5B89;&#x5168;&#x7684;&#x7C7B;&#x578B;&#x8F6C;&#x6362; cast (expr, Type); // &#x5B89;&#x5168;&#x8F6C;&#x6362;"},"5.表达式/5.24.类型检查/5.24.类型检查.html":{"title":"","path":"\\5.表达式\\5.24.类型检查\\5.24.类型检查.html","body":"5.24.类型检查 从Haxe 3.1.0以后 Since Haxe 3.1.0 通过下面的语法，可以使用编译时类型检查： It is possible to employ compile-time type checks using the following syntax: 1 (expr : type ) 括号是强制性的。不想安全转换（第5.23.2），这个结构没有运行时的影响。它有两个编译时的影响： The parentheses are mandatory. Unlike safe casts (5.23.2) this construct has no run-time impact. It has two compile-time implications: 从上至下的推断（第3.6.1节）用于类型化 expr 为 type 类型 结果的类型化的表达式统一（第3.5节）为type 类型 Top-down inference (3.6.1) is used to type expr with type type. The resulting typed expression is uniﬁed (3.5) with type type. 这通常影响两个操作，如当执行绝对的标识符解析（第3.7.3节）时给定类型被用为预期的类型，和抽象类型的转换的合一检查。 This has the usual effect of both operations such as the given type being used as expected type when performing unqualiﬁed identiﬁer resolution (3.7.3) and the uniﬁcation checking for abstract casts (2.8.1)."},"5.表达式/5.24.类型检查/5.24.类型检查.html#5-24-类型检查":{"title":"5.24.&#x7C7B;&#x578B;&#x68C0;&#x67E5;","path":"\\5.表达式\\5.24.类型检查\\5.24.类型检查.html#5-24-类型检查","body":"&#x4ECE;Haxe 3.1.0&#x4EE5;&#x540E; Since Haxe 3.1.0 &#x901A;&#x8FC7;&#x4E0B;&#x9762;&#x7684;&#x8BED;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7F16;&#x8BD1;&#x65F6;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#xFF1A; It is possible to employ compile-time type checks using the following syntax: 1 (expr : type ) &#x62EC;&#x53F7;&#x662F;&#x5F3A;&#x5236;&#x6027;&#x7684;&#x3002;&#x4E0D;&#x60F3;&#x5B89;&#x5168;&#x8F6C;&#x6362;&#xFF08;&#x7B2C;5.23.2&#xFF09;&#xFF0C;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#x6CA1;&#x6709;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x5F71;&#x54CD;&#x3002;&#x5B83;&#x6709;&#x4E24;&#x4E2A;&#x7F16;&#x8BD1;&#x65F6;&#x7684;&#x5F71;&#x54CD;&#xFF1A; The parentheses are mandatory. Unlike safe casts (5.23.2) this construct has no run-time impact. It has two compile-time implications: &#x4ECE;&#x4E0A;&#x81F3;&#x4E0B;&#x7684;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6.1&#x8282;&#xFF09;&#x7528;&#x4E8E;&#x7C7B;&#x578B;&#x5316; expr &#x4E3A; type &#x7C7B;&#x578B; &#x7ED3;&#x679C;&#x7684;&#x7C7B;&#x578B;&#x5316;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09;&#x4E3A;type &#x7C7B;&#x578B; Top-down inference (3.6.1) is used to type expr with type type. The resulting typed expression is uni&#xFB01;ed (3.5) with type type. &#x8FD9;&#x901A;&#x5E38;&#x5F71;&#x54CD;&#x4E24;&#x4E2A;&#x64CD;&#x4F5C;&#xFF0C;&#x5982;&#x5F53;&#x6267;&#x884C;&#x7EDD;&#x5BF9;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#x89E3;&#x6790;&#xFF08;&#x7B2C;3.7.3&#x8282;&#xFF09;&#x65F6;&#x7ED9;&#x5B9A;&#x7C7B;&#x578B;&#x88AB;&#x7528;&#x4E3A;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x548C;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x8F6C;&#x6362;&#x7684;&#x5408;&#x4E00;&#x68C0;&#x67E5;&#x3002; This has the usual effect of both operations such as the given type being used as expected type when performing unquali&#xFB01;ed identi&#xFB01;er resolution (3.7.3) and the uni&#xFB01;cation checking for abstract casts (2.8.1)."},"5.表达式/5.3 操作符/5.3 操作符.html":{"title":"","path":"\\5.表达式\\5.3 操作符\\5.3 操作符.html","body":"5.3 操作符 5.4.1: Unary Operators 5.4.2: Binary Operators 5.4.3: Ternary Operator 5.4.4: Precedence 5.4.5: Overloading and macros"},"5.表达式/5.3 操作符/5.3 操作符.html#5-3-操作符":{"title":"5.3 &#x64CD;&#x4F5C;&#x7B26;","path":"\\5.表达式\\5.3 操作符\\5.3 操作符.html#5-3-操作符","body":"5.4.1: Unary Operators 5.4.2: Binary Operators 5.4.3: Ternary Operator 5.4.4: Precedence 5.4.5: Overloading and macros"},"5.表达式/5.3 操作符/5.3.1 一元操作符.html":{"title":"","path":"\\5.表达式\\5.3 操作符\\5.3.1 一元操作符.html","body":"5.3.1 一元操作符 Operator Operation Operand type Position Result type ~ bitwise negation Int prefix Int ! logical negation Bool prefix Bool - arithmetic negation Float/Int prefix same as operand ++ increment Float/Int prefix and postfix same as operand -- decrement Float/Int prefix and postfix same as operand Increment and decrement 递增与递减操作符用于改变一个给定的值，因此不能被用于一个 “只读” 的值。同时他们可以根据前置或后置方式的使用产生不同的结果，前置使用时求值（evaluates）结果为修改后的值，后置使用时求值结果为原来的值。 The increment and decrement operators change the given value, so they cannot be applied to a read-only value. They also produce different results based on whether they are used as a prefix operator, which evaluates to the modified value, or as a postfix operator, which evaluates to the original value: 1 2 3 4 5 6 7 var a = 10 ; trace (a++); // 10 trace (a); // 11 a = 10 ; trace (++a); // 11 trace (a); // 11"},"5.表达式/5.3 操作符/5.3.1 一元操作符.html#5-3-1-一元操作符":{"title":"5.3.1 &#x4E00;&#x5143;&#x64CD;&#x4F5C;&#x7B26;","path":"\\5.表达式\\5.3 操作符\\5.3.1 一元操作符.html#5-3-1-一元操作符","body":"Operator Operation Operand type Position Result type ~ bitwise negation Int prefix Int ! logical negation Bool prefix Bool - arithmetic negation Float/Int prefix same as operand ++ increment Float/Int prefix and postfix same as operand -- decrement Float/Int prefix and postfix same as operand Increment and decrement &#x9012;&#x589E;&#x4E0E;&#x9012;&#x51CF;&#x64CD;&#x4F5C;&#x7B26;&#x7528;&#x4E8E;&#x6539;&#x53D8;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x7684;&#x503C;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x80FD;&#x88AB;&#x7528;&#x4E8E;&#x4E00;&#x4E2A; &#x201C;&#x53EA;&#x8BFB;&#x201D; &#x7684;&#x503C;&#x3002;&#x540C;&#x65F6;&#x4ED6;&#x4EEC;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x524D;&#x7F6E;&#x6216;&#x540E;&#x7F6E;&#x65B9;&#x5F0F;&#x7684;&#x4F7F;&#x7528;&#x4EA7;&#x751F;&#x4E0D;&#x540C;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x524D;&#x7F6E;&#x4F7F;&#x7528;&#x65F6;&#x6C42;&#x503C;&#xFF08;evaluates&#xFF09;&#x7ED3;&#x679C;&#x4E3A;&#x4FEE;&#x6539;&#x540E;&#x7684;&#x503C;&#xFF0C;&#x540E;&#x7F6E;&#x4F7F;&#x7528;&#x65F6;&#x6C42;&#x503C;&#x7ED3;&#x679C;&#x4E3A;&#x539F;&#x6765;&#x7684;&#x503C;&#x3002; The increment and decrement operators change the given value, so they cannot be applied to a read-only value. They also produce different results based on whether they are used as a prefix operator, which evaluates to the modified value, or as a postfix operator, which evaluates to the original value: 1 2 3 4 5 6 7 var a = 10 ; trace (a++); // 10 trace (a); // 11 a = 10 ; trace (++a); // 11 trace (a); // 11"},"5.表达式/5.3 操作符/5.3.2 二元操作符.html":{"title":"","path":"\\5.表达式\\5.3 操作符\\5.3.2 二元操作符.html","body":"5.3.2 二元操作符 Arithmetic operators Operator Operation Operand 1 Operand 2 Result type % modulo Float/Int Float/Int Float/Int * multiplication Float/Int Float/Int Float/Int / division Float/Int Float/Int Float + addition Float/Int Float/Int Float/Int - subtraction Float/Int Float/Int Float/Int About the Float/Int return type: If one of the operands is of type Float , the resulting expression will also be of type Float , otherwise the type will be Int . The result of a division is always a Float ; use Std.int(a / b) for integer division (discarding any fractional part). In Haxe, the result of a modulo operation always keeps the sign of the dividend (the left operand) if the divisor is non-negative. The result is target-specific with a negative divisor. String concatenation operator Operator Operation Operand 1 Operand 2 Result type + concatenation any String String + concatenation String any String += concatenation String any String Note that the “any” operand will be stringified. For classes and abstracts stringification can be controlled with user-defined toString function. Bitwise operators Operator Operation Operand 1 Operand 2 Result type  shift left Int Int Int  shift right Int Int Int  unsigned shift right Int Int Int &amp; bitwise and Int Int Int ` ` bitwise or Int Int Int ^ bitwise xor Int Int Int Logical operators Operator Operation Operand 1 Operand 2 Result type &amp;&amp; logical and Bool Bool Bool ` ` logical or Bool Bool Bool Short-circuiting: Haxe guarantees that compound boolean expressions with the same operator are evaluated from left to right but only as far as necessary at run-time. For instance, an expression like A &amp;&amp; B will evaluate A first and evaluate B only if the evaluation of A yielded true . Likewise, the expression A || B will not evaluate B if the evaluation of A yielded true , because the value of B is irrelevant in that case. This is important in cases such as this: 1 if (object != null &amp;&amp; object.field == 1 )   Accessing object.field if object is null would lead to a run-time error, but the check for object != null guards against it. Compound assignment operators Operator Operation Operand 1 Operand 2 Result type %= modulo Float/Int Float/Int Float/Int *= multiplication Float/Int Float/Int Float/Int /= division Float Float/Int Float += addition Float/Int Float/Int Float/Int -= subtraction Float/Int Float/Int Float/Int = shift left Int Int Int = shift right Int Int Int = unsigned shift right Int Int Int &amp;= bitwise and Int Int Int ` =` bitwise or Int Int Int ^= bitwise xor Int Int Int In all cases, a compound assignment modifies the given variable, field, structure member, etc., so it will not work on a read-only value. The compound assignment evaluates to the modified value when used as a sub-expression: 1 2 3 var a = 3 ; trace (a += 3 ); // 6 trace (a); // 6 Note that the first operand of /= must always be a Float , since the result of a division is always a Float in Haxe. Similarly, += and -= cannot accept Int as the first operand if Float is given as the second operand, since the result would be a Float . Numeric comparison operators Operator Operation Operand 1 Operand 2 Result type == equal Float/Int Float/Int Bool != not equal Float/Int Float/Int Bool  less than Float/Int Float/Int Bool = less than or equal Float/Int Float/Int Bool  greater than Float/Int Float/Int Bool = greater than or equal Float/Int Float/Int Bool String comparison operators Operator Operation Operand 1 Operand 2 Result type == equal String String Bool != not equal String String Bool  lexicographically before String String Bool = lexicographically before or equal String String Bool  lexicographically after String String Bool = lexicographically after or equal String String Bool Two values of type String are considered equal in Haxe when they have the same length and the same contents: 1 2 3 4 5 6 var a = \"foo\" ; var b = \"bar\" ; var c = \"foo\" ; trace (a == b); // false trace (a == c); // true trace (a == \"foo\" ); // true Equality operators Operator Operation Operand 1 Operand 2 Result type == equal any any Bool != not equal any any Bool The types of operand 1 and operand 2 must unify . Enums: Enums without parameters always represent the same value, so MyEnum.A == MyEnum.A . Enums with parameters can be compared with a.equals(b) (which is short for Type.enumEquals() ). Dynamic: Comparison involving at least one operand of type Dynamic is unspecified and platform-specific. Miscellaneous operators Operator Operation Operand 1 Operand 2 Result type ... interval (see range iteration ) Int Int IntIterator = arrow (see map , key-value iteration , map comprehension ) any any -"},"5.表达式/5.3 操作符/5.3.2 二元操作符.html#5-3-2-二元操作符":{"title":"5.3.2 &#x4E8C;&#x5143;&#x64CD;&#x4F5C;&#x7B26;","path":"\\5.表达式\\5.3 操作符\\5.3.2 二元操作符.html#5-3-2-二元操作符","body":"Arithmetic operators Operator Operation Operand 1 Operand 2 Result type % modulo Float/Int Float/Int Float/Int * multiplication Float/Int Float/Int Float/Int / division Float/Int Float/Int Float + addition Float/Int Float/Int Float/Int - subtraction Float/Int Float/Int Float/Int About the Float/Int return type: If one of the operands is of type Float , the resulting expression will also be of type Float , otherwise the type will be Int . The result of a division is always a Float ; use Std.int(a / b) for integer division (discarding any fractional part). In Haxe, the result of a modulo operation always keeps the sign of the dividend (the left operand) if the divisor is non-negative. The result is target-specific with a negative divisor. String concatenation operator Operator Operation Operand 1 Operand 2 Result type + concatenation any String String + concatenation String any String += concatenation String any String Note that the &#x201C;any&#x201D; operand will be stringified. For classes and abstracts stringification can be controlled with user-defined toString function. Bitwise operators Operator Operation Operand 1 Operand 2 Result type  shift left Int Int Int  shift right Int Int Int  unsigned shift right Int Int Int &amp; bitwise and Int Int Int ` ` bitwise or Int Int Int ^ bitwise xor Int Int Int Logical operators Operator Operation Operand 1 Operand 2 Result type &amp;&amp; logical and Bool Bool Bool ` ` logical or Bool Bool Bool Short-circuiting: Haxe guarantees that compound boolean expressions with the same operator are evaluated from left to right but only as far as necessary at run-time. For instance, an expression like A &amp;&amp; B will evaluate A first and evaluate B only if the evaluation of A yielded true . Likewise, the expression A || B will not evaluate B if the evaluation of A yielded true , because the value of B is irrelevant in that case. This is important in cases such as this: 1 if (object != null &amp;&amp; object.field == 1 ) { } Accessing object.field if object is null would lead to a run-time error, but the check for object != null guards against it. Compound assignment operators Operator Operation Operand 1 Operand 2 Result type %= modulo Float/Int Float/Int Float/Int *= multiplication Float/Int Float/Int Float/Int /= division Float Float/Int Float += addition Float/Int Float/Int Float/Int -= subtraction Float/Int Float/Int Float/Int = shift left Int Int Int = shift right Int Int Int = unsigned shift right Int Int Int &amp;= bitwise and Int Int Int ` =` bitwise or Int Int Int ^= bitwise xor Int Int Int In all cases, a compound assignment modifies the given variable, field, structure member, etc., so it will not work on a read-only value. The compound assignment evaluates to the modified value when used as a sub-expression: 1 2 3 var a = 3 ; trace (a += 3 ); // 6 trace (a); // 6 Note that the first operand of /= must always be a Float , since the result of a division is always a Float in Haxe. Similarly, += and -= cannot accept Int as the first operand if Float is given as the second operand, since the result would be a Float . Numeric comparison operators Operator Operation Operand 1 Operand 2 Result type == equal Float/Int Float/Int Bool != not equal Float/Int Float/Int Bool  less than Float/Int Float/Int Bool = less than or equal Float/Int Float/Int Bool  greater than Float/Int Float/Int Bool = greater than or equal Float/Int Float/Int Bool String comparison operators Operator Operation Operand 1 Operand 2 Result type == equal String String Bool != not equal String String Bool  lexicographically before String String Bool = lexicographically before or equal String String Bool  lexicographically after String String Bool = lexicographically after or equal String String Bool Two values of type String are considered equal in Haxe when they have the same length and the same contents: 1 2 3 4 5 6 var a = foo ; var b = bar ; var c = foo ; trace (a == b); // false trace (a == c); // true trace (a == foo ); // true Equality operators Operator Operation Operand 1 Operand 2 Result type == equal any any Bool != not equal any any Bool The types of operand 1 and operand 2 must unify . Enums: Enums without parameters always represent the same value, so MyEnum.A == MyEnum.A . Enums with parameters can be compared with a.equals(b) (which is short for Type.enumEquals() ). Dynamic: Comparison involving at least one operand of type Dynamic is unspecified and platform-specific. Miscellaneous operators Operator Operation Operand 1 Operand 2 Result type ... interval (see range iteration ) Int Int IntIterator = arrow (see map , key-value iteration , map comprehension ) any any -"},"5.表达式/5.3 操作符/5.3.4 优先级.html":{"title":"","path":"\\5.表达式\\5.3 操作符\\5.3.4 优先级.html","body":"5.3.4 优先级 In order of descending precedence (i.e. operators higher in the table are evaluated first): Operators Note Associativity ! , ++ , -- postfix unary operators right ~ , ! , - , ++ , -- prefix unary operators right % modulo left * , / multiplication, division left + , - addition, subtraction left  ,  ,  bitwise shifts left &amp; , ` , ^` bitwise operators left == , != ,  , = ,  , = comparison left ... interval left &amp;&amp; logical and left ` ` logical or left @ metadata right ?: ternary right %= , *= , /= , += , -= , = , = , = , &amp;= , ` = , ^=` compound assignment right = arrow right Differences from C-like precedence Many languages (C++, Java, PHP, JavaScript, etc) use the same operator precedence rules as C. In Haxe, there are a couple of differences from these rules: % (modulo) has a higher precedence than * and / ; in C they have the same precedence | , &amp; , ^ (bitwise operators) have the same precedence; in C the three operators all have a different precedence | , &amp; , ^ (bitwise operators) also have a lower precedence than == , != , etc (comparison operators)"},"5.表达式/5.3 操作符/5.3.4 优先级.html#5-3-4-优先级":{"title":"5.3.4 &#x4F18;&#x5148;&#x7EA7;","path":"\\5.表达式\\5.3 操作符\\5.3.4 优先级.html#5-3-4-优先级","body":"In order of descending precedence (i.e. operators higher in the table are evaluated first): Operators Note Associativity ! , ++ , -- postfix unary operators right ~ , ! , - , ++ , -- prefix unary operators right % modulo left * , / multiplication, division left + , - addition, subtraction left  ,  ,  bitwise shifts left &amp; , ` , ^` bitwise operators left == , != ,  , = ,  , = comparison left ... interval left &amp;&amp; logical and left ` ` logical or left @ metadata right ?: ternary right %= , *= , /= , += , -= , = , = , = , &amp;= , ` = , ^=` compound assignment right = arrow right Differences from C-like precedence Many languages (C++, Java, PHP, JavaScript, etc) use the same operator precedence rules as C. In Haxe, there are a couple of differences from these rules: % (modulo) has a higher precedence than * and / ; in C they have the same precedence | , &amp; , ^ (bitwise operators) have the same precedence; in C the three operators all have a different precedence | , &amp; , ^ (bitwise operators) also have a lower precedence than == , != , etc (comparison operators)"},"5.表达式/5.3 操作符/5.3.3 三元操作符.html":{"title":"","path":"\\5.表达式\\5.3 操作符\\5.3.3 三元操作符.html","body":"5.3.3 三元操作符 Operator Operation Operand 1 Operand 2 Operand 3 Result type ?: condition Bool any any any The type of operand 1 and operand 2 must unify . The unified type is used as the result type of the expression. The ternary conditional operator is a shorter form of if : 1 2 3 4 5 6 7 trace ( true ? \"Haxe\" : \"Neko \"); // Haxe trace(1 == 2 ? 3 : 4); // 4 // equivalent to: trace(if (true) \" Haxe \" else \" Neko \"); // Haxe trace(if (1 == 2) 3 else 4); // 4"},"5.表达式/5.3 操作符/5.3.3 三元操作符.html#5-3-3-三元操作符":{"title":"5.3.3 &#x4E09;&#x5143;&#x64CD;&#x4F5C;&#x7B26;","path":"\\5.表达式\\5.3 操作符\\5.3.3 三元操作符.html#5-3-3-三元操作符","body":"Operator Operation Operand 1 Operand 2 Operand 3 Result type ?: condition Bool any any any The type of operand 1 and operand 2 must unify . The unified type is used as the result type of the expression. The ternary conditional operator is a shorter form of if : 1 2 3 4 5 6 7 trace ( true ? Haxe : Neko ); // Haxe trace(1 == 2 ? 3 : 4); // 4 // equivalent to: trace(if (true)  Haxe  else  Neko ); // Haxe trace(if (1 == 2) 3 else 4); // 4"},"5.表达式/5.3 操作符/5.3.5 重载与宏.html":{"title":"","path":"\\5.表达式\\5.3 操作符\\5.3.5 重载与宏.html","body":"5.3.5 重载与宏 前面章节中所描述的操作符规定了其作用于基础数据类型时的意义及返回类型。 额外的功能可通过 抽象操作符重载 或 宏处理 实现。 The operators specified in the previous sections specify the types and meanings for operations on basic types. Additional functionality can be implemented using abstract operator overloading or macro processing . 操作符优先级不可以通过抽象操作符重载改变。 Operator precedence cannot be changed with abstract operator overloading. 宏处理的某些特定时候有一个额外的操作符可供使用：后置的 ! 操作符。 For macro processing in particular, there is an additional operator available: the postfix ! operator."},"5.表达式/5.3 操作符/5.3.5 重载与宏.html#5-3-5-重载与宏":{"title":"5.3.5 &#x91CD;&#x8F7D;&#x4E0E;&#x5B8F;","path":"\\5.表达式\\5.3 操作符\\5.3.5 重载与宏.html#5-3-5-重载与宏","body":"&#x524D;&#x9762;&#x7AE0;&#x8282;&#x4E2D;&#x6240;&#x63CF;&#x8FF0;&#x7684;&#x64CD;&#x4F5C;&#x7B26;&#x89C4;&#x5B9A;&#x4E86;&#x5176;&#x4F5C;&#x7528;&#x4E8E;&#x57FA;&#x7840;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x65F6;&#x7684;&#x610F;&#x4E49;&#x53CA;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x3002; &#x989D;&#x5916;&#x7684;&#x529F;&#x80FD;&#x53EF;&#x901A;&#x8FC7; &#x62BD;&#x8C61;&#x64CD;&#x4F5C;&#x7B26;&#x91CD;&#x8F7D; &#x6216; &#x5B8F;&#x5904;&#x7406; &#x5B9E;&#x73B0;&#x3002; The operators specified in the previous sections specify the types and meanings for operations on basic types. Additional functionality can be implemented using abstract operator overloading or macro processing . &#x64CD;&#x4F5C;&#x7B26;&#x4F18;&#x5148;&#x7EA7;&#x4E0D;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x62BD;&#x8C61;&#x64CD;&#x4F5C;&#x7B26;&#x91CD;&#x8F7D;&#x6539;&#x53D8;&#x3002; Operator precedence cannot be changed with abstract operator overloading. &#x5B8F;&#x5904;&#x7406;&#x7684;&#x67D0;&#x4E9B;&#x7279;&#x5B9A;&#x65F6;&#x5019;&#x6709;&#x4E00;&#x4E2A;&#x989D;&#x5916;&#x7684;&#x64CD;&#x4F5C;&#x7B26;&#x53EF;&#x4F9B;&#x4F7F;&#x7528;&#xFF1A;&#x540E;&#x7F6E;&#x7684; ! &#x64CD;&#x4F5C;&#x7B26;&#x3002; For macro processing in particular, there is an additional operator available: the postfix ! operator."},"5.表达式/5.5.数组声明/5.5.数组声明.html":{"title":"","path":"\\5.表达式\\5.5.数组声明\\5.5.数组声明.html","body":"5.5.数组声明 数组使用封闭的方括号，并在其中使用逗号分隔值来初始化。一个扁平的 [] 表示空数组，而[1,2,3]用三个元素初始化一个数组。 Arrays are initialized by enclosing comma , separated values in brackets []. A plain [] represents the empty array, whereas [1, 2, 3] initializes an array with three elements 1, 2 and 3. 生成的代码可能在不支持数组初始化的平台不那么简洁。本质上，这样的初始化代码看起来如下： The generated code may be less concise on platforms that do not support array initialization. Essentially, such initialization code then looks like this: 1 2 3 4 var a = new Array (); a.push( 1 ); a.push( 2 ); a.push( 3 ); 在声明时要考虑这个，是否一个函数应该被内联（第4.4.2节），因为它可能内联进比在可见语法中更多的代码。 This should be considered when deciding if a function should be inlined (4.4.2) as it may inline more code than visible in the syntax. 高级初始化技术在数组推导（第6.6节）中详述。 Advanced initialization techniques are described in Array Comprehension (Section 6.6)."},"5.表达式/5.5.数组声明/5.5.数组声明.html#5-5-数组声明":{"title":"5.5.&#x6570;&#x7EC4;&#x58F0;&#x660E;","path":"\\5.表达式\\5.5.数组声明\\5.5.数组声明.html#5-5-数组声明","body":"&#x6570;&#x7EC4;&#x4F7F;&#x7528;&#x5C01;&#x95ED;&#x7684;&#x65B9;&#x62EC;&#x53F7;&#xFF0C;&#x5E76;&#x5728;&#x5176;&#x4E2D;&#x4F7F;&#x7528;&#x9017;&#x53F7;&#x5206;&#x9694;&#x503C;&#x6765;&#x521D;&#x59CB;&#x5316;&#x3002;&#x4E00;&#x4E2A;&#x6241;&#x5E73;&#x7684; [] &#x8868;&#x793A;&#x7A7A;&#x6570;&#x7EC4;&#xFF0C;&#x800C;[1,2,3]&#x7528;&#x4E09;&#x4E2A;&#x5143;&#x7D20;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x3002; Arrays are initialized by enclosing comma , separated values in brackets []. A plain [] represents the empty array, whereas [1, 2, 3] initializes an array with three elements 1, 2 and 3. &#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#x53EF;&#x80FD;&#x5728;&#x4E0D;&#x652F;&#x6301;&#x6570;&#x7EC4;&#x521D;&#x59CB;&#x5316;&#x7684;&#x5E73;&#x53F0;&#x4E0D;&#x90A3;&#x4E48;&#x7B80;&#x6D01;&#x3002;&#x672C;&#x8D28;&#x4E0A;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x521D;&#x59CB;&#x5316;&#x4EE3;&#x7801;&#x770B;&#x8D77;&#x6765;&#x5982;&#x4E0B;&#xFF1A; The generated code may be less concise on platforms that do not support array initialization. Essentially, such initialization code then looks like this: 1 2 3 4 var a = new Array (); a.push( 1 ); a.push( 2 ); a.push( 3 ); &#x5728;&#x58F0;&#x660E;&#x65F6;&#x8981;&#x8003;&#x8651;&#x8FD9;&#x4E2A;&#xFF0C;&#x662F;&#x5426;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x5E94;&#x8BE5;&#x88AB;&#x5185;&#x8054;&#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x53EF;&#x80FD;&#x5185;&#x8054;&#x8FDB;&#x6BD4;&#x5728;&#x53EF;&#x89C1;&#x8BED;&#x6CD5;&#x4E2D;&#x66F4;&#x591A;&#x7684;&#x4EE3;&#x7801;&#x3002; This should be considered when deciding if a function should be inlined (4.4.2) as it may inline more code than visible in the syntax. &#x9AD8;&#x7EA7;&#x521D;&#x59CB;&#x5316;&#x6280;&#x672F;&#x5728;&#x6570;&#x7EC4;&#x63A8;&#x5BFC;&#xFF08;&#x7B2C;6.6&#x8282;&#xFF09;&#x4E2D;&#x8BE6;&#x8FF0;&#x3002; Advanced initialization techniques are described in Array Comprehension (Section 6.6)."},"5.表达式/5.6.对象声明/5.6.对象声明.html":{"title":"","path":"\\5.表达式\\5.6.对象声明\\5.6.对象声明.html","body":"5.6.对象声明 对象声明通过一个开口的花括号，后跟键值对，通过逗号分隔，然后，使用闭口的花括号结束。 Object declaration begins with an opening curly brace { after which key:value-pairs separated by comma , follow, and which ends in a closing curly brace}. 1 2 3 4 5 6  key1: value1 , key2: value2 , ... keyN: valueN  对象声明更多的细节在匿名结构（第2.5节）中详述。 Further details of object declaration are described in the section about anonymous structures (2.5)."},"5.表达式/5.6.对象声明/5.6.对象声明.html#5-6-对象声明":{"title":"5.6.&#x5BF9;&#x8C61;&#x58F0;&#x660E;","path":"\\5.表达式\\5.6.对象声明\\5.6.对象声明.html#5-6-对象声明","body":"&#x5BF9;&#x8C61;&#x58F0;&#x660E;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5F00;&#x53E3;&#x7684;&#x82B1;&#x62EC;&#x53F7;&#xFF0C;&#x540E;&#x8DDF;&#x952E;&#x503C;&#x5BF9;&#xFF0C;&#x901A;&#x8FC7;&#x9017;&#x53F7;&#x5206;&#x9694;&#xFF0C;&#x7136;&#x540E;&#xFF0C;&#x4F7F;&#x7528;&#x95ED;&#x53E3;&#x7684;&#x82B1;&#x62EC;&#x53F7;&#x7ED3;&#x675F;&#x3002; Object declaration begins with an opening curly brace { after which key:value-pairs separated by comma , follow, and which ends in a closing curly brace}. 1 2 3 4 5 6 { key1: value1 , key2: value2 , ... keyN: valueN } &#x5BF9;&#x8C61;&#x58F0;&#x660E;&#x66F4;&#x591A;&#x7684;&#x7EC6;&#x8282;&#x5728;&#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF08;&#x7B2C;2.5&#x8282;&#xFF09;&#x4E2D;&#x8BE6;&#x8FF0;&#x3002; Further details of object declaration are described in the section about anonymous structures (2.5)."},"5.表达式/5.7.字段访问/5.7.字段访问.html":{"title":"","path":"\\5.表达式\\5.7.字段访问\\5.7.字段访问.html","body":"5.7.字段访问 字段访问通过点操作符来表示，点号后跟字段的名称。 Field access is expressed by using the dot . followed by the name of the ﬁeld. 1 object.fieldName 这个语法同样用于访问包中的类型，形式为 pack.Type 。 This syntax is also used to access types within packages in the form of pack.Type. 类型检查器确保一个被访问的字段实际上存在，并可以应用根据字段的性质进行转换。如果一个字段访问是模糊的，理解解析顺序（第3.7.3）可以提供帮助。 The typer ensures that an accessed ﬁeld actually exist and may apply transformations depending on the nature of the ﬁeld. If a ﬁeld access is ambiguous, understanding the resolution order (3.7.3) may help."},"5.表达式/5.7.字段访问/5.7.字段访问.html#5-7-字段访问":{"title":"5.7.&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;","path":"\\5.表达式\\5.7.字段访问\\5.7.字段访问.html#5-7-字段访问","body":"&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x901A;&#x8FC7;&#x70B9;&#x64CD;&#x4F5C;&#x7B26;&#x6765;&#x8868;&#x793A;&#xFF0C;&#x70B9;&#x53F7;&#x540E;&#x8DDF;&#x5B57;&#x6BB5;&#x7684;&#x540D;&#x79F0;&#x3002; Field access is expressed by using the dot . followed by the name of the &#xFB01;eld. 1 object.fieldName &#x8FD9;&#x4E2A;&#x8BED;&#x6CD5;&#x540C;&#x6837;&#x7528;&#x4E8E;&#x8BBF;&#x95EE;&#x5305;&#x4E2D;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x5F62;&#x5F0F;&#x4E3A; pack.Type &#x3002; This syntax is also used to access types within packages in the form of pack.Type. &#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x5668;&#x786E;&#x4FDD;&#x4E00;&#x4E2A;&#x88AB;&#x8BBF;&#x95EE;&#x7684;&#x5B57;&#x6BB5;&#x5B9E;&#x9645;&#x4E0A;&#x5B58;&#x5728;&#xFF0C;&#x5E76;&#x53EF;&#x4EE5;&#x5E94;&#x7528;&#x6839;&#x636E;&#x5B57;&#x6BB5;&#x7684;&#x6027;&#x8D28;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x662F;&#x6A21;&#x7CCA;&#x7684;&#xFF0C;&#x7406;&#x89E3;&#x89E3;&#x6790;&#x987A;&#x5E8F;&#xFF08;&#x7B2C;3.7.3&#xFF09;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x5E2E;&#x52A9;&#x3002; The typer ensures that an accessed &#xFB01;eld actually exist and may apply transformations depending on the nature of the &#xFB01;eld. If a &#xFB01;eld access is ambiguous, understanding the resolution order (3.7.3) may help."},"5.表达式/5.8.数组访问/5.8.数组访问.html":{"title":"","path":"\\5.表达式\\5.8.数组访问\\5.8.数组访问.html","body":"5.8.数组访问 数组访问通过使用开口的 [ 方括号，后跟索引表达式 ，并以闭口的方括号 ]结束。 Array access is expressed by using an opening bracket [ followed by the index expression and a closing bracket ]. 1 expr[indexExpr] 这个符号允许使用任意表达式，但是在类型级别，只有某个组合被承认： This notation is allowed with arbitrary expressions, but at typing level only certain combinations are admitted: expr 是Array或者 Dynamic 类型，indexExpr是Int类型 expr是一个抽象类型（第2.8节），定义要给匹配的数组访问（第2.8.3节） expr is of Array or Dynamic and indexExpr is of Int expr is an abstract type (2.8) which deﬁnes a matching array access (2.8.3)"},"5.表达式/5.8.数组访问/5.8.数组访问.html#5-8-数组访问":{"title":"5.8.&#x6570;&#x7EC4;&#x8BBF;&#x95EE;","path":"\\5.表达式\\5.8.数组访问\\5.8.数组访问.html#5-8-数组访问","body":"&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x5F00;&#x53E3;&#x7684; [ &#x65B9;&#x62EC;&#x53F7;&#xFF0C;&#x540E;&#x8DDF;&#x7D22;&#x5F15;&#x8868;&#x8FBE;&#x5F0F; &#xFF0C;&#x5E76;&#x4EE5;&#x95ED;&#x53E3;&#x7684;&#x65B9;&#x62EC;&#x53F7; ]&#x7ED3;&#x675F;&#x3002; Array access is expressed by using an opening bracket [ followed by the index expression and a closing bracket ]. 1 expr[indexExpr] &#x8FD9;&#x4E2A;&#x7B26;&#x53F7;&#x5141;&#x8BB8;&#x4F7F;&#x7528;&#x4EFB;&#x610F;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x7C7B;&#x578B;&#x7EA7;&#x522B;&#xFF0C;&#x53EA;&#x6709;&#x67D0;&#x4E2A;&#x7EC4;&#x5408;&#x88AB;&#x627F;&#x8BA4;&#xFF1A; This notation is allowed with arbitrary expressions, but at typing level only certain combinations are admitted: expr &#x662F;Array&#x6216;&#x8005; Dynamic &#x7C7B;&#x578B;&#xFF0C;indexExpr&#x662F;Int&#x7C7B;&#x578B; expr&#x662F;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.8&#x8282;&#xFF09;&#xFF0C;&#x5B9A;&#x4E49;&#x8981;&#x7ED9;&#x5339;&#x914D;&#x7684;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#xFF08;&#x7B2C;2.8.3&#x8282;&#xFF09; expr is of Array or Dynamic and indexExpr is of Int expr is an abstract type (2.8) which de&#xFB01;nes a matching array access (2.8.3)"},"5.表达式/5.9.函数调用/5.9.函数调用.html":{"title":"","path":"\\5.表达式\\5.9.函数调用\\5.9.函数调用.html","body":"5.9.函数调用 函数调用由一个任意的主题表达式，后跟要给开口的圆括号，逗号分隔表达式作为参数，以闭口的圆括号结束。 Functions calls consist of an arbitrary subject expression followed by an opening parenthesis (, a comma , separated list of expressions as arguments and a closing parenthesis ). 1 2 3 4 5 subject(); // call with no arguments subject(e1); // call with one argument subject(e1, e2); // call with two arguments // call with multiple arguments subject(e1, ..., eN);"},"5.表达式/5.9.函数调用/5.9.函数调用.html#5-9-函数调用":{"title":"5.9.&#x51FD;&#x6570;&#x8C03;&#x7528;","path":"\\5.表达式\\5.9.函数调用\\5.9.函数调用.html#5-9-函数调用","body":"&#x51FD;&#x6570;&#x8C03;&#x7528;&#x7531;&#x4E00;&#x4E2A;&#x4EFB;&#x610F;&#x7684;&#x4E3B;&#x9898;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x540E;&#x8DDF;&#x8981;&#x7ED9;&#x5F00;&#x53E3;&#x7684;&#x5706;&#x62EC;&#x53F7;&#xFF0C;&#x9017;&#x53F7;&#x5206;&#x9694;&#x8868;&#x8FBE;&#x5F0F;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x4EE5;&#x95ED;&#x53E3;&#x7684;&#x5706;&#x62EC;&#x53F7;&#x7ED3;&#x675F;&#x3002; Functions calls consist of an arbitrary subject expression followed by an opening parenthesis (, a comma , separated list of expressions as arguments and a closing parenthesis ). 1 2 3 4 5 subject(); // call with no arguments subject(e1); // call with one argument subject(e1, e2); // call with two arguments // call with multiple arguments subject(e1, ..., eN);"},"6.语言特性/6.1.条件编译/6.1.条件编译.html":{"title":"","path":"\\6.语言特性\\6.1.条件编译\\6.1.条件编译.html","body":"6.1.条件编译 Haxe允许通过使用 #if 、#elseif 和 #else 进行条件编译，并检查编译器标记。 Haxe allows conditional compilation by using #if, #elseif and #else and checking for compiler ﬂags. 定义：编译器标记 一个编译器标记是一个配置值，可以改变编译过程。可以调用命令行使用 -D key=value 或者 只有 -D key的形式对标记进行设置，只有key的时候值默认为 1 。编译器也设置了一些内部标记在不同的编译步骤之间传递信息。 [warning] Deﬁnition : Compiler Flag A compiler ﬂag is a conﬁgurable value which may inﬂuence the compilation process. Such a ﬂag can be set by invoking the command line with -D key=value or just -D key, in which case the value defaults to “1”. The compiler also sets several ﬂags internally to pass information between different compilation steps. 这个例子展示了条件编译的用法： This example demonstrates usage of conditional compilation: 1 2 3 4 5 6 7 8 9 10 11 class Main  public static function main () # if !debug trace ( \"ok\" ); # elseif (debug_level  3) trace ( 3 ); # else trace ( \"debug level too low\" ); # end   不使用任何标记编译只保留 trace(“ok”); 这行。另一个分支在解析文件时被丢弃。这些其他的分支必须包含有效的Haxe语法，但是代码不会执行类型检查。 Compiling this without any ﬂags will leave only the trace(“ok”); line in the body of the main method. The other branches are discarded while parsing the ﬁle. These other branches must still contain valid Haxe syntax, but the code is not type-checked. #if 之后的条件和 #elseif之后的条件允许如下的表达式： The conditions after #if and #elseif allow the following expressions: 任何标识符被编译器标记替换为同名的。注意 -D -some-flag 指示标记 some-flag，somin_flag被定义。 String，Int和Float常量值被直接使用。 布尔操作符 &amp;&amp;， || ，和 ! 如同预期那样工作，然而整个表达式必须被完全放在括号中。 操作符 ==，!=，， =，，=可以用来对比值。 括号可以用来像往常一样组织表达式。 Any identiﬁer is replaced by the value of the compiler ﬂag by the same name. Note that -D some-flag from command line leads to the ﬂags some-flag and some_flag to be deﬁned. The values of String, Int and Float constants are used directly. The boolean operators &amp;&amp; (and), || (or) and ! (not) work as expected, however the full expression must be completely contained by parentheses. The operators ==, !=, , =, , = can be used to compare values. Parentheses () can be used to group expressions as usual. Haxe解析器不解析 some-flag为一个字符串令牌，而是将她读为一个减法二院操作符 some - flag 。这种情况，下划线的版本 some_flag 就有使用的必要了。 The Haxe parser does not parse some-flag as a single token and instead reads it as a subtraction binary operator some - flag. In cases like this the underscore version some_flag has to be used. 内建编译器标记 一个所有内部定义的详尽列表可以通过在Haxe编译器 调用 –help-defines 参数来获得。Haxe编译器在每次编译允许多个 -D 标记。 Built-in Compiler Flags An exhaustive list of all built-in deﬁnes can be obtained by invoking the Haxe Compiler with the –help-defines argument. The Haxe Compiler allows multiple -D ﬂags per compilation. 也可以查看编译器标记列表（第7.1节）。 See also the Compiler Flags list (7.1)."},"6.语言特性/6.1.条件编译/6.1.条件编译.html#6-1-条件编译":{"title":"6.1.&#x6761;&#x4EF6;&#x7F16;&#x8BD1;","path":"\\6.语言特性\\6.1.条件编译\\6.1.条件编译.html#6-1-条件编译","body":"Haxe&#x5141;&#x8BB8;&#x901A;&#x8FC7;&#x4F7F;&#x7528; #if &#x3001;#elseif &#x548C; #else &#x8FDB;&#x884C;&#x6761;&#x4EF6;&#x7F16;&#x8BD1;&#xFF0C;&#x5E76;&#x68C0;&#x67E5;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#x3002; Haxe allows conditional compilation by using #if, #elseif and #else and checking for compiler &#xFB02;ags. &#x5B9A;&#x4E49;&#xFF1A;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0; &#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#x662F;&#x4E00;&#x4E2A;&#x914D;&#x7F6E;&#x503C;&#xFF0C;&#x53EF;&#x4EE5;&#x6539;&#x53D8;&#x7F16;&#x8BD1;&#x8FC7;&#x7A0B;&#x3002;&#x53EF;&#x4EE5;&#x8C03;&#x7528;&#x547D;&#x4EE4;&#x884C;&#x4F7F;&#x7528; -D key=value &#x6216;&#x8005; &#x53EA;&#x6709; -D key&#x7684;&#x5F62;&#x5F0F;&#x5BF9;&#x6807;&#x8BB0;&#x8FDB;&#x884C;&#x8BBE;&#x7F6E;&#xFF0C;&#x53EA;&#x6709;key&#x7684;&#x65F6;&#x5019;&#x503C;&#x9ED8;&#x8BA4;&#x4E3A; 1 &#x3002;&#x7F16;&#x8BD1;&#x5668;&#x4E5F;&#x8BBE;&#x7F6E;&#x4E86;&#x4E00;&#x4E9B;&#x5185;&#x90E8;&#x6807;&#x8BB0;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x7F16;&#x8BD1;&#x6B65;&#x9AA4;&#x4E4B;&#x95F4;&#x4F20;&#x9012;&#x4FE1;&#x606F;&#x3002; [warning] De&#xFB01;nition : Compiler Flag A compiler &#xFB02;ag is a con&#xFB01;gurable value which may in&#xFB02;uence the compilation process. Such a &#xFB02;ag can be set by invoking the command line with -D key=value or just -D key, in which case the value defaults to &#x201C;1&#x201D;. The compiler also sets several &#xFB02;ags internally to pass information between different compilation steps. &#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x5C55;&#x793A;&#x4E86;&#x6761;&#x4EF6;&#x7F16;&#x8BD1;&#x7684;&#x7528;&#x6CD5;&#xFF1A; This example demonstrates usage of conditional compilation: 1 2 3 4 5 6 7 8 9 10 11 class Main { public static function main (){ # if !debug trace ( ok ); # elseif (debug_level  3) trace ( 3 ); # else trace ( debug level too low ); # end } } &#x4E0D;&#x4F7F;&#x7528;&#x4EFB;&#x4F55;&#x6807;&#x8BB0;&#x7F16;&#x8BD1;&#x53EA;&#x4FDD;&#x7559; trace(&#x201C;ok&#x201D;); &#x8FD9;&#x884C;&#x3002;&#x53E6;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#x5728;&#x89E3;&#x6790;&#x6587;&#x4EF6;&#x65F6;&#x88AB;&#x4E22;&#x5F03;&#x3002;&#x8FD9;&#x4E9B;&#x5176;&#x4ED6;&#x7684;&#x5206;&#x652F;&#x5FC5;&#x987B;&#x5305;&#x542B;&#x6709;&#x6548;&#x7684;Haxe&#x8BED;&#x6CD5;&#xFF0C;&#x4F46;&#x662F;&#x4EE3;&#x7801;&#x4E0D;&#x4F1A;&#x6267;&#x884C;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x3002; Compiling this without any &#xFB02;ags will leave only the trace(&#x201C;ok&#x201D;); line in the body of the main method. The other branches are discarded while parsing the &#xFB01;le. These other branches must still contain valid Haxe syntax, but the code is not type-checked. #if &#x4E4B;&#x540E;&#x7684;&#x6761;&#x4EF6;&#x548C; #elseif&#x4E4B;&#x540E;&#x7684;&#x6761;&#x4EF6;&#x5141;&#x8BB8;&#x5982;&#x4E0B;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#xFF1A; The conditions after #if and #elseif allow the following expressions: &#x4EFB;&#x4F55;&#x6807;&#x8BC6;&#x7B26;&#x88AB;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#x66FF;&#x6362;&#x4E3A;&#x540C;&#x540D;&#x7684;&#x3002;&#x6CE8;&#x610F; -D -some-flag &#x6307;&#x793A;&#x6807;&#x8BB0; some-flag&#xFF0C;somin_flag&#x88AB;&#x5B9A;&#x4E49;&#x3002; String&#xFF0C;Int&#x548C;Float&#x5E38;&#x91CF;&#x503C;&#x88AB;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x3002; &#x5E03;&#x5C14;&#x64CD;&#x4F5C;&#x7B26; &amp;&amp;&#xFF0C; || &#xFF0C;&#x548C; ! &#x5982;&#x540C;&#x9884;&#x671F;&#x90A3;&#x6837;&#x5DE5;&#x4F5C;&#xFF0C;&#x7136;&#x800C;&#x6574;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x5FC5;&#x987B;&#x88AB;&#x5B8C;&#x5168;&#x653E;&#x5728;&#x62EC;&#x53F7;&#x4E2D;&#x3002; &#x64CD;&#x4F5C;&#x7B26; ==&#xFF0C;!=&#xFF0C;&#xFF0C; =&#xFF0C;&#xFF0C;=&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x5BF9;&#x6BD4;&#x503C;&#x3002; &#x62EC;&#x53F7;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x50CF;&#x5F80;&#x5E38;&#x4E00;&#x6837;&#x7EC4;&#x7EC7;&#x8868;&#x8FBE;&#x5F0F;&#x3002; Any identi&#xFB01;er is replaced by the value of the compiler &#xFB02;ag by the same name. Note that -D some-flag from command line leads to the &#xFB02;ags some-flag and some_flag to be de&#xFB01;ned. The values of String, Int and Float constants are used directly. The boolean operators &amp;&amp; (and), || (or) and ! (not) work as expected, however the full expression must be completely contained by parentheses. The operators ==, !=, , =, , = can be used to compare values. Parentheses () can be used to group expressions as usual. Haxe&#x89E3;&#x6790;&#x5668;&#x4E0D;&#x89E3;&#x6790; some-flag&#x4E3A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4EE4;&#x724C;&#xFF0C;&#x800C;&#x662F;&#x5C06;&#x5979;&#x8BFB;&#x4E3A;&#x4E00;&#x4E2A;&#x51CF;&#x6CD5;&#x4E8C;&#x9662;&#x64CD;&#x4F5C;&#x7B26; some - flag &#x3002;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x4E0B;&#x5212;&#x7EBF;&#x7684;&#x7248;&#x672C; some_flag &#x5C31;&#x6709;&#x4F7F;&#x7528;&#x7684;&#x5FC5;&#x8981;&#x4E86;&#x3002; The Haxe parser does not parse some-flag as a single token and instead reads it as a subtraction binary operator some - flag. In cases like this the underscore version some_flag has to be used. &#x5185;&#x5EFA;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0; &#x4E00;&#x4E2A;&#x6240;&#x6709;&#x5185;&#x90E8;&#x5B9A;&#x4E49;&#x7684;&#x8BE6;&#x5C3D;&#x5217;&#x8868;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5728;Haxe&#x7F16;&#x8BD1;&#x5668; &#x8C03;&#x7528; &#x2013;help-defines &#x53C2;&#x6570;&#x6765;&#x83B7;&#x5F97;&#x3002;Haxe&#x7F16;&#x8BD1;&#x5668;&#x5728;&#x6BCF;&#x6B21;&#x7F16;&#x8BD1;&#x5141;&#x8BB8;&#x591A;&#x4E2A; -D &#x6807;&#x8BB0;&#x3002; Built-in Compiler Flags An exhaustive list of all built-in de&#xFB01;nes can be obtained by invoking the Haxe Compiler with the &#x2013;help-defines argument. The Haxe Compiler allows multiple -D &#xFB02;ags per compilation. &#x4E5F;&#x53EF;&#x4EE5;&#x67E5;&#x770B;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#x5217;&#x8868;&#xFF08;&#x7B2C;7.1&#x8282;&#xFF09;&#x3002; See also the Compiler Flags list (7.1)."},"6.语言特性/6.10.访问控制/6.10.访问控制.html":{"title":"","path":"\\6.语言特性\\6.10.访问控制\\6.10.访问控制.html","body":"6.10.访问控制 当基础的可见性（第4.4.1节）选项不满足需求时可以使用访问控制。访问控制在类层面上和字段层面上都适用，其中涉及两个方向上的访问控制： Access control can be used if the basic visibility (4.4.1) options are not sufﬁcient. It is applicable at class-level and at ﬁeld-level and knows two directions: 允许访问：目标可通过 :allow(target) 元数据（6.9）提供给一个给定的类或字段进行访问。 强制访问：可在一个类或字段中通过 :access(target) 对给定目标进行强制访问。 Allowing access : The target is granted access to the given class or ﬁeld by using the :allow(target) metadata (6.9). Forcing access : A target is forced to allow access to the given class or ﬁeld by using the :access(target) metadata (6.9). 其中的 target 是一个点路径（dot-path），在不同语境下它可能是： 一个类字段， 一个类或者一个抽象类型， 或者是一个包 In this context, a target can be the dot-path (3.7) to a class ﬁeld, a class or abstract type, or a package. target 与当前上下文的导入无关，所以必须是一个完整的点路径进行表示。 Target does not respect imports, so the fully qualiﬁed path has to be used. 如果被访问控制所修饰的是一个类或者一个抽象类型，访问控制会被扩展至该类型的所有字段上。同样地，如果它是一个包，访问控制将会扩展至这个包内所有的类型、以及这些类型的所有字段上。 If it is a class or abstract type, access modiﬁcation extends to all ﬁelds of that type. Likewise, if it is a package, access modiﬁcation extends to all types of that package and recursively to all ﬁelds of these types. 1 2 3 4 5 6 7 8 9 10 @:allow(Main) class MyClass  static private var foo: Int ;  class Main  static public function main ()  MyClass.foo;   这里， MyClass.foo 字段可以在 main 方法中被访问，因为 MyClass 被 @:allow(Main) 所修饰。你也可以将修饰改为 @:allow(Main.main) ，而且这两种修饰也都可以修饰于字段 foo 之上而不是类上： Here, MyClass.foo can be accessed from the main-method because MyClass is annotated with @:allow(Main). This would also work with @:allow(Main.main) and both versions could alternatively be annotated to the ﬁeld foo instead of the class MyClass: 1 2 3 4 5 6 7 8 9 10 class MyClass  @:allow(Main.main) static private var foo: Int ;  class Main  static public function main ()  MyClass.foo;   而如果一个类的设计不允许被修饰为这类访问控制，那么可以使用强制访问来进行访问： If a type cannot be modiﬁed to allow this kind of access, the accessing method may force access: 1 2 3 4 5 6 7 8 9 10 class MyClass  static private var foo: Int ;  class Main  @:access(MyClass.foo) static public function main ()  MyClass.foo;   通过 @access(MyClass.foo) 访问控制修饰使得 main 方法可以越过 foo 字段的可见性修饰。 The @:access(MyClass.foo) annotation effectively subverts the visibility of the foo ﬁeld within the main-method. 元数据的选择 花絮：元数据的选择 访问控制的特性使用 Haxe 的元数据提供，而不是通过额外的语法提供。有如下几个理由： 额外的语法通常使得语言解析变得更加复杂，同时会导致加入太多关键字。 额外的语法需要另外的学习成本。 元数据语法足够灵活，且可以通过它来实现这一需要。 元数据可以通过Haxe的宏进行 访问/生成/修改。 当然，使用元数据语法的弊端是，如果元数据的关键字拼写错误（例如@:acesss）或者类/包名拼写错误，将不会得到错误报告。尽管如此，如果你尝试访问一个不被允许访问的私有字段时，编译器会报错，因为这不可能是一个不被觉察的错误。 Trivia : On the choice of metadata The access control language feature uses the Haxe metadata syntax instead of additional language-speciﬁc syntax. There are several reasons for that: Additional syntax often adds complexity to the language parsing, and also adds (too) many keywords. Additional syntax requires additional learning by the language user,whereas metadata syntax is something that is already known. The metadata syntax is ﬂexible enough to allow extension of this feature. The metadata can be accessed/generated/modiﬁed by Haxe macros. Of course, the main drawback of using metadata syntax is that you get no error report in case you misspell either the metadata key (@:acesss for instance) or the class/package name. However, with this feature you will get an error when you try to access a private ﬁeld that you are not allowed to, therefore there is no possibility for silent errors. Haxe 3.1.0 以后 Since Haxe 3.1.0 如果允许访问一个 接口（第2.3.3节），它延伸到所有实现这个接口的类： If access is allowed to an interface(2.3.3),it extends to all classes implementing that interface: 1 2 3 4 5 6 7 8 9 10 11 12 class MyClass  @:allow(I) static private var foo: Int ;  interface I   class Main implements I  static public function main ()  MyClass.foo;   对于访问授权父类，也是同样的，这种情况会延伸到所有的子类： This is also true for access granted to parent classes, in which case it extends to all child classes. 破坏性功能 花絮 ：破坏性功能 子类和实现类的访问扩展只支持Haxe 3.0以后。当编写这本手册时发现这部分的访问控制实现是容易缺失的。 [warning] Trivia : Broken feature Access extension to child classes and implementing classes was supposed to work in Haxe 3.0 and even documented accordingly. While writing this manual it was found that this part of the access control implementation was simply missing."},"6.语言特性/6.10.访问控制/6.10.访问控制.html#6-10-访问控制":{"title":"6.10.&#x8BBF;&#x95EE;&#x63A7;&#x5236;","path":"\\6.语言特性\\6.10.访问控制\\6.10.访问控制.html#6-10-访问控制","body":"&#x5F53;&#x57FA;&#x7840;&#x7684;&#x53EF;&#x89C1;&#x6027;&#xFF08;&#x7B2C;4.4.1&#x8282;&#xFF09;&#x9009;&#x9879;&#x4E0D;&#x6EE1;&#x8DB3;&#x9700;&#x6C42;&#x65F6;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x3002;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x5728;&#x7C7B;&#x5C42;&#x9762;&#x4E0A;&#x548C;&#x5B57;&#x6BB5;&#x5C42;&#x9762;&#x4E0A;&#x90FD;&#x9002;&#x7528;&#xFF0C;&#x5176;&#x4E2D;&#x6D89;&#x53CA;&#x4E24;&#x4E2A;&#x65B9;&#x5411;&#x4E0A;&#x7684;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#xFF1A; Access control can be used if the basic visibility (4.4.1) options are not suf&#xFB01;cient. It is applicable at class-level and at &#xFB01;eld-level and knows two directions: &#x5141;&#x8BB8;&#x8BBF;&#x95EE;&#xFF1A;&#x76EE;&#x6807;&#x53EF;&#x901A;&#x8FC7; :allow(target) &#x5143;&#x6570;&#x636E;&#xFF08;6.9&#xFF09;&#x63D0;&#x4F9B;&#x7ED9;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x7684;&#x7C7B;&#x6216;&#x5B57;&#x6BB5;&#x8FDB;&#x884C;&#x8BBF;&#x95EE;&#x3002; &#x5F3A;&#x5236;&#x8BBF;&#x95EE;&#xFF1A;&#x53EF;&#x5728;&#x4E00;&#x4E2A;&#x7C7B;&#x6216;&#x5B57;&#x6BB5;&#x4E2D;&#x901A;&#x8FC7; :access(target) &#x5BF9;&#x7ED9;&#x5B9A;&#x76EE;&#x6807;&#x8FDB;&#x884C;&#x5F3A;&#x5236;&#x8BBF;&#x95EE;&#x3002; Allowing access : The target is granted access to the given class or &#xFB01;eld by using the :allow(target) metadata (6.9). Forcing access : A target is forced to allow access to the given class or &#xFB01;eld by using the :access(target) metadata (6.9). &#x5176;&#x4E2D;&#x7684; target &#x662F;&#x4E00;&#x4E2A;&#x70B9;&#x8DEF;&#x5F84;&#xFF08;dot-path&#xFF09;&#xFF0C;&#x5728;&#x4E0D;&#x540C;&#x8BED;&#x5883;&#x4E0B;&#x5B83;&#x53EF;&#x80FD;&#x662F;&#xFF1A; &#x4E00;&#x4E2A;&#x7C7B;&#x5B57;&#x6BB5;&#xFF0C; &#x4E00;&#x4E2A;&#x7C7B;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF0C; &#x6216;&#x8005;&#x662F;&#x4E00;&#x4E2A;&#x5305; In this context, a target can be the dot-path (3.7) to a class &#xFB01;eld, a class or abstract type, or a package. target &#x4E0E;&#x5F53;&#x524D;&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x5BFC;&#x5165;&#x65E0;&#x5173;&#xFF0C;&#x6240;&#x4EE5;&#x5FC5;&#x987B;&#x662F;&#x4E00;&#x4E2A;&#x5B8C;&#x6574;&#x7684;&#x70B9;&#x8DEF;&#x5F84;&#x8FDB;&#x884C;&#x8868;&#x793A;&#x3002; Target does not respect imports, so the fully quali&#xFB01;ed path has to be used. &#x5982;&#x679C;&#x88AB;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x6240;&#x4FEE;&#x9970;&#x7684;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x4F1A;&#x88AB;&#x6269;&#x5C55;&#x81F3;&#x8BE5;&#x7C7B;&#x578B;&#x7684;&#x6240;&#x6709;&#x5B57;&#x6BB5;&#x4E0A;&#x3002;&#x540C;&#x6837;&#x5730;&#xFF0C;&#x5982;&#x679C;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x5305;&#xFF0C;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x5C06;&#x4F1A;&#x6269;&#x5C55;&#x81F3;&#x8FD9;&#x4E2A;&#x5305;&#x5185;&#x6240;&#x6709;&#x7684;&#x7C7B;&#x578B;&#x3001;&#x4EE5;&#x53CA;&#x8FD9;&#x4E9B;&#x7C7B;&#x578B;&#x7684;&#x6240;&#x6709;&#x5B57;&#x6BB5;&#x4E0A;&#x3002; If it is a class or abstract type, access modi&#xFB01;cation extends to all &#xFB01;elds of that type. Likewise, if it is a package, access modi&#xFB01;cation extends to all types of that package and recursively to all &#xFB01;elds of these types. 1 2 3 4 5 6 7 8 9 10 @:allow(Main) class MyClass { static private var foo: Int ; } class Main { static public function main () { MyClass.foo; } } &#x8FD9;&#x91CC;&#xFF0C; MyClass.foo &#x5B57;&#x6BB5;&#x53EF;&#x4EE5;&#x5728; main &#x65B9;&#x6CD5;&#x4E2D;&#x88AB;&#x8BBF;&#x95EE;&#xFF0C;&#x56E0;&#x4E3A; MyClass &#x88AB; @:allow(Main) &#x6240;&#x4FEE;&#x9970;&#x3002;&#x4F60;&#x4E5F;&#x53EF;&#x4EE5;&#x5C06;&#x4FEE;&#x9970;&#x6539;&#x4E3A; @:allow(Main.main) &#xFF0C;&#x800C;&#x4E14;&#x8FD9;&#x4E24;&#x79CD;&#x4FEE;&#x9970;&#x4E5F;&#x90FD;&#x53EF;&#x4EE5;&#x4FEE;&#x9970;&#x4E8E;&#x5B57;&#x6BB5; foo &#x4E4B;&#x4E0A;&#x800C;&#x4E0D;&#x662F;&#x7C7B;&#x4E0A;&#xFF1A; Here, MyClass.foo can be accessed from the main-method because MyClass is annotated with @:allow(Main). This would also work with @:allow(Main.main) and both versions could alternatively be annotated to the &#xFB01;eld foo instead of the class MyClass: 1 2 3 4 5 6 7 8 9 10 class MyClass { @:allow(Main.main) static private var foo: Int ; } class Main { static public function main () { MyClass.foo; } } &#x800C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x8BBE;&#x8BA1;&#x4E0D;&#x5141;&#x8BB8;&#x88AB;&#x4FEE;&#x9970;&#x4E3A;&#x8FD9;&#x7C7B;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5F3A;&#x5236;&#x8BBF;&#x95EE;&#x6765;&#x8FDB;&#x884C;&#x8BBF;&#x95EE;&#xFF1A; If a type cannot be modi&#xFB01;ed to allow this kind of access, the accessing method may force access: 1 2 3 4 5 6 7 8 9 10 class MyClass { static private var foo: Int ; } class Main { @:access(MyClass.foo) static public function main () { MyClass.foo; } } &#x901A;&#x8FC7; @access(MyClass.foo) &#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x4FEE;&#x9970;&#x4F7F;&#x5F97; main &#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x8D8A;&#x8FC7; foo &#x5B57;&#x6BB5;&#x7684;&#x53EF;&#x89C1;&#x6027;&#x4FEE;&#x9970;&#x3002; The @:access(MyClass.foo) annotation effectively subverts the visibility of the foo &#xFB01;eld within the main-method. &#x5143;&#x6570;&#x636E;&#x7684;&#x9009;&#x62E9; &#x82B1;&#x7D6E;&#xFF1A;&#x5143;&#x6570;&#x636E;&#x7684;&#x9009;&#x62E9; &#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x7684;&#x7279;&#x6027;&#x4F7F;&#x7528; Haxe &#x7684;&#x5143;&#x6570;&#x636E;&#x63D0;&#x4F9B;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x901A;&#x8FC7;&#x989D;&#x5916;&#x7684;&#x8BED;&#x6CD5;&#x63D0;&#x4F9B;&#x3002;&#x6709;&#x5982;&#x4E0B;&#x51E0;&#x4E2A;&#x7406;&#x7531;&#xFF1A; &#x989D;&#x5916;&#x7684;&#x8BED;&#x6CD5;&#x901A;&#x5E38;&#x4F7F;&#x5F97;&#x8BED;&#x8A00;&#x89E3;&#x6790;&#x53D8;&#x5F97;&#x66F4;&#x52A0;&#x590D;&#x6742;&#xFF0C;&#x540C;&#x65F6;&#x4F1A;&#x5BFC;&#x81F4;&#x52A0;&#x5165;&#x592A;&#x591A;&#x5173;&#x952E;&#x5B57;&#x3002; &#x989D;&#x5916;&#x7684;&#x8BED;&#x6CD5;&#x9700;&#x8981;&#x53E6;&#x5916;&#x7684;&#x5B66;&#x4E60;&#x6210;&#x672C;&#x3002; &#x5143;&#x6570;&#x636E;&#x8BED;&#x6CD5;&#x8DB3;&#x591F;&#x7075;&#x6D3B;&#xFF0C;&#x4E14;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5B83;&#x6765;&#x5B9E;&#x73B0;&#x8FD9;&#x4E00;&#x9700;&#x8981;&#x3002; &#x5143;&#x6570;&#x636E;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;Haxe&#x7684;&#x5B8F;&#x8FDB;&#x884C; &#x8BBF;&#x95EE;/&#x751F;&#x6210;/&#x4FEE;&#x6539;&#x3002; &#x5F53;&#x7136;&#xFF0C;&#x4F7F;&#x7528;&#x5143;&#x6570;&#x636E;&#x8BED;&#x6CD5;&#x7684;&#x5F0A;&#x7AEF;&#x662F;&#xFF0C;&#x5982;&#x679C;&#x5143;&#x6570;&#x636E;&#x7684;&#x5173;&#x952E;&#x5B57;&#x62FC;&#x5199;&#x9519;&#x8BEF;&#xFF08;&#x4F8B;&#x5982;@:acesss&#xFF09;&#x6216;&#x8005;&#x7C7B;/&#x5305;&#x540D;&#x62FC;&#x5199;&#x9519;&#x8BEF;&#xFF0C;&#x5C06;&#x4E0D;&#x4F1A;&#x5F97;&#x5230;&#x9519;&#x8BEF;&#x62A5;&#x544A;&#x3002;&#x5C3D;&#x7BA1;&#x5982;&#x6B64;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x5C1D;&#x8BD5;&#x8BBF;&#x95EE;&#x4E00;&#x4E2A;&#x4E0D;&#x88AB;&#x5141;&#x8BB8;&#x8BBF;&#x95EE;&#x7684;&#x79C1;&#x6709;&#x5B57;&#x6BB5;&#x65F6;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x62A5;&#x9519;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x4E0D;&#x53EF;&#x80FD;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x88AB;&#x89C9;&#x5BDF;&#x7684;&#x9519;&#x8BEF;&#x3002; Trivia : On the choice of metadata The access control language feature uses the Haxe metadata syntax instead of additional language-speci&#xFB01;c syntax. There are several reasons for that: Additional syntax often adds complexity to the language parsing, and also adds (too) many keywords. Additional syntax requires additional learning by the language user,whereas metadata syntax is something that is already known. The metadata syntax is &#xFB02;exible enough to allow extension of this feature. The metadata can be accessed/generated/modi&#xFB01;ed by Haxe macros. Of course, the main drawback of using metadata syntax is that you get no error report in case you misspell either the metadata key (@:acesss for instance) or the class/package name. However, with this feature you will get an error when you try to access a private &#xFB01;eld that you are not allowed to, therefore there is no possibility for silent errors. Haxe 3.1.0 &#x4EE5;&#x540E; Since Haxe 3.1.0 &#x5982;&#x679C;&#x5141;&#x8BB8;&#x8BBF;&#x95EE;&#x4E00;&#x4E2A; &#x63A5;&#x53E3;&#xFF08;&#x7B2C;2.3.3&#x8282;&#xFF09;&#xFF0C;&#x5B83;&#x5EF6;&#x4F38;&#x5230;&#x6240;&#x6709;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x63A5;&#x53E3;&#x7684;&#x7C7B;&#xFF1A; If access is allowed to an interface(2.3.3),it extends to all classes implementing that interface: 1 2 3 4 5 6 7 8 9 10 11 12 class MyClass { @:allow(I) static private var foo: Int ; } interface I { } class Main implements I { static public function main () { MyClass.foo; } } &#x5BF9;&#x4E8E;&#x8BBF;&#x95EE;&#x6388;&#x6743;&#x7236;&#x7C7B;&#xFF0C;&#x4E5F;&#x662F;&#x540C;&#x6837;&#x7684;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4F1A;&#x5EF6;&#x4F38;&#x5230;&#x6240;&#x6709;&#x7684;&#x5B50;&#x7C7B;&#xFF1A; This is also true for access granted to parent classes, in which case it extends to all child classes. &#x7834;&#x574F;&#x6027;&#x529F;&#x80FD; &#x82B1;&#x7D6E; &#xFF1A;&#x7834;&#x574F;&#x6027;&#x529F;&#x80FD; &#x5B50;&#x7C7B;&#x548C;&#x5B9E;&#x73B0;&#x7C7B;&#x7684;&#x8BBF;&#x95EE;&#x6269;&#x5C55;&#x53EA;&#x652F;&#x6301;Haxe 3.0&#x4EE5;&#x540E;&#x3002;&#x5F53;&#x7F16;&#x5199;&#x8FD9;&#x672C;&#x624B;&#x518C;&#x65F6;&#x53D1;&#x73B0;&#x8FD9;&#x90E8;&#x5206;&#x7684;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#x5B9E;&#x73B0;&#x662F;&#x5BB9;&#x6613;&#x7F3A;&#x5931;&#x7684;&#x3002; [warning] Trivia : Broken feature Access extension to child classes and implementing classes was supposed to work in Haxe 3.0 and even documented accordingly. While writing this manual it was found that this part of the access control implementation was simply missing."},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html":{"title":"","path":"\\6.语言特性\\6.11.内联构造函数\\6.11.内联构造函数.html","body":"6.11.内联构造函数 Haxe 3.1.0 以后 Since Haxe 3.1.0 如果一个构造函数声明为 内联（第4.4.2），编译器在某些情况下会尝试优化它。有下面几个需要： If a constructor is declared to be inline (4.4.2), the compiler may try to optimize it away in certain situations. There are several requirements for this to work: 构造函数调用的结果必须直接分配到一个局部变量 构造函数字段的表达式必须只包含给它的字段的赋值。 The result of the constructor call must be directly assigned to a local variable. The expression of the constructor ﬁeld must only contain assignments to its ﬁelds. 下面的例子演示了内联构造函数： The following example demonstrates constructor inlining: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Point  public var x: Float ; public var y: Float ; public inline function new (x: Float , y: Float )  this .x = x; this .y = y;   class Main  static public function main ()  var pt = new Point ( 1.2 , 9.3 );   看一下JavaScript的输出，揭示了效果： A look at the JavaScript output reveals the effect: 1 2 3 4 Main.main = function ()  var pt_x = 1.2 ; var pt_y = 9.3 ; ;"},"6.语言特性/6.11.内联构造函数/6.11.内联构造函数.html#6-11-内联构造函数":{"title":"6.11.&#x5185;&#x8054;&#x6784;&#x9020;&#x51FD;&#x6570;","path":"\\6.语言特性\\6.11.内联构造函数\\6.11.内联构造函数.html#6-11-内联构造函数","body":"Haxe 3.1.0 &#x4EE5;&#x540E; Since Haxe 3.1.0 &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570;&#x58F0;&#x660E;&#x4E3A; &#x5185;&#x8054;&#xFF08;&#x7B2C;4.4.2&#xFF09;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x5728;&#x67D0;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#x4F1A;&#x5C1D;&#x8BD5;&#x4F18;&#x5316;&#x5B83;&#x3002;&#x6709;&#x4E0B;&#x9762;&#x51E0;&#x4E2A;&#x9700;&#x8981;&#xFF1A; If a constructor is declared to be inline (4.4.2), the compiler may try to optimize it away in certain situations. There are several requirements for this to work: &#x6784;&#x9020;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x7684;&#x7ED3;&#x679C;&#x5FC5;&#x987B;&#x76F4;&#x63A5;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x53D8;&#x91CF; &#x6784;&#x9020;&#x51FD;&#x6570;&#x5B57;&#x6BB5;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5FC5;&#x987B;&#x53EA;&#x5305;&#x542B;&#x7ED9;&#x5B83;&#x7684;&#x5B57;&#x6BB5;&#x7684;&#x8D4B;&#x503C;&#x3002; The result of the constructor call must be directly assigned to a local variable. The expression of the constructor &#xFB01;eld must only contain assignments to its &#xFB01;elds. &#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x6F14;&#x793A;&#x4E86;&#x5185;&#x8054;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF1A; The following example demonstrates constructor inlining: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Point { public var x: Float ; public var y: Float ; public inline function new (x: Float , y: Float ) { this .x = x; this .y = y; } } class Main { static public function main () { var pt = new Point ( 1.2 , 9.3 ); } } &#x770B;&#x4E00;&#x4E0B;JavaScript&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x63ED;&#x793A;&#x4E86;&#x6548;&#x679C;&#xFF1A; A look at the JavaScript output reveals the effect: 1 2 3 4 Main.main = function () { var pt_x = 1.2 ; var pt_y = 9.3 ; };"},"6.语言特性/6.2.Externs/6.2.Externs.html":{"title":"","path":"\\6.语言特性\\6.2.Externs\\6.2.Externs.html","body":"6.2.Externs Extren可以用一个类型安全的方式来描述目标语言特定的交互。它们像普通类一样定义，除了： Externs can be used to describe target-speciﬁc interaction in a type-safe manner. They are deﬁned like normal classes, except that class关键字被extern 关键字领先， 方法（第4.3节）没有表达式， 所有的参数和返回类型需要是显式的。 the class keyword is preceded by the extern keyword, methods (4.3) have no expressions and all argument and return types are explicit. 常见的例子在Haxe标准库（第10章），Math 类，摘录如下： A common example from the Haxe Standard Library (10) is the Math class, as an excerpt shows: 1 2 3 4 5 extern class Math  static var PI( default , null ) : Float ; static function floor (v: Float ): Int ;  我们看到，externs 既可以定义方法也可以定义变量（时尚，PI是声明为一个只读属性（第4.2节））。一旦这个信息对于编译器可用，它启用相应的字段访问，也被称为类型： We see that externs can deﬁne both methods and variables (actually, PI is declared as a readonly property (4.2)). Once this information is available to the compiler, it allows ﬁeld access accordingly and also knows the types: 1 2 3 4 5 6 class Main  static public function main ()  var pi = Math.floor(Math.PI); $type(pi); // Int   这这可以运行，因为floor方法返回类型声明为Int。 This works because the return type of method floor is declared to be Int. Haxe标准库带有许多外部类，对于Flash和JavaScript目标语言。它们使可以以类型安全的方式访问原生的APIs，当作设计高层APIs的工具。Externs也可以应用haxelib（第11章）中许多流行的原生库。 The Haxe Standard Library comes with many externs for the Flash and JavaScript target. They allow accessing the native APIs in a type-safe manner and are instrumental for designing higher-level APIs. There are also externs for many popular native libraries on haxelib (11). Flash，Java和C#目标语言允许通过命令行（第7章）直接包括原生的库。目标特定的细节在每个目标语言细节（第12章）等各自的章节。 The Flash, Java and C# targets allow direct inclusion of native libraries from command line (7). Target-speciﬁc details are explained in the respective sections of Target Details (Chapter 12). 一些目标语言如Python或者JavaScript可能需要产生附加的 import 代码，为原生模块加载一个extern 类。Haxe提供声明这样的依赖关系在各自的目标语言向细节（第12章）的方式。。 Some targets such as Python or JavaScript may require generating additional ”import” code that loads an extern class from a native module. Haxe provides ways to declare such dependencies also described in respective sections Target Details (Chapter 12). Haxe3.2.0以后剩余的参数和类型选择 Rest arguments and type choices Since Haxe 3.2.0 haxe.extern 包提供两种类型帮助映射原生的语义到Haxe： The haxe.extern package provides two types that help mapping native semantics to Haxe: Rest 这个类型可以被实用为一个最终的函数参数，来使传递一个额外的调用参数任意的数值到函数。类型参数可以被使用来限制这些参数为某个特定类型。 Rest : This type can be used as a ﬁnal function argument to allow passing an arbitrary number of additional call arguments. The type parameter can be used to constrain these arguments to a speciﬁc type. EitherType ：这个类型允许使用任何一个类型参数类型，因此表示了一个类型选择。它可以被嵌套来允许更多的类型。 EitherType : This type allows using either of its parameter types,thus representing a type choice. It can be nested to allow more than two different types. 我们在下面代码示例中演示了其用法： We demonstrate the usage in this code sample: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import haxe. extern .Rest; import haxe. extern .EitherType; extern class MyExtern  static function f1 (s: String , r: Rest  Int ): Void ; static function f2 (e: EitherType  Int , String ): Void ;  class Main  static function main ()  MyExtern.f1( \"foo\" , 1 , 2 , 3 ); // use 1, 2, 3 as rest argument MyExtern.f1( \"foo\" ); // no rest argument //MyExtern.f1(\"foo\", \"bar\"); // String should be Int MyExtern.f2( \"foo\" ); MyExtern.f2( 12 ); //MyExtern.f2(true); // Bool should be EitherTypeInt, String  "},"6.语言特性/6.2.Externs/6.2.Externs.html#6-2-Externs":{"title":"6.2.Externs","path":"\\6.语言特性\\6.2.Externs\\6.2.Externs.html#6-2-Externs","body":"Extren&#x53EF;&#x4EE5;&#x7528;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x5B89;&#x5168;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x63CF;&#x8FF0;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7279;&#x5B9A;&#x7684;&#x4EA4;&#x4E92;&#x3002;&#x5B83;&#x4EEC;&#x50CF;&#x666E;&#x901A;&#x7C7B;&#x4E00;&#x6837;&#x5B9A;&#x4E49;&#xFF0C;&#x9664;&#x4E86;&#xFF1A; Externs can be used to describe target-speci&#xFB01;c interaction in a type-safe manner. They are de&#xFB01;ned like normal classes, except that class&#x5173;&#x952E;&#x5B57;&#x88AB;extern &#x5173;&#x952E;&#x5B57;&#x9886;&#x5148;&#xFF0C; &#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3&#x8282;&#xFF09;&#x6CA1;&#x6709;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C; &#x6240;&#x6709;&#x7684;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x9700;&#x8981;&#x662F;&#x663E;&#x5F0F;&#x7684;&#x3002; the class keyword is preceded by the extern keyword, methods (4.3) have no expressions and all argument and return types are explicit. &#x5E38;&#x89C1;&#x7684;&#x4F8B;&#x5B50;&#x5728;Haxe&#x6807;&#x51C6;&#x5E93;&#xFF08;&#x7B2C;10&#x7AE0;&#xFF09;&#xFF0C;Math &#x7C7B;&#xFF0C;&#x6458;&#x5F55;&#x5982;&#x4E0B;&#xFF1A; A common example from the Haxe Standard Library (10) is the Math class, as an excerpt shows: 1 2 3 4 5 extern class Math { static var PI( default , null ) : Float ; static function floor (v: Float ): Int ; } &#x6211;&#x4EEC;&#x770B;&#x5230;&#xFF0C;externs &#x65E2;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x65B9;&#x6CD5;&#x4E5F;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x53D8;&#x91CF;&#xFF08;&#x65F6;&#x5C1A;&#xFF0C;PI&#x662F;&#x58F0;&#x660E;&#x4E3A;&#x4E00;&#x4E2A;&#x53EA;&#x8BFB;&#x5C5E;&#x6027;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#xFF09;&#x3002;&#x4E00;&#x65E6;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#x5BF9;&#x4E8E;&#x7F16;&#x8BD1;&#x5668;&#x53EF;&#x7528;&#xFF0C;&#x5B83;&#x542F;&#x7528;&#x76F8;&#x5E94;&#x7684;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#xFF0C;&#x4E5F;&#x88AB;&#x79F0;&#x4E3A;&#x7C7B;&#x578B;&#xFF1A; We see that externs can de&#xFB01;ne both methods and variables (actually, PI is declared as a readonly property (4.2)). Once this information is available to the compiler, it allows &#xFB01;eld access accordingly and also knows the types: 1 2 3 4 5 6 class Main { static public function main () { var pi = Math.floor(Math.PI); $type(pi); // Int } } &#x8FD9;&#x8FD9;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#xFF0C;&#x56E0;&#x4E3A;floor&#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x58F0;&#x660E;&#x4E3A;Int&#x3002; This works because the return type of method floor is declared to be Int. Haxe&#x6807;&#x51C6;&#x5E93;&#x5E26;&#x6709;&#x8BB8;&#x591A;&#x5916;&#x90E8;&#x7C7B;&#xFF0C;&#x5BF9;&#x4E8E;Flash&#x548C;JavaScript&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x3002;&#x5B83;&#x4EEC;&#x4F7F;&#x53EF;&#x4EE5;&#x4EE5;&#x7C7B;&#x578B;&#x5B89;&#x5168;&#x7684;&#x65B9;&#x5F0F;&#x8BBF;&#x95EE;&#x539F;&#x751F;&#x7684;APIs&#xFF0C;&#x5F53;&#x4F5C;&#x8BBE;&#x8BA1;&#x9AD8;&#x5C42;APIs&#x7684;&#x5DE5;&#x5177;&#x3002;Externs&#x4E5F;&#x53EF;&#x4EE5;&#x5E94;&#x7528;haxelib&#xFF08;&#x7B2C;11&#x7AE0;&#xFF09;&#x4E2D;&#x8BB8;&#x591A;&#x6D41;&#x884C;&#x7684;&#x539F;&#x751F;&#x5E93;&#x3002; The Haxe Standard Library comes with many externs for the Flash and JavaScript target. They allow accessing the native APIs in a type-safe manner and are instrumental for designing higher-level APIs. There are also externs for many popular native libraries on haxelib (11). Flash&#xFF0C;Java&#x548C;C#&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x5141;&#x8BB8;&#x901A;&#x8FC7;&#x547D;&#x4EE4;&#x884C;&#xFF08;&#x7B2C;7&#x7AE0;&#xFF09;&#x76F4;&#x63A5;&#x5305;&#x62EC;&#x539F;&#x751F;&#x7684;&#x5E93;&#x3002;&#x76EE;&#x6807;&#x7279;&#x5B9A;&#x7684;&#x7EC6;&#x8282;&#x5728;&#x6BCF;&#x4E2A;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7EC6;&#x8282;&#xFF08;&#x7B2C;12&#x7AE0;&#xFF09;&#x7B49;&#x5404;&#x81EA;&#x7684;&#x7AE0;&#x8282;&#x3002; The Flash, Java and C# targets allow direct inclusion of native libraries from command line (7). Target-speci&#xFB01;c details are explained in the respective sections of Target Details (Chapter 12). &#x4E00;&#x4E9B;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x5982;Python&#x6216;&#x8005;JavaScript&#x53EF;&#x80FD;&#x9700;&#x8981;&#x4EA7;&#x751F;&#x9644;&#x52A0;&#x7684; import &#x4EE3;&#x7801;&#xFF0C;&#x4E3A;&#x539F;&#x751F;&#x6A21;&#x5757;&#x52A0;&#x8F7D;&#x4E00;&#x4E2A;extern &#x7C7B;&#x3002;Haxe&#x63D0;&#x4F9B;&#x58F0;&#x660E;&#x8FD9;&#x6837;&#x7684;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x5728;&#x5404;&#x81EA;&#x7684;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x5411;&#x7EC6;&#x8282;&#xFF08;&#x7B2C;12&#x7AE0;&#xFF09;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x3002; Some targets such as Python or JavaScript may require generating additional &#x201D;import&#x201D; code that loads an extern class from a native module. Haxe provides ways to declare such dependencies also described in respective sections Target Details (Chapter 12). Haxe3.2.0&#x4EE5;&#x540E;&#x5269;&#x4F59;&#x7684;&#x53C2;&#x6570;&#x548C;&#x7C7B;&#x578B;&#x9009;&#x62E9; Rest arguments and type choices Since Haxe 3.2.0 haxe.extern &#x5305;&#x63D0;&#x4F9B;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x5E2E;&#x52A9;&#x6620;&#x5C04;&#x539F;&#x751F;&#x7684;&#x8BED;&#x4E49;&#x5230;Haxe&#xFF1A; The haxe.extern package provides two types that help mapping native semantics to Haxe: Rest &#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x5B9E;&#x7528;&#x4E3A;&#x4E00;&#x4E2A;&#x6700;&#x7EC8;&#x7684;&#x51FD;&#x6570;&#x53C2;&#x6570;&#xFF0C;&#x6765;&#x4F7F;&#x4F20;&#x9012;&#x4E00;&#x4E2A;&#x989D;&#x5916;&#x7684;&#x8C03;&#x7528;&#x53C2;&#x6570;&#x4EFB;&#x610F;&#x7684;&#x6570;&#x503C;&#x5230;&#x51FD;&#x6570;&#x3002;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x88AB;&#x4F7F;&#x7528;&#x6765;&#x9650;&#x5236;&#x8FD9;&#x4E9B;&#x53C2;&#x6570;&#x4E3A;&#x67D0;&#x4E2A;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#x3002; Rest : This type can be used as a &#xFB01;nal function argument to allow passing an arbitrary number of additional call arguments. The type parameter can be used to constrain these arguments to a speci&#xFB01;c type. EitherType &#xFF1A;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x5141;&#x8BB8;&#x4F7F;&#x7528;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#xFF0C;&#x56E0;&#x6B64;&#x8868;&#x793A;&#x4E86;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x9009;&#x62E9;&#x3002;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x5D4C;&#x5957;&#x6765;&#x5141;&#x8BB8;&#x66F4;&#x591A;&#x7684;&#x7C7B;&#x578B;&#x3002; EitherType : This type allows using either of its parameter types,thus representing a type choice. It can be nested to allow more than two different types. &#x6211;&#x4EEC;&#x5728;&#x4E0B;&#x9762;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x4E2D;&#x6F14;&#x793A;&#x4E86;&#x5176;&#x7528;&#x6CD5;&#xFF1A; We demonstrate the usage in this code sample: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import haxe. extern .Rest; import haxe. extern .EitherType; extern class MyExtern { static function f1 (s: String , r: Rest  Int ): Void ; static function f2 (e: EitherType  Int , String ): Void ; } class Main { static function main () { MyExtern.f1( foo , 1 , 2 , 3 ); // use 1, 2, 3 as rest argument MyExtern.f1( foo ); // no rest argument //MyExtern.f1(foo, bar); // String should be Int MyExtern.f2( foo ); MyExtern.f2( 12 ); //MyExtern.f2(true); // Bool should be EitherTypeInt, String } }"},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html":{"title":"","path":"\\6.语言特性\\6.3.静态扩展\\6.3.1.标准库中的静态扩展.html","body":"6.3.1.标准库中的静态扩展 在Haxe标准库中的一些类适用于静态扩展用法。下面的例子展示了StringTools的用法： Several classes in the Haxe Standard Library are suitable for static extension usage. The next example shows the usage of StringTools: 1 2 3 4 5 6 7 using StringTools; class Main  static public function main ()  \"adc\" .replace( \"d\" , \"b\" );   String本身并没有替换功能， using StringTools 静态扩展提供了一个。通常，JavaScript输出很好的显式了这个转换： While String does not have a replace functionality by itself, the using StringTools static extension provides one. As usual, the JavaScript output nicely shows the transformation: 1 2 3 Main.main = function ()  StringTools.replace( \"adc\" , \"d\" , \"b\" );  如下Haxe标准库中的类都是设计作为静态扩展使用： The following classes from the Haxe Standard Library are designed to be used as static extensions: StringTools ：提供字符串的扩展功能，例如替换和去除空格。 Lambda ：提供功能方法到可迭代对象。 haxe.EnumTools ：提供类型信息功能到enum和它们的实例。 haxe.macro.Tools ：为和宏有关的操作提供不同的扩展（查看 工具（第9.4节）） StringTools : Provides extended functionality on strings, such as replacing or trimming. Lambda : Provides functional methods on iterables. haxe.EnumTools : Provides type information functionality on enums and their instances. haxe.macro.Tools : Provides different extensions for working with macros (see Tools (Section 9.4)). 使用using 花絮 ：使用using 自从using关键字被添加到语言中，讨论某些 使用using的问题 或者 using的影响变得非常常见。在很多情况下的英语变得尴尬，所以手册的作者决定把这个使用实际的功能称呼：静态扩展。 [warning] Trivia : “using” using Since the using keyword was added to the language, it has been common to talk about certain problems with “using using” or the effect of “using using”. This makes for awkward English in many cases, so the author of this manual decided to call the feature by what it actually is: Static extension. 大意可能就是说，using是作为静态扩展的关键字存在。如果本节标题使用 using using 会造成混淆。"},"6.语言特性/6.3.静态扩展/6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展":{"title":"6.3.1.&#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684;&#x9759;&#x6001;&#x6269;&#x5C55;","path":"\\6.语言特性\\6.3.静态扩展\\6.3.1.标准库中的静态扩展.html#6-3-1-标准库中的静态扩展","body":"&#x5728;Haxe&#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x7C7B;&#x9002;&#x7528;&#x4E8E;&#x9759;&#x6001;&#x6269;&#x5C55;&#x7528;&#x6CD5;&#x3002;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x5C55;&#x793A;&#x4E86;StringTools&#x7684;&#x7528;&#x6CD5;&#xFF1A; Several classes in the Haxe Standard Library are suitable for static extension usage. The next example shows the usage of StringTools: 1 2 3 4 5 6 7 using StringTools; class Main { static public function main () { adc .replace( d , b ); } } String&#x672C;&#x8EAB;&#x5E76;&#x6CA1;&#x6709;&#x66FF;&#x6362;&#x529F;&#x80FD;&#xFF0C; using StringTools &#x9759;&#x6001;&#x6269;&#x5C55;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x3002;&#x901A;&#x5E38;&#xFF0C;JavaScript&#x8F93;&#x51FA;&#x5F88;&#x597D;&#x7684;&#x663E;&#x5F0F;&#x4E86;&#x8FD9;&#x4E2A;&#x8F6C;&#x6362;&#xFF1A; While String does not have a replace functionality by itself, the using StringTools static extension provides one. As usual, the JavaScript output nicely shows the transformation: 1 2 3 Main.main = function () { StringTools.replace( adc , d , b ); } &#x5982;&#x4E0B;Haxe&#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684;&#x7C7B;&#x90FD;&#x662F;&#x8BBE;&#x8BA1;&#x4F5C;&#x4E3A;&#x9759;&#x6001;&#x6269;&#x5C55;&#x4F7F;&#x7528;&#xFF1A; The following classes from the Haxe Standard Library are designed to be used as static extensions: StringTools &#xFF1A;&#x63D0;&#x4F9B;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x6269;&#x5C55;&#x529F;&#x80FD;&#xFF0C;&#x4F8B;&#x5982;&#x66FF;&#x6362;&#x548C;&#x53BB;&#x9664;&#x7A7A;&#x683C;&#x3002; Lambda &#xFF1A;&#x63D0;&#x4F9B;&#x529F;&#x80FD;&#x65B9;&#x6CD5;&#x5230;&#x53EF;&#x8FED;&#x4EE3;&#x5BF9;&#x8C61;&#x3002; haxe.EnumTools &#xFF1A;&#x63D0;&#x4F9B;&#x7C7B;&#x578B;&#x4FE1;&#x606F;&#x529F;&#x80FD;&#x5230;enum&#x548C;&#x5B83;&#x4EEC;&#x7684;&#x5B9E;&#x4F8B;&#x3002; haxe.macro.Tools &#xFF1A;&#x4E3A;&#x548C;&#x5B8F;&#x6709;&#x5173;&#x7684;&#x64CD;&#x4F5C;&#x63D0;&#x4F9B;&#x4E0D;&#x540C;&#x7684;&#x6269;&#x5C55;&#xFF08;&#x67E5;&#x770B; &#x5DE5;&#x5177;&#xFF08;&#x7B2C;9.4&#x8282;&#xFF09;&#xFF09; StringTools : Provides extended functionality on strings, such as replacing or trimming. Lambda : Provides functional methods on iterables. haxe.EnumTools : Provides type information functionality on enums and their instances. haxe.macro.Tools : Provides different extensions for working with macros (see Tools (Section 9.4)). &#x4F7F;&#x7528;using &#x82B1;&#x7D6E; &#xFF1A;&#x4F7F;&#x7528;using &#x81EA;&#x4ECE;using&#x5173;&#x952E;&#x5B57;&#x88AB;&#x6DFB;&#x52A0;&#x5230;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x8BA8;&#x8BBA;&#x67D0;&#x4E9B; &#x4F7F;&#x7528;using&#x7684;&#x95EE;&#x9898; &#x6216;&#x8005; using&#x7684;&#x5F71;&#x54CD;&#x53D8;&#x5F97;&#x975E;&#x5E38;&#x5E38;&#x89C1;&#x3002;&#x5728;&#x5F88;&#x591A;&#x60C5;&#x51B5;&#x4E0B;&#x7684;&#x82F1;&#x8BED;&#x53D8;&#x5F97;&#x5C34;&#x5C2C;&#xFF0C;&#x6240;&#x4EE5;&#x624B;&#x518C;&#x7684;&#x4F5C;&#x8005;&#x51B3;&#x5B9A;&#x628A;&#x8FD9;&#x4E2A;&#x4F7F;&#x7528;&#x5B9E;&#x9645;&#x7684;&#x529F;&#x80FD;&#x79F0;&#x547C;&#xFF1A;&#x9759;&#x6001;&#x6269;&#x5C55;&#x3002; [warning] Trivia : &#x201C;using&#x201D; using Since the using keyword was added to the language, it has been common to talk about certain problems with &#x201C;using using&#x201D; or the effect of &#x201C;using using&#x201D;. This makes for awkward English in many cases, so the author of this manual decided to call the feature by what it actually is: Static extension. &#x5927;&#x610F;&#x53EF;&#x80FD;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;using&#x662F;&#x4F5C;&#x4E3A;&#x9759;&#x6001;&#x6269;&#x5C55;&#x7684;&#x5173;&#x952E;&#x5B57;&#x5B58;&#x5728;&#x3002;&#x5982;&#x679C;&#x672C;&#x8282;&#x6807;&#x9898;&#x4F7F;&#x7528; using using &#x4F1A;&#x9020;&#x6210;&#x6DF7;&#x6DC6;&#x3002;"},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html":{"title":"","path":"\\6.语言特性\\6.3.静态扩展\\6.3.静态扩展.html","body":"6.3.静态扩展 定义 ：静态扩展 一个静态扩展允许伪装扩展已存在的类型而不用修改它们的源码。在Haxe中这是通过声明一个静态方法，第一个参数是要扩展的类型，然后带入定义类到上下文中就可以使用。 [warning] Deﬁnition: Static Extension A static extension allows pseudo-extending existing types without modifying their source. In Haxe this is achieved by declaring a static method with a ﬁrst argument of the extending type and then bringing the deﬁning class into context through using. 静态扩展是一个强大的工具，使得可以不用实际修改就对类型进行扩展。下面的示例展示用法： Static extensions can be a powerful tool which allows augmenting types without actually changing them. The following example demonstrates the usage: 1 2 3 4 5 6 7 8 9 10 11 12 13 using Main.IntExtender; class IntExtender  static public function triple (i: Int )  return i * 3 ;   class Main  static public function main ()  trace ( 12. triple());   显然，Int并没有原生提供一个 triple 方法，然而这个程序编译并输出预期的 36 。这是因为调用 12.triple() 是转换到 IntExtender.triple(12) 。这有三个要求： Clearly,Int does not natively provide a triple method,yet this program compiles and outputs 36 as expected. This is because the call to 12.triple() is transformed into IntExtender.triple(12). There are three requirements for this: 字面的值12和第一个参数都是已知的Int类型 IntExtender类通过 using Main.IntExtender 带入到上下文 Int本身没有 triple字段（如果它有，那个字段会优先于静态扩展） Both the literal 12 and the ﬁrst argument of triple are known to be of type Int. The class IntExtender is brought into context through using Main.IntExtender. Int does not havea triple ﬁeld by itself (if it had,that ﬁeld would take priority over the static extension). 静态扩展通常认为是语法糖，事实也是如此，但是值得注意的是，它们可以对代码可读性有一个戏剧性影响：替代嵌套的调用形式如f1(f2(f3(f4(x))))，使用链式调用形式如x.f4().f3().f2().f1() 。 Static extensions are usually considered syntactic sugar and indeed they are, but it is worth noting that they can have a dramatic effect on code readability: Instead of nested calls in the form of f1(f2(f3(f4(x)))), chained calls in the form of x.f4().f3().f2().f1() can be used. 遵守前面讲述过的解析顺序（第3.7.3节），多个使用的表达式从底部到头部检查，而在每个模块的类型以及在每个类型中的字段从头至尾检查。使用一个模块（而不是一个模块中的特定类型，查看模块和路径（第3.7节））作为静态扩展会把所有它的类型带入上下文中。 Following the rules previously described in Resolution Order(Section3.7.3),multiple using expressions are checked from bottom to top, with the types within each module as well as the ﬁelds within each type being checked from top to bottom. Using a module (as opposed to a speciﬁc type of a module, see Modules and Paths (Section 3.7)) as static extension brings all its types into context."},"6.语言特性/6.3.静态扩展/6.3.静态扩展.html#6-3-静态扩展":{"title":"6.3.&#x9759;&#x6001;&#x6269;&#x5C55;","path":"\\6.语言特性\\6.3.静态扩展\\6.3.静态扩展.html#6-3-静态扩展","body":"&#x5B9A;&#x4E49; &#xFF1A;&#x9759;&#x6001;&#x6269;&#x5C55; &#x4E00;&#x4E2A;&#x9759;&#x6001;&#x6269;&#x5C55;&#x5141;&#x8BB8;&#x4F2A;&#x88C5;&#x6269;&#x5C55;&#x5DF2;&#x5B58;&#x5728;&#x7684;&#x7C7B;&#x578B;&#x800C;&#x4E0D;&#x7528;&#x4FEE;&#x6539;&#x5B83;&#x4EEC;&#x7684;&#x6E90;&#x7801;&#x3002;&#x5728;Haxe&#x4E2D;&#x8FD9;&#x662F;&#x901A;&#x8FC7;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x662F;&#x8981;&#x6269;&#x5C55;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x7136;&#x540E;&#x5E26;&#x5165;&#x5B9A;&#x4E49;&#x7C7B;&#x5230;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x3002; [warning] De&#xFB01;nition: Static Extension A static extension allows pseudo-extending existing types without modifying their source. In Haxe this is achieved by declaring a static method with a &#xFB01;rst argument of the extending type and then bringing the de&#xFB01;ning class into context through using. &#x9759;&#x6001;&#x6269;&#x5C55;&#x662F;&#x4E00;&#x4E2A;&#x5F3A;&#x5927;&#x7684;&#x5DE5;&#x5177;&#xFF0C;&#x4F7F;&#x5F97;&#x53EF;&#x4EE5;&#x4E0D;&#x7528;&#x5B9E;&#x9645;&#x4FEE;&#x6539;&#x5C31;&#x5BF9;&#x7C7B;&#x578B;&#x8FDB;&#x884C;&#x6269;&#x5C55;&#x3002;&#x4E0B;&#x9762;&#x7684;&#x793A;&#x4F8B;&#x5C55;&#x793A;&#x7528;&#x6CD5;&#xFF1A; Static extensions can be a powerful tool which allows augmenting types without actually changing them. The following example demonstrates the usage: 1 2 3 4 5 6 7 8 9 10 11 12 13 using Main.IntExtender; class IntExtender { static public function triple (i: Int ) { return i * 3 ; } } class Main { static public function main () { trace ( 12. triple()); } } &#x663E;&#x7136;&#xFF0C;Int&#x5E76;&#x6CA1;&#x6709;&#x539F;&#x751F;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A; triple &#x65B9;&#x6CD5;&#xFF0C;&#x7136;&#x800C;&#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;&#x7F16;&#x8BD1;&#x5E76;&#x8F93;&#x51FA;&#x9884;&#x671F;&#x7684; 36 &#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x8C03;&#x7528; 12.triple() &#x662F;&#x8F6C;&#x6362;&#x5230; IntExtender.triple(12) &#x3002;&#x8FD9;&#x6709;&#x4E09;&#x4E2A;&#x8981;&#x6C42;&#xFF1A; Clearly,Int does not natively provide a triple method,yet this program compiles and outputs 36 as expected. This is because the call to 12.triple() is transformed into IntExtender.triple(12). There are three requirements for this: &#x5B57;&#x9762;&#x7684;&#x503C;12&#x548C;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x90FD;&#x662F;&#x5DF2;&#x77E5;&#x7684;Int&#x7C7B;&#x578B; IntExtender&#x7C7B;&#x901A;&#x8FC7; using Main.IntExtender &#x5E26;&#x5165;&#x5230;&#x4E0A;&#x4E0B;&#x6587; Int&#x672C;&#x8EAB;&#x6CA1;&#x6709; triple&#x5B57;&#x6BB5;&#xFF08;&#x5982;&#x679C;&#x5B83;&#x6709;&#xFF0C;&#x90A3;&#x4E2A;&#x5B57;&#x6BB5;&#x4F1A;&#x4F18;&#x5148;&#x4E8E;&#x9759;&#x6001;&#x6269;&#x5C55;&#xFF09; Both the literal 12 and the &#xFB01;rst argument of triple are known to be of type Int. The class IntExtender is brought into context through using Main.IntExtender. Int does not havea triple &#xFB01;eld by itself (if it had,that &#xFB01;eld would take priority over the static extension). &#x9759;&#x6001;&#x6269;&#x5C55;&#x901A;&#x5E38;&#x8BA4;&#x4E3A;&#x662F;&#x8BED;&#x6CD5;&#x7CD6;&#xFF0C;&#x4E8B;&#x5B9E;&#x4E5F;&#x662F;&#x5982;&#x6B64;&#xFF0C;&#x4F46;&#x662F;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x5BF9;&#x4EE3;&#x7801;&#x53EF;&#x8BFB;&#x6027;&#x6709;&#x4E00;&#x4E2A;&#x620F;&#x5267;&#x6027;&#x5F71;&#x54CD;&#xFF1A;&#x66FF;&#x4EE3;&#x5D4C;&#x5957;&#x7684;&#x8C03;&#x7528;&#x5F62;&#x5F0F;&#x5982;f1(f2(f3(f4(x))))&#xFF0C;&#x4F7F;&#x7528;&#x94FE;&#x5F0F;&#x8C03;&#x7528;&#x5F62;&#x5F0F;&#x5982;x.f4().f3().f2().f1() &#x3002; Static extensions are usually considered syntactic sugar and indeed they are, but it is worth noting that they can have a dramatic effect on code readability: Instead of nested calls in the form of f1(f2(f3(f4(x)))), chained calls in the form of x.f4().f3().f2().f1() can be used. &#x9075;&#x5B88;&#x524D;&#x9762;&#x8BB2;&#x8FF0;&#x8FC7;&#x7684;&#x89E3;&#x6790;&#x987A;&#x5E8F;&#xFF08;&#x7B2C;3.7.3&#x8282;&#xFF09;&#xFF0C;&#x591A;&#x4E2A;&#x4F7F;&#x7528;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x4ECE;&#x5E95;&#x90E8;&#x5230;&#x5934;&#x90E8;&#x68C0;&#x67E5;&#xFF0C;&#x800C;&#x5728;&#x6BCF;&#x4E2A;&#x6A21;&#x5757;&#x7684;&#x7C7B;&#x578B;&#x4EE5;&#x53CA;&#x5728;&#x6BCF;&#x4E2A;&#x7C7B;&#x578B;&#x4E2D;&#x7684;&#x5B57;&#x6BB5;&#x4ECE;&#x5934;&#x81F3;&#x5C3E;&#x68C0;&#x67E5;&#x3002;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#xFF08;&#x800C;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#xFF0C;&#x67E5;&#x770B;&#x6A21;&#x5757;&#x548C;&#x8DEF;&#x5F84;&#xFF08;&#x7B2C;3.7&#x8282;&#xFF09;&#xFF09;&#x4F5C;&#x4E3A;&#x9759;&#x6001;&#x6269;&#x5C55;&#x4F1A;&#x628A;&#x6240;&#x6709;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x5E26;&#x5165;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x3002; Following the rules previously described in Resolution Order(Section3.7.3),multiple using expressions are checked from bottom to top, with the types within each module as well as the &#xFB01;elds within each type being checked from top to bottom. Using a module (as opposed to a speci&#xFB01;c type of a module, see Modules and Paths (Section 3.7)) as static extension brings all its types into context."},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.10.穷尽性检查.html","body":"6.4.10.穷尽性检查 编译器确保没有被遗漏的可能的case： The compiler ensures that no possible cases are forgotten: 1 2 3 switch ( true )  case false :  // Unmatched patterns: true 匹配的类型 Bool 认可两个值 true 和false ，但是只有false被检查。 The matched type Bool admits two values true and false, but only false is checked."},"6.语言特性/6.4.模式匹配/6.4.10.穷尽性检查.html#6-4-10-穷尽性检查":{"title":"6.4.10.&#x7A77;&#x5C3D;&#x6027;&#x68C0;&#x67E5;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.10.穷尽性检查.html#6-4-10-穷尽性检查","body":"&#x7F16;&#x8BD1;&#x5668;&#x786E;&#x4FDD;&#x6CA1;&#x6709;&#x88AB;&#x9057;&#x6F0F;&#x7684;&#x53EF;&#x80FD;&#x7684;case&#xFF1A; The compiler ensures that no possible cases are forgotten: 1 2 3 switch ( true ) { case false : } // Unmatched patterns: true &#x5339;&#x914D;&#x7684;&#x7C7B;&#x578B; Bool &#x8BA4;&#x53EF;&#x4E24;&#x4E2A;&#x503C; true &#x548C;false &#xFF0C;&#x4F46;&#x662F;&#x53EA;&#x6709;false&#x88AB;&#x68C0;&#x67E5;&#x3002; The matched type Bool admits two values true and false, but only false is checked."},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.1.介绍.html","body":"6.4.1.介绍 模式匹配是根据一个匹配的指定值进行分支处理，尽可能深的模式。在Haxe中，所有的模式匹配通过 switch表达式（第5.17节）处理，在其中通过个体的case语句表示模式。这里我们将探索不同的模式的语法，使用这个数据结构作为运行例子： Pattern matching is the process of branching depending on a value matching given, possibly deep patterns. In Haxe, all pattern matching is done within a switch expression (5.17) where the individual case expressions represent the patterns. Here we will explore the syntax for different patterns using this data structure as running example: 1 2 3 4 enum Tree  T   Leaf(v: T ); Node(l: Tree T, r: Tree T);  一些模式匹配器基础包括: Some pattern matcher basics include: 模式总是从头至尾匹配 最上面的匹配了输入的值的模式，它的表达式将被执行 一个 _ 匹配任何，所以 case _: 是等同于 default: 的 Patterns will always be matched from top to bottom. The topmost pattern that matches the input value has its expression executed. A _ pattern matches anything, so case _: is equal to default:"},"6.语言特性/6.4.模式匹配/6.4.1.介绍.html#6-4-1-介绍":{"title":"6.4.1.&#x4ECB;&#x7ECD;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.1.介绍.html#6-4-1-介绍","body":"&#x6A21;&#x5F0F;&#x5339;&#x914D;&#x662F;&#x6839;&#x636E;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x6307;&#x5B9A;&#x503C;&#x8FDB;&#x884C;&#x5206;&#x652F;&#x5904;&#x7406;&#xFF0C;&#x5C3D;&#x53EF;&#x80FD;&#x6DF1;&#x7684;&#x6A21;&#x5F0F;&#x3002;&#x5728;Haxe&#x4E2D;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x6A21;&#x5F0F;&#x5339;&#x914D;&#x901A;&#x8FC7; switch&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5.17&#x8282;&#xFF09;&#x5904;&#x7406;&#xFF0C;&#x5728;&#x5176;&#x4E2D;&#x901A;&#x8FC7;&#x4E2A;&#x4F53;&#x7684;case&#x8BED;&#x53E5;&#x8868;&#x793A;&#x6A21;&#x5F0F;&#x3002;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x5C06;&#x63A2;&#x7D22;&#x4E0D;&#x540C;&#x7684;&#x6A21;&#x5F0F;&#x7684;&#x8BED;&#x6CD5;&#xFF0C;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x4F5C;&#x4E3A;&#x8FD0;&#x884C;&#x4F8B;&#x5B50;&#xFF1A; Pattern matching is the process of branching depending on a value matching given, possibly deep patterns. In Haxe, all pattern matching is done within a switch expression (5.17) where the individual case expressions represent the patterns. Here we will explore the syntax for different patterns using this data structure as running example: 1 2 3 4 enum Tree  T  { Leaf(v: T ); Node(l: Tree T, r: Tree T); } &#x4E00;&#x4E9B;&#x6A21;&#x5F0F;&#x5339;&#x914D;&#x5668;&#x57FA;&#x7840;&#x5305;&#x62EC;: Some pattern matcher basics include: &#x6A21;&#x5F0F;&#x603B;&#x662F;&#x4ECE;&#x5934;&#x81F3;&#x5C3E;&#x5339;&#x914D; &#x6700;&#x4E0A;&#x9762;&#x7684;&#x5339;&#x914D;&#x4E86;&#x8F93;&#x5165;&#x7684;&#x503C;&#x7684;&#x6A21;&#x5F0F;&#xFF0C;&#x5B83;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5C06;&#x88AB;&#x6267;&#x884C; &#x4E00;&#x4E2A; _ &#x5339;&#x914D;&#x4EFB;&#x4F55;&#xFF0C;&#x6240;&#x4EE5; case _: &#x662F;&#x7B49;&#x540C;&#x4E8E; default: &#x7684; Patterns will always be matched from top to bottom. The topmost pattern that matches the input value has its expression executed. A _ pattern matches anything, so case _: is equal to default:"},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.11.无效的模式检查.html","body":"6.4.11.无效的模式检查 以类似的方式，编译器检测不会匹配输入的值的模式： In a similar fashion, the compiler detects patterns which will never match the input value: 1 2 3 4 5 6 switch (Leaf( \"foo\" ))  case Leaf( _ ) | Leaf( \"foo\" ): // This pattern is unused case Node(l,r): case _ : // This pattern is unused "},"6.语言特性/6.4.模式匹配/6.4.11.无效的模式检查.html#6-4-11-无效的模式检查":{"title":"6.4.11.&#x65E0;&#x6548;&#x7684;&#x6A21;&#x5F0F;&#x68C0;&#x67E5;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.11.无效的模式检查.html#6-4-11-无效的模式检查","body":"&#x4EE5;&#x7C7B;&#x4F3C;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x68C0;&#x6D4B;&#x4E0D;&#x4F1A;&#x5339;&#x914D;&#x8F93;&#x5165;&#x7684;&#x503C;&#x7684;&#x6A21;&#x5F0F;&#xFF1A; In a similar fashion, the compiler detects patterns which will never match the input value: 1 2 3 4 5 6 switch (Leaf( foo )) { case Leaf( _ ) | Leaf( foo ): // This pattern is unused case Node(l,r): case _ : // This pattern is unused }"},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.2.枚举匹配.html","body":"6.4.2.枚举匹配 枚举可以以一个自然的方式通过它们的构造器进行匹配： Enums can be matched by their constructors in a natural way: 1 2 3 4 5 6 7 8 9 10 11 12 13 var myTree = Node(Leaf( \"foo\" ), Node(Leaf( \"bar\" ), Leaf( \"foobar\" ))); var match = switch (myTree)  // matches any Leaf case Leaf( _ ): \" 0 \"; // matches any Node that has r = Leaf case Node(_, Leaf(_)): \" 1 \"; // matches any Node that has has // r = another Node, which has // l = Leaf(\" bar \") case Node(_, Node(Leaf(\" bar \"), _)): \" 2 \"; // matches anything 12 case _: \" 3 \";  trace(match); // 2 模式匹配器会检查每个 case ，从头至尾，采用第一个匹配输入值的 case 。下面关于case规则的说明解释帮助你理解该过程： The pattern matcher will check each case from top to bottom and pick the ﬁrst one that matches the input value. The following manual interpretation of each case rule helps understanding the process: case Leaf( )：匹配失败，因为 myTree 是一个i额 Node case Node( ,Leaf( ))：匹配失败，因为myTree右侧的子树不是一个Leaf，而是另一个 Node **case Node( ,Node(Leaf(“bar”),_)) ：匹配成功 case _**：不被检查，因为前一行已经匹配成功 case Leaf(_) : matching fails because myTree is a Node case Node( , Leaf( )) : matching fails because the right sub-tree of myTree is not a Leaf, but another Node case Node(_, Node(Leaf(“bar”), _)) : matching succeeds case _ : this is not checked here because the previous line matched"},"6.语言特性/6.4.模式匹配/6.4.2.枚举匹配.html#6-4-2-枚举匹配":{"title":"6.4.2.&#x679A;&#x4E3E;&#x5339;&#x914D;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.2.枚举匹配.html#6-4-2-枚举匹配","body":"&#x679A;&#x4E3E;&#x53EF;&#x4EE5;&#x4EE5;&#x4E00;&#x4E2A;&#x81EA;&#x7136;&#x7684;&#x65B9;&#x5F0F;&#x901A;&#x8FC7;&#x5B83;&#x4EEC;&#x7684;&#x6784;&#x9020;&#x5668;&#x8FDB;&#x884C;&#x5339;&#x914D;&#xFF1A; Enums can be matched by their constructors in a natural way: 1 2 3 4 5 6 7 8 9 10 11 12 13 var myTree = Node(Leaf( foo ), Node(Leaf( bar ), Leaf( foobar ))); var match = switch (myTree) { // matches any Leaf case Leaf( _ ):  0 ; // matches any Node that has r = Leaf case Node(_, Leaf(_)):  1 ; // matches any Node that has has // r = another Node, which has // l = Leaf( bar ) case Node(_, Node(Leaf( bar ), _)):  2 ; // matches anything 12 case _:  3 ; } trace(match); // 2 &#x6A21;&#x5F0F;&#x5339;&#x914D;&#x5668;&#x4F1A;&#x68C0;&#x67E5;&#x6BCF;&#x4E2A; case &#xFF0C;&#x4ECE;&#x5934;&#x81F3;&#x5C3E;&#xFF0C;&#x91C7;&#x7528;&#x7B2C;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x8F93;&#x5165;&#x503C;&#x7684; case &#x3002;&#x4E0B;&#x9762;&#x5173;&#x4E8E;case&#x89C4;&#x5219;&#x7684;&#x8BF4;&#x660E;&#x89E3;&#x91CA;&#x5E2E;&#x52A9;&#x4F60;&#x7406;&#x89E3;&#x8BE5;&#x8FC7;&#x7A0B;&#xFF1A; The pattern matcher will check each case from top to bottom and pick the &#xFB01;rst one that matches the input value. The following manual interpretation of each case rule helps understanding the process: case Leaf( )&#xFF1A;&#x5339;&#x914D;&#x5931;&#x8D25;&#xFF0C;&#x56E0;&#x4E3A; myTree &#x662F;&#x4E00;&#x4E2A;i&#x989D; Node case Node( ,Leaf( ))&#xFF1A;&#x5339;&#x914D;&#x5931;&#x8D25;&#xFF0C;&#x56E0;&#x4E3A;myTree&#x53F3;&#x4FA7;&#x7684;&#x5B50;&#x6811;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;Leaf&#xFF0C;&#x800C;&#x662F;&#x53E6;&#x4E00;&#x4E2A; Node **case Node( ,Node(Leaf(&#x201C;bar&#x201D;),_)) &#xFF1A;&#x5339;&#x914D;&#x6210;&#x529F; case _**&#xFF1A;&#x4E0D;&#x88AB;&#x68C0;&#x67E5;&#xFF0C;&#x56E0;&#x4E3A;&#x524D;&#x4E00;&#x884C;&#x5DF2;&#x7ECF;&#x5339;&#x914D;&#x6210;&#x529F; case Leaf(_) : matching fails because myTree is a Node case Node( , Leaf( )) : matching fails because the right sub-tree of myTree is not a Leaf, but another Node case Node(_, Node(Leaf(&#x201C;bar&#x201D;), _)) : matching succeeds case _ : this is not checked here because the previous line matched"},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.3.变量捕获.html","body":"6.4.3.变量捕获 可以捕获一个子模式的任何值，通过匹配它对应的一个标识符： It is possible to catch any value of a sub-pattern by matching it against an identiﬁer: 1 2 3 4 5 6 7 var myTree = Node(Leaf( \"foo\" ), Node(Leaf( \"bar\" ), Leaf( \"foobar\" ))); var name = switch (myTree)  case Leaf(s): s ; case Node(Leaf(s), _ ): s ; case _ : \"none \";  trace(name); // foo 这会返回如下之一： This would return one of the following: 如果 myTree 是一个 Leaf，它的name 被返回 如果myTree 是一个 Node，并且左侧的子树是一个 Leaf，它的name被返回（这应用在这里，返回“foo”） 否则 “none”被返回 If myTree is a Leaf, its name is returned. If myTree is a Node whose left sub-tree is a Leaf,its name is returned (this will apply here, returning “foo”). Otherwise “none” is returned. 还可以使用 = 来捕获值，这更进一步的匹配： It is also possible to use = to capture values which are further matched: 1 2 3 4 5 var node = switch (myTree)  case Node(leafNode = Leaf( \"foo\" ), _ ): leafNode ; case x: x ;  trace (node); // Leaf(foo) 这里 ，如果输入匹配 leafNode 是绑定到 Leaf(“foo”) 。在所有其他情况，myTree 本身是被返回：case x 工作方式类似于 case _ ，它匹配任何，但是使用一个i额标识名称如 x ，它也会绑定匹配的值到这个变量。 Here, leafNode is bound to Leaf(“foo”) if the input matches that. In all other cases, myTree itself is returned: case x works similar to case _ in that it matches anything, but with an identiﬁer name like x it also binds the matched value to that variable."},"6.语言特性/6.4.模式匹配/6.4.3.变量捕获.html#6-4-3-变量捕获":{"title":"6.4.3.&#x53D8;&#x91CF;&#x6355;&#x83B7;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.3.变量捕获.html#6-4-3-变量捕获","body":"&#x53EF;&#x4EE5;&#x6355;&#x83B7;&#x4E00;&#x4E2A;&#x5B50;&#x6A21;&#x5F0F;&#x7684;&#x4EFB;&#x4F55;&#x503C;&#xFF0C;&#x901A;&#x8FC7;&#x5339;&#x914D;&#x5B83;&#x5BF9;&#x5E94;&#x7684;&#x4E00;&#x4E2A;&#x6807;&#x8BC6;&#x7B26;&#xFF1A; It is possible to catch any value of a sub-pattern by matching it against an identi&#xFB01;er: 1 2 3 4 5 6 7 var myTree = Node(Leaf( foo ), Node(Leaf( bar ), Leaf( foobar ))); var name = switch (myTree) { case Leaf(s): s ; case Node(Leaf(s), _ ): s ; case _ : none ; } trace(name); // foo &#x8FD9;&#x4F1A;&#x8FD4;&#x56DE;&#x5982;&#x4E0B;&#x4E4B;&#x4E00;&#xFF1A; This would return one of the following: &#x5982;&#x679C; myTree &#x662F;&#x4E00;&#x4E2A; Leaf&#xFF0C;&#x5B83;&#x7684;name &#x88AB;&#x8FD4;&#x56DE; &#x5982;&#x679C;myTree &#x662F;&#x4E00;&#x4E2A; Node&#xFF0C;&#x5E76;&#x4E14;&#x5DE6;&#x4FA7;&#x7684;&#x5B50;&#x6811;&#x662F;&#x4E00;&#x4E2A; Leaf&#xFF0C;&#x5B83;&#x7684;name&#x88AB;&#x8FD4;&#x56DE;&#xFF08;&#x8FD9;&#x5E94;&#x7528;&#x5728;&#x8FD9;&#x91CC;&#xFF0C;&#x8FD4;&#x56DE;&#x201C;foo&#x201D;&#xFF09; &#x5426;&#x5219; &#x201C;none&#x201D;&#x88AB;&#x8FD4;&#x56DE; If myTree is a Leaf, its name is returned. If myTree is a Node whose left sub-tree is a Leaf,its name is returned (this will apply here, returning &#x201C;foo&#x201D;). Otherwise &#x201C;none&#x201D; is returned. &#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; = &#x6765;&#x6355;&#x83B7;&#x503C;&#xFF0C;&#x8FD9;&#x66F4;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x5339;&#x914D;&#xFF1A; It is also possible to use = to capture values which are further matched: 1 2 3 4 5 var node = switch (myTree) { case Node(leafNode = Leaf( foo ), _ ): leafNode ; case x: x ; } trace (node); // Leaf(foo) &#x8FD9;&#x91CC; &#xFF0C;&#x5982;&#x679C;&#x8F93;&#x5165;&#x5339;&#x914D; leafNode &#x662F;&#x7ED1;&#x5B9A;&#x5230; Leaf(&#x201C;foo&#x201D;) &#x3002;&#x5728;&#x6240;&#x6709;&#x5176;&#x4ED6;&#x60C5;&#x51B5;&#xFF0C;myTree &#x672C;&#x8EAB;&#x662F;&#x88AB;&#x8FD4;&#x56DE;&#xFF1A;case x &#x5DE5;&#x4F5C;&#x65B9;&#x5F0F;&#x7C7B;&#x4F3C;&#x4E8E; case _ &#xFF0C;&#x5B83;&#x5339;&#x914D;&#x4EFB;&#x4F55;&#xFF0C;&#x4F46;&#x662F;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;i&#x989D;&#x6807;&#x8BC6;&#x540D;&#x79F0;&#x5982; x &#xFF0C;&#x5B83;&#x4E5F;&#x4F1A;&#x7ED1;&#x5B9A;&#x5339;&#x914D;&#x7684;&#x503C;&#x5230;&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x3002; Here, leafNode is bound to Leaf(&#x201C;foo&#x201D;) if the input matches that. In all other cases, myTree itself is returned: case x works similar to case _ in that it matches anything, but with an identi&#xFB01;er name like x it also binds the matched value to that variable."},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.4.结构匹配.html","body":"6.4.4.结构匹配 还可以根据匿名结构的字段和实例进行匹配： It is also possible to match against the ﬁelds of anonymous structures and instances: 1 2 3 4 5 6 7 8 9 10 11 12 13 var myStructure =  name: \"haxe \", rating: \" awesome \" ; var value = switch(myStructure)  case  name: \" haxe \", rating: \" poor \" : throw false; case  rating: \" awesome \", name: n : n; case _: \" no awesome language found \";  trace(value); // haxe 在第二种情况，如果评定匹配 “awesome”我们绑定匹配的 name 字段 为标识符 n，。当然这个结构也可以被放入前一个例子中的 Tree 来联合结构和枚举匹配。 In the second case we bind the matched name ﬁeld to identiﬁer n if rating matches “awesome”. Of course this structure could also be put into the Tree from the previous example to combine structure and enum matching. 类实例的一个限制是，不能匹配它们父类的字段。 A limitation with regards to class instances is that you cannot match against ﬁelds of their parent class."},"6.语言特性/6.4.模式匹配/6.4.4.结构匹配.html#6-4-4-结构匹配":{"title":"6.4.4.&#x7ED3;&#x6784;&#x5339;&#x914D;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.4.结构匹配.html#6-4-4-结构匹配","body":"&#x8FD8;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x533F;&#x540D;&#x7ED3;&#x6784;&#x7684;&#x5B57;&#x6BB5;&#x548C;&#x5B9E;&#x4F8B;&#x8FDB;&#x884C;&#x5339;&#x914D;&#xFF1A; It is also possible to match against the &#xFB01;elds of anonymous structures and instances: 1 2 3 4 5 6 7 8 9 10 11 12 13 var myStructure = { name: haxe , rating:  awesome  }; var value = switch(myStructure) { case { name:  haxe , rating:  poor  }: throw false; case { rating:  awesome , name: n }: n; case _:  no awesome language found ; } trace(value); // haxe &#x5728;&#x7B2C;&#x4E8C;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x5982;&#x679C;&#x8BC4;&#x5B9A;&#x5339;&#x914D; &#x201C;awesome&#x201D;&#x6211;&#x4EEC;&#x7ED1;&#x5B9A;&#x5339;&#x914D;&#x7684; name &#x5B57;&#x6BB5; &#x4E3A;&#x6807;&#x8BC6;&#x7B26; n&#xFF0C;&#x3002;&#x5F53;&#x7136;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x653E;&#x5165;&#x524D;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x4E2D;&#x7684; Tree &#x6765;&#x8054;&#x5408;&#x7ED3;&#x6784;&#x548C;&#x679A;&#x4E3E;&#x5339;&#x914D;&#x3002; In the second case we bind the matched name &#xFB01;eld to identi&#xFB01;er n if rating matches &#x201C;awesome&#x201D;. Of course this structure could also be put into the Tree from the previous example to combine structure and enum matching. &#x7C7B;&#x5B9E;&#x4F8B;&#x7684;&#x4E00;&#x4E2A;&#x9650;&#x5236;&#x662F;&#xFF0C;&#x4E0D;&#x80FD;&#x5339;&#x914D;&#x5B83;&#x4EEC;&#x7236;&#x7C7B;&#x7684;&#x5B57;&#x6BB5;&#x3002; A limitation with regards to class instances is that you cannot match against &#xFB01;elds of their parent class."},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.7.守护(Guard).html","body":"6.4.7.守护(Guard) 也可以更进一步的限制模式，通过使用 case ... if(condition): 语法： It is also possible to further restrict patterns with the case … if(condition): syntax: 1 2 3 4 5 6 7 8 9 var myArray = [ 7 , 6 ]; var s = switch (myArray)  case [a, b] if (b  a): b + \"\" +a; case [a, b]: b + \"=\" +a; case _ : \"found something else \";  trace(s); // 6=7 第一个情况有一个附加的守护条件 if(ba) 。只有条件满足case才被采用，否则匹配继续下一个case 。 The ﬁrst case has an additional guard condition if (b  a). It will only be selected if that condition holds, otherwise matching continues with the next case."},"6.语言特性/6.4.模式匹配/6.4.7.守护(Guard).html#6-4-7-守护-Guard":{"title":"6.4.7.&#x5B88;&#x62A4;(Guard)","path":"\\6.语言特性\\6.4.模式匹配\\6.4.7.守护(Guard).html#6-4-7-守护-Guard","body":"&#x4E5F;&#x53EF;&#x4EE5;&#x66F4;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x9650;&#x5236;&#x6A21;&#x5F0F;&#xFF0C;&#x901A;&#x8FC7;&#x4F7F;&#x7528; case ... if(condition): &#x8BED;&#x6CD5;&#xFF1A; It is also possible to further restrict patterns with the case &#x2026; if(condition): syntax: 1 2 3 4 5 6 7 8 9 var myArray = [ 7 , 6 ]; var s = switch (myArray) { case [a, b] if (b  a): b +  +a; case [a, b]: b + = +a; case _ : found something else ; } trace(s); // 6=7 &#x7B2C;&#x4E00;&#x4E2A;&#x60C5;&#x51B5;&#x6709;&#x4E00;&#x4E2A;&#x9644;&#x52A0;&#x7684;&#x5B88;&#x62A4;&#x6761;&#x4EF6; if(ba) &#x3002;&#x53EA;&#x6709;&#x6761;&#x4EF6;&#x6EE1;&#x8DB3;case&#x624D;&#x88AB;&#x91C7;&#x7528;&#xFF0C;&#x5426;&#x5219;&#x5339;&#x914D;&#x7EE7;&#x7EED;&#x4E0B;&#x4E00;&#x4E2A;case &#x3002; The &#xFB01;rst case has an additional guard condition if (b  a). It will only be selected if that condition holds, otherwise matching continues with the next case."},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.5.数组匹配.html","body":"6.4.5.数组匹配 数组可以使用固定的长度匹配： Arrays can be matched on ﬁxed length: 1 2 3 4 5 6 7 8 9 var myArray = [ 1 , 6 ]; var match = switch (myArray)  case [ 2 , _ ]: \" 0 \"; case [_, 6]: \" 1 \"; case []: \" 2 \"; case [_, _, _]: \" 3 \"; case _: \" 4 \";  trace(match); // 1 这会输出1，因为 array[1]匹配6，array[0]允许是任何内容。 This will trace 1 because array[1] matches 6, and array[0] is allowed to be anything."},"6.语言特性/6.4.模式匹配/6.4.5.数组匹配.html#6-4-5-数组匹配":{"title":"6.4.5.&#x6570;&#x7EC4;&#x5339;&#x914D;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.5.数组匹配.html#6-4-5-数组匹配","body":"&#x6570;&#x7EC4;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x56FA;&#x5B9A;&#x7684;&#x957F;&#x5EA6;&#x5339;&#x914D;&#xFF1A; Arrays can be matched on &#xFB01;xed length: 1 2 3 4 5 6 7 8 9 var myArray = [ 1 , 6 ]; var match = switch (myArray) { case [ 2 , _ ]:  0 ; case [_, 6]:  1 ; case []:  2 ; case [_, _, _]:  3 ; case _:  4 ; } trace(match); // 1 &#x8FD9;&#x4F1A;&#x8F93;&#x51FA;1&#xFF0C;&#x56E0;&#x4E3A; array[1]&#x5339;&#x914D;6&#xFF0C;array[0]&#x5141;&#x8BB8;&#x662F;&#x4EFB;&#x4F55;&#x5185;&#x5BB9;&#x3002; This will trace 1 because array[1] matches 6, and array[0] is allowed to be anything."},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.8.多个值的匹配.html","body":"6.4.8.多个值的匹配 数组语法可以用来匹配多个值： Array syntax can be used to match on multiple values: 1 2 3 4 5 6 var s = switch [ 1 , false , \"foo\" ]  case [ 1 , false , \"bar\" ]: \" 0 \"; case [_, true, _]: \" 1 \"; case [_, false, _]: \" 2 \";  trace(s); // 2 这和数组匹配非常相似，但是有以下不同： This is quite similar to usual array matching, but there are differences: 元素的量是固定的，所以不接受不同长度的数组 不能捕获switch的值到一个变量，如 case x 是不被允许的（case _ 也是）。 The number of elements is ﬁxed, so patterns of different array length will not be accepted. It is not possible to capture the switch value in a variable,i.e. case x isnotallowed(case _ still is)."},"6.语言特性/6.4.模式匹配/6.4.8.多个值的匹配.html#6-4-8-多个值的匹配":{"title":"6.4.8.&#x591A;&#x4E2A;&#x503C;&#x7684;&#x5339;&#x914D;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.8.多个值的匹配.html#6-4-8-多个值的匹配","body":"&#x6570;&#x7EC4;&#x8BED;&#x6CD5;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x5339;&#x914D;&#x591A;&#x4E2A;&#x503C;&#xFF1A; Array syntax can be used to match on multiple values: 1 2 3 4 5 6 var s = switch [ 1 , false , foo ] { case [ 1 , false , bar ]:  0 ; case [_, true, _]:  1 ; case [_, false, _]:  2 ; } trace(s); // 2 &#x8FD9;&#x548C;&#x6570;&#x7EC4;&#x5339;&#x914D;&#x975E;&#x5E38;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x4EE5;&#x4E0B;&#x4E0D;&#x540C;&#xFF1A; This is quite similar to usual array matching, but there are differences: &#x5143;&#x7D20;&#x7684;&#x91CF;&#x662F;&#x56FA;&#x5B9A;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x63A5;&#x53D7;&#x4E0D;&#x540C;&#x957F;&#x5EA6;&#x7684;&#x6570;&#x7EC4; &#x4E0D;&#x80FD;&#x6355;&#x83B7;switch&#x7684;&#x503C;&#x5230;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x5982; case x &#x662F;&#x4E0D;&#x88AB;&#x5141;&#x8BB8;&#x7684;&#xFF08;case _ &#x4E5F;&#x662F;&#xFF09;&#x3002; The number of elements is &#xFB01;xed, so patterns of different array length will not be accepted. It is not possible to capture the switch value in a variable,i.e. case x isnotallowed(case _ still is)."},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.6.Or 模式.html","body":"6.4.6.Or 模式 | 操作符用来在模式中描述多个接受的模式： The | operator can be used anywhere within patterns to describe multiple accepted patterns: 1 2 3 4 5 6 var match = switch ( 7 )  case 4 | 1 : \" 0 \"; case 6 | 7: \" 1 \"; case _: \" 2 \";  trace(match); // 1 在一个 or 模式中，如果有一个捕获的变量，它必须也出现在它的子模式中。 If there is a captured variable in an or-pattern, it must appear in both its sub-patterns."},"6.语言特性/6.4.模式匹配/6.4.6.Or 模式.html#6-4-6-Or-模式":{"title":"6.4.6.Or &#x6A21;&#x5F0F;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.6.Or 模式.html#6-4-6-Or-模式","body":"| &#x64CD;&#x4F5C;&#x7B26;&#x7528;&#x6765;&#x5728;&#x6A21;&#x5F0F;&#x4E2D;&#x63CF;&#x8FF0;&#x591A;&#x4E2A;&#x63A5;&#x53D7;&#x7684;&#x6A21;&#x5F0F;&#xFF1A; The | operator can be used anywhere within patterns to describe multiple accepted patterns: 1 2 3 4 5 6 var match = switch ( 7 ) { case 4 | 1 :  0 ; case 6 | 7:  1 ; case _:  2 ; } trace(match); // 1 &#x5728;&#x4E00;&#x4E2A; or &#x6A21;&#x5F0F;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x6355;&#x83B7;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x5B83;&#x5FC5;&#x987B;&#x4E5F;&#x51FA;&#x73B0;&#x5728;&#x5B83;&#x7684;&#x5B50;&#x6A21;&#x5F0F;&#x4E2D;&#x3002; If there is a captured variable in an or-pattern, it must appear in both its sub-patterns."},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.9.提取器.html","body":"6.4.9.提取器 Haxe 3.1.0以后 Since Haxe 3.1.0 提取器允许应用变换到被匹配的值。这才需要对一个匹配的值在匹配继续之前做一个小的操作时经常用到： Extractors allow applying transformations to values being matched. This is often useful when a small operation is required on a matched value before matching can continue: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 enum Test  TString(s: String ); TInt(i: Int );  class Main  static public function main ()  var e = TString( \"fOo\" ); switch (e)  case TString(temp): switch (temp.toLowerCase())  case \"foo\" : true ; case _ : false ;  case _ : false ;    这里我们需要TString 枚举构造器的参数值到一个变量 temp，并使用一个嵌套的 switch到temp.toLowerCase() 。很明显，我们想要匹配如果TString保存一个无论大小写的“foo”则成功。这可以通过提取器简单实现： Here we have to capture the argument value of the TString enum constructor in a variable temp and use a nested switch on temp.toLowerCase(). Obviously, we want matching to succeed if TString holds a value of “foo” regardless of its casing. This can be simpliﬁed with extractors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 enum Test  TString(s: String ); TInt(i: Int );  class Main  static public function main ()  var e = TString( \"fOo\" ); var success = switch (e)  case TString( _ .toLowerCase() = \"foo\" ): true ; case _ : false ;    提取器通过extractorExpression = match 表达式识别。编译器生成的代码类似于前面的例子，但是原生的语法被大大精简。提取器由两部分组成，被 = 操作符分隔： Extractors are identiﬁed by the extractorExpression = match expression. The compiler generates code which is similar to the previous example,but the original syntax was greatly simpliﬁed. Extractors consist of two parts, which are separated by the = operator: 左侧可以使任何的表达式，中间出现的所有下划线被替换为当前匹配的值。 右侧是一个模式，匹配的左侧执行的结果。 The left side can be any expression,where all occurrences of underscore_are replaced with the currently matched value. The right side is a pattern which is matched against the result of the evaluation of the left side. 因为右侧是模式，它可以包含另外的提取器。下面的例子链接了两个提取器： Since the right side is a pattern, it can contain another extractor. The following example “chains” two extractors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Main  static public function main ()  switch ( 3 )  case add( _ , 1 ) = mul( _ , 3 ) = a: trace (a);   static function add (i1: Int , i2: Int )  return i1 + i2;  static function mul (i1: Int , i2: Int )  return i1 * i2;   这里输出 12 作为调用 add(3,1)的结果，3是匹配的值，mul(4,3)中4是add调用的结果。需要注意的是，a在第二个 =操作符的右侧是一个捕获的变量（第6.4.3节）。 This traces 12 as a result of the calls to add(3, 1), where 3 is the matched value, and mul(4, 3) where 4 is the result of the add call. It is worth noting that the a on the right side of the second = operator is a capture variable (6.4.3). 当前不能在 or 模式中使用提取器： It is currently not possible to use extractors within or-patterns (6.4.6): 1 2 3 4 5 6 7 8 class Main  static public function main ()  switch ( \"foo\" )  // Extractors in or patterns are not allowed case ( _ .toLowerCase() = \"foo\" ) | \"bar\" :    然而，可以把or模式用在提取器的右侧，所以前面的例子会编译而没有括号。 However, it is possible to have or-patterns on the right side of an extractor, so the previous example would compile without the parentheses."},"6.语言特性/6.4.模式匹配/6.4.9.提取器.html#6-4-9-提取器":{"title":"6.4.9.&#x63D0;&#x53D6;&#x5668;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.9.提取器.html#6-4-9-提取器","body":"Haxe 3.1.0&#x4EE5;&#x540E; Since Haxe 3.1.0 &#x63D0;&#x53D6;&#x5668;&#x5141;&#x8BB8;&#x5E94;&#x7528;&#x53D8;&#x6362;&#x5230;&#x88AB;&#x5339;&#x914D;&#x7684;&#x503C;&#x3002;&#x8FD9;&#x624D;&#x9700;&#x8981;&#x5BF9;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x503C;&#x5728;&#x5339;&#x914D;&#x7EE7;&#x7EED;&#x4E4B;&#x524D;&#x505A;&#x4E00;&#x4E2A;&#x5C0F;&#x7684;&#x64CD;&#x4F5C;&#x65F6;&#x7ECF;&#x5E38;&#x7528;&#x5230;&#xFF1A; Extractors allow applying transformations to values being matched. This is often useful when a small operation is required on a matched value before matching can continue: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 enum Test { TString(s: String ); TInt(i: Int ); } class Main { static public function main () { var e = TString( fOo ); switch (e) { case TString(temp): switch (temp.toLowerCase()) { case foo : true ; case _ : false ; } case _ : false ; } } } &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x9700;&#x8981;TString &#x679A;&#x4E3E;&#x6784;&#x9020;&#x5668;&#x7684;&#x53C2;&#x6570;&#x503C;&#x5230;&#x4E00;&#x4E2A;&#x53D8;&#x91CF; temp&#xFF0C;&#x5E76;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x5D4C;&#x5957;&#x7684; switch&#x5230;temp.toLowerCase() &#x3002;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x5339;&#x914D;&#x5982;&#x679C;TString&#x4FDD;&#x5B58;&#x4E00;&#x4E2A;&#x65E0;&#x8BBA;&#x5927;&#x5C0F;&#x5199;&#x7684;&#x201C;foo&#x201D;&#x5219;&#x6210;&#x529F;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x63D0;&#x53D6;&#x5668;&#x7B80;&#x5355;&#x5B9E;&#x73B0;&#xFF1A; Here we have to capture the argument value of the TString enum constructor in a variable temp and use a nested switch on temp.toLowerCase(). Obviously, we want matching to succeed if TString holds a value of &#x201C;foo&#x201D; regardless of its casing. This can be simpli&#xFB01;ed with extractors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 enum Test { TString(s: String ); TInt(i: Int ); } class Main { static public function main () { var e = TString( fOo ); var success = switch (e) { case TString( _ .toLowerCase() = foo ): true ; case _ : false ; } } } &#x63D0;&#x53D6;&#x5668;&#x901A;&#x8FC7;extractorExpression = match &#x8868;&#x8FBE;&#x5F0F;&#x8BC6;&#x522B;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#x7C7B;&#x4F3C;&#x4E8E;&#x524D;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x4F46;&#x662F;&#x539F;&#x751F;&#x7684;&#x8BED;&#x6CD5;&#x88AB;&#x5927;&#x5927;&#x7CBE;&#x7B80;&#x3002;&#x63D0;&#x53D6;&#x5668;&#x7531;&#x4E24;&#x90E8;&#x5206;&#x7EC4;&#x6210;&#xFF0C;&#x88AB; = &#x64CD;&#x4F5C;&#x7B26;&#x5206;&#x9694;&#xFF1A; Extractors are identi&#xFB01;ed by the extractorExpression = match expression. The compiler generates code which is similar to the previous example,but the original syntax was greatly simpli&#xFB01;ed. Extractors consist of two parts, which are separated by the = operator: &#x5DE6;&#x4FA7;&#x53EF;&#x4EE5;&#x4F7F;&#x4EFB;&#x4F55;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x4E2D;&#x95F4;&#x51FA;&#x73B0;&#x7684;&#x6240;&#x6709;&#x4E0B;&#x5212;&#x7EBF;&#x88AB;&#x66FF;&#x6362;&#x4E3A;&#x5F53;&#x524D;&#x5339;&#x914D;&#x7684;&#x503C;&#x3002; &#x53F3;&#x4FA7;&#x662F;&#x4E00;&#x4E2A;&#x6A21;&#x5F0F;&#xFF0C;&#x5339;&#x914D;&#x7684;&#x5DE6;&#x4FA7;&#x6267;&#x884C;&#x7684;&#x7ED3;&#x679C;&#x3002; The left side can be any expression,where all occurrences of underscore_are replaced with the currently matched value. The right side is a pattern which is matched against the result of the evaluation of the left side. &#x56E0;&#x4E3A;&#x53F3;&#x4FA7;&#x662F;&#x6A21;&#x5F0F;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x53E6;&#x5916;&#x7684;&#x63D0;&#x53D6;&#x5668;&#x3002;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x94FE;&#x63A5;&#x4E86;&#x4E24;&#x4E2A;&#x63D0;&#x53D6;&#x5668;&#xFF1A; Since the right side is a pattern, it can contain another extractor. The following example &#x201C;chains&#x201D; two extractors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Main { static public function main () { switch ( 3 ) { case add( _ , 1 ) = mul( _ , 3 ) = a: trace (a); } } static function add (i1: Int , i2: Int ) { return i1 + i2; } static function mul (i1: Int , i2: Int ) { return i1 * i2; } } &#x8FD9;&#x91CC;&#x8F93;&#x51FA; 12 &#x4F5C;&#x4E3A;&#x8C03;&#x7528; add(3,1)&#x7684;&#x7ED3;&#x679C;&#xFF0C;3&#x662F;&#x5339;&#x914D;&#x7684;&#x503C;&#xFF0C;mul(4,3)&#x4E2D;4&#x662F;add&#x8C03;&#x7528;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;a&#x5728;&#x7B2C;&#x4E8C;&#x4E2A; =&#x64CD;&#x4F5C;&#x7B26;&#x7684;&#x53F3;&#x4FA7;&#x662F;&#x4E00;&#x4E2A;&#x6355;&#x83B7;&#x7684;&#x53D8;&#x91CF;&#xFF08;&#x7B2C;6.4.3&#x8282;&#xFF09;&#x3002; This traces 12 as a result of the calls to add(3, 1), where 3 is the matched value, and mul(4, 3) where 4 is the result of the add call. It is worth noting that the a on the right side of the second = operator is a capture variable (6.4.3). &#x5F53;&#x524D;&#x4E0D;&#x80FD;&#x5728; or &#x6A21;&#x5F0F;&#x4E2D;&#x4F7F;&#x7528;&#x63D0;&#x53D6;&#x5668;&#xFF1A; It is currently not possible to use extractors within or-patterns (6.4.6): 1 2 3 4 5 6 7 8 class Main { static public function main () { switch ( foo ) { // Extractors in or patterns are not allowed case ( _ .toLowerCase() = foo ) | bar : } } } &#x7136;&#x800C;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;or&#x6A21;&#x5F0F;&#x7528;&#x5728;&#x63D0;&#x53D6;&#x5668;&#x7684;&#x53F3;&#x4FA7;&#xFF0C;&#x6240;&#x4EE5;&#x524D;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4F1A;&#x7F16;&#x8BD1;&#x800C;&#x6CA1;&#x6709;&#x62EC;&#x53F7;&#x3002; However, it is possible to have or-patterns on the right side of an extractor, so the previous example would compile without the parentheses."},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html":{"title":"","path":"\\6.语言特性\\6.5.字符串插值\\6.5.字符串插值.html","body":"6.5.字符串插值 使用Haxe 3 ，通过字符串插值，不再需要手动连接字符串的各部分。一个特定的标识符，通过美元符号 $ 在一个单引号括起来的字符串中，像连接标识符一样被执行： With Haxe 3 it is no longer necessary to manually concatenate parts of a string due to the introduction of String Interpolation. Special identiﬁers, denoted by the dollar sign $ within a String enclosed by single-quote ’ characters, are evaluated as if they were concatenated identiﬁers: 1 2 3 var x = 12 ; // The value of x is 12 trace (’The value of x is $x’); 此外，可以包括完整的表达式到字符串中，通过使用 ${expr} ，expr 是任何有效的Haxe 表达式： Furthermore, it is possible to include whole expressions in the string by using ${expr}, with expr being any valid Haxe expression: 1 2 3 var x = 12 ; // The sum of 12 and 3 is 15 trace (’The sum of $x and 3 is $x + 3 ’); 字符串插值是一个编译时功能，不会对运行时性能产生影响。上面的例子和手动连接是等效的，和手动连接编译器生成相同的内容： String interpolation is a compile-time feature and has no impact on the runtime. The above example is equivalent to manual concatenation, which is exactly what the compiler generates: 1 2 trace ( \"The sum of \" + x + \" and 3 is \" + (x + 3 )); 当然，使用单引号括起来的字符串即使没有任何插值仍然是有效的，但是注意美元符号因为它会触发插值。如果一个实际的美元符号被使用，可以使用 $$ 双美元符号代替。 Of course the use of single-quote enclosed strings without any interpolation remains valid, but care has to be taken regarding the $ character as it triggers interpolation. If an actual dollar-sign should be used in the string, $$ can be used. Haxe3之前的字符串插值 花絮 ： Haxe3之前的字符串插值 从Haxe 2.09之后字符串插值就作为一个Haxe功能被引入。在那之前，必须使用宏 Std.format，跟新的字符串插值语法相比，即慢而且不够灵活。 [warning] Trivia : String Interpolation before Haxe 3 String Interpolation has been a Haxe feature since version 2.09. Back then, the macro Std.format had to be used, being both slower and less comfortable than the new string interpolation syntax."},"6.语言特性/6.5.字符串插值/6.5.字符串插值.html#6-5-字符串插值":{"title":"6.5.&#x5B57;&#x7B26;&#x4E32;&#x63D2;&#x503C;","path":"\\6.语言特性\\6.5.字符串插值\\6.5.字符串插值.html#6-5-字符串插值","body":"&#x4F7F;&#x7528;Haxe 3 &#xFF0C;&#x901A;&#x8FC7;&#x5B57;&#x7B26;&#x4E32;&#x63D2;&#x503C;&#xFF0C;&#x4E0D;&#x518D;&#x9700;&#x8981;&#x624B;&#x52A8;&#x8FDE;&#x63A5;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5404;&#x90E8;&#x5206;&#x3002;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#xFF0C;&#x901A;&#x8FC7;&#x7F8E;&#x5143;&#x7B26;&#x53F7; $ &#x5728;&#x4E00;&#x4E2A;&#x5355;&#x5F15;&#x53F7;&#x62EC;&#x8D77;&#x6765;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#xFF0C;&#x50CF;&#x8FDE;&#x63A5;&#x6807;&#x8BC6;&#x7B26;&#x4E00;&#x6837;&#x88AB;&#x6267;&#x884C;&#xFF1A; With Haxe 3 it is no longer necessary to manually concatenate parts of a string due to the introduction of String Interpolation. Special identi&#xFB01;ers, denoted by the dollar sign $ within a String enclosed by single-quote &#x2019; characters, are evaluated as if they were concatenated identi&#xFB01;ers: 1 2 3 var x = 12 ; // The value of x is 12 trace (&#x2019;The value of x is $x&#x2019;); &#x6B64;&#x5916;&#xFF0C;&#x53EF;&#x4EE5;&#x5305;&#x62EC;&#x5B8C;&#x6574;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5230;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#xFF0C;&#x901A;&#x8FC7;&#x4F7F;&#x7528; ${expr} &#xFF0C;expr &#x662F;&#x4EFB;&#x4F55;&#x6709;&#x6548;&#x7684;Haxe &#x8868;&#x8FBE;&#x5F0F;&#xFF1A; Furthermore, it is possible to include whole expressions in the string by using ${expr}, with expr being any valid Haxe expression: 1 2 3 var x = 12 ; // The sum of 12 and 3 is 15 trace (&#x2019;The sum of $x and 3 is ${x + 3 }&#x2019;); &#x5B57;&#x7B26;&#x4E32;&#x63D2;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x65F6;&#x529F;&#x80FD;&#xFF0C;&#x4E0D;&#x4F1A;&#x5BF9;&#x8FD0;&#x884C;&#x65F6;&#x6027;&#x80FD;&#x4EA7;&#x751F;&#x5F71;&#x54CD;&#x3002;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x548C;&#x624B;&#x52A8;&#x8FDE;&#x63A5;&#x662F;&#x7B49;&#x6548;&#x7684;&#xFF0C;&#x548C;&#x624B;&#x52A8;&#x8FDE;&#x63A5;&#x7F16;&#x8BD1;&#x5668;&#x751F;&#x6210;&#x76F8;&#x540C;&#x7684;&#x5185;&#x5BB9;&#xFF1A; String interpolation is a compile-time feature and has no impact on the runtime. The above example is equivalent to manual concatenation, which is exactly what the compiler generates: 1 2 trace ( The sum of  + x +  and 3 is  + (x + 3 )); &#x5F53;&#x7136;&#xFF0C;&#x4F7F;&#x7528;&#x5355;&#x5F15;&#x53F7;&#x62EC;&#x8D77;&#x6765;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5373;&#x4F7F;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x63D2;&#x503C;&#x4ECD;&#x7136;&#x662F;&#x6709;&#x6548;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x6CE8;&#x610F;&#x7F8E;&#x5143;&#x7B26;&#x53F7;&#x56E0;&#x4E3A;&#x5B83;&#x4F1A;&#x89E6;&#x53D1;&#x63D2;&#x503C;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5B9E;&#x9645;&#x7684;&#x7F8E;&#x5143;&#x7B26;&#x53F7;&#x88AB;&#x4F7F;&#x7528;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; $$ &#x53CC;&#x7F8E;&#x5143;&#x7B26;&#x53F7;&#x4EE3;&#x66FF;&#x3002; Of course the use of single-quote enclosed strings without any interpolation remains valid, but care has to be taken regarding the $ character as it triggers interpolation. If an actual dollar-sign should be used in the string, $$ can be used. Haxe3&#x4E4B;&#x524D;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x63D2;&#x503C; &#x82B1;&#x7D6E; &#xFF1A; Haxe3&#x4E4B;&#x524D;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x63D2;&#x503C; &#x4ECE;Haxe 2.09&#x4E4B;&#x540E;&#x5B57;&#x7B26;&#x4E32;&#x63D2;&#x503C;&#x5C31;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;Haxe&#x529F;&#x80FD;&#x88AB;&#x5F15;&#x5165;&#x3002;&#x5728;&#x90A3;&#x4E4B;&#x524D;&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x5B8F; Std.format&#xFF0C;&#x8DDF;&#x65B0;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x63D2;&#x503C;&#x8BED;&#x6CD5;&#x76F8;&#x6BD4;&#xFF0C;&#x5373;&#x6162;&#x800C;&#x4E14;&#x4E0D;&#x591F;&#x7075;&#x6D3B;&#x3002; [warning] Trivia : String Interpolation before Haxe 3 String Interpolation has been a Haxe feature since version 2.09. Back then, the macro Std.format had to be used, being both slower and less comfortable than the new string interpolation syntax."},"6.语言特性/6.6.数组推导/6.6.数组推导.html":{"title":"","path":"\\6.语言特性\\6.6.数组推导\\6.6.数组推导.html","body":"6.6.数组推导 Haxe中的数组推导使用现有的语法使数组可以更简洁的初始化。它通过 for 或者 while循环构造： Array comprehension in Haxe uses existing syntax to allow concise initialization of arrays. It is identiﬁed by for or while constructs: 1 2 3 4 5 6 7 8 9 10 class Main  static public function main ()  var a = [ for (i in 0. . .10 ) i]; trace (a); // [0,1,2,3,4,5,6,7,8,9] var i = 0 ; var b = [ while (i  10 ) i++]; trace (b); // [0,1,2,3,4,5,6,7,8,9]   变量 a 是被初始化为一个数组，保存从0到9的数值。编译器生成的代码，添加每次循环迭代的值到数组中，所以跟下面的代码是等价的： Variable a is initialized to an array holding the numbers 0 to 9. The compiler generates code which adds the value of each loop iteration to the array, so the following code would be equivalent: 1 2 var a = []; for (i in 0. . .10 ) a.push(i); 变量 b 是初始化为一个数组，保存同样的值，但是通过一个不同的推导样式，使用了 while 循环而不是 for 。再一次，跟如下的代码是等效的： Variable b is initialized toan array with the same values, but through a different comprehension style using while instead of for. Again, the following code would be equivalent: 1 2 3 var i = 0 ; var a = []; while (i  10 ) a.push(i++); 循环表达式可以是任何类型，包括条件和嵌套的循环，所以如下的内容会如预期运行： The loop expression can be anything,including conditions and nested loops,so the following works as expected: 1 2 3 4 5 6 7 8 9 10 11 12 class Main  static public function main ()  var a = [ for (a in 1. . .11 ) for (b in 2. . .4 ) if (a % b == 0 ) a+ \"/\" +b ]; // [2/2,3/3,4/2,6/2,6/3,8/2,9/3,10/2] trace (a);  "},"6.语言特性/6.6.数组推导/6.6.数组推导.html#6-6-数组推导":{"title":"6.6.&#x6570;&#x7EC4;&#x63A8;&#x5BFC;","path":"\\6.语言特性\\6.6.数组推导\\6.6.数组推导.html#6-6-数组推导","body":"Haxe&#x4E2D;&#x7684;&#x6570;&#x7EC4;&#x63A8;&#x5BFC;&#x4F7F;&#x7528;&#x73B0;&#x6709;&#x7684;&#x8BED;&#x6CD5;&#x4F7F;&#x6570;&#x7EC4;&#x53EF;&#x4EE5;&#x66F4;&#x7B80;&#x6D01;&#x7684;&#x521D;&#x59CB;&#x5316;&#x3002;&#x5B83;&#x901A;&#x8FC7; for &#x6216;&#x8005; while&#x5FAA;&#x73AF;&#x6784;&#x9020;&#xFF1A; Array comprehension in Haxe uses existing syntax to allow concise initialization of arrays. It is identi&#xFB01;ed by for or while constructs: 1 2 3 4 5 6 7 8 9 10 class Main { static public function main () { var a = [ for (i in 0. . .10 ) i]; trace (a); // [0,1,2,3,4,5,6,7,8,9] var i = 0 ; var b = [ while (i  10 ) i++]; trace (b); // [0,1,2,3,4,5,6,7,8,9] } } &#x53D8;&#x91CF; a &#x662F;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x4FDD;&#x5B58;&#x4ECE;0&#x5230;9&#x7684;&#x6570;&#x503C;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x6DFB;&#x52A0;&#x6BCF;&#x6B21;&#x5FAA;&#x73AF;&#x8FED;&#x4EE3;&#x7684;&#x503C;&#x5230;&#x6570;&#x7EC4;&#x4E2D;&#xFF0C;&#x6240;&#x4EE5;&#x8DDF;&#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x662F;&#x7B49;&#x4EF7;&#x7684;&#xFF1A; Variable a is initialized to an array holding the numbers 0 to 9. The compiler generates code which adds the value of each loop iteration to the array, so the following code would be equivalent: 1 2 var a = []; for (i in 0. . .10 ) a.push(i); &#x53D8;&#x91CF; b &#x662F;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x4FDD;&#x5B58;&#x540C;&#x6837;&#x7684;&#x503C;&#xFF0C;&#x4F46;&#x662F;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x63A8;&#x5BFC;&#x6837;&#x5F0F;&#xFF0C;&#x4F7F;&#x7528;&#x4E86; while &#x5FAA;&#x73AF;&#x800C;&#x4E0D;&#x662F; for &#x3002;&#x518D;&#x4E00;&#x6B21;&#xFF0C;&#x8DDF;&#x5982;&#x4E0B;&#x7684;&#x4EE3;&#x7801;&#x662F;&#x7B49;&#x6548;&#x7684;&#xFF1A; Variable b is initialized toan array with the same values, but through a different comprehension style using while instead of for. Again, the following code would be equivalent: 1 2 3 var i = 0 ; var a = []; while (i  10 ) a.push(i++); &#x5FAA;&#x73AF;&#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#xFF0C;&#x5305;&#x62EC;&#x6761;&#x4EF6;&#x548C;&#x5D4C;&#x5957;&#x7684;&#x5FAA;&#x73AF;&#xFF0C;&#x6240;&#x4EE5;&#x5982;&#x4E0B;&#x7684;&#x5185;&#x5BB9;&#x4F1A;&#x5982;&#x9884;&#x671F;&#x8FD0;&#x884C;&#xFF1A; The loop expression can be anything,including conditions and nested loops,so the following works as expected: 1 2 3 4 5 6 7 8 9 10 11 12 class Main { static public function main () { var a = [ for (a in 1. . .11 ) for (b in 2. . .4 ) if (a % b == 0 ) a+ / +b ]; // [2/2,3/3,4/2,6/2,6/3,8/2,9/3,10/2] trace (a); } }"},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html":{"title":"","path":"\\6.语言特性\\6.4.模式匹配\\6.4.模式匹配.html","body":"6.4.模式匹配 本节内容： 6.4.1 介绍 6.4.2 枚举匹配 6.4.3 变量捕获 6.4.4 结构匹配 6.4.5 数组匹配 6.4.6 Or 模式 6.4.7 守护 6.4.8 多个值的匹配 6.4.9 提取器 6.4.10 穷尽性检查 6.4.11 无效的模式检查"},"6.语言特性/6.4.模式匹配/6.4.模式匹配.html#6-4-模式匹配":{"title":"6.4.&#x6A21;&#x5F0F;&#x5339;&#x914D;","path":"\\6.语言特性\\6.4.模式匹配\\6.4.模式匹配.html#6-4-模式匹配","body":"&#x672C;&#x8282;&#x5185;&#x5BB9;&#xFF1A; 6.4.1 &#x4ECB;&#x7ECD; 6.4.2 &#x679A;&#x4E3E;&#x5339;&#x914D; 6.4.3 &#x53D8;&#x91CF;&#x6355;&#x83B7; 6.4.4 &#x7ED3;&#x6784;&#x5339;&#x914D; 6.4.5 &#x6570;&#x7EC4;&#x5339;&#x914D; 6.4.6 Or &#x6A21;&#x5F0F; 6.4.7 &#x5B88;&#x62A4; 6.4.8 &#x591A;&#x4E2A;&#x503C;&#x7684;&#x5339;&#x914D; 6.4.9 &#x63D0;&#x53D6;&#x5668; 6.4.10 &#x7A77;&#x5C3D;&#x6027;&#x68C0;&#x67E5; 6.4.11 &#x65E0;&#x6548;&#x7684;&#x6A21;&#x5F0F;&#x68C0;&#x67E5;"},"6.语言特性/6.7.迭代器/6.7.迭代器.html":{"title":"","path":"\\6.语言特性\\6.7.迭代器\\6.7.迭代器.html","body":"6.7.迭代器 使用Haxe,很容易定义定制的迭代器和可迭代数据类型。这些概念分别由类型 Iterator 和 Iterable为代表： With Haxe it is very easy to deﬁne custom iterators and iterable data types. These concepts are represented by the types Iterator and Iterable respectively: 1 2 3 4 5 6 7 8 typedef IteratorT =  function hasNext () : Bool ; function next () : T ;  typedef IterableT =  function iterator () : Iterator T;  任何在结构上和这些类型合一（第3.5.2节）的类都可以被通过使用 for循环迭代。也就是说，如果类定义了方法 hasNet 和 next包括匹配的返回类型，都可以被认为是一个迭代器，如果它定义了一个方法 iterator 返回一个 Iterator，则被认为是可迭代类型。 Any class (2.3) which structurally uniﬁes (3.5.2) with one of these types can be iterated over usingafor-loop(5.13). Thatis,if the class deﬁnes methods hasNext and next with matching return types it is considered an iterator,if it deﬁnes a method iterator returning an Iterator it is considered an iterable type. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class MyStringIterator  var s: String ; var i: Int ; public function new (s: String )  this .s = s; i = 0 ;  public function hasNext ()  return i  s.length;  public function next ()  return s.charAt(i++);   class Main  static public function main ()  var myIt = new MyStringIterator ( \"string\" ); for (chr in myIt)  trace (chr);    本例中的类型 MyStringIterator 有资格作为迭代器：它定义了一个方法 hasNext，返回Bool，和一个方法 next，返回String，使它兼容于 Iterator。main方法实例化了它，然后进行迭代。 The type MyStringIterator in this example qualiﬁes as iterator: It deﬁnes a method hasNext returning Bool and a method next returning String, making it compatible with Iterator. The main method instantiates it, then iterates over it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class MyArrayWrap  T   var a: Array T; public function new (a: Array T)  this .a = a;  public function iterator ()  return a.iterator();   class Main  static public function main ()  var myWrap = new MyArrayWrap ([ 1 , 2 , 3 ]); for (elt in myWrap)  trace (elt);    这里我们没有设置一个像上利中完整的迭代器，而是定义MyArrayWrap 有一个方法 iterator ，有效的转发包装的Array类型的iterator方法。 Here we do not setup a full iterator like in the previous example, but instead deﬁne that the MyArrayWrap has a method iterator, effectively forwarding the iterator method of the wrapped Array type."},"6.语言特性/6.7.迭代器/6.7.迭代器.html#6-7-迭代器":{"title":"6.7.&#x8FED;&#x4EE3;&#x5668;","path":"\\6.语言特性\\6.7.迭代器\\6.7.迭代器.html#6-7-迭代器","body":"&#x4F7F;&#x7528;Haxe,&#x5F88;&#x5BB9;&#x6613;&#x5B9A;&#x4E49;&#x5B9A;&#x5236;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#x548C;&#x53EF;&#x8FED;&#x4EE3;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x4E9B;&#x6982;&#x5FF5;&#x5206;&#x522B;&#x7531;&#x7C7B;&#x578B; Iterator &#x548C; Iterable&#x4E3A;&#x4EE3;&#x8868;&#xFF1A; With Haxe it is very easy to de&#xFB01;ne custom iterators and iterable data types. These concepts are represented by the types Iterator and Iterable respectively: 1 2 3 4 5 6 7 8 typedef IteratorT = { function hasNext () : Bool ; function next () : T ; } typedef IterableT = { function iterator () : Iterator T; } &#x4EFB;&#x4F55;&#x5728;&#x7ED3;&#x6784;&#x4E0A;&#x548C;&#x8FD9;&#x4E9B;&#x7C7B;&#x578B;&#x5408;&#x4E00;&#xFF08;&#x7B2C;3.5.2&#x8282;&#xFF09;&#x7684;&#x7C7B;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x901A;&#x8FC7;&#x4F7F;&#x7528; for&#x5FAA;&#x73AF;&#x8FED;&#x4EE3;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x7C7B;&#x5B9A;&#x4E49;&#x4E86;&#x65B9;&#x6CD5; hasNet &#x548C; next&#x5305;&#x62EC;&#x5339;&#x914D;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#xFF0C;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x4E00;&#x4E2A;&#x8FED;&#x4EE3;&#x5668;&#xFF0C;&#x5982;&#x679C;&#x5B83;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5; iterator &#x8FD4;&#x56DE;&#x4E00;&#x4E2A; Iterator&#xFF0C;&#x5219;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x53EF;&#x8FED;&#x4EE3;&#x7C7B;&#x578B;&#x3002; Any class (2.3) which structurally uni&#xFB01;es (3.5.2) with one of these types can be iterated over usingafor-loop(5.13). Thatis,if the class de&#xFB01;nes methods hasNext and next with matching return types it is considered an iterator,if it de&#xFB01;nes a method iterator returning an Iterator it is considered an iterable type. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class MyStringIterator { var s: String ; var i: Int ; public function new (s: String ) { this .s = s; i = 0 ; } public function hasNext () { return i  s.length; } public function next () { return s.charAt(i++); } } class Main { static public function main () { var myIt = new MyStringIterator ( string ); for (chr in myIt) { trace (chr); } } } &#x672C;&#x4F8B;&#x4E2D;&#x7684;&#x7C7B;&#x578B; MyStringIterator &#x6709;&#x8D44;&#x683C;&#x4F5C;&#x4E3A;&#x8FED;&#x4EE3;&#x5668;&#xFF1A;&#x5B83;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5; hasNext&#xFF0C;&#x8FD4;&#x56DE;Bool&#xFF0C;&#x548C;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5; next&#xFF0C;&#x8FD4;&#x56DE;String&#xFF0C;&#x4F7F;&#x5B83;&#x517C;&#x5BB9;&#x4E8E; Iterator&#x3002;main&#x65B9;&#x6CD5;&#x5B9E;&#x4F8B;&#x5316;&#x4E86;&#x5B83;&#xFF0C;&#x7136;&#x540E;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#x3002; The type MyStringIterator in this example quali&#xFB01;es as iterator: It de&#xFB01;nes a method hasNext returning Bool and a method next returning String, making it compatible with Iterator. The main method instantiates it, then iterates over it. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class MyArrayWrap  T  { var a: Array T; public function new (a: Array T) { this .a = a; } public function iterator () { return a.iterator(); } } class Main { static public function main () { var myWrap = new MyArrayWrap ([ 1 , 2 , 3 ]); for (elt in myWrap) { trace (elt); } } } &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x50CF;&#x4E0A;&#x5229;&#x4E2D;&#x5B8C;&#x6574;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#xFF0C;&#x800C;&#x662F;&#x5B9A;&#x4E49;MyArrayWrap &#x6709;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5; iterator &#xFF0C;&#x6709;&#x6548;&#x7684;&#x8F6C;&#x53D1;&#x5305;&#x88C5;&#x7684;Array&#x7C7B;&#x578B;&#x7684;iterator&#x65B9;&#x6CD5;&#x3002; Here we do not setup a full iterator like in the previous example, but instead de&#xFB01;ne that the MyArrayWrap has a method iterator, effectively forwarding the iterator method of the wrapped Array type."},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html":{"title":"","path":"\\6.语言特性\\6.8.函数绑定\\6.8.函数绑定.html","body":"6.8.函数绑定 Haxe 3 允许绑定函数通过部分参数应用。每个函数类型可以被认为是有一个bind字段，可以被调用，传递需要数量的参数来创建一个新的函数。下面展示： Haxe 3 allows binding functions with partially applied arguments. Each function type can be considered to have a bind ﬁeld, which can be called with the desired number of arguments in order to create a new function. This is demonstrated here: 1 2 3 4 5 6 7 8 9 10 11 12 class Main  static public function main ()  var map = new haxe .ds.IntMap String (); var f = map. set .bind( _ , \"12\" ); $type(map. set ); // Int - String - Void $type(f); // Int - Void f( 1 ); f( 2 ); f( 3 ); trace (map); // 1 = 12, 2 = 12, 3 = 12   第4行绑定函数 map.set 到一个变量 f ，然后应用 12 作为第二个参数。下划线用来表示这个参数没有绑定，通过对比map.set 和f类型展示：绑定的字符串参数被从类型中有效的切断，转换一个 Int-String-Void 类型为 Int-Void 。 Line 4 binds the function map.set to a variable named f, and applies 12 as second argument. The underscore _ is used to denote that this argument is not bound, which is shown by comparing the types of map.set and f: The bound String argument is effectively cut from the type, turning a Int-String-Void type into Int-Void. 调用 f(1) 然后实际上调用了 map.set(1,”12”)，调用 f(2) 和 f(3) 也是类似的。最后一行证明所有三个索引真实的映射到值 “12”。 A call to f(1) then actually invokes map.set(1, “12”), the calls to f(2) and f(3) are analogous. The last line proves that all three indices indeed are mapped to the value “12”. 下划线 _ 可以被跳过对于后续的参数，所以第一个参数可以被使用 map.set.bind(1)绑定，生成一个 String-Void 函数，在调用中设置一个新的索引1的值。 The underscore _ can be skipped for trailing arguments,so the ﬁrst argument could be bound through map.set.bind(1),yielding a String-Void function that sets a new value for index 1 on invocation. 回调 花絮：回调 Haxe 3以前，曾经使用一个 callback关键字，可以被调用为一个函数参数然后后面跟任何数量的绑定参数。这个名字源于一个常见的用法，是一个回调函数被创建和 this 对象被绑定。回调只允许绑定为参数从左到右，因为不支持下划线。使用下划线的选择有一些争议和一些其他的建议，但是没有被认为是很优越的。毕竟，下划线至少看起来像是说“在这里填上值”，很好的描述了它的语义。 [warning] Trivia : Callback Prior to Haxe 3, Haxe used to know a callback-keyword which could be called with a function argument followed by any number of binding arguments. The name originated from a common usage were a callback-function is created with the this-object being bound. Callback would allow binding of arguments only from left to right as there was no support for the underscore _. The choice to use an underscore was controversial and several other suggestions were made, none of which were considered superior. After all, the underscore _ at least looks like it’s saying “ﬁll value in here”, which nicely describes its semantics."},"6.语言特性/6.8.函数绑定/6.8.函数绑定.html#6-8-函数绑定":{"title":"6.8.&#x51FD;&#x6570;&#x7ED1;&#x5B9A;","path":"\\6.语言特性\\6.8.函数绑定\\6.8.函数绑定.html#6-8-函数绑定","body":"Haxe 3 &#x5141;&#x8BB8;&#x7ED1;&#x5B9A;&#x51FD;&#x6570;&#x901A;&#x8FC7;&#x90E8;&#x5206;&#x53C2;&#x6570;&#x5E94;&#x7528;&#x3002;&#x6BCF;&#x4E2A;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x6709;&#x4E00;&#x4E2A;bind&#x5B57;&#x6BB5;&#xFF0C;&#x53EF;&#x4EE5;&#x88AB;&#x8C03;&#x7528;&#xFF0C;&#x4F20;&#x9012;&#x9700;&#x8981;&#x6570;&#x91CF;&#x7684;&#x53C2;&#x6570;&#x6765;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x51FD;&#x6570;&#x3002;&#x4E0B;&#x9762;&#x5C55;&#x793A;&#xFF1A; Haxe 3 allows binding functions with partially applied arguments. Each function type can be considered to have a bind &#xFB01;eld, which can be called with the desired number of arguments in order to create a new function. This is demonstrated here: 1 2 3 4 5 6 7 8 9 10 11 12 class Main { static public function main () { var map = new haxe .ds.IntMap String (); var f = map. set .bind( _ , 12 ); $type(map. set ); // Int - String - Void $type(f); // Int - Void f( 1 ); f( 2 ); f( 3 ); trace (map); // {1 = 12, 2 = 12, 3 = 12} } } &#x7B2C;4&#x884C;&#x7ED1;&#x5B9A;&#x51FD;&#x6570; map.set &#x5230;&#x4E00;&#x4E2A;&#x53D8;&#x91CF; f &#xFF0C;&#x7136;&#x540E;&#x5E94;&#x7528; 12 &#x4F5C;&#x4E3A;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x3002;&#x4E0B;&#x5212;&#x7EBF;&#x7528;&#x6765;&#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x6CA1;&#x6709;&#x7ED1;&#x5B9A;&#xFF0C;&#x901A;&#x8FC7;&#x5BF9;&#x6BD4;map.set &#x548C;f&#x7C7B;&#x578B;&#x5C55;&#x793A;&#xFF1A;&#x7ED1;&#x5B9A;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x53C2;&#x6570;&#x88AB;&#x4ECE;&#x7C7B;&#x578B;&#x4E2D;&#x6709;&#x6548;&#x7684;&#x5207;&#x65AD;&#xFF0C;&#x8F6C;&#x6362;&#x4E00;&#x4E2A; Int-String-Void &#x7C7B;&#x578B;&#x4E3A; Int-Void &#x3002; Line 4 binds the function map.set to a variable named f, and applies 12 as second argument. The underscore _ is used to denote that this argument is not bound, which is shown by comparing the types of map.set and f: The bound String argument is effectively cut from the type, turning a Int-String-Void type into Int-Void. &#x8C03;&#x7528; f(1) &#x7136;&#x540E;&#x5B9E;&#x9645;&#x4E0A;&#x8C03;&#x7528;&#x4E86; map.set(1,&#x201D;12&#x201D;)&#xFF0C;&#x8C03;&#x7528; f(2) &#x548C; f(3) &#x4E5F;&#x662F;&#x7C7B;&#x4F3C;&#x7684;&#x3002;&#x6700;&#x540E;&#x4E00;&#x884C;&#x8BC1;&#x660E;&#x6240;&#x6709;&#x4E09;&#x4E2A;&#x7D22;&#x5F15;&#x771F;&#x5B9E;&#x7684;&#x6620;&#x5C04;&#x5230;&#x503C; &#x201C;12&#x201D;&#x3002; A call to f(1) then actually invokes map.set(1, &#x201C;12&#x201D;), the calls to f(2) and f(3) are analogous. The last line proves that all three indices indeed are mapped to the value &#x201C;12&#x201D;. &#x4E0B;&#x5212;&#x7EBF; _ &#x53EF;&#x4EE5;&#x88AB;&#x8DF3;&#x8FC7;&#x5BF9;&#x4E8E;&#x540E;&#x7EED;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x88AB;&#x4F7F;&#x7528; map.set.bind(1)&#x7ED1;&#x5B9A;&#xFF0C;&#x751F;&#x6210;&#x4E00;&#x4E2A; String-Void &#x51FD;&#x6570;&#xFF0C;&#x5728;&#x8C03;&#x7528;&#x4E2D;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7D22;&#x5F15;1&#x7684;&#x503C;&#x3002; The underscore _ can be skipped for trailing arguments,so the &#xFB01;rst argument could be bound through map.set.bind(1),yielding a String-Void function that sets a new value for index 1 on invocation. &#x56DE;&#x8C03; &#x82B1;&#x7D6E;&#xFF1A;&#x56DE;&#x8C03; Haxe 3&#x4EE5;&#x524D;&#xFF0C;&#x66FE;&#x7ECF;&#x4F7F;&#x7528;&#x4E00;&#x4E2A; callback&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x53EF;&#x4EE5;&#x88AB;&#x8C03;&#x7528;&#x4E3A;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x7136;&#x540E;&#x540E;&#x9762;&#x8DDF;&#x4EFB;&#x4F55;&#x6570;&#x91CF;&#x7684;&#x7ED1;&#x5B9A;&#x53C2;&#x6570;&#x3002;&#x8FD9;&#x4E2A;&#x540D;&#x5B57;&#x6E90;&#x4E8E;&#x4E00;&#x4E2A;&#x5E38;&#x89C1;&#x7684;&#x7528;&#x6CD5;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#x88AB;&#x521B;&#x5EFA;&#x548C; this &#x5BF9;&#x8C61;&#x88AB;&#x7ED1;&#x5B9A;&#x3002;&#x56DE;&#x8C03;&#x53EA;&#x5141;&#x8BB8;&#x7ED1;&#x5B9A;&#x4E3A;&#x53C2;&#x6570;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#xFF0C;&#x56E0;&#x4E3A;&#x4E0D;&#x652F;&#x6301;&#x4E0B;&#x5212;&#x7EBF;&#x3002;&#x4F7F;&#x7528;&#x4E0B;&#x5212;&#x7EBF;&#x7684;&#x9009;&#x62E9;&#x6709;&#x4E00;&#x4E9B;&#x4E89;&#x8BAE;&#x548C;&#x4E00;&#x4E9B;&#x5176;&#x4ED6;&#x7684;&#x5EFA;&#x8BAE;&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x6709;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x5F88;&#x4F18;&#x8D8A;&#x7684;&#x3002;&#x6BD5;&#x7ADF;&#xFF0C;&#x4E0B;&#x5212;&#x7EBF;&#x81F3;&#x5C11;&#x770B;&#x8D77;&#x6765;&#x50CF;&#x662F;&#x8BF4;&#x201C;&#x5728;&#x8FD9;&#x91CC;&#x586B;&#x4E0A;&#x503C;&#x201D;&#xFF0C;&#x5F88;&#x597D;&#x7684;&#x63CF;&#x8FF0;&#x4E86;&#x5B83;&#x7684;&#x8BED;&#x4E49;&#x3002; [warning] Trivia : Callback Prior to Haxe 3, Haxe used to know a callback-keyword which could be called with a function argument followed by any number of binding arguments. The name originated from a common usage were a callback-function is created with the this-object being bound. Callback would allow binding of arguments only from left to right as there was no support for the underscore _. The choice to use an underscore was controversial and several other suggestions were made, none of which were considered superior. After all, the underscore _ at least looks like it&#x2019;s saying &#x201C;&#xFB01;ll value in here&#x201D;, which nicely describes its semantics."},"6.语言特性/6.9.元数据/6.9.元数据.html":{"title":"","path":"\\6.语言特性\\6.9.元数据\\6.9.元数据.html","body":"6.9.元数据 一些构造可以使用定制的元数据属性化： Several constructs can be attributed with custom metadata: 类和枚举的声明 类字段 枚举构造函数 表达式 class and enum declarations Class ﬁelds Enum constructors Expressions 这些元数据信息可以被在运行时获得，通过 haxe.rtti.Meta API： These metadata information can be obtained at runtime through the haxe.rtti.Meta API: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import haxe.rtti.Meta; @author( \"Nicolas\" ) @debug class MyClass  @range( 1 , 8 ) var value: Int ; @broken @:noCompletion static function method ()    class Main  static public function main ()  //  author : [\"Nicolas\"], debug : null  trace (Meta.getType(MyClass)); // [1,8] trace (Meta.getFields(MyClass).value.range); //  broken: null  trace (Meta.getStatics(MyClass).method);   我们可以简单的识别元数据通过开始的 @ 字符，后跟元数据的名称，和可选的，通过一些逗号分隔的包括在括号中的常量参数。 We can easily identify metadata by the leading @ character, followed by the metadata name and, optionally, by a number of comma-separated constant arguments enclosed in parentheses. 类 MyClass 有一个 author 元数据，带有一个单独的String参数“Nicolas”，还有一个 debug 元数据，没有参数。 成员变量值有一个 range 元数据，为两个Int参数，1和8. 静态method 方法有一个broken元数据，没有参数，还有一个 :noCompletion 元数据，没有参数。 Class MyClass has an author metadata with a single String argument “Nicolas”, as well as a debug metadata without arguments. The member variable value has a range metadata with two Int arguments 1 and 8. The static method method has a broken metadata without arguments,as well as a :noCompletion metadata without arguments. main方法访问这些元数据的值可以使用它们的API。输出揭示了获得的数据的结构： The main method accesses these metadata values using their API. The output reveals the structure of the obtained data: 每个元数据都有个字段，字段名是元数据的名称。 字段值对应元数据参数。如果没有参数，字段值为 null 。否则字段值是一个数组，每个参数作为一个元素。 冒号 : 开头的元数据是省略的。这个类型的元数据作为编译器元数据存在。 There is a ﬁeld for each metadata, with the ﬁeld name being the metadata name. The ﬁeld values correspond to the metadata arguments. If there are no arguments,the ﬁeld value is null. Otherwise the ﬁeld value is an array with one element per argument. Metadata starting with : is omitted. This kind of metadata is known as compiler metadata. 元数据参数接受的值为： Allowed values for metadata arguments are: 常量（第5.2节） 数组声明（第5.5节）（如果所有它们的元素具有资格） 对象声明（第5.6节）（如果所有它们的字段值有资格） Constants (5.2) Arrays declarations (5.5) (if all their elements qualify) Object declarations (5.6) (if all their ﬁeld values qualify) 内建编译器元数据 ：一个所有定义的元数据详尽的列表可以通过运行 haxe –help-metas 从命令行获取。 Built-in Compiler Metadata An exhaustive list of all deﬁned metadata can be obtained by running haxe –help-metas from command line. 也可以在元数据列表（第8.1节）查看。 See also the Compiler Metadata list (8.1)."},"6.语言特性/6.9.元数据/6.9.元数据.html#6-9-元数据":{"title":"6.9.&#x5143;&#x6570;&#x636E;","path":"\\6.语言特性\\6.9.元数据\\6.9.元数据.html#6-9-元数据","body":"&#x4E00;&#x4E9B;&#x6784;&#x9020;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5B9A;&#x5236;&#x7684;&#x5143;&#x6570;&#x636E;&#x5C5E;&#x6027;&#x5316;&#xFF1A; Several constructs can be attributed with custom metadata: &#x7C7B;&#x548C;&#x679A;&#x4E3E;&#x7684;&#x58F0;&#x660E; &#x7C7B;&#x5B57;&#x6BB5; &#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570; &#x8868;&#x8FBE;&#x5F0F; class and enum declarations Class &#xFB01;elds Enum constructors Expressions &#x8FD9;&#x4E9B;&#x5143;&#x6570;&#x636E;&#x4FE1;&#x606F;&#x53EF;&#x4EE5;&#x88AB;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x83B7;&#x5F97;&#xFF0C;&#x901A;&#x8FC7; haxe.rtti.Meta API&#xFF1A; These metadata information can be obtained at runtime through the haxe.rtti.Meta API: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import haxe.rtti.Meta; @author( Nicolas ) @debug class MyClass { @range( 1 , 8 ) var value: Int ; @broken @:noCompletion static function method () { } } class Main { static public function main () { // { author : [Nicolas], debug : null } trace (Meta.getType(MyClass)); // [1,8] trace (Meta.getFields(MyClass).value.range); // { broken: null } trace (Meta.getStatics(MyClass).method); } } &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7684;&#x8BC6;&#x522B;&#x5143;&#x6570;&#x636E;&#x901A;&#x8FC7;&#x5F00;&#x59CB;&#x7684; @ &#x5B57;&#x7B26;&#xFF0C;&#x540E;&#x8DDF;&#x5143;&#x6570;&#x636E;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x548C;&#x53EF;&#x9009;&#x7684;&#xFF0C;&#x901A;&#x8FC7;&#x4E00;&#x4E9B;&#x9017;&#x53F7;&#x5206;&#x9694;&#x7684;&#x5305;&#x62EC;&#x5728;&#x62EC;&#x53F7;&#x4E2D;&#x7684;&#x5E38;&#x91CF;&#x53C2;&#x6570;&#x3002; We can easily identify metadata by the leading @ character, followed by the metadata name and, optionally, by a number of comma-separated constant arguments enclosed in parentheses. &#x7C7B; MyClass &#x6709;&#x4E00;&#x4E2A; author &#x5143;&#x6570;&#x636E;&#xFF0C;&#x5E26;&#x6709;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684;String&#x53C2;&#x6570;&#x201C;Nicolas&#x201D;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E2A; debug &#x5143;&#x6570;&#x636E;&#xFF0C;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#x3002; &#x6210;&#x5458;&#x53D8;&#x91CF;&#x503C;&#x6709;&#x4E00;&#x4E2A; range &#x5143;&#x6570;&#x636E;&#xFF0C;&#x4E3A;&#x4E24;&#x4E2A;Int&#x53C2;&#x6570;&#xFF0C;1&#x548C;8. &#x9759;&#x6001;method &#x65B9;&#x6CD5;&#x6709;&#x4E00;&#x4E2A;broken&#x5143;&#x6570;&#x636E;&#xFF0C;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x4E2A; :noCompletion &#x5143;&#x6570;&#x636E;&#xFF0C;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#x3002; Class MyClass has an author metadata with a single String argument &#x201C;Nicolas&#x201D;, as well as a debug metadata without arguments. The member variable value has a range metadata with two Int arguments 1 and 8. The static method method has a broken metadata without arguments,as well as a :noCompletion metadata without arguments. main&#x65B9;&#x6CD5;&#x8BBF;&#x95EE;&#x8FD9;&#x4E9B;&#x5143;&#x6570;&#x636E;&#x7684;&#x503C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x7684;API&#x3002;&#x8F93;&#x51FA;&#x63ED;&#x793A;&#x4E86;&#x83B7;&#x5F97;&#x7684;&#x6570;&#x636E;&#x7684;&#x7ED3;&#x6784;&#xFF1A; The main method accesses these metadata values using their API. The output reveals the structure of the obtained data: &#x6BCF;&#x4E2A;&#x5143;&#x6570;&#x636E;&#x90FD;&#x6709;&#x4E2A;&#x5B57;&#x6BB5;&#xFF0C;&#x5B57;&#x6BB5;&#x540D;&#x662F;&#x5143;&#x6570;&#x636E;&#x7684;&#x540D;&#x79F0;&#x3002; &#x5B57;&#x6BB5;&#x503C;&#x5BF9;&#x5E94;&#x5143;&#x6570;&#x636E;&#x53C2;&#x6570;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#xFF0C;&#x5B57;&#x6BB5;&#x503C;&#x4E3A; null &#x3002;&#x5426;&#x5219;&#x5B57;&#x6BB5;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x6BCF;&#x4E2A;&#x53C2;&#x6570;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x3002; &#x5192;&#x53F7; : &#x5F00;&#x5934;&#x7684;&#x5143;&#x6570;&#x636E;&#x662F;&#x7701;&#x7565;&#x7684;&#x3002;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x7684;&#x5143;&#x6570;&#x636E;&#x4F5C;&#x4E3A;&#x7F16;&#x8BD1;&#x5668;&#x5143;&#x6570;&#x636E;&#x5B58;&#x5728;&#x3002; There is a &#xFB01;eld for each metadata, with the &#xFB01;eld name being the metadata name. The &#xFB01;eld values correspond to the metadata arguments. If there are no arguments,the &#xFB01;eld value is null. Otherwise the &#xFB01;eld value is an array with one element per argument. Metadata starting with : is omitted. This kind of metadata is known as compiler metadata. &#x5143;&#x6570;&#x636E;&#x53C2;&#x6570;&#x63A5;&#x53D7;&#x7684;&#x503C;&#x4E3A;&#xFF1A; Allowed values for metadata arguments are: &#x5E38;&#x91CF;&#xFF08;&#x7B2C;5.2&#x8282;&#xFF09; &#x6570;&#x7EC4;&#x58F0;&#x660E;&#xFF08;&#x7B2C;5.5&#x8282;&#xFF09;&#xFF08;&#x5982;&#x679C;&#x6240;&#x6709;&#x5B83;&#x4EEC;&#x7684;&#x5143;&#x7D20;&#x5177;&#x6709;&#x8D44;&#x683C;&#xFF09; &#x5BF9;&#x8C61;&#x58F0;&#x660E;&#xFF08;&#x7B2C;5.6&#x8282;&#xFF09;&#xFF08;&#x5982;&#x679C;&#x6240;&#x6709;&#x5B83;&#x4EEC;&#x7684;&#x5B57;&#x6BB5;&#x503C;&#x6709;&#x8D44;&#x683C;&#xFF09; Constants (5.2) Arrays declarations (5.5) (if all their elements qualify) Object declarations (5.6) (if all their &#xFB01;eld values qualify) &#x5185;&#x5EFA;&#x7F16;&#x8BD1;&#x5668;&#x5143;&#x6570;&#x636E; &#xFF1A;&#x4E00;&#x4E2A;&#x6240;&#x6709;&#x5B9A;&#x4E49;&#x7684;&#x5143;&#x6570;&#x636E;&#x8BE6;&#x5C3D;&#x7684;&#x5217;&#x8868;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8FD0;&#x884C; haxe &#x2013;help-metas &#x4ECE;&#x547D;&#x4EE4;&#x884C;&#x83B7;&#x53D6;&#x3002; Built-in Compiler Metadata An exhaustive list of all de&#xFB01;ned metadata can be obtained by running haxe &#x2013;help-metas from command line. &#x4E5F;&#x53EF;&#x4EE5;&#x5728;&#x5143;&#x6570;&#x636E;&#x5217;&#x8868;&#xFF08;&#x7B2C;8.1&#x8282;&#xFF09;&#x67E5;&#x770B;&#x3002; See also the Compiler Metadata list (8.1)."},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html":{"title":"","path":"\\8.编译器功能\\8.2.无用代码消除\\8.2.无用代码消除.html","body":"8.2.无用代码消除 无用代码消除或者DCE是一个编译器功能，它从输出中删除未使用的代码。在类型检查之后，编译器执行DCE入口点（通常是main方法）并递归的确定哪些字段和类型被使用了。使用的字段相应进行标记，未标记的字段然后从它们的类中移除。 DCE有三个模式，当调用命令行的时候设置： -dce std ：只有Haxe标准库中的类被DCE影响。这是所有目标语言默认的设置。 -dce no ：不执行任何DCE。 -dce full ：所有的类都被DCE影响。 DCE算法和类型化算法运作良好，但是当 dynamic（第2.7节）或者 反射（第10.7节）被使用时可能失败。这可能需要通过如下元数据归类明确标记的字段或者类被使用： @:keep ： 如果使用在类上，类和所有字段一起都不会受到DCE的影响。如果用在字段上，那个字段不受DCE影响。 @:keepSub ：如果用在一个类上，它就像 @:keep 用在一个注释的类上，以及所有子类。 @:keepInit ：通常，一个被DCE移除所有字段的类（或者一个开始为空的）会从输出中移除。通过使用这个元数据，空类被保留。 如果一个类需要被从命令行标记 @:keep 而不是编辑它的源代码，有一个编译器宏可用： –macro keep(“type dot path”) 。查看 haxe.macro.Compiler.keep API 了解这个宏的详情。它会标记包、模块或者子类型被DCE保留，包含它们进行编译。 编译器根据活动模式自动使用值“std”，“no”或者“full”定义dce。这可以被用在条件编译（第6.1节）。 花絮：DCE重写 DCE最初在Haxe 2.07中实现。这个实现考虑过一个函数，被用在显式的类型化时。但是问题是一些功能，多数重要的接口，会使所有的类字段被类型化以验证类型安全。这有效的完全颠覆了DCE，激励了Haxe2.10中的重写。 花絮： DCE和try.haxe.org 对于JavaScript目标语言的DCE，在网站 http://try.haxe.org 被发布时可以看到巨大的改进。生成的JavaScript代码最初的感受是混合，使得更细致的选择排除哪些代码。"},"8.编译器功能/8.2.无用代码消除/8.2.无用代码消除.html#8-2-无用代码消除":{"title":"8.2.&#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664;","path":"\\8.编译器功能\\8.2.无用代码消除\\8.2.无用代码消除.html#8-2-无用代码消除","body":"&#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664;&#x6216;&#x8005;DCE&#x662F;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x5668;&#x529F;&#x80FD;&#xFF0C;&#x5B83;&#x4ECE;&#x8F93;&#x51FA;&#x4E2D;&#x5220;&#x9664;&#x672A;&#x4F7F;&#x7528;&#x7684;&#x4EE3;&#x7801;&#x3002;&#x5728;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x4E4B;&#x540E;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x6267;&#x884C;DCE&#x5165;&#x53E3;&#x70B9;&#xFF08;&#x901A;&#x5E38;&#x662F;main&#x65B9;&#x6CD5;&#xFF09;&#x5E76;&#x9012;&#x5F52;&#x7684;&#x786E;&#x5B9A;&#x54EA;&#x4E9B;&#x5B57;&#x6BB5;&#x548C;&#x7C7B;&#x578B;&#x88AB;&#x4F7F;&#x7528;&#x4E86;&#x3002;&#x4F7F;&#x7528;&#x7684;&#x5B57;&#x6BB5;&#x76F8;&#x5E94;&#x8FDB;&#x884C;&#x6807;&#x8BB0;&#xFF0C;&#x672A;&#x6807;&#x8BB0;&#x7684;&#x5B57;&#x6BB5;&#x7136;&#x540E;&#x4ECE;&#x5B83;&#x4EEC;&#x7684;&#x7C7B;&#x4E2D;&#x79FB;&#x9664;&#x3002; DCE&#x6709;&#x4E09;&#x4E2A;&#x6A21;&#x5F0F;&#xFF0C;&#x5F53;&#x8C03;&#x7528;&#x547D;&#x4EE4;&#x884C;&#x7684;&#x65F6;&#x5019;&#x8BBE;&#x7F6E;&#xFF1A; -dce std &#xFF1A;&#x53EA;&#x6709;Haxe&#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684;&#x7C7B;&#x88AB;DCE&#x5F71;&#x54CD;&#x3002;&#x8FD9;&#x662F;&#x6240;&#x6709;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x9ED8;&#x8BA4;&#x7684;&#x8BBE;&#x7F6E;&#x3002; -dce no &#xFF1A;&#x4E0D;&#x6267;&#x884C;&#x4EFB;&#x4F55;DCE&#x3002; -dce full &#xFF1A;&#x6240;&#x6709;&#x7684;&#x7C7B;&#x90FD;&#x88AB;DCE&#x5F71;&#x54CD;&#x3002; DCE&#x7B97;&#x6CD5;&#x548C;&#x7C7B;&#x578B;&#x5316;&#x7B97;&#x6CD5;&#x8FD0;&#x4F5C;&#x826F;&#x597D;&#xFF0C;&#x4F46;&#x662F;&#x5F53; dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#x6216;&#x8005; &#x53CD;&#x5C04;&#xFF08;&#x7B2C;10.7&#x8282;&#xFF09;&#x88AB;&#x4F7F;&#x7528;&#x65F6;&#x53EF;&#x80FD;&#x5931;&#x8D25;&#x3002;&#x8FD9;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x901A;&#x8FC7;&#x5982;&#x4E0B;&#x5143;&#x6570;&#x636E;&#x5F52;&#x7C7B;&#x660E;&#x786E;&#x6807;&#x8BB0;&#x7684;&#x5B57;&#x6BB5;&#x6216;&#x8005;&#x7C7B;&#x88AB;&#x4F7F;&#x7528;&#xFF1A; @:keep &#xFF1A; &#x5982;&#x679C;&#x4F7F;&#x7528;&#x5728;&#x7C7B;&#x4E0A;&#xFF0C;&#x7C7B;&#x548C;&#x6240;&#x6709;&#x5B57;&#x6BB5;&#x4E00;&#x8D77;&#x90FD;&#x4E0D;&#x4F1A;&#x53D7;&#x5230;DCE&#x7684;&#x5F71;&#x54CD;&#x3002;&#x5982;&#x679C;&#x7528;&#x5728;&#x5B57;&#x6BB5;&#x4E0A;&#xFF0C;&#x90A3;&#x4E2A;&#x5B57;&#x6BB5;&#x4E0D;&#x53D7;DCE&#x5F71;&#x54CD;&#x3002; @:keepSub &#xFF1A;&#x5982;&#x679C;&#x7528;&#x5728;&#x4E00;&#x4E2A;&#x7C7B;&#x4E0A;&#xFF0C;&#x5B83;&#x5C31;&#x50CF; @:keep &#x7528;&#x5728;&#x4E00;&#x4E2A;&#x6CE8;&#x91CA;&#x7684;&#x7C7B;&#x4E0A;&#xFF0C;&#x4EE5;&#x53CA;&#x6240;&#x6709;&#x5B50;&#x7C7B;&#x3002; @:keepInit &#xFF1A;&#x901A;&#x5E38;&#xFF0C;&#x4E00;&#x4E2A;&#x88AB;DCE&#x79FB;&#x9664;&#x6240;&#x6709;&#x5B57;&#x6BB5;&#x7684;&#x7C7B;&#xFF08;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x5F00;&#x59CB;&#x4E3A;&#x7A7A;&#x7684;&#xFF09;&#x4F1A;&#x4ECE;&#x8F93;&#x51FA;&#x4E2D;&#x79FB;&#x9664;&#x3002;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x5143;&#x6570;&#x636E;&#xFF0C;&#x7A7A;&#x7C7B;&#x88AB;&#x4FDD;&#x7559;&#x3002; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x9700;&#x8981;&#x88AB;&#x4ECE;&#x547D;&#x4EE4;&#x884C;&#x6807;&#x8BB0; @:keep &#x800C;&#x4E0D;&#x662F;&#x7F16;&#x8F91;&#x5B83;&#x7684;&#x6E90;&#x4EE3;&#x7801;&#xFF0C;&#x6709;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x5668;&#x5B8F;&#x53EF;&#x7528;&#xFF1A; &#x2013;macro keep(&#x201C;type dot path&#x201D;) &#x3002;&#x67E5;&#x770B; haxe.macro.Compiler.keep API &#x4E86;&#x89E3;&#x8FD9;&#x4E2A;&#x5B8F;&#x7684;&#x8BE6;&#x60C5;&#x3002;&#x5B83;&#x4F1A;&#x6807;&#x8BB0;&#x5305;&#x3001;&#x6A21;&#x5757;&#x6216;&#x8005;&#x5B50;&#x7C7B;&#x578B;&#x88AB;DCE&#x4FDD;&#x7559;&#xFF0C;&#x5305;&#x542B;&#x5B83;&#x4EEC;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#x3002; &#x7F16;&#x8BD1;&#x5668;&#x6839;&#x636E;&#x6D3B;&#x52A8;&#x6A21;&#x5F0F;&#x81EA;&#x52A8;&#x4F7F;&#x7528;&#x503C;&#x201C;std&#x201D;&#xFF0C;&#x201C;no&#x201D;&#x6216;&#x8005;&#x201C;full&#x201D;&#x5B9A;&#x4E49;dce&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x5728;&#x6761;&#x4EF6;&#x7F16;&#x8BD1;&#xFF08;&#x7B2C;6.1&#x8282;&#xFF09;&#x3002; &#x82B1;&#x7D6E;&#xFF1A;DCE&#x91CD;&#x5199; DCE&#x6700;&#x521D;&#x5728;Haxe 2.07&#x4E2D;&#x5B9E;&#x73B0;&#x3002;&#x8FD9;&#x4E2A;&#x5B9E;&#x73B0;&#x8003;&#x8651;&#x8FC7;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x88AB;&#x7528;&#x5728;&#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5316;&#x65F6;&#x3002;&#x4F46;&#x662F;&#x95EE;&#x9898;&#x662F;&#x4E00;&#x4E9B;&#x529F;&#x80FD;&#xFF0C;&#x591A;&#x6570;&#x91CD;&#x8981;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x4F1A;&#x4F7F;&#x6240;&#x6709;&#x7684;&#x7C7B;&#x5B57;&#x6BB5;&#x88AB;&#x7C7B;&#x578B;&#x5316;&#x4EE5;&#x9A8C;&#x8BC1;&#x7C7B;&#x578B;&#x5B89;&#x5168;&#x3002;&#x8FD9;&#x6709;&#x6548;&#x7684;&#x5B8C;&#x5168;&#x98A0;&#x8986;&#x4E86;DCE&#xFF0C;&#x6FC0;&#x52B1;&#x4E86;Haxe2.10&#x4E2D;&#x7684;&#x91CD;&#x5199;&#x3002; &#x82B1;&#x7D6E;&#xFF1A; DCE&#x548C;try.haxe.org &#x5BF9;&#x4E8E;JavaScript&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;DCE&#xFF0C;&#x5728;&#x7F51;&#x7AD9; http://try.haxe.org &#x88AB;&#x53D1;&#x5E03;&#x65F6;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x5DE8;&#x5927;&#x7684;&#x6539;&#x8FDB;&#x3002;&#x751F;&#x6210;&#x7684;JavaScript&#x4EE3;&#x7801;&#x6700;&#x521D;&#x7684;&#x611F;&#x53D7;&#x662F;&#x6DF7;&#x5408;&#xFF0C;&#x4F7F;&#x5F97;&#x66F4;&#x7EC6;&#x81F4;&#x7684;&#x9009;&#x62E9;&#x6392;&#x9664;&#x54EA;&#x4E9B;&#x4EE3;&#x7801;&#x3002;"},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html":{"title":"","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.1.概述.html","body":"8.3.1.概述 Haxe编译器丰富的类型系统（第3章）使得IDEs和编辑器难以提供精确的完成信息。在类型推断（第3.6节）和宏（第9章）之间，需要大量的工作来反复需要的处理。这就是为什么Haxe编译器带有一个内置的完成模式供第三方软件使用。 所有完成使用 --display file@position[@mode] 编译器参数触发。需要的参数为： file：要检查完成的文件。必须是一个 .hx 文件的绝对或相对路径。它不遵守任何类路径或库。 position：指定文件中要检查完成的字节位置（不是字符位置）。 mode：使用的完成模式（查看下面的介绍）。 我们研究如下的完成模式细节： 字段访问（第8.3.2节）：提供一个可以被在一个指定类型上访问的字段列表。 调用参数（第8.3.3节）：报告当前被调用的函数的类型。 类型路径（第8.3.4节）：列出子包、子类型和静态字段。 使用（第8.3.5节）：列出所有编译的文件中所有指定类型、字段或者变量的出现。（模式：usage） 位置（第8.3.6节）：报告指定类型、字段或变量被定义的位置。（模式：position） 顶级（第8.3.7节）：列出所有在指定位置有效的标识符。（模式：toplevel） 由于Haxe是一个非常快的编译器，依赖普通编译器的完成调用通常就足以胜任。对于较大的项目，Haxe提供一个确保只有那些实际上发生了变化，或者它们的依赖关系有任何变化的文件才会被重新编译的服务模式（第8.3.8节）。 接口上的一般注意事项 如果被提到的文件在感兴趣的位置包含一个 | 字符，position参数可以被设置为0 。这对于演示和测试是非常有用的，因为它允许我们忽略一个真实的IDE不得不去做的字节计数处理。本节的例子使用了这个特性。注意，这只在 | 所在的地方不是有效的语句时可用，例如，在一个点号之后（.|）和开口的括号（ (| ）之后。 输出是经过HTML转义的，所以 &amp;， 和  符号分别变成 &amp; ， &amp;lt ; 和  。 否则任何文档输出是被加工的，意味着长文档可能包括包括换行和制表符，因为它们确实在源文件中。 当在完成模式运行，编译器不现实错误，而是尝试忽略它们或者从错误之中恢复。如果一个致命错误发生而被完成，Haxe 编译器打印错误消息而不是完成的输出。任何非XML的输出都可以被看作是一个致命错误的消息。"},"8.编译器功能/8.3.编译器服务/8.3.1.概述.html#8-3-1-概述":{"title":"8.3.1.&#x6982;&#x8FF0;","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.1.概述.html#8-3-1-概述","body":"Haxe&#x7F16;&#x8BD1;&#x5668;&#x4E30;&#x5BCC;&#x7684;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#xFF08;&#x7B2C;3&#x7AE0;&#xFF09;&#x4F7F;&#x5F97;IDEs&#x548C;&#x7F16;&#x8F91;&#x5668;&#x96BE;&#x4EE5;&#x63D0;&#x4F9B;&#x7CBE;&#x786E;&#x7684;&#x5B8C;&#x6210;&#x4FE1;&#x606F;&#x3002;&#x5728;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09;&#x548C;&#x5B8F;&#xFF08;&#x7B2C;9&#x7AE0;&#xFF09;&#x4E4B;&#x95F4;&#xFF0C;&#x9700;&#x8981;&#x5927;&#x91CF;&#x7684;&#x5DE5;&#x4F5C;&#x6765;&#x53CD;&#x590D;&#x9700;&#x8981;&#x7684;&#x5904;&#x7406;&#x3002;&#x8FD9;&#x5C31;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;Haxe&#x7F16;&#x8BD1;&#x5668;&#x5E26;&#x6709;&#x4E00;&#x4E2A;&#x5185;&#x7F6E;&#x7684;&#x5B8C;&#x6210;&#x6A21;&#x5F0F;&#x4F9B;&#x7B2C;&#x4E09;&#x65B9;&#x8F6F;&#x4EF6;&#x4F7F;&#x7528;&#x3002; &#x6240;&#x6709;&#x5B8C;&#x6210;&#x4F7F;&#x7528; --display file@position[@mode] &#x7F16;&#x8BD1;&#x5668;&#x53C2;&#x6570;&#x89E6;&#x53D1;&#x3002;&#x9700;&#x8981;&#x7684;&#x53C2;&#x6570;&#x4E3A;&#xFF1A; file&#xFF1A;&#x8981;&#x68C0;&#x67E5;&#x5B8C;&#x6210;&#x7684;&#x6587;&#x4EF6;&#x3002;&#x5FC5;&#x987B;&#x662F;&#x4E00;&#x4E2A; .hx &#x6587;&#x4EF6;&#x7684;&#x7EDD;&#x5BF9;&#x6216;&#x76F8;&#x5BF9;&#x8DEF;&#x5F84;&#x3002;&#x5B83;&#x4E0D;&#x9075;&#x5B88;&#x4EFB;&#x4F55;&#x7C7B;&#x8DEF;&#x5F84;&#x6216;&#x5E93;&#x3002; position&#xFF1A;&#x6307;&#x5B9A;&#x6587;&#x4EF6;&#x4E2D;&#x8981;&#x68C0;&#x67E5;&#x5B8C;&#x6210;&#x7684;&#x5B57;&#x8282;&#x4F4D;&#x7F6E;&#xFF08;&#x4E0D;&#x662F;&#x5B57;&#x7B26;&#x4F4D;&#x7F6E;&#xFF09;&#x3002; mode&#xFF1A;&#x4F7F;&#x7528;&#x7684;&#x5B8C;&#x6210;&#x6A21;&#x5F0F;&#xFF08;&#x67E5;&#x770B;&#x4E0B;&#x9762;&#x7684;&#x4ECB;&#x7ECD;&#xFF09;&#x3002; &#x6211;&#x4EEC;&#x7814;&#x7A76;&#x5982;&#x4E0B;&#x7684;&#x5B8C;&#x6210;&#x6A21;&#x5F0F;&#x7EC6;&#x8282;&#xFF1A; &#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#xFF08;&#x7B2C;8.3.2&#x8282;&#xFF09;&#xFF1A;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x88AB;&#x5728;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7C7B;&#x578B;&#x4E0A;&#x8BBF;&#x95EE;&#x7684;&#x5B57;&#x6BB5;&#x5217;&#x8868;&#x3002; &#x8C03;&#x7528;&#x53C2;&#x6570;&#xFF08;&#x7B2C;8.3.3&#x8282;&#xFF09;&#xFF1A;&#x62A5;&#x544A;&#x5F53;&#x524D;&#x88AB;&#x8C03;&#x7528;&#x7684;&#x51FD;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x3002; &#x7C7B;&#x578B;&#x8DEF;&#x5F84;&#xFF08;&#x7B2C;8.3.4&#x8282;&#xFF09;&#xFF1A;&#x5217;&#x51FA;&#x5B50;&#x5305;&#x3001;&#x5B50;&#x7C7B;&#x578B;&#x548C;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x3002; &#x4F7F;&#x7528;&#xFF08;&#x7B2C;8.3.5&#x8282;&#xFF09;&#xFF1A;&#x5217;&#x51FA;&#x6240;&#x6709;&#x7F16;&#x8BD1;&#x7684;&#x6587;&#x4EF6;&#x4E2D;&#x6240;&#x6709;&#x6307;&#x5B9A;&#x7C7B;&#x578B;&#x3001;&#x5B57;&#x6BB5;&#x6216;&#x8005;&#x53D8;&#x91CF;&#x7684;&#x51FA;&#x73B0;&#x3002;&#xFF08;&#x6A21;&#x5F0F;&#xFF1A;usage&#xFF09; &#x4F4D;&#x7F6E;&#xFF08;&#x7B2C;8.3.6&#x8282;&#xFF09;&#xFF1A;&#x62A5;&#x544A;&#x6307;&#x5B9A;&#x7C7B;&#x578B;&#x3001;&#x5B57;&#x6BB5;&#x6216;&#x53D8;&#x91CF;&#x88AB;&#x5B9A;&#x4E49;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#xFF08;&#x6A21;&#x5F0F;&#xFF1A;position&#xFF09; &#x9876;&#x7EA7;&#xFF08;&#x7B2C;8.3.7&#x8282;&#xFF09;&#xFF1A;&#x5217;&#x51FA;&#x6240;&#x6709;&#x5728;&#x6307;&#x5B9A;&#x4F4D;&#x7F6E;&#x6709;&#x6548;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#x3002;&#xFF08;&#x6A21;&#x5F0F;&#xFF1A;toplevel&#xFF09; &#x7531;&#x4E8E;Haxe&#x662F;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x5FEB;&#x7684;&#x7F16;&#x8BD1;&#x5668;&#xFF0C;&#x4F9D;&#x8D56;&#x666E;&#x901A;&#x7F16;&#x8BD1;&#x5668;&#x7684;&#x5B8C;&#x6210;&#x8C03;&#x7528;&#x901A;&#x5E38;&#x5C31;&#x8DB3;&#x4EE5;&#x80DC;&#x4EFB;&#x3002;&#x5BF9;&#x4E8E;&#x8F83;&#x5927;&#x7684;&#x9879;&#x76EE;&#xFF0C;Haxe&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x786E;&#x4FDD;&#x53EA;&#x6709;&#x90A3;&#x4E9B;&#x5B9E;&#x9645;&#x4E0A;&#x53D1;&#x751F;&#x4E86;&#x53D8;&#x5316;&#xFF0C;&#x6216;&#x8005;&#x5B83;&#x4EEC;&#x7684;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x6709;&#x4EFB;&#x4F55;&#x53D8;&#x5316;&#x7684;&#x6587;&#x4EF6;&#x624D;&#x4F1A;&#x88AB;&#x91CD;&#x65B0;&#x7F16;&#x8BD1;&#x7684;&#x670D;&#x52A1;&#x6A21;&#x5F0F;&#xFF08;&#x7B2C;8.3.8&#x8282;&#xFF09;&#x3002; &#x63A5;&#x53E3;&#x4E0A;&#x7684;&#x4E00;&#x822C;&#x6CE8;&#x610F;&#x4E8B;&#x9879; &#x5982;&#x679C;&#x88AB;&#x63D0;&#x5230;&#x7684;&#x6587;&#x4EF6;&#x5728;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x4F4D;&#x7F6E;&#x5305;&#x542B;&#x4E00;&#x4E2A; | &#x5B57;&#x7B26;&#xFF0C;position&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x88AB;&#x8BBE;&#x7F6E;&#x4E3A;0 &#x3002;&#x8FD9;&#x5BF9;&#x4E8E;&#x6F14;&#x793A;&#x548C;&#x6D4B;&#x8BD5;&#x662F;&#x975E;&#x5E38;&#x6709;&#x7528;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x5141;&#x8BB8;&#x6211;&#x4EEC;&#x5FFD;&#x7565;&#x4E00;&#x4E2A;&#x771F;&#x5B9E;&#x7684;IDE&#x4E0D;&#x5F97;&#x4E0D;&#x53BB;&#x505A;&#x7684;&#x5B57;&#x8282;&#x8BA1;&#x6570;&#x5904;&#x7406;&#x3002;&#x672C;&#x8282;&#x7684;&#x4F8B;&#x5B50;&#x4F7F;&#x7528;&#x4E86;&#x8FD9;&#x4E2A;&#x7279;&#x6027;&#x3002;&#x6CE8;&#x610F;&#xFF0C;&#x8FD9;&#x53EA;&#x5728; | &#x6240;&#x5728;&#x7684;&#x5730;&#x65B9;&#x4E0D;&#x662F;&#x6709;&#x6548;&#x7684;&#x8BED;&#x53E5;&#x65F6;&#x53EF;&#x7528;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x5728;&#x4E00;&#x4E2A;&#x70B9;&#x53F7;&#x4E4B;&#x540E;&#xFF08;.|&#xFF09;&#x548C;&#x5F00;&#x53E3;&#x7684;&#x62EC;&#x53F7;&#xFF08; (| &#xFF09;&#x4E4B;&#x540E;&#x3002; &#x8F93;&#x51FA;&#x662F;&#x7ECF;&#x8FC7;HTML&#x8F6C;&#x4E49;&#x7684;&#xFF0C;&#x6240;&#x4EE5; &amp;&#xFF0C; &#x548C;  &#x7B26;&#x53F7;&#x5206;&#x522B;&#x53D8;&#x6210; &amp; &#xFF0C; &amp;lt ; &#x548C;  &#x3002; &#x5426;&#x5219;&#x4EFB;&#x4F55;&#x6587;&#x6863;&#x8F93;&#x51FA;&#x662F;&#x88AB;&#x52A0;&#x5DE5;&#x7684;&#xFF0C;&#x610F;&#x5473;&#x7740;&#x957F;&#x6587;&#x6863;&#x53EF;&#x80FD;&#x5305;&#x62EC;&#x5305;&#x62EC;&#x6362;&#x884C;&#x548C;&#x5236;&#x8868;&#x7B26;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x786E;&#x5B9E;&#x5728;&#x6E90;&#x6587;&#x4EF6;&#x4E2D;&#x3002; &#x5F53;&#x5728;&#x5B8C;&#x6210;&#x6A21;&#x5F0F;&#x8FD0;&#x884C;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4E0D;&#x73B0;&#x5B9E;&#x9519;&#x8BEF;&#xFF0C;&#x800C;&#x662F;&#x5C1D;&#x8BD5;&#x5FFD;&#x7565;&#x5B83;&#x4EEC;&#x6216;&#x8005;&#x4ECE;&#x9519;&#x8BEF;&#x4E4B;&#x4E2D;&#x6062;&#x590D;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x81F4;&#x547D;&#x9519;&#x8BEF;&#x53D1;&#x751F;&#x800C;&#x88AB;&#x5B8C;&#x6210;&#xFF0C;Haxe &#x7F16;&#x8BD1;&#x5668;&#x6253;&#x5370;&#x9519;&#x8BEF;&#x6D88;&#x606F;&#x800C;&#x4E0D;&#x662F;&#x5B8C;&#x6210;&#x7684;&#x8F93;&#x51FA;&#x3002;&#x4EFB;&#x4F55;&#x975E;XML&#x7684;&#x8F93;&#x51FA;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x770B;&#x4F5C;&#x662F;&#x4E00;&#x4E2A;&#x81F4;&#x547D;&#x9519;&#x8BEF;&#x7684;&#x6D88;&#x606F;&#x3002;"},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html":{"title":"","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.2.字段访问完成.html","body":"8.3.2.字段访问完成 字段完成在一个点号 . 字符之后触发，来列出指定类型可用的字段。编译器解析和类型化一切到完成的点，然后输出相关的信息到 标准错误输出： 1 2 3 4 5 class Main  public static function main ()  trace ( \"Hello\" .|   如果这个文件保存为 Main.hx ，完成可以使用命令 haxe –display Main.hx@0 来调用。输出看起来类似于这个（为简便和提高格式的可读性，我们省略了一些字段）： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  list   i n = \"length\"   t  Int / t   d  The number of characters in ‘this‘ String. / d  / i   i n = \"charAt\"   t  index : Int - &amp;gt; String / t   d  Returns the character at position ‘index‘ of ‘this‘ String. If ‘index‘ is negative or exceeds ‘this.length‘, the empty String \"\" is returned. / d  / i   i n = \"charCodeAt\"   t  index : Int - &amp;gt; Null &amp;lt; Int &amp;gt; / t   d  Returns the character code at position ‘index‘ of ‘this‘ String. If ‘index‘ is negative or exceeds ‘this.length‘, null is returned. To obtain the character code of a single character, \"x\".code can be used instead to inline the character code at compile time. Note that this only works on String literals of length 1. / d  / i  / list  XML结构如下： 文档借点列表包含几个节点 i，每个代表一个字段 n 属性包含字段的名称 t 借点包含字段的类型 d 借点包含字段的文档 Haxe 3.2.0 以后： 当使用 -D display-details编译时，每个字段另外有一个 k 属性，它可以是变量或者方法。这得以区别方法字段和变量字段，方法字段有一个函数类型。"},"8.编译器功能/8.3.编译器服务/8.3.2.字段访问完成.html#8-3-2-字段访问完成":{"title":"8.3.2.&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x5B8C;&#x6210;","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.2.字段访问完成.html#8-3-2-字段访问完成","body":"&#x5B57;&#x6BB5;&#x5B8C;&#x6210;&#x5728;&#x4E00;&#x4E2A;&#x70B9;&#x53F7; . &#x5B57;&#x7B26;&#x4E4B;&#x540E;&#x89E6;&#x53D1;&#xFF0C;&#x6765;&#x5217;&#x51FA;&#x6307;&#x5B9A;&#x7C7B;&#x578B;&#x53EF;&#x7528;&#x7684;&#x5B57;&#x6BB5;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x89E3;&#x6790;&#x548C;&#x7C7B;&#x578B;&#x5316;&#x4E00;&#x5207;&#x5230;&#x5B8C;&#x6210;&#x7684;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x8F93;&#x51FA;&#x76F8;&#x5173;&#x7684;&#x4FE1;&#x606F;&#x5230; &#x6807;&#x51C6;&#x9519;&#x8BEF;&#x8F93;&#x51FA;&#xFF1A; 1 2 3 4 5 class Main { public static function main () { trace ( Hello .| } } &#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x4FDD;&#x5B58;&#x4E3A; Main.hx &#xFF0C;&#x5B8C;&#x6210;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x547D;&#x4EE4; haxe &#x2013;display Main.hx@0 &#x6765;&#x8C03;&#x7528;&#x3002;&#x8F93;&#x51FA;&#x770B;&#x8D77;&#x6765;&#x7C7B;&#x4F3C;&#x4E8E;&#x8FD9;&#x4E2A;&#xFF08;&#x4E3A;&#x7B80;&#x4FBF;&#x548C;&#x63D0;&#x9AD8;&#x683C;&#x5F0F;&#x7684;&#x53EF;&#x8BFB;&#x6027;&#xFF0C;&#x6211;&#x4EEC;&#x7701;&#x7565;&#x4E86;&#x4E00;&#x4E9B;&#x5B57;&#x6BB5;&#xFF09;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  list   i n = length   t  Int / t   d  The number of characters in &#x2018;this&#x2018; String. / d  / i   i n = charAt   t  index : Int - &amp;gt; String / t   d  Returns the character at position &#x2018;index&#x2018; of &#x2018;this&#x2018; String. If &#x2018;index&#x2018; is negative or exceeds &#x2018;this.length&#x2018;, the empty String  is returned. / d  / i   i n = charCodeAt   t  index : Int - &amp;gt; Null &amp;lt; Int &amp;gt; / t   d  Returns the character code at position &#x2018;index&#x2018; of &#x2018;this&#x2018; String. If &#x2018;index&#x2018; is negative or exceeds &#x2018;this.length&#x2018;, null is returned. To obtain the character code of a single character, x.code can be used instead to inline the character code at compile time. Note that this only works on String literals of length 1. / d  / i  / list  XML&#x7ED3;&#x6784;&#x5982;&#x4E0B;&#xFF1A; &#x6587;&#x6863;&#x501F;&#x70B9;&#x5217;&#x8868;&#x5305;&#x542B;&#x51E0;&#x4E2A;&#x8282;&#x70B9; i&#xFF0C;&#x6BCF;&#x4E2A;&#x4EE3;&#x8868;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5; n &#x5C5E;&#x6027;&#x5305;&#x542B;&#x5B57;&#x6BB5;&#x7684;&#x540D;&#x79F0; t &#x501F;&#x70B9;&#x5305;&#x542B;&#x5B57;&#x6BB5;&#x7684;&#x7C7B;&#x578B; d &#x501F;&#x70B9;&#x5305;&#x542B;&#x5B57;&#x6BB5;&#x7684;&#x6587;&#x6863; Haxe 3.2.0 &#x4EE5;&#x540E;&#xFF1A; &#x5F53;&#x4F7F;&#x7528; -D display-details&#x7F16;&#x8BD1;&#x65F6;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B57;&#x6BB5;&#x53E6;&#x5916;&#x6709;&#x4E00;&#x4E2A; k &#x5C5E;&#x6027;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x662F;&#x53D8;&#x91CF;&#x6216;&#x8005;&#x65B9;&#x6CD5;&#x3002;&#x8FD9;&#x5F97;&#x4EE5;&#x533A;&#x522B;&#x65B9;&#x6CD5;&#x5B57;&#x6BB5;&#x548C;&#x53D8;&#x91CF;&#x5B57;&#x6BB5;&#xFF0C;&#x65B9;&#x6CD5;&#x5B57;&#x6BB5;&#x6709;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x3002;"},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html":{"title":"","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.3.调用参数完成.html","body":"8.3.3.调用参数完成 调用参数完成在一个开口的括号字符 ( 之后触发，来显示当前被调用的函数的类型。它可以用于任何函数调用以及构造函数调用： 1 2 3 4 5 class Main  public static function main ()  trace ( \"Hello\" .split(|   如果这个文件保存为 Main.hx ，完成通过使用命令 haxe –display Main.hx@0 来调用。输出看起来是这样： 1 2 3 type delimiter : String -&amp;gt; Array&amp;lt;String&amp;gt; /type IDEs 可以解析这个来建议，调用的函数需要一个名为 delimiter的String类型参数，返回一个 Array。 花絮 ：输出结构的问题 我们承认当前的格式需要一些烦人的手动解析。将来我们可能考虑提供一个更结构化的输出，尤其对于函数。"},"8.编译器功能/8.3.编译器服务/8.3.3.调用参数完成.html#8-3-3-调用参数完成":{"title":"8.3.3.&#x8C03;&#x7528;&#x53C2;&#x6570;&#x5B8C;&#x6210;","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.3.调用参数完成.html#8-3-3-调用参数完成","body":"&#x8C03;&#x7528;&#x53C2;&#x6570;&#x5B8C;&#x6210;&#x5728;&#x4E00;&#x4E2A;&#x5F00;&#x53E3;&#x7684;&#x62EC;&#x53F7;&#x5B57;&#x7B26; ( &#x4E4B;&#x540E;&#x89E6;&#x53D1;&#xFF0C;&#x6765;&#x663E;&#x793A;&#x5F53;&#x524D;&#x88AB;&#x8C03;&#x7528;&#x7684;&#x51FD;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x5B83;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x4EFB;&#x4F55;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x4EE5;&#x53CA;&#x6784;&#x9020;&#x51FD;&#x6570;&#x8C03;&#x7528;&#xFF1A; 1 2 3 4 5 class Main { public static function main () { trace ( Hello .split(| } } &#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x4FDD;&#x5B58;&#x4E3A; Main.hx &#xFF0C;&#x5B8C;&#x6210;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x547D;&#x4EE4; haxe &#x2013;display Main.hx@0 &#x6765;&#x8C03;&#x7528;&#x3002;&#x8F93;&#x51FA;&#x770B;&#x8D77;&#x6765;&#x662F;&#x8FD9;&#x6837;&#xFF1A; 1 2 3 type delimiter : String -&amp;gt; Array&amp;lt;String&amp;gt; /type IDEs &#x53EF;&#x4EE5;&#x89E3;&#x6790;&#x8FD9;&#x4E2A;&#x6765;&#x5EFA;&#x8BAE;&#xFF0C;&#x8C03;&#x7528;&#x7684;&#x51FD;&#x6570;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x540D;&#x4E3A; delimiter&#x7684;String&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A; Array&#x3002; &#x82B1;&#x7D6E; &#xFF1A;&#x8F93;&#x51FA;&#x7ED3;&#x6784;&#x7684;&#x95EE;&#x9898; &#x6211;&#x4EEC;&#x627F;&#x8BA4;&#x5F53;&#x524D;&#x7684;&#x683C;&#x5F0F;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x70E6;&#x4EBA;&#x7684;&#x624B;&#x52A8;&#x89E3;&#x6790;&#x3002;&#x5C06;&#x6765;&#x6211;&#x4EEC;&#x53EF;&#x80FD;&#x8003;&#x8651;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x66F4;&#x7ED3;&#x6784;&#x5316;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x5C24;&#x5176;&#x5BF9;&#x4E8E;&#x51FD;&#x6570;&#x3002;"},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html":{"title":"","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.4.类型路径完成.html","body":"8.3.4.类型路径完成 类型路径完成可以出现在 import 声明（第3.7.2节）、using 声明（第6.3节）中或者任何一个类型被引用的位置。我们可以鉴别三种不同的情况： 包完成 ：这列出haxe包的所有子包以及包中的所有模块： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import haxe.|  list   i n = \"CallStack\"   t  / t   d  / d  / i   i n = \"Constraints\"   t  / t   d  / d  / i   i n = \"DynamicAccess\"   t  / t   d  / d  / i   i n = \"EnumFlags\"   t  / t   d  / d  / i   i n = \"EnumTools\"   t  / t   d  / d  / i   i n = \"Http\"   t  / t   d  / d  / i   i n = \"Int32\"   t  / t   d  / d  / i   i n = \"Int64\"   t  / t   d  / d  / i   i n = \"Json\"   t  / t   d  / d  / i   i n = \"Log\"   t  / t   d  / d  / i   i n = \"PosInfos\"   t  / t   d  / d  / i   i n = \"Resource\"   t  / t   d  / d  / i   i n = \"Serializer\"   t  / t   d  / d  / i   i n = \"Template\"   t  / t   d  / d  / i   i n = \"Timer\"   t  / t   d  / d  / i   i n = \"Ucs2\"   t  / t   d  / d  / i   i n = \"Unserializer\"   t  / t   d  / d  / i   i n = \"Utf8\"   t  / t   d  / d  / i   i n = \"crypto\"   t  / t   d  / d  / i   i n = \"ds\"   t  / t   d  / d  / i   i n = \"extern\"   t  / t   d  / d  / i   i n = \"format\"   t  / t   d  / d  / i   i n = \"io\"   t  / t   d  / d  / i   i n = \"macro\"   t  / t   d  / d  / i   i n = \"remoting\"   t  / t   d  / d  / i   i n = \"rtti\"   t  / t   d  / d  / i   i n = \"unit\"   t  / t   d  / d  / i   i n = \"web\"   t  / t   d  / d  / i   in=\"xml\"   t  / t   d  / d  / i   i n = \"zip\"   t  / t   d  / d  / i  / list  导入模块完成 ：这列出模块 haxe.Unserializer 所有的子类型（第3.7.1节）以及所有它的公共静态字段（因为这些也可以被导入）： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import haxe.Unserializer.  list   i n = \"DEFAULT_RESOLVER\"   t  haxe.TypeResolver / t   d  This value can be set to use custom type resolvers. A type resolver finds a Class or Enum instance from a given String . By default, the haxe Type Api is used. A type resolver must provide two methods: 1. resolveClass(name:String):Class &amp;lt; Dynamic &amp;gt; is called to determine a Class from a class name 2. resolveEnum(name:String):Enum &amp;lt; Dynamic &amp;gt; is called to determine an Enum from an enum name This value is applied when a new Unserializer instance is created. Changing it afterwards has no effect on previously created instances. / d  / i   i n = \"run\"   t  v : String - &amp;gt; Dynamic / t   d  Unserializes ‘v‘ and returns the according value. This is a convenience function for creating a new instance of Unserializer with ‘v‘ as buffer and calling its unserialize() method once. / d  / i   i n = \"TypeResolver\"   t  / t   d  / d  / i   i n = \"Unserializer\"   t  / t   d  / d  / i  / list  其它模块完成：这列出模块haxe.Unserializer 的所有子类型（第3.7.1）： 1 2 3 4 5 6 7 8 9 10 using haxe.Unserializer.| class Main  static public function main ()  var x: haxe .Unserializer.|   list i n=\"TypeResolver\"t/td/d/i i n=\"Unserializer\"t/td/d/i /list"},"8.编译器功能/8.3.编译器服务/8.3.4.类型路径完成.html#8-3-4-类型路径完成":{"title":"8.3.4.&#x7C7B;&#x578B;&#x8DEF;&#x5F84;&#x5B8C;&#x6210;","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.4.类型路径完成.html#8-3-4-类型路径完成","body":"&#x7C7B;&#x578B;&#x8DEF;&#x5F84;&#x5B8C;&#x6210;&#x53EF;&#x4EE5;&#x51FA;&#x73B0;&#x5728; import &#x58F0;&#x660E;&#xFF08;&#x7B2C;3.7.2&#x8282;&#xFF09;&#x3001;using &#x58F0;&#x660E;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09;&#x4E2D;&#x6216;&#x8005;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x88AB;&#x5F15;&#x7528;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x9274;&#x522B;&#x4E09;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x60C5;&#x51B5;&#xFF1A; &#x5305;&#x5B8C;&#x6210; &#xFF1A;&#x8FD9;&#x5217;&#x51FA;haxe&#x5305;&#x7684;&#x6240;&#x6709;&#x5B50;&#x5305;&#x4EE5;&#x53CA;&#x5305;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6A21;&#x5757;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import haxe.|  list   i n = CallStack   t  / t   d  / d  / i   i n = Constraints   t  / t   d  / d  / i   i n = DynamicAccess   t  / t   d  / d  / i   i n = EnumFlags   t  / t   d  / d  / i   i n = EnumTools   t  / t   d  / d  / i   i n = Http   t  / t   d  / d  / i   i n = Int32   t  / t   d  / d  / i   i n = Int64   t  / t   d  / d  / i   i n = Json   t  / t   d  / d  / i   i n = Log   t  / t   d  / d  / i   i n = PosInfos   t  / t   d  / d  / i   i n = Resource   t  / t   d  / d  / i   i n = Serializer   t  / t   d  / d  / i   i n = Template   t  / t   d  / d  / i   i n = Timer   t  / t   d  / d  / i   i n = Ucs2   t  / t   d  / d  / i   i n = Unserializer   t  / t   d  / d  / i   i n = Utf8   t  / t   d  / d  / i   i n = crypto   t  / t   d  / d  / i   i n = ds   t  / t   d  / d  / i   i n = extern   t  / t   d  / d  / i   i n = format   t  / t   d  / d  / i   i n = io   t  / t   d  / d  / i   i n = macro   t  / t   d  / d  / i   i n = remoting   t  / t   d  / d  / i   i n = rtti   t  / t   d  / d  / i   i n = unit   t  / t   d  / d  / i   i n = web   t  / t   d  / d  / i   in=xml   t  / t   d  / d  / i   i n = zip   t  / t   d  / d  / i  / list  &#x5BFC;&#x5165;&#x6A21;&#x5757;&#x5B8C;&#x6210; &#xFF1A;&#x8FD9;&#x5217;&#x51FA;&#x6A21;&#x5757; haxe.Unserializer &#x6240;&#x6709;&#x7684;&#x5B50;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.7.1&#x8282;&#xFF09;&#x4EE5;&#x53CA;&#x6240;&#x6709;&#x5B83;&#x7684;&#x516C;&#x5171;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#xFF08;&#x56E0;&#x4E3A;&#x8FD9;&#x4E9B;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x5BFC;&#x5165;&#xFF09;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import haxe.Unserializer.  list   i n = DEFAULT_RESOLVER   t  haxe.TypeResolver / t   d  This value can be set to use custom type resolvers. A type resolver finds a Class or Enum instance from a given String . By default, the haxe Type Api is used. A type resolver must provide two methods: 1. resolveClass(name:String):Class &amp;lt; Dynamic &amp;gt; is called to determine a Class from a class name 2. resolveEnum(name:String):Enum &amp;lt; Dynamic &amp;gt; is called to determine an Enum from an enum name This value is applied when a new Unserializer instance is created. Changing it afterwards has no effect on previously created instances. / d  / i   i n = run   t  v : String - &amp;gt; Dynamic / t   d  Unserializes &#x2018;v&#x2018; and returns the according value. This is a convenience function for creating a new instance of Unserializer with &#x2018;v&#x2018; as buffer and calling its unserialize() method once. / d  / i   i n = TypeResolver   t  / t   d  / d  / i   i n = Unserializer   t  / t   d  / d  / i  / list  &#x5176;&#x5B83;&#x6A21;&#x5757;&#x5B8C;&#x6210;&#xFF1A;&#x8FD9;&#x5217;&#x51FA;&#x6A21;&#x5757;haxe.Unserializer &#x7684;&#x6240;&#x6709;&#x5B50;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.7.1&#xFF09;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 using haxe.Unserializer.| class Main { static public function main () { var x: haxe .Unserializer.| } } list i n=TypeResolvert/td/d/i i n=Unserializert/td/d/i /list"},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html":{"title":"","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.5.使用完成.html","body":"8.3.5.使用完成 从Haxe 3.2.0 以后 ： 使用完成通过 “usage” 模式参数（查看 概述（第8.3.1节））开启。我们在这里使用一个局部变量演示它。注意，它可以以同样的方式用于字段和类型上： 1 2 3 4 5 6 7 8 class Main  public static function main ()  var a = 1 ; var b = a + 1 ; trace (a); a.|   如果这个文件保存为 Main.hx ，可以通过使用命令 haxe –display Main.hx@0@usage 来调用完成。输出是这样的： 1 2 3 4 5  list   pos  main.hx:4: characters 9-10 / pos   pos  main.hx:5: characters 7-8 / pos   pos  main.hx:6: characters 1-2 / pos  / list "},"8.编译器功能/8.3.编译器服务/8.3.5.使用完成.html#8-3-5-使用完成":{"title":"8.3.5.&#x4F7F;&#x7528;&#x5B8C;&#x6210;","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.5.使用完成.html#8-3-5-使用完成","body":"&#x4ECE;Haxe 3.2.0 &#x4EE5;&#x540E; &#xFF1A; &#x4F7F;&#x7528;&#x5B8C;&#x6210;&#x901A;&#x8FC7; &#x201C;usage&#x201D; &#x6A21;&#x5F0F;&#x53C2;&#x6570;&#xFF08;&#x67E5;&#x770B; &#x6982;&#x8FF0;&#xFF08;&#x7B2C;8.3.1&#x8282;&#xFF09;&#xFF09;&#x5F00;&#x542F;&#x3002;&#x6211;&#x4EEC;&#x5728;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x6F14;&#x793A;&#x5B83;&#x3002;&#x6CE8;&#x610F;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x4EE5;&#x540C;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#x7528;&#x4E8E;&#x5B57;&#x6BB5;&#x548C;&#x7C7B;&#x578B;&#x4E0A;&#xFF1A; 1 2 3 4 5 6 7 8 class Main { public static function main () { var a = 1 ; var b = a + 1 ; trace (a); a.| } } &#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x4FDD;&#x5B58;&#x4E3A; Main.hx &#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x547D;&#x4EE4; haxe &#x2013;display Main.hx@0@usage &#x6765;&#x8C03;&#x7528;&#x5B8C;&#x6210;&#x3002;&#x8F93;&#x51FA;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A; 1 2 3 4 5  list   pos  main.hx:4: characters 9-10 / pos   pos  main.hx:5: characters 7-8 / pos   pos  main.hx:6: characters 1-2 / pos  / list "},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html":{"title":"","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.6.位置完成.html","body":"8.3.6.位置完成 从Haxe 3.2.0 以后： 位置完成通过使用 “position”模式参数（查看概述（第8.3.1节））启用。我们使用一个字段演示它的使用。注意，它可以以同样的方式用于局部变量和类型上： 1 2 3 4 class Main  static public function main ()  \"foo\" .split.|  如果这个文件保存为 Main.hx ，可以使用命令 haxe –display Main.hx@0@position 调用完成。输出如下： 1 2 3  list   pos  std/string.hx:124: characters 1-54 / pos  / list  花絮：省略目标指示符的影响 在这个例子中，编译器报告标准的 实际上没有一个实现的String.hx 定义。因为我们没有指定一个目标语言，这在完成模式是允许的。如果命令行参数包括了比如 -neko neko.n ，报告位置会被 std/neko/_std/string.hx:84:lines 84-98 取代。"},"8.编译器功能/8.3.编译器服务/8.3.6.位置完成.html#8-3-6-位置完成":{"title":"8.3.6.&#x4F4D;&#x7F6E;&#x5B8C;&#x6210;","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.6.位置完成.html#8-3-6-位置完成","body":"&#x4ECE;Haxe 3.2.0 &#x4EE5;&#x540E;&#xFF1A; &#x4F4D;&#x7F6E;&#x5B8C;&#x6210;&#x901A;&#x8FC7;&#x4F7F;&#x7528; &#x201C;position&#x201D;&#x6A21;&#x5F0F;&#x53C2;&#x6570;&#xFF08;&#x67E5;&#x770B;&#x6982;&#x8FF0;&#xFF08;&#x7B2C;8.3.1&#x8282;&#xFF09;&#xFF09;&#x542F;&#x7528;&#x3002;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#x6F14;&#x793A;&#x5B83;&#x7684;&#x4F7F;&#x7528;&#x3002;&#x6CE8;&#x610F;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x4EE5;&#x540C;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#x7528;&#x4E8E;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x548C;&#x7C7B;&#x578B;&#x4E0A;&#xFF1A; 1 2 3 4 class Main { static public function main () { foo .split.| } &#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x4FDD;&#x5B58;&#x4E3A; Main.hx &#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x547D;&#x4EE4; haxe &#x2013;display Main.hx@0@position &#x8C03;&#x7528;&#x5B8C;&#x6210;&#x3002;&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#xFF1A; 1 2 3  list   pos  std/string.hx:124: characters 1-54 / pos  / list  &#x82B1;&#x7D6E;&#xFF1A;&#x7701;&#x7565;&#x76EE;&#x6807;&#x6307;&#x793A;&#x7B26;&#x7684;&#x5F71;&#x54CD; &#x5728;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x62A5;&#x544A;&#x6807;&#x51C6;&#x7684; &#x5B9E;&#x9645;&#x4E0A;&#x6CA1;&#x6709;&#x4E00;&#x4E2A;&#x5B9E;&#x73B0;&#x7684;String.hx &#x5B9A;&#x4E49;&#x3002;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x6307;&#x5B9A;&#x4E00;&#x4E2A;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF0C;&#x8FD9;&#x5728;&#x5B8C;&#x6210;&#x6A21;&#x5F0F;&#x662F;&#x5141;&#x8BB8;&#x7684;&#x3002;&#x5982;&#x679C;&#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;&#x5305;&#x62EC;&#x4E86;&#x6BD4;&#x5982; -neko neko.n &#xFF0C;&#x62A5;&#x544A;&#x4F4D;&#x7F6E;&#x4F1A;&#x88AB; std/neko/_std/string.hx:84:lines 84-98 &#x53D6;&#x4EE3;&#x3002;"},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html":{"title":"","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.7.顶级完成.html","body":"8.3.7.顶级完成 从Haxe 3.2.0 以后： 顶级完成显示Haxe编译器识别为关于指定完成位置的所有标识符。这是唯一的我们需要一个真实的位置参数来演示它的效果的完成方法： 1 2 3 4 5 6 7 8 9 10 class Main  static public function main ()  var a = 1 ;   enum MyEnum  MyConstructor1; MyConstructor2(s: String );  如果这个文件保存为 Main.hx ，可以使用命令 haxe –desplay Main.hx@63@toplevel 来调用完成。输出看起来类似于这样（为了简洁省略了一些记录）： 1 2 3 4 5 6 7 8 9 10 11 12  il   i k = \"local\" t = \"Int\"  a / i   i k = \"static\" t = \"Void - &amp;gt; Unknown &amp;lt; 0 &amp;gt; \"  main / i   i k = \"enum\" t = \"MyEnum\"  MyConstructor1 / i   i k = \"enum\" t = \"s : String - &amp;gt; MyEnum\"  MyConstructor2 / i   i k = \"package\"  sys / i   i k = \"package\"  haxe / i   i k = \"type\" p = \"Int\"  Int / i   i k = \"type\" p = \"Float\"  Float / i   i k = \"type\" p = \"MyEnum\"  MyEnum / i   i k = \"type\" p = \"Main\"  Main / i  / il  XML结构取决于每条记录的 k 属性。在所有情况下，i 节点的值都包含了相关的名称。 局部，成员，静态，枚举，全局 ：t 属性保存变量或者字段的类型。 全局，类型 ：p 属性保存包含该类型或者字段的模块路径。"},"8.编译器功能/8.3.编译器服务/8.3.7.顶级完成.html#8-3-7-顶级完成":{"title":"8.3.7.&#x9876;&#x7EA7;&#x5B8C;&#x6210;","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.7.顶级完成.html#8-3-7-顶级完成","body":"&#x4ECE;Haxe 3.2.0 &#x4EE5;&#x540E;&#xFF1A; &#x9876;&#x7EA7;&#x5B8C;&#x6210;&#x663E;&#x793A;Haxe&#x7F16;&#x8BD1;&#x5668;&#x8BC6;&#x522B;&#x4E3A;&#x5173;&#x4E8E;&#x6307;&#x5B9A;&#x5B8C;&#x6210;&#x4F4D;&#x7F6E;&#x7684;&#x6240;&#x6709;&#x6807;&#x8BC6;&#x7B26;&#x3002;&#x8FD9;&#x662F;&#x552F;&#x4E00;&#x7684;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x771F;&#x5B9E;&#x7684;&#x4F4D;&#x7F6E;&#x53C2;&#x6570;&#x6765;&#x6F14;&#x793A;&#x5B83;&#x7684;&#x6548;&#x679C;&#x7684;&#x5B8C;&#x6210;&#x65B9;&#x6CD5;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 class Main { static public function main () { var a = 1 ; } } enum MyEnum { MyConstructor1; MyConstructor2(s: String ); } &#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x4FDD;&#x5B58;&#x4E3A; Main.hx &#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x547D;&#x4EE4; haxe &#x2013;desplay Main.hx@63@toplevel &#x6765;&#x8C03;&#x7528;&#x5B8C;&#x6210;&#x3002;&#x8F93;&#x51FA;&#x770B;&#x8D77;&#x6765;&#x7C7B;&#x4F3C;&#x4E8E;&#x8FD9;&#x6837;&#xFF08;&#x4E3A;&#x4E86;&#x7B80;&#x6D01;&#x7701;&#x7565;&#x4E86;&#x4E00;&#x4E9B;&#x8BB0;&#x5F55;&#xFF09;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12  il   i k = local t = Int  a / i   i k = static t = Void - &amp;gt; Unknown &amp;lt; 0 &amp;gt;   main / i   i k = enum t = MyEnum  MyConstructor1 / i   i k = enum t = s : String - &amp;gt; MyEnum  MyConstructor2 / i   i k = package  sys / i   i k = package  haxe / i   i k = type p = Int  Int / i   i k = type p = Float  Float / i   i k = type p = MyEnum  MyEnum / i   i k = type p = Main  Main / i  / il  XML&#x7ED3;&#x6784;&#x53D6;&#x51B3;&#x4E8E;&#x6BCF;&#x6761;&#x8BB0;&#x5F55;&#x7684; k &#x5C5E;&#x6027;&#x3002;&#x5728;&#x6240;&#x6709;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;i &#x8282;&#x70B9;&#x7684;&#x503C;&#x90FD;&#x5305;&#x542B;&#x4E86;&#x76F8;&#x5173;&#x7684;&#x540D;&#x79F0;&#x3002; &#x5C40;&#x90E8;&#xFF0C;&#x6210;&#x5458;&#xFF0C;&#x9759;&#x6001;&#xFF0C;&#x679A;&#x4E3E;&#xFF0C;&#x5168;&#x5C40; &#xFF1A;t &#x5C5E;&#x6027;&#x4FDD;&#x5B58;&#x53D8;&#x91CF;&#x6216;&#x8005;&#x5B57;&#x6BB5;&#x7684;&#x7C7B;&#x578B;&#x3002; &#x5168;&#x5C40;&#xFF0C;&#x7C7B;&#x578B; &#xFF1A;p &#x5C5E;&#x6027;&#x4FDD;&#x5B58;&#x5305;&#x542B;&#x8BE5;&#x7C7B;&#x578B;&#x6216;&#x8005;&#x5B57;&#x6BB5;&#x7684;&#x6A21;&#x5757;&#x8DEF;&#x5F84;&#x3002;"},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html":{"title":"","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.8.完成服务.html","body":"8.3.8.完成服务 要获得最佳的编译和完成速度，你可以使用 –wait 命令行参数来启动一个 Haxe 完成服务。你也可以使用 -v 来使服务打印日志。这里是一个例子： 1 haxe -v --wait 6000 然后你可以连接到Haxe服务器，发送命令行参数后跟一个 0 字节，再然后，读取响应（完成结果或者错误信息）。 使用 –connect 命令行参数使Haxe 发送它的完成命令到服务器，而不是直接执行它们： 1 haxe --connect 6000 myproject.hxml 注意，你可以在第一次发送命令行的时候使用 –cwd 参数，改变Haxe服务器的当前工作目录。通常，类路径和其它的文件跟你的项目是相关的。 它如何工作 完成服务会缓存下面的东西： 解析的文件 文件只有在它们被修改或者出现一个解析错误的时候才会再次被解析 haxelib 调用 前面的haxelib调用的结果可以被重用（只用于完成：它们在做编译时是被忽略的） 类型的模块 编译模块在一个成功的编译后会被缓存，并且如果它们的依赖关系没有被修改，则可以在之后的 编译/完成 中重用 你可以了解编译器花费的精确时间，和如何使用完成服务影响它们，通过添加 –times 到命令行即可。 协议 如下面的Haxe/Neko示例展示的，你可以简单的连接到服务端口，并发送所有的命令（或者每行）以0二进制字符结束。然后就可以读取结果。 宏和其它的命令可以记录不是错误的事件。从命令行中，我们可以看到 stdout 打印的和stderr打印的内容的不同。这不是sockt模式下的情况。为了区分两者，日志消息（不是错误消息）前置一个 x01 字符，消息中所有的换行符都被同样的 x01 字符取代。 警告和其它的消息也可以被认为是错误，但是是不致命的。如果一个不致命的错误发生，它会发送一个单行的 x02 消息行。 这里是一些将连接到服务并处理协议细节的代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Test  static function main ()  var new line = \"\\textbackslash\\ n\" ; var s = new neko .net.Socket(); s.connect( new neko .net.Host( \"127.0.0.1\" ), 6000 ); s.write( \"--cwd /my/project\" + new line ); s.write( \"myproject.hxml\" + new line ); s.write( \"\\textbackslash\\ 000\" ); var hasError = false ; for (line in s.read().split( new line ))  switch (line.charCodeAt( 0 ))  1 case 0x01 : neko .Lib.print(line.substr( 1 ).split( \"\\ textbackslash\\ x01\" ).join( new line )); case 0x02 : hasError = true ; default : neko .io.File.stderr().writeString(line + new line );   if (hasError) neko.Sys.exit( 1 );   对宏的影响 完成服务可能对宏的执行（第9章）有一些副作用。"},"8.编译器功能/8.3.编译器服务/8.3.8.完成服务.html#8-3-8-完成服务":{"title":"8.3.8.&#x5B8C;&#x6210;&#x670D;&#x52A1;","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.8.完成服务.html#8-3-8-完成服务","body":"&#x8981;&#x83B7;&#x5F97;&#x6700;&#x4F73;&#x7684;&#x7F16;&#x8BD1;&#x548C;&#x5B8C;&#x6210;&#x901F;&#x5EA6;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; &#x2013;wait &#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;&#x6765;&#x542F;&#x52A8;&#x4E00;&#x4E2A; Haxe &#x5B8C;&#x6210;&#x670D;&#x52A1;&#x3002;&#x4F60;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; -v &#x6765;&#x4F7F;&#x670D;&#x52A1;&#x6253;&#x5370;&#x65E5;&#x5FD7;&#x3002;&#x8FD9;&#x91CC;&#x662F;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; 1 haxe -v --wait 6000 &#x7136;&#x540E;&#x4F60;&#x53EF;&#x4EE5;&#x8FDE;&#x63A5;&#x5230;Haxe&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x53D1;&#x9001;&#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;&#x540E;&#x8DDF;&#x4E00;&#x4E2A; 0 &#x5B57;&#x8282;&#xFF0C;&#x518D;&#x7136;&#x540E;&#xFF0C;&#x8BFB;&#x53D6;&#x54CD;&#x5E94;&#xFF08;&#x5B8C;&#x6210;&#x7ED3;&#x679C;&#x6216;&#x8005;&#x9519;&#x8BEF;&#x4FE1;&#x606F;&#xFF09;&#x3002; &#x4F7F;&#x7528; &#x2013;connect &#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;&#x4F7F;Haxe &#x53D1;&#x9001;&#x5B83;&#x7684;&#x5B8C;&#x6210;&#x547D;&#x4EE4;&#x5230;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x76F4;&#x63A5;&#x6267;&#x884C;&#x5B83;&#x4EEC;&#xFF1A; 1 haxe --connect 6000 myproject.hxml &#x6CE8;&#x610F;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x53D1;&#x9001;&#x547D;&#x4EE4;&#x884C;&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528; &#x2013;cwd &#x53C2;&#x6570;&#xFF0C;&#x6539;&#x53D8;Haxe&#x670D;&#x52A1;&#x5668;&#x7684;&#x5F53;&#x524D;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#x3002;&#x901A;&#x5E38;&#xFF0C;&#x7C7B;&#x8DEF;&#x5F84;&#x548C;&#x5176;&#x5B83;&#x7684;&#x6587;&#x4EF6;&#x8DDF;&#x4F60;&#x7684;&#x9879;&#x76EE;&#x662F;&#x76F8;&#x5173;&#x7684;&#x3002; &#x5B83;&#x5982;&#x4F55;&#x5DE5;&#x4F5C; &#x5B8C;&#x6210;&#x670D;&#x52A1;&#x4F1A;&#x7F13;&#x5B58;&#x4E0B;&#x9762;&#x7684;&#x4E1C;&#x897F;&#xFF1A; &#x89E3;&#x6790;&#x7684;&#x6587;&#x4EF6; &#x6587;&#x4EF6;&#x53EA;&#x6709;&#x5728;&#x5B83;&#x4EEC;&#x88AB;&#x4FEE;&#x6539;&#x6216;&#x8005;&#x51FA;&#x73B0;&#x4E00;&#x4E2A;&#x89E3;&#x6790;&#x9519;&#x8BEF;&#x7684;&#x65F6;&#x5019;&#x624D;&#x4F1A;&#x518D;&#x6B21;&#x88AB;&#x89E3;&#x6790; haxelib &#x8C03;&#x7528; &#x524D;&#x9762;&#x7684;haxelib&#x8C03;&#x7528;&#x7684;&#x7ED3;&#x679C;&#x53EF;&#x4EE5;&#x88AB;&#x91CD;&#x7528;&#xFF08;&#x53EA;&#x7528;&#x4E8E;&#x5B8C;&#x6210;&#xFF1A;&#x5B83;&#x4EEC;&#x5728;&#x505A;&#x7F16;&#x8BD1;&#x65F6;&#x662F;&#x88AB;&#x5FFD;&#x7565;&#x7684;&#xFF09; &#x7C7B;&#x578B;&#x7684;&#x6A21;&#x5757; &#x7F16;&#x8BD1;&#x6A21;&#x5757;&#x5728;&#x4E00;&#x4E2A;&#x6210;&#x529F;&#x7684;&#x7F16;&#x8BD1;&#x540E;&#x4F1A;&#x88AB;&#x7F13;&#x5B58;&#xFF0C;&#x5E76;&#x4E14;&#x5982;&#x679C;&#x5B83;&#x4EEC;&#x7684;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x6CA1;&#x6709;&#x88AB;&#x4FEE;&#x6539;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x5728;&#x4E4B;&#x540E;&#x7684; &#x7F16;&#x8BD1;/&#x5B8C;&#x6210; &#x4E2D;&#x91CD;&#x7528; &#x4F60;&#x53EF;&#x4EE5;&#x4E86;&#x89E3;&#x7F16;&#x8BD1;&#x5668;&#x82B1;&#x8D39;&#x7684;&#x7CBE;&#x786E;&#x65F6;&#x95F4;&#xFF0C;&#x548C;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x5B8C;&#x6210;&#x670D;&#x52A1;&#x5F71;&#x54CD;&#x5B83;&#x4EEC;&#xFF0C;&#x901A;&#x8FC7;&#x6DFB;&#x52A0; &#x2013;times &#x5230;&#x547D;&#x4EE4;&#x884C;&#x5373;&#x53EF;&#x3002; &#x534F;&#x8BAE; &#x5982;&#x4E0B;&#x9762;&#x7684;Haxe/Neko&#x793A;&#x4F8B;&#x5C55;&#x793A;&#x7684;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7684;&#x8FDE;&#x63A5;&#x5230;&#x670D;&#x52A1;&#x7AEF;&#x53E3;&#xFF0C;&#x5E76;&#x53D1;&#x9001;&#x6240;&#x6709;&#x7684;&#x547D;&#x4EE4;&#xFF08;&#x6216;&#x8005;&#x6BCF;&#x884C;&#xFF09;&#x4EE5;0&#x4E8C;&#x8FDB;&#x5236;&#x5B57;&#x7B26;&#x7ED3;&#x675F;&#x3002;&#x7136;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x8BFB;&#x53D6;&#x7ED3;&#x679C;&#x3002; &#x5B8F;&#x548C;&#x5176;&#x5B83;&#x7684;&#x547D;&#x4EE4;&#x53EF;&#x4EE5;&#x8BB0;&#x5F55;&#x4E0D;&#x662F;&#x9519;&#x8BEF;&#x7684;&#x4E8B;&#x4EF6;&#x3002;&#x4ECE;&#x547D;&#x4EE4;&#x884C;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230; stdout &#x6253;&#x5370;&#x7684;&#x548C;stderr&#x6253;&#x5370;&#x7684;&#x5185;&#x5BB9;&#x7684;&#x4E0D;&#x540C;&#x3002;&#x8FD9;&#x4E0D;&#x662F;sockt&#x6A21;&#x5F0F;&#x4E0B;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x4E3A;&#x4E86;&#x533A;&#x5206;&#x4E24;&#x8005;&#xFF0C;&#x65E5;&#x5FD7;&#x6D88;&#x606F;&#xFF08;&#x4E0D;&#x662F;&#x9519;&#x8BEF;&#x6D88;&#x606F;&#xFF09;&#x524D;&#x7F6E;&#x4E00;&#x4E2A; x01 &#x5B57;&#x7B26;&#xFF0C;&#x6D88;&#x606F;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x6362;&#x884C;&#x7B26;&#x90FD;&#x88AB;&#x540C;&#x6837;&#x7684; x01 &#x5B57;&#x7B26;&#x53D6;&#x4EE3;&#x3002; &#x8B66;&#x544A;&#x548C;&#x5176;&#x5B83;&#x7684;&#x6D88;&#x606F;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x9519;&#x8BEF;&#xFF0C;&#x4F46;&#x662F;&#x662F;&#x4E0D;&#x81F4;&#x547D;&#x7684;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x4E0D;&#x81F4;&#x547D;&#x7684;&#x9519;&#x8BEF;&#x53D1;&#x751F;&#xFF0C;&#x5B83;&#x4F1A;&#x53D1;&#x9001;&#x4E00;&#x4E2A;&#x5355;&#x884C;&#x7684; x02 &#x6D88;&#x606F;&#x884C;&#x3002; &#x8FD9;&#x91CC;&#x662F;&#x4E00;&#x4E9B;&#x5C06;&#x8FDE;&#x63A5;&#x5230;&#x670D;&#x52A1;&#x5E76;&#x5904;&#x7406;&#x534F;&#x8BAE;&#x7EC6;&#x8282;&#x7684;&#x4EE3;&#x7801;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Test { static function main () { var new line = \\textbackslash\\ n ; var s = new neko .net.Socket(); s.connect( new neko .net.Host( 127.0.0.1 ), 6000 ); s.write( --cwd /my/project + new line ); s.write( myproject.hxml + new line ); s.write( \\textbackslash\\ 000 ); var hasError = false ; for (line in s.read().split( new line )) { switch (line.charCodeAt( 0 )) { 1 case 0x01 : neko .Lib.print(line.substr( 1 ).split( \\ textbackslash\\ x01 ).join( new line )); case 0x02 : hasError = true ; default : neko .io.File.stderr().writeString(line + new line ); } } if (hasError) neko.Sys.exit( 1 ); } } &#x5BF9;&#x5B8F;&#x7684;&#x5F71;&#x54CD; &#x5B8C;&#x6210;&#x670D;&#x52A1;&#x53EF;&#x80FD;&#x5BF9;&#x5B8F;&#x7684;&#x6267;&#x884C;&#xFF08;&#x7B2C;9&#x7AE0;&#xFF09;&#x6709;&#x4E00;&#x4E9B;&#x526F;&#x4F5C;&#x7528;&#x3002;"},"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html":{"title":"","path":"\\8.编译器功能\\8.4.资源\\8.4.1.嵌入资源.html","body":"8.4.1.嵌入资源 外部文件使用 -resource 编译器参数嵌入： 1 -resource hello_message.txt@welcome @符号后面的字符串是资源标识符，用在代码中用于检索资源。如果它被省略（包括@符号一起）那么文件名则成为资源标识符。"},"8.编译器功能/8.4.资源/8.4.1.嵌入资源.html#8-4-1-嵌入资源":{"title":"8.4.1.&#x5D4C;&#x5165;&#x8D44;&#x6E90;","path":"\\8.编译器功能\\8.4.资源\\8.4.1.嵌入资源.html#8-4-1-嵌入资源","body":"&#x5916;&#x90E8;&#x6587;&#x4EF6;&#x4F7F;&#x7528; -resource &#x7F16;&#x8BD1;&#x5668;&#x53C2;&#x6570;&#x5D4C;&#x5165;&#xFF1A; 1 -resource hello_message.txt@welcome @&#x7B26;&#x53F7;&#x540E;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x8D44;&#x6E90;&#x6807;&#x8BC6;&#x7B26;&#xFF0C;&#x7528;&#x5728;&#x4EE3;&#x7801;&#x4E2D;&#x7528;&#x4E8E;&#x68C0;&#x7D22;&#x8D44;&#x6E90;&#x3002;&#x5982;&#x679C;&#x5B83;&#x88AB;&#x7701;&#x7565;&#xFF08;&#x5305;&#x62EC;@&#x7B26;&#x53F7;&#x4E00;&#x8D77;&#xFF09;&#x90A3;&#x4E48;&#x6587;&#x4EF6;&#x540D;&#x5219;&#x6210;&#x4E3A;&#x8D44;&#x6E90;&#x6807;&#x8BC6;&#x7B26;&#x3002;"},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html":{"title":"","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.编译器服务.html","body":"8.3.编译器服务 本节内容： 8.3.1 概述 8.3.2 字段访问完成 8.3.3 调用参数完成 8.3.4 类型路径完成 8.3.5 使用完成 8.3.6 定位完成 8.3.7 顶级完成 8.3.8 完成服务"},"8.编译器功能/8.3.编译器服务/8.3.编译器服务.html#8-3-编译器服务":{"title":"8.3.&#x7F16;&#x8BD1;&#x5668;&#x670D;&#x52A1;","path":"\\8.编译器功能\\8.3.编译器服务\\8.3.编译器服务.html#8-3-编译器服务","body":"&#x672C;&#x8282;&#x5185;&#x5BB9;&#xFF1A; 8.3.1 &#x6982;&#x8FF0; 8.3.2 &#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x5B8C;&#x6210; 8.3.3 &#x8C03;&#x7528;&#x53C2;&#x6570;&#x5B8C;&#x6210; 8.3.4 &#x7C7B;&#x578B;&#x8DEF;&#x5F84;&#x5B8C;&#x6210; 8.3.5 &#x4F7F;&#x7528;&#x5B8C;&#x6210; 8.3.6 &#x5B9A;&#x4F4D;&#x5B8C;&#x6210; 8.3.7 &#x9876;&#x7EA7;&#x5B8C;&#x6210; 8.3.8 &#x5B8C;&#x6210;&#x670D;&#x52A1;"},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html":{"title":"","path":"\\8.编译器功能\\8.4.资源\\8.4.2.检索文本资源.html","body":"8.4.2.检索文本资源 要检索一个嵌入的资源的内容，我们使用 haxe.Resource 的静态方法 getString ，给它传递一个资源标识符： 1 2 3 4 5 class Main  static function main ()  trace (haxe.Resource.getString( \"welcome\" ));   上面的代码会显示先前我们使用 welcome 作为标识符而包含的 hello_message.txt 文件的内容。"},"8.编译器功能/8.4.资源/8.4.2.检索文本资源.html#8-4-2-检索文本资源":{"title":"8.4.2.&#x68C0;&#x7D22;&#x6587;&#x672C;&#x8D44;&#x6E90;","path":"\\8.编译器功能\\8.4.资源\\8.4.2.检索文本资源.html#8-4-2-检索文本资源","body":"&#x8981;&#x68C0;&#x7D22;&#x4E00;&#x4E2A;&#x5D4C;&#x5165;&#x7684;&#x8D44;&#x6E90;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528; haxe.Resource &#x7684;&#x9759;&#x6001;&#x65B9;&#x6CD5; getString &#xFF0C;&#x7ED9;&#x5B83;&#x4F20;&#x9012;&#x4E00;&#x4E2A;&#x8D44;&#x6E90;&#x6807;&#x8BC6;&#x7B26;&#xFF1A; 1 2 3 4 5 class Main { static function main () { trace (haxe.Resource.getString( welcome )); } } &#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x4F1A;&#x663E;&#x793A;&#x5148;&#x524D;&#x6211;&#x4EEC;&#x4F7F;&#x7528; welcome &#x4F5C;&#x4E3A;&#x6807;&#x8BC6;&#x7B26;&#x800C;&#x5305;&#x542B;&#x7684; hello_message.txt &#x6587;&#x4EF6;&#x7684;&#x5185;&#x5BB9;&#x3002;"},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html":{"title":"","path":"\\8.编译器功能\\8.4.资源\\8.4.3.检索二进制资源.html","body":"8.4.3.检索二进制资源 虽然不推荐嵌入大型二进制文件到应用中，但嵌入二进制数据仍然可能是有用的。一个嵌入的资源的二进制表现可以使用 haxe.Resource 的静态方法 getBytes 访问： 1 2 3 4 5 6 class Main  static function main ()  var bytes = haxe.Resource.getBytes( \"welcome\" ); trace (bytes.readString( 0 , bytes.length));   getBytes方法返回的类型是 haxe.io.Bytes ，它是一个对象，提供对数据的个体字节的访问。"},"8.编译器功能/8.4.资源/8.4.3.检索二进制资源.html#8-4-3-检索二进制资源":{"title":"8.4.3.&#x68C0;&#x7D22;&#x4E8C;&#x8FDB;&#x5236;&#x8D44;&#x6E90;","path":"\\8.编译器功能\\8.4.资源\\8.4.3.检索二进制资源.html#8-4-3-检索二进制资源","body":"&#x867D;&#x7136;&#x4E0D;&#x63A8;&#x8350;&#x5D4C;&#x5165;&#x5927;&#x578B;&#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;&#x5230;&#x5E94;&#x7528;&#x4E2D;&#xFF0C;&#x4F46;&#x5D4C;&#x5165;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x636E;&#x4ECD;&#x7136;&#x53EF;&#x80FD;&#x662F;&#x6709;&#x7528;&#x7684;&#x3002;&#x4E00;&#x4E2A;&#x5D4C;&#x5165;&#x7684;&#x8D44;&#x6E90;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x73B0;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; haxe.Resource &#x7684;&#x9759;&#x6001;&#x65B9;&#x6CD5; getBytes &#x8BBF;&#x95EE;&#xFF1A; 1 2 3 4 5 6 class Main { static function main () { var bytes = haxe.Resource.getBytes( welcome ); trace (bytes.readString( 0 , bytes.length)); } } getBytes&#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x7684;&#x7C7B;&#x578B;&#x662F; haxe.io.Bytes &#xFF0C;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x63D0;&#x4F9B;&#x5BF9;&#x6570;&#x636E;&#x7684;&#x4E2A;&#x4F53;&#x5B57;&#x8282;&#x7684;&#x8BBF;&#x95EE;&#x3002;"},"8.编译器功能/8.4.资源/8.4.4.实现细节.html":{"title":"","path":"\\8.编译器功能\\8.4.资源\\8.4.4.实现细节.html","body":"8.4.4.实现细节 如果有，Haxe使用目标平台的原生资源绑定，否则它提供自己的实现。 Flash 资源被如ByteArray定义嵌入 C# 资源被包含到编译后的程序集 Java 资源被包装进结果的JAR 文件 C++ 资源被存储到全局的字节数组常量 JavaScript 资源被序列化为Haxe序列化格式，并存储到 haxe.Resource 类的一个静态字段 Neko 资源被作为字符串存储到 haxe.Resource 类的一个静态字段"},"8.编译器功能/8.4.资源/8.4.4.实现细节.html#8-4-4-实现细节":{"title":"8.4.4.&#x5B9E;&#x73B0;&#x7EC6;&#x8282;","path":"\\8.编译器功能\\8.4.资源\\8.4.4.实现细节.html#8-4-4-实现细节","body":"&#x5982;&#x679C;&#x6709;&#xFF0C;Haxe&#x4F7F;&#x7528;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x7684;&#x539F;&#x751F;&#x8D44;&#x6E90;&#x7ED1;&#x5B9A;&#xFF0C;&#x5426;&#x5219;&#x5B83;&#x63D0;&#x4F9B;&#x81EA;&#x5DF1;&#x7684;&#x5B9E;&#x73B0;&#x3002; Flash &#x8D44;&#x6E90;&#x88AB;&#x5982;ByteArray&#x5B9A;&#x4E49;&#x5D4C;&#x5165; C# &#x8D44;&#x6E90;&#x88AB;&#x5305;&#x542B;&#x5230;&#x7F16;&#x8BD1;&#x540E;&#x7684;&#x7A0B;&#x5E8F;&#x96C6; Java &#x8D44;&#x6E90;&#x88AB;&#x5305;&#x88C5;&#x8FDB;&#x7ED3;&#x679C;&#x7684;JAR &#x6587;&#x4EF6; C++ &#x8D44;&#x6E90;&#x88AB;&#x5B58;&#x50A8;&#x5230;&#x5168;&#x5C40;&#x7684;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#x5E38;&#x91CF; JavaScript &#x8D44;&#x6E90;&#x88AB;&#x5E8F;&#x5217;&#x5316;&#x4E3A;Haxe&#x5E8F;&#x5217;&#x5316;&#x683C;&#x5F0F;&#xFF0C;&#x5E76;&#x5B58;&#x50A8;&#x5230; haxe.Resource &#x7C7B;&#x7684;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x5B57;&#x6BB5; Neko &#x8D44;&#x6E90;&#x88AB;&#x4F5C;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x5B58;&#x50A8;&#x5230; haxe.Resource &#x7C7B;&#x7684;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x5B57;&#x6BB5;"},"8.编译器功能/8.4.资源/8.4.资源.html":{"title":"","path":"\\8.编译器功能\\8.4.资源\\8.4.资源.html","body":"8.4.资源 Haxe 提供 一个简单的资源嵌入系统，可以用来直接嵌入文件到编译后的应用。 然而它可能不是嵌入大型资源如图像或者音乐到应用文件中的最优选择，在嵌入小型资源如配置或者XML数据时是非常方便的。"},"8.编译器功能/8.4.资源/8.4.资源.html#8-4-资源":{"title":"8.4.&#x8D44;&#x6E90;","path":"\\8.编译器功能\\8.4.资源\\8.4.资源.html#8-4-资源","body":"Haxe &#x63D0;&#x4F9B; &#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x8D44;&#x6E90;&#x5D4C;&#x5165;&#x7CFB;&#x7EDF;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x76F4;&#x63A5;&#x5D4C;&#x5165;&#x6587;&#x4EF6;&#x5230;&#x7F16;&#x8BD1;&#x540E;&#x7684;&#x5E94;&#x7528;&#x3002; &#x7136;&#x800C;&#x5B83;&#x53EF;&#x80FD;&#x4E0D;&#x662F;&#x5D4C;&#x5165;&#x5927;&#x578B;&#x8D44;&#x6E90;&#x5982;&#x56FE;&#x50CF;&#x6216;&#x8005;&#x97F3;&#x4E50;&#x5230;&#x5E94;&#x7528;&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x6700;&#x4F18;&#x9009;&#x62E9;&#xFF0C;&#x5728;&#x5D4C;&#x5165;&#x5C0F;&#x578B;&#x8D44;&#x6E90;&#x5982;&#x914D;&#x7F6E;&#x6216;&#x8005;XML&#x6570;&#x636E;&#x65F6;&#x662F;&#x975E;&#x5E38;&#x65B9;&#x4FBF;&#x7684;&#x3002;"},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html":{"title":"","path":"\\8.编译器功能\\8.5.运行时类型信息\\8.5.1.RTTI 结构.html","body":"8.5.1.RTTI 结构 一般类型信息： path: path 类型（第3.7节）的类型路径 module:包含这个类型的模块（第3.7节）的类型路径 ﬁle: 包含这个类型的 .hx 文件的完整的斜线路径。在没有这个文件的时候可以为 null，例如，如果这个类型通过一个宏（第9章）来定义。 params: 一个字符串类型的数组，表示这个类型的类型参数（第3.2节）的名称。自Haxe 3.2.0起，这不包括约束（第3.2.1节）。 doc: 类型的文档。这个信息只有编译器标记（第6.1节） -D use_rtti_doc 被涉及的时候才可用。否则，或者如果类型没有文档，值为 null 。 isPrivate: 是否类型为 私有（第3.7.1节）。 platforms: 一个字符串列表，表示类型可用的目标平台。 meta: 类型被注解的元数据。 类类型信息： isExtern: 是否类为 外部的（第6.2节） isInterface: 是否类实际上是一个接口（第2.3.3节）。 superClass: 被它的类型路径和类型参数列表定义的它的父类。 interfaces: 被它们的类型路径和类型参数列表定义的接口列表。 ﬁelds: 成员类字段（第4章）列表，描述为类字段信息（第8.5.1节）。 statics: 静态类字段列表，描述为类字段信息（第8.5.1节）。 tdynamic: 如果没有这样的类型存在则为被通过类或者null动态实现（第2.7.2节）的类型。 枚举类型信息： isExtern: 枚举是否为外部的（第6.2节）。 constructors: 枚举的构造函数列表。 抽象类型信息： to:一个包含隐式定义 to 转换（第2.8.1节）的数组。 from: 一个包含隐式定义 from 转换（第2.8.1节）的数组。 impl: 实现类的类型信息（第8.5.1节）。 athis: 抽象类型的潜在类型（第2.8节）。 类字段信息： name: 字段名。 type: 字段类型。 isPublic: 字段是否为 public（第4.4.1节）类型。 isOverride: 字段是否重载（第4.4.4节）另一个字段。 doc: 字段的文档。这个信息只在如果编译器标记（第6.1节） -D use_rtti_doc 被涉及的时候可用。否则，或者如果字段没有文档，值为 null 。 get: 字段的读取访问行为（第4.2节）。 set: 字段的写入访问行为（第4.2节）。 params: 一个字符串数组，表示字段拥有的类型参数（第3.2节）的名称。 从Haxe 3.2.0 起，这不包括约束（第3.2.1节）。 platforms: 一个字符串列表表示字段可用的目标平台。 meta: 字段被注解用的元数据。 line: 字段定义的行号。这个信息只有字段有一个表达式的时候可用。否则值为null。 overloads: 字段可用的重载列表，或者如果没有存在的重载则为 null 。 枚举构造函数信息： name: 构造函数的名称。 args: 构造函数的参数列表，如果没有可用参数则为null。 doc: 构造函数的文档。这个嘻嘻只有如果编译器标记（第6.1节） -D use_rtti_doc 被涉及的时候才可用。否则，或者如果构造函数没有文档，值为null。 platforms: 一个字符串列表，表示构造函数可用的目标平台。 meta: 构造函数被注解的元数据。"},"8.编译器功能/8.5.运行时类型信息/8.5.1.RTTI 结构.html#8-5-1-RTTI-结构":{"title":"8.5.1.RTTI &#x7ED3;&#x6784;","path":"\\8.编译器功能\\8.5.运行时类型信息\\8.5.1.RTTI 结构.html#8-5-1-RTTI-结构","body":"&#x4E00;&#x822C;&#x7C7B;&#x578B;&#x4FE1;&#x606F;&#xFF1A; path: path &#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.7&#x8282;&#xFF09;&#x7684;&#x7C7B;&#x578B;&#x8DEF;&#x5F84; module:&#x5305;&#x542B;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x7684;&#x6A21;&#x5757;&#xFF08;&#x7B2C;3.7&#x8282;&#xFF09;&#x7684;&#x7C7B;&#x578B;&#x8DEF;&#x5F84; &#xFB01;le: &#x5305;&#x542B;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x7684; .hx &#x6587;&#x4EF6;&#x7684;&#x5B8C;&#x6574;&#x7684;&#x659C;&#x7EBF;&#x8DEF;&#x5F84;&#x3002;&#x5728;&#x6CA1;&#x6709;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x4E3A; null&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5B8F;&#xFF08;&#x7B2C;9&#x7AE0;&#xFF09;&#x6765;&#x5B9A;&#x4E49;&#x3002; params: &#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09;&#x7684;&#x540D;&#x79F0;&#x3002;&#x81EA;Haxe 3.2.0&#x8D77;&#xFF0C;&#x8FD9;&#x4E0D;&#x5305;&#x62EC;&#x7EA6;&#x675F;&#xFF08;&#x7B2C;3.2.1&#x8282;&#xFF09;&#x3002; doc: &#x7C7B;&#x578B;&#x7684;&#x6587;&#x6863;&#x3002;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#x53EA;&#x6709;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#xFF08;&#x7B2C;6.1&#x8282;&#xFF09; -D use_rtti_doc &#x88AB;&#x6D89;&#x53CA;&#x7684;&#x65F6;&#x5019;&#x624D;&#x53EF;&#x7528;&#x3002;&#x5426;&#x5219;&#xFF0C;&#x6216;&#x8005;&#x5982;&#x679C;&#x7C7B;&#x578B;&#x6CA1;&#x6709;&#x6587;&#x6863;&#xFF0C;&#x503C;&#x4E3A; null &#x3002; isPrivate: &#x662F;&#x5426;&#x7C7B;&#x578B;&#x4E3A; &#x79C1;&#x6709;&#xFF08;&#x7B2C;3.7.1&#x8282;&#xFF09;&#x3002; platforms: &#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5217;&#x8868;&#xFF0C;&#x8868;&#x793A;&#x7C7B;&#x578B;&#x53EF;&#x7528;&#x7684;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002; meta: &#x7C7B;&#x578B;&#x88AB;&#x6CE8;&#x89E3;&#x7684;&#x5143;&#x6570;&#x636E;&#x3002; &#x7C7B;&#x7C7B;&#x578B;&#x4FE1;&#x606F;&#xFF1A; isExtern: &#x662F;&#x5426;&#x7C7B;&#x4E3A; &#x5916;&#x90E8;&#x7684;&#xFF08;&#x7B2C;6.2&#x8282;&#xFF09; isInterface: &#x662F;&#x5426;&#x7C7B;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#xFF08;&#x7B2C;2.3.3&#x8282;&#xFF09;&#x3002; superClass: &#x88AB;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x8DEF;&#x5F84;&#x548C;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x5217;&#x8868;&#x5B9A;&#x4E49;&#x7684;&#x5B83;&#x7684;&#x7236;&#x7C7B;&#x3002; interfaces: &#x88AB;&#x5B83;&#x4EEC;&#x7684;&#x7C7B;&#x578B;&#x8DEF;&#x5F84;&#x548C;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x5217;&#x8868;&#x5B9A;&#x4E49;&#x7684;&#x63A5;&#x53E3;&#x5217;&#x8868;&#x3002; &#xFB01;elds: &#x6210;&#x5458;&#x7C7B;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;4&#x7AE0;&#xFF09;&#x5217;&#x8868;&#xFF0C;&#x63CF;&#x8FF0;&#x4E3A;&#x7C7B;&#x5B57;&#x6BB5;&#x4FE1;&#x606F;&#xFF08;&#x7B2C;8.5.1&#x8282;&#xFF09;&#x3002; statics: &#x9759;&#x6001;&#x7C7B;&#x5B57;&#x6BB5;&#x5217;&#x8868;&#xFF0C;&#x63CF;&#x8FF0;&#x4E3A;&#x7C7B;&#x5B57;&#x6BB5;&#x4FE1;&#x606F;&#xFF08;&#x7B2C;8.5.1&#x8282;&#xFF09;&#x3002; tdynamic: &#x5982;&#x679C;&#x6CA1;&#x6709;&#x8FD9;&#x6837;&#x7684;&#x7C7B;&#x578B;&#x5B58;&#x5728;&#x5219;&#x4E3A;&#x88AB;&#x901A;&#x8FC7;&#x7C7B;&#x6216;&#x8005;null&#x52A8;&#x6001;&#x5B9E;&#x73B0;&#xFF08;&#x7B2C;2.7.2&#x8282;&#xFF09;&#x7684;&#x7C7B;&#x578B;&#x3002; &#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x4FE1;&#x606F;&#xFF1A; isExtern: &#x679A;&#x4E3E;&#x662F;&#x5426;&#x4E3A;&#x5916;&#x90E8;&#x7684;&#xFF08;&#x7B2C;6.2&#x8282;&#xFF09;&#x3002; constructors: &#x679A;&#x4E3E;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x5217;&#x8868;&#x3002; &#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x4FE1;&#x606F;&#xFF1A; to:&#x4E00;&#x4E2A;&#x5305;&#x542B;&#x9690;&#x5F0F;&#x5B9A;&#x4E49; to &#x8F6C;&#x6362;&#xFF08;&#x7B2C;2.8.1&#x8282;&#xFF09;&#x7684;&#x6570;&#x7EC4;&#x3002; from: &#x4E00;&#x4E2A;&#x5305;&#x542B;&#x9690;&#x5F0F;&#x5B9A;&#x4E49; from &#x8F6C;&#x6362;&#xFF08;&#x7B2C;2.8.1&#x8282;&#xFF09;&#x7684;&#x6570;&#x7EC4;&#x3002; impl: &#x5B9E;&#x73B0;&#x7C7B;&#x7684;&#x7C7B;&#x578B;&#x4FE1;&#x606F;&#xFF08;&#x7B2C;8.5.1&#x8282;&#xFF09;&#x3002; athis: &#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.8&#x8282;&#xFF09;&#x3002; &#x7C7B;&#x5B57;&#x6BB5;&#x4FE1;&#x606F;&#xFF1A; name: &#x5B57;&#x6BB5;&#x540D;&#x3002; type: &#x5B57;&#x6BB5;&#x7C7B;&#x578B;&#x3002; isPublic: &#x5B57;&#x6BB5;&#x662F;&#x5426;&#x4E3A; public&#xFF08;&#x7B2C;4.4.1&#x8282;&#xFF09;&#x7C7B;&#x578B;&#x3002; isOverride: &#x5B57;&#x6BB5;&#x662F;&#x5426;&#x91CD;&#x8F7D;&#xFF08;&#x7B2C;4.4.4&#x8282;&#xFF09;&#x53E6;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#x3002; doc: &#x5B57;&#x6BB5;&#x7684;&#x6587;&#x6863;&#x3002;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#x53EA;&#x5728;&#x5982;&#x679C;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#xFF08;&#x7B2C;6.1&#x8282;&#xFF09; -D use_rtti_doc &#x88AB;&#x6D89;&#x53CA;&#x7684;&#x65F6;&#x5019;&#x53EF;&#x7528;&#x3002;&#x5426;&#x5219;&#xFF0C;&#x6216;&#x8005;&#x5982;&#x679C;&#x5B57;&#x6BB5;&#x6CA1;&#x6709;&#x6587;&#x6863;&#xFF0C;&#x503C;&#x4E3A; null &#x3002; get: &#x5B57;&#x6BB5;&#x7684;&#x8BFB;&#x53D6;&#x8BBF;&#x95EE;&#x884C;&#x4E3A;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#x3002; set: &#x5B57;&#x6BB5;&#x7684;&#x5199;&#x5165;&#x8BBF;&#x95EE;&#x884C;&#x4E3A;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#x3002; params: &#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x6570;&#x7EC4;&#xFF0C;&#x8868;&#x793A;&#x5B57;&#x6BB5;&#x62E5;&#x6709;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09;&#x7684;&#x540D;&#x79F0;&#x3002; &#x4ECE;Haxe 3.2.0 &#x8D77;&#xFF0C;&#x8FD9;&#x4E0D;&#x5305;&#x62EC;&#x7EA6;&#x675F;&#xFF08;&#x7B2C;3.2.1&#x8282;&#xFF09;&#x3002; platforms: &#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5217;&#x8868;&#x8868;&#x793A;&#x5B57;&#x6BB5;&#x53EF;&#x7528;&#x7684;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002; meta: &#x5B57;&#x6BB5;&#x88AB;&#x6CE8;&#x89E3;&#x7528;&#x7684;&#x5143;&#x6570;&#x636E;&#x3002; line: &#x5B57;&#x6BB5;&#x5B9A;&#x4E49;&#x7684;&#x884C;&#x53F7;&#x3002;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#x53EA;&#x6709;&#x5B57;&#x6BB5;&#x6709;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x65F6;&#x5019;&#x53EF;&#x7528;&#x3002;&#x5426;&#x5219;&#x503C;&#x4E3A;null&#x3002; overloads: &#x5B57;&#x6BB5;&#x53EF;&#x7528;&#x7684;&#x91CD;&#x8F7D;&#x5217;&#x8868;&#xFF0C;&#x6216;&#x8005;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5B58;&#x5728;&#x7684;&#x91CD;&#x8F7D;&#x5219;&#x4E3A; null &#x3002; &#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4FE1;&#x606F;&#xFF1A; name: &#x6784;&#x9020;&#x51FD;&#x6570;&#x7684;&#x540D;&#x79F0;&#x3002; args: &#x6784;&#x9020;&#x51FD;&#x6570;&#x7684;&#x53C2;&#x6570;&#x5217;&#x8868;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x53EF;&#x7528;&#x53C2;&#x6570;&#x5219;&#x4E3A;null&#x3002; doc: &#x6784;&#x9020;&#x51FD;&#x6570;&#x7684;&#x6587;&#x6863;&#x3002;&#x8FD9;&#x4E2A;&#x563B;&#x563B;&#x53EA;&#x6709;&#x5982;&#x679C;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#xFF08;&#x7B2C;6.1&#x8282;&#xFF09; -D use_rtti_doc &#x88AB;&#x6D89;&#x53CA;&#x7684;&#x65F6;&#x5019;&#x624D;&#x53EF;&#x7528;&#x3002;&#x5426;&#x5219;&#xFF0C;&#x6216;&#x8005;&#x5982;&#x679C;&#x6784;&#x9020;&#x51FD;&#x6570;&#x6CA1;&#x6709;&#x6587;&#x6863;&#xFF0C;&#x503C;&#x4E3A;null&#x3002; platforms: &#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5217;&#x8868;&#xFF0C;&#x8868;&#x793A;&#x6784;&#x9020;&#x51FD;&#x6570;&#x53EF;&#x7528;&#x7684;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002; meta: &#x6784;&#x9020;&#x51FD;&#x6570;&#x88AB;&#x6CE8;&#x89E3;&#x7684;&#x5143;&#x6570;&#x636E;&#x3002;"},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html":{"title":"","path":"\\8.编译器功能\\8.5.运行时类型信息\\8.5.运行时类型信息.html","body":"8.5.运行时类型信息 Haxe编译器为注解的类或者通过 :rtti 元数据注解的扩展的类生成运行时类型信息（RTTI）。这个信息被存储为一个 XML 字符串到一个字段 __rtti，并可以通过 haxe.rttiXmlParser 进行处理。结果的结构被描述为 RTTI 结构（第8.5.1节）。 从 Haxe 3.2.0 以后： 类型 haxe.rtti.Rtti 已经被引入，来简化RTTI相关的工作 。检索这个信息现在非常简单： 1 2 3 4 5 6 7 8 @:rtti class Main  var x: String ; static function main ()  var rtti = haxe.rtti.Rtti.getRtti(Main); trace (rtti);  "},"8.编译器功能/8.5.运行时类型信息/8.5.运行时类型信息.html#8-5-运行时类型信息":{"title":"8.5.&#x8FD0;&#x884C;&#x65F6;&#x7C7B;&#x578B;&#x4FE1;&#x606F;","path":"\\8.编译器功能\\8.5.运行时类型信息\\8.5.运行时类型信息.html#8-5-运行时类型信息","body":"Haxe&#x7F16;&#x8BD1;&#x5668;&#x4E3A;&#x6CE8;&#x89E3;&#x7684;&#x7C7B;&#x6216;&#x8005;&#x901A;&#x8FC7; :rtti &#x5143;&#x6570;&#x636E;&#x6CE8;&#x89E3;&#x7684;&#x6269;&#x5C55;&#x7684;&#x7C7B;&#x751F;&#x6210;&#x8FD0;&#x884C;&#x65F6;&#x7C7B;&#x578B;&#x4FE1;&#x606F;&#xFF08;RTTI&#xFF09;&#x3002;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#x88AB;&#x5B58;&#x50A8;&#x4E3A;&#x4E00;&#x4E2A; XML &#x5B57;&#x7B26;&#x4E32;&#x5230;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5; __rtti&#xFF0C;&#x5E76;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; haxe.rttiXmlParser &#x8FDB;&#x884C;&#x5904;&#x7406;&#x3002;&#x7ED3;&#x679C;&#x7684;&#x7ED3;&#x6784;&#x88AB;&#x63CF;&#x8FF0;&#x4E3A; RTTI &#x7ED3;&#x6784;&#xFF08;&#x7B2C;8.5.1&#x8282;&#xFF09;&#x3002; &#x4ECE; Haxe 3.2.0 &#x4EE5;&#x540E;&#xFF1A; &#x7C7B;&#x578B; haxe.rtti.Rtti &#x5DF2;&#x7ECF;&#x88AB;&#x5F15;&#x5165;&#xFF0C;&#x6765;&#x7B80;&#x5316;RTTI&#x76F8;&#x5173;&#x7684;&#x5DE5;&#x4F5C; &#x3002;&#x68C0;&#x7D22;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#x73B0;&#x5728;&#x975E;&#x5E38;&#x7B80;&#x5355;&#xFF1A; 1 2 3 4 5 6 7 8 @:rtti class Main { var x: String ; static function main () { var rtti = haxe.rtti.Rtti.getRtti(Main); trace (rtti); } }"},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html":{"title":"","path":"\\8.编译器功能\\8.6.静态分析仪\\8.6.静态分析仪.html","body":"8.6.静态分析仪 从 Haxe 3.3.0 起： Haxe 3.3.0 为代码优化引入了一个新的静态分析仪。通过使用 -D analyzer 编译器标记（第7.1节）来启用，由多个模块（第8.6节）组成，可以被用编译器标记（第7.1节）进行全局配置，以及在 类型级别和字段级别被用一个编译器元数据（第8.1节）进行全局配置。 全局配置： 要全局启动一个分析仪模块，使用 -D analyzer-module 。要全局禁用一个模块，使用 -D analyzer-no-module。两种情况，“module”表示被禁用或启用的模块的名字： 1 2 3 4 # Global enable from command line haxe -D analyzer-module # Global disable from command line haxe -D analyzer-no-module 本地配置： 要对一个给定的类型或者字段启动一个分析仪模块，使用 @:analyzer(module)。要禁用一个模块，使用 @:analyzer(no_module) 。两种情况，“module”表示要禁用或者启用的模块的名字： 1 2 3 4 5 6 7 @:analyzer(module) class C  @:analyzer(module) function f()   // Field-level enable @:analyzer(no_module) function f()   // Field-level disable  @:analyzer(no_module) class D   // Type-level disable Modules 静态分析仪当前带有如下的模块。如果 -D analyzer 被使用，除非注明否则它们是被启用的。 const_propagation : 实现稀少条件的常量传播来促进编译时知道的值到使用的地方。也侦测无效的分支。 copy_propagation : 侦测别名化其它局部变量的局部变量并相应的进行替换。 local dce : 侦测并移除无用的局部变量。 fusion : 在单一事件情况下移动变量表达式到它的使用中。在Flash和 Java目标语言中是禁用的。 purity_inference : 推断是否字段为 “纯粹的”，即，没有任何的副作用。这可以改善 fusion 模块的影响。 unreachable_code : 报告无法达到的代码。"},"8.编译器功能/8.6.静态分析仪/8.6.静态分析仪.html#8-6-静态分析仪":{"title":"8.6.&#x9759;&#x6001;&#x5206;&#x6790;&#x4EEA;","path":"\\8.编译器功能\\8.6.静态分析仪\\8.6.静态分析仪.html#8-6-静态分析仪","body":"&#x4ECE; Haxe 3.3.0 &#x8D77;&#xFF1A; Haxe 3.3.0 &#x4E3A;&#x4EE3;&#x7801;&#x4F18;&#x5316;&#x5F15;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x9759;&#x6001;&#x5206;&#x6790;&#x4EEA;&#x3002;&#x901A;&#x8FC7;&#x4F7F;&#x7528; -D analyzer &#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#xFF08;&#x7B2C;7.1&#x8282;&#xFF09;&#x6765;&#x542F;&#x7528;&#xFF0C;&#x7531;&#x591A;&#x4E2A;&#x6A21;&#x5757;&#xFF08;&#x7B2C;8.6&#x8282;&#xFF09;&#x7EC4;&#x6210;&#xFF0C;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x7F16;&#x8BD1;&#x5668;&#x6807;&#x8BB0;&#xFF08;&#x7B2C;7.1&#x8282;&#xFF09;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x914D;&#x7F6E;&#xFF0C;&#x4EE5;&#x53CA;&#x5728; &#x7C7B;&#x578B;&#x7EA7;&#x522B;&#x548C;&#x5B57;&#x6BB5;&#x7EA7;&#x522B;&#x88AB;&#x7528;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x5668;&#x5143;&#x6570;&#x636E;&#xFF08;&#x7B2C;8.1&#x8282;&#xFF09;&#x8FDB;&#x884C;&#x5168;&#x5C40;&#x914D;&#x7F6E;&#x3002; &#x5168;&#x5C40;&#x914D;&#x7F6E;&#xFF1A; &#x8981;&#x5168;&#x5C40;&#x542F;&#x52A8;&#x4E00;&#x4E2A;&#x5206;&#x6790;&#x4EEA;&#x6A21;&#x5757;&#xFF0C;&#x4F7F;&#x7528; -D analyzer-module &#x3002;&#x8981;&#x5168;&#x5C40;&#x7981;&#x7528;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x4F7F;&#x7528; -D analyzer-no-module&#x3002;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x201C;module&#x201D;&#x8868;&#x793A;&#x88AB;&#x7981;&#x7528;&#x6216;&#x542F;&#x7528;&#x7684;&#x6A21;&#x5757;&#x7684;&#x540D;&#x5B57;&#xFF1A; 1 2 3 4 # Global enable from command line haxe -D analyzer-module # Global disable from command line haxe -D analyzer-no-module &#x672C;&#x5730;&#x914D;&#x7F6E;&#xFF1A; &#x8981;&#x5BF9;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#x6216;&#x8005;&#x5B57;&#x6BB5;&#x542F;&#x52A8;&#x4E00;&#x4E2A;&#x5206;&#x6790;&#x4EEA;&#x6A21;&#x5757;&#xFF0C;&#x4F7F;&#x7528; @:analyzer(module)&#x3002;&#x8981;&#x7981;&#x7528;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x4F7F;&#x7528; @:analyzer(no_module) &#x3002;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x201C;module&#x201D;&#x8868;&#x793A;&#x8981;&#x7981;&#x7528;&#x6216;&#x8005;&#x542F;&#x7528;&#x7684;&#x6A21;&#x5757;&#x7684;&#x540D;&#x5B57;&#xFF1A; 1 2 3 4 5 6 7 @:analyzer(module) class C { @:analyzer(module) function f() { } // Field-level enable @:analyzer(no_module) function f() { } // Field-level disable } @:analyzer(no_module) class D { } // Type-level disable Modules &#x9759;&#x6001;&#x5206;&#x6790;&#x4EEA;&#x5F53;&#x524D;&#x5E26;&#x6709;&#x5982;&#x4E0B;&#x7684;&#x6A21;&#x5757;&#x3002;&#x5982;&#x679C; -D analyzer &#x88AB;&#x4F7F;&#x7528;&#xFF0C;&#x9664;&#x975E;&#x6CE8;&#x660E;&#x5426;&#x5219;&#x5B83;&#x4EEC;&#x662F;&#x88AB;&#x542F;&#x7528;&#x7684;&#x3002; const_propagation : &#x5B9E;&#x73B0;&#x7A00;&#x5C11;&#x6761;&#x4EF6;&#x7684;&#x5E38;&#x91CF;&#x4F20;&#x64AD;&#x6765;&#x4FC3;&#x8FDB;&#x7F16;&#x8BD1;&#x65F6;&#x77E5;&#x9053;&#x7684;&#x503C;&#x5230;&#x4F7F;&#x7528;&#x7684;&#x5730;&#x65B9;&#x3002;&#x4E5F;&#x4FA6;&#x6D4B;&#x65E0;&#x6548;&#x7684;&#x5206;&#x652F;&#x3002; copy_propagation : &#x4FA6;&#x6D4B;&#x522B;&#x540D;&#x5316;&#x5176;&#x5B83;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x5E76;&#x76F8;&#x5E94;&#x7684;&#x8FDB;&#x884C;&#x66FF;&#x6362;&#x3002; local dce : &#x4FA6;&#x6D4B;&#x5E76;&#x79FB;&#x9664;&#x65E0;&#x7528;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x3002; fusion : &#x5728;&#x5355;&#x4E00;&#x4E8B;&#x4EF6;&#x60C5;&#x51B5;&#x4E0B;&#x79FB;&#x52A8;&#x53D8;&#x91CF;&#x8868;&#x8FBE;&#x5F0F;&#x5230;&#x5B83;&#x7684;&#x4F7F;&#x7528;&#x4E2D;&#x3002;&#x5728;Flash&#x548C; Java&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#x662F;&#x7981;&#x7528;&#x7684;&#x3002; purity_inference : &#x63A8;&#x65AD;&#x662F;&#x5426;&#x5B57;&#x6BB5;&#x4E3A; &#x201C;&#x7EAF;&#x7CB9;&#x7684;&#x201D;&#xFF0C;&#x5373;&#xFF0C;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x7684;&#x526F;&#x4F5C;&#x7528;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x6539;&#x5584; fusion &#x6A21;&#x5757;&#x7684;&#x5F71;&#x54CD;&#x3002; unreachable_code : &#x62A5;&#x544A;&#x65E0;&#x6CD5;&#x8FBE;&#x5230;&#x7684;&#x4EE3;&#x7801;&#x3002;"},"9.宏/9.1.宏上下文/9.1.宏上下文.html":{"title":"","path":"\\9.宏\\9.1.宏上下文\\9.1.宏上下文.html","body":"9.1.宏上下文 定义：宏上下文 宏的上下文是宏被执行的环境。根据宏的类型，它可以被认为是一个类被构建，或者一个函数被类型化。上下文的信息可以通过 haxe.macro.Context API 获得。 Haxe 的宏根据宏的类型有对不同上下文信息的访问。除了查询这些信息，上下文也允许一些修改比如定义一个新的类型或者注册某个回调。重要的是，理解不是所有信息对所有种类的宏都可用，就如后面例子所证明的： 初始化宏将发现 Context.getLocal*() 方法返回 null 。没有局部类型或者方法在初始化宏的上下文中。 只有构建宏从 Context.getBuildFields() 方法得到正确的返回值。对于其它种类的宏没有字段被构建。 构建宏有一个局部类型（如果不完全的），但是没有局部方法，所以 Context.getLocalMethod() 返回 null 。 上下文API被 haxe.macro.Compiler API 补充，在初始化宏（第9.7节）中详述。而这个API可以用于所有宏的种类，必须注意初始化宏的任何外部修改。这源于未定义的构建顺序（第9.6.3节）的自然限制，可能导致如一个标记定义通过 Compiler.define() 在一个对应这个标记的条件编译检查之前或之后生效。"},"9.宏/9.1.宏上下文/9.1.宏上下文.html#9-1-宏上下文":{"title":"9.1.&#x5B8F;&#x4E0A;&#x4E0B;&#x6587;","path":"\\9.宏\\9.1.宏上下文\\9.1.宏上下文.html#9-1-宏上下文","body":"&#x5B9A;&#x4E49;&#xFF1A;&#x5B8F;&#x4E0A;&#x4E0B;&#x6587; &#x5B8F;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x662F;&#x5B8F;&#x88AB;&#x6267;&#x884C;&#x7684;&#x73AF;&#x5883;&#x3002;&#x6839;&#x636E;&#x5B8F;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x88AB;&#x6784;&#x5EFA;&#xFF0C;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x88AB;&#x7C7B;&#x578B;&#x5316;&#x3002;&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x4FE1;&#x606F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; haxe.macro.Context API &#x83B7;&#x5F97;&#x3002; Haxe &#x7684;&#x5B8F;&#x6839;&#x636E;&#x5B8F;&#x7684;&#x7C7B;&#x578B;&#x6709;&#x5BF9;&#x4E0D;&#x540C;&#x4E0A;&#x4E0B;&#x6587;&#x4FE1;&#x606F;&#x7684;&#x8BBF;&#x95EE;&#x3002;&#x9664;&#x4E86;&#x67E5;&#x8BE2;&#x8FD9;&#x4E9B;&#x4FE1;&#x606F;&#xFF0C;&#x4E0A;&#x4E0B;&#x6587;&#x4E5F;&#x5141;&#x8BB8;&#x4E00;&#x4E9B;&#x4FEE;&#x6539;&#x6BD4;&#x5982;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7C7B;&#x578B;&#x6216;&#x8005;&#x6CE8;&#x518C;&#x67D0;&#x4E2A;&#x56DE;&#x8C03;&#x3002;&#x91CD;&#x8981;&#x7684;&#x662F;&#xFF0C;&#x7406;&#x89E3;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x4FE1;&#x606F;&#x5BF9;&#x6240;&#x6709;&#x79CD;&#x7C7B;&#x7684;&#x5B8F;&#x90FD;&#x53EF;&#x7528;&#xFF0C;&#x5C31;&#x5982;&#x540E;&#x9762;&#x4F8B;&#x5B50;&#x6240;&#x8BC1;&#x660E;&#x7684;&#xFF1A; &#x521D;&#x59CB;&#x5316;&#x5B8F;&#x5C06;&#x53D1;&#x73B0; Context.getLocal*() &#x65B9;&#x6CD5;&#x8FD4;&#x56DE; null &#x3002;&#x6CA1;&#x6709;&#x5C40;&#x90E8;&#x7C7B;&#x578B;&#x6216;&#x8005;&#x65B9;&#x6CD5;&#x5728;&#x521D;&#x59CB;&#x5316;&#x5B8F;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x3002; &#x53EA;&#x6709;&#x6784;&#x5EFA;&#x5B8F;&#x4ECE; Context.getBuildFields() &#x65B9;&#x6CD5;&#x5F97;&#x5230;&#x6B63;&#x786E;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x3002;&#x5BF9;&#x4E8E;&#x5176;&#x5B83;&#x79CD;&#x7C7B;&#x7684;&#x5B8F;&#x6CA1;&#x6709;&#x5B57;&#x6BB5;&#x88AB;&#x6784;&#x5EFA;&#x3002; &#x6784;&#x5EFA;&#x5B8F;&#x6709;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x7C7B;&#x578B;&#xFF08;&#x5982;&#x679C;&#x4E0D;&#x5B8C;&#x5168;&#x7684;&#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x6709;&#x5C40;&#x90E8;&#x65B9;&#x6CD5;&#xFF0C;&#x6240;&#x4EE5; Context.getLocalMethod() &#x8FD4;&#x56DE; null &#x3002; &#x4E0A;&#x4E0B;&#x6587;API&#x88AB; haxe.macro.Compiler API &#x8865;&#x5145;&#xFF0C;&#x5728;&#x521D;&#x59CB;&#x5316;&#x5B8F;&#xFF08;&#x7B2C;9.7&#x8282;&#xFF09;&#x4E2D;&#x8BE6;&#x8FF0;&#x3002;&#x800C;&#x8FD9;&#x4E2A;API&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x6240;&#x6709;&#x5B8F;&#x7684;&#x79CD;&#x7C7B;&#xFF0C;&#x5FC5;&#x987B;&#x6CE8;&#x610F;&#x521D;&#x59CB;&#x5316;&#x5B8F;&#x7684;&#x4EFB;&#x4F55;&#x5916;&#x90E8;&#x4FEE;&#x6539;&#x3002;&#x8FD9;&#x6E90;&#x4E8E;&#x672A;&#x5B9A;&#x4E49;&#x7684;&#x6784;&#x5EFA;&#x987A;&#x5E8F;&#xFF08;&#x7B2C;9.6.3&#x8282;&#xFF09;&#x7684;&#x81EA;&#x7136;&#x9650;&#x5236;&#xFF0C;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x5982;&#x4E00;&#x4E2A;&#x6807;&#x8BB0;&#x5B9A;&#x4E49;&#x901A;&#x8FC7; Compiler.define() &#x5728;&#x4E00;&#x4E2A;&#x5BF9;&#x5E94;&#x8FD9;&#x4E2A;&#x6807;&#x8BB0;&#x7684;&#x6761;&#x4EF6;&#x7F16;&#x8BD1;&#x68C0;&#x67E5;&#x4E4B;&#x524D;&#x6216;&#x4E4B;&#x540E;&#x751F;&#x6548;&#x3002;"},"9.宏/9.2.参数/9.2.1.ExprOf.html":{"title":"","path":"\\9.宏\\9.2.参数\\9.2.1.ExprOf.html","body":"9.2.1.ExprOf 由于Expr兼容任何可能的输入，Haxe提供了一个类型 haxe.macro.ExprOf 。大多数情况下，这个类型和Expr完全相同的，但是它允许限制接受的表达式的类型。这在结合宏和静态扩展（第6.3节）时可以提供帮助： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import haxe.macro.Expr; using Main; class Main  static public function main ()  identity( \"foo\" ); identity( 1 ); \"foo\" .identity(); // Int has no field identity //1.identity();  macro static function identity (e: ExprOf  String )  return e;   两个对 identity 的直接调用被接受，即使参数声明为 ExprOf 。这可能有点出乎意料，Int 1 被接受，但是它是关于宏参数（第9.2节）中解释的一个合乎逻辑的结论：参数表达式从不被类型化，所以它不可能让编译器使用合一（第3.5节）检查它们的兼容性。 下两行使用静态扩展（注意 using Main）的则有所不同：对于这些它是强制首先类型化左侧（“foo” 和 1）来理解identity字段访问。这使它可以检查参数类型对应的类型，使 1.identity() 不把 Main.identity() 作为一个适用的字段。"},"9.宏/9.2.参数/9.2.1.ExprOf.html#9-2-1-ExprOf":{"title":"9.2.1.ExprOf","path":"\\9.宏\\9.2.参数\\9.2.1.ExprOf.html#9-2-1-ExprOf","body":"&#x7531;&#x4E8E;Expr&#x517C;&#x5BB9;&#x4EFB;&#x4F55;&#x53EF;&#x80FD;&#x7684;&#x8F93;&#x5165;&#xFF0C;Haxe&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x7C7B;&#x578B; haxe.macro.ExprOf &#x3002;&#x5927;&#x591A;&#x6570;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x548C;Expr&#x5B8C;&#x5168;&#x76F8;&#x540C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x5141;&#x8BB8;&#x9650;&#x5236;&#x63A5;&#x53D7;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x5728;&#x7ED3;&#x5408;&#x5B8F;&#x548C;&#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09;&#x65F6;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x5E2E;&#x52A9;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import haxe.macro.Expr; using Main; class Main { static public function main () { identity( foo ); identity( 1 ); foo .identity(); // Int has no field identity //1.identity(); } macro static function identity (e: ExprOf  String ) { return e; } } &#x4E24;&#x4E2A;&#x5BF9; identity &#x7684;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x88AB;&#x63A5;&#x53D7;&#xFF0C;&#x5373;&#x4F7F;&#x53C2;&#x6570;&#x58F0;&#x660E;&#x4E3A; ExprOf &#x3002;&#x8FD9;&#x53EF;&#x80FD;&#x6709;&#x70B9;&#x51FA;&#x4E4E;&#x610F;&#x6599;&#xFF0C;Int 1 &#x88AB;&#x63A5;&#x53D7;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x662F;&#x5173;&#x4E8E;&#x5B8F;&#x53C2;&#x6570;&#xFF08;&#x7B2C;9.2&#x8282;&#xFF09;&#x4E2D;&#x89E3;&#x91CA;&#x7684;&#x4E00;&#x4E2A;&#x5408;&#x4E4E;&#x903B;&#x8F91;&#x7684;&#x7ED3;&#x8BBA;&#xFF1A;&#x53C2;&#x6570;&#x8868;&#x8FBE;&#x5F0F;&#x4ECE;&#x4E0D;&#x88AB;&#x7C7B;&#x578B;&#x5316;&#xFF0C;&#x6240;&#x4EE5;&#x5B83;&#x4E0D;&#x53EF;&#x80FD;&#x8BA9;&#x7F16;&#x8BD1;&#x5668;&#x4F7F;&#x7528;&#x5408;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09;&#x68C0;&#x67E5;&#x5B83;&#x4EEC;&#x7684;&#x517C;&#x5BB9;&#x6027;&#x3002; &#x4E0B;&#x4E24;&#x884C;&#x4F7F;&#x7528;&#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x6CE8;&#x610F; using Main&#xFF09;&#x7684;&#x5219;&#x6709;&#x6240;&#x4E0D;&#x540C;&#xFF1A;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E9B;&#x5B83;&#x662F;&#x5F3A;&#x5236;&#x9996;&#x5148;&#x7C7B;&#x578B;&#x5316;&#x5DE6;&#x4FA7;&#xFF08;&#x201C;foo&#x201D; &#x548C; 1&#xFF09;&#x6765;&#x7406;&#x89E3;identity&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x3002;&#x8FD9;&#x4F7F;&#x5B83;&#x53EF;&#x4EE5;&#x68C0;&#x67E5;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x4F7F; 1.identity() &#x4E0D;&#x628A; Main.identity() &#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x9002;&#x7528;&#x7684;&#x5B57;&#x6BB5;&#x3002;"},"9.宏/9.2.参数/9.2.2.常数表达式.html":{"title":"","path":"\\9.宏\\9.2.参数\\9.2.2.常数表达式.html","body":"9.2.2.常数表达式 一个宏可以被声明接受常数（第5.2节）参数： 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main  static public function main ()  const( \"foo\" , 1 , 1.5 , true );  macro static function const (s: String , i: Int , f: Float , b: Bool )  trace (s); trace (i); trace (f); trace (b); return macro null ;   通过这些，就不需要绕过表达式，因为编译器可以直接使用提供的常数。"},"9.宏/9.2.参数/9.2.2.常数表达式.html#9-2-2-常数表达式":{"title":"9.2.2.&#x5E38;&#x6570;&#x8868;&#x8FBE;&#x5F0F;","path":"\\9.宏\\9.2.参数\\9.2.2.常数表达式.html#9-2-2-常数表达式","body":"&#x4E00;&#x4E2A;&#x5B8F;&#x53EF;&#x4EE5;&#x88AB;&#x58F0;&#x660E;&#x63A5;&#x53D7;&#x5E38;&#x6570;&#xFF08;&#x7B2C;5.2&#x8282;&#xFF09;&#x53C2;&#x6570;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main { static public function main () { const( foo , 1 , 1.5 , true ); } macro static function const (s: String , i: Int , f: Float , b: Bool ) { trace (s); trace (i); trace (f); trace (b); return macro null ; } } &#x901A;&#x8FC7;&#x8FD9;&#x4E9B;&#xFF0C;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x7ED5;&#x8FC7;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x56E0;&#x4E3A;&#x7F16;&#x8BD1;&#x5668;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x63D0;&#x4F9B;&#x7684;&#x5E38;&#x6570;&#x3002;"},"9.宏/9.2.参数/9.2.3.其它的参数.html":{"title":"","path":"\\9.宏\\9.2.参数\\9.2.3.其它的参数.html","body":"9.2.3.其它的参数 如果一个宏最后的参数是 Array类型，宏可以以数组形式接受一个任意数量的额外参数： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import haxe.macro.Expr; class Main  static public function main ()  myMacro( \"foo\" , a, b, c);  macro static function myMacro (e1: Expr , extra: Array Expr)  for (e in extra)  trace (e);  return macro null ;  "},"9.宏/9.2.参数/9.2.3.其它的参数.html#9-2-3-其它的参数":{"title":"9.2.3.&#x5176;&#x5B83;&#x7684;&#x53C2;&#x6570;","path":"\\9.宏\\9.2.参数\\9.2.3.其它的参数.html#9-2-3-其它的参数","body":"&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5B8F;&#x6700;&#x540E;&#x7684;&#x53C2;&#x6570;&#x662F; Array&#x7C7B;&#x578B;&#xFF0C;&#x5B8F;&#x53EF;&#x4EE5;&#x4EE5;&#x6570;&#x7EC4;&#x5F62;&#x5F0F;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x4EFB;&#x610F;&#x6570;&#x91CF;&#x7684;&#x989D;&#x5916;&#x53C2;&#x6570;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import haxe.macro.Expr; class Main { static public function main () { myMacro( foo , a, b, c); } macro static function myMacro (e1: Expr , extra: Array Expr) { for (e in extra) { trace (e); } return macro null ; } }"},"9.宏/9.2.参数/9.2.参数.html":{"title":"","path":"\\9.宏\\9.2.参数\\9.2.参数.html","body":"9.2.参数 多数时候，宏的参数是表示为一个 enum Expr的实例的表达式。这样，它们被解析但没有类型化，意味着它们可以是符合Haxe的语法规则的任何内容。宏然后可以检视它们的结构，或者使用 haxe.macro.Context.typeof() 方法（尝试）得到它们的类型。 重要的是要理解宏的参数不保证被评估，所以任何预期的副作用不保证会出现。另一方面，同样重要的是理解一个参数表达式可能被一个宏复制和多次用在返回的表达式中： 1 2 3 4 5 6 7 8 9 10 11 12 13 import haxe.macro.Expr; class Main  static public function main ()  var x = 0 ; var b = add(x++); trace (x); // 2  macro static function add (e: Expr )  return macro $e + $e;   宏 add 被调用，x++作为参数，并因此使用表达式具体化（第9.3.1节）返回 x++ + x++ ，使 x 被增加两倍。"},"9.宏/9.2.参数/9.2.参数.html#9-2-参数":{"title":"9.2.&#x53C2;&#x6570;","path":"\\9.宏\\9.2.参数\\9.2.参数.html#9-2-参数","body":"&#x591A;&#x6570;&#x65F6;&#x5019;&#xFF0C;&#x5B8F;&#x7684;&#x53C2;&#x6570;&#x662F;&#x8868;&#x793A;&#x4E3A;&#x4E00;&#x4E2A; enum Expr&#x7684;&#x5B9E;&#x4F8B;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x8FD9;&#x6837;&#xFF0C;&#x5B83;&#x4EEC;&#x88AB;&#x89E3;&#x6790;&#x4F46;&#x6CA1;&#x6709;&#x7C7B;&#x578B;&#x5316;&#xFF0C;&#x610F;&#x5473;&#x7740;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x662F;&#x7B26;&#x5408;Haxe&#x7684;&#x8BED;&#x6CD5;&#x89C4;&#x5219;&#x7684;&#x4EFB;&#x4F55;&#x5185;&#x5BB9;&#x3002;&#x5B8F;&#x7136;&#x540E;&#x53EF;&#x4EE5;&#x68C0;&#x89C6;&#x5B83;&#x4EEC;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x6216;&#x8005;&#x4F7F;&#x7528; haxe.macro.Context.typeof() &#x65B9;&#x6CD5;&#xFF08;&#x5C1D;&#x8BD5;&#xFF09;&#x5F97;&#x5230;&#x5B83;&#x4EEC;&#x7684;&#x7C7B;&#x578B;&#x3002; &#x91CD;&#x8981;&#x7684;&#x662F;&#x8981;&#x7406;&#x89E3;&#x5B8F;&#x7684;&#x53C2;&#x6570;&#x4E0D;&#x4FDD;&#x8BC1;&#x88AB;&#x8BC4;&#x4F30;&#xFF0C;&#x6240;&#x4EE5;&#x4EFB;&#x4F55;&#x9884;&#x671F;&#x7684;&#x526F;&#x4F5C;&#x7528;&#x4E0D;&#x4FDD;&#x8BC1;&#x4F1A;&#x51FA;&#x73B0;&#x3002;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#xFF0C;&#x540C;&#x6837;&#x91CD;&#x8981;&#x7684;&#x662F;&#x7406;&#x89E3;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x80FD;&#x88AB;&#x4E00;&#x4E2A;&#x5B8F;&#x590D;&#x5236;&#x548C;&#x591A;&#x6B21;&#x7528;&#x5728;&#x8FD4;&#x56DE;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x4E2D;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 import haxe.macro.Expr; class Main { static public function main () { var x = 0 ; var b = add(x++); trace (x); // 2 } macro static function add (e: Expr ) { return macro $e + $e; } } &#x5B8F; add &#x88AB;&#x8C03;&#x7528;&#xFF0C;x++&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x5E76;&#x56E0;&#x6B64;&#x4F7F;&#x7528;&#x8868;&#x8FBE;&#x5F0F;&#x5177;&#x4F53;&#x5316;&#xFF08;&#x7B2C;9.3.1&#x8282;&#xFF09;&#x8FD4;&#x56DE; x++ + x++ &#xFF0C;&#x4F7F; x &#x88AB;&#x589E;&#x52A0;&#x4E24;&#x500D;&#x3002;"},"9.宏/9.3.具体化/9.3.1.表达式具体化.html":{"title":"","path":"\\9.宏\\9.3.具体化\\9.3.1.表达式具体化.html","body":"9.3.1.表达式具体化 表达式具体化用于以一个便捷的方式创建haxe.macro.Expr的实例。Haxe编译器接受通常的Haxe语法并翻译它到一个表达式对象。它支持几种转义机制，都是通过 $ 符号触发： ${} 和 $e{}: Expr - Expr 这可以被用来合并表达式。 {}界限内的表达式被执行，使用它的值进行替换。 $a{}: Expr - Array 如果用于一个 预期为Array的位置（如调用参数，块元素），$a{} 把数组作为它的值。否则它生成一个数组声明。 $b{}:Array-Expr 从给定的表达式数组生成一个块级表达式。 $i{}:String-Expr 从给定字符串生成一个标识符。 $p{}:Array-Expr 从给定字符串数组生成一个字段表达式。 $v{}:Dynamic-Expr 根据它的参数的类型生成一个表达式。这仅仅保证使用在基本类型和枚举实例。 另外，元数据 @:pos(p) 可以用来映射注解表达式的位置到 p ，而不是被具体化的位置。 这类具体化只工作于 内部结构预期一个表达式时。不允许 object.${fieldName}，但是 object.$fieldName 可以使用。这适用于所有内部构造预期一个字符串的位置： 字段访问 object.$name 变量名称 var $name = 1; 从Haxe 3.1.0 以后： 字段名 { $name: 1} 函数名 function $name() { } 捕获变量名 try e() catch($name:Dynamic) { } 此外，一个新的表达式可以通过提供 haxe.macro.TypePath 参数被具体化： new $typePath()"},"9.宏/9.3.具体化/9.3.1.表达式具体化.html#9-3-1-表达式具体化":{"title":"9.3.1.&#x8868;&#x8FBE;&#x5F0F;&#x5177;&#x4F53;&#x5316;","path":"\\9.宏\\9.3.具体化\\9.3.1.表达式具体化.html#9-3-1-表达式具体化","body":"&#x8868;&#x8FBE;&#x5F0F;&#x5177;&#x4F53;&#x5316;&#x7528;&#x4E8E;&#x4EE5;&#x4E00;&#x4E2A;&#x4FBF;&#x6377;&#x7684;&#x65B9;&#x5F0F;&#x521B;&#x5EFA;haxe.macro.Expr&#x7684;&#x5B9E;&#x4F8B;&#x3002;Haxe&#x7F16;&#x8BD1;&#x5668;&#x63A5;&#x53D7;&#x901A;&#x5E38;&#x7684;Haxe&#x8BED;&#x6CD5;&#x5E76;&#x7FFB;&#x8BD1;&#x5B83;&#x5230;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x5BF9;&#x8C61;&#x3002;&#x5B83;&#x652F;&#x6301;&#x51E0;&#x79CD;&#x8F6C;&#x4E49;&#x673A;&#x5236;&#xFF0C;&#x90FD;&#x662F;&#x901A;&#x8FC7; $ &#x7B26;&#x53F7;&#x89E6;&#x53D1;&#xFF1A; ${} &#x548C; $e{}: Expr - Expr &#x8FD9;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x6765;&#x5408;&#x5E76;&#x8868;&#x8FBE;&#x5F0F;&#x3002; {}&#x754C;&#x9650;&#x5185;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x88AB;&#x6267;&#x884C;&#xFF0C;&#x4F7F;&#x7528;&#x5B83;&#x7684;&#x503C;&#x8FDB;&#x884C;&#x66FF;&#x6362;&#x3002; $a{}: Expr - Array &#x5982;&#x679C;&#x7528;&#x4E8E;&#x4E00;&#x4E2A; &#x9884;&#x671F;&#x4E3A;Array&#x7684;&#x4F4D;&#x7F6E;&#xFF08;&#x5982;&#x8C03;&#x7528;&#x53C2;&#x6570;&#xFF0C;&#x5757;&#x5143;&#x7D20;&#xFF09;&#xFF0C;$a{} &#x628A;&#x6570;&#x7EC4;&#x4F5C;&#x4E3A;&#x5B83;&#x7684;&#x503C;&#x3002;&#x5426;&#x5219;&#x5B83;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x58F0;&#x660E;&#x3002; $b{}:Array-Expr &#x4ECE;&#x7ED9;&#x5B9A;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x6570;&#x7EC4;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5757;&#x7EA7;&#x8868;&#x8FBE;&#x5F0F;&#x3002; $i{}:String-Expr &#x4ECE;&#x7ED9;&#x5B9A;&#x5B57;&#x7B26;&#x4E32;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x6807;&#x8BC6;&#x7B26;&#x3002; $p{}:Array-Expr &#x4ECE;&#x7ED9;&#x5B9A;&#x5B57;&#x7B26;&#x4E32;&#x6570;&#x7EC4;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#x8868;&#x8FBE;&#x5F0F;&#x3002; $v{}:Dynamic-Expr &#x6839;&#x636E;&#x5B83;&#x7684;&#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x8FD9;&#x4EC5;&#x4EC5;&#x4FDD;&#x8BC1;&#x4F7F;&#x7528;&#x5728;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x548C;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x3002; &#x53E6;&#x5916;&#xFF0C;&#x5143;&#x6570;&#x636E; @:pos(p) &#x53EF;&#x4EE5;&#x7528;&#x6765;&#x6620;&#x5C04;&#x6CE8;&#x89E3;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x4F4D;&#x7F6E;&#x5230; p &#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x88AB;&#x5177;&#x4F53;&#x5316;&#x7684;&#x4F4D;&#x7F6E;&#x3002; &#x8FD9;&#x7C7B;&#x5177;&#x4F53;&#x5316;&#x53EA;&#x5DE5;&#x4F5C;&#x4E8E; &#x5185;&#x90E8;&#x7ED3;&#x6784;&#x9884;&#x671F;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x65F6;&#x3002;&#x4E0D;&#x5141;&#x8BB8; object.${fieldName}&#xFF0C;&#x4F46;&#x662F; object.$fieldName &#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x3002;&#x8FD9;&#x9002;&#x7528;&#x4E8E;&#x6240;&#x6709;&#x5185;&#x90E8;&#x6784;&#x9020;&#x9884;&#x671F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x4F4D;&#x7F6E;&#xFF1A; &#x5B57;&#x6BB5;&#x8BBF;&#x95EE; object.$name &#x53D8;&#x91CF;&#x540D;&#x79F0; var $name = 1; &#x4ECE;Haxe 3.1.0 &#x4EE5;&#x540E;&#xFF1A; &#x5B57;&#x6BB5;&#x540D; { $name: 1} &#x51FD;&#x6570;&#x540D; function $name() { } &#x6355;&#x83B7;&#x53D8;&#x91CF;&#x540D; try e() catch($name:Dynamic) { } &#x6B64;&#x5916;&#xFF0C;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x63D0;&#x4F9B; haxe.macro.TypePath &#x53C2;&#x6570;&#x88AB;&#x5177;&#x4F53;&#x5316;&#xFF1A; new $typePath()"},"9.宏/9.3.具体化/9.3.2.类型具体化.html":{"title":"","path":"\\9.宏\\9.3.具体化\\9.3.2.类型具体化.html","body":"9.3.2.类型具体化 类型具体化用于以一个简便的方式创建 haxe.macro.Expr.ComplexType 的实例。通过一个 macro : Type 定义，Type 可以是任何有效的类型路径表达式。这类似于普通代码中的显式类型提示，例如对于变量，形式为 var x:Type 。 ComplexType的每个构造函数都有不同的语法： TPath: macro : pack.Type TFunction: macro : Arg1 - Arg2 - Return TAnonymous: macro : { field: Type } TParent: macro : (Type) TExtend: macro : { Type, field: Type } TOptional: macro : ?Type"},"9.宏/9.3.具体化/9.3.2.类型具体化.html#9-3-2-类型具体化":{"title":"9.3.2.&#x7C7B;&#x578B;&#x5177;&#x4F53;&#x5316;","path":"\\9.宏\\9.3.具体化\\9.3.2.类型具体化.html#9-3-2-类型具体化","body":"&#x7C7B;&#x578B;&#x5177;&#x4F53;&#x5316;&#x7528;&#x4E8E;&#x4EE5;&#x4E00;&#x4E2A;&#x7B80;&#x4FBF;&#x7684;&#x65B9;&#x5F0F;&#x521B;&#x5EFA; haxe.macro.Expr.ComplexType &#x7684;&#x5B9E;&#x4F8B;&#x3002;&#x901A;&#x8FC7;&#x4E00;&#x4E2A; macro : Type &#x5B9A;&#x4E49;&#xFF0C;Type &#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55;&#x6709;&#x6548;&#x7684;&#x7C7B;&#x578B;&#x8DEF;&#x5F84;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x8FD9;&#x7C7B;&#x4F3C;&#x4E8E;&#x666E;&#x901A;&#x4EE3;&#x7801;&#x4E2D;&#x7684;&#x663E;&#x5F0F;&#x7C7B;&#x578B;&#x63D0;&#x793A;&#xFF0C;&#x4F8B;&#x5982;&#x5BF9;&#x4E8E;&#x53D8;&#x91CF;&#xFF0C;&#x5F62;&#x5F0F;&#x4E3A; var x:Type &#x3002; ComplexType&#x7684;&#x6BCF;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570;&#x90FD;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x8BED;&#x6CD5;&#xFF1A; TPath: macro : pack.Type TFunction: macro : Arg1 - Arg2 - Return TAnonymous: macro : { field: Type } TParent: macro : (Type) TExtend: macro : { Type, field: Type } TOptional: macro : ?Type"},"9.宏/9.3.具体化/9.3.3.类具体化.html":{"title":"","path":"\\9.宏\\9.3.具体化\\9.3.3.类具体化.html","body":"9.3.3.类具体化 还可以使用具体化来获取一个 haxe.macro.Expr.TypeDefinition 的实例。这是通过 macro 类语法表示的，如下面显示的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Main  macro static function generateClass (funcName: String )  var c = macro class MyClass  public function new ()   public function $funcName()  trace ($vfuncName + \" was called\" );   haxe.macro.Context.defineType(c); return macro new MyClass ();  public static function main ()  var c = generateClass( \"myFunc\" ); c.myFunc();   生成的 TypeDefinition 实例通常传递到 haxe.macro.Context.defineType 来添加一个i额新的类型到调用上下文（不是宏上下文本身）。 这类的具体化可以用于获得 haxe.macro.Expr.Field的实例，可从生成的TypeDefinition的字段数组获得。"},"9.宏/9.3.具体化/9.3.3.类具体化.html#9-3-3-类具体化":{"title":"9.3.3.&#x7C7B;&#x5177;&#x4F53;&#x5316;","path":"\\9.宏\\9.3.具体化\\9.3.3.类具体化.html#9-3-3-类具体化","body":"&#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5177;&#x4F53;&#x5316;&#x6765;&#x83B7;&#x53D6;&#x4E00;&#x4E2A; haxe.macro.Expr.TypeDefinition &#x7684;&#x5B9E;&#x4F8B;&#x3002;&#x8FD9;&#x662F;&#x901A;&#x8FC7; macro &#x7C7B;&#x8BED;&#x6CD5;&#x8868;&#x793A;&#x7684;&#xFF0C;&#x5982;&#x4E0B;&#x9762;&#x663E;&#x793A;&#x7684;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Main { macro static function generateClass (funcName: String ) { var c = macro class MyClass { public function new () { } public function $funcName() { trace ($v{funcName} +  was called ); } } haxe.macro.Context.defineType(c); return macro new MyClass (); } public static function main () { var c = generateClass( myFunc ); c.myFunc(); } } &#x751F;&#x6210;&#x7684; TypeDefinition &#x5B9E;&#x4F8B;&#x901A;&#x5E38;&#x4F20;&#x9012;&#x5230; haxe.macro.Context.defineType &#x6765;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;i&#x989D;&#x65B0;&#x7684;&#x7C7B;&#x578B;&#x5230;&#x8C03;&#x7528;&#x4E0A;&#x4E0B;&#x6587;&#xFF08;&#x4E0D;&#x662F;&#x5B8F;&#x4E0A;&#x4E0B;&#x6587;&#x672C;&#x8EAB;&#xFF09;&#x3002; &#x8FD9;&#x7C7B;&#x7684;&#x5177;&#x4F53;&#x5316;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x83B7;&#x5F97; haxe.macro.Expr.Field&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x53EF;&#x4ECE;&#x751F;&#x6210;&#x7684;TypeDefinition&#x7684;&#x5B57;&#x6BB5;&#x6570;&#x7EC4;&#x83B7;&#x5F97;&#x3002;"},"9.宏/9.3.具体化/9.3.具体化.html":{"title":"","path":"\\9.宏\\9.3.具体化\\9.3.具体化.html","body":"9.3.具体化 Haxe编译器允许具体化表达式、类型和类来简化宏的使用。具体化的语法是 macro expr ，expr 是任何有效的Haxe表达式。"},"9.宏/9.3.具体化/9.3.具体化.html#9-3-具体化":{"title":"9.3.&#x5177;&#x4F53;&#x5316;","path":"\\9.宏\\9.3.具体化\\9.3.具体化.html#9-3-具体化","body":"Haxe&#x7F16;&#x8BD1;&#x5668;&#x5141;&#x8BB8;&#x5177;&#x4F53;&#x5316;&#x8868;&#x8FBE;&#x5F0F;&#x3001;&#x7C7B;&#x578B;&#x548C;&#x7C7B;&#x6765;&#x7B80;&#x5316;&#x5B8F;&#x7684;&#x4F7F;&#x7528;&#x3002;&#x5177;&#x4F53;&#x5316;&#x7684;&#x8BED;&#x6CD5;&#x662F; macro expr &#xFF0C;expr &#x662F;&#x4EFB;&#x4F55;&#x6709;&#x6548;&#x7684;Haxe&#x8868;&#x8FBE;&#x5F0F;&#x3002;"},"9.宏/9.4.工具/9.4.工具.html":{"title":"","path":"\\9.宏\\9.4.工具\\9.4.工具.html","body":"9.4.工具 Haxe标准库附带一组 工具类来简化宏的使用。这些类最好作为静态扩展使用，通过使用 haxe.macro.Tools ，可以被单独或者完整的带入到上下文中。这些类为： ComplexTypeTools ： 允许以一个人类可读的方式打印 ComplexType 实例 。也允许确定相对于 一个 ComplexType的 Type。 ExprTools ： 允许以一个人类可读的方式打印 Expr 实例。也允许迭代和映射表达式。 MacroStringTools ： 提供对宏上下文中的字符串和字符串表达式有用的操作。 TypeTools ： 允许以一个人类可读的方式打印 Type 实例。也提供一些对类型有用的操作，譬如统一（第3.5节）它们，或者得到它们的相应的 ComplexType 。 此外，haxe.macro.Printer 类有以一个人类可读格式打印各种类型的的公共方法。当调试宏的时候可以提供帮助。 花絮：tinkerbell 库 和 为什么使用Tools.hx 我们学习了静态扩展，使用一个模块意味着所有它的类型被带入静态扩展上下文中。事实证明，这样一个类型也可以是一个对其它类型的typedef（第3.1节）。然后编译器将这个类型当作模块的一部分，并相应的延伸静态扩展。 这种“伎俩”最初在 Juraj Kirchheim 的 tinkerbell 库用于相同的目的。Tinkerbell 在它们进入Haxe编译器和标准库很久之前就提供许多有用的宏工具。它仍然是额外的宏工具主要的库，提供其它有用的功能。"},"9.宏/9.4.工具/9.4.工具.html#9-4-工具":{"title":"9.4.&#x5DE5;&#x5177;","path":"\\9.宏\\9.4.工具\\9.4.工具.html#9-4-工具","body":"Haxe&#x6807;&#x51C6;&#x5E93;&#x9644;&#x5E26;&#x4E00;&#x7EC4; &#x5DE5;&#x5177;&#x7C7B;&#x6765;&#x7B80;&#x5316;&#x5B8F;&#x7684;&#x4F7F;&#x7528;&#x3002;&#x8FD9;&#x4E9B;&#x7C7B;&#x6700;&#x597D;&#x4F5C;&#x4E3A;&#x9759;&#x6001;&#x6269;&#x5C55;&#x4F7F;&#x7528;&#xFF0C;&#x901A;&#x8FC7;&#x4F7F;&#x7528; haxe.macro.Tools &#xFF0C;&#x53EF;&#x4EE5;&#x88AB;&#x5355;&#x72EC;&#x6216;&#x8005;&#x5B8C;&#x6574;&#x7684;&#x5E26;&#x5165;&#x5230;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x3002;&#x8FD9;&#x4E9B;&#x7C7B;&#x4E3A;&#xFF1A; ComplexTypeTools &#xFF1A; &#x5141;&#x8BB8;&#x4EE5;&#x4E00;&#x4E2A;&#x4EBA;&#x7C7B;&#x53EF;&#x8BFB;&#x7684;&#x65B9;&#x5F0F;&#x6253;&#x5370; ComplexType &#x5B9E;&#x4F8B; &#x3002;&#x4E5F;&#x5141;&#x8BB8;&#x786E;&#x5B9A;&#x76F8;&#x5BF9;&#x4E8E; &#x4E00;&#x4E2A; ComplexType&#x7684; Type&#x3002; ExprTools &#xFF1A; &#x5141;&#x8BB8;&#x4EE5;&#x4E00;&#x4E2A;&#x4EBA;&#x7C7B;&#x53EF;&#x8BFB;&#x7684;&#x65B9;&#x5F0F;&#x6253;&#x5370; Expr &#x5B9E;&#x4F8B;&#x3002;&#x4E5F;&#x5141;&#x8BB8;&#x8FED;&#x4EE3;&#x548C;&#x6620;&#x5C04;&#x8868;&#x8FBE;&#x5F0F;&#x3002; MacroStringTools &#xFF1A; &#x63D0;&#x4F9B;&#x5BF9;&#x5B8F;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x548C;&#x5B57;&#x7B26;&#x4E32;&#x8868;&#x8FBE;&#x5F0F;&#x6709;&#x7528;&#x7684;&#x64CD;&#x4F5C;&#x3002; TypeTools &#xFF1A; &#x5141;&#x8BB8;&#x4EE5;&#x4E00;&#x4E2A;&#x4EBA;&#x7C7B;&#x53EF;&#x8BFB;&#x7684;&#x65B9;&#x5F0F;&#x6253;&#x5370; Type &#x5B9E;&#x4F8B;&#x3002;&#x4E5F;&#x63D0;&#x4F9B;&#x4E00;&#x4E9B;&#x5BF9;&#x7C7B;&#x578B;&#x6709;&#x7528;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x8B6C;&#x5982;&#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09;&#x5B83;&#x4EEC;&#xFF0C;&#x6216;&#x8005;&#x5F97;&#x5230;&#x5B83;&#x4EEC;&#x7684;&#x76F8;&#x5E94;&#x7684; ComplexType &#x3002; &#x6B64;&#x5916;&#xFF0C;haxe.macro.Printer &#x7C7B;&#x6709;&#x4EE5;&#x4E00;&#x4E2A;&#x4EBA;&#x7C7B;&#x53EF;&#x8BFB;&#x683C;&#x5F0F;&#x6253;&#x5370;&#x5404;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x7684;&#x516C;&#x5171;&#x65B9;&#x6CD5;&#x3002;&#x5F53;&#x8C03;&#x8BD5;&#x5B8F;&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x5E2E;&#x52A9;&#x3002; &#x82B1;&#x7D6E;&#xFF1A;tinkerbell &#x5E93; &#x548C; &#x4E3A;&#x4EC0;&#x4E48;&#x4F7F;&#x7528;Tools.hx &#x6211;&#x4EEC;&#x5B66;&#x4E60;&#x4E86;&#x9759;&#x6001;&#x6269;&#x5C55;&#xFF0C;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x610F;&#x5473;&#x7740;&#x6240;&#x6709;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x88AB;&#x5E26;&#x5165;&#x9759;&#x6001;&#x6269;&#x5C55;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x3002;&#x4E8B;&#x5B9E;&#x8BC1;&#x660E;&#xFF0C;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x4E00;&#x4E2A;&#x5BF9;&#x5176;&#x5B83;&#x7C7B;&#x578B;&#x7684;typedef&#xFF08;&#x7B2C;3.1&#x8282;&#xFF09;&#x3002;&#x7136;&#x540E;&#x7F16;&#x8BD1;&#x5668;&#x5C06;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x5F53;&#x4F5C;&#x6A21;&#x5757;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x5E76;&#x76F8;&#x5E94;&#x7684;&#x5EF6;&#x4F38;&#x9759;&#x6001;&#x6269;&#x5C55;&#x3002; &#x8FD9;&#x79CD;&#x201C;&#x4F0E;&#x4FE9;&#x201D;&#x6700;&#x521D;&#x5728; Juraj Kirchheim &#x7684; tinkerbell &#x5E93;&#x7528;&#x4E8E;&#x76F8;&#x540C;&#x7684;&#x76EE;&#x7684;&#x3002;Tinkerbell &#x5728;&#x5B83;&#x4EEC;&#x8FDB;&#x5165;Haxe&#x7F16;&#x8BD1;&#x5668;&#x548C;&#x6807;&#x51C6;&#x5E93;&#x5F88;&#x4E45;&#x4E4B;&#x524D;&#x5C31;&#x63D0;&#x4F9B;&#x8BB8;&#x591A;&#x6709;&#x7528;&#x7684;&#x5B8F;&#x5DE5;&#x5177;&#x3002;&#x5B83;&#x4ECD;&#x7136;&#x662F;&#x989D;&#x5916;&#x7684;&#x5B8F;&#x5DE5;&#x5177;&#x4E3B;&#x8981;&#x7684;&#x5E93;&#xFF0C;&#x63D0;&#x4F9B;&#x5176;&#x5B83;&#x6709;&#x7528;&#x7684;&#x529F;&#x80FD;&#x3002;"},"9.宏/9.5.类型构建/9.5.1.枚举构建.html":{"title":"","path":"\\9.宏\\9.5.类型构建\\9.5.1.枚举构建.html","body":"9.5.1.枚举构建 构建枚举类似于使用一个简单的映射构建类： 没有参数的枚举构造函数是变量字段 FVar。 带有参数的枚举构造函数是方法字段 FFun 。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import haxe.macro.Context; import haxe.macro.Expr; class EnumBuildingMacro  macro static public function build (): Array Field  var noArgs = makeEnumField( \"A\" , FVar( null , null )); var eFunc = macro function (value: Int )  ; var fInt = switch (eFunc.expr)  case EFunction( _ ,f): f ; case _ : throw \" false \";  var intArg = makeEnumField(\" B \", FFun(fInt)); return [noArgs, intArg];  static function makeEnumField(name, kind)  return  name: name, doc: null, meta: [], access: [], kind: kind, pos: Context.currentPos()    @:build(EnumBuildingMacro.build()) enum E   class Main  static public function main()  switch(E.A)  case A: case B(v):    因为枚举 E 被使用一个 :build 元数据注解，调用的宏构建两个构造函数 A 和 B 到它之中。前者被添加使用的类型是 FVar(null, null)，意味着它是一个构造函数，没有参数。后者，我们使用具体化来获得 haxe.macro.Expr.Function 的一个实例，参数为一个单独的 Int 。 main 方法通过匹配它，证明了我们生成的枚举的结构。我们可以发现，生成的类型跟下面这个是等价的： 1 2 3 4 enum E  A; B(value: Int ); "},"9.宏/9.5.类型构建/9.5.1.枚举构建.html#9-5-1-枚举构建":{"title":"9.5.1.&#x679A;&#x4E3E;&#x6784;&#x5EFA;","path":"\\9.宏\\9.5.类型构建\\9.5.1.枚举构建.html#9-5-1-枚举构建","body":"&#x6784;&#x5EFA;&#x679A;&#x4E3E;&#x7C7B;&#x4F3C;&#x4E8E;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x6620;&#x5C04;&#x6784;&#x5EFA;&#x7C7B;&#xFF1A; &#x6CA1;&#x6709;&#x53C2;&#x6570;&#x7684;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#x662F;&#x53D8;&#x91CF;&#x5B57;&#x6BB5; FVar&#x3002; &#x5E26;&#x6709;&#x53C2;&#x6570;&#x7684;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#x662F;&#x65B9;&#x6CD5;&#x5B57;&#x6BB5; FFun &#x3002; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import haxe.macro.Context; import haxe.macro.Expr; class EnumBuildingMacro { macro static public function build (): Array Field { var noArgs = makeEnumField( A , FVar( null , null )); var eFunc = macro function (value: Int ) { }; var fInt = switch (eFunc.expr) { case EFunction( _ ,f): f ; case _ : throw  false ; } var intArg = makeEnumField( B , FFun(fInt)); return [noArgs, intArg]; } static function makeEnumField(name, kind) { return { name: name, doc: null, meta: [], access: [], kind: kind, pos: Context.currentPos() } } } @:build(EnumBuildingMacro.build()) enum E { } class Main { static public function main() { switch(E.A) { case A: case B(v): } } } &#x56E0;&#x4E3A;&#x679A;&#x4E3E; E &#x88AB;&#x4F7F;&#x7528;&#x4E00;&#x4E2A; :build &#x5143;&#x6570;&#x636E;&#x6CE8;&#x89E3;&#xFF0C;&#x8C03;&#x7528;&#x7684;&#x5B8F;&#x6784;&#x5EFA;&#x4E24;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570; A &#x548C; B &#x5230;&#x5B83;&#x4E4B;&#x4E2D;&#x3002;&#x524D;&#x8005;&#x88AB;&#x6DFB;&#x52A0;&#x4F7F;&#x7528;&#x7684;&#x7C7B;&#x578B;&#x662F; FVar(null, null)&#xFF0C;&#x610F;&#x5473;&#x7740;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#x3002;&#x540E;&#x8005;&#xFF0C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x5177;&#x4F53;&#x5316;&#x6765;&#x83B7;&#x5F97; haxe.macro.Expr.Function &#x7684;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;&#xFF0C;&#x53C2;&#x6570;&#x4E3A;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684; Int &#x3002; main &#x65B9;&#x6CD5;&#x901A;&#x8FC7;&#x5339;&#x914D;&#x5B83;&#xFF0C;&#x8BC1;&#x660E;&#x4E86;&#x6211;&#x4EEC;&#x751F;&#x6210;&#x7684;&#x679A;&#x4E3E;&#x7684;&#x7ED3;&#x6784;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;&#x751F;&#x6210;&#x7684;&#x7C7B;&#x578B;&#x8DDF;&#x4E0B;&#x9762;&#x8FD9;&#x4E2A;&#x662F;&#x7B49;&#x4EF7;&#x7684;&#xFF1A; 1 2 3 4 enum E { A; B(value: Int ); }"},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html":{"title":"","path":"\\9.宏\\9.5.类型构建\\9.5.2.@autoBuild.html","body":"9.5.2.@:autoBuild 如果一个类有 :autoBuild 元数据，编译器生成 :build 元数据 到所有扩展类。如果一个接口有 :autoBuild 元数据，编译器生成 :build 元数据到所有实现类和所有扩展接口。注意 :autoBuild 并不是暗示 :build 到 类/接口 本身。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import haxe.macro.Context; import haxe.macro.Expr; class AutoBuildingMacro  macro static public function fromInterface (): Array Field  trace ( \"fromInterface: \" + Context.getLocalType()); return null ;  macro static public function fromBaseClass (): Array Field  trace ( \"fromBaseClass: \" + Context.getLocalType()); return null ;   @:autoBuild(AutoBuildingMacro.fromInterface()) interface I   interface I2 extends I   @:autoBuild(AutoBuildingMacro.fromBaseClass()) class Base   class Main extends Base implements I2  static public function main ()    这在编译过程中输出： 1 2 3 4 5 6 AutoBuildingMacro.hx: 6 : fromInterface: TInst (I2,[]) AutoBuildingMacro.hx: 6 : fromInterface: TInst (Main,[]) AutoBuildingMacro.hx: 11 : fromBaseClass: TInst (Main,[]) 重要的是记住 这些宏执行的顺序是未定义的，在构建顺序（第9.6.3节）中详述。"},"9.宏/9.5.类型构建/9.5.2.@autoBuild.html#9-5-2-autoBuild":{"title":"9.5.2.@:autoBuild","path":"\\9.宏\\9.5.类型构建\\9.5.2.@autoBuild.html#9-5-2-autoBuild","body":"&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x6709; :autoBuild &#x5143;&#x6570;&#x636E;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x751F;&#x6210; :build &#x5143;&#x6570;&#x636E; &#x5230;&#x6240;&#x6709;&#x6269;&#x5C55;&#x7C7B;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#x6709; :autoBuild &#x5143;&#x6570;&#x636E;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x751F;&#x6210; :build &#x5143;&#x6570;&#x636E;&#x5230;&#x6240;&#x6709;&#x5B9E;&#x73B0;&#x7C7B;&#x548C;&#x6240;&#x6709;&#x6269;&#x5C55;&#x63A5;&#x53E3;&#x3002;&#x6CE8;&#x610F; :autoBuild &#x5E76;&#x4E0D;&#x662F;&#x6697;&#x793A; :build &#x5230; &#x7C7B;/&#x63A5;&#x53E3; &#x672C;&#x8EAB;&#x3002; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import haxe.macro.Context; import haxe.macro.Expr; class AutoBuildingMacro { macro static public function fromInterface (): Array Field { trace ( fromInterface:  + Context.getLocalType()); return null ; } macro static public function fromBaseClass (): Array Field { trace ( fromBaseClass:  + Context.getLocalType()); return null ; } } @:autoBuild(AutoBuildingMacro.fromInterface()) interface I { } interface I2 extends I { } @:autoBuild(AutoBuildingMacro.fromBaseClass()) class Base { } class Main extends Base implements I2 { static public function main () { } } &#x8FD9;&#x5728;&#x7F16;&#x8BD1;&#x8FC7;&#x7A0B;&#x4E2D;&#x8F93;&#x51FA;&#xFF1A; 1 2 3 4 5 6 AutoBuildingMacro.hx: 6 : fromInterface: TInst (I2,[]) AutoBuildingMacro.hx: 6 : fromInterface: TInst (Main,[]) AutoBuildingMacro.hx: 11 : fromBaseClass: TInst (Main,[]) &#x91CD;&#x8981;&#x7684;&#x662F;&#x8BB0;&#x4F4F; &#x8FD9;&#x4E9B;&#x5B8F;&#x6267;&#x884C;&#x7684;&#x987A;&#x5E8F;&#x662F;&#x672A;&#x5B9A;&#x4E49;&#x7684;&#xFF0C;&#x5728;&#x6784;&#x5EFA;&#x987A;&#x5E8F;&#xFF08;&#x7B2C;9.6.3&#x8282;&#xFF09;&#x4E2D;&#x8BE6;&#x8FF0;&#x3002;"},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html":{"title":"","path":"\\9.宏\\9.5.类型构建\\9.5.3.@genericBuild.html","body":"9.5.3.@:genericBuild 从Haxe 3.1.0 后： 一般构建宏每个类型化运行，已经非常强大。在一些情况下，每个类型化运行一个构建宏相反用法，即，当它实际上出现在代码中。除此之外这允许在宏中访问具体的类型参数。 @:genericBuild 就像 @:build 一样使用，通过添加它到一个类型，并使用一个宏调用作为参数： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import haxe.macro.Expr; import haxe.macro.Context; import haxe.macro.Type; class GenericBuildMacro1  static public function build ()  switch (Context.getLocalType())  case TInst( _ , [t1]): trace (t1); case t: Context .error( \"Class expected\" , Context.currentPos());  return null ;   @:genericBuild(GenericBuildMacro1.build()) class MyType  T    class Main  static function main ()  var x: MyType  Int ; var x: MyType  String ;   当运行这个例子，编译器输出 TAbstract(Int,[]) 和 TInst(String,[])，表明它确实意识到 MyType的具体类型参数。宏的逻辑可以使用这个信息来生成一个定制类型（使用 haxe.macro.Context.defineType）或者引用一个存在的类型。方便起见，我们在这里返回null，要求编译器推断这个类型。 在Haxe 3.1 中，一个 @:genericBuild 宏的返回类型必须是一个 haxe.macro.Type 。Haxe 3.2 允许（也更愿意）返回一个 haxe.macro.ComplexType ，是一个类型语法上的表示。在很多情况下这变得很容易使用，因为类型可以通过它们的路径简单的引用。 Const 类型参数 如果类型参数名称是 Const，Haxe 允许传递常量表达式（第5.2节）作为一个类型参数。这可以在 @:genericBuild 宏的上下文中被利用来从语法直接到宏传递信息： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import haxe.macro.Expr; import haxe.macro.Context; import haxe.macro.Type; class GenericBuildMacro2  static public function build ()  switch (Context.getLocalType())  case TInst( _ ,[TInst( _ . get () =  kind: KExpr (macro $v(s: String )) , _ )]): trace (s); case t: Context .error( \"Class expected\" , Context.currentPos());  return null ;   @:genericBuild(GenericBuildMacro2.build()) class MyType  Const    class Main  static function main ()  var x: MyType  \"myfile.txt\" ;   这里宏的逻辑可以加载一个文件并使用它的内容来生成一个定制类型。"},"9.宏/9.5.类型构建/9.5.3.@genericBuild.html#9-5-3-genericBuild":{"title":"9.5.3.@:genericBuild","path":"\\9.宏\\9.5.类型构建\\9.5.3.@genericBuild.html#9-5-3-genericBuild","body":"&#x4ECE;Haxe 3.1.0 &#x540E;&#xFF1A; &#x4E00;&#x822C;&#x6784;&#x5EFA;&#x5B8F;&#x6BCF;&#x4E2A;&#x7C7B;&#x578B;&#x5316;&#x8FD0;&#x884C;&#xFF0C;&#x5DF2;&#x7ECF;&#x975E;&#x5E38;&#x5F3A;&#x5927;&#x3002;&#x5728;&#x4E00;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6BCF;&#x4E2A;&#x7C7B;&#x578B;&#x5316;&#x8FD0;&#x884C;&#x4E00;&#x4E2A;&#x6784;&#x5EFA;&#x5B8F;&#x76F8;&#x53CD;&#x7528;&#x6CD5;&#xFF0C;&#x5373;&#xFF0C;&#x5F53;&#x5B83;&#x5B9E;&#x9645;&#x4E0A;&#x51FA;&#x73B0;&#x5728;&#x4EE3;&#x7801;&#x4E2D;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#x8FD9;&#x5141;&#x8BB8;&#x5728;&#x5B8F;&#x4E2D;&#x8BBF;&#x95EE;&#x5177;&#x4F53;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x3002; @:genericBuild &#x5C31;&#x50CF; @:build &#x4E00;&#x6837;&#x4F7F;&#x7528;&#xFF0C;&#x901A;&#x8FC7;&#x6DFB;&#x52A0;&#x5B83;&#x5230;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x5E76;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x5B8F;&#x8C03;&#x7528;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import haxe.macro.Expr; import haxe.macro.Context; import haxe.macro.Type; class GenericBuildMacro1 { static public function build () { switch (Context.getLocalType()) { case TInst( _ , [t1]): trace (t1); case t: Context .error( Class expected , Context.currentPos()); } return null ; } } @:genericBuild(GenericBuildMacro1.build()) class MyType  T  { } class Main { static function main () { var x: MyType  Int ; var x: MyType  String ; } } &#x5F53;&#x8FD0;&#x884C;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x8F93;&#x51FA; TAbstract(Int,[]) &#x548C; TInst(String,[])&#xFF0C;&#x8868;&#x660E;&#x5B83;&#x786E;&#x5B9E;&#x610F;&#x8BC6;&#x5230; MyType&#x7684;&#x5177;&#x4F53;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x3002;&#x5B8F;&#x7684;&#x903B;&#x8F91;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#x6765;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5B9A;&#x5236;&#x7C7B;&#x578B;&#xFF08;&#x4F7F;&#x7528; haxe.macro.Context.defineType&#xFF09;&#x6216;&#x8005;&#x5F15;&#x7528;&#x4E00;&#x4E2A;&#x5B58;&#x5728;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x65B9;&#x4FBF;&#x8D77;&#x89C1;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x8FD9;&#x91CC;&#x8FD4;&#x56DE;null&#xFF0C;&#x8981;&#x6C42;&#x7F16;&#x8BD1;&#x5668;&#x63A8;&#x65AD;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x3002; &#x5728;Haxe 3.1 &#x4E2D;&#xFF0C;&#x4E00;&#x4E2A; @:genericBuild &#x5B8F;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x662F;&#x4E00;&#x4E2A; haxe.macro.Type &#x3002;Haxe 3.2 &#x5141;&#x8BB8;&#xFF08;&#x4E5F;&#x66F4;&#x613F;&#x610F;&#xFF09;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A; haxe.macro.ComplexType &#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x8BED;&#x6CD5;&#x4E0A;&#x7684;&#x8868;&#x793A;&#x3002;&#x5728;&#x5F88;&#x591A;&#x60C5;&#x51B5;&#x4E0B;&#x8FD9;&#x53D8;&#x5F97;&#x5F88;&#x5BB9;&#x6613;&#x4F7F;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5B83;&#x4EEC;&#x7684;&#x8DEF;&#x5F84;&#x7B80;&#x5355;&#x7684;&#x5F15;&#x7528;&#x3002; Const &#x7C7B;&#x578B;&#x53C2;&#x6570; &#x5982;&#x679C;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x540D;&#x79F0;&#x662F; Const&#xFF0C;Haxe &#x5141;&#x8BB8;&#x4F20;&#x9012;&#x5E38;&#x91CF;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5.2&#x8282;&#xFF09;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x5728; @:genericBuild &#x5B8F;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x88AB;&#x5229;&#x7528;&#x6765;&#x4ECE;&#x8BED;&#x6CD5;&#x76F4;&#x63A5;&#x5230;&#x5B8F;&#x4F20;&#x9012;&#x4FE1;&#x606F;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import haxe.macro.Expr; import haxe.macro.Context; import haxe.macro.Type; class GenericBuildMacro2 { static public function build () { switch (Context.getLocalType()) { case TInst( _ ,[TInst( _ . get () = { kind: KExpr (macro $v{(s: String )}) }, _ )]): trace (s); case t: Context .error( Class expected , Context.currentPos()); } return null ; } } @:genericBuild(GenericBuildMacro2.build()) class MyType  Const  { } class Main { static function main () { var x: MyType  myfile.txt ; } } &#x8FD9;&#x91CC;&#x5B8F;&#x7684;&#x903B;&#x8F91;&#x53EF;&#x4EE5;&#x52A0;&#x8F7D;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x5E76;&#x4F7F;&#x7528;&#x5B83;&#x7684;&#x5185;&#x5BB9;&#x6765;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5B9A;&#x5236;&#x7C7B;&#x578B;&#x3002;"},"9.宏/9.5.类型构建/9.5.类型构建.html":{"title":"","path":"\\9.宏\\9.5.类型构建\\9.5.类型构建.html","body":"9.5.类型构建 类型构建宏和表达式宏在很多方面是不同的： 它们不返回表达式，而是一个数组或者类字段。它们的返回类型必须显式设置为 Arrayhaxe.macro.Expr.Field 。 它们的上下文环境（第9.1节）没有局部方法也没有局部变量。 它们的额上下文环境有构建字段，可以从 haxe.macro.Context.getBuildFields() 获得。 它们不会被直接调用，但是是一个类或者枚举声明上的 @:build 或者 @:autoBuild 元数据（第6.9节）的一个参数。 如下的例子演示了类型构建。注意，它被分成两个文件是有原因的：如果一个模块包含一个宏函数，它也必须类型化到 macro 上下文。 这对类型构建宏来说经常是一个问题，因为要构建的类型只能在它的不完整阶段被加载，在构建宏运行之前。我们建议总是定义类型构建宏到它们自己的模块。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import haxe.macro.Context; import haxe.macro.Expr; class TypeBuildingMacro  macro static public function build (fieldName: String ): Array Field  var fields = Context.getBuildFields(); var new Field =  name: fieldName , doc: null , meta: [], access: [AStatic, APublic], kind: FVar (macro : String , macro \"my default\" ), pos: Context .currentPos() ; fields.push( new Field ); return fields;   @:build(TypeBuildingMacro.build(\"myFunc\")) class Main  static public function main ()  trace (Main.myFunc); // my default   TypeBuildingMacro 的构建方法执行三步： 它使用 Context.getBuildFields() 获得构建字段。 它使用 funcNace 宏参数作为字段名声明一个新的 haxe.macro.expr.Field 字段。这个字段是一个 String变量默认值为 “my default”（来自于 kind 字段），而且是 public static 的（来自于 access 字段）。 它添加新的字段到构建的字段数组，并返回它。 这个宏是Main 类上 @:build 元数据的参数。一旦这个类型被需要的，编译器就做以下事： 它解析模块文件，包含类字段。 它设置类型，包含它和其它类型通过继承和接口产生的关系。 它根据 @:build 元数据 执行类型构建宏。 它使用被类型构建宏返回的字段继续如常类型化类。 这允许在一个类型构建宏中随意添加和修改类字段。在我们的例子中，宏被调用，使用了一个 myFunc 参数，使 Main.myFunc 成为一个有效的字段访问。 如果一个类型构建宏不应修改任何内容，宏可以返回null 。这指示编译器没有刻意的改变，更好的是返回 Context.getBuildFields() 。"},"9.宏/9.5.类型构建/9.5.类型构建.html#9-5-类型构建":{"title":"9.5.&#x7C7B;&#x578B;&#x6784;&#x5EFA;","path":"\\9.宏\\9.5.类型构建\\9.5.类型构建.html#9-5-类型构建","body":"&#x7C7B;&#x578B;&#x6784;&#x5EFA;&#x5B8F;&#x548C;&#x8868;&#x8FBE;&#x5F0F;&#x5B8F;&#x5728;&#x5F88;&#x591A;&#x65B9;&#x9762;&#x662F;&#x4E0D;&#x540C;&#x7684;&#xFF1A; &#x5B83;&#x4EEC;&#x4E0D;&#x8FD4;&#x56DE;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x800C;&#x662F;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x6216;&#x8005;&#x7C7B;&#x5B57;&#x6BB5;&#x3002;&#x5B83;&#x4EEC;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x663E;&#x5F0F;&#x8BBE;&#x7F6E;&#x4E3A; Arrayhaxe.macro.Expr.Field &#x3002; &#x5B83;&#x4EEC;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x73AF;&#x5883;&#xFF08;&#x7B2C;9.1&#x8282;&#xFF09;&#x6CA1;&#x6709;&#x5C40;&#x90E8;&#x65B9;&#x6CD5;&#x4E5F;&#x6CA1;&#x6709;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x3002; &#x5B83;&#x4EEC;&#x7684;&#x989D;&#x4E0A;&#x4E0B;&#x6587;&#x73AF;&#x5883;&#x6709;&#x6784;&#x5EFA;&#x5B57;&#x6BB5;&#xFF0C;&#x53EF;&#x4EE5;&#x4ECE; haxe.macro.Context.getBuildFields() &#x83B7;&#x5F97;&#x3002; &#x5B83;&#x4EEC;&#x4E0D;&#x4F1A;&#x88AB;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#xFF0C;&#x4F46;&#x662F;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x6216;&#x8005;&#x679A;&#x4E3E;&#x58F0;&#x660E;&#x4E0A;&#x7684; @:build &#x6216;&#x8005; @:autoBuild &#x5143;&#x6570;&#x636E;&#xFF08;&#x7B2C;6.9&#x8282;&#xFF09;&#x7684;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x3002; &#x5982;&#x4E0B;&#x7684;&#x4F8B;&#x5B50;&#x6F14;&#x793A;&#x4E86;&#x7C7B;&#x578B;&#x6784;&#x5EFA;&#x3002;&#x6CE8;&#x610F;&#xFF0C;&#x5B83;&#x88AB;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x6587;&#x4EF6;&#x662F;&#x6709;&#x539F;&#x56E0;&#x7684;&#xFF1A;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x5B8F;&#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x4E5F;&#x5FC5;&#x987B;&#x7C7B;&#x578B;&#x5316;&#x5230; macro &#x4E0A;&#x4E0B;&#x6587;&#x3002; &#x8FD9;&#x5BF9;&#x7C7B;&#x578B;&#x6784;&#x5EFA;&#x5B8F;&#x6765;&#x8BF4;&#x7ECF;&#x5E38;&#x662F;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x8981;&#x6784;&#x5EFA;&#x7684;&#x7C7B;&#x578B;&#x53EA;&#x80FD;&#x5728;&#x5B83;&#x7684;&#x4E0D;&#x5B8C;&#x6574;&#x9636;&#x6BB5;&#x88AB;&#x52A0;&#x8F7D;&#xFF0C;&#x5728;&#x6784;&#x5EFA;&#x5B8F;&#x8FD0;&#x884C;&#x4E4B;&#x524D;&#x3002;&#x6211;&#x4EEC;&#x5EFA;&#x8BAE;&#x603B;&#x662F;&#x5B9A;&#x4E49;&#x7C7B;&#x578B;&#x6784;&#x5EFA;&#x5B8F;&#x5230;&#x5B83;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;&#x6A21;&#x5757;&#x3002; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import haxe.macro.Context; import haxe.macro.Expr; class TypeBuildingMacro { macro static public function build (fieldName: String ): Array Field { var fields = Context.getBuildFields(); var new Field = { name: fieldName , doc: null , meta: [], access: [AStatic, APublic], kind: FVar (macro : String , macro my default ), pos: Context .currentPos() }; fields.push( new Field ); return fields; } } @:build(TypeBuildingMacro.build(myFunc)) class Main { static public function main () { trace (Main.myFunc); // my default } } TypeBuildingMacro &#x7684;&#x6784;&#x5EFA;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x4E09;&#x6B65;&#xFF1A; &#x5B83;&#x4F7F;&#x7528; Context.getBuildFields() &#x83B7;&#x5F97;&#x6784;&#x5EFA;&#x5B57;&#x6BB5;&#x3002; &#x5B83;&#x4F7F;&#x7528; funcNace &#x5B8F;&#x53C2;&#x6570;&#x4F5C;&#x4E3A;&#x5B57;&#x6BB5;&#x540D;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x65B0;&#x7684; haxe.macro.expr.Field &#x5B57;&#x6BB5;&#x3002;&#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#x662F;&#x4E00;&#x4E2A; String&#x53D8;&#x91CF;&#x9ED8;&#x8BA4;&#x503C;&#x4E3A; &#x201C;my default&#x201D;&#xFF08;&#x6765;&#x81EA;&#x4E8E; kind &#x5B57;&#x6BB5;&#xFF09;&#xFF0C;&#x800C;&#x4E14;&#x662F; public static &#x7684;&#xFF08;&#x6765;&#x81EA;&#x4E8E; access &#x5B57;&#x6BB5;&#xFF09;&#x3002; &#x5B83;&#x6DFB;&#x52A0;&#x65B0;&#x7684;&#x5B57;&#x6BB5;&#x5230;&#x6784;&#x5EFA;&#x7684;&#x5B57;&#x6BB5;&#x6570;&#x7EC4;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x5B83;&#x3002; &#x8FD9;&#x4E2A;&#x5B8F;&#x662F;Main &#x7C7B;&#x4E0A; @:build &#x5143;&#x6570;&#x636E;&#x7684;&#x53C2;&#x6570;&#x3002;&#x4E00;&#x65E6;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x88AB;&#x9700;&#x8981;&#x7684;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x5C31;&#x505A;&#x4EE5;&#x4E0B;&#x4E8B;&#xFF1A; &#x5B83;&#x89E3;&#x6790;&#x6A21;&#x5757;&#x6587;&#x4EF6;&#xFF0C;&#x5305;&#x542B;&#x7C7B;&#x5B57;&#x6BB5;&#x3002; &#x5B83;&#x8BBE;&#x7F6E;&#x7C7B;&#x578B;&#xFF0C;&#x5305;&#x542B;&#x5B83;&#x548C;&#x5176;&#x5B83;&#x7C7B;&#x578B;&#x901A;&#x8FC7;&#x7EE7;&#x627F;&#x548C;&#x63A5;&#x53E3;&#x4EA7;&#x751F;&#x7684;&#x5173;&#x7CFB;&#x3002; &#x5B83;&#x6839;&#x636E; @:build &#x5143;&#x6570;&#x636E; &#x6267;&#x884C;&#x7C7B;&#x578B;&#x6784;&#x5EFA;&#x5B8F;&#x3002; &#x5B83;&#x4F7F;&#x7528;&#x88AB;&#x7C7B;&#x578B;&#x6784;&#x5EFA;&#x5B8F;&#x8FD4;&#x56DE;&#x7684;&#x5B57;&#x6BB5;&#x7EE7;&#x7EED;&#x5982;&#x5E38;&#x7C7B;&#x578B;&#x5316;&#x7C7B;&#x3002; &#x8FD9;&#x5141;&#x8BB8;&#x5728;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x6784;&#x5EFA;&#x5B8F;&#x4E2D;&#x968F;&#x610F;&#x6DFB;&#x52A0;&#x548C;&#x4FEE;&#x6539;&#x7C7B;&#x5B57;&#x6BB5;&#x3002;&#x5728;&#x6211;&#x4EEC;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x5B8F;&#x88AB;&#x8C03;&#x7528;&#xFF0C;&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x4E2A; myFunc &#x53C2;&#x6570;&#xFF0C;&#x4F7F; Main.myFunc &#x6210;&#x4E3A;&#x4E00;&#x4E2A;&#x6709;&#x6548;&#x7684;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x3002; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x6784;&#x5EFA;&#x5B8F;&#x4E0D;&#x5E94;&#x4FEE;&#x6539;&#x4EFB;&#x4F55;&#x5185;&#x5BB9;&#xFF0C;&#x5B8F;&#x53EF;&#x4EE5;&#x8FD4;&#x56DE;null &#x3002;&#x8FD9;&#x6307;&#x793A;&#x7F16;&#x8BD1;&#x5668;&#x6CA1;&#x6709;&#x523B;&#x610F;&#x7684;&#x6539;&#x53D8;&#xFF0C;&#x66F4;&#x597D;&#x7684;&#x662F;&#x8FD4;&#x56DE; Context.getBuildFields() &#x3002;"},"9.宏/9.7.初始化宏/9.7.初始化宏.html":{"title":"","path":"\\9.宏\\9.7.初始化宏\\9.7.初始化宏.html","body":"9.7.初始化宏 初始化宏从命令行调用，使用 –macro callExpr(args) 命令。这注册一个回调，编译器在创建它的上下文环境后，但是在类型化 -main 的参数之前调用。之后允许以某些方式配置编译器。 如果 –macro 的参数是一个简单的标识符的调用，这个标识符在Haxe标准库中的类 haxe.macro.Compiler 中查找。它附带一些有用的初始化宏，在它的 API 中有详细介绍。 当然也可以定义自定义的初始化宏来在真正编译之前执行各种任务。这样的一个宏将通过 –macro some.Class.theMacro(args) 调用。例如，因为所有宏分享同样的上下文（第9.1节），一个初始化宏可以设置其它宏用作配置的静态字段的值。"},"9.宏/9.7.初始化宏/9.7.初始化宏.html#9-7-初始化宏":{"title":"9.7.&#x521D;&#x59CB;&#x5316;&#x5B8F;","path":"\\9.宏\\9.7.初始化宏\\9.7.初始化宏.html#9-7-初始化宏","body":"&#x521D;&#x59CB;&#x5316;&#x5B8F;&#x4ECE;&#x547D;&#x4EE4;&#x884C;&#x8C03;&#x7528;&#xFF0C;&#x4F7F;&#x7528; &#x2013;macro callExpr(args) &#x547D;&#x4EE4;&#x3002;&#x8FD9;&#x6CE8;&#x518C;&#x4E00;&#x4E2A;&#x56DE;&#x8C03;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x5728;&#x521B;&#x5EFA;&#x5B83;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x73AF;&#x5883;&#x540E;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x7C7B;&#x578B;&#x5316; -main &#x7684;&#x53C2;&#x6570;&#x4E4B;&#x524D;&#x8C03;&#x7528;&#x3002;&#x4E4B;&#x540E;&#x5141;&#x8BB8;&#x4EE5;&#x67D0;&#x4E9B;&#x65B9;&#x5F0F;&#x914D;&#x7F6E;&#x7F16;&#x8BD1;&#x5668;&#x3002; &#x5982;&#x679C; &#x2013;macro &#x7684;&#x53C2;&#x6570;&#x662F;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x8FD9;&#x4E2A;&#x6807;&#x8BC6;&#x7B26;&#x5728;Haxe&#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684;&#x7C7B; haxe.macro.Compiler &#x4E2D;&#x67E5;&#x627E;&#x3002;&#x5B83;&#x9644;&#x5E26;&#x4E00;&#x4E9B;&#x6709;&#x7528;&#x7684;&#x521D;&#x59CB;&#x5316;&#x5B8F;&#xFF0C;&#x5728;&#x5B83;&#x7684; API &#x4E2D;&#x6709;&#x8BE6;&#x7EC6;&#x4ECB;&#x7ECD;&#x3002; &#x5F53;&#x7136;&#x4E5F;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x521D;&#x59CB;&#x5316;&#x5B8F;&#x6765;&#x5728;&#x771F;&#x6B63;&#x7F16;&#x8BD1;&#x4E4B;&#x524D;&#x6267;&#x884C;&#x5404;&#x79CD;&#x4EFB;&#x52A1;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x5B8F;&#x5C06;&#x901A;&#x8FC7; &#x2013;macro some.Class.theMacro(args) &#x8C03;&#x7528;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x56E0;&#x4E3A;&#x6240;&#x6709;&#x5B8F;&#x5206;&#x4EAB;&#x540C;&#x6837;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#xFF08;&#x7B2C;9.1&#x8282;&#xFF09;&#xFF0C;&#x4E00;&#x4E2A;&#x521D;&#x59CB;&#x5316;&#x5B8F;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x5176;&#x5B83;&#x5B8F;&#x7528;&#x4F5C;&#x914D;&#x7F6E;&#x7684;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x7684;&#x503C;&#x3002;"},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html":{"title":"","path":"\\9.宏\\9.6.限制\\9.6.1Macro-in-Macro.html","body":"9.6.1Macro-in-Macro Build macros cannot be invoked from a macro context. This means it is impossible to use a macro to create a class which will provide build macros for other classes. since Haxe 4.0.0 It is also disallowed to invoke expression macros in a macro context. Trivia: Expression macro-in-macro Prior to Haxe 4, using expression macros inside a macro context was possible. Support was primarily dropped because such code would cause issues with the compiler cache."},"9.宏/9.6.限制/9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro":{"title":"9.6.1Macro-in-Macro","path":"\\9.宏\\9.6.限制\\9.6.1Macro-in-Macro.html#9-6-1Macro-in-Macro","body":"Build macros cannot be invoked from a macro context. This means it is impossible to use a macro to create a class which will provide build macros for other classes. since Haxe 4.0.0 It is also disallowed to invoke expression macros in a macro context. Trivia: Expression macro-in-macro Prior to Haxe 4, using expression macros inside a macro context was possible. Support was primarily dropped because such code would cause issues with the compiler cache."},"9.宏/9.6.限制/9.6.2.静态扩展.html":{"title":"","path":"\\9.宏\\9.6.限制\\9.6.2.静态扩展.html","body":"9.6.2.静态扩展 静态扩展（第6.3节）和宏的概念有一些冲突：前者需要一个已知类型来确定使用的函数，而宏在类型化简单的语法之前执行。因此毫不奇怪，结合使用这两个特性可能导致问题。Haxe 3.0 会尝试转换 类型化表达式回到一个 语法表达式，并不总是可行，可能丢失一些重要信息。我们建议小心使用。 从 Haxe 3.1.0 以后： 静态扩展和宏的组合在 3.1.0 版本被重构。Haxe编译器甚至不设法寻找宏参数最初的表达式，而是传递一个特殊的 @:this this 表达式。而这个表达式的结构不传达信息，表达式仍然被正确的类型化： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import haxe.macro.Context; import haxe.macro.Expr; using Main; using haxe.macro.Tools; class Main  static public function main ()  # if !macro var a = \"foo\" ; a.test(); # end  macro static function test (e: ExprOf  String )  trace (e.toString()); // @:this this // TInst(String,[]) trace (Context.typeof(e)); return e;  "},"9.宏/9.6.限制/9.6.2.静态扩展.html#9-6-2-静态扩展":{"title":"9.6.2.&#x9759;&#x6001;&#x6269;&#x5C55;","path":"\\9.宏\\9.6.限制\\9.6.2.静态扩展.html#9-6-2-静态扩展","body":"&#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09;&#x548C;&#x5B8F;&#x7684;&#x6982;&#x5FF5;&#x6709;&#x4E00;&#x4E9B;&#x51B2;&#x7A81;&#xFF1A;&#x524D;&#x8005;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x5DF2;&#x77E5;&#x7C7B;&#x578B;&#x6765;&#x786E;&#x5B9A;&#x4F7F;&#x7528;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x800C;&#x5B8F;&#x5728;&#x7C7B;&#x578B;&#x5316;&#x7B80;&#x5355;&#x7684;&#x8BED;&#x6CD5;&#x4E4B;&#x524D;&#x6267;&#x884C;&#x3002;&#x56E0;&#x6B64;&#x6BEB;&#x4E0D;&#x5947;&#x602A;&#xFF0C;&#x7ED3;&#x5408;&#x4F7F;&#x7528;&#x8FD9;&#x4E24;&#x4E2A;&#x7279;&#x6027;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x95EE;&#x9898;&#x3002;Haxe 3.0 &#x4F1A;&#x5C1D;&#x8BD5;&#x8F6C;&#x6362; &#x7C7B;&#x578B;&#x5316;&#x8868;&#x8FBE;&#x5F0F;&#x56DE;&#x5230;&#x4E00;&#x4E2A; &#x8BED;&#x6CD5;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x5E76;&#x4E0D;&#x603B;&#x662F;&#x53EF;&#x884C;&#xFF0C;&#x53EF;&#x80FD;&#x4E22;&#x5931;&#x4E00;&#x4E9B;&#x91CD;&#x8981;&#x4FE1;&#x606F;&#x3002;&#x6211;&#x4EEC;&#x5EFA;&#x8BAE;&#x5C0F;&#x5FC3;&#x4F7F;&#x7528;&#x3002; &#x4ECE; Haxe 3.1.0 &#x4EE5;&#x540E;&#xFF1A; &#x9759;&#x6001;&#x6269;&#x5C55;&#x548C;&#x5B8F;&#x7684;&#x7EC4;&#x5408;&#x5728; 3.1.0 &#x7248;&#x672C;&#x88AB;&#x91CD;&#x6784;&#x3002;Haxe&#x7F16;&#x8BD1;&#x5668;&#x751A;&#x81F3;&#x4E0D;&#x8BBE;&#x6CD5;&#x5BFB;&#x627E;&#x5B8F;&#x53C2;&#x6570;&#x6700;&#x521D;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x800C;&#x662F;&#x4F20;&#x9012;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684; @:this this &#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x800C;&#x8FD9;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7ED3;&#x6784;&#x4E0D;&#x4F20;&#x8FBE;&#x4FE1;&#x606F;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F;&#x4ECD;&#x7136;&#x88AB;&#x6B63;&#x786E;&#x7684;&#x7C7B;&#x578B;&#x5316;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import haxe.macro.Context; import haxe.macro.Expr; using Main; using haxe.macro.Tools; class Main { static public function main () { # if !macro var a = foo ; a.test(); # end } macro static function test (e: ExprOf  String ) { trace (e.toString()); // @:this this // TInst(String,[]) trace (Context.typeof(e)); return e; } }"},"9.宏/9.6.限制/9.6.3.构建顺序.html":{"title":"","path":"\\9.宏\\9.6.限制\\9.6.3.构建顺序.html","body":"9.6.3.构建顺序 类型的构建顺序是不确定的，这延伸到构建宏的执行顺序。虽然可以确定一些规则，我们强烈建议不要依赖构建宏的执行顺序。如果类型构建需要多次传递，这应该被直接反映到宏代码中。为了避免相同类型多次执行构建宏，状态可以被存储到静态变量或者添加为元数据到涉及到的类型： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import haxe.macro.Context; import haxe.macro.Expr; # if !macro @:autoBuild(MyMacro.build()) # end interface I1   # if !macro @:autoBuild(MyMacro.build()) # end interface I2   class C implements I1 implements I2   class MyMacro  macro static public function build (): Array Field  var c = Context.getLocalClass(). get (); if (c.meta.has( \":processed\" )) return null ; c.meta.add( \":processed\" ,[],c.pos); // process here return null ;   class Main  static public function main ()    接口 I1 和 I2 都有 :autoBuild 元数据，构建宏对于 C 类执行两次。我们通过添加一个自定义的 :processed 元数据到类来防止多次处理，在第二次的宏执行中可以被检查："},"9.宏/9.6.限制/9.6.3.构建顺序.html#9-6-3-构建顺序":{"title":"9.6.3.&#x6784;&#x5EFA;&#x987A;&#x5E8F;","path":"\\9.宏\\9.6.限制\\9.6.3.构建顺序.html#9-6-3-构建顺序","body":"&#x7C7B;&#x578B;&#x7684;&#x6784;&#x5EFA;&#x987A;&#x5E8F;&#x662F;&#x4E0D;&#x786E;&#x5B9A;&#x7684;&#xFF0C;&#x8FD9;&#x5EF6;&#x4F38;&#x5230;&#x6784;&#x5EFA;&#x5B8F;&#x7684;&#x6267;&#x884C;&#x987A;&#x5E8F;&#x3002;&#x867D;&#x7136;&#x53EF;&#x4EE5;&#x786E;&#x5B9A;&#x4E00;&#x4E9B;&#x89C4;&#x5219;&#xFF0C;&#x6211;&#x4EEC;&#x5F3A;&#x70C8;&#x5EFA;&#x8BAE;&#x4E0D;&#x8981;&#x4F9D;&#x8D56;&#x6784;&#x5EFA;&#x5B8F;&#x7684;&#x6267;&#x884C;&#x987A;&#x5E8F;&#x3002;&#x5982;&#x679C;&#x7C7B;&#x578B;&#x6784;&#x5EFA;&#x9700;&#x8981;&#x591A;&#x6B21;&#x4F20;&#x9012;&#xFF0C;&#x8FD9;&#x5E94;&#x8BE5;&#x88AB;&#x76F4;&#x63A5;&#x53CD;&#x6620;&#x5230;&#x5B8F;&#x4EE3;&#x7801;&#x4E2D;&#x3002;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x76F8;&#x540C;&#x7C7B;&#x578B;&#x591A;&#x6B21;&#x6267;&#x884C;&#x6784;&#x5EFA;&#x5B8F;&#xFF0C;&#x72B6;&#x6001;&#x53EF;&#x4EE5;&#x88AB;&#x5B58;&#x50A8;&#x5230;&#x9759;&#x6001;&#x53D8;&#x91CF;&#x6216;&#x8005;&#x6DFB;&#x52A0;&#x4E3A;&#x5143;&#x6570;&#x636E;&#x5230;&#x6D89;&#x53CA;&#x5230;&#x7684;&#x7C7B;&#x578B;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import haxe.macro.Context; import haxe.macro.Expr; # if !macro @:autoBuild(MyMacro.build()) # end interface I1 { } # if !macro @:autoBuild(MyMacro.build()) # end interface I2 { } class C implements I1 implements I2 { } class MyMacro { macro static public function build (): Array Field { var c = Context.getLocalClass(). get (); if (c.meta.has( :processed )) return null ; c.meta.add( :processed ,[],c.pos); // process here return null ; } } class Main { static public function main () { } } &#x63A5;&#x53E3; I1 &#x548C; I2 &#x90FD;&#x6709; :autoBuild &#x5143;&#x6570;&#x636E;&#xFF0C;&#x6784;&#x5EFA;&#x5B8F;&#x5BF9;&#x4E8E; C &#x7C7B;&#x6267;&#x884C;&#x4E24;&#x6B21;&#x3002;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x81EA;&#x5B9A;&#x4E49;&#x7684; :processed &#x5143;&#x6570;&#x636E;&#x5230;&#x7C7B;&#x6765;&#x9632;&#x6B62;&#x591A;&#x6B21;&#x5904;&#x7406;&#xFF0C;&#x5728;&#x7B2C;&#x4E8C;&#x6B21;&#x7684;&#x5B8F;&#x6267;&#x884C;&#x4E2D;&#x53EF;&#x4EE5;&#x88AB;&#x68C0;&#x67E5;&#xFF1A;"},"9.宏/9.6.限制/9.6.4.类型参数.html":{"title":"","path":"\\9.宏\\9.6.限制\\9.6.4.类型参数.html","body":"9.6.4.类型参数 官方文档暂无内容"},"9.宏/9.6.限制/9.6.4.类型参数.html#9-6-4-类型参数":{"title":"9.6.4.&#x7C7B;&#x578B;&#x53C2;&#x6570;","path":"\\9.宏\\9.6.限制\\9.6.4.类型参数.html#9-6-4-类型参数","body":"&#x5B98;&#x65B9;&#x6587;&#x6863;&#x6682;&#x65E0;&#x5185;&#x5BB9;"},"9.宏/9.6.限制/9.6.限制.html":{"title":"","path":"\\9.宏\\9.6.限制\\9.6.限制.html","body":"9.6.限制 本节内容： 9.6.1: Macro-in-Macro 9.6.2: 静态扩展 9.6.3: 构建顺序 9.6.4: 类型参数"},"9.宏/9.6.限制/9.6.限制.html#9-6-限制":{"title":"9.6.&#x9650;&#x5236;","path":"\\9.宏\\9.6.限制\\9.6.限制.html#9-6-限制","body":"&#x672C;&#x8282;&#x5185;&#x5BB9;&#xFF1A; 9.6.1: Macro-in-Macro 9.6.2: &#x9759;&#x6001;&#x6269;&#x5C55; 9.6.3: &#x6784;&#x5EFA;&#x987A;&#x5E8F; 9.6.4: &#x7C7B;&#x578B;&#x53C2;&#x6570;"},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html":{"title":"","path":"\\8.编译器功能\\8.1.内建编译器元数据\\8.1.内建编译器元数据.html","body":"8.1.内建编译器元数据 从Haxe 3.0开始，你可以运行 –help-metas 来获得定义的编译器元数据的列表。 全局元数据： 元数据 描述 平台 @:abi Function ABI/calling convention cpp @:abstract Sets the underlying class implementation as abstract type cs java @:access (Target path) Forces private access to package type or field, see Access Control all @:allow (Target path) Allows private access from package type or field, see Access Control all @:analyzer Used to configure the static analyzer all @:annotation Annotation (@interface) definitions on -java-lib imports will be annotated with this metadata. Has no effect on types compiled by Haxe java @:arrayAccess Allows Array access on an abstract all @:autoBuild (Build macro call) Extends @:build metadata to all extending and implementing classes. See Macro autobuild all @:bind Override Swf class declaration flash @:bitmap (Bitmap file path) _Embeds given bitmap data into the class (must extend flash.display.BitmapData) flash @:bridgeProperties Creates native property bridges for all Haxe properties in this class cs @:build (Build macro call) Builds a class or enum from a macro. See Type Building all @:buildXml Specify xml data to be injected into Build.xml cpp @:callable Abstract forwards call to its underlying type all @:classCode Used to inject platform-native code into a class cs java @:commutative Declares an abstract operator as commutative all @:compilerGenerated Marks a field as generated by the compiler. Shouldn’t be used by the end user cs java @:coreApi Identifies this class as a core api class (forces Api check) all @:coreType Identifies an abstract as core type so that it requires no implementation all @:cppFileCode Code to be injected into generated cpp file cpp @:cppInclude File to be included in generated cpp file cpp @:cppNamespaceCode cpp @:dce Forces Dead Code Elimination even when not -dce full is specified all @:debug Forces debug information to be generated into the Swf even without -debug flash @:decl cpp @:defParam all @:delegate Automatically added by -net-lib on delegates cs @:depend cpp @:deprecated Automatically added by -java-lib on class fields annotated with @Deprecated annotation. Has no effect on types compiled by Haxe java @:event Automatically added by -net-lib on events. Has no effect on types compiled by Haxe cs @:enum Defines finite value sets to abstract definitions. See enum abstracts all @:expose (?Name=Class path) Makes the class available on the window object or exports for node.js. See exposing Haxe classes for JavaScript js @:extern Marks the field as extern so it is not generated all @:fakeEnum (Type name) Treat enum as collection of values of the specified type all @:file(File path) Includes a given binary file into the target Swf and associates it with the class (must extend flash.utils.ByteArray) flash @:final Prevents a class from being extended all @:font (TTF path Range String) Embeds the given TrueType font into the class (must extend flash.text.Font) flash @:forward (List of field names) Forwards field access to underlying type all @:from Specifies that the field of the abstract is a cast operation from the type identified in the function. See Implicit Casts all @:functionCode cpp @:functionTailCode cpp @:generic Marks a class or class field as generic so each type parameter combination generates its own type/field all @:genericBuild Builds instances of a type using the specified macro all @:getter (Class field name) Generates a native getter function on the given field flash @:hack Allows extending classes marked as @:final all @:headerClassCode Code to be injected into the generated class, in the header cpp @:headerCode Code to be injected into the generated header file cpp @:headerNamespaceCode cpp @:hxGen Annotates that an extern class was generated by Haxe cs java @:ifFeature (Feature name) Causes a field to be kept by DCE if the given feature is part of the compilation all @:include cpp @:initPackage all @:internal Generates the annotated field/class with internal access cs java @:isVar Forces a physical field to be generated for properties that otherwise would not require one all @:javaCanonical (Output type package,Output type name) Used by the Java target to annotate the canonical path of the type java @:jsRequire Generate javascript module require expression for given extern js @:keep Causes a field or type to be kept by DCE all @:keepInit Causes a class to be kept by DCE even if all its field are removed all @:keepSub Extends @:keep metadata to all implementing and extending classes all @:macro (deprecated) all @:mergeBlock Merge the annotated block into the current scope all @:meta Internally used to mark a class field as being the metadata field all @:multiType (Relevant type parameters) Specifies that an abstract chooses its this-type from its @:to functions all @:native (Output type path) Rewrites the path of a class or enum during generation all @:nativeChildren Annotates that all children from a type should be treated as if it were an extern definition - platform native cs java @:nativeGen Annotates that a type should be treated as if it were an extern definition - platform native cs java @:nativeProperty Use native properties which will execute even with dynamic usage cpp @:noCompletion Prevents the compiler from suggesting completion on this field all @:noDebug Does not generate debug information into the Swf even if -debug is set flash @:noDoc Prevents a type from being included in documentation generation all @:noImportGlobal Prevents a static field from being imported with import Class.* all @:noPrivateAccess Disallow private access to anything for the annotated expression all @:noStack cpp @:noUsing Prevents a field from being used with using all @:nonVirtual Declares function to be non-virtual cpp @:notNull Declares an abstract type as not accepting null values all @:ns Internally used by the Swf generator to handle namespaces flash @:op (The operation) Declares an abstract field as being an operator overload all @:optional Marks the field of a structure as optional. See Optional Arguments all @:overload (Function specification) Allows the field to be called with different argument types. Function specification cannot be an expression all @:privateAccess Allow private access to anything for the annotated expression all @:property Marks a property field to be compiled as a native C# property cs @:protected Marks a class field as being protected all @:public Marks a class field as being public all @:publicFields Forces all class fields of inheriting classes to be public all @:pythonImport Generates python import statement for extern classes python @:readOnly Generates a field with the readonly native keyword cs @:remove Causes an interface to be removed from all implementing classes before generation all @:require (Compiler flag to check) Allows access to a field only if the specified compiler flag is set all @:rtti Adds runtime type informations. See RTTI all @:runtime all @:runtimeValue Marks an abstract as being a runtime value all @:selfCall Translates method calls into calling object directly js @:setter (Class field name) Generates a native setter function on the given field flash @:sound (File path) Includes a given .wav or .mp3 file into the target Swf and associates it with the class (must extend flash.media.Sound) flash @:sourceFile Source code filename for external class cpp @:strict Used to declare a native C# attribute or a native Java metadata. Is type checked cs java @:struct Marks a class definition as a struct cs @:structAccess Marks an extern class as using struct access(‘.’) not pointer(‘-’) cpp @:suppressWarnings Adds a SuppressWarnings annotation for the generated Java class java @:throws (Type as String) Adds a throws declaration to the generated function java @:to Specifies that the field of the abstract is a cast operation to the type identified in the function. See Implicit Casts all @:transient Adds the transient flag to the class field java @:unbound Compiler internal to denote unbounded global variable all @:unifyMinDynamic Allows a collection of types to unify to Dynamic all @:unreflective cpp @:unsafe Declares a class or a method with the C#’s unsafe flag cs @:usage all @:value Used to store default values for fields and function arguments all @:void Use Cpp native ‘void’ return type cpp @:volatile cs java"},"8.编译器功能/8.1.内建编译器元数据/8.1.内建编译器元数据.html#8-1-内建编译器元数据":{"title":"8.1.&#x5185;&#x5EFA;&#x7F16;&#x8BD1;&#x5668;&#x5143;&#x6570;&#x636E;","path":"\\8.编译器功能\\8.1.内建编译器元数据\\8.1.内建编译器元数据.html#8-1-内建编译器元数据","body":"&#x4ECE;Haxe 3.0&#x5F00;&#x59CB;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x8FD0;&#x884C; &#x2013;help-metas &#x6765;&#x83B7;&#x5F97;&#x5B9A;&#x4E49;&#x7684;&#x7F16;&#x8BD1;&#x5668;&#x5143;&#x6570;&#x636E;&#x7684;&#x5217;&#x8868;&#x3002; &#x5168;&#x5C40;&#x5143;&#x6570;&#x636E;&#xFF1A; &#x5143;&#x6570;&#x636E; &#x63CF;&#x8FF0; &#x5E73;&#x53F0; @:abi Function ABI/calling convention cpp @:abstract Sets the underlying class implementation as abstract type cs java @:access (Target path) Forces private access to package type or field, see Access Control all @:allow (Target path) Allows private access from package type or field, see Access Control all @:analyzer Used to configure the static analyzer all @:annotation Annotation (@interface) definitions on -java-lib imports will be annotated with this metadata. Has no effect on types compiled by Haxe java @:arrayAccess Allows Array access on an abstract all @:autoBuild (Build macro call) Extends @:build metadata to all extending and implementing classes. See Macro autobuild all @:bind Override Swf class declaration flash @:bitmap (Bitmap file path) _Embeds given bitmap data into the class (must extend flash.display.BitmapData) flash @:bridgeProperties Creates native property bridges for all Haxe properties in this class cs @:build (Build macro call) Builds a class or enum from a macro. See Type Building all @:buildXml Specify xml data to be injected into Build.xml cpp @:callable Abstract forwards call to its underlying type all @:classCode Used to inject platform-native code into a class cs java @:commutative Declares an abstract operator as commutative all @:compilerGenerated Marks a field as generated by the compiler. Shouldn&#x2019;t be used by the end user cs java @:coreApi Identifies this class as a core api class (forces Api check) all @:coreType Identifies an abstract as core type so that it requires no implementation all @:cppFileCode Code to be injected into generated cpp file cpp @:cppInclude File to be included in generated cpp file cpp @:cppNamespaceCode cpp @:dce Forces Dead Code Elimination even when not -dce full is specified all @:debug Forces debug information to be generated into the Swf even without -debug flash @:decl cpp @:defParam all @:delegate Automatically added by -net-lib on delegates cs @:depend cpp @:deprecated Automatically added by -java-lib on class fields annotated with @Deprecated annotation. Has no effect on types compiled by Haxe java @:event Automatically added by -net-lib on events. Has no effect on types compiled by Haxe cs @:enum Defines finite value sets to abstract definitions. See enum abstracts all @:expose (?Name=Class path) Makes the class available on the window object or exports for node.js. See exposing Haxe classes for JavaScript js @:extern Marks the field as extern so it is not generated all @:fakeEnum (Type name) Treat enum as collection of values of the specified type all @:file(File path) Includes a given binary file into the target Swf and associates it with the class (must extend flash.utils.ByteArray) flash @:final Prevents a class from being extended all @:font (TTF path Range String) Embeds the given TrueType font into the class (must extend flash.text.Font) flash @:forward (List of field names) Forwards field access to underlying type all @:from Specifies that the field of the abstract is a cast operation from the type identified in the function. See Implicit Casts all @:functionCode cpp @:functionTailCode cpp @:generic Marks a class or class field as generic so each type parameter combination generates its own type/field all @:genericBuild Builds instances of a type using the specified macro all @:getter (Class field name) Generates a native getter function on the given field flash @:hack Allows extending classes marked as @:final all @:headerClassCode Code to be injected into the generated class, in the header cpp @:headerCode Code to be injected into the generated header file cpp @:headerNamespaceCode cpp @:hxGen Annotates that an extern class was generated by Haxe cs java @:ifFeature (Feature name) Causes a field to be kept by DCE if the given feature is part of the compilation all @:include cpp @:initPackage all @:internal Generates the annotated field/class with internal access cs java @:isVar Forces a physical field to be generated for properties that otherwise would not require one all @:javaCanonical (Output type package,Output type name) Used by the Java target to annotate the canonical path of the type java @:jsRequire Generate javascript module require expression for given extern js @:keep Causes a field or type to be kept by DCE all @:keepInit Causes a class to be kept by DCE even if all its field are removed all @:keepSub Extends @:keep metadata to all implementing and extending classes all @:macro (deprecated) all @:mergeBlock Merge the annotated block into the current scope all @:meta Internally used to mark a class field as being the metadata field all @:multiType (Relevant type parameters) Specifies that an abstract chooses its this-type from its @:to functions all @:native (Output type path) Rewrites the path of a class or enum during generation all @:nativeChildren Annotates that all children from a type should be treated as if it were an extern definition - platform native cs java @:nativeGen Annotates that a type should be treated as if it were an extern definition - platform native cs java @:nativeProperty Use native properties which will execute even with dynamic usage cpp @:noCompletion Prevents the compiler from suggesting completion on this field all @:noDebug Does not generate debug information into the Swf even if -debug is set flash @:noDoc Prevents a type from being included in documentation generation all @:noImportGlobal Prevents a static field from being imported with import Class.* all @:noPrivateAccess Disallow private access to anything for the annotated expression all @:noStack cpp @:noUsing Prevents a field from being used with using all @:nonVirtual Declares function to be non-virtual cpp @:notNull Declares an abstract type as not accepting null values all @:ns Internally used by the Swf generator to handle namespaces flash @:op (The operation) Declares an abstract field as being an operator overload all @:optional Marks the field of a structure as optional. See Optional Arguments all @:overload (Function specification) Allows the field to be called with different argument types. Function specification cannot be an expression all @:privateAccess Allow private access to anything for the annotated expression all @:property Marks a property field to be compiled as a native C# property cs @:protected Marks a class field as being protected all @:public Marks a class field as being public all @:publicFields Forces all class fields of inheriting classes to be public all @:pythonImport Generates python import statement for extern classes python @:readOnly Generates a field with the readonly native keyword cs @:remove Causes an interface to be removed from all implementing classes before generation all @:require (Compiler flag to check) Allows access to a field only if the specified compiler flag is set all @:rtti Adds runtime type informations. See RTTI all @:runtime all @:runtimeValue Marks an abstract as being a runtime value all @:selfCall Translates method calls into calling object directly js @:setter (Class field name) Generates a native setter function on the given field flash @:sound (File path) Includes a given .wav or .mp3 file into the target Swf and associates it with the class (must extend flash.media.Sound) flash @:sourceFile Source code filename for external class cpp @:strict Used to declare a native C# attribute or a native Java metadata. Is type checked cs java @:struct Marks a class definition as a struct cs @:structAccess Marks an extern class as using struct access(&#x2018;.&#x2019;) not pointer(&#x2018;-&#x2019;) cpp @:suppressWarnings Adds a SuppressWarnings annotation for the generated Java class java @:throws (Type as String) Adds a throws declaration to the generated function java @:to Specifies that the field of the abstract is a cast operation to the type identified in the function. See Implicit Casts all @:transient Adds the transient flag to the class field java @:unbound Compiler internal to denote unbounded global variable all @:unifyMinDynamic Allows a collection of types to unify to Dynamic all @:unreflective cpp @:unsafe Declares a class or a method with the C#&#x2019;s unsafe flag cs @:usage all @:value Used to store default values for fields and function arguments all @:void Use Cpp native &#x2018;void&#x2019; return type cpp @:volatile cs java"}}}