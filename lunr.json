{"index":{"version":"2.1.0","fields":["title","body"],"fieldVectors":[["title/index.html",[0,0.104]],["body/index.html",[0,0.288,1,5.48,2,5.48,3,5.48,4,0.945,5,1.055,6,0.367,7,3.013,8,3.221,9,2.831]],["title/index.html#关于本文档",[10,3.449]],["body/index.html#关于本文档",[0,0.229,1,5.501,2,5.501,3,5.501,4,0.946,5,1.059,6,0.368,7,3.024,8,3.233,9,2.842,11,6.221,12,6.221,13,6.221,14,6.221,15,6.221,16,6.221,17,6.221,18,6.221,19,6.221,20,6.221,21,6.221,22,6.221,23,6.221,24,6.221,25,6.221,26,6.221,27,6.221,28,6.221,29,4.673,30,6.221,31,6.221,32,6.221,33,6.221,34,6.221,35,3.62,36,6.221,37,6.221]],["title/3.类型系统/3.类型系统.html",[]],["body/3.类型系统/3.类型系统.html",[0,0.281,38,0.7,39,0.604,40,5.222,41,2.759,42,4.22,43,4.417,44,5.222]],["title/3.类型系统/3.类型系统.html#3-类型系统",[45,3.449]],["body/3.类型系统/3.类型系统.html#3-类型系统",[41,2.771,46,6.982,47,6.982,48,6.982,49,5.642,50,6.982,51,6.982,52,4.927,53,6.982,54,6.982,55,5.642,56,6.982,57,6.982,58,6.982,59,6.982]],["title/2.类型/2.类型.html",[]],["body/2.类型/2.类型.html",[0,0.287,4,0.915,6,0.433,39,0.636,42,3.569,60,0.89,61,5.198,62,2.21,63,7.598,64,5.198,65,7.055,66,3.055,67,3.421,68,4.416,69,4.148]],["title/2.类型/2.类型.html#2-类型",[70,3.449]],["body/2.类型/2.类型.html#2-类型",[0,0.269,4,0.89,6,0.434,29,4.432,39,0.513,52,4.164,60,0.892,61,5.217,62,2.214,63,7.606,64,5.217,65,7.067,66,3.066,68,4.432,71,5.9,72,5.9,73,5.9,74,5.9,75,4.768,76,5.9,77,5.9,78,5.9,79,5.9,80,5.9,81,5.9,82,5.9,83,5.9,84,5.9,85,5.9,86,5.9,87,5.9,88,5.9,89,5.9,90,5.9,91,5.9,92,5.9,93,5.217,94,2.167]],["title/2.类型/2.1.基本类型/2.1.1.数值类型.html",[]],["body/2.类型/2.1.基本类型/2.1.1.数值类型.html",[0,0.283,95,6.634,96,4.119,97,5.867,98,5.867,99,1.242]],["title/2.类型/2.1.基本类型/2.1.1.数值类型.html#2-1-1-数值类型",[100,3.449]],["body/2.类型/2.1.基本类型/2.1.1.数值类型.html#2-1-1-数值类型",[]],["title/2.类型/2.1.基本类型/2.1.1.数值类型.html#Float",[96,1.575]],["body/2.类型/2.1.基本类型/2.1.1.数值类型.html#Float",[96,3.32,97,6.427,98,6.427,101,6.427,102,7.268,103,7.268]],["title/2.类型/2.1.基本类型/2.1.1.数值类型.html#Int",[99,0.475]],["body/2.类型/2.1.基本类型/2.1.1.数值类型.html#Int",[96,4.025,99,1.177,101,6.094,104,6.892,105,6.892,106,6.892,107,6.892,108,6.892,109,6.892,110,6.892,111,6.892,112,6.892,113,6.892]],["title/2.类型/2.1.基本类型/2.1.2.溢出.html",[]],["body/2.类型/2.1.基本类型/2.1.2.溢出.html",[0,0.268,4,0.75,99,0.97,114,7.043,115,7.043,116,7.043,117,1.226,118,7.043,119,6.228,120,6.228]],["title/2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出",[121,3.449]],["body/2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出",[99,0.975,119,6.256,120,6.256,122,7.075,123,7.075,124,7.075,125,7.075,126,7.075,127,7.075,128,7.075,129,2.473,130,7.075]],["title/2.类型/2.1.基本类型/2.1.5.Void类型.html",[]],["body/2.类型/2.1.基本类型/2.1.5.Void类型.html",[0,0.284,4,0.617,5,1.414,6,0.429,38,0.583,39,0.63,60,0.882,69,4.088,131,5.793,132,5.555,133,5.451,134,6.418,135,0.651,136,0.634,137,0.722,138,0.942,139,0.942,140,0.704,141,1.84,142,1.976,143,5.123,144,2.427,145,1.128,146,5.793,147,5.123,148,5.793]],["title/2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型",[149,3.449]],["body/2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型",[0,0.275,5,1.408,6,0.426,38,0.577,39,0.626,60,0.876,93,5.068,94,2.105,132,5.513,133,4.305,134,5.068,135,0.644,136,0.627,137,0.715,138,0.932,139,0.932,140,0.697,141,1.821,142,1.955,143,5.068,145,1.116,147,5.068,150,2.979,151,5.731,152,5.731,153,5.731,154,5.731,155,5.731,156,3.827,157,5.731,158,4.631,159,5.731,160,5.731,161,5.731,162,5.731,163,5.731,164,5.731,165,5.731,166,5.731,167,5.731,168,5.731]],["title/2.类型/2.1.基本类型/2.1.3.数值运算符.html",[]],["body/2.类型/2.1.基本类型/2.1.3.数值运算符.html",[0,0.287,4,0.434,6,0.393,39,0.578,96,4.289,99,1.301,169,4.079,170,6.15,171,7.702,172,3.838,173,2.724,174,3.607,175,3.607]],["title/2.类型/2.1.基本类型/2.1.3.数值运算符.html#2-1-3-数值运算符",[176,3.449]],["body/2.类型/2.1.基本类型/2.1.3.数值运算符.html#2-1-3-数值运算符",[177,7.436]],["title/2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符",[178,3.449]],["body/2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符",[0,0.251,96,4.345,99,1.299,170,6.478,179,4.25,180,4.25,181,4.25,182,4.25,183,4.25,184,5.26,185,5.26,186,5.26,187,5.26,188,5.26,189,5.26,190,5.26,191,5.26]],["title/2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符",[192,3.449]],["body/2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符",[0,0.261,171,8.245,172,4.358,179,5.231,180,5.231,181,5.231,182,5.231,183,5.231,193,6.473,194,6.473,195,6.473,196,6.473,197,6.473,198,6.473]],["title/2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算",[199,3.449]],["body/2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算",[0,0.255,94,2.225,99,1.299,170,4.894,173,4.045,174,5.356,175,5.356,179,4.894,180,4.894,181,4.894,182,4.894,183,4.894,200,6.056,201,6.056,202,6.056,203,6.056,204,6.056,205,6.056,206,6.056,207,6.056,208,5.604,209,6.056,210,6.056,211,6.056,212,6.056,213,6.056,214,6.056]],["title/2.类型/2.1.基本类型/2.1.4.Bool类型.html",[]],["body/2.类型/2.1.基本类型/2.1.4.Bool类型.html",[0,0.288,4,0.606,6,0.424,172,3.821,215,5.69,216,4.085,217,3.454,218,5.032,219,5.032,220,5.904,221,3.113,222,4.772,223,3.387,224,6.346]],["title/2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型",[225,3.449]],["body/2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型",[0,0.274,4,0.604,6,0.424,129,1.982,150,2.947,156,3.787,172,3.815,216,4.079,217,3.442,218,5.014,219,5.014,220,5.895,221,3.11,222,4.764,223,3.382,224,6.332,226,5.67,227,5.67,228,5.67,229,5.67,230,5.67,231,5.67,232,5.67,233,5.67,234,5.67,235,5.67,236,5.67,237,5.67,238,5.67,239,5.67,240,5.67,241,5.67,242,5.67,243,5.67,244,5.67,245,5.67,246,5.67,247,5.014,248,5.014,249,5.67,250,5.67,251,5.67]],["title/2.类型/2.1.基本类型/2.1.基本类型.html",[]],["body/2.类型/2.1.基本类型/2.1.基本类型.html",[0,0.286,4,0.67,6,0.452,96,2.876,99,1.052,172,3.06,216,3.272,217,3.822,252,6.295,253,6.295,254,2.312,255,5.566,256,6.755,257,4.728,258,5.566,259,4.442,260,5.566]],["title/2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型",[261,3.449]],["body/2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型",[0,0.265,4,0.673,6,0.453,96,2.887,99,0.871,129,2.88,156,4.221,172,3.072,216,3.285,217,3.837,254,2.321,255,5.588,256,6.771,257,4.747,258,5.588,262,6.32,263,6.32,264,6.32,265,6.657,266,8.238,267,6.32,268,6.32,269,6.32,270,6.32,271,6.32,272,5.588,273,6.32]],["title/2.类型/2.3.类实例/2.3.2.继承.html",[]],["body/2.类型/2.3.类实例/2.3.2.继承.html",[0,0.286,4,0.597,6,0.332,38,0.565,39,0.487,60,0.682,62,1.554,99,0.773,135,0.63,136,0.614,137,0.887,139,0.912,140,0.682,142,1.914,274,5.61,275,3.796,276,0.754,277,0.871,278,7.261,279,3.685,280,4.741,281,4.961,282,5.342,283,4.214,284,5.61,285,4.961,286,2.351,287,4.961,288,4.961,289,4.961,290,5.61]],["title/2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承",[291,3.449]],["body/2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承",[0,0.265,4,0.589,6,0.327,38,0.557,39,0.481,60,0.673,62,1.533,94,2.032,99,0.762,135,0.622,136,0.605,137,0.879,139,0.899,140,0.673,142,1.887,275,3.772,276,0.744,277,0.859,278,7.224,279,3.673,280,4.71,281,4.892,282,5.295,283,4.156,285,4.892,286,2.318,287,4.892,289,4.892,292,5.533,293,5.533,294,5.533,295,5.533,296,4.892,297,5.533,298,5.533,299,5.533,300,5.533,301,5.533,302,5.533,303,5.533,304,5.533,305,5.533,306,5.533,307,5.533,308,5.533,309,5.533,310,5.533,311,5.533,312,5.533,313,4.892,314,5.533,315,5.533,316,5.533,317,5.533]],["title/2.类型/2.2.为空性/2.2.1.可选参数和为空性.html",[]],["body/2.类型/2.2.为空性/2.2.1.可选参数和为空性.html",[0,0.285,4,0.774,6,0.43,38,0.585,39,0.505,42,3.53,99,1.146,117,1.012,135,0.653,136,0.636,140,0.965,142,2.481,254,2.136,276,0.782,277,0.902,280,4.416,286,3.048,318,5.814,319,1.763,320,5.464,321,3.53,322,5.141,323,3.326,324,3.859]],["title/2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性",[325,3.449]],["body/2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性",[0,0.282,4,0.771,6,0.428,35,3.359,38,0.581,39,0.501,52,4.073,94,2.12,99,1.09,117,1.005,129,2.531,135,0.649,136,0.631,140,0.962,142,1.969,254,2.12,276,0.776,277,0.896,280,3.504,286,2.419,319,1.751,320,4.336,321,3.504,322,5.104,324,3.846,326,5.772,327,5.772,328,5.772,329,5.772,330,5.772,331,5.772,332,5.772,333,5.772,334,5.772,335,5.772,336,5.772,337,5.772,338,5.772,339,5.772]],["title/2.类型/2.3.类实例/2.3.1.类的构造函数.html",[]],["body/2.类型/2.3.类实例/2.3.1.类的构造函数.html",[0,0.286,6,0.488,60,0.771,62,2.126,142,2.164,259,4.478,279,3.458,286,2.659,340,6.345,341,4.766,342,6.787,343,5.765,344,6.345]],["title/2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数",[345,3.449]],["body/2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数",[0,0.26,6,0.489,60,0.774,62,2.131,129,2.689,142,2.173,279,3.464,286,2.669,342,6.804,343,5.779,346,6.37,347,6.37,348,6.37,349,6.37,350,6.37,351,6.37,352,6.37,353,6.37,354,6.37,355,6.37,356,6.37,357,6.37,358,6.37,359,6.37,360,6.37,361,6.37]],["title/2.类型/2.3.类实例/2.3.3.接口.html",[]],["body/2.类型/2.3.类实例/2.3.3.接口.html",[0,0.285,4,0.771,5,1.094,6,0.477,38,0.729,39,0.672,60,0.94,96,3.534,117,0.836,135,0.54,136,0.525,137,0.965,138,0.781,139,1.349,140,0.781,142,2.192,275,3.521,276,0.645,277,0.745,279,3.241,286,2.693,362,4.246,363,5.81,364,7.338,365,3.607,366,1.165,367,3.389,368,4.931,369,5.683,370,1.021,371,1.021,372,5.683,373,4.246,374,3.607,375,4.246]],["title/2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口",[376,3.449]],["body/2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口",[0,0.277,4,0.759,5,1.07,6,0.472,35,2.705,38,0.717,39,0.663,60,0.928,96,3.487,117,0.809,129,1.625,135,0.522,136,0.509,137,0.952,138,0.756,139,1.336,140,0.764,142,2.145,275,3.464,276,0.625,277,0.721,279,3.198,286,2.634,363,5.734,364,7.269,365,3.491,366,1.127,368,4.891,369,5.56,370,0.988,371,0.988,372,5.56,373,4.11,374,3.491,375,4.11,377,4.648,378,4.648,379,3.491,380,4.648,381,3.491,382,4.648,383,4.648,384,4.648,385,4.648,386,4.648,387,4.648,388,4.648,389,4.648,390,4.648,391,4.648,392,4.648,393,4.648,394,4.648,395,4.648,396,4.648,397,4.11,398,4.648,399,4.648,400,4.648,401,4.648,402,4.648,403,4.648,404,4.648]],["title/2.类型/2.4.枚举实例/2.4.2.使用枚举.html",[]],["body/2.类型/2.4.枚举实例/2.4.2.使用枚举.html",[0,0.285,5,1.072,6,0.276,38,0.469,39,0.405,60,0.766,99,0.983,117,0.811,135,0.524,136,0.51,137,0.581,138,1.024,139,0.758,140,0.766,141,2.428,221,1.67,254,1.712,276,0.627,277,0.723,370,0.991,371,0.991,405,4.662,406,3.29,407,1.082,408,1.131,409,1.291,410,1.414,411,1.553,412,1.629,413,2.13,414,2.266,415,2.266,416,2.607,417,2.83,418,3.113,419,3.502,420,3.502,421,3.502,422,1.712,423,5.368,424,5.073,425,4.856,426,5.104,427,3.113,428,3.113,429,6.31,430,4.765,431,3.44,432,5.571,433,2.607,434,3.502,435,1.414,436,3.113,437,4.732,438,4.662,439,3.767,440,4.122]],["title/2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举",[441,3.449]],["body/2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举",[0,0.281,5,1.059,6,0.271,38,0.461,39,0.398,60,0.757,99,0.974,117,0.798,129,1.601,135,0.515,136,0.501,137,0.571,138,1.012,139,0.745,140,0.757,141,2.411,221,1.641,254,1.683,276,0.616,277,0.711,370,0.974,371,0.974,407,1.063,408,1.111,409,1.269,410,1.39,411,1.526,412,1.601,413,2.093,414,2.227,415,2.227,416,2.562,417,2.781,418,3.06,419,3.441,420,3.441,421,3.441,422,1.683,423,5.352,424,5.042,425,4.822,426,5.068,427,3.06,428,3.06,429,6.254,430,4.723,431,3.42,432,5.506,433,2.562,434,3.441,435,1.39,436,3.06,437,4.677,442,4.582,443,4.582,444,4.582,445,4.582,446,4.582,447,4.582,448,4.582,449,4.582,450,4.582,451,3.702,452,4.582,453,4.582,454,4.582,455,4.582,456,4.582,457,4.582,458,4.582,459,4.582,460,4.582]],["title/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html",[]],["body/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html",[0,0.287,4,0.496,5,1.072,6,0.373,38,0.634,39,0.547,60,1,66,3.709,67,2.713,99,0.983,117,0.811,135,0.524,136,0.51,137,0.581,138,0.758,139,0.758,140,0.567,142,1.59,221,2.556,254,1.712,276,0.627,277,0.723,370,0.991,371,0.991,407,1.082,408,1.131,409,1.291,410,1.414,411,1.553,412,1.629,413,2.13,422,3.089,423,4.995,424,5.073,425,4.003,426,3.113,427,3.113,428,3.113,436,4.207,437,4.732,461,4.662,462,5.996,463,3.29,464,4.122,465,4.122,466,2.511,467,5.571,468,3.767]],["title/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数",[469,3.449]],["body/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数",[0,0.27,6,0.377,38,0.641,39,0.553,60,1.005,66,4.297,94,2.34,129,2.227,158,5.148,221,2.756,254,2.34,379,4.785,423,3.867,424,4.048,425,4.048,436,5.138,437,5.779,451,5.148,462,4.785,470,6.37,471,6.37,472,6.37,473,6.37,474,6.37,475,6.37]],["title/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue",[462,2.59]],["body/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue",[0,0.276,4,0.579,5,1.187,6,0.322,38,0.548,39,0.472,60,0.936,99,1.06,117,0.947,135,0.611,136,0.595,137,0.678,138,0.884,139,0.884,140,0.661,142,1.855,150,2.827,221,1.948,276,0.731,277,0.844,370,1.156,371,1.156,407,1.262,408,1.319,409,1.507,410,1.65,411,1.811,412,1.901,413,2.485,422,2.827,423,4.928,424,5.158,425,3.456,426,3.632,427,3.632,428,3.632,462,5.238,463,3.838,464,4.809,465,4.809,466,2.929,467,6.166,476,5.438,477,5.438,478,5.438,479,5.438,480,5.438,481,5.438,482,6.166,483,5.438,484,5.438,485,5.438,486,5.438]],["title/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum",[422,1.267]],["body/2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum",[35,4.081,75,5.667,129,2.451,422,2.992,423,4.257,468,5.667,487,7.013,488,7.013,489,7.013,490,7.013,491,7.013,492,7.013,493,7.013]],["title/2.类型/2.3.类实例/2.3.类实例.html",[]],["body/2.类型/2.3.类实例/2.3.类实例.html",[0,0.287,4,0.856,6,0.313,38,0.533,39,0.46,60,0.833,62,1.898,99,1.047,117,0.922,135,0.77,136,0.579,137,1.002,139,1.114,140,0.833,142,2.84,259,3.736,276,0.712,277,0.822,279,3.184,283,3.977,286,3.488,365,5.148,370,1.126,371,1.126,407,1.229,435,1.606,463,4.836,494,4.278]],["title/2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例",[495,3.449]],["body/2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例",[0,0.28,4,0.85,6,0.308,38,0.524,39,0.452,60,0.824,62,1.878,99,1.039,117,0.907,129,1.82,135,0.585,136,0.57,137,0.94,139,1.102,140,0.824,142,2.825,150,2.707,156,3.478,276,0.7,277,0.808,279,3.159,283,3.912,286,3.47,365,5.093,370,1.107,371,1.107,381,3.912,407,1.209,435,1.58,463,3.675,496,5.208,497,5.208,498,5.208,499,4.606,500,5.208,501,5.208,502,5.208,503,5.208,504,5.208,505,5.208,506,5.208,507,5.208,508,5.208,509,5.208,510,5.208,511,5.208,512,5.208,513,5.208,514,5.208,515,5.208,516,5.208,517,5.208,518,5.208,519,5.208,520,5.208]],["title/2.类型/2.4.枚举实例/2.4.枚举实例.html",[]],["body/2.类型/2.4.枚举实例/2.4.枚举实例.html",[0,0.285,4,0.78,6,0.348,38,0.592,39,0.511,99,1.15,135,0.661,136,0.643,221,2.624,276,0.79,341,4.416,422,3.218,423,4.446,424,4.654,425,4.654,426,4.891,427,3.926,428,4.891,434,4.416,436,4.891,521,5.878]],["title/2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例",[522,3.449]],["body/2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例",[0,0.261,4,0.789,6,0.354,38,0.603,39,0.52,99,1.158,129,2.59,135,0.673,136,0.655,221,2.654,276,0.805,381,4.498,422,2.955,423,4.498,424,4.708,425,4.708,426,4.948,427,3.999,428,4.948,434,4.498,436,4.948,451,5.987,523,5.988,524,5.988,525,5.988,526,5.988,527,5.988,528,5.988,529,5.988,530,5.988,531,5.988,532,5.988,533,5.988,534,5.988]],["title/2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum",[422,1.267]],["body/2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum",[150,3.794,422,2.682,535,7.301,536,7.301,537,7.301]],["title/2.类型/2.2.为空性/2.2.为空性.html",[]],["body/2.类型/2.2.为空性/2.2.为空性.html",[0,0.289,4,0.711,6,0.395,38,0.672,39,0.58,43,2.612,60,0.962,66,2.136,96,1.878,99,1.12,117,0.716,135,0.751,136,0.45,141,1.835,172,1.998,217,2.495,221,2.393,223,3.951,254,2.661,257,3.088,276,0.776,277,0.638,320,4.339,538,2.901,539,4.11,540,4.11,541,4.339,542,3.635,543,3.635,544,3.635,545,3.635,546,1.998,547,5.906]],["title/2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性",[548,3.449]],["body/2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性",[0,0.282,4,0.434,6,0.393,29,5.423,38,0.67,39,0.578,55,3.296,60,0.96,66,2.12,94,2.11,96,1.863,99,1.117,117,0.71,129,2.008,135,0.747,136,0.446,141,1.825,156,2.724,172,1.983,217,2.476,221,2.383,223,3.948,254,2.652,257,3.064,272,5.881,276,0.772,277,0.633,320,4.316,541,4.316,542,3.607,543,3.607,544,3.607,545,3.607,546,1.983,547,5.881,549,4.079,550,4.079,551,4.079,552,4.079,553,4.079,554,4.079,555,4.079,556,4.079,557,4.079,558,4.079,559,4.079,560,4.079,561,4.079,562,4.079,563,4.079,564,4.079,565,4.079,566,4.079,567,4.079,568,4.079,569,4.079,570,4.079,571,5.08,572,4.079,573,4.079,574,4.079,575,4.079,576,4.079,577,5.745,578,5.745,579,4.079,580,4.079,581,4.079,582,4.079,583,4.079,584,4.079,585,4.079,586,4.079,587,4.079,588,4.079,589,4.079,590,4.079,591,3.607,592,4.079,593,4.079,594,4.079,595,4.079,596,3.607,597,4.079]],["title/2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html",[]],["body/2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html",[0,0.282,4,0.869,6,0.483,9,3.214,60,0.855,136,0.847,142,2.4,144,2.947,145,1.073,222,3.347,279,2.947,286,2.947,366,1.706,494,4.455,598,5.513,599,6.22,600,6.22,601,3.347,602,2.296,603,3.208,604,2.376,605,5.284,606,4.141,607,2.288,608,3.347,609,2.68,610,3.347,611,3.682,612,4.876,613,3.208,614,2.519,615,2.68,616,2.97,617,4.876,618,3.682,619,3.682,620,3.347]],["title/2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式",[621,3.449]],["body/2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式",[0,0.277,4,0.823,6,0.482,9,3.206,60,0.853,94,2.018,129,1.921,136,0.768,142,2.394,144,2.941,145,1.07,222,3.336,279,2.941,286,2.941,366,1.702,599,6.206,600,6.206,601,3.336,602,2.293,603,3.197,604,2.368,605,5.272,606,4.127,607,2.283,608,3.336,609,2.671,610,3.336,611,3.67,612,4.859,613,3.197,614,2.51,615,2.671,616,2.96,617,4.859,618,3.67,619,3.67,620,3.336,622,5.495,623,5.495,624,5.495,625,5.495,626,4.859,627,5.495,628,5.495,629,5.495,630,5.495]],["title/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html",[]],["body/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html",[0,0.284,4,0.789,6,0.392,38,0.667,39,0.576,40,3.777,41,2.941,60,0.958,99,1.158,135,0.833,137,0.627,142,2.687,144,3.301,145,1.594,279,3.301,286,3.301,602,1.491,603,2.926,604,3.395,607,2.155,613,2.926,616,2.708,631,4.446,632,4.063,633,2.926,634,2.526,635,2.926,636,1.894,637,2.776,638,2.107,639,3.548,640,6.366,641,1.996,642,3.548,643,2.368,644,4.063]],["title/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法",[631,1.982,645,2.242]],["body/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法",[0,0.279,4,0.702,6,0.39,38,0.664,39,0.573,41,2.932,49,4.038,60,0.955,99,1.156,129,1.747,135,0.742,137,0.623,142,2.681,144,3.293,145,1.591,208,3.753,279,3.293,286,3.293,499,4.419,602,1.481,603,2.908,604,3.386,607,2.146,613,2.908,616,2.691,632,4.038,633,2.908,634,2.51,635,2.908,636,1.882,637,2.765,638,2.094,639,3.526,640,6.35,641,1.983,642,3.526,643,2.353,644,4.038,646,4.997,647,4.997,648,4.419,649,4.997,650,4.997,651,4.997,652,4.997,653,4.038,654,4.997,655,4.419,656,4.419,657,4.419]],["title/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types",[145,0.257,603,0.767,604,0.568,632,1.066]],["body/2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types",[0,0.276,4,0.766,6,0.338,38,0.575,39,0.496,41,2.855,60,0.874,99,1.085,135,0.642,137,0.712,142,2.454,144,3.463,145,1.609,279,3.014,286,3.014,602,1.693,604,3.393,607,2.339,613,3.323,616,3.076,633,3.323,634,2.868,635,3.323,636,2.151,637,3.014,638,2.393,639,4.03,640,6.678,641,2.266,642,4.03,643,2.69,644,4.614,655,5.05,656,5.05,657,5.05]],["title/2.类型/2.5.匿名结构/2.5.3.可选字段.html",[]],["body/2.类型/2.5.匿名结构/2.5.3.可选字段.html",[0,0.285,4,0.537,6,0.439,38,0.747,39,0.645,41,2.946,60,1.023,99,1.022,135,0.834,136,0.812,137,0.828,144,3.11,145,0.982,366,2.041,602,1.495,603,4.319,604,2.174,620,3.062,658,4.46,659,5.784,660,3.062,661,3.369,662,3.369,663,4.46,664,2.897,665,3.369,666,4.46,667,4.957,668,4.957,669,5.575,670,3.369,671,4.46]],["title/2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields",[144,0.696,658,1.468,659,1.172]],["body/2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields",[0,0.285,4,0.532,6,0.437,38,0.744,39,0.642,41,2.932,60,1.02,99,1.018,135,0.83,136,0.808,137,0.623,144,2.765,145,0.973,366,2.036,602,1.481,603,4.299,604,2.153,620,3.033,659,5.546,660,3.033,661,3.337,662,3.337,663,4.419,664,2.886,665,3.337,666,4.419,667,4.934,668,4.934,669,5.55,670,3.337,671,4.419,672,4.997,673,4.997,674,4.997,675,4.997,676,4.997,677,4.997,678,4.997,679,4.997]],["title/2.类型/2.5.匿名结构/2.5.5.扩展.html",[]],["body/2.类型/2.5.匿名结构/2.5.5.扩展.html",[0,0.285,4,0.504,5,1.224,6,0.442,38,0.752,39,0.625,41,2.964,60,0.957,99,1.163,117,1.108,135,0.715,136,0.748,137,0.794,138,0.928,139,0.928,140,0.874,142,1.615,144,2.392,145,1.239,173,4.566,223,2.04,275,2.301,276,0.856,277,0.988,279,1.311,280,2.874,286,1.983,370,1.353,371,1.353,407,1.477,408,1.385,409,0.867,410,0.949,411,1.042,412,1.094,431,1.348,602,1.403,603,1.821,604,2.46,614,1.43,636,1.179,639,2.208,641,1.242,642,2.208,680,3.129,681,3.466,682,1.75,683,1.75,684,3.555,685,5.048,686,4.669,687,3.813,688,3.193,689,4.366,690,3.555,691,2.641,692,2.946,693,2.767,694,2.767,695,1.9,696,3.555,697,1.348,698,2.09,699,2.301,700,1.626,701,2.874,702,2.767,703,2.09,704,1.348,705,2.09,706,2.767,707,2.767,708,1.626,709,5.628,710,5.048,711,3.193,712,2.767,713,2.767,714,2.35,715,1.9,716,2.767,717,4.186,718,4.186]],["title/2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展",[719,3.449]],["body/2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展",[0,0.285,4,0.487,5,1.203,6,0.435,38,0.741,39,0.614,41,2.919,60,0.945,94,1.1,99,1.153,117,1.083,135,0.699,136,0.733,137,0.776,138,0.903,139,0.903,140,0.859,142,1.562,144,2.328,145,1.211,173,4.478,223,1.973,275,2.225,276,0.836,277,0.966,279,1.255,280,2.779,286,1.918,370,1.323,371,1.323,407,1.444,408,1.348,409,0.829,410,0.908,411,0.997,412,1.047,431,1.29,602,1.357,603,1.742,604,2.395,614,1.368,636,1.128,639,2.113,641,1.188,642,2.113,653,2.42,681,3.374,682,1.675,683,1.675,684,3.438,685,4.914,686,4.605,687,3.711,688,3.108,689,4.292,690,3.438,691,2.597,692,2.889,693,2.648,694,2.648,695,1.818,696,3.438,697,1.29,698,2,699,2.225,700,1.556,701,2.779,702,2.648,703,2,704,1.29,705,2,706,2.648,707,2.648,708,1.556,709,5.502,710,4.914,711,3.108,712,2.648,713,2.648,714,2.249,715,1.818,716,2.648,717,4.048,718,4.048,720,2.994,721,2.994,722,2.994,723,2.994,724,4.578,725,2.994,726,2.994,727,2.994,728,2.994,729,2.648,730,2.994,731,2.994,732,2.994,733,2.994,734,2.994,735,2.994,736,2.994,737,2.994]],["title/2.类型/2.5.匿名结构/2.5.4.性能影响.html",[]],["body/2.类型/2.5.匿名结构/2.5.4.性能影响.html",[0,0.27,367,5.082,538,5.837,738,5.82]],["title/2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响",[739,3.449]],["body/2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响",[740,7.235,741,7.235,742,7.235,743,7.235,744,7.235,745,7.235,746,7.235]],["title/2.类型/2.5.匿名结构/2.5.匿名结构.html",[]],["body/2.类型/2.5.匿名结构/2.5.匿名结构.html",[0,0.289,4,0.373,5,1.04,6,0.47,38,0.755,39,0.652,40,2.634,41,1.392,60,0.987,67,2.04,96,2.791,99,1.096,117,0.61,135,0.871,136,0.821,137,0.84,138,0.838,139,0.838,140,0.626,142,2.854,254,2.635,276,0.821,277,0.948,279,3.332,280,3.128,286,3.401,319,1.563,408,1.482,664,2.473,667,2.342,668,3.441,747,2.475,748,3.101,749,3.871,750,3.101,751,3.101,752,3.101,753,4.557,754,3.101,755,1.822,756,3.101,757,2.882,758,3.871,759,3.128,760,3.441]],["title/2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构",[761,3.449]],["body/2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构",[0,0.287,4,0.355,5,1.01,6,0.464,38,0.742,39,0.64,41,1.325,49,2.698,60,0.974,75,2.698,96,2.711,99,1.08,117,0.581,129,2.074,135,0.858,136,0.769,137,0.82,138,0.808,139,0.808,140,0.604,142,2.823,150,1.735,254,2.582,276,0.798,277,0.921,279,3.285,280,3.016,286,3.357,319,1.507,397,2.952,408,1.439,626,2.952,664,2.415,667,2.229,668,3.318,748,2.952,749,3.732,750,2.952,751,2.952,752,2.952,753,4.394,754,2.952,755,1.735,756,2.952,757,2.779,758,3.732,759,3.016,760,3.318,762,3.338,763,3.338,764,2.356,765,3.338,766,3.338,767,3.338,768,3.338,769,3.338,770,3.338,771,3.338,772,3.338,773,3.338,774,3.338,775,3.338,776,3.338,777,3.338,778,3.338,779,3.338,780,3.338,781,3.338,782,3.338,783,3.338,784,3.338,785,3.338,786,3.338,787,3.338,788,3.338,789,3.338,790,3.338,791,3.338,792,3.338,793,3.338,794,3.338,795,3.338,796,3.338]],["title/2.类型/2.6.函数类型/2.6.2.默认值.html",[]],["body/2.类型/2.6.函数类型/2.6.2.默认值.html",[0,0.287,4,0.663,5,1.059,6,0.484,38,0.627,39,0.541,99,0.631,117,0.798,135,0.7,136,0.681,137,0.571,138,1.15,139,0.745,140,0.86,141,2.411,223,3.27,276,0.616,277,0.711,319,2.301,321,4.969,366,1.51,370,0.974,371,0.974,407,1.063,408,2.031,409,1.269,435,1.888,755,4.254,797,4.582,798,3.875,799,3.06,800,4.051,801,3.441]],["title/2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值",[802,3.449]],["body/2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值",[0,0.286,4,0.484,5,1.053,6,0.483,38,0.623,39,0.538,99,0.626,117,0.791,129,2.164,135,0.696,136,0.677,137,0.567,138,1.145,139,0.738,140,0.856,141,2.402,223,3.258,276,0.611,277,0.705,319,2.293,321,4.956,366,1.501,370,0.966,371,0.966,407,1.054,408,2.026,409,1.258,435,1.877,755,4.243,764,3.206,798,3.871,799,3.034,803,4.542,804,4.542,805,4.542,806,4.542,807,4.542,808,4.542,809,4.542,810,4.542,811,3.671,812,4.542,813,4.542,814,4.542]],["title/2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html",[]],["body/2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html",[0,0.285,6,0.364,38,0.619,39,0.534,42,3.733,60,0.748,135,0.691,136,0.673,254,2.259,276,0.827,277,0.954,366,1.974,466,3.312,546,3.661,749,4.619,815,6.15,816,6.15,817,5.438,818,5.438,819,5.438,820,5.438,821,5.438,822,4.619,823,5.438]],["title/2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数",[824,3.449]],["body/2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数",[0,0.279,6,0.365,38,0.622,39,0.536,52,4.357,60,0.75,135,0.694,136,0.675,150,3.923,254,2.268,276,0.83,277,0.958,366,1.978,482,5.459,546,3.67,749,4.637,817,5.459,818,5.459,819,5.459,820,5.459,821,5.459,822,4.637,823,5.459,825,6.173,826,6.173,827,6.173,828,6.173,829,6.173,830,6.173,831,6.173,832,6.173]],["title/2.类型/2.6.函数类型/2.6.1.可选参数.html",[]],["body/2.类型/2.6.函数类型/2.6.1.可选参数.html",[0,0.287,4,0.516,5,1.1,6,0.502,38,0.488,39,0.421,99,1.002,117,0.843,135,0.545,136,0.53,137,0.604,138,1.051,139,0.788,140,0.786,141,2.466,223,3.66,276,0.651,277,0.752,319,2.523,366,1.883,370,1.03,371,1.03,407,1.125,408,1.175,409,1.342,435,1.47,538,4.563,755,4.415,798,3.765,799,3.236,800,4.285,833,4.845]],["title/2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数",[834,3.449]],["body/2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数",[0,0.281,5,1.094,6,0.501,38,0.483,39,0.417,99,0.885,117,0.836,129,2.246,135,0.54,136,0.525,137,0.599,138,1.045,139,0.781,140,0.781,141,2.457,223,3.652,276,0.645,277,0.745,319,2.517,366,1.876,370,1.021,371,1.021,407,1.115,408,1.165,409,1.33,435,1.456,648,4.246,653,5.193,755,4.404,764,5.112,798,3.758,799,3.207,835,4.802,836,4.802,837,3.88,838,4.802,839,4.802,840,4.802,841,4.802,842,4.802,843,4.802,844,4.802,845,4.246,846,4.802,847,4.802,848,4.802,849,4.802,850,4.802,851,4.802,852,4.802,853,4.802,854,4.802]],["title/2.类型/2.6.函数类型/2.6.函数类型.html",[]],["body/2.类型/2.6.函数类型/2.6.函数类型.html",[0,0.287,4,0.788,5,1.125,6,0.438,38,0.505,39,0.435,69,3.537,99,1.198,117,0.873,132,4.777,135,0.563,136,0.548,137,0.625,138,1.075,139,0.815,140,0.804,145,1.441,172,3.976,216,2.605,276,0.674,277,0.778,319,2.006,366,1.908,370,1.066,371,1.066,435,1.52,755,4.089,798,2.849,799,4.416,855,3.043,856,4.432]],["title/2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型",[857,3.449]],["body/2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型",[0,0.278,4,0.697,5,1.114,6,0.434,38,0.497,39,0.429,94,1.813,99,1.194,117,0.859,132,4.747,135,0.555,136,0.54,137,0.615,138,1.064,139,0.802,140,0.796,145,1.43,172,3.956,216,2.565,276,0.663,277,0.766,319,1.985,366,1.897,370,1.049,371,1.049,435,1.497,755,4.064,764,4.619,798,2.82,799,4.371,837,3.988,856,4.364,858,4.935,859,4.364,860,4.935,861,4.935,862,4.935,863,4.935,864,4.935,865,4.935,866,4.935,867,4.935,868,4.935,869,4.935,870,4.935,871,4.935,872,4.935,873,4.935,874,4.935,875,4.935,876,4.935,877,4.935,878,6.545,879,4.935,880,4.935,881,4.935,882,3.988,883,4.935,884,4.935,885,4.935,886,4.935]],["title/2.类型/2.7.动态类型/2.7.2.实现Dynamic.html",[]],["body/2.类型/2.7.动态类型/2.7.2.实现Dynamic.html",[0,0.284,5,1.281,6,0.445,38,0.618,39,0.608,60,0.915,62,2.085,66,3.192,99,0.964,117,1.069,135,0.69,136,0.672,137,0.939,138,0.998,139,1.323,140,0.958,141,1.951,144,2.574,276,0.826,277,0.953,319,1.362,362,3.972,366,1.911,368,3.574,370,1.306,371,1.306,407,1.426,408,1.49,409,1.702,410,1.863,411,2.046,412,2.147,435,1.362,546,3.955,887,4.491,888,5.432,889,6.19,890,6.19,891,3.972,892,3.972,893,5.434,894,3,895,3,896,3.972]],["title/2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic",[897,3.449]],["body/2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic",[0,0.284,5,1.26,6,0.438,38,0.602,39,0.596,60,0.9,62,2.051,66,3.109,99,0.824,117,1.041,135,0.672,136,0.654,137,0.923,138,0.972,139,1.307,140,0.945,141,1.9,144,2.506,276,0.804,277,0.928,319,1.311,366,1.885,368,3.481,370,1.272,371,1.272,407,1.388,408,1.451,409,1.657,410,1.814,411,1.992,412,2.091,435,1.311,546,3.909,888,5.289,889,5.289,890,6.066,891,3.821,892,3.821,893,5.37,895,2.886,896,3.821,898,4.322,899,4.322,900,4.322,901,4.322,902,4.322,903,4.322,904,4.322,905,4.322,906,4.322,907,4.322,908,4.322,909,4.322,910,4.322,911,4.322,912,4.322]],["title/2.类型/2.7.动态类型/2.7.动态类型.html",[]],["body/2.类型/2.7.动态类型/2.7.动态类型.html",[0,0.288,4,0.91,5,1.024,6,0.461,38,0.832,39,0.599,43,2.769,60,0.903,99,0.6,117,0.758,135,0.49,136,0.477,137,0.543,138,0.708,140,0.53,141,1.384,216,2.264,254,2.209,276,0.586,277,0.676,319,1.824,370,0.926,371,0.926,407,1.011,408,1.057,463,3.075,494,3.521,541,3.273,546,4.385,607,1.417,615,2.118,689,2.645,691,2.209,747,3.075,855,2.645,913,3.521,914,4.357,915,3.853,916,3.853,917,3.853,918,6.57,919,3.853,920,3.853,921,3.273,922,5.319,923,3.853,924,3.853,925,3.853]],["title/2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型",[926,3.449]],["body/2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型",[0,0.276,4,0.876,5,1.012,6,0.458,35,3.461,38,0.78,39,0.593,55,3.464,60,0.897,99,0.591,117,0.746,135,0.482,136,0.469,137,0.535,138,0.697,140,0.521,141,1.362,150,2.228,156,2.863,216,2.228,248,3.791,254,2.185,276,0.576,277,0.665,319,1.804,370,0.911,371,0.911,379,3.22,407,0.995,408,1.04,541,3.22,546,4.271,607,1.394,615,2.084,689,2.602,691,2.185,859,3.791,882,3.464,915,3.791,916,3.791,917,3.791,918,6.524,919,3.791,920,3.791,921,3.22,922,5.26,923,3.791,924,3.791,925,3.791,927,3.791,928,4.287,929,4.287,930,4.287,931,4.287,932,4.287,933,4.287,934,4.287,935,4.287,936,4.287,937,4.287,938,4.287,939,4.287,940,4.287,941,4.287,942,4.287,943,4.287,944,4.287,945,4.287,946,4.287,947,4.287,948,4.287,949,4.287,950,4.287,951,4.287,952,4.287,953,4.287,954,4.287,955,4.287,956,4.287,957,4.287,958,4.287,959,4.287,960,4.287,961,5.948,962,4.287,963,4.287,964,4.287,965,4.287,966,4.287,967,4.287,968,4.287,969,4.287,970,4.287,971,4.287,972,4.287,973,4.287,974,4.287,975,4.287,976,4.287,977,4.287]],["title/2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html",[]],["body/2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html",[0,0.285,5,1.151,6,0.389,7,0.757,9,1.226,38,0.767,39,0.572,60,0.969,62,2.084,66,3.91,99,1.172,117,0.903,135,0.624,136,0.672,137,0.766,138,1.036,139,1.251,140,1.023,141,0.853,144,1.125,145,1.401,221,3.038,254,1.905,276,0.884,277,0.805,323,0.652,366,0.651,370,1.181,371,1.181,407,1.204,408,1.546,409,1.165,410,1.276,411,1.401,412,1.47,413,1.921,414,2.044,415,2.044,416,2.352,417,2.553,418,2.809,419,2.016,420,1.17,421,1.17,433,1.501,435,1.933,466,1.446,602,1.537,607,1.909,610,2.553,633,3.018,634,0.782,636,1.333,637,1.762,638,1.762,641,2.058,643,0.733,670,1.04,691,1.299,697,0.671,699,0.757,703,1.04,704,1.812,757,0.871,798,1.157,801,1.17,822,1.17,978,1.258,979,3.381,980,4.442,981,2.653,982,1.557,983,3.719,984,2.373,985,3.719,986,1.258,987,2.373,988,2.373,989,2.373,990,2.373,991,2.373,992,2.373,993,2.373,994,1.17,995,3.563,996,4.959,997,1.04,998,1.838,999,1.978,1000,0.809,1001,2.362,1002,0.871,1003,1.17,1004,1.17,1005,1.305,1006,0.871,1007,1.501,1008,1.377,1009,0.871,1010,1.377,1011,0.945,1012,0.945,1013,1.446,1014,1.792,1015,1.377,1016,1.17,1017,1.04,1018,0.809,1019,2.373,1020,1.377,1021,1.038,1022,1.17,1023,1.377,1024,0.871,1025,1.17,1026,1.377,1027,1.501,1028,1.04,1029,1.377,1030,0.945,1031,1.377,1032,2.373,1033,2.016,1034,0.757,1035,1.792,1036,2.809,1037,2.373,1038,2.373,1039,2.373,1040,2.016,1041,0.871,1042,1.377,1043,1.17,1044,2.016,1045,1.377,1046,1.17,1047,1.377,1048,1.377,1049,1.377]],["title/2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换",[1050,3.449]],["body/2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换",[0,0.284,5,1.127,6,0.368,7,0.716,9,1.168,38,0.746,39,0.541,60,0.957,62,2.052,66,3.851,94,0.939,99,1.162,117,0.875,129,0.515,135,0.565,136,0.625,137,0.747,138,1.012,139,1.234,140,1.014,141,0.812,144,1.071,145,1.377,208,1.106,221,3,254,1.846,276,0.768,277,0.78,323,0.617,366,0.62,370,1.148,371,1.148,407,1.167,408,1.51,409,1.121,410,1.228,411,1.348,412,1.415,413,1.85,414,1.968,415,1.968,416,2.264,417,2.458,418,2.704,419,1.921,420,1.106,421,1.106,433,1.43,435,1.889,466,1.377,602,1.49,607,1.859,610,2.458,633,2.924,634,0.74,636,1.277,637,1.696,638,1.696,641,1.995,643,0.694,670,0.983,691,1.245,697,0.635,699,0.716,703,0.983,704,1.745,729,2.261,757,0.823,764,1.039,798,1.102,811,1.19,822,1.106,845,1.302,979,3.337,980,4.369,981,2.563,983,3.58,984,2.261,985,3.58,987,2.261,988,2.261,989,2.261,990,2.261,991,2.261,992,2.261,993,2.261,994,1.106,995,3.443,996,4.88,997,0.983,998,1.762,999,1.896,1000,0.765,1001,2.264,1002,0.823,1003,1.106,1004,1.106,1005,1.243,1006,0.823,1007,1.43,1008,1.302,1009,0.823,1010,1.302,1011,0.894,1012,0.894,1013,1.377,1014,1.708,1015,1.302,1016,1.106,1017,0.983,1018,0.765,1019,2.261,1020,1.302,1021,0.989,1022,1.106,1023,1.302,1024,0.823,1025,1.106,1026,1.302,1027,1.43,1028,0.983,1029,1.302,1030,0.894,1031,1.302,1032,2.261,1033,1.921,1034,0.716,1035,1.708,1036,2.704,1037,2.261,1038,2.261,1039,2.261,1040,1.921,1041,0.823,1042,1.302,1043,1.106,1044,1.921,1045,1.302,1046,1.106,1047,1.302,1048,1.302,1049,1.302,1051,1.472,1052,1.472,1053,1.472,1054,1.472,1055,1.472,1056,1.472,1057,1.472,1058,1.472,1059,1.472,1060,1.472,1061,1.472,1062,1.472,1063,4.583,1064,2.997,1065,2.557,1066,1.472,1067,1.472,1068,1.472,1069,1.472,1070,1.472,1071,1.302,1072,1.472,1073,1.472,1074,1.472,1075,1.472,1076,1.302,1077,1.472,1078,1.472,1079,1.472,1080,1.472,1081,1.472,1082,1.472,1083,1.472,1084,1.472,1085,1.472,1086,1.472,1087,1.472,1088,1.472,1089,2.557,1090,1.472,1091,1.472,1092,2.557,1093,1.472,1094,1.472,1095,1.472,1096,1.472,1097,1.472,1098,1.472,1099,1.472,1100,1.472,1101,1.472,1102,1.472]],["title/2.类型/2.8.抽象类型/2.8.2.运算符重载.html",[]],["body/2.类型/2.8.抽象类型/2.8.2.运算符重载.html",[0,0.287,5,1.25,6,0.387,9,1.512,38,0.705,39,0.513,60,0.796,62,2.035,99,1.152,117,1.028,135,0.664,136,0.646,137,0.737,138,1.138,139,1.237,140,0.972,141,2.08,172,1.609,221,1.769,254,1.814,276,0.794,277,0.916,319,1.498,366,1.588,368,1.926,370,1.256,371,1.256,407,1.371,408,1.432,409,1.636,410,1.791,411,1.967,412,2.064,413,2.698,414,2.4,415,1.609,416,1.851,435,1.791,695,2.01,798,3.018,978,2.675,979,2.545,980,5.078,981,2.761,1013,1.783,1103,2.927,1104,4.367,1105,5.222,1106,5.222,1107,4.367,1108,4.367,1109,2.927,1110,2.927,1111,2.927,1112,2.927,1113,2.927,1114,2.927,1115,2.927,1116,4.367,1117,4.367,1118,2.927,1119,2.927,1120,5.222,1121,2.675,1122,2.927,1123,2.927,1124,2.927,1125,2.487,1126,2.487,1127,2.927]],["title/2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载",[1128,3.449]],["body/2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载",[0,0.286,5,1.226,6,0.378,9,1.438,38,0.69,39,0.498,60,0.776,62,1.997,99,1.107,117,0.997,129,1.662,135,0.644,136,0.627,137,0.715,138,1.114,139,1.216,140,0.959,141,2.028,172,1.53,221,1.703,254,1.746,276,0.77,277,0.889,319,1.442,366,1.548,370,1.218,371,1.218,407,1.33,408,1.39,409,1.587,410,1.738,411,1.908,412,2.003,413,2.172,414,2.311,415,1.53,416,1.76,435,1.738,695,1.911,798,2.954,979,2.469,980,5.023,981,2.659,1104,4.204,1105,5.066,1106,5.066,1107,4.204,1108,4.204,1109,2.783,1110,2.783,1111,2.783,1112,2.783,1113,2.783,1114,2.783,1115,2.783,1116,4.204,1117,4.204,1118,2.783,1119,2.783,1120,4.204,1122,2.783,1123,2.783,1124,2.783,1125,2.364,1126,2.364,1127,2.783,1129,3.148,1130,3.148,1131,3.148,1132,3.148,1133,3.148,1134,3.148,1135,3.148,1136,3.148,1137,3.148,1138,3.148,1139,3.148,1140,3.148,1141,3.148,1142,3.148,1143,3.148,1144,3.148,1145,3.148,1146,3.148,1147,3.148,1148,3.148,1149,3.148,1150,3.148,1151,3.148,1152,3.148,1153,3.148,1154,3.148,1155,3.148,1156,3.148,1157,3.148,1158,3.148,1159,3.148,1160,3.148,1161,3.148,1162,3.148,1163,3.148]],["title/2.类型/2.8.抽象类型/2.8.3.数组访问.html",[]],["body/2.类型/2.8.抽象类型/2.8.3.数组访问.html",[0,0.286,4,0.701,5,1.219,6,0.477,38,0.663,39,0.622,42,3.999,60,0.69,62,1.825,99,0.552,117,0.988,135,0.74,136,0.721,137,0.708,138,0.922,139,1.164,140,0.981,141,1.803,254,1.472,276,0.885,277,1.022,319,2.293,366,0.972,370,1.206,371,1.401,407,0.93,408,0.972,409,1.11,410,1.215,411,1.335,412,1.401,435,2.173,606,4.262,798,2.445,978,3.238,979,1.727,981,3.173,1164,3.544,1165,5.897,1166,7.137,1167,6.334,1168,5.017,1169,5.679,1170,4.262,1171,3.544,1172,3.544,1173,3.544,1174,4.007,1175,5.017,1176,3.544,1177,3.544,1178,3.544,1179,3.544,1180,4.262,1181,3.544,1182,3.544]],["title/2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问",[1183,3.449]],["body/2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问",[0,0.284,4,0.586,5,1.196,6,0.472,38,0.648,39,0.611,42,3.908,60,0.67,62,1.783,94,2.023,99,0.529,117,0.959,129,1.344,135,0.723,136,0.704,137,0.687,138,0.895,139,1.143,140,0.969,141,1.75,254,1.412,276,0.865,277,0.999,319,2.257,366,0.932,370,1.171,371,1.171,407,0.892,408,0.932,409,1.065,410,1.166,411,1.28,412,1.344,435,2.132,571,3.399,591,4.87,606,4.137,798,2.373,979,1.656,981,3.08,1165,5.816,1166,7.051,1167,6.216,1168,4.87,1169,5.589,1170,4.137,1171,3.399,1172,3.399,1173,3.399,1175,4.87,1176,3.399,1177,3.399,1178,3.399,1179,3.399,1180,4.137,1181,3.399,1182,3.399,1184,3.844,1185,3.844,1186,3.844,1187,3.844,1188,3.844,1189,3.844,1190,3.844,1191,3.844,1192,3.844,1193,3.844,1194,3.844,1195,3.844,1196,3.844,1197,3.844,1198,3.844,1199,3.844,1200,3.844,1201,3.844,1202,3.844,1203,3.844,1204,3.844,1205,3.844,1206,3.844,1207,3.844]],["title/2.类型/2.8.抽象类型/2.8.4.选择函数.html",[]],["body/2.类型/2.8.抽象类型/2.8.4.选择函数.html",[0,0.285,5,1.128,6,0.392,38,0.506,39,0.437,60,0.805,62,2.053,99,0.693,117,0.875,135,0.565,136,0.55,137,0.627,138,1.077,139,1.205,140,0.958,221,2.655,276,0.676,277,0.78,319,1.525,366,1.607,370,1.069,371,1.069,407,1.167,408,1.22,409,1.393,410,2.01,411,1.675,412,1.757,413,2.297,414,2.444,415,2.444,435,2.01,692,3.623,979,2.167,980,5.281,986,4.063,1165,3.777,1169,4.977,1208,3.548,1209,4.446,1210,5.859,1211,4.446,1212,4.446,1213,4.446]],["title/2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数",[1214,3.449]],["body/2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数",[0,0.282,5,1.111,6,0.386,35,2.863,38,0.495,39,0.427,60,0.794,62,2.031,94,2.399,99,0.678,117,0.856,135,0.553,136,0.538,137,0.614,138,1.062,139,1.192,140,0.949,158,3.976,221,2.627,276,0.661,277,0.763,319,1.492,366,1.584,370,1.046,371,1.046,407,1.142,408,1.193,409,1.363,410,1.492,411,1.639,412,1.72,413,2.248,414,2.392,415,2.392,435,1.981,692,3.601,979,2.12,980,5.256,1165,3.696,1169,4.906,1209,4.351,1210,5.776,1211,4.351,1212,4.351,1213,4.351,1215,4.92,1216,4.92,1217,4.92,1218,4.351,1219,4.92,1220,4.92,1221,4.92,1222,4.92,1223,4.92,1224,4.92,1225,4.92,1226,4.92,1227,4.92]],["title/2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html",[]],["body/2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html",[0,0.286,4,0.782,5,1.25,6,0.387,9,2.255,38,0.659,39,0.569,60,0.796,62,1.813,117,0.859,135,0.736,136,0.716,137,0.615,138,0.802,139,1.064,140,0.893,144,2.068,276,0.663,277,0.766,370,1.049,371,1.049,374,3.707,407,1.146,408,1.781,409,1.367,410,1.497,411,1.644,412,1.725,422,1.813,689,3.973,691,2.404,711,2.76,798,2.127,979,2.127,981,2.76,1228,4.935,1229,6.915,1230,4.364,1231,4.916,1232,6.282,1233,5.787,1234,5.787,1235,4.364,1236,4.364,1237,3.296,1238,4.935]],["title/2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段",[1239,3.449]],["body/2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段",[0,0.282,4,0.686,5,1.234,6,0.381,9,2.2,35,2.802,38,0.648,39,0.559,60,0.783,62,1.784,117,0.838,129,2.251,135,0.724,136,0.704,137,0.601,138,0.783,139,1.047,140,0.882,144,2.018,276,0.647,277,0.747,370,1.024,371,1.024,407,1.118,408,1.759,409,1.334,410,1.461,411,1.604,412,1.683,422,1.769,689,3.909,691,1.769,711,2.693,798,2.075,979,2.075,981,2.693,1229,6.848,1230,4.259,1231,4.837,1232,6.239,1233,5.694,1234,5.694,1235,4.259,1236,4.259,1237,3.216,1240,4.259,1241,4.816,1242,4.816,1243,4.816,1244,4.816,1245,4.816,1246,4.816,1247,4.816,1248,4.816,1249,4.816,1250,4.816,1251,4.816,1252,4.816,1253,4.816,1254,4.816,1255,4.816,1256,4.816,1257,4.816,1258,4.816,1259,4.816,1260,4.816]],["title/2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html",[]],["body/2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html",[0,0.285,4,0.658,5,1.051,6,0.365,9,2.069,38,0.622,39,0.537,60,0.992,99,0.624,117,1.075,135,0.694,136,0.676,137,0.565,138,1.004,139,0.736,140,0.918,276,0.83,277,0.959,370,1.314,371,1.314,374,3.402,407,1.434,408,1.498,409,1.255,410,1.374,411,1.509,412,1.583,413,2.069,414,2.202,415,2.202,416,2.533,417,2.75,422,2.269,430,4.126,431,3.255,435,2.133,440,4.005,607,2.009,801,3.402,979,1.952,1021,2.388,1237,3.025,1261,4.53,1262,6.217,1263,5.463,1264,6.217,1265,5.463,1266,5.463,1267,7.213,1268,4.005,1269,5.463,1270,4.005,1271,4.005,1272,4.641,1273,4.005,1274,4.005,1275,4.53]],["title/2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型",[1276,3.449]],["body/2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型",[0,0.284,4,0.644,5,1.029,6,0.358,9,2.007,38,0.609,39,0.526,60,0.982,94,1.613,99,0.605,117,1.053,135,0.68,136,0.662,137,0.548,138,0.983,139,0.714,140,0.906,276,0.813,277,0.939,370,1.286,371,1.286,407,1.404,408,1.467,409,1.217,410,1.332,411,1.463,412,1.535,413,2.007,414,2.135,415,2.135,416,2.457,417,2.667,422,2.222,430,4.04,431,3.213,435,2.099,607,1.968,811,3.55,979,1.893,1021,2.339,1071,3.884,1237,2.934,1240,3.884,1262,6.119,1263,5.349,1264,6.119,1265,5.349,1266,5.349,1267,7.146,1268,3.884,1269,5.349,1270,3.884,1271,3.884,1272,4.544,1273,3.884,1274,3.884,1277,4.393,1278,4.393,1279,4.393,1280,4.393,1281,4.393,1282,4.393,1283,4.393,1284,4.393,1285,4.393,1286,4.393,1287,4.393,1288,4.393]],["title/2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html",[]],["body/2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html",[0,0.285,4,0.948,1103,5.916,1164,5.916,1289,6.69,1290,5.916,1291,5.916]],["title/2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象",[1292,3.449]],["body/2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象",[4,0.949,1290,5.941,1291,5.941,1293,6.718,1294,6.718,1295,6.718,1296,6.718,1297,6.718,1298,6.718,1299,6.718,1300,6.718,1301,6.718,1302,6.718,1303,6.718,1304,6.718,1305,6.718,1306,6.718,1307,6.718,1308,6.718,1309,6.718]],["title/2.类型/2.9.单形/2.9.单形.html",[]],["body/2.类型/2.9.单形/2.9.单形.html",[43,4.342,67,3.976,145,1.711,619,4.563,855,4.148,1018,3.551,1028,4.563,1310,4.87,1311,6.026,1312,6.042,1313,5.132,1314,3.821,1315,6.042,1316,3.322,1317,6.042]],["title/2.类型/2.9.单形/2.9.单形.html#2-9-单形",[1318,3.449]],["body/2.类型/2.9.单形/2.9.单形.html#2-9-单形",[145,1.713,619,4.583,1018,3.566,1028,4.583,1310,4.166,1311,5.154,1312,6.068,1313,5.154,1314,3.837,1315,6.068,1316,3.336,1317,6.068,1319,6.862,1320,6.862,1321,6.862,1322,6.862]],["title/2.类型/2.8.抽象类型/2.8.抽象类型.html",[]],["body/2.类型/2.8.抽象类型/2.8.抽象类型.html",[0,0.283,4,0.603,5,1.119,6,0.389,7,2.416,9,2.586,38,0.57,39,0.571,60,0.688,62,1.821,96,2.586,99,1.08,135,0.636,136,0.619,137,0.961,138,0.808,139,0.92,140,0.87,141,1.269,144,2.372,145,1.673,222,1.526,260,2.223,276,0.537,288,2.223,323,1.674,368,2.324,408,1.595,422,0.923,433,2.779,602,1.473,604,1.083,611,1.679,613,1.463,614,1.825,616,1.354,633,2.324,636,0.947,637,1.674,641,1.585,643,1.184,664,0.923,683,1.406,684,1.889,688,1.406,696,1.889,697,1.721,698,1.679,700,1.307,704,1.083,705,1.679,759,1.526,801,1.889,894,1.679,979,3.755,980,2.425,981,3.855,986,2.032,1000,1.307,1002,1.406,1003,4.639,1007,1.406,1012,1.526,1016,1.889,1017,1.679,1018,1.307,1021,1.544,1027,1.406,1034,1.942,1313,1.889,1316,1.222,1323,5.814,1324,2.514,1325,3.532,1326,3.532,1327,3.532,1328,2.668,1329,1.889,1330,3.017,1331,2.142,1332,3.532,1333,2.032,1334,3.532,1335,3.532,1336,2.223,1337,1.679,1338,2.223,1339,1.889,1340,1.889,1341,2.223,1342,3,1343,2.223,1344,3.532,1345,3.532,1346,null,1347,3.733,1348,1.889,1349,1.889,1350,1.679,1351,1.889,1352,3,1353,2.223,1354,1.889,1355,1.889,1356,1.526,1357,3.532,1358,2.514,1359,2.223,1360,1.889,1361,2.223,1362,1.889,1363,2.223,1364,1.526,1365,3,1366,1.889,1367,1.406,1368,2.234,1369,1.628,1370,2.223,1371,2.223,1372,2.223,1373,2.223,1374,2.223,1375,2.223,1376,2.223,1377,2.223,1378,2.223,1379,1.889,1380,2.223,1381,1.889,1382,1.889,1383,2.223,1384,1.679,1385,3.319,1386,1.679,1387,2.514,1388,1.889,1389,2.223,1390,2.223,1391,1.679,1392,2.223,1393,1.889,1394,1.679,1395,1.526,1396,1.406,1397,1.889,1398,3.532,1399,2.223,1400,3.532,1401,2.223,1402,2.223,1403,1.889,1404,1.889,1405,1.774,1406,1.406,1407,2.223,1408,2.223,1409,1.526,1410,1.526,1411,1.406,1412,2.223,1413,1.679,1414,2.223]],["title/2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型",[1415,3.449]],["body/2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型",[0,0.278,4,0.521,5,1.107,6,0.385,7,2.379,9,2.236,29,1.845,35,1.429,38,0.563,39,0.565,60,0.679,62,1.803,94,0.902,96,2.552,99,1.055,135,0.628,136,0.611,137,0.935,138,0.795,139,0.908,140,0.862,141,1.246,144,2.341,145,1.667,208,1.845,222,1.491,265,1.985,276,0.527,313,2.172,323,1.643,368,2.282,381,1.845,408,1.579,422,0.902,433,2.193,602,1.451,604,1.058,611,1.64,613,1.429,614,1.791,616,1.323,633,2.282,636,0.925,637,1.643,641,1.556,643,1.157,664,0.902,683,1.374,684,1.845,688,1.374,696,1.845,697,1.69,698,1.64,700,1.277,704,1.058,705,1.64,759,1.491,979,3.743,980,2.38,981,3.82,1000,1.277,1002,1.374,1003,4.586,1007,1.374,1012,1.491,1016,1.845,1017,1.64,1018,1.277,1021,1.516,1027,1.374,1034,1.906,1076,2.172,1218,2.172,1313,1.845,1316,1.194,1323,5.755,1325,3.467,1326,3.467,1327,3.467,1328,2.619,1329,1.845,1330,2.971,1331,2.109,1332,3.467,1334,3.467,1335,3.467,1336,2.172,1337,1.64,1338,2.172,1339,1.845,1340,1.845,1341,2.172,1342,2.945,1343,2.172,1344,3.467,1345,3.467,1346,null,1347,3.676,1348,1.845,1349,1.845,1350,1.64,1351,1.845,1352,2.945,1353,2.172,1354,1.845,1355,1.845,1356,1.491,1357,3.467,1359,2.172,1360,1.845,1361,2.172,1362,1.845,1363,2.172,1364,1.491,1365,2.945,1366,1.845,1367,1.374,1368,2.193,1369,1.599,1370,2.172,1371,2.172,1372,2.172,1373,2.172,1374,2.172,1375,2.172,1376,2.172,1377,2.172,1378,2.172,1379,1.845,1380,2.172,1381,1.845,1382,1.845,1383,2.172,1384,1.64,1385,3.268,1386,1.64,1388,1.845,1389,2.172,1390,2.172,1391,1.64,1392,2.172,1393,1.845,1394,1.64,1395,1.491,1396,1.374,1397,1.845,1398,3.467,1399,2.172,1400,3.467,1401,2.172,1402,2.172,1403,1.845,1404,1.845,1406,1.374,1407,2.172,1408,2.172,1409,1.491,1410,1.491,1411,1.374,1412,2.172,1413,1.64,1414,2.172,1416,2.456,1417,2.456,1418,2.456,1419,2.456,1420,2.456,1421,2.456,1422,2.456,1423,2.456,1424,2.456,1425,2.456,1426,2.456,1427,2.456,1428,2.456,1429,2.456,1430,2.456,1431,2.456,1432,2.456,1433,2.456,1434,2.456,1435,2.456,1436,2.456,1437,2.456,1438,2.456,1439,2.456,1440,2.456,1441,2.456,1442,2.456,1443,2.456,1444,2.172,1445,2.456,1446,2.456,1447,2.456,1448,2.456,1449,2.456,1450,2.456,1451,2.456,1452,2.456,1453,2.456,1454,2.456,1455,2.456,1456,2.456,1457,2.456,1458,2.456,1459,2.456]],["title/3.类型系统/3.1.Typedef/3.1.Typedef.html",[]],["body/3.类型系统/3.1.Typedef/3.1.Typedef.html",[0,0.287,4,0.717,6,0.471,38,0.756,39,0.652,41,3.542,42,3.131,60,1.003,99,1.034,135,0.757,136,0.564,140,0.627,366,1.82,659,4.755,664,2.475,667,4.5,668,4.5,669,3.874,686,3.131,691,1.895,692,2.223,747,4.755,1022,3.874,1460,4.561,1461,5.958,1462,4.556]],["title/3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef",[1460,3.05]],["body/3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef",[0,0.282,4,0.71,6,0.468,38,0.75,39,0.647,41,3.532,52,3.582,60,0.998,99,1.026,135,0.749,136,0.555,140,0.617,366,1.806,659,4.705,664,2.449,667,4.453,668,4.453,669,3.813,686,3.082,691,1.864,692,2.187,1022,3.813,1444,4.489,1461,5.896,1462,4.52,1463,5.076,1464,6.667,1465,5.076,1466,5.076,1467,5.076,1468,5.076,1469,5.076,1470,5.076,1471,5.076,1472,5.076,1473,5.076,1474,5.076,1475,5.076,1476,4.489,1477,5.076,1478,5.076,1479,5.076,1480,5.076,1481,5.076,1482,5.076,1483,5.076]],["title/3.类型系统/3.2.类型参数/3.2.1.约束.html",[]],["body/3.类型系统/3.2.类型参数/3.2.1.约束.html",[0,0.282,5,0.955,6,0.234,38,0.398,39,0.343,40,2.966,41,2.228,60,0.48,99,1.036,117,1.137,135,0.631,136,0.432,137,0.492,138,1.062,139,0.913,140,0.794,141,1.784,145,1.599,173,2.637,223,1.701,254,1.45,276,0.531,277,1.014,319,1.197,321,2.397,323,1.654,324,2.729,366,1.585,370,1.389,371,0.839,407,0.916,408,0.958,409,1.094,410,1.197,411,1.315,412,1.38,413,1.804,414,1.919,415,1.919,416,2.208,417,2.397,418,2.637,435,1.703,602,1.17,633,2.297,664,1.45,686,3.408,687,2.637,688,3.653,689,4.879,690,2.966,691,2.062,692,2.419,699,1.919,701,4.32,704,1.701,708,2.052,755,4.06,894,3.749,1011,3.966,1013,2.127,1021,2.17,1030,2.397,1041,2.208,1126,2.966,1367,2.208,1368,2.208,1396,2.208,1410,3.408,1413,3.749,1462,3.408,1484,3.19,1485,5.777,1486,6.648,1487,3.948,1488,3.491,1489,3.491,1490,3.491,1491,3.491,1492,3.491,1493,3.491,1494,3.491,1495,3.491,1496,2.966,1497,3.491,1498,2.966,1499,4.217,1500,3.491,1501,3.749,1502,2.637,1503,3.491,1504,2.208]],["title/3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束",[1505,3.449]],["body/3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束",[0,0.279,5,0.942,6,0.229,38,0.39,39,0.336,41,2.197,60,0.471,94,1.422,99,1.028,117,0.964,129,1.353,135,0.622,136,0.424,137,0.483,138,1.051,139,0.9,140,0.786,141,1.759,145,1.591,150,2.012,173,2.586,223,1.668,254,1.422,276,0.52,277,0.859,319,1.174,321,2.35,323,1.622,324,2.691,366,1.567,370,1.177,371,0.823,407,0.899,408,0.939,409,1.072,410,1.174,411,1.289,412,1.353,413,1.769,414,1.882,415,1.882,416,2.165,417,2.35,418,2.586,435,1.679,602,1.148,633,2.253,664,1.422,686,3.361,687,2.586,688,3.614,689,4.851,690,2.908,691,2.034,692,2.386,699,1.882,701,4.282,704,1.668,708,2.012,755,4.034,894,2.586,1011,3.923,1013,2.085,1021,2.14,1030,2.35,1041,2.165,1126,2.908,1367,2.165,1368,2.165,1396,2.165,1410,3.361,1413,3.697,1462,3.361,1485,5.715,1486,6.598,1488,3.424,1489,3.424,1490,3.424,1491,3.424,1492,3.424,1493,3.424,1494,3.424,1495,3.424,1496,2.908,1497,3.424,1498,2.908,1499,4.159,1500,3.424,1501,3.697,1502,2.586,1503,3.424,1504,2.165,1506,3.872,1507,3.872,1508,3.872,1509,3.872,1510,3.872,1511,3.872,1512,3.872,1513,3.872,1514,3.872,1515,3.872,1516,3.872,1517,3.872,1518,3.872,1519,3.872,1520,3.872,1521,3.872,1522,3.872,1523,3.872,1524,3.872]],["title/3.类型系统/3.2.类型参数/3.2.类型参数.html",[]],["body/3.类型系统/3.2.类型参数/3.2.类型参数.html",[0,0.281,4,0.476,5,0.762,6,0.391,7,1.413,38,0.451,39,0.389,42,1.765,62,1.511,67,2.604,99,0.844,117,0.506,135,0.503,136,0.318,137,0.825,138,0.727,139,0.473,140,0.849,141,0.924,142,1.861,145,1.745,276,0.391,277,0.451,319,1.655,321,2.717,323,2.772,324,4.045,366,1.486,370,0.618,371,0.618,406,2.052,407,0.675,408,0.705,409,0.805,410,0.882,411,0.968,422,2.004,466,2.939,601,2.717,602,0.862,604,1.253,607,1.455,613,1.692,614,1.328,615,1.413,616,1.566,634,1.46,636,1.095,661,1.942,664,1.068,665,1.942,683,1.626,691,2.566,692,3.011,695,1.765,697,2.351,698,2.989,704,1.253,705,1.942,708,1.511,711,1.626,714,2.184,715,1.765,855,2.717,996,1.942,997,1.942,1001,1.942,1005,2.652,1007,1.626,1012,1.765,1014,1.942,1021,2.109,1024,1.626,1030,3.72,1034,2.175,1035,2.989,1310,1.765,1328,4.092,1330,1.765,1331,2.851,1342,2.184,1346,null,1347,3.361,1349,2.184,1360,2.184,1368,1.626,1369,1.185,1397,2.184,1406,1.626,1409,2.717,1413,1.942,1484,3.616,1499,2.184,1501,1.942,1502,2.989,1525,2.907,1526,2.571,1527,2.571,1528,3.158,1529,1.847,1530,2.571,1531,2.571,1532,2.571,1533,2.184,1534,2.571,1535,1.942,1536,3.957,1537,2.184,1538,1.765,1539,1.626,1540,2.571,1541,1.413,1542,1.626,1543,2.907,1544,2.907,1545,2.571,1546,1.765,1547,2.571,1548,2.907,1549,3.361,1550,1.942,1551,2.184,1552,2.184,1553,2.349,1554,2.184,1555,2.571,1556,2.571,1557,2.184,1558,4.824,1559,2.571,1560,2.184,1561,2.184,1562,5.467,1563,3.957,1564,2.571,1565,2.571,1566,3.72,1567,2.907,1568,2.184,1569,2.571,1570,2.184,1571,2.571,1572,2.184,1573,2.571,1574,3.957,1575,2.571,1576,2.184,1577,1.765,1578,1.765,1579,2.184,1580,2.571,1581,2.184]],["title/3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数",[1582,3.449]],["body/3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数",[0,0.273,4,0.47,5,0.752,6,0.388,7,1.391,35,1.665,38,0.445,39,0.384,62,1.496,67,1.665,94,1.623,99,0.837,117,0.498,129,1,135,0.497,136,0.313,137,0.819,138,0.718,139,0.465,140,0.844,141,0.909,142,1.842,145,1.742,276,0.385,277,0.444,319,1.638,321,2.683,323,2.751,324,4.032,366,1.473,370,0.608,371,0.608,406,2.019,407,0.664,408,0.694,409,0.792,410,0.868,411,0.953,422,1.623,466,2.909,601,2.683,602,0.848,604,1.233,607,1.437,613,1.665,614,1.307,615,1.391,616,1.541,634,1.437,636,1.078,661,1.91,664,1.051,665,1.91,683,1.6,691,2.231,692,2.991,695,1.737,697,2.327,698,2.952,704,1.233,705,1.91,708,1.487,711,1.6,714,2.149,715,1.737,837,2.311,855,1.737,996,1.91,997,1.91,1001,1.91,1005,2.625,1007,1.6,1012,1.737,1014,1.91,1021,2.088,1024,1.6,1030,3.688,1034,2.148,1035,2.952,1310,1.737,1328,3.607,1330,1.737,1331,2.83,1342,2.149,1346,null,1347,3.32,1349,2.149,1360,2.149,1368,1.6,1369,1.166,1397,2.149,1406,1.6,1409,2.683,1413,1.91,1484,2.311,1499,2.149,1501,1.91,1502,2.952,1526,2.53,1527,2.53,1530,2.53,1531,2.53,1532,2.53,1533,2.149,1534,2.53,1535,1.91,1536,3.908,1537,2.149,1538,1.737,1539,1.6,1540,2.53,1541,1.391,1542,1.6,1545,2.53,1547,2.53,1549,3.32,1550,1.91,1551,2.149,1552,2.149,1553,2.311,1554,2.149,1555,2.53,1556,2.53,1557,2.149,1558,4.776,1559,2.53,1560,2.149,1561,2.149,1562,5.436,1563,3.908,1564,2.53,1565,2.53,1566,3.279,1568,2.149,1569,2.53,1570,2.149,1571,2.53,1572,2.149,1573,2.53,1574,3.908,1575,2.53,1576,2.149,1577,1.737,1578,1.737,1579,2.149,1580,2.53,1581,2.149,1583,2.86,1584,2.86,1585,3.119,1586,1.818,1587,2.86,1588,2.86,1589,2.86,1590,2.86,1591,2.86,1592,2.86,1593,2.86,1594,1.737,1595,2.86,1596,2.86,1597,2.86,1598,2.86,1599,2.86,1600,6.075,1601,2.86,1602,2.86,1603,2.86,1604,2.86,1605,2.86,1606,2.86,1607,2.86,1608,2.86,1609,2.86,1610,2.86,1611,2.86,1612,2.86,1613,2.86,1614,2.86,1615,2.86,1616,2.86,1617,2.86,1618,2.86,1619,2.86]],["title/3.类型系统/3.3.泛型/3.3.泛型.html",[]],["body/3.类型系统/3.3.泛型/3.3.泛型.html",[0,0.282,4,0.493,5,1.149,6,0.421,7,2.727,8,1.58,9,2.562,38,0.631,39,0.545,60,0.949,62,1.87,67,1.769,99,0.419,117,1.092,133,3.478,135,0.705,136,0.738,137,0.887,138,1.019,139,1.019,140,1.046,145,1.484,221,1.659,276,0.843,277,0.973,319,1.404,324,2.727,366,0.737,370,1.193,371,1.193,407,1.302,408,1.36,409,1.283,410,1.404,431,1.31,433,4.454,538,3.268,602,1.373,611,2.03,660,1.846,664,1.117,670,2.03,692,2.909,699,1.478,755,1.58,759,2.811,979,1.31,1007,1.7,1021,1.79,1024,1.7,1025,2.283,1027,3.137,1125,2.283,1237,3.093,1331,2.417,1350,3.093,1354,2.283,1355,2.283,1367,1.7,1369,3.247,1406,1.7,1411,1.7,1504,1.7,1539,1.7,1541,1.478,1550,2.03,1553,2.457,1557,2.283,1560,2.283,1581,2.283,1620,1.846,1621,1.846,1622,4.095,1623,2.283,1624,2.688,1625,4.188,1626,2.283,1627,4.095,1628,4.095,1629,2.688,1630,2.283,1631,2.283,1632,2.688,1633,2.688,1634,2.688,1635,2.457,1636,2.688,1637,2.688,1638,2.688,1639,2.688,1640,2.688,1641,6.288,1642,3.04,1643,2.688,1644,2.688,1645,2.688,1646,2.688,1647,1.58,1648,2.688,1649,2.03,1650,4.095,1651,4.095,1652,5.546,1653,5.546,1654,3.04,1655,2.283,1656,2.688,1657,2.688,1658,4.095,1659,4.095]],["title/3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型",[1660,3.449]],["body/3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型",[0,0.285,4,0.308,5,1.123,6,0.412,7,2.643,8,1.503,9,2.036,38,0.615,39,0.531,60,0.936,62,1.828,67,1.683,99,0.398,117,1.063,133,3.347,135,0.687,136,0.722,137,0.869,138,0.993,139,0.993,140,1.037,145,1.46,221,1.596,276,0.821,277,0.948,319,1.352,324,2.643,366,0.701,370,1.156,371,1.156,407,1.262,408,1.319,409,1.234,410,1.352,431,1.246,433,4.395,538,2.041,602,1.321,611,1.931,660,1.755,664,1.062,670,1.931,692,2.844,699,1.406,755,1.503,759,2.705,979,1.246,1007,1.617,1021,1.723,1024,1.617,1025,2.172,1027,3.041,1125,2.172,1237,2.976,1331,2.343,1350,2.976,1354,2.172,1355,2.172,1367,1.617,1369,3.204,1406,1.617,1411,1.617,1504,1.617,1539,1.617,1541,1.406,1550,1.931,1557,2.172,1560,2.172,1581,2.172,1620,1.755,1621,1.755,1622,3.941,1623,2.172,1624,2.557,1625,3.631,1626,2.172,1627,2.557,1628,3.941,1629,2.557,1630,2.172,1631,2.172,1632,2.557,1633,2.557,1634,2.557,1636,2.557,1637,2.557,1638,2.557,1639,2.557,1640,2.557,1641,6.165,1643,2.557,1644,2.557,1645,2.557,1646,2.557,1647,1.503,1648,2.557,1649,1.931,1650,3.941,1651,3.941,1652,5.403,1653,4.808,1655,2.172,1656,2.557,1657,2.557,1658,3.941,1659,3.941,1661,2.892,1662,2.892,1663,2.892,1664,2.892,1665,2.892,1666,2.892,1667,2.337,1668,2.892,1669,2.892,1670,2.892,1671,2.892,1672,2.892,1673,2.892,1674,2.892,1675,2.892]],["title/3.类型系统/3.4.变异/3.4.变异.html",[]],["body/3.类型系统/3.4.变异/3.4.变异.html",[0,0.279,4,0.291,5,1.159,6,0.31,8,1.421,38,0.528,39,0.456,41,1.085,60,0.828,62,1.971,117,0.913,135,0.59,136,0.574,137,0.965,138,0.853,139,1.157,140,0.865,141,0.868,145,1.616,221,1.88,275,2.882,276,0.705,277,0.814,324,2.074,367,1.929,370,1.116,371,1.116,407,1.218,408,1.273,409,1.453,410,1.591,411,1.747,412,1.491,413,1.249,414,1.329,415,1.329,466,2.298,602,1.555,604,1.178,607,1.707,608,2.59,641,2.825,662,1.825,687,2.849,691,3.049,692,1.178,697,1.178,701,1.659,711,3.595,996,2.849,1000,1.421,1001,1.825,1004,2.053,1009,1.529,1011,1.659,1021,2.292,1034,1.329,1036,1.825,1231,3.941,1232,4.829,1351,3.205,1369,1.739,1379,2.053,1384,1.825,1386,2.849,1388,2.053,1391,1.825,1405,5.46,1409,1.659,1462,1.659,1529,1.737,1542,1.529,1546,2.59,1552,2.053,1554,2.053,1577,1.659,1579,2.053,1621,1.659,1635,2.209,1676,2.733,1677,4.64,1678,2.417,1679,1.825,1680,2.053,1681,2.053,1682,2.417,1683,3.205,1684,2.053,1685,4.722,1686,6.293,1687,2.417,1688,2.053,1689,2.417,1690,2.733,1691,2.417,1692,2.417,1693,2.417,1694,2.417,1695,4.64,1696,2.417,1697,5.685,1698,3.773,1699,3.773,1700,2.417,1701,2.733,1702,2.733,1703,2.417,1704,2.417,1705,3.205,1706,3.773,1707,2.053,1708,2.417,1709,2.053,1710,2.417,1711,2.417,1712,2.417,1713,1.659,1714,2.733,1715,2.733,1716,3.205,1717,3.773,1718,2.417,1719,2.053,1720,2.417,1721,2.733,1722,2.053,1723,2.417,1724,4.64,1725,2.217,1726,3.205,1727,5.242,1728,3.773,1729,3.773,1730,3.773]],["title/3.类型系统/3.4.变异/3.4.变异.html#3-4-变异",[1731,3.449]],["body/3.类型系统/3.4.变异/3.4.变异.html#3-4-变异",[0,0.282,4,0.275,5,1.131,6,0.299,8,1.34,38,0.509,39,0.439,41,1.024,60,0.808,62,1.929,117,0.88,135,0.568,136,0.553,137,0.949,138,0.821,139,1.132,140,0.846,141,0.819,145,1.596,221,1.81,247,2.281,275,2.791,276,0.679,277,0.784,324,1.981,367,1.82,370,1.075,371,1.075,407,1.173,408,1.226,409,1.4,410,1.533,411,1.683,412,1.425,413,1.178,414,1.254,415,1.254,466,2.195,602,1.498,604,1.111,607,1.644,608,2.474,641,2.763,662,1.722,687,2.722,691,2.942,692,1.111,697,1.111,701,1.566,711,3.497,996,2.722,1000,1.34,1001,1.722,1004,1.937,1009,1.442,1011,1.566,1021,2.22,1034,1.254,1036,1.722,1231,3.796,1232,4.313,1351,3.062,1369,1.662,1379,1.937,1384,1.722,1386,2.722,1388,1.937,1391,1.722,1405,5.369,1409,1.566,1462,1.566,1542,1.442,1552,1.937,1554,1.937,1577,1.566,1579,1.937,1586,1.639,1594,2.474,1621,1.566,1667,2.084,1677,4.469,1678,2.281,1679,1.722,1680,1.937,1681,1.937,1682,2.281,1683,3.062,1684,1.937,1685,4.672,1686,6.156,1687,2.281,1688,1.937,1689,2.281,1691,2.281,1692,2.281,1693,2.281,1694,2.281,1695,4.469,1696,2.281,1697,5.078,1698,3.604,1699,3.604,1700,2.281,1703,2.281,1704,2.281,1705,3.062,1706,3.604,1707,1.937,1708,2.281,1709,1.937,1710,2.281,1711,2.281,1712,2.281,1713,1.566,1716,3.062,1717,3.604,1718,2.281,1719,1.937,1720,2.281,1722,1.937,1723,2.281,1724,4.469,1725,2.118,1726,3.062,1727,5.078,1728,3.604,1729,3.604,1730,3.604,1732,2.579,1733,2.579,1734,2.579,1735,2.579,1736,2.579,1737,2.579,1738,2.579,1739,2.579,1740,2.579,1741,2.579,1742,2.579,1743,2.579,1744,2.579,1745,2.579,1746,2.579,1747,2.579,1748,2.579,1749,2.579,1750,2.579,1751,2.579,1752,2.579,1753,2.579,1754,2.579,1755,2.579,1756,2.579,1757,2.579,1758,2.579,1759,2.579]],["title/3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html",[0,0.276,4,0.887,6,0.288,38,0.491,39,0.423,137,0.81,138,1.055,139,0.792,140,0.593,145,1.622,259,4.581,323,2.043,367,3.44,435,1.479,602,1.445,604,3.666,607,2.111,608,2.959,609,2.37,634,2.449,636,1.837,643,2.296,661,4.335,681,2.959,686,2.959,704,2.101,738,5.246,747,4.581,759,2.959,995,3.662,998,2.534,1000,2.534,1005,2.37,1021,2.51,1314,2.726,1316,2.37,1340,3.662,1356,2.959,1410,4.724,1462,4.92,1498,3.662,1504,2.726,1529,3.098,1533,4.876,1546,2.959,1577,2.959,1625,4.335,1626,3.662,1647,2.534,1713,2.959,1719,4.876,1725,2.534,1760,4.311,1761,2.959,1762,2.959,1763,5.74,1764,4.311,1765,4.311,1766,4.311,1767,4.311,1768,3.662,1769,3.44,1770,3.662,1771,3.256,1772,4.311]],["title/3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型",[1773,3.449]],["body/3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型",[0,0.235,4,0.827,6,0.287,38,0.489,39,0.422,137,0.808,138,1.053,139,0.79,140,0.591,145,1.621,259,3.43,323,2.036,435,1.474,602,1.441,604,3.663,607,2.107,608,2.95,609,2.363,634,2.441,636,1.831,643,2.289,661,4.327,681,2.95,686,2.95,704,2.094,738,3.927,747,3.43,759,2.95,995,3.651,998,2.526,1000,2.526,1005,2.363,1021,2.505,1314,2.718,1316,2.363,1340,3.651,1356,2.95,1410,4.719,1462,4.915,1498,3.651,1504,2.718,1533,4.866,1577,2.95,1586,3.088,1594,2.95,1625,4.327,1626,3.651,1647,2.526,1713,2.95,1719,4.866,1725,2.526,1760,4.298,1761,2.95,1762,2.95,1763,5.729,1764,4.298,1765,4.298,1766,4.298,1767,4.298,1768,3.651,1770,3.651,1771,3.246,1772,4.298,1774,4.86,1775,4.86,1776,4.86,1777,4.86,1778,4.86,1779,4.86,1780,4.298,1781,4.86,1782,4.86,1783,4.86,1784,4.86,1785,4.86,1786,4.86,1787,4.86,1788,4.86,1789,4.86,1790,4.86,1791,3.43,1792,4.86]],["title/3.类型系统/3.5.一致性检查/3.5.1.类与接口.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.1.类与接口.html",[0,0.264,137,1.135,363,6.562,368,4.233,607,1.891,610,3.53,636,2.19,641,3.151,999,3.251,1002,3.251,1006,3.251,1009,3.251,1044,4.367,1337,3.883,1369,2.37,1405,5.602,1529,3.695,1542,4.068,1685,4.789,1761,3.53,1793,5.814,1794,4.622,1795,5.141,1796,3.251,1797,5.141,1798,3.883,1799,5.464,1800,5.141,1801,5.141,1802,5.141]],["title/3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口",[1803,3.449]],["body/3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口",[137,1.136,363,6.568,368,4.242,607,1.898,610,3.543,636,2.198,641,3.156,999,3.263,1002,3.263,1006,3.263,1009,3.263,1044,4.383,1337,3.897,1369,2.379,1405,5.611,1542,4.077,1586,3.708,1685,4.794,1761,3.543,1795,5.16,1796,3.263,1797,5.16,1798,3.897,1799,5.476,1800,5.16,1801,5.16,1802,5.16,1804,5.835,1805,4.633,1806,5.835,1807,5.835,1808,5.835,1809,5.835,1810,5.835]],["title/3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html",[0,0.277,4,0.846,5,1.144,6,0.304,38,0.518,39,0.447,60,0.625,62,2.075,117,0.895,135,0.578,136,0.562,137,0.991,138,0.836,139,1.093,140,0.817,145,1.547,275,3.268,276,0.691,277,0.798,370,1.093,371,1.093,407,1.193,408,1.247,409,1.424,430,4.49,431,2.897,618,3.434,636,1.937,637,2.154,643,2.422,682,2.875,691,1.888,708,2.672,998,2.672,1170,5.05,1331,2.897,1364,3.121,1541,2.499,1685,4.731,1688,3.862,1794,3.267,1811,3.628,1812,4.546,1813,4.49,1814,3.434,1815,6.625,1816,7.027,1817,4.546,1818,4.546,1819,4.546,1820,4.546,1821,4.546,1822,4.546]],["title/3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型",[1823,3.449]],["body/3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型",[0,0.28,4,0.7,5,1.118,6,0.294,38,0.5,39,0.431,60,0.604,62,2.04,117,0.864,129,1.736,135,0.558,136,0.543,137,0.978,138,0.807,139,1.068,140,0.799,145,1.526,275,3.195,276,0.667,277,0.771,370,1.056,371,1.056,407,1.153,408,1.204,409,1.376,430,4.389,431,2.832,618,3.316,636,1.871,637,2.081,643,2.339,682,2.777,691,1.824,708,2.581,927,4.391,998,2.581,1170,4.936,1331,2.832,1364,3.015,1541,2.414,1685,4.685,1688,3.73,1805,3.155,1812,4.391,1813,4.389,1814,3.316,1815,6.513,1816,6.932,1817,4.391,1818,4.391,1819,4.391,1820,4.391,1821,4.391,1822,4.391,1824,4.966,1825,4.966,1826,4.966,1827,4.966,1828,4.391,1829,4.966,1830,4.966]],["title/3.类型系统/3.5.一致性检查/3.5.3.单形.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.3.单形.html",[0,0.248,145,1.594,697,3.049,1314,3.956,1722,5.314,1794,4.496,1831,7.075,1832,7.075,1833,6.256,1834,6.256]],["title/3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形",[1835,3.449]],["body/3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形",[145,1.598,697,3.062,1314,3.974,1476,6.284,1722,5.338,1805,4.515,1833,6.284,1834,6.284,1836,6.284,1837,7.106]],["title/3.类型系统/3.5.一致性检查/3.5.4.函数返回.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.4.函数返回.html",[0,0.283,6,0.365,39,0.392,60,0.75,132,5.637,140,1.014,145,1.696,319,1.37,366,1.096,435,2.576,546,3.962,607,1.469,635,2.628,637,2.584,638,1.893,641,2.994,682,2.526,683,2.526,699,2.196,999,2.526,1009,2.526,1331,1.946,1352,3.393,1538,2.742,1546,2.742,1550,3.017,1621,2.742,1716,3.393,1769,3.188,1770,3.393,1794,3.918,1838,4.517,1839,5.453,1840,3.017,1841,3.994,1842,3.994,1843,3.393,1844,3.994,1845,7.377,1846,3.994,1847,3.994,1848,3.994,1849,3.994,1850,3.994,1851,3.994,1852,4.517,1853,3.994]],["title/3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回",[1854,3.449]],["body/3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回",[0,0.247,6,0.365,39,0.394,60,0.751,94,1.664,132,5.638,140,1.015,145,1.697,319,1.374,366,1.099,435,2.577,546,3.965,607,1.473,635,2.636,637,2.589,638,1.898,641,2.997,682,2.533,683,2.533,699,2.202,882,3.66,999,2.533,1009,2.533,1064,4.005,1331,1.952,1352,3.402,1538,2.75,1550,3.025,1594,2.75,1621,2.75,1716,3.402,1770,3.402,1791,3.197,1805,3.926,1839,4.005,1840,3.025,1841,4.005,1842,4.005,1843,3.402,1844,4.005,1845,7.382,1846,4.005,1847,4.005,1848,4.005,1849,4.005,1850,4.005,1851,4.005,1853,4.005,1855,4.53,1856,4.53,1857,4.53,1858,4.53,1859,4.53,1860,4.53,1861,4.53,1862,4.53,1863,4.53,1864,4.53,1865,4.53,1866,4.53,1867,4.53,1868,4.53,1869,4.53,1870,4.53,1871,4.53,1872,4.53,1873,4.53,1874,4.53,1875,4.53,1876,4.53]],["title/3.类型系统/3.5.一致性检查/3.5.一致性检查.html",[]],["body/3.类型系统/3.5.一致性检查/3.5.一致性检查.html",[0,0.284,4,0.6,5,0.793,6,0.276,38,0.308,39,0.266,43,1.947,60,0.372,99,1.021,135,0.344,136,0.335,137,0.382,138,0.498,139,0.498,140,0.867,145,1.734,172,2.264,220,3.499,221,3.064,222,2.828,276,0.412,323,2.838,366,1.853,431,2.007,433,1.713,435,2.249,466,2.509,607,0.996,614,2.876,635,1.782,637,2.638,638,1.284,641,2.831,643,2.194,665,2.046,682,3.989,691,1.711,695,2.828,701,1.86,715,2.828,798,1.32,855,2.828,895,4.205,997,2.046,999,1.713,1000,1.592,1005,1.489,1030,1.86,1034,2.264,1310,2.828,1314,1.713,1316,1.489,1331,2.918,1369,1.249,1384,2.046,1393,2.301,1406,1.713,1409,1.86,1411,1.713,1504,1.713,1528,3.287,1535,2.046,1539,1.713,1541,2.264,1546,2.828,1566,3.822,1570,3.499,1577,1.86,1625,2.046,1630,2.301,1683,2.301,1684,3.499,1685,1.713,1705,2.301,1725,1.592,1761,2.828,1769,5.033,1794,4.711,1811,3.287,1813,2.046,1814,3.763,1843,2.301,1877,2.709,1878,2.301,1879,2.709,1880,2.709,1881,2.709,1882,2.046,1883,3.499,1884,4.119,1885,2.709,1886,2.709,1887,2.301,1888,2.709,1889,2.046,1890,3.063,1891,2.046,1892,2.046,1893,2.709,1894,3.764,1895,2.709,1896,4.763,1897,2.709,1898,2.709,1899,2.709,1900,2.709,1901,2.709,1902,4.119]],["title/3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查",[1903,3.449]],["body/3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查",[0,0.26,4,0.491,5,0.785,6,0.273,38,0.304,39,0.263,60,0.367,94,1.693,99,0.977,129,1.057,135,0.34,136,0.331,137,0.377,138,0.491,139,0.491,140,0.863,145,1.731,150,1.571,172,2.241,220,3.463,221,3.005,222,2.799,265,2.443,276,0.406,296,2.673,323,2.821,366,1.79,431,1.987,433,1.69,435,2.238,466,2.483,607,0.983,614,2.857,635,1.759,637,2.62,638,1.267,641,2.816,643,2.172,665,2.019,682,3.968,691,1.693,695,2.799,701,1.835,715,2.799,798,1.303,855,2.799,895,4.176,997,2.019,999,1.69,1000,1.571,1005,1.469,1030,1.835,1034,2.241,1310,1.835,1314,1.69,1316,1.469,1331,2.901,1369,1.232,1384,2.019,1393,2.271,1406,1.69,1409,1.835,1411,1.69,1504,1.69,1535,2.019,1539,1.69,1541,2.241,1566,3.796,1570,3.463,1577,1.835,1585,3.254,1594,2.799,1625,2.019,1630,2.271,1683,2.271,1684,3.463,1685,1.69,1705,2.271,1725,1.571,1761,2.799,1780,4.077,1791,5.007,1805,4.689,1811,2.133,1813,2.019,1814,3.079,1828,2.673,1836,2.673,1843,2.271,1877,2.673,1878,2.271,1879,2.673,1880,2.673,1881,2.673,1882,2.019,1883,3.463,1884,2.673,1885,2.673,1886,2.673,1887,2.271,1888,2.673,1889,2.019,1891,2.019,1892,2.019,1893,2.673,1895,2.673,1896,4.739,1897,2.673,1898,2.673,1899,2.673,1901,2.673,1902,4.077,1904,4.611,1905,3.023,1906,3.023,1907,3.023,1908,3.023,1909,3.023,1910,3.023,1911,3.023,1912,3.023,1913,3.023,1914,3.023,1915,3.023,1916,3.023,1917,3.023,1918,3.023,1919,3.023,1920,3.023,1921,3.023,1922,3.023,1923,4.611,1924,3.023,1925,3.023,1926,3.023,1927,3.023,1928,3.023,1929,3.023,1930,3.023,1931,3.023,1932,3.023,1933,3.023,1934,3.023,1935,3.023,1936,3.023,1937,3.726,1938,3.023,1939,3.023,1940,3.023,1941,3.023,1942,3.023,1943,3.023,1944,3.023,1945,3.023,1946,3.023,1947,3.023,1948,2.673,1949,3.023,1950,3.023,1951,3.023,1952,3.023,1953,3.023,1954,4.611,1955,3.023,1956,3.023,1957,3.023]],["title/3.类型系统/3.6.类型推断/3.6.2.局限.html",[]],["body/3.类型系统/3.6.类型推断/3.6.2.局限.html",[0,0.21,7,2.617,140,0.654,145,1.772,216,2.798,431,2.32,609,2.617,638,2.256,688,3.011,894,3.595,895,3.595,998,2.798,999,3.011,1005,2.617,1006,3.011,1013,2.9,1014,3.595,1017,3.595,1018,2.798,1021,2.081,1356,3.268,1395,3.268,1528,3.799,1539,3.011,1541,4.235,1549,4.044,1578,3.268,1621,3.268,1680,4.044,1709,4.044,1761,3.268,1771,3.595,1840,4.627,1878,4.044,1882,3.595,1900,4.761,1958,5.384,1959,5.384,1960,4.761,1961,4.761,1962,6.126,1963,3.595,1964,4.761,1965,4.761,1966,4.761,1967,4.761,1968,4.044,1969,6.126,1970,6.126,1971,4.761,1972,4.761,1973,4.761,1974,4.761,1975,5.384,1976,3.595,1977,4.761,1978,4.761,1979,4.761,1980,4.761,1981,4.044,1982,4.761]],["title/3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限",[1983,3.449]],["body/3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限",[7,2.626,140,0.657,145,1.773,216,2.808,431,2.328,609,2.626,638,2.263,688,3.021,894,3.608,895,3.608,998,2.808,999,3.021,1005,2.626,1006,3.021,1013,2.91,1014,3.608,1017,3.608,1018,2.808,1021,2.088,1356,3.279,1395,3.279,1539,3.021,1541,4.238,1549,4.058,1578,3.279,1585,3.812,1621,3.279,1680,4.058,1709,4.058,1761,3.279,1771,3.608,1840,4.637,1878,4.058,1882,3.608,1948,4.777,1960,4.777,1961,4.777,1962,6.139,1963,3.608,1964,4.777,1965,4.777,1966,4.777,1967,4.777,1968,4.058,1969,6.139,1970,6.139,1971,4.777,1972,4.777,1973,4.777,1974,4.777,1976,3.608,1977,4.777,1978,4.777,1979,4.777,1980,4.777,1981,4.058,1982,4.777,1984,5.402,1985,5.402,1986,5.402,1987,5.402]],["title/3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html",[]],["body/3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html",[0,0.273,4,0.401,5,1.185,6,0.437,8,1.956,38,0.546,39,0.471,41,1.494,60,0.773,62,1.503,68,4.075,117,0.655,132,2.285,135,0.61,136,0.594,137,0.677,138,1.034,139,1.034,140,0.897,145,1.746,276,0.636,277,0.584,319,2.112,323,1.577,324,1.83,366,1.865,370,0.8,371,0.8,407,0.874,408,0.913,409,1.043,410,1.142,411,1.254,412,0.816,435,1.929,546,3.737,601,2.285,602,1.886,614,3.181,618,2.514,619,2.514,620,2.285,638,1.577,641,1.494,691,2.557,692,3,704,1.622,798,2.338,913,3.042,1000,1.956,1005,2.637,1013,2.027,1021,1.455,1041,2.105,1046,2.827,1316,1.83,1331,2.741,1337,2.514,1350,2.514,1364,2.285,1365,2.827,1366,2.827,1369,2.212,1395,2.285,1411,3.893,1502,2.514,1537,2.827,1539,2.105,1541,3.737,1542,2.105,1546,2.285,1561,2.827,1566,4.48,1572,2.827,1647,2.82,1649,3.623,1655,1.753,1679,2.514,1685,2.105,1713,3.862,1725,1.956,1769,3.829,1794,2.392,1811,3.829,1813,2.514,1814,2.514,1891,2.514,1892,2.514,1981,2.827,1988,4.47,1989,3.329,1990,3.329,1991,3.329,1992,5.425,1993,3.329,1994,5.23,1995,6.156,1996,3.764,1997,3.329,1998,3.329,1999,5.625,2000,3.329,2001,3.764,2002,3.329,2003,4.798,2004,3.329,2005,3.329,2006,3.764,2007,5.625,2008,3.329,2009,3.329,2010,2.334]],["title/3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断",[2011,3.449]],["body/3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断",[0,0.276,4,0.39,5,1.17,6,0.432,8,1.905,38,0.536,39,0.462,41,1.455,60,0.762,62,1.474,68,3.997,94,1.346,117,0.638,132,2.225,135,0.598,136,0.582,137,0.664,138,1.019,139,1.019,140,0.888,145,1.74,150,1.905,276,0.622,277,0.569,319,1.614,323,1.536,324,1.782,366,1.668,370,0.779,371,0.779,407,0.851,408,0.889,409,1.015,410,1.112,411,1.221,412,0.789,435,1.9,546,3.55,601,2.225,602,1.857,614,3.141,618,2.448,619,2.448,620,2.225,638,1.536,641,1.455,691,2.302,692,2.7,704,1.579,798,2.293,913,2.961,1000,1.905,1005,2.587,1013,1.974,1021,1.417,1041,2.049,1046,2.753,1316,1.782,1331,2.7,1337,2.448,1350,2.448,1364,2.225,1365,2.753,1366,2.753,1369,2.17,1395,2.225,1411,3.504,1502,2.448,1537,2.753,1539,2.049,1541,3.703,1542,2.049,1561,2.753,1566,4.433,1572,2.753,1594,2.225,1647,2.766,1649,3.554,1655,1.696,1679,2.448,1685,2.049,1713,3.804,1725,1.905,1791,3.755,1805,2.329,1811,2.586,1813,2.448,1814,2.448,1891,2.448,1892,2.448,1981,2.753,1988,2.753,1989,3.241,1990,3.241,1991,3.241,1993,3.241,1994,5.165,1995,6.08,1997,3.241,1998,3.241,1999,5.541,2000,3.241,2002,3.241,2003,3.241,2004,3.241,2005,3.241,2007,5.541,2008,3.241,2009,3.241,2012,3.665,2013,5.322,2014,3.665,2015,3.665,2016,3.665,2017,3.665,2018,3.665,2019,5.322,2020,3.665,2021,3.665,2022,3.665,2023,3.665,2024,3.665,2025,3.665,2026,3.665,2027,3.665,2028,3.665,2029,3.665,2030,3.665,2031,3.665,2032,2.259]],["title/3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html",[]],["body/3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html",[0,0.28,4,0.616,5,0.985,6,0.429,38,0.673,39,0.581,41,1.636,44,3.096,60,0.882,62,2.116,66,2.142,117,0.717,135,0.752,136,0.633,137,0.904,138,0.67,139,1.179,140,0.813,145,1.643,221,2.396,276,0.778,277,0.64,370,0.876,371,0.876,407,0.957,422,1.514,602,1.983,607,1.34,610,2.502,615,3.526,637,1.727,660,2.502,664,1.514,692,1.776,699,2.003,708,2.142,979,1.776,994,3.096,1018,2.142,1024,2.305,1034,2.003,1382,3.096,1385,2.752,1394,5.712,1396,3.236,1529,2.619,1546,2.502,1620,2.502,1762,3.513,1796,3.74,1798,2.752,1896,3.865,2033,3.33,2034,3.865,2035,3.644,2036,4.809,2037,3.33,2038,3.096,2039,3.865,2040,3.644,2041,3.644,2042,3.096,2043,4.347,2044,3.644,2045,4.06,2046,3.644,2047,5.117,2048,3.644,2049,3.644,2050,3.644,2051,3.644,2052,3.644,2053,3.644,2054,4.121,2055,3.644,2056,2.752,2057,4.121,2058,5.117]],["title/3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型",[2059,3.449]],["body/3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型",[0,0.28,4,0.427,5,0.965,6,0.424,38,0.663,39,0.572,41,1.591,44,3.01,60,0.871,62,2.094,66,2.083,94,1.472,117,0.698,135,0.74,136,0.621,137,0.893,138,0.651,139,1.164,140,0.801,145,1.633,221,2.36,276,0.763,277,0.622,370,0.852,371,0.852,407,0.93,422,1.472,602,1.953,607,1.303,610,2.433,615,3.482,637,1.679,660,2.433,664,1.472,692,1.727,699,1.948,708,2.083,979,1.727,994,3.01,1018,2.083,1024,2.241,1034,1.948,1382,3.01,1385,2.676,1394,5.601,1396,3.173,1586,2.547,1594,2.433,1620,2.433,1762,3.445,1796,3.684,1798,2.676,1896,3.789,2034,3.789,2035,3.544,2036,4.766,2039,3.789,2040,3.544,2041,3.544,2042,3.01,2043,4.262,2044,3.544,2045,3.445,2046,3.544,2047,5.017,2048,3.544,2049,3.544,2050,3.544,2051,3.544,2052,3.544,2053,3.544,2055,3.544,2056,2.676,2058,5.017,2060,4.007,2061,4.007,2062,4.007,2063,3.238,2064,3.01,2065,4.007,2066,4.007,2067,4.007,2068,4.007,2069,4.007,2070,4.007,2071,4.007,2072,4.007,2073,4.007,2074,4.007,2075,4.007,2076,4.007,2077,4.007]],["title/3.类型系统/3.6.类型推断/3.6.类型推断.html",[]],["body/3.类型系统/3.6.类型推断/3.6.类型推断.html",[0,0.283,5,1.137,6,0.301,38,0.513,39,0.443,60,0.619,67,2.01,69,3.596,117,0.887,135,0.573,136,0.557,137,0.635,138,0.828,139,0.828,140,0.736,142,2.956,145,1.763,223,1.488,276,0.685,277,0.791,279,1.447,319,2.027,323,2.135,366,1.921,546,1.679,605,2.594,609,1.679,614,2.766,636,1.301,638,1.447,641,1.371,643,1.627,664,1.269,688,1.931,691,2.618,697,1.488,700,1.795,704,2.196,711,1.931,855,2.097,921,3.827,1002,1.931,1005,1.679,1006,1.931,1007,1.931,1011,2.097,1012,3.093,1013,1.86,1018,1.795,1024,1.931,1027,1.931,1035,2.306,1040,2.594,1310,4.058,1311,3.827,1316,1.679,1330,2.097,1331,2.196,1364,2.097,1367,1.931,1368,1.931,1381,2.594,1395,2.097,1406,1.931,1410,2.097,1501,4.044,1535,2.306,1541,2.943,1551,2.594,1620,2.097,1647,2.648,1649,3.403,1679,2.306,1707,2.594,1713,2.097,1725,1.795,1726,2.594,1794,2.195,1796,1.931,1891,2.306,1892,2.306,1968,2.594,2078,2.594,2079,3.054,2080,3.054,2081,3.054,2082,5.911,2083,3.054,2084,3.054,2085,3.054,2086,3.054,2087,3.454,2088,3.054,2089,3.054,2090,3.054,2091,3.054,2092,3.054,2093,3.054,2094,3.054,2095,3.454,2096,4.506,2097,3.054,2098,3.054,2099,3.054,2100,5.354,2101,3.054,2102,3.054,2103,3.054]],["title/3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断",[2104,3.449]],["body/3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断",[0,0.277,5,1.129,6,0.298,38,0.507,39,0.438,60,0.613,69,2.401,94,1.851,117,0.877,135,0.566,136,0.551,137,0.628,138,0.819,139,0.819,140,0.73,142,2.949,145,1.755,223,1.466,276,0.677,277,0.782,279,1.426,319,2.013,323,2.111,366,1.912,546,1.654,596,3.008,605,2.556,609,1.654,614,2.742,636,1.282,638,1.426,641,1.35,643,1.602,664,1.25,688,1.903,691,2.602,697,1.466,700,1.768,704,2.172,711,1.903,921,3.785,1002,1.903,1005,1.654,1006,1.903,1007,1.903,1011,2.065,1012,3.059,1013,1.832,1018,1.768,1024,1.903,1027,1.903,1035,2.272,1040,2.556,1310,4.028,1311,3.785,1316,1.654,1330,2.065,1331,2.172,1364,2.065,1367,1.903,1368,1.903,1381,2.556,1395,2.065,1406,1.903,1410,2.065,1501,4.008,1535,2.272,1541,2.918,1551,2.556,1620,2.065,1647,2.619,1649,3.365,1679,2.272,1707,2.556,1713,2.065,1725,1.768,1726,2.556,1796,1.903,1805,2.162,1891,2.272,1892,2.272,1968,2.556,2078,2.556,2079,3.008,2080,3.008,2081,3.008,2082,5.868,2083,3.008,2084,3.008,2085,3.008,2086,3.008,2088,3.008,2089,3.008,2090,3.008,2091,3.008,2092,3.008,2093,3.008,2094,3.008,2096,3.008,2097,3.008,2098,3.008,2099,3.008,2100,5.307,2101,3.008,2102,3.008,2103,3.008,2105,3.402,2106,3.402,2107,3.402,2108,3.402,2109,3.402,2110,3.402,2111,3.402,2112,3.402,2113,3.402,2114,3.402,2115,3.402,2116,3.402,2117,3.402,2118,3.402,2119,3.402,2120,3.402,2121,3.402,2122,3.402,2123,3.402,2124,3.402,2125,3.402,2126,3.402,2127,3.402,2128,3.402,2129,3.402,2130,3.402,2131,3.402,2132,3.402,2133,3.402]],["title/3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html",[]],["body/3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html",[0,0.274,4,0.337,6,0.187,8,1.646,43,2.012,136,0.346,137,0.935,138,1.347,140,0.385,145,1.567,216,1.646,217,1.922,223,1.364,276,0.642,277,0.491,282,2.378,323,2.409,371,1.015,407,0.735,410,0.96,422,1.754,431,1.364,439,3.859,602,0.939,609,1.539,614,2.182,615,1.539,616,1.705,635,1.842,636,1.799,637,2.683,638,2.409,660,2.899,664,3.078,681,4.172,682,3.216,683,1.771,697,2.478,700,3.328,703,2.115,757,1.771,758,2.378,760,5.155,893,5.533,998,1.646,1033,4.319,1034,2.322,1036,3.84,1041,2.671,1208,4.058,1346,null,1369,1.291,1385,3.19,1396,1.771,1504,3.216,1528,5.291,1529,2.012,1538,1.922,1562,4.319,1566,1.922,1681,2.378,1768,2.378,1769,2.234,1796,4.316,1799,3.587,1840,2.115,1887,2.378,1894,4.646,1963,3.84,1988,3.587,1994,4.81,2036,4.385,2038,3.587,2039,3.19,2045,1.922,2056,2.115,2134,2.234,2135,3.166,2136,3.166,2137,4.276,2138,2.8,2139,2.8,2140,4.646,2141,2.8,2142,2.8,2143,2.8,2144,4.223,2145,2.115,2146,2.8,2147,2.8,2148,4.223,2149,3.166,2150,4.319,2151,4.223,2152,3.166,2153,3.166,2154,3.166,2155,5.662,2156,4.223,2157,7.41,2158,2.8,2159,2.8,2160,2.8,2161,2.8,2162,5.085,2163,3.166,2164,2.378,2165,3.166,2166,3.166,2167,5.085,2168,2.8]],["title/3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序",[2169,3.449]],["body/3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序",[0,0.143,4,0.332,6,0.185,8,1.623,43,1.985,136,0.342,137,0.931,138,1.325,140,0.38,145,1.561,216,1.623,217,1.896,223,1.346,276,0.42,277,0.485,282,2.346,323,2.389,371,0.664,407,0.725,410,0.947,422,1.736,431,1.346,439,2.524,602,0.926,609,1.518,614,2.159,615,1.518,616,1.682,635,1.817,636,1.781,637,2.664,638,2.389,660,2.869,664,3.069,681,4.147,682,3.189,683,1.747,697,2.457,700,3.305,703,2.086,757,1.747,758,2.346,760,5.133,893,5.517,998,1.623,1033,4.283,1034,2.298,1036,3.808,1041,2.643,1208,3.335,1346,null,1369,1.273,1385,3.157,1396,1.747,1504,3.189,1538,1.896,1562,4.283,1566,1.896,1585,5.267,1586,1.985,1681,2.346,1768,2.346,1791,2.204,1796,4.298,1799,3.55,1840,2.086,1887,2.346,1937,4.608,1963,3.808,1988,2.346,1994,4.776,2036,4.362,2039,3.157,2045,1.896,2056,2.086,2064,3.55,2137,4.247,2138,2.762,2139,2.762,2141,2.762,2142,2.762,2143,2.762,2144,4.179,2145,2.086,2146,2.762,2147,2.762,2148,2.762,2150,4.283,2151,4.179,2155,5.623,2156,4.179,2157,7.389,2158,2.762,2159,2.762,2160,2.762,2161,2.762,2162,5.042,2164,2.346,2167,5.042,2168,2.762,2170,3.123,2171,3.123,2172,3.123,2173,3.123,2174,4.608,2175,3.123,2176,3.123,2177,3.123,2178,3.123,2179,3.123,2180,3.123,2181,3.123,2182,3.123,2183,3.123,2184,3.123,2185,3.123,2186,3.123,2187,3.123,2188,3.123,2189,3.123,2190,3.123,2191,3.123,2192,3.123,2193,5.702,2194,3.123,2195,3.123,2196,3.123,2197,3.123,2198,3.123,2199,3.123,2200,3.123,2201,3.123,2202,3.123,2203,3.123,2204,3.123,2205,3.123,2206,4.726,2207,3.123,2208,3.123,2209,3.123,2210,3.123,2211,3.123,2212,3.123,2213,3.123,2214,3.123,2215,3.123,2216,3.123,2217,3.123]],["title/3.类型系统/3.7.模块和路径/3.7.2.Import.html",[]],["body/3.类型系统/3.7.模块和路径/3.7.2.Import.html",[0,0.277,4,0.724,5,1.322,6,0.359,8,1.261,38,0.611,39,0.527,60,0.738,62,1.076,117,0.845,135,0.727,136,0.664,137,0.881,138,1.214,139,0.789,140,0.787,141,0.771,145,1.454,223,1.673,275,1.18,276,0.816,277,0.942,341,1.823,343,1.823,366,0.589,370,0.516,406,1.712,422,1.783,468,1.961,601,1.473,602,2.339,607,2.297,609,1.888,615,1.888,620,1.473,634,1.219,636,0.914,637,1.017,638,2.034,662,1.621,664,2.378,681,1.473,697,1.046,700,1.261,704,2.092,708,1.261,757,1.357,760,1.621,893,1.621,998,1.261,1002,1.357,1006,1.357,1009,1.357,1021,0.938,1027,1.357,1041,1.357,1121,1.961,1180,4.558,1208,2.74,1272,2.917,1314,1.357,1316,1.18,1328,1.621,1329,1.823,1330,2.947,1331,2.391,1333,1.961,1339,1.823,1346,null,1362,1.823,1367,1.357,1368,1.357,1369,0.989,1386,1.621,1391,1.621,1403,1.823,1404,1.823,1411,1.357,1528,4.282,1529,1.542,1538,1.473,1542,1.357,1568,1.823,1576,1.823,1578,1.473,1620,2.357,1623,1.823,1635,3.138,1647,1.261,1762,1.473,1771,1.621,1796,4.966,1798,1.621,1882,1.621,1883,1.823,1889,1.621,1894,1.961,1896,1.621,1963,3.242,1976,1.621,2034,2.593,2036,4.965,2037,1.961,2038,2.917,2039,2.593,2042,2.917,2043,3.646,2045,4.421,2056,1.621,2078,1.823,2134,2.74,2137,1.621,2140,3.138,2145,3.705,2150,2.917,2164,2.917,2218,2.146,2219,2.426,2220,2.146,2221,1.823,2222,1.823,2223,4.558,2224,2.146,2225,4.906,2226,4.292,2227,2.426,2228,2.426,2229,2.146,2230,2.146,2231,2.146,2232,2.426,2233,2.146,2234,3.434,2235,3.434,2236,2.917,2237,2.146,2238,2.146,2239,2.426,2240,2.146,2241,3.883,2242,2.146,2243,2.146,2244,2.426,2245,3.434,2246,4.292,2247,4.292,2248,5.724,2249,2.146,2250,2.146,2251,3.434,2252,2.146,2253,2.146,2254,2.146,2255,2.146,2256,3.434,2257,3.434,2258,2.146,2259,3.434,2260,3.434,2261,3.434,2262,2.146,2263,2.146,2264,2.146,2265,2.146]],["title/3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import",[2218,3.05]],["body/3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import",[0,0.273,4,0.637,5,1.312,6,0.354,8,1.226,38,0.602,39,0.52,60,0.727,62,1.051,94,1.394,117,0.829,129,0.824,135,0.718,136,0.654,137,0.872,138,1.204,139,0.774,140,0.777,141,0.749,145,1.441,150,1.226,223,1.636,275,1.146,276,0.804,277,0.928,341,1.772,343,1.772,366,0.572,370,0.501,406,1.664,422,1.749,601,1.432,602,2.322,607,2.273,609,1.845,615,1.845,620,1.432,634,1.185,636,0.889,637,0.988,638,1.996,662,1.575,664,2.348,681,1.432,697,1.016,700,1.226,704,2.052,708,1.226,757,1.319,760,1.575,893,1.575,998,1.226,1002,1.319,1006,1.319,1009,1.319,1021,0.912,1027,1.319,1041,1.319,1121,1.906,1180,4.1,1208,1.664,1272,2.851,1314,1.319,1316,1.146,1328,1.575,1329,1.772,1330,2.891,1331,2.352,1333,1.906,1339,1.772,1346,null,1362,1.772,1367,1.319,1368,1.319,1369,0.962,1386,1.575,1391,1.575,1403,1.772,1404,1.772,1411,1.319,1538,1.432,1542,1.319,1568,1.772,1576,1.772,1578,1.432,1585,4.221,1586,1.499,1620,2.304,1623,1.772,1647,1.226,1667,3.067,1762,1.432,1771,1.575,1796,4.949,1798,1.575,1882,1.575,1883,1.772,1889,1.575,1896,1.575,1937,1.906,1963,3.181,1976,1.575,2034,2.535,2036,4.935,2039,2.535,2042,1.772,2043,3.577,2045,4.379,2056,1.575,2063,1.906,2064,2.851,2078,1.772,2134,1.664,2137,1.575,2145,3.181,2150,2.851,2164,1.772,2174,3.067,2220,2.086,2221,1.772,2222,1.772,2223,4.1,2224,2.086,2225,4.826,2226,4.211,2229,2.086,2230,2.086,2231,2.086,2233,2.086,2234,3.356,2235,3.356,2236,2.851,2237,2.086,2238,2.086,2240,2.086,2242,2.086,2243,2.086,2245,3.356,2246,4.211,2247,3.356,2248,5.652,2249,2.086,2250,2.086,2251,3.356,2252,2.086,2253,2.086,2254,2.086,2255,2.086,2256,3.356,2257,3.356,2258,2.086,2259,2.086,2260,3.356,2261,2.086,2262,2.086,2263,2.086,2264,2.086,2265,2.086,2266,2.358,2267,2.358,2268,2.358,2269,2.358,2270,2.358,2271,2.358,2272,2.358,2273,2.358,2274,2.358,2275,2.358,2276,2.358,2277,2.358,2278,2.358,2279,2.358,2280,2.358,2281,2.358,2282,2.358,2283,2.358,2284,2.358,2285,2.358,2286,2.358,2287,2.358,2288,3.795,2289,2.358,2290,2.358,2291,2.358,2292,2.358,2293,2.358,2294,2.358,2295,2.358,2296,2.358,2297,2.358,2298,2.358,2299,2.358,2300,2.358,2301,2.358,2302,2.358,2303,2.358,2304,2.358,2305,2.358,2306,2.358,2307,2.358,2308,2.358]],["title/3.类型系统/3.7.模块和路径/3.7.模块和路径.html",[]],["body/3.类型系统/3.7.模块和路径/3.7.模块和路径.html",[0,0.273,4,0.485,7,2.214,44,3.422,99,0.854,145,1.699,275,2.214,324,2.214,431,1.963,602,1.839,607,1.482,608,2.766,609,3.015,615,2.214,634,2.288,664,3.001,699,2.214,700,2.368,715,2.766,757,4.429,1028,3.042,1043,3.422,1348,3.422,1356,2.766,1369,1.857,1394,3.042,1396,3.943,1496,3.422,1546,3.765,1578,2.766,1631,3.422,1647,2.368,1725,3.223,1762,2.766,1889,3.042,1976,4.142,2033,5.012,2034,3.042,2036,5.238,2037,3.681,2038,3.422,2045,4.281,2134,3.215,2137,3.042,2140,3.681,2145,4.142,2221,3.422,2222,3.422,2223,5.686,2236,3.422,2309,4.555,2310,4.028,2311,6.236,2312,4.028,2313,5.484,2314,4.028,2315,4.028,2316,4.028,2317,4.028,2318,6.236,2319,5.484,2320,4.028,2321,5.484,2322,4.028,2323,4.028,2324,4.028,2325,4.028,2326,4.555,2327,4.028,2328,4.028,2329,4.028,2330,4.028,2331,4.028,2332,4.028,2333,4.028]],["title/3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径",[2334,3.449]],["body/3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径",[4,0.486,7,2.221,94,1.678,99,0.856,145,1.699,275,2.221,324,2.221,379,3.432,431,1.969,602,1.842,607,1.486,608,2.773,609,3.021,615,2.221,634,2.295,664,3.004,699,2.221,700,2.374,715,2.773,757,4.433,1028,3.051,1043,3.432,1348,3.432,1356,2.773,1369,1.862,1394,3.051,1396,3.949,1496,3.432,1578,2.773,1594,3.773,1631,3.432,1647,2.374,1725,3.23,1762,2.773,1889,3.051,1976,4.15,2033,3.692,2034,3.051,2036,5.241,2045,4.287,2063,3.692,2064,3.432,2134,3.224,2137,3.051,2145,4.15,2174,3.692,2221,3.432,2222,3.432,2223,5.305,2236,3.432,2310,4.04,2311,6.245,2312,4.04,2313,5.495,2314,4.04,2315,4.04,2316,4.04,2317,4.04,2318,6.245,2319,5.495,2320,4.04,2321,5.495,2322,4.04,2323,4.04,2324,4.04,2325,4.04,2327,4.04,2328,4.04,2329,4.04,2330,4.04,2331,4.04,2332,4.04,2333,4.04,2335,4.568,2336,4.568,2337,4.568,2338,4.568,2339,4.568,2340,4.568,2341,4.568,2342,4.568,2343,4.568,2344,4.568,2345,4.568,2346,4.568,2347,4.568,2348,4.568,2349,4.568,2350,4.568,2351,4.568]]],"invertedIndex":[["",{"_index":0,"title":{"index.html":{}},"body":{"index.html":{},"index.html#关于本文档":{},"3.类型系统/3.类型系统.html":{},"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.4.性能影响.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{}}}],["0",{"_index":254,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["0.0",{"_index":257,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["0xff0000",{"_index":255,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["1",{"_index":6,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["1,&#x201d;foo&#x201d;]&#xff0c;&#x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#x662f",{"_index":2021,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["1,”foo",{"_index":2001,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{}}}],["1.&#x5982;&#x679c",{"_index":1088,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["1.0",{"_index":256,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["10",{"_index":371,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["10.7",{"_index":494,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{}}}],["100",{"_index":1127,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["11",{"_index":407,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["12",{"_index":408,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["13",{"_index":409,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["14",{"_index":410,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["15",{"_index":411,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["16",{"_index":412,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["17",{"_index":413,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["18",{"_index":414,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["19",{"_index":415,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["1andfoo.field",{"_index":2142,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["1e10",{"_index":258,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["2",{"_index":39,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["2.&#x5982;&#x679c",{"_index":1090,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["2.&#x7c7b;&#x578b",{"_index":70,"title":{"2.类型/2.类型.html#2-类型":{}},"body":{}}],["2.1",{"_index":252,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{}}}],["2.1.&#x57fa;&#x672c;&#x7c7b;&#x578b",{"_index":261,"title":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}},"body":{}}],["2.1.1",{"_index":95,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html":{}}}],["2.1.1.&#x6570;&#x503c;&#x7c7b;&#x578b",{"_index":100,"title":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#2-1-1-数值类型":{}},"body":{}}],["2.1.2",{"_index":114,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{}}}],["2.1.2.&#x6ea2;&#x51fa",{"_index":121,"title":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}},"body":{}}],["2.1.3",{"_index":169,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{}}}],["2.1.3.&#x6570;&#x503c;&#x8fd0;&#x7b97;&#x7b26",{"_index":176,"title":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#2-1-3-数值运算符":{}},"body":{}}],["2.1.4.bool",{"_index":215,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{}}}],["2.1.4.bool&#x7c7b;&#x578b",{"_index":225,"title":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}},"body":{}}],["2.1.5",{"_index":1839,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["2.1.5.void",{"_index":131,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{}}}],["2.1.5.void&#x7c7b;&#x578b",{"_index":149,"title":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}},"body":{}}],["2.2",{"_index":538,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.5.匿名结构/2.5.4.性能影响.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["2.2.&#x4e3a;&#x7a7a;&#x6027",{"_index":548,"title":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}},"body":{}}],["2.2.1",{"_index":318,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{}}}],["2.2.1.&#x53ef;&#x9009;&#x53c2;&#x6570;&#x548c;&#x4e3a;&#x7a7a;&#x6027",{"_index":325,"title":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}},"body":{}}],["2.3",{"_index":259,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["2.3.&#x7c7b;&#x5b9e;&#x4f8b",{"_index":495,"title":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}},"body":{}}],["2.3.1",{"_index":340,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{}}}],["2.3.1.&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":345,"title":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}},"body":{}}],["2.3.2",{"_index":274,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{}}}],["2.3.2.&#x7ee7;&#x627f",{"_index":291,"title":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}},"body":{}}],["2.3.3",{"_index":362,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{}}}],["2.3.3.&#x63a5;&#x53e3",{"_index":376,"title":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}},"body":{}}],["2.4",{"_index":341,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["2.4.&#x679a;&#x4e3e;&#x5b9e;&#x4f8b",{"_index":522,"title":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}},"body":{}}],["2.4.1",{"_index":406,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["2.4.1.enum",{"_index":461,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{}}}],["2.4.1.enum&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":469,"title":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}},"body":{}}],["2.4.2",{"_index":405,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{}}}],["2.4.2.&#x4f7f;&#x7528;&#x679a;&#x4e3",{"_index":441,"title":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}},"body":{}}],["2.4.2class",{"_index":632,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["2.5",{"_index":747,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["2.5.&#x533f;&#x540d;&#x7ed3;&#x6784",{"_index":761,"title":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}},"body":{}}],["2.5.1.&#x7ed3;&#x6784;&#x503c;&#x7684;json&#x5f62;&#x5f0f",{"_index":621,"title":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}},"body":{}}],["2.5.1.结构值的json",{"_index":598,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{}}}],["2.5.2",{"_index":631,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{}}}],["2.5.3",{"_index":658,"title":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{}}}],["2.5.4",{"_index":738,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["2.5.4.&#x6027;&#x80fd;&#x5f71;&#x54cd",{"_index":739,"title":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}},"body":{}}],["2.5.5",{"_index":680,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{}}}],["2.5.5.&#x6269;&#x5c55",{"_index":719,"title":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}},"body":{}}],["2.6",{"_index":69,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["2.6.&#x51fd;&#x6570;&#x7c7b;&#x578b",{"_index":857,"title":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}},"body":{}}],["2.6.1",{"_index":800,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{}}}],["2.6.1.&#x53ef;&#x9009;&#x53c2;&#x6570",{"_index":834,"title":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}},"body":{}}],["2.6.2",{"_index":797,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html":{}}}],["2.6.2.&#x9ed8;&#x8ba4;&#x503c",{"_index":802,"title":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}},"body":{}}],["2.7",{"_index":913,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["2.7.&#x52a8;&#x6001;&#x7c7b;&#x578b",{"_index":926,"title":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}},"body":{}}],["2.7.1.dynam",{"_index":815,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{}}}],["2.7.1.dynamic&#x4f7f;&#x7528;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":824,"title":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}},"body":{}}],["2.7.2.&#x5b9e;&#x73b0;dynam",{"_index":897,"title":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}},"body":{}}],["2.7.2.实现dynam",{"_index":887,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{}}}],["2.8",{"_index":260,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{}}}],["2.8.&#x62bd;&#x8c61;&#x7c7b;&#x578b",{"_index":1415,"title":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}},"body":{}}],["2.8.1",{"_index":978,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{}}}],["2.8.1.&#x9690;&#x5f0f;&#x7c7b;&#x578b;&#x8f6c;&#x6362",{"_index":1050,"title":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}},"body":{}}],["2.8.2",{"_index":1103,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{}}}],["2.8.2.&#x8fd0;&#x7b97;&#x7b26;&#x91cd;&#x8f7d",{"_index":1128,"title":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}},"body":{}}],["2.8.3",{"_index":1164,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{}}}],["2.8.3.&#x6570;&#x7ec4;&#x8bbf;&#x95e",{"_index":1183,"title":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}},"body":{}}],["2.8.4",{"_index":986,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{}}}],["2.8.4.&#x9009;&#x62e9;&#x51fd;&#x6570",{"_index":1214,"title":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}},"body":{}}],["2.8.5",{"_index":1261,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{}}}],["2.8.5.&#x679a;&#x4e3e;&#x62bd;&#x8c61;&#x7c7b;&#x578b",{"_index":1276,"title":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}},"body":{}}],["2.8.6",{"_index":1228,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{}}}],["2.8.6.&#x8f6c;&#x53d1;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5b57;&#x6bb5",{"_index":1239,"title":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}},"body":{}}],["2.8.7",{"_index":1289,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{}}}],["2.8.7.&#x6838;&#x5fc3;&#x7c7b;&#x578b;&#x62bd;&#x8c61",{"_index":1292,"title":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}},"body":{}}],["2.9",{"_index":855,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.9.单形/2.9.单形.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{}}}],["2.9.&#x5355;&#x5f62",{"_index":1318,"title":{"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}},"body":{}}],["2.9节）的类型的一致性检查行为在类型推断（第3.6",{"_index":1832,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{}}}],["20",{"_index":416,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["21",{"_index":417,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["22",{"_index":418,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["23",{"_index":419,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["24",{"_index":420,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["25",{"_index":421,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["252",{"_index":118,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{}}}],["255",{"_index":437,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["26",{"_index":822,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["27",{"_index":1045,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["3",{"_index":38,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["3&#x4e4b;&#x524d;&#x7684",{"_index":945,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["3&#x7684;&#x7248;&#x672c;&#x88ab;&#x51cf;&#x5c11;&#x3002",{"_index":977,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["3.&#x5982;&#x679c",{"_index":1093,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["3.&#x7c7b;&#x578b;&#x7cfb;&#x7edf",{"_index":45,"title":{"3.类型系统/3.类型系统.html#3-类型系统":{}},"body":{}}],["3.0",{"_index":374,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{}}}],["3.0&#x7248;&#x672c;&#x4e4b;&#x540",{"_index":1240,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["3.1",{"_index":1497,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["3.1.0",{"_index":707,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["3.1.typedef",{"_index":1460,"title":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html":{}}}],["3.2",{"_index":42,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"2.类型/2.类型.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["3.2.&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":1582,"title":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}},"body":{}}],["3.2.0",{"_index":2265,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["3.2.1",{"_index":1484,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["3.2.1.&#x7ea6;&#x675f",{"_index":1505,"title":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}},"body":{}}],["3.3",{"_index":1553,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{}}}],["3.3.&#x6cdb;&#x578b",{"_index":1660,"title":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}},"body":{}}],["3.3.0",{"_index":147,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["3.3.1",{"_index":2003,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["3.4",{"_index":1676,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["3.4.&#x53d8;&#x5f02",{"_index":1731,"title":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}},"body":{}}],["3.5",{"_index":43,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.9.单形/2.9.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["3.5.&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5",{"_index":1903,"title":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}},"body":{}}],["3.5.1",{"_index":1793,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{}}}],["3.5.1.&#x7c7b;&#x4e0e;&#x63a5;&#x53e3",{"_index":1803,"title":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}},"body":{}}],["3.5.2",{"_index":367,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.5.匿名结构/2.5.4.性能影响.html":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{}}}],["3.5.2.&#x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b",{"_index":1773,"title":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}},"body":{}}],["3.5.3",{"_index":1831,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{}}}],["3.5.3.&#x5355;&#x5f62",{"_index":1835,"title":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{}},"body":{}}],["3.5.4",{"_index":1838,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{}}}],["3.5.4.&#x51fd;&#x6570;&#x8fd4;&#x56de",{"_index":1854,"title":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}},"body":{}}],["3.5.5",{"_index":1811,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["3.5.5.&#x901a;&#x7528;&#x57fa;&#x672c;&#x7c7b;&#x578b",{"_index":1823,"title":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}},"body":{}}],["3.6",{"_index":67,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.9.单形/2.9.单形.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{}}}],["3.6.&#x7c7b;&#x578b;&#x63a8;&#x65ad",{"_index":2104,"title":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}},"body":{}}],["3.6.1",{"_index":1988,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["3.6.1.&#x7531;&#x4e0a;&#x800c;&#x4e0b;&#x63a8;&#x65ad",{"_index":2011,"title":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}},"body":{}}],["3.6.2",{"_index":1958,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{}}}],["3.6.2.&#x5c40;&#x9650",{"_index":1983,"title":{"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}},"body":{}}],["3.7",{"_index":44,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{}}}],["3.7.&#x6a21;&#x5757;&#x548c;&#x8def;&#x5f84",{"_index":2334,"title":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}},"body":{}}],["3.7.1",{"_index":2033,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["3.7.1.&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b",{"_index":2059,"title":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}},"body":{}}],["3.7.2",{"_index":2148,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["3.7.2.import",{"_index":2218,"title":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["3.7.3",{"_index":2134,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["3.7.3.&#x89e3;&#x6790;&#x987a;&#x5e8f",{"_index":2169,"title":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}},"body":{}}],["32",{"_index":750,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["33",{"_index":753,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["3行的函数类型输出直接反映出来。这个例子程序调用了4",{"_index":833,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html":{}}}],["4",{"_index":135,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["4.&#x5982;&#x679c",{"_index":1094,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["4.0",{"_index":671,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["4.0.0",{"_index":639,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["4.1",{"_index":1967,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["4.1节）或者属性（第4.2",{"_index":1959,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{}}}],["4.2",{"_index":894,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["4.2.3",{"_index":1324,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{}}}],["4.3",{"_index":288,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{}}}],["4.3.1",{"_index":290,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{}}}],["4.4.2",{"_index":801,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{}}}],["404",{"_index":1264,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["405",{"_index":1266,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["42",{"_index":1125,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["5",{"_index":136,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["5.&#x505c;&#x6b62;&#xff0c;&#x7edf;&#x4e00;&#x5931;&#x8d25",{"_index":1096,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["5.10",{"_index":439,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["5.17",{"_index":438,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{}}}],["5.23",{"_index":1552,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["5.23）为一个类型参数类型。也不可能为一个类型参数创建新的实例，除非类型参数是泛型（第3.3",{"_index":1544,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["5部第7",{"_index":2165,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["6",{"_index":276,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["6.&#x505c;&#x6b62;&#xff0c;&#x7edf;&#x4e00;&#x6210;&#x529f",{"_index":1097,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["6.10",{"_index":2057,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{}}}],["6.3",{"_index":1208,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["6.3节），如果名字相同并且第一个参数统一（第3.5",{"_index":2166,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["6.4",{"_index":440,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{}}}],["6.4.10",{"_index":1275,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{}}}],["6.9",{"_index":1627,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["64",{"_index":98,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{}}}],["65",{"_index":343,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["66",{"_index":2258,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["7",{"_index":277,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["8",{"_index":117,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["8&#xff1a;&#x6ca1;&#x6709;&#x539f;&#x751f;&#x7684",{"_index":126,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["8.2",{"_index":914,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{}}}],["9",{"_index":370,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["9.5",{"_index":1238,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{}}}],["9和10",{"_index":982,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{}}}],["_implicitcastfield.myabstract_impl_.fromstr",{"_index":987,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["_implicitcastfield.myabstract_impl_.toarray(a",{"_index":988,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["a&#x201d;&#x5173;&#x7cfb;&#xff0c;&#x5373;&#x6bcf;&#x4e2a",{"_index":391,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["a&#x201d;&#xff08;subsumption&#xff0c;&#x5305;&#x542b;&#x67b6;&#x6784;&#xff0c;&#x6307;&#x7684;&#x662f;&#x7c7b;&#x7684;&#x7236;&#x5b50;&#x7ee7;&#x627f;&#x5173;&#x7cfb;&#xff09;&#xff1a;&#x4efb;&#x4f55",{"_index":297,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["a.a",{"_index":2047,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["a.a.b",{"_index":2050,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["a.b",{"_index":2049,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["a.equals(b",{"_index":174,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["a.getstr",{"_index":1211,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["a.iterator().next",{"_index":1495,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["a.length",{"_index":1494,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["a.tob",{"_index":992,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["a/a.hx",{"_index":2044,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["a:myabstractint",{"_index":1123,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["a[0",{"_index":1181,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["ab",{"_index":1121,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["abov",{"_index":1368,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["absenc",{"_index":1842,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["abstract",{"_index":979,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["abstractint",{"_index":1323,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["accept",{"_index":1347,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["access",{"_index":615,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["accordingli",{"_index":1554,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["achiev",{"_index":662,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["actual",{"_index":1328,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["actual:t",{"_index":1565,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["ad",{"_index":1001,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["add",{"_index":1723,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["addit",{"_index":684,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["addition",{"_index":1682,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["address",{"_index":2311,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["admit",{"_index":1038,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["advent",{"_index":1399,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["afterward",{"_index":2099,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["ag",{"_index":668,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["again",{"_index":1657,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["against",{"_index":1814,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["algorithm",{"_index":1033,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["alia",{"_index":2251,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["allow",{"_index":607,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["allowed&#x201d;&#x3002;&#x3010;&#x73af;&#x5883;&#xff1a;hax",{"_index":167,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["allowed”。【环境：hax",{"_index":146,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{}}}],["altern",{"_index":713,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["although",{"_index":1819,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["ambigu",{"_index":1048,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["amp",{"_index":173,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["amp;&amp",{"_index":220,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["angl",{"_index":1531,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["anoth",{"_index":1000,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["answer",{"_index":1885,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["anyth",{"_index":1340,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["api",{"_index":463,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{}}}],["api&#x4e2d;&#x90e8;&#x5206;&#x4f7f;&#x7528;&#x4e86",{"_index":956,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["apos;str&apo",{"_index":1871,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["appar",{"_index":1389,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["apparently,an",{"_index":1691,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["appli",{"_index":1770,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["appropri",{"_index":1008,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["argument",{"_index":323,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["array",{"_index":691,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["array&#x3002;&#x5b83;&#x7684",{"_index":1246,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["array&#x3002;&#x8fd9;&#x4f7f;&#x7684;&#x63a8;&#x9001;&#x53e6;&#x4e00;&#x4e2a;&#x517c;&#x5bb9;base&#x7684;&#x7c7b;&#x578b;&#xff08;otherchild&#xff09;&#x5230;&#x4e86;&#x6570;&#x7ec4;&#x3002;&#x7136;&#x800c;&#xff0c;&#x6211;&#x4eec;&#x539f;&#x59cb;&#x7684;&#x5f15;&#x7528",{"_index":1742,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["array&#x7c7b;&#x578b;&#xff0c;&#x5f53;&#x6211;&#x4eec;&#x5728;&#x8fed;&#x4ee3;&#x5b83;&#x7684;&#x4e00;&#x4e2a;&#x5143;&#x7d20;&#x7684;&#x65f6;&#x5019;&#x9047;&#x5230",{"_index":1744,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["array&#xff0c;&#x5373;&#x4f7f",{"_index":1735,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["array&#xff0c;&#x6240;&#x4ee5;&#x5143;&#x7d20;&#x7c7b;&#x578b;&#x662f",{"_index":2022,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["array&#xff1a",{"_index":1584,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["arrayaccess",{"_index":1166,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["arraybas",{"_index":1688,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["arraychild",{"_index":1687,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["arrayinstance.push(&#x201c;foo&#x201d",{"_index":1591,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["arrayinstance.push(foo",{"_index":1534,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["arrayinstance.push(“foo",{"_index":1543,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["arrayint",{"_index":1022,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["arraystr",{"_index":1501,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["arrayunknown0",{"_index":2100,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["arraywrit",{"_index":1168,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["array。这使的推送另一个兼容base的类型（otherchild",{"_index":1702,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["as3",{"_index":64,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{}}}],["aspect",{"_index":1404,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["assign",{"_index":641,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["assum",{"_index":1550,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["astr",{"_index":1175,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["att",{"_index":817,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["att.ag",{"_index":821,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["att.incom",{"_index":823,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["att.nam",{"_index":819,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["attempt",{"_index":1572,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["attribut",{"_index":1629,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["augment",{"_index":1336,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["avail",{"_index":2150,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["available,resolv",{"_index":2158,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["avoid",{"_index":1047,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["a”（subsumpt",{"_index":284,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{}}}],["b",{"_index":221,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["b&#x3002;&#x5f53;&#x4e24;&#x8005;&#x4e2d;&#x6709;&#x4e00;&#x4e2a",{"_index":1911,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["b&#xff0c;&#x5e76;&#x4e14;&#x81f3;&#x5c11;&#x5b83;&#x4eec;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x4e3a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x65f6;&#xff0c;&#x9009;&#x62e9;&#x7684;&#x89c4;&#x5219;&#x5f88;&#x7b80;&#x5355;&#xff1a",{"_index":1087,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["b&#xff0c;&#x7c7b;&#x578b",{"_index":1930,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["b.getstr",{"_index":1213,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["b.toc",{"_index":993,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["b:myabstractint",{"_index":1124,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["back",{"_index":1015,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["bad",{"_index":1711,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["balanc",{"_index":1982,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["bar",{"_index":321,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["base",{"_index":1685,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["bases.push",{"_index":1700,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["basic",{"_index":1398,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["be",{"_index":697,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["becom",{"_index":1024,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["befor",{"_index":1365,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["behavior",{"_index":1337,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["between",{"_index":1761,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["binari",{"_index":1580,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["bind",{"_index":1537,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["binop",{"_index":2225,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["block",{"_index":2242,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["blue",{"_index":426,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["blurri",{"_index":2315,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["bodi",{"_index":1358,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{}}}],["bool",{"_index":172,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["bool&#xff0c;float",{"_index":263,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["bool，float",{"_index":253,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html":{}}}],["boost",{"_index":1636,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["both",{"_index":1030,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["bottom",{"_index":2167,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["bottommost",{"_index":2233,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["bound",{"_index":1536,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["brace",{"_index":1345,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["bracket",{"_index":1532,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["brie&#xfb02;i",{"_index":1936,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["brieﬂi",{"_index":1890,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{}}}],["bug",{"_index":1174,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{}}}],["bug&#xff0c;&#x68c0;&#x67e5",{"_index":1198,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["c",{"_index":66,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["c++&#xff0c;java&#xff0c;c#&#xff0c;neko&#xff0c;flash&#xff1a;32&#x4f4d;&#x5e26;&#x7b26;&#x53f7;&#x6574;&#x6570;&#x6709;&#x901a;&#x5e38;&#x7684;&#x6ea2;&#x51fa;&#x60ef;&#x4f8b;&#x3002",{"_index":124,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["c++，java，c#，neko，flash：32",{"_index":115,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{}}}],["c.intfield",{"_index":892,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["c.present",{"_index":890,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["c.resolvem",{"_index":896,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["c.stringfield",{"_index":891,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["c1",{"_index":2256,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["c2",{"_index":2257,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["call",{"_index":1005,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["care",{"_index":1403,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["case",{"_index":431,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["cast",{"_index":996,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["cast&#xff08;&#x7b2c;5.23&#x8282;&#xff09;&#x7834;&#x574f;&#x4e86;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#xff0c;&#x56e0;&#x6b64;&#x5141;&#x8bb8;&#x4e86;&#x6ce8;&#x91ca;&#x884c;&#x540e;&#x7684;&#x8d4b;&#x503c;&#x3002;&#x6211;&#x4eec;&#x4fdd;&#x5b58;&#x4e00;&#x4e2a;&#x5f15;&#x7528",{"_index":1740,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["cast（第5.23",{"_index":1701,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["caus",{"_index":1406,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["certain",{"_index":1902,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["chang",{"_index":2094,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["charact",{"_index":2160,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["charat(k",{"_index":1177,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["charat(k).touppercas",{"_index":1179,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["check",{"_index":1504,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["checker",{"_index":1699,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["chid1",{"_index":1818,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["child",{"_index":1405,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["child&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5230;base&#x3002;&#x539f;&#x56e0;&#x53ef;&#x80fd;&#x6bd4;&#x8f83;&#x610f;&#x5916;&#xff1a;&#x56e0;&#x4e3a",{"_index":1736,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["child1",{"_index":1815,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["child2",{"_index":1816,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["children",{"_index":1686,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["child可以被分配到bas",{"_index":1690,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["class",{"_index":137,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["class&#x201d",{"_index":1459,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["class,an",{"_index":1801,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["class/funct",{"_index":1632,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["classes,it",{"_index":1795,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["clean",{"_index":1373,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["clear",{"_index":1841,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["clearli",{"_index":1849,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["code",{"_index":7,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["color",{"_index":423,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["combin",{"_index":1633,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["come",{"_index":1681,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["comma",{"_index":1530,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["comment",{"_index":1703,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["common",{"_index":1813,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["commut",{"_index":1114,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["compat",{"_index":701,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["compil",{"_index":1331,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["complet",{"_index":1017,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["compon",{"_index":1727,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["compound",{"_index":1726,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["con&#xfb02;ict",{"_index":2288,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["concis",{"_index":1372,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["concret",{"_index":1334,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["conform",{"_index":1341,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["consequ",{"_index":1551,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["consid",{"_index":608,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["consist",{"_index":2319,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["console.log(_abstractoperatoroverload.myabstract_impl_.repeat(a",{"_index":1113,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["console.log(a",{"_index":1327,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["console.log(map",{"_index":1173,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["constant",{"_index":2156,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["constrain",{"_index":1413,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["constraint",{"_index":1499,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["construct",{"_index":1649,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["constructor",{"_index":1346,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["contain",{"_index":1396,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["context",{"_index":1384,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["continu",{"_index":2081,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["contravari",{"_index":1730,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["contribut",{"_index":1879,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["control",{"_index":2058,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["conveni",{"_index":1498,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["convers",{"_index":1037,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["conﬂict",{"_index":2241,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["coretyp",{"_index":1290,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["correspond",{"_index":644,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}}}],["cost",{"_index":1638,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["cours",{"_index":1886,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["covari",{"_index":1724,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["creat",{"_index":698,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["critic",{"_index":1628,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["cross",{"_index":2245,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["curli",{"_index":1344,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["current",{"_index":760,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["d",{"_index":915,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["d.foo",{"_index":916,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["de&#xfb01;n",{"_index":1586,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["de&#xfb01;nit",{"_index":1594,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["deal",{"_index":1645,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["debugg",{"_index":373,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["declar",{"_index":637,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["default",{"_index":690,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["defin",{"_index":633,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["denot",{"_index":696,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["depend",{"_index":2146,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["deriv",{"_index":1338,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["describ",{"_index":635,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["design",{"_index":1043,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["detail",{"_index":1314,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["determin",{"_index":1999,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["detriment",{"_index":1626,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["deﬁn",{"_index":1529,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["deﬁnit",{"_index":1546,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{}}}],["dif&#xfb01;cult",{"_index":1987,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["differ",{"_index":1018,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["difﬁcult",{"_index":1975,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{}}}],["direct",{"_index":999,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["directli",{"_index":2056,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["disambigu",{"_index":2253,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["disappear",{"_index":1374,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["distinct",{"_index":1631,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["dito",{"_index":820,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["doc",{"_index":2,"title":{},"body":{"index.html":{},"index.html#关于本文档":{}}}],["document",{"_index":2080,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["dot",{"_index":2331,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["down",{"_index":1995,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["due",{"_index":1014,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["duplic",{"_index":2323,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["dynam",{"_index":546,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["dynamic&#x3002",{"_index":2024,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["dynamic&#xff08;&#x7b2c;2.7&#x8282;&#xff09",{"_index":827,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["dynamic&#xff08;&#x7b2c;2.7&#x8282;&#xff09;&#x4e2d;&#x63d0;&#x5230;&#x7684;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x62d2;&#x7edd;[1,&#x201d;foo&#x201d;]&#x56e0;&#x4e3a;&#x5b83;&#x4e0d;&#x80fd;&#x786e;&#x5b9a;&#x5143;&#x7d20;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x4f7f;&#x7528;&#x81ea;&#x4e0a;&#x800c;&#x4e0b;&#x7684;&#x63a8;&#x65ad;&#xff0c;&#x8fd9;&#x4e2a;&#x95ee;&#x9898;&#x53ef;&#x4ee5;&#x88ab;&#x514b;&#x670d;&#xff1a",{"_index":2018,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["dynamic&#xff08;&#x7b2c;2.7&#x8282;&#xff09;&#x7684;&#x7c7b;&#x578b;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x4e00;&#x4e2a;&#x5355;&#x5f62;&#x65f6;&#xff0c;&#x8fd9;&#x4e2a;&#x5355;&#x5f62;&#x4fbf;&#x4f1a;&#x53d8;&#x5f62;&#xff08;morph&#xff09;&#x4e3a;&#x8be5;&#x7c7b;&#x578b;&#xff0c;&#x5e76;&#x4e14;&#x5728;&#x6b64;&#x4e4b;&#x540e;&#x5b83;&#x5c31;&#x4e0d;&#x80fd;&#x518d;&#x53d8;&#x5f62;&#x4e3a;&#x53e6;&#x5916;&#x7684;&#x7c7b;&#x578b;&#x4e86;&#x3002;&#x8fd9;&#x4e00;&#x7279;&#x6027;&#x6b63;&#x5982;&#x5176;&#x540d;&#x5b57;&#x4e2d;&#x7684",{"_index":2124,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["dynamic&#xff0c;&#x8fd9;&#x4f1a;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x88ab;&#x4fa6;&#x6d4b;&#x5230;&#x3002",{"_index":943,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["dynamic&#xff0c;&#x8fd9;&#x53ef;&#x4ee5;&#x5728;&#x5982;&#x4e0b;&#x4f8b;&#x5b50;&#x4e2d;&#x5e26;&#x6765;&#x4ee4;&#x4eba;&#x60ca;&#x559c;&#x7684;&#x7ed3;&#x679c;&#xff1a",{"_index":960,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["dynamic（第2.7",{"_index":816,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{}}}],["dynamic（第2.7节）中提到的，编译器拒绝[1,”foo",{"_index":1996,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{}}}],["dynamic（第2.7节）的类型被统一为一个单形时，这个单形便会变形（morph",{"_index":2095,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{}}}],["e",{"_index":1896,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["e.g",{"_index":1542,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["each",{"_index":715,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["eagerli",{"_index":2250,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["easi",{"_index":1683,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["ec",{"_index":464,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["effect",{"_index":2078,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["eld",{"_index":1528,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["element",{"_index":1713,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["elsewher",{"_index":1408,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["emit",{"_index":1630,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["employ",{"_index":618,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["empti",{"_index":1410,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["emptyt(it",{"_index":1764,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["en",{"_index":465,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["enclos",{"_index":1342,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["encount",{"_index":1712,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["end",{"_index":1493,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["entir",{"_index":2243,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["enum",{"_index":422,"title":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{}},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["enum&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":1602,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["enum&#xff08;&#x7b2c;2.4&#x8282;&#xff09;&#x58f0;&#x660e;&#xff0c;&#x56e0;&#x6b64;&#x5728;&#x8fd9;&#x4e2a;&#x6a21;&#x5757;&#x88ab;&#x5bfc;&#x5165;&#x4e4b;&#x540e;&#x5c31;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x4e86;&#x3002;&#x5982;&#x679c;&#x6211;&#x4eec;&#x53ea;&#x8981;&#x5bfc;&#x5165;&#x6a21;&#x5757;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7c7b;&#x578b;&#xff0c;&#x4f8b;&#x5982;&#xff0c;import",{"_index":2276,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["enumcolor",{"_index":467,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["enumvalu",{"_index":462,"title":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["enum被导入（直接或作为模块的一部分被导入），所有它的enum构造函数（第2.4.1",{"_index":2232,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["enum（第2.4节）声明，因此在这个模块被导入之后就可以使用了。如果我们只要导入模块中的一个特定类型，例如，import",{"_index":2227,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["enum），它实际上是一个代数数据类型（adt",{"_index":521,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html":{}}}],["equal",{"_index":1562,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["equal,th",{"_index":2322,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["equalst(expected:t",{"_index":1564,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["error",{"_index":466,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["error,&#x503c;&#x4e0d;&#x662f",{"_index":832,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["essenc",{"_index":2312,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["evalu",{"_index":2090,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["even",{"_index":1621,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["everyth",{"_index":1357,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["exact",{"_index":1648,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["exampl",{"_index":704,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["exclus",{"_index":2262,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["expect",{"_index":1566,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["expected&#x2019",{"_index":1607,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["explain",{"_index":1315,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["explan",{"_index":2085,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["explicit",{"_index":1539,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["explicitli",{"_index":1538,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["expr",{"_index":2248,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["expr:exprdef",{"_index":2249,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["exprdef",{"_index":2043,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["express",{"_index":614,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["expressions(5)intheformoffoo(),foo",{"_index":2141,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["extend",{"_index":275,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["extens",{"_index":681,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["extern",{"_index":1400,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["f",{"_index":1180,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["f&#xff0c;&#x4f7f;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":2304,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["f(65",{"_index":2260,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["f(66",{"_index":2261,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["f(66)&#x3002;&#x8fbe;&#x5230;&#x548c;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x4e00;&#x6837;&#x7684;&#x4f7f;&#x7528;&#xff0c;&#x8fd9;&#x4e2a;&#x65b9;&#x6cd5;&#x662f;&#x7f16;&#x8bd1;&#x65f6;&#x529f;&#x80fd;&#xff0c;&#x4e0d;&#x4f1a;&#x6709;&#x8fd0;&#x884c;&#x65f6;&#x5f00;&#x9500;&#x3002",{"_index":2305,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["fact",{"_index":1356,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["fail",{"_index":1041,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["fals",{"_index":217,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["featur",{"_index":1332,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["few",{"_index":1990,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["field",{"_index":144,"title":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["final",{"_index":640,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}}}],["fine",{"_index":1126,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["first",{"_index":1012,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["flash",{"_index":541,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["flash&#xff0c;c++&#xff0c;java",{"_index":560,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["flash，c++，java",{"_index":539,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{}}}],["float",{"_index":96,"title":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{}},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["float/int",{"_index":171,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["follow",{"_index":636,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["foo",{"_index":319,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["foo()&#xff0c;foo=1&#xff0c;foo.field&#x7b49;&#x8fd9;&#x4e9b;&#x662f;&#x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5&#x7ae0;&#xff09;&#x3002;&#x7279;&#x522b;&#x662f;&#x6700;&#x540e;&#x4e00;&#x4e2a;&#x5305;&#x62ec;&#x7c7b;&#x4f3c",{"_index":2172,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["foo()，foo=1，foo.field等这些是表达式（第5",{"_index":2135,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["foofoofoo",{"_index":1111,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["foopost",{"_index":1119,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["form",{"_index":2332,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["forward",{"_index":1229,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["forward(push",{"_index":1230,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["found",{"_index":1272,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["four",{"_index":2320,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["fromcharcod",{"_index":2255,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["fromstr",{"_index":983,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["fulfil",{"_index":706,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["func",{"_index":1845,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["function",{"_index":140,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["function&#x2019;",{"_index":1615,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["function,with",{"_index":2089,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["function’",{"_index":1567,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["further",{"_index":1028,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["furthermor",{"_index":1362,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["g",{"_index":428,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["gener",{"_index":1369,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["getcolor",{"_index":429,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["getint1",{"_index":1182,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["getint1(k:int",{"_index":1176,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["getint2(k:int",{"_index":1178,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["getstr",{"_index":1210,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["getter",{"_index":1171,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["give",{"_index":1576,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["given",{"_index":682,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["go",{"_index":1036,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["good",{"_index":1981,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["greater",{"_index":694,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["green",{"_index":425,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["gt",{"_index":1122,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["guarante",{"_index":2263,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["halt",{"_index":2157,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["hand",{"_index":1848,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["handl",{"_index":1393,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["happen",{"_index":705,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["hasa",{"_index":1897,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["have",{"_index":1722,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{}}}],["hax",{"_index":4,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["haxe&#x4e2d;&#x5f53;&#x4ee5;&#x4e0b;&#x60c5;&#x51b5;&#x53d1;&#x751f;&#x65f6;&#x5141;&#x8bb8;&#x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316;&#xff1a",{"_index":1776,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["haxe&#x5141;&#x8bb8;&#x8bb8;&#x591a;&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x5316;&#xff0c;&#x5c31;&#x50cf;&#x7c7b;&#x5b57;&#x6bb5;&#xff08;&#x7b2c;4&#x7ae0;&#xff09;&#x548c;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff08;&#x7b2c;2.4.1&#x8282;&#xff09;&#x3002;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x901a;&#x8fc7;&#x95ed;&#x5408;&#x7684;&#x5c16;&#x62ec;&#x53f7;&#x56ca;&#x62ec;&#x4ee5;&#x9017;&#x53f7;&#x5206;&#x9694;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x540d;&#x6765;&#x5b9a;&#x4e49;&#x3002;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x4f8b;&#x5b50;&#x6765;&#x81ea;&#x4e8e;haxe&#x6807;&#x51c6;&#x5e93;&#xff0c;&#x5c31;&#x662f",{"_index":1583,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["haxe.d",{"_index":2321,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["haxe.ds.stringmap",{"_index":2145,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["haxe.ds.stringmap&#x7684;&#x6a21;&#x5757;&#x8def;&#x5f84;&#xff0c;haxe&#x662f;&#x4e00;&#x4e2a;&#x7edd;&#x5bf9;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#x3002",{"_index":2173,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["haxe.ds.stringmap.stringmap",{"_index":2317,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["haxe.ds.stringmap.stringmapint",{"_index":2314,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["haxe.ds.stringmapint",{"_index":2313,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["haxe.ds.stringmap的模块路径，hax",{"_index":2136,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["haxe.int32",{"_index":119,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["haxe.int64",{"_index":120,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["haxe.json.parse(jsondata",{"_index":919,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["haxe.macro",{"_index":2247,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["haxe.macro.expr",{"_index":2042,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["haxe.macro.expr,and",{"_index":2229,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["haxe.macro.expr.exprdef",{"_index":2230,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["haxe.macro.expr.exprdef&#xff0c;&#x7a0b;&#x5e8f;&#x4f1a;&#x7f16;&#x8bd1;&#x5931;&#x8d25;&#xff0c;&#x63d0;&#x793a;binop&#x7c7b;&#x6ca1;&#x6709;&#x627e;&#x5230;&#x3002",{"_index":2277,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["haxe.macro.expr.exprdef，程序会编译失败，提示binop",{"_index":2228,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["haxe.macro.exprdef",{"_index":2053,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["haxe.templ",{"_index":2007,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["haxe.template在这里使用的，来确定mak",{"_index":2006,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{}}}],["haxe3.2.0",{"_index":468,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["haxe_v",{"_index":1488,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["haxe中，我们可以使用结构子类型化（第3.5.2",{"_index":1714,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["haxe代码组织在模块中，使用路径定位。本质上讲，每个.hx",{"_index":2309,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{}}}],["haxe允许许多类型的参数化，就像类字段（第4章）和枚举构造函数（第2.4.1节）。类型参数通过闭合的尖括号囊括以逗号分隔的类型参数名来定义。一个简单的例子来自于hax",{"_index":1525,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["haxe的局部变量，它们会会阻挡整个hax",{"_index":2239,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["heart",{"_index":1877,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["hello",{"_index":133,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["help",{"_index":1578,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["here",{"_index":8,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["here,th",{"_index":2002,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["hexo",{"_index":1,"title":{},"body":{"index.html":{},"index.html#关于本文档":{}}}],["hint",{"_index":1962,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["hold",{"_index":1704,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["however,our",{"_index":1708,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["httpstatu",{"_index":1262,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["httpstatus.notfound",{"_index":1268,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["hx",{"_index":2034,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["i&#x4e3a;&#x53ef;&#x8bbf;&#x95ee;&#x7684;&#xff0c;&#x89e3;&#x6790;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":2190,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["i&#x548c;&#x7c7b;&#x578b;&#x540d;&#x4e3a;i&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":2211,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["i&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":2193,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["i.",{"_index":1351,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["ia",{"_index":1461,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["identi&#xfb01;",{"_index":2174,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["identifi",{"_index":611,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["identiﬁ",{"_index":2140,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{}}}],["ieee",{"_index":97,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{}}}],["if(5.16",{"_index":218,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["if/els",{"_index":1822,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["ignor",{"_index":1696,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["immens",{"_index":1880,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["impact",{"_index":1772,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["impl",{"_index":1209,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["implement",{"_index":368,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["implemented!&#x2019",{"_index":1159,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["implements,th",{"_index":1802,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["implementsdynam",{"_index":888,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["impli",{"_index":1568,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["implicit",{"_index":995,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["implicitli",{"_index":1540,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["import",{"_index":1796,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["import&#x53ef;&#x4ee5;&#x5bfc;&#x5165;&#x4e00;&#x4e2a;&#x5305;&#x4e2d;&#x6240;&#x6709;&#x7684;&#x6a21;&#x5757;&#x3001;&#x6a21;&#x5757;&#x4e2d;&#x7684;&#x6240;&#x6709;&#x7c7b;&#x578b;&#x6216;&#x8005;&#x7c7b;&#x578b;&#x4e2d;&#x7684;&#x6240;&#x6709;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x3002;&#x901a;&#x8fc7;&#x4ee5;&#x4e0b;&#x4f8b;&#x5b50;&#x91cd;&#x70b9;&#x4e86;&#x89e3;&#x6b64;&#x7c7b;&#x5bfc;&#x5165;&#x64cd;&#x4f5c;&#x53ea;&#x80fd;&#x8986;&#x76d6;&#x540c;&#x7ea7;&#x7684;&#x8bbf;&#x95ee;&#xff08;onli",{"_index":2292,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["import&#xff08;&#x7b2c;3.7.2&#x8282;&#xff09;&#xff0c;&#x901a;&#x5e38;&#x5141;&#x8bb8;&#x7701;&#x7565;&#x8def;&#x5f84;&#x7684;&#x5305;&#x90e8;&#x5206;&#x3002;&#x8fd9;&#x53ef;&#x80fd;&#x5bfc;&#x81f4;&#x4e0d;&#x53d7;&#x9650;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#xff0c;&#x800c;&#x7406;&#x89e3;&#x89e3;&#x6790;&#x987a;&#x5e8f;&#xff08;&#x7b2c;3.7.3&#x8282;&#xff09;&#x662f;&#x5fc5;&#x8981;&#x7684;&#x3002",{"_index":2348,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["import(3.7.2",{"_index":2327,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["import可以导入一个包中所有的模块、模块中的所有类型或者类型中的所有静态字段。通过以下例子重点了解此类导入操作只能覆盖同级的访问（onli",{"_index":2244,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["import（第3.7.2节），通常允许省略路径的包部分。这可能导致不受限的标识符，而理解解析顺序（第3.7.3",{"_index":2326,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{}}}],["imposs",{"_index":1412,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["in&#xfb02;uenc",{"_index":2013,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["includ",{"_index":2144,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["incompat",{"_index":1717,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["inde",{"_index":1354,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["indic",{"_index":1500,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["individu",{"_index":1046,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["infer",{"_index":1541,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["inference(3.6",{"_index":1317,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["inference(section3.6",{"_index":1834,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{}}}],["inform",{"_index":2009,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["initi",{"_index":1968,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["inlin",{"_index":981,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["insert",{"_index":1023,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["insid",{"_index":1545,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["instanc",{"_index":1409,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["instanti",{"_index":1363,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["instead",{"_index":620,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["int",{"_index":99,"title":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{},"2.类型/2.1.基本类型/2.1.2.溢出.html":{},"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["int&#x201d;&#x7684;&#x9519;&#x8bef",{"_index":1163,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["int&#x3002;&#x5b83;&#x4eec;&#x5728;&#x8bed;&#x53e5;&#x4e2d;&#x53ef;&#x4ee5;&#x7b80;&#x5355;&#x7684;&#x901a;&#x8fc7;&#x503c;&#x8bc6;&#x522b;&#xff1a",{"_index":264,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["int&#xff08;&#x4e0d;&#x80fd;&#x4e3a;&#x7a7a;&#xff09",{"_index":329,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["int&#xff09;&#xff0c;&#x800c;&#x53cd;&#x8fc7;&#x6765;&#x5219;&#x4e0d;&#x884c;&#xff1a;&#x5206;&#x914d;&#x4e00;&#x4e2a",{"_index":111,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["interest",{"_index":1366,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["interfac",{"_index":363,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["intern",{"_index":1387,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{}}}],["introduc",{"_index":1892,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["intuit",{"_index":1888,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["invari",{"_index":1689,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["invoc",{"_index":1558,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["invok",{"_index":1502,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["involv",{"_index":1840,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["inﬂuenc",{"_index":1992,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{}}}],["irrelev",{"_index":1851,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["issu",{"_index":1407,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["it.iterator().hasnext",{"_index":1766,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["iter",{"_index":1462,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["iterablestr",{"_index":1486,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["iterablet",{"_index":686,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["iterablet):bool",{"_index":1765,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["iterablewithlength",{"_index":693,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["iterablewithlengthandpush",{"_index":712,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["iterablewithlengthandpusht",{"_index":710,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["iterablewithlengtht",{"_index":685,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["itself",{"_index":1971,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["i和类型名为i",{"_index":2163,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["i通过一个小写字母开始，跳到11",{"_index":2153,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["java",{"_index":375,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["javascript",{"_index":9,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["javascript&#xff0c;&#x5b83;&#x5f80;&#x5f80;&#x53ef;&#x4ee5;&#x751f;&#x6210;&#x7b80;&#x6d01;&#x5e72;&#x51c0;&#x7684;&#x4ee3;&#x7801;&#x3002;&#x7f16;&#x8bd1;&#x4e0a;&#x9762;&#x7684;&#x4ee3;&#x7801;&#xff08;&#x4f7f;&#x7528",{"_index":1436,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["javascript&#xff0c;php&#xff0c;neko",{"_index":565,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["javascript，php，neko",{"_index":540,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{}}}],["js",{"_index":1325,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["json",{"_index":918,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["json.length",{"_index":922,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["json.pars",{"_index":923,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["json:dynam",{"_index":925,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["json[0",{"_index":924,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["jsondata",{"_index":917,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["k",{"_index":1167,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["key",{"_index":606,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["keyword",{"_index":1339,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["kind",{"_index":998,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["know",{"_index":1647,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["known",{"_index":1395,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["lack",{"_index":1977,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["lambda",{"_index":1763,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["languag",{"_index":1624,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["larger",{"_index":1639,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["last",{"_index":2143,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["later",{"_index":1313,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["latter",{"_index":1496,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["le",{"_index":2037,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{}}}],["le,it",{"_index":2219,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["lead",{"_index":2329,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["learn",{"_index":1378,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["left",{"_index":1375,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["length",{"_index":689,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["less",{"_index":1728,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["level",{"_index":2164,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["level&#xff09;&#xff1a",{"_index":2293,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["librari",{"_index":1533,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["limit",{"_index":1970,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["line",{"_index":1011,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["line,th",{"_index":2224,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["liter",{"_index":605,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["local",{"_index":1963,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["look",{"_index":1026,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["lot",{"_index":1771,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["lower",{"_index":2159,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["lvalu",{"_index":1556,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["macro.expr.exprdef",{"_index":2041,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["made",{"_index":660,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["main",{"_index":5,"title":{},"body":{"index.html":{},"index.html#关于本文档":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["main.hx",{"_index":2046,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["main.main",{"_index":1237,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["main.method_int",{"_index":1658,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["main.method_str",{"_index":1659,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["main.printstatu",{"_index":1274,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["main.printstatus(statu",{"_index":1273,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["make",{"_index":1411,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["make()&#xff0c;&#x6240;&#x4ee5;&#x6211;&#x4eec;&#x77e5;&#x9053;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x4f1a;&#x5206;&#x914d;&#x5230;&#x53d8;&#x91cf;&#x3002;&#x5229;&#x7528;&#x8fd9;&#x4e2a;&#x4fe1;&#x606f;&#xff0c;&#x53ef;&#x4ee5;&#x5206;&#x522b;&#x7ed1;&#x5b9a",{"_index":2029,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["make(),so",{"_index":2008,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["maket:constructible():t",{"_index":2005,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["manag",{"_index":1820,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["mangl",{"_index":1634,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["manual",{"_index":1961,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["map",{"_index":1165,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["mark",{"_index":666,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["match",{"_index":2155,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["math.random",{"_index":2237,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["mean",{"_index":1009,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["measur",{"_index":1485,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["measurable(a:t",{"_index":1490,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["measurable)(a:t",{"_index":1492,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["mechan",{"_index":2088,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["member",{"_index":1385,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["mention",{"_index":1364,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["messag",{"_index":1563,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["metadata",{"_index":670,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["method",{"_index":1021,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["methodnotallow",{"_index":1265,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["methodstring(x",{"_index":1574,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["methodt(t:t",{"_index":1656,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["minim",{"_index":1901,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["mismatch",{"_index":1573,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["mix",{"_index":1997,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["mode",{"_index":2161,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["modi&#xfb01;",{"_index":2076,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["modi&#xfb01;cation,th",{"_index":1748,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["modifi",{"_index":1335,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["modiﬁ",{"_index":2054,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{}}}],["modiﬁcation,th",{"_index":1715,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["modul",{"_index":2036,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["mono",{"_index":2096,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["mono&#xff08;&#x5355;&#x4e00;&#x7684;&#xff09;&#x6240;&#x8868;&#x8fbe;&#x7684;&#x4e00;&#x6837;&#x3002",{"_index":2125,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["monomorph",{"_index":1310,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["monomorph(2.9",{"_index":1833,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{}}}],["more",{"_index":1798,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["morph",{"_index":1311,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["msg",{"_index":1269,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["multipl",{"_index":708,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["mutat",{"_index":1884,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["myabstract",{"_index":980,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["myabstract.j",{"_index":1326,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["myabstractint",{"_index":1120,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["myabstractstr",{"_index":1212,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["myarray",{"_index":1232,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["myarray&#x5b9a;&#x4e49;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x6dfb;&#x52a0;&#x51b2;&#x7a81;&#x7c7b;&#x578b;&#x7684;&#x65b9;&#x6cd5;&#xff0c;&#x56e0;&#x6b64;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x534f;&#x53d8;&#x7684;&#x3002",{"_index":1754,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["myarray&#x7c7b;&#x578b;&#xff0c;myarray",{"_index":1751,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["myarray.length",{"_index":1236,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["myarray.pop",{"_index":1234,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["myarray.push",{"_index":1233,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["myarrayint",{"_index":1235,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["myarrayt",{"_index":1720,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["myarray类型，myarray",{"_index":1721,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{}}}],["mybutton",{"_index":65,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{}}}],["mybutton:myspecialbutton",{"_index":61,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{}}}],["myspecialbutton",{"_index":63,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{}}}],["mystructur",{"_index":748,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["myvalu",{"_index":1641,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["myvalue&#x548c;myvlu",{"_index":1671,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["myvalue&#xff0c;&#x56e0;&#x4e3a;&#x6211;&#x4eec;&#x901a;&#x5e38;&#x8ba9;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6&#x8282;&#xff09;&#x5904;&#x7406;&#x5b83;&#x3002;&#x5c3d;&#x7ba1;&#x5982;&#x6b64;&#xff0c;&#x5b83;&#x786e;&#x5b9e;&#x9700;&#x8981;&#x5728;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#x4e0b;&#x88ab;&#x9700;&#x8981;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x5fc5;&#x987b;&#x4e86;&#x89e3;&#x6cdb;&#x578b;&#x7c7b;&#x7684;&#x51c6;&#x786e;&#x7c7b;&#x578b;&#x4e00;&#x7ecf;&#x6784;&#x5efa;&#x3002;javascript&#x8f93;&#x51fa;&#x663e;&#x793a;&#x7ed3;&#x679c;&#xff1a",{"_index":1669,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["myvalue_int",{"_index":1653,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["myvalue_str",{"_index":1652,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["myvalue和myvlu",{"_index":1654,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{}}}],["myvalue，因为我们通常让类型推断（第3.6节）处理它。尽管如此，它确实需要在这种情况下被需要。编译器必须了解泛型类的准确类型一经构建。javascript",{"_index":1642,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{}}}],["n",{"_index":547,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["n/a",{"_index":170,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["name",{"_index":664,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["nan",{"_index":542,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["natur",{"_index":1623,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["nd",{"_index":1900,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{}}}],["necessari",{"_index":1768,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["need",{"_index":1966,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["never",{"_index":1729,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["new",{"_index":62,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["new&#xff08;&#x7b2c;5.12&#x8282;&#xff09",{"_index":359,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["new（第5.12",{"_index":344,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{}}}],["next",{"_index":2093,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["nice",{"_index":1401,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["nicola",{"_index":749,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["non",{"_index":1352,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["nonetheless",{"_index":1646,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["notat",{"_index":603,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["notfound",{"_index":1263,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["notnul",{"_index":1291,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["now",{"_index":2086,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["null",{"_index":223,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["nullbool",{"_index":545,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["nullfloat",{"_index":544,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["nullint",{"_index":543,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["nullt",{"_index":320,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["nullt&#x7c7b;&#x578b",{"_index":331,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["number",{"_index":1527,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["object",{"_index":222,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["object.field",{"_index":224,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["obviou",{"_index":1025,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["obvious",{"_index":1390,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["occur",{"_index":1679,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["of&#xfb01;cial",{"_index":2110,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["ofﬁcial",{"_index":2087,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{}}}],["omit",{"_index":2222,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["on",{"_index":1034,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["onc",{"_index":642,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["onto",{"_index":1707,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["op",{"_index":1104,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["op(++a",{"_index":1115,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["op(a",{"_index":1105,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["op(a*b",{"_index":1112,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["opadd",{"_index":2226,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["open",{"_index":1359,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["oper",{"_index":695,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["opposit",{"_index":1844,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["opt",{"_index":322,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["optim",{"_index":1029,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["option",{"_index":659,"title":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["order",{"_index":700,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["organ",{"_index":2310,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["origin",{"_index":1706,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["otherchild",{"_index":1697,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["otherchild&#x5b9e;&#x4f8b;&#x5c31;&#x4f1a;&#x51fa;&#x73b0;&#x95ee;&#x9898;&#x3002",{"_index":1745,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["otherwis",{"_index":612,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["output",{"_index":1027,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["over",{"_index":1333,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["overcom",{"_index":2000,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["overhead",{"_index":2264,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["overrid",{"_index":289,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["overus",{"_index":1974,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["p",{"_index":342,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["pack1.pacen.modulename.typenam",{"_index":2330,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["pack1.pack2.packn.modulename.typenam",{"_index":2333,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["packag",{"_index":2045,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["package.modoule.typ",{"_index":2035,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["package.module.typ",{"_index":2040,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["paramet",{"_index":324,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["parameters,thes",{"_index":1547,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["parametr",{"_index":1526,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["parent",{"_index":1799,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["parenthes",{"_index":1343,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["pars",{"_index":1360,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["part",{"_index":609,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["particular",{"_index":1887,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["particularli",{"_index":1680,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["pass",{"_index":1503,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["path",{"_index":757,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["per",{"_index":1560,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["perform",{"_index":1625,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["permit",{"_index":1569,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["phonenumb",{"_index":669,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["php&#xff0c;js&#xff0c;flash",{"_index":125,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["php，js，flash",{"_index":116,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html":{}}}],["physic",{"_index":1361,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["pick",{"_index":2168,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["place",{"_index":1391,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["placeabl",{"_index":372,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["places,however,an",{"_index":1991,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["play",{"_index":2138,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["po",{"_index":751,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["point",{"_index":279,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["point.new",{"_index":287,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["point.z",{"_index":756,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["point2d",{"_index":717,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["point3",{"_index":278,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["point3d",{"_index":718,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["pop",{"_index":1231,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["portion",{"_index":1637,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["possibl",{"_index":601,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["post",{"_index":1117,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["pre",{"_index":1116,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["precis",{"_index":1382,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["prefix",{"_index":663,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["prefoo",{"_index":1118,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["present",{"_index":889,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["previou",{"_index":703,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["previous",{"_index":2083,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["print",{"_index":2092,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["printabl",{"_index":364,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["printstatu",{"_index":1271,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["printstatus(statu",{"_index":1270,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["prioriti",{"_index":2235,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["privat",{"_index":1394,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["problem",{"_index":1388,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["process",{"_index":1883,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["program",{"_index":1882,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["properti",{"_index":688,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["provid",{"_index":702,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["public",{"_index":139,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["purpos",{"_index":1767,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["push",{"_index":711,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["qualifi",{"_index":1019,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["question",{"_index":665,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["r",{"_index":434,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["random",{"_index":2238,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["rc.1",{"_index":148,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{}}}],["rc.1&#x3011",{"_index":168,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["read",{"_index":687,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["readabl",{"_index":1973,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["real",{"_index":1414,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["reason",{"_index":1579,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["recommend",{"_index":1980,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["recurs",{"_index":1969,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["red",{"_index":424,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["refer",{"_index":1705,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["reflect",{"_index":617,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["reflect.field",{"_index":599,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["reflect.setfield",{"_index":600,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["refus",{"_index":1998,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["relat",{"_index":1760,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["relev",{"_index":1678,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["rememb",{"_index":1797,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["reminisc",{"_index":1353,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["removed,lead",{"_index":2324,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["repeat",{"_index":1106,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["repo",{"_index":3,"title":{},"body":{"index.html":{},"index.html#关于本文档":{}}}],["repres",{"_index":1348,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["requir",{"_index":699,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["resolut",{"_index":2137,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["resolv",{"_index":893,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["respect",{"_index":1655,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["respectively.3.6.1",{"_index":2010,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{}}}],["respectively.3.6.1.&#x7531;&#x4e0a;&#x800c;&#x4e0b;&#x63a8;&#x65ad",{"_index":2032,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["restrict",{"_index":1718,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["result",{"_index":1622,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["result,th",{"_index":2055,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["retain",{"_index":1049,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["return",{"_index":435,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["revers",{"_index":1800,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["rgb",{"_index":436,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["rgb(r",{"_index":427,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["rgb(r,g,b",{"_index":432,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["rh",{"_index":1107,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["right",{"_index":1847,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["robust",{"_index":1881,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["rst",{"_index":1894,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["rule",{"_index":1002,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["run",{"_index":1329,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["runtim",{"_index":1349,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["rvalu",{"_index":1846,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["s",{"_index":798,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["s.add",{"_index":1109,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["s.tostr",{"_index":1110,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["safe",{"_index":1716,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["same",{"_index":634,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["save",{"_index":1960,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["second",{"_index":1570,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["section",{"_index":1316,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["see",{"_index":1367,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["seem",{"_index":1643,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["seen",{"_index":1891,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["select",{"_index":1032,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["semant",{"_index":1016,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["sens",{"_index":2220,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["separ",{"_index":714,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["serializ",{"_index":369,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["set",{"_index":1170,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["setter",{"_index":1172,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["sever",{"_index":1889,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["shall",{"_index":1377,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["short",{"_index":2325,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["shorten",{"_index":2221,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["shorter",{"_index":2252,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["shorthand",{"_index":2316,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["show",{"_index":1007,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["shown",{"_index":1010,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["signatur",{"_index":1979,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["similar",{"_index":1355,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["similarli",{"_index":1020,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["simpl",{"_index":1035,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["simpler",{"_index":2097,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["simplifi",{"_index":2084,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["singl",{"_index":1620,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["situat",{"_index":1821,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["size",{"_index":1640,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["someth",{"_index":1376,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["sometim",{"_index":1965,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["somewhat",{"_index":1693,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["somewher",{"_index":1392,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["soon",{"_index":2139,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["speak",{"_index":1993,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["speci&#xfb01;c",{"_index":1667,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["special",{"_index":1006,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["speciﬁc",{"_index":1635,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{}}}],["sring",{"_index":2102,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["standard",{"_index":661,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["start",{"_index":758,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["state",{"_index":2147,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["static",{"_index":138,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["statu",{"_index":1267,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["std.parseint",{"_index":989,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["std.parseint(",{"_index":984,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["step",{"_index":2162,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["still",{"_index":1709,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["sting",{"_index":1575,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["stop",{"_index":1039,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["str",{"_index":1852,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{}}}],["strict",{"_index":1650,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["string",{"_index":366,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["string&#x201d;&#x3002",{"_index":1921,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["string&#x548c",{"_index":2031,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["string&#x662f",{"_index":2027,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["string,yet",{"_index":1850,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["string.fromcharcod",{"_index":2259,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["stringbuf",{"_index":1108,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["stringmap",{"_index":2223,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["stringmap&#x3002;&#x6a21;&#x5757",{"_index":2272,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["structur",{"_index":604,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["sub",{"_index":1762,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["subsequ",{"_index":1899,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["subtyp",{"_index":1719,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["subtype1",{"_index":2048,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["subtype2",{"_index":2051,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["subtype3",{"_index":2052,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["subvert",{"_index":1698,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["succe",{"_index":1042,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["such",{"_index":616,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["suitabl",{"_index":1370,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["super",{"_index":282,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["super(x",{"_index":285,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["surpris",{"_index":1379,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["switch",{"_index":430,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["symbol",{"_index":716,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["syntax",{"_index":613,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["system",{"_index":1878,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["t",{"_index":692,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["t&#x5230",{"_index":2030,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["tabl",{"_index":1555,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["take",{"_index":2234,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["taken",{"_index":2240,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["target",{"_index":759,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["tell",{"_index":2103,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["templat",{"_index":2004,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["tend",{"_index":1371,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["term",{"_index":1381,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["test",{"_index":755,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["test(\"foo",{"_index":1487,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{}}}],["test(1,foo",{"_index":856,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["test(foo",{"_index":1507,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["test.main",{"_index":1651,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["testt:(iterablestr",{"_index":1491,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["testt:iterablestr",{"_index":1489,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["thefunction(2.6)typ",{"_index":1893,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["therefor",{"_index":2098,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["thetypeof",{"_index":1898,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["thing",{"_index":1710,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["think",{"_index":1380,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["third",{"_index":1571,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["though",{"_index":1692,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["through",{"_index":619,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["throughout",{"_index":2079,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["thu",{"_index":1386,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["time",{"_index":1330,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["time,typ",{"_index":1989,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["to&#x201d",{"_index":1927,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["toarray",{"_index":985,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["tob",{"_index":990,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["toc",{"_index":991,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["took",{"_index":1402,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["top",{"_index":1994,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["tostr",{"_index":365,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["trace",{"_index":141,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["transit",{"_index":1044,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["tri",{"_index":895,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["trigger",{"_index":1684,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["trivia",{"_index":1397,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["true",{"_index":216,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["true，false，this，super或者nul",{"_index":2152,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["turn",{"_index":1031,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["two",{"_index":997,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["type",{"_index":145,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["type(a",{"_index":1817,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["type(func",{"_index":1853,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["type(json",{"_index":920,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["type(test",{"_index":799,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["type(x",{"_index":2082,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["type,it",{"_index":1843,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["type.enumequ",{"_index":175,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["typedef",{"_index":41,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"3.类型系统/3.类型系统.html#3-类型系统":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["typedef&#xff08;&#x7b2c;3.1&#x8282;&#xff09",{"_index":49,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["typedef&#xff08;&#x7b2c;3.1&#x8282;&#xff09;&#x5173;&#x952e;&#x5b57;&#x5b9a;&#x4e49;&#x4e14;&#x9700;&#x8981;&#x517c;&#x5bb9;&#x6709;&#x4e00;&#x4e2a",{"_index":1512,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["typedef（第3.1",{"_index":40,"title":{},"body":{"3.类型系统/3.类型系统.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{}}}],["types,a",{"_index":1812,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["typic",{"_index":2328,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["unconstrain",{"_index":1559,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["underli",{"_index":1003,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["understand",{"_index":1976,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["unexpect",{"_index":1694,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["uni&#xfb01;",{"_index":1791,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["uni&#xfb01;c",{"_index":1805,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["unif",{"_index":1040,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["unifi",{"_index":643,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["unification(3.5",{"_index":1312,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html":{},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["uniqu",{"_index":2254,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["uniﬁ",{"_index":1769,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["uniﬁc",{"_index":1794,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{}}}],["unknow0",{"_index":2091,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["unknown",{"_index":68,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["unknown0",{"_index":921,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["unless",{"_index":1549,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["unlik",{"_index":994,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["unquali&#xfb01;",{"_index":2064,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["unqualiﬁ",{"_index":2038,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{}}}],["unspeci&#xfb01;c",{"_index":1595,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["unspeciﬁc",{"_index":1548,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{}}}],["until",{"_index":1895,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["untyp",{"_index":2151,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["untyped&#x6216;&#x8005;&#x4e0d;&#x662f;untyped&#x7684;&#x8868;&#x8fbe;&#x5f0f",{"_index":2183,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["untyped&#x6a21;&#x5f0f;&#xff0c;&#x8df3;&#x5230;14",{"_index":2203,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["untyped或者不是untyp",{"_index":2149,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["untyped模式，跳到14",{"_index":2154,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{}}}],["unusu",{"_index":1644,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["upon",{"_index":1557,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["us",{"_index":602,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["usag",{"_index":2236,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["user",{"_index":667,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["user.ag",{"_index":754,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["user.nam",{"_index":752,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["usual",{"_index":1350,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["util",{"_index":1561,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["v",{"_index":1169,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["valid",{"_index":610,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["valu",{"_index":433,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["value&#x201d",{"_index":1457,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["var",{"_index":60,"title":{},"body":{"2.类型/2.类型.html":{},"2.类型/2.类型.html#2-类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.2.为空性/2.2.为空性.html":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{},"2.类型/2.7.动态类型/2.7.动态类型.html":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["variabl",{"_index":638,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["variables,but",{"_index":1964,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["varianc",{"_index":1677,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["veri",{"_index":1577,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["version",{"_index":2318,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["via",{"_index":1004,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["visibl",{"_index":1978,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["void",{"_index":132,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.6.函数类型/2.6.函数类型.html":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["void&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x548c;&#x53d8;&#x91cf;&#x662f;&#x4e0d;&#x88ab;&#x5141;&#x8bb8;&#x7684",{"_index":162,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["want",{"_index":1383,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["warn",{"_index":1725,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["well",{"_index":683,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["whenev",{"_index":1535,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["while(5.14",{"_index":219,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["wildcard",{"_index":2246,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["within",{"_index":2039,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["withlength",{"_index":709,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["work",{"_index":1013,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["world",{"_index":134,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["world&#x201d",{"_index":154,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["worth",{"_index":2231,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["written",{"_index":1695,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["wrong",{"_index":1972,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["x",{"_index":142,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x&#x662f;&#x4e00;&#x4e2a;&#x539f;&#x751f",{"_index":328,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x,i",{"_index":283,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x,y,z",{"_index":281,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x.push",{"_index":2101,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x2013",{"_index":185,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x2014;&#x2014",{"_index":272,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x2019",{"_index":961,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x2019;$actual",{"_index":1606,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x2019;work",{"_index":1158,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x201c",{"_index":764,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x201c;&#x2026;&#x662f;&#x5426;&#x53ef;&#x4ee5;&#x88ab;&#x8d4b;&#x503c;&#x7ed9;&#x2026;&#x201d",{"_index":1925,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x201c;&#x4e0d;&#x80fd;&#x5bf9;&#x6bd4;myabstractint",{"_index":1162,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x201c;&#x5148;&#x524d;&#x770b;&#x8fc7;&#x7684;&#x201d",{"_index":18,"title":{},"body":{"index.html#关于本文档":{}}}],["x201c;&#x5185;&#x90e8;&#x7684;&#x503c;&#x201d;&#x3002;&#x5728;&#x8fd9;&#x70b9;&#x4e0a;&#xff0c;&#x4e00;&#x4e2a;&#x597d;&#x7684;&#x95ee;&#x9898;&#x662f",{"_index":1446,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x6210;&#x5458;&#x51fd;&#x6570;&#x6ca1;&#x6709;&#x88ab;&#x5185;&#x8054;&#x58f0;&#x660e;&#x5c06;&#x53d1;&#x751f;&#x4ec0;&#x4e48;&#x201d;&#xff0c;&#x56e0;&#x4e3a;&#x4ee3;&#x7801;&#x663e;&#x7136;&#x5fc5;&#x987b;&#x653e;&#x5230;&#x67d0;&#x4e2a;&#x5730;&#x65b9;&#x3002;hax",{"_index":1447,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;&#x5c1a;&#x672a;&#x4e86;&#x89e3;&#x7684;&#x201d",{"_index":20,"title":{},"body":{"index.html#关于本文档":{}}}],["x201c;against&#x201d",{"_index":1951,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x201c;body&#x201d",{"_index":1455,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;child",{"_index":1458,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;field",{"_index":166,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x201c;foo&#x201d",{"_index":2019,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x201c;hello",{"_index":153,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x201c;i",{"_index":296,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x201c;int",{"_index":1920,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x201c;intern",{"_index":1456,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201c;over&#x201d",{"_index":1454,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x201d",{"_index":845,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x201d;&#x3002;&#x6548;&#x679c;&#x662f;&#xff0c;&#x9ed8;&#x8ba4;&#x503c;&#x53d6;&#x4ee3",{"_index":808,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x201d;&#xff1a",{"_index":765,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x3001",{"_index":585,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x3001;&#x548c",{"_index":586,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x3002",{"_index":94,"title":{},"body":{"2.类型/2.类型.html#2-类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x3002;&#x4e0b;&#x9762;&#x7684;&#x8fd0;&#x7b97;&#x7b26;&#x63a5;&#x53d7;&#x5e76;&#x8fd4;&#x56d",{"_index":230,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x3002;&#x4ee5;&#x4e0a;&#x4f8b;&#x5b50;&#x4e2d;&#x8d4b;&#x503c;&#x4e86;&#x4e00;&#x4e2a",{"_index":731,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x3002;&#x524d;&#x4e00;&#x79cd;&#x60c5;&#x51b5;&#xff0c;&#x5b57;&#x6bb5;&#x53ef;&#x4ee5;&#x6709;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#xff0c;&#x800c;&#x540e;&#x4e00;&#x79cd;&#xff0c;&#x5b83;&#x4eec;&#x88ab;&#x9650;&#x5236;&#x517c;&#x5bb9;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#xff1a",{"_index":901,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x3002;&#x53d8;&#x91cf",{"_index":472,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x3002;&#x53ea;&#x6709;&#x5f53;&#x6211;&#x4eec;&#x4e3a;&#x5176;&#x63a8;&#x5165;&#x4e00;&#x4e2a",{"_index":2132,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x3002;&#x540c;&#x6837;&#xff0c;&#x8868;&#x8fbe;&#x5f0f",{"_index":242,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x3002;&#x540e;&#x8005;&#x4e3a;&#x65b9;&#x4fbf;&#x8d77;&#x89c1;&#x4f7f;&#x7528;&#x4e86",{"_index":1511,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x3002;&#x548c;&#x901a;&#x5e38;&#x7684;&#x5408;&#x4e00;&#x884c;&#x4e3a;&#x4e0d;&#x540c;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x5c1d;&#x8bd5;&#xff08;&#x5e76;&#x5931;&#x8d25;&#xff09;&#x53bb;&#x786e;&#x5b9a;&#x4e00;&#x4e2a;&#x901a;&#x7528;&#x7c7b;&#x578b;&#xff08;&#x7b2c;3.5.5&#x8282;&#xff09;&#xff0c;&#x4e2a;&#x522b;&#x7684;&#x5143;&#x7d20;&#x4e0d;&#x5229;&#x4e8e;&#x7c7b;&#x578b;&#x5316;&#x4f1a;&#x88ab;&#x7edf;&#x4e00;&#x4e3a",{"_index":2023,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x3002;&#x5982",{"_index":2171,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x3002;&#x5982;&#x679c;&#x4e00;&#x4e2a",{"_index":909,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x3002;&#x5b83;&#x4eec;&#x88ab;&#x5b9e;&#x73b0;&#x4e3a",{"_index":269,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x3002;&#x5f53;&#x7136;&#xff0c;&#x8fd9;&#x662f;&#x4e0d;&#x5141;&#x8bb8;&#x7684;&#x5e76;&#x4e14;&#x4f1a;&#x4f7f;&#x7f16;&#x8bd1;&#x5668;&#x53d1;&#x51fa;&#x4e00;&#x4e2a;&#x9519;&#x8bef",{"_index":1919,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x3002;&#x6211;&#x4eec;&#x53d1;&#x73b0;&#x8fd9;&#x4e2a;&#x884c;&#x4e3a;&#x4f1a;&#x5f15;&#x53d1;&#x592a;&#x591a;&#x7684;&#x7c7b;&#x578b;&#x95ee;&#x9898;&#xff0c;&#x56e0;&#x6b64;&#x5728",{"_index":951,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x3002;&#x6240;&#x4ee5;&#x5f53;&#x4e00;&#x4e2a;&#x5305;&#x4e2d;&#x5b58;&#x5728;&#x4e24;&#x4e2a;&#x6a21;&#x5757;&#xff0c;&#x4e14;&#x4e24;&#x4e2a;&#x6a21;&#x5757;&#x4e2d;&#x5b9a;&#x4e49;&#x4e86;&#x540c;&#x540d;&#x7684;&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x65f6;&#x53ef;&#x80fd;&#x4f1a;&#x4ea7;&#x751f;&#x51b2;&#x7a81;&#x3002;&#x901a;&#x5e38;&#xff0c;haxe&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x4fa6;&#x6d4b;&#x5230;&#x8fd9;&#x7c7b;&#x60c5;&#x51b5;&#x5e76;&#x505a;&#x51fa;&#x76f8;&#x5e94;&#x62a5;&#x544a;&#x3002",{"_index":2071,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x3002;&#x7136;&#x540e;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x770b;&#x5230",{"_index":2120,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x3002;&#x8fd9;&#x4e2a;&#x89c4;&#x5219;&#x5f53;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x88ab;&#x5bfc;&#x5165;&#x65f6;&#x4e5f;&#x6269;&#x5c55;&#x5230;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x3002",{"_index":2299,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x3002;&#x8fd9;&#x5728;&#x7b2c;3&#x884c;&#x7684;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x8f93;&#x51fa;&#x76f4;&#x63a5;&#x53cd;&#x6620;&#x51fa;&#x6765;&#x3002;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x7a0b;&#x5e8f;&#x8c03;&#x7528;&#x4e86;4&#x6b21",{"_index":839,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x3002;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x663e;&#x5f0f;&#x58f0;&#x660e;&#x5176;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x4e3a",{"_index":1860,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x3002;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x5bf9;&#x4e8e;&#x6bcf;&#x4e2a",{"_index":1611,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x3002;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x8fd9;&#x4e9b;&#x53c2;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x5fc5;&#x987b;&#x8ba4;&#x53ef",{"_index":847,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x3002;&#x8fd9;&#x662f;&#x4e00;&#x4e2a",{"_index":2114,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x3002;&#x8fd9;&#x662f;&#x56e0;&#x4e3a;&#x7f16;&#x8bd1;&#x5668;&#x6b64;&#x65f6;&#x53ef;&#x4ee5;&#x5b89;&#x5168;&#x5730;&#x5047;&#x5b9a",{"_index":1867,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x3002;&#x8fd9;&#x7c7b;&#x4f3c;&#x4e8e;&#x6cdb;&#x578b;&#x51fd;&#x6570;&#xff1a",{"_index":1674,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x3002;haxe&#x7f16;&#x8bd1;&#x5668;&#x5728;&#x4ee5;&#x4e0b;&#x60c5;&#x51b5;&#x4e0b;&#x6267;&#x884c;&#x6b64;&#x7c7b;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#xff1a",{"_index":1827,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x4e00;&#x4e2a",{"_index":1476,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{}}}],["x4e00;&#x4e2a;&#x4f7f;&#x7528;&#x9017;&#x53f7",{"_index":769,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x4e00;&#x4e2a;&#x5305;&#x62ec;&#x5728;&#x82b1;&#x62ec;&#x53f7",{"_index":767,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x4e00;&#x4e2a;&#x5355;&#x5f62;&#xff08;monomorph&#xff09;&#x4f1a;&#x5728",{"_index":1319,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["x4e00;&#x4e2a;&#x590d;&#x5408;&#x7c7b;&#x578b;&#xff0c;&#x5982;&#x679c;&#x5b83;&#x7684;&#x7ec4;&#x4ef6;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5f97;&#x4e3a;&#x7f3a;&#x5c11;&#x901a;&#x7528;&#x7684;&#x7ec4;&#x4ef6;&#xff0c;&#x5982;&#x5b83;&#x4eec;&#x53ea;&#x5199;&#xff0c;&#x4f46;&#x662f;&#x4e0d;&#x8bfb;&#xff0c;&#x5219;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x6297;&#x53d8;&#x3002",{"_index":1759,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x4e00;&#x4e2a;&#x5f88;&#x597d;&#x7684;&#x4f8b;&#x5b50;&#x662f;&#x6df7;&#x5408;&#x7c7b;&#x578b;&#x7684;&#x6570;&#x7ec4;&#x3002;&#x5982;&#x5728",{"_index":2017,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x5b9e;&#x9645;&#x4e0a;&#x662f;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x5b83;&#x662f;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x65f6;&#x529f;&#x80fd;&#xff0c;&#x5728;&#x56fa;&#x6709;&#x7c7b;&#x578b;&#x4e4b;&#x4e0a;&#x5b9a;&#x4e49;&#x6765;&#x4fee;&#x6539;&#x6216;&#x8005;&#x589e;&#x5f3a;&#x5b83;&#x4eec;&#x7684;&#x884c;&#x4e3a;&#x7684;&#x7c7b;&#x578b;&#xff1a",{"_index":1416,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4e00;&#x4e2a;&#x63a5;&#x53e3;&#x53ef;&#x4ee5;&#x88ab;&#x7406;&#x89e3;&#x4e3a;&#x7c7b;&#x7684;&#x7b7e;&#x540d;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x63cf;&#x8ff0;&#x4e86;&#x7c7b;&#x7684;&#x516c;&#x5171;&#x5b57;&#x6bb5;&#x3002;&#x63a5;&#x53e3;&#x4e0d;&#x63d0;&#x4f9b;&#x5b9e;&#x73b0;&#xff0c;&#x800c;&#x662f;&#x7eaf;&#x7cb9;&#x7684;&#x7ed3;&#x6784;&#x4e0a;&#x7684;&#x4fe1;&#x606f;&#xff1a",{"_index":377,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x65f6;&#x68c0;&#x67e5;&#x5176",{"_index":1286,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#x53ef;&#x4ee5;&#x91cd;&#x5199;&#x5b83;&#x7236;&#x7c7b;&#x7684",{"_index":312,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x901a;&#x8fc7",{"_index":2074,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#x6216;&#x8005;&#x51fd;&#x6570;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":1662,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x4e00;&#x4e2a;&#x7c7b;&#xff08;&#x7b2c;2.3&#x8282;&#xff09;&#x7edf;&#x4e00;&#x4e3a",{"_index":1777,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x4e00;&#x4e2a;&#x7ed3;&#x6784",{"_index":1779,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x4e00;&#x4e2a;&#x7ed3;&#x6784;&#xff08;&#x7b2c;2.5&#x8282;&#xff09;&#x65f6;&#xff0c",{"_index":1778,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x4e00;&#x4e2a;&#x8fd9;&#x6837;&#x7684;&#x89c4;&#x8303;&#x53ef;&#x4ee5;&#x4f7f;&#x5f97;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff08;&#x7b2c;2.2&#x8282;&#xff09;&#x7684;&#x90e8;&#x5206",{"_index":1664,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x4e00;&#x4e9b;&#x5e38;&#x89c1;&#x7684;&#x9519;&#x8bef;&#xff0c;&#x4f8b;&#x5982;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x62fc;&#x5199;&#x9519;&#x8bef;&#xff0c;&#x5c06;&#x4e0d;&#x80fd;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x88ab;&#x53d1;&#x73b0;&#xff0c;&#x53ef;&#x80fd;&#x4f1a;&#x5f15;&#x53d1;&#x8fd0;&#x884c;&#x65f6;&#x7684;&#x9519;&#x8bef;&#x3002",{"_index":933,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x4e00;&#x6837;&#x3002;&#x5173;&#x4e8e;&#x4f7f;&#x7528",{"_index":457,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x4e00;&#x79cd;&#x4e0d;&#x540c;&#x7c7b;&#x578b;&#x7684;&#x9650;&#x5236;&#x6d89;&#x53ca;&#x4ee3;&#x7801;&#x7684;&#x53ef;&#x8bfb;&#x6027;&#x3002;&#x5982;&#x679c;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x8fc7;&#x5ea6;&#x4f7f;&#x7528;&#xff0c;&#x53ef;&#x80fd;&#x7531;&#x4e8e;&#x53ef;&#x89c1;&#x7c7b;&#x578b;&#x7684;&#x7f3a;&#x5931;&#x800c;&#x96be;&#x4e8e;&#x7406;&#x89e3;&#x7a0b;&#x5e8f;&#x7684;&#x90e8;&#x5206;&#x3002;&#x7279;&#x522b;&#x662f;&#x5728;&#x65b9;&#x6cd5;&#x7b7e;&#x540d;&#x3002;&#x5efa;&#x8bae;&#x5728;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x548c;&#x663e;&#x5f0f;&#x7c7b;&#x578b;&#x4e2d;&#x627e;&#x5230;&#x4e00;&#x4e2a;&#x597d;&#x7684;&#x5e73;&#x8861;&#x3002",{"_index":1986,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["x4e00;&#x79cd;&#x590d;&#x5408;&#x7c7b;&#x578b;&#xff0c;&#x5982;&#x679c;&#x5b83;&#x7684;&#x7ec4;&#x6210;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x4e3a;&#x7f3a;&#x5c11;&#x7279;&#x5b9a;&#x7ec4;&#x4ef6;&#xff0c;&#x5982;&#x5b83;&#x4eec;&#x662f;&#x53ea;&#x8bfb;&#xff0c;&#x4e0d;&#x5141;&#x8bb8;&#x5199;&#x65f6;&#xff0c;&#x5219;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x534f;&#x53d8;&#x7684;&#x3002",{"_index":1757,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5",{"_index":1904,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#xff08;3.5&#xff09",{"_index":1320,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["x4e00;&#x81f4;&#x6027;&#x9519;&#x8bef;&#x975e;&#x5e38;&#x5bb9;&#x6613;&#x88ab;&#x89e6;&#x53d1;&#xff1a",{"_index":1914,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4e00;&#x822c;&#x8bed;&#x6cd5;&#x89c4;&#x5219;&#x5982;&#x4e0b;&#xff1a",{"_index":766,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x4e00;&#x8d77;&#xff0c;&#x901a;&#x5e38;&#x662f;&#x5bf9",{"_index":860,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x4e0a;&#x3002",{"_index":353,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x4e0a;&#x9762;&#x7684;&#x4ee3;&#x7801;&#x548c;&#x539f;&#x6765;&#x7684",{"_index":305,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x4e0a;&#xff08;&#x56e0;&#x4e3a",{"_index":1222,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x4e0a;&#xff0c",{"_index":1224,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x4e0a;&#xff0c;&#x4e8e;&#x662f;&#x89e6;&#x53d1;&#x4e86;&#x8fd9;&#x4e2a;&#x5355;&#x5f62;&#x4e0",{"_index":2118,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x4e0b;&#x4e00;&#x7ae0;&#x4e2d;&#xff0c;&#x6211;&#x4eec;&#x5c06;&#x63cf;&#x8ff0;&#x8fd9;&#x4e9b;&#x7c7b;&#x578b;&#x7ec4;&#x4e2d;&#x7684;&#x6bcf;&#x4e2a;&#x7c7b;&#x578b;&#xff0c;&#x4ee5;&#x53ca;&#x5b83;&#x4eec;&#x4e4b;&#x95f4;&#x5982;&#x4f55;&#x8054;&#x7cfb;&#x3002",{"_index":89,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x4e0b;&#x9762;&#x4e00;&#x884c;&#x4ece;&#x6f5c;&#x5728;&#x7c7b;&#x578b;int&#x66b4;&#x9732",{"_index":1155,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x4e0b;&#x9762;&#x662f;haxe&#x4e2d;&#x6570;&#x503c;&#x8fd0;&#x7b97;&#x7b26;&#x7684;&#x5217;&#x8868;&#xff0c;&#x6839;&#x636e;&#x4f18;&#x5148;&#x7ea7;&#x5206;&#x7ec4;&#xff1a",{"_index":177,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#2-1-3-数值运算符":{}}}],["x4e0b;&#x9762;&#x7684;&#x8868;&#x683c;&#x5c55;&#x793a;&#x4e86;&#x5141;&#x8bb8;&#x58f0;&#x660e;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x7684;&#x5730;&#x65b9;&#xff1a",{"_index":1596,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x4e0d;&#x4f1a;&#x88ab;&#x5f3a;&#x5236;&#x8ffd;&#x968f",{"_index":1308,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x4e0d;&#x5141;&#x8bb8",{"_index":160,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x4e0d;&#x540c;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x63a8;&#x65ad;&#x51fa;&#x4e00;&#x4e2a;&#x5c06;&#x679a;&#x4e3e;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":491,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff0c;&#x53bb;&#x5230",{"_index":1089,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x6709;&#x6548;&#x7684;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x7684;&#x503c;&#x65f6;&#xff0c;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x81ea;&#x5df1;&#x7684;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x3002;&#x8fd9;&#x5728",{"_index":559,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4e0d;&#x7b26;&#x5408;&#x5b9e;&#x73b0;&#x5176;&#x5b83;&#x63a5;&#x53e3;&#x7684;&#x9700;&#x6c42;&#x3002;&#x9884;&#x671f;&#x7684;&#x5b57;&#x6bb5;&#x4ecd;&#x7136;&#x5fc5;&#x987b;&#x88ab;&#x660e;&#x786e;&#x5b9e;&#x73b0;&#x3002;&#x5b9e;&#x73b0",{"_index":907,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x4e0d;&#x7b49",{"_index":194,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x4e0d;&#x80fd;&#x4f7f",{"_index":2296,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x4e0d;&#x80fd;&#x68c0;&#x6d4b;&#x4f7f;&#x7528;&#x5230;&#x7684;&#x5b57;&#x6bb5",{"_index":937,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x4e0d;&#x80fd;&#x88ab;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a",{"_index":1734,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x4e0d;&#x8bba;&#x54ea;&#x4e2a;&#x8bb0;&#x6cd5;&#xff0c;&#x5f88;&#x660e;&#x663e;&#xff0c;&#x51fd;&#x6570",{"_index":870,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x4e0d;&#x9700;&#x8981;&#x53c2;&#x6570",{"_index":530,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x4e0e",{"_index":1515,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x4e0e;&#x7c7b;&#x4e0d;&#x540c;&#xff0c;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5141;&#x8bb8;&#x5b9a;&#x4e49;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#x3002;&#x6709;&#x4e24;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#xff1a",{"_index":1051,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x4e0e;&#x7c7b;&#x578b",{"_index":1908,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4e0e;&#x96be;&#x61c2;&#x7684;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x76f8;&#x6bd4;&#xff0c;&#x6838;&#x5fc3;&#x7c7b;&#x578b;&#x62bd;&#x8c61;&#x6709;&#x4e0b;&#x9762;&#x7684;&#x5c5e;&#x6027;&#xff1a",{"_index":1299,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x4e13;&#x7528;&#x672f;&#x8bed;&#x3002;&#x6211;&#x4eec;&#x4e0d;&#x4f1a;&#x5b9a;&#x4e49;&#x6bcf;&#x4e2a;&#x65b0;&#x5f15;&#x5165;&#x7684;&#x6982;&#x5ff5;&#xff0c;&#x8b6c;&#x5982;&#x4ec0;&#x4e48;&#x662f;&#x7c7b;&#xff0c;&#x4ee5;&#x907f;&#x514d;&#x5f04;&#x4e71;&#x6587;&#x672c;&#x3002;&#x5b9a;&#x4e49;&#x770b;&#x8d77;&#x6765;&#x50cf;&#x8fd9;&#x6837;&#xff1a",{"_index":28,"title":{},"body":{"index.html#关于本文档":{}}}],["x4e14",{"_index":1943,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4e24;&#x79cd;&#x8f6c;&#x6362;&#x51fd;&#x6570;&#xff0c;&#x4f7f;&#x5f97;&#x8f93;&#x51fa;&#x5982;&#x4e0b;&#xff1a",{"_index":1084,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x4e2d",{"_index":594,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4e2d;&#x4e3a",{"_index":572,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4e2d;&#x4f1a;&#x8be6;&#x7ec6;&#x89e3;&#x91ca;&#x76f8;&#x5173;&#x7684;&#x673a;&#x5236;&#x3002",{"_index":59,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x4e2d;&#x5982;&#x679c",{"_index":550,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4e2d;&#x5b83;&#x7684;&#x5b9a;&#x4e49;&#xff09;&#x3002;&#x6211;&#x4eec;&#x5c06;&#x5728",{"_index":358,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x4e2d;&#x5c06;&#x4f1a;&#x63a2;&#x7d22;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x7684;&#x8be6;&#x7ec6;&#x4fe1;&#x606f;&#xff0c;&#x8fd9;&#x91cc;&#x5feb;&#x901f;&#x9884;&#x89c8;&#x4e00;&#x4e0b;&#xff1a;&#x4f8b;&#x5b50;&#x4e2d;&#x51fd;&#x6570",{"_index":157,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x4e2d;&#x5e76;&#x4e0d;&#x662f;&#x5fc5;&#x987b;&#x7684;&#xff0c;&#x56e0;&#x4e3a;&#x7f16;&#x8bd1;&#x5668;&#x53ef;&#x4ee5;&#x63a8;&#x65ad;&#x7c7b;&#x578b;&#xff1a",{"_index":73,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x4e2d;&#x6240;&#x4f7f;&#x7528;&#x7684;&#x8bed;&#x6cd5;&#x6765;&#x5b9a;&#x4e49;&#x7ed3;&#x6784;&#x7c7b;&#x578b;&#x3002;&#x4e0b;&#x9762;&#x7684",{"_index":650,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x4e2d;&#x63a2;&#x7d22;&#x5b83;&#x7684;&#x7ec6;&#x8282;&#x3002;&#x73b0;&#x5728;&#xff0c;&#x8db3;&#x4ee5;&#x786e;&#x5b9a;&#x4e0a;&#x9762;&#x4ee3;&#x7801;&#x4e2d;&#x7684;&#x53d8;&#x91cf",{"_index":76,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x4e2d;&#x63cf;&#x8ff0;&#x7684",{"_index":828,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x4e2d;&#x63cf;&#x8ff0;&#x7684;&#x7edf;&#x4e00;&#x3002",{"_index":56,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x4e2d;&#x6709;&#x4e00;&#x4e2a;&#x7279;&#x6b8a;&#x7c7b;&#x578b;&#xff0c;&#x53ef;&#x4ee5;&#x517c;&#x5bb9;&#x6240;&#x6709;&#x7684;&#x7c7b;&#xff1a",{"_index":513,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x4e2d;&#x6ca1;&#x6709;&#x53c2;&#x6570;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x4e00;&#x81f4;&#x3002;&#x6700;&#x540e;&#x7684",{"_index":453,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x4e2d;&#x7684;&#x4e00;&#x4e9b;&#x65b9;&#x6cd5;&#x3002",{"_index":520,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x4e2d;&#x7684;&#x662f;&#x5b57;&#x6bb5",{"_index":1423,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4e2d;&#x7684;&#x662f;&#x6f5c;&#x5728;&#x7684;&#x7c7b;&#x578b",{"_index":1421,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4e2d;&#x7684;&#x975e;&#x5e38;&#x76f8;&#x4f3c;&#xff0c;&#x552f;&#x4e00;&#x7684;&#x533a;&#x522b;&#x662f;&#x51fd;&#x6570;&#x7684;&#x53c2;&#x6570",{"_index":806,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x4e2d;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#x5e76;&#x4e0d;&#x662f;&#x7c7b;&#x578b;&#x7684;&#x4e00;&#x90e8;&#x5206;&#xff0c;&#x800c;&#x4e14;&#x4e0d;&#x80fd;&#x5728;&#x8c03;&#x7528;&#x65f6;&#x66f4;&#x6539;&#x51fd;&#x6570;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#xff08;&#x610f;&#x6307;&#x53ea;&#x5e94;&#x7528;&#x4e8e;&#x5f53;&#x6b21;&#x8c03;&#x7528;&#xff0c;&#x800c;&#x4e0d;&#x4f1a;&#x6539;&#x53d8;&#x51fd;&#x6570;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#x5b9a;&#x4e49;&#x3002;&#x9664;&#x975e;&#x51fd;&#x6570;&#x662f",{"_index":810,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x4e2d;&#x79fb;&#x9664;&#x4e86;&#x5b83;&#x3002",{"_index":952,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x4e2d;&#x8ba8;&#x8bba;&#x7684;&#x95ee;&#x9898;&#x3002",{"_index":850,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x4e2d;&#x8be6;&#x7ec6;&#x4ecb;&#x7ecd;&#x3002",{"_index":317,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x4e2d;&#x901a;&#x8fc7",{"_index":293,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x4e2d;&#x91cd;&#x65b0;&#x5ba1;&#x89c6",{"_index":360,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x4e2d;&#x95f4;&#x7684;&#x662f;&#x7c7b;&#x7684;&#x5b57;&#x6bb5",{"_index":506,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x4e2d;&#xff0c;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x5e76;&#x4e0d;&#x662f",{"_index":267,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x4e2d;&#xff0c;argu",{"_index":337,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x4e3a",{"_index":248,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x4e3a;&#x4e86;&#x80fd;&#x4e0",{"_index":726,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x4e3a;&#x4e86;&#x907f;&#x514d;&#x8fd9;&#x79cd;&#x5197;&#x4f59;&#x7684;&#x7c7b;&#x578b;&#x58f0;&#x660e;&#x5f62;&#x5f0f;&#xff0c;&#x5c24;&#x5176;&#x662f;&#x5bf9;&#x4e8e;&#x66f4;&#x590d;&#x6742;&#x7684;&#x7ed3;&#x6784;&#xff0c;&#x5efa;&#x8bae;&#x4f7f;&#x7528;&#x4e00;&#x4e2a",{"_index":796,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x4e3a;&#x7a7a;&#x6027;&#xff08;&#x7b2c;2.2&#x8282;&#xff09",{"_index":849,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x4e4b;&#x524d",{"_index":399,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x4e4b;&#x524d;&#x7684;&#x7248;&#x672c;&#x4e0d;&#x540c;&#x3002",{"_index":1205,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x4e4b;&#x524d;&#x975e;&#x5e38;&#x9891;&#x7e41;&#x7684;&#x4f7f;&#x7528;&#x5728;&#x6807;&#x51c6;&#x5e93;&#x4e2d;&#x3002;&#x968f;&#x7740",{"_index":974,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x4e4b;&#x540e;&#x4ee3;&#x7801;&#x6210;&#x4e3a;&#x8fd9;&#x6837;&#xff1a",{"_index":1137,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x4e4b;&#x5916;&#x5e76;&#x4e0d;&#x9700;&#x8981;&#x77e5;&#x9053;&#x8be5;&#x53c2;&#x6570;&#x7684;&#x5177;&#x4f53;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x4f7f;&#x5f97;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f20;&#x9012;&#x4e00;&#x4e2a;&#x53ef;&#x88ab;&#x7edf;&#x4e00;&#x4e3a",{"_index":1787,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x4e4b;&#x95f4;&#x7684;&#x4e00;&#x4e2a;&#x81f4;&#x547d;&#x53d8;&#x66f4;&#x3002",{"_index":404,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x4e4b;&#x95f4;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5",{"_index":2119,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x4e4b;&#x95f4;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x662f;&#x4e00;&#x4e2a;&#x5b9a;&#x5411;&#x8fc7;&#x7a0b;&#xff0c;&#x5b83;&#x4f1a;&#x56de;&#x7b54;&#x4e00;&#x4e2a;&#x95ee;&#x9898;&#xff1a;a",{"_index":1909,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4e58;&#x6cd5",{"_index":189,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x4e5f;&#x53ef;&#x4ee5;&#x4e8e;&#x6210;&#x5458;&#x5b57;&#x6bb5;&#x88ab;&#x8bbf;&#x95ee;&#x65f6;&#x7ed1;&#x5b9a",{"_index":1601,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x4e5f;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":1254,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x4e8e;&#x5176;&#x5b83;&#x7c7b;&#x578b;&#x7528;&#x4ee5;&#x8868;&#x793a",{"_index":589,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4e5f;&#x6709;&#x4e00;&#x4e9b;&#x60c5;&#x51b5;&#x9012;&#x5f52;&#x8c03;&#x7528;&#xff0c;&#x5f53;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x6709;&#x9650;&#x5236;&#x7684;&#x65f6;&#x5019;&#x3002;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x9012;&#x5f52;&#x8c03;&#x7528;&#x5b83;&#x81ea;&#x8eab;&#xff0c;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x8fd8;&#x4e0d;&#xff08;&#x5b8c;&#x5168;&#xff09;&#x4e0d;&#x77e5;&#x9053;&#xff0c;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x53ef;&#x80fd;&#x63a8;&#x65ad;&#x4e00;&#x4e2a;&#x9519;&#x8bef;&#xff0c;&#x592a;&#x8be6;&#x7ec6;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":1985,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["x4e8b;&#x5b9e;&#x4e0a;&#x7684;&#x6807;&#x51c6;&#xff0c;&#x514d;&#x9664;&#x4e86;&#x9017;&#x53f7;&#x3002;&#x8fd9;&#x4e2a;&#x662f",{"_index":403,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x4e8c;&#x5143;&#x8fd0;&#x7b97;&#x548c;&#x4e00;&#x5143;&#x8fd0;&#x7b97;&#x7b26;&#x91cd;&#x8f7d;&#x90fd;&#x53ef;&#x4ee5;&#x8fd4;&#x56de;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x3002",{"_index":1151,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x4ea7;&#x751f;&#x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x547d;&#x540d;&#x4e3a",{"_index":2205,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x4ecd;&#x7136;&#x662f",{"_index":1743,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x4ece",{"_index":677,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x4ece;&#x8bed;&#x4e49;&#x4e0a;&#x770b;&#xff0c;&#x8fd9;&#x4e2a",{"_index":524,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x4ece;&#x8bed;&#x4e49;&#x4e0a;&#x8bb2;&#xff0c;&#x8fd9;&#x4e2a;&#x7c7b;&#x8868;&#x793a;&#x4e8c;&#x7ef4;&#x7a7a;&#x95f4;&#x5185;&#x7684;&#x4e00;&#x4e2a;&#x70b9;&#xff0c;&#x4f46;&#x662f;&#x8fd9;&#x91cc;&#x5b83;&#x662f;&#x4ec0;&#x4e48;&#x5e76;&#x4e0d;&#x91cd;&#x8981;&#x3002;&#x6211;&#x4eec;&#x6765;&#x63cf;&#x8ff0;&#x4e00;&#x4e0b;&#x8fd9;&#x4e2a;&#x7ed3;&#x6784;&#xff1a",{"_index":502,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x4ece;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x5f97;&#x51fa;&#x4ee5;&#x4e0b;&#x51e0;&#x70b9",{"_index":1417,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4ece;haxe3.2.0&#x540",{"_index":2306,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x4ee3;&#x7801;&#x662f;&#x5982;&#x4f55;&#x88ab;&#x751f;&#x6210;&#x7684;&#xff0c;&#x5bf9;&#x4e8e;&#x8fd9;&#x4e9b;&#x5185;&#x5bb9;&#xff0c;&#x901a;&#x5e38;&#x4f1a;&#x4ee5",{"_index":26,"title":{},"body":{"index.html#关于本文档":{}}}],["x4ee3;&#x7801;&#xff1a",{"_index":1438,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4ee5;&#x4e0b;&#x7684;&#x4f8b;&#x5b50;&#x662f",{"_index":1782,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x4f1a;&#x5bfc;&#x81f4;&#x4e00;&#x4e2a;&#x8fd0;&#x884c;&#x65f6;&#x9519;&#x8bef;&#xff0c;&#x4f46;&#x662f;&#x5bf9",{"_index":250,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x4f1a;&#x5f97;&#x5230",{"_index":1875,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x4f1a;&#x628a",{"_index":1954,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4f1a;&#x7edf;&#x4e00;&#x4e3a",{"_index":1931,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x4f1a;&#x88ab;&#x751f;&#x6210;&#x4e3a",{"_index":2070,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x4f1a;&#x9996;&#x5148;&#x6267;&#x884c",{"_index":237,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x4f3c;&#x4e4e;&#x4e0d;&#x5e38;&#x89c1;&#x8fd9;&#x91cc;&#x7684;&#x663e;&#x5f0f;&#x7c7b;&#x578b",{"_index":1668,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x4f4d;&#x4e0e",{"_index":201,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x4f4d;&#x6216",{"_index":202,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x4f4d;&#x6d6e;&#x70b9;&#x6570",{"_index":103,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{}}}],["x4f4d;&#x7f6e",{"_index":1597,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x4f4d;&#x8fd0;&#x7b97",{"_index":199,"title":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}},"body":{}}],["x4f4d;&#x975e",{"_index":200,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x4f5c;&#x4e3a",{"_index":1750,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x4f5c;&#x4e3a;&#x201c;&#x5b57;&#x6bb5;&#x201d;&#x7684;&#x4f2a;&#x7c7b;&#x578b;&#x3002;&#x81ea",{"_index":492,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x503c;&#x3002;&#x5728;&#x52a8;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff0c;&#x8fd9;&#x6837;&#x505a;&#x6ca1;&#x6709;&#x5f71;&#x54cd;&#x3002",{"_index":588,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x5916;&#x90e8;&#x7c7b;&#xff0c;&#x5b83;&#x4f1a;&#x548c;&#x7a7a;&#x7684;&#x7ed3;&#x6784",{"_index":1452,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x4f5c;&#x4e3a;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x5f00;&#x59cb;&#xff0c",{"_index":50,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x4f5c;&#x4e3a;&#x4e58;&#x6cd5",{"_index":1135,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x4f5c;&#x4e3a;&#x503c;&#xff0c;&#x8fd9;&#x662f;&#x5728",{"_index":848,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x4f5c;&#x4e3a;&#x7701;&#x7565;&#x7684;&#x53c2;&#x6570;&#x503c;&#xff0c;&#x751f;&#x6210;&#x7c7b;&#x4f3c;&#x4e8e;&#x8fd9;&#x6837;&#x7684;&#x4ee3;&#x7801;&#x5230;&#x51fd;&#x6570;&#x4e2d;&#xff1a",{"_index":813,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x4f5c;&#x4e3a;&#x901f;&#x8bb0;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4e86;&#x89e3;&#x6269;&#x5c55;&#x7684;&#x8bb0;&#x6cd5;&#x53ef;&#x4ee5;&#x5e2e;&#x52a9;&#x6211;&#x4eec;&#x7406;&#x89e3;&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#xff08;&#x7b2c;3.7.1&#xff09;&#x5982;&#x4f55;&#x5b9a;&#x4f4d;&#x3002",{"_index":2346,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x4f7f",{"_index":2291,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x4f7f;&#x7528",{"_index":379,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x4f7f;&#x7528;&#x522b;&#x540d;&#x5bfc;&#x5165",{"_index":2301,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x4f7f;&#x7528;&#x533f;&#x540d;&#x7ed3;&#x6784;&#xff0c;&#x5728;&#x7f16;&#x8bd1;&#x4e3a",{"_index":742,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x4f7f;&#x7528;&#x901a;&#x914d;&#x7b26;&#x5230;haxe.macro&#x7684;&#x5bfc;&#x5165;&#xff0c;&#x4f7f;&#x8fd9;&#x4e2a;&#x5305;&#x4e2d;&#x7684",{"_index":2294,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x4f8b;&#x5982;&#xff0c;&#x8868;&#x8fbe;&#x5f0f",{"_index":236,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x4f8b;&#x5b50;&#x4e2d;&#x5df2;&#x7ecf;&#x89c1;&#x5230;&#x8fc7",{"_index":155,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x4fdd;&#x8bc1;&#x6df7;&#x5408;&#x7684;&#x5e03;&#x5c14;&#x8868;&#x8fbe;&#x5f0f;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x4ece;&#x5de6;&#x5230;&#x53f3;&#x88ab;&#x8bc4;&#x4f30;&#xff0c;&#x5e76;&#x4e14;&#x53ea;&#x8fdb;&#x884c;&#x9700;&#x8981;&#x7684;&#x8bc4;&#x4f30;&#x3002",{"_index":235,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x4fee;&#x9970;&#x53ef;&#x9009;&#x5b57;&#x6bb5;&#xff1a",{"_index":679,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x503c",{"_index":266,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x503c;&#x3002;&#x5b83;&#x7684;&#x8bed;&#x6cd5;&#x6784;&#x6210;&#x5982;&#x4e0b;&#xff1a",{"_index":526,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x503c;&#x3002;&#x8fd9;&#x5e94;&#x7528;&#x4e8",{"_index":564,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x503c;&#x4e3a;&#x4e00;&#x4e2a",{"_index":830,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x503c;&#x53ef;&#x4ee5;&#x662f;&#x4efb;&#x4f55",{"_index":773,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x503c;&#x5f97;&#x6ce8;&#x610f;&#x7684;&#x662f;&#xff0c;&#x4f7f;&#x7528;&#x533f;&#x540d;&#x7ed3;&#x6784;&#x4e0d;&#x4f1a;&#x7834;&#x574f;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x786e;&#x4fdd;&#x53ea;&#x80fd;&#x8bbf;&#x95ee;&#x53ef;&#x7528;&#x7684;&#x5b57;&#x6bb5;&#xff0c;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x5982;&#x4e0b;&#x7684;&#x7a0b;&#x5e8f;&#x4e0d;&#x4f1a;&#x7f16;&#x8bd1;&#xff1a",{"_index":787,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x503c;&#x88ab;&#x9690;&#x85cf;&#x5728",{"_index":592,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x503c;&#x8fdb;&#x884c;&#x5206;&#x652f;&#x3002;&#x524d;&#x4e09;&#x4e2a;&#x60c5;&#x51b5;&#x662f",{"_index":450,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x5076;&#x5c14;&#x6211;&#x4eec;&#x4f1a;&#x6f14;&#x793a",{"_index":25,"title":{},"body":{"index.html#关于本文档":{}}}],["x50cf;&#x4e0b;&#x4e00;&#x8282;&#x63cf;&#x8ff0;&#x7684;&#x90a3;&#x6837;&#x5904;&#x7406;&#x3002",{"_index":273,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x50cf;&#x5f80;&#x5e38;&#x4e00;&#x6837;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x67e5;&#x770b",{"_index":1252,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5141;&#x8bb8;&#x4f7f;&#x7528;&#x5728",{"_index":649,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x5141;&#x8bb8;&#x5206;&#x914d;&#x503c",{"_index":1078,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5141;&#x8bb8;&#x5206;&#x914d;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5230",{"_index":1080,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5141;&#x8bb8;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x548c;&#x5176;&#x5b83;&#x7c7b;&#x578b;&#x4e4b;&#x95f4;&#x7684;&#x76f4;&#x63a5;&#x8f6c;&#x6362;&#x3002;&#x8fd9;&#x901a;&#x8fc7;&#x4ece;&#x6216;&#x8005;&#x5f80;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x6dfb;&#x52a0;&#x89c4;&#x5219;&#x6765;&#x5b9a;&#x4e49;&#xff0c;&#x800c;&#x4e14;&#x53ea;&#x5141;&#x8bb8;&#x7528;&#x4e8e;&#x548c;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7edf;&#x4e00;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":1053,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5141;&#x8bb8;&#x6dfb;&#x52a0",{"_index":1242,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5141;&#x8bb8;&#x7528;&#x4e8e;&#x65b9;&#x6cd5;&#x548c;&#x547d;&#x540d;&#x7684;&#x5c40;&#x90e8",{"_index":1604,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x5141;&#x8bb8;&#x7684",{"_index":578,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5141;&#x8bb8;&#x901a;&#x8fc7;&#x5206;&#x914d;&#x4e00;&#x4e2a;&#x5e38;&#x91cf;&#x503c;&#x6765;&#x4e3a;&#x53c2;&#x6570;&#x63d0;&#x4f9b;&#x9ed8;&#x8ba4;&#x503c;&#xff0c;&#xff1a",{"_index":803,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x5141;&#x8bb8;&#x901a;&#x8fc7;&#x8c03;&#x7528;&#x7279;&#x522b;&#x7684;&#x8f6c;&#x6362;&#x51fd;&#x6570;&#x8fdb;&#x884c;&#x8f6c;&#x6362;&#x3002;&#x8fd9;&#x4e9b;&#x51fd;&#x6570;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":1055,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5143;&#x6570;&#x636e;&#x3002",{"_index":1483,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x5143;&#x6570;&#x636e;&#x3002;&#x5982;&#x679c;&#x5b83;&#x53ea;&#x53ef;&#x4ee5;&#x4e3a",{"_index":1145,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5143;&#x6570;&#x636e;&#x5230;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x5b9a;&#x4e49;&#xff0c;&#x8fd9;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x6765;&#x5b9a;&#x4e49;&#x6709;&#x9650;&#x503c;&#x7684;&#x96c6;&#x5408;&#xff1a",{"_index":1277,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x5143;&#x6570;&#x636e;&#x5230;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff1a",{"_index":1243,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5143;&#x6570;&#x636e;&#x5230;&#x7c7b;&#x5b57;&#x6bb5;&#xff0c;&#x5141;&#x8bb8;&#x4e00;&#x5143;&#x548c;&#x4e8c;&#x5143;&#x8fd0;&#x7b97;&#x7b26;&#x7684;&#x91cd;&#x8f7d;&#xff1a",{"_index":1130,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5143;&#x6570;&#x636e;&#x5b9a;&#x4e49;&#x3002;&#x8fd9;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x8f6c;&#x6362;&#x5141;&#x8bb8;&#x7528;&#x4e8e;&#x6240;&#x6709;&#x7c7b;&#x578b;&#x3002",{"_index":1056,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5143;&#x6570;&#x636e;&#x6709;&#x4e24;&#x4e2a;&#x53c2;&#x6570;&#xff0c;&#x5bf9;&#x5e94;&#x8981;&#x88ab;&#x8f6c;&#x53d1;&#x5230;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x540d;&#x3002;&#x5728;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c",{"_index":1247,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5143;&#x6570;&#x636e;&#x6765;&#x4fee;&#x9970;&#x53ef;&#x9009;&#x5b57;&#x6bb5",{"_index":676,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x5143;&#x6570;&#x636e;&#x7684;&#x6ce8;&#x89e3;&#x3002",{"_index":1302,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5143;&#x6570;&#x636e;&#x8bc6;&#x522b;&#xff0c;&#x800c;&#x4e14;&#x7f3a;&#x5931;&#x4e00;&#x4e2a;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7684;&#x58f0;&#x660e;&#x3002;&#x8fd9;&#x4e9b;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x4ecd;&#x7136;&#x53ef;&#x4ee5;&#x88ab;&#x7406;&#x89e3;&#x4e3a;&#x8868;&#x793a;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x4e0d;&#x8fc7;&#xff0c;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x662f",{"_index":1294,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5143;&#x6570;&#x636e;&#xff08;&#x7b2c;6.9&#x8282;&#xff09;&#x5f52;&#x7c7b;&#x4e3a;&#x6cdb;&#x578b;&#x3002;&#x8fd9;&#x5bfc;&#x81f4;&#x7f16;&#x8bd1;&#x5668;&#x6bcf;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x548c;&#x7834;&#x635f;&#x7684;&#x540d;&#x5b57;&#x7684;&#x6df7;&#x5408;&#xff0c;&#x53d1;&#x5c04;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x7684;&#x7c7b;/&#x51fd;&#x6570;&#x3002",{"_index":1663,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x5148;&#x5b9a;&#x4e49;&#x7684;&#x5b57;&#x6bb5;&#x6709;&#x4f18;&#x5148;&#x7ea7;&#xff0c;&#x5373;&#x4f7f;&#x5b83;&#x4eec;&#x9700;&#x8981;&#x4e00;&#x4e2a",{"_index":1206,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x5173;&#x4e8e;&#x5bfc;&#x5165;&#x6709;&#x51e0;&#x4e2a;&#x65b9;&#x9762;&#x9700;&#x8981;&#x4e86;&#x89e3;&#xff1a",{"_index":2278,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5173;&#x4e8e;&#x672c;&#x6587;&#x6863",{"_index":10,"title":{"index.html#关于本文档":{}},"body":{}}],["x5173;&#x4e8e;&#x82b1;&#x7d6",{"_index":36,"title":{},"body":{"index.html#关于本文档":{}}}],["x5173;&#x952e;&#x5b57",{"_index":381,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5173;&#x952e;&#x5b57;&#x3002;&#x6548;&#x679c;&#x548c;&#x9650;&#x5236;&#x5c06;&#x5728",{"_index":315,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x5173;&#x952e;&#x5b57;&#x5b9e;&#x73b0;&#x591a;&#x4e2a;&#x63a5;&#x53e3;&#xff1a",{"_index":394,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x5173;&#x952e;&#x5b57;&#x6307;&#x793a;&#xff1a",{"_index":294,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x5173;&#x952e;&#x5b57;&#x800c;&#x4e0d;&#x662f",{"_index":380,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x5173;&#x952e;&#x5b57;&#x8868;&#x793a",{"_index":388,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x5173;&#x952e;&#x5b57;&#xff0c;&#x4f7f;&#x7528;&#x9017;&#x53f7",{"_index":401,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x5173;&#x952e;&#x5b57;&#xff1a",{"_index":397,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x5177;&#x6709",{"_index":2282,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x517c;&#x5bb9",{"_index":1516,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x517c;&#x5bb9;&#x7684;&#x540c;&#x65f6;&#x63d0;&#x4f9b;&#x4e00;&#x4e2a",{"_index":728,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x517c;&#x5bb9;&#xff0c;&#x4e00;&#x4e2a;&#x7c7b;&#x5fc5;&#x987b;&#x80fd;&#x591f;&#x4e0",{"_index":727,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x5185;&#x7684;&#x7ed3;&#x6784",{"_index":768,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x5185;&#x8054;&#x90e8;&#x5206;&#xff08;&#x7b2c;4.4.2&#x8282;&#xff09",{"_index":1442,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5185;&#x8054;&#xff08;&#x7b2c;4.4.2&#x8282;&#xff09",{"_index":811,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x518d;&#x4e00;&#x6b21;&#xff0c;javascript&#x8f93;&#x51fa;&#x4f7f;&#x5176;&#x975e;&#x5e38;&#x660e;&#x663e;&#xff1a",{"_index":1675,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x5192;&#x53f7",{"_index":771,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x51cf;&#x6cd5",{"_index":188,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x51fa;&#x4e8e;&#x6027;&#x80fd;&#x539f;&#x56e0;&#xff0c;hax",{"_index":122,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["x51fd;&#x6570",{"_index":837,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x51fd;&#x6570;&#x4e0d;&#x9700;&#x8981;&#x4efb;&#x4f55;&#x8868;&#x8fbe;&#x5f0f",{"_index":382,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x51fd;&#x6570;&#x4e2d;&#x4e0d;&#x5408;&#x6cd5;&#x7684;&#x6807;&#x8bc6;&#x7b26",{"_index":2271,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x51fd;&#x6570;&#x5185;&#x5b9a;&#x4e49",{"_index":164,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x51fd;&#x6570;&#x53c2;&#x6570;&#x88ab;&#x7279;&#x6b8a;&#x7684;&#x7bad;&#x5934;&#x7b26;&#x53f7",{"_index":866,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x51fd;&#x6570;&#x58f0;&#x660e;&#x3002",{"_index":1305,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x51fd;&#x6570;&#x662f;&#x4e0d;&#x53ef;&#x4ea4;&#x6362;&#x7684;&#xff1a;&#x5f53",{"_index":1142,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x51fd;&#x6570;&#x663e;&#x7136;&#x662f",{"_index":1865,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x51fd;&#x6570;&#x7684",{"_index":1608,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x51fd;&#x6570;&#x7684;&#x65b9;&#x6cd5;&#x4f53;&#xff0c;&#x4f46;&#x662f;&#x53ea;&#x6709;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x5141;&#x8bb8;&#x6d89;&#x53ca;&#x7684;&#x64cd;&#x4f5c;&#xff0c;&#x5e76;&#x4e14;&#x7ed3;&#x679c;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x8d4b;&#x503c;&#x56de;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x65f6;&#x5019;&#x3002",{"_index":1154,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b",{"_index":1934,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x5728;&#x51fd;&#x6570;&#x88ab;&#x8c03;&#x7528;&#x65f6;&#x89e6;&#x53d1;&#x7ed1;&#x5b9a;&#xff0c;&#x8fd9;&#x6837;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x5982;&#x679c;&#x65e0;&#x7ea6;&#x675f;&#xff09;&#x63a5;&#x53d7;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x3002;&#x4f46;&#x662f;&#xff0c;&#x6bcf;&#x6b21;&#x8c03;&#x7528;&#x53ea;&#x63a5;&#x53d7;&#x4e00;&#x79cd;&#x7c7b;&#x578b;&#x3002;&#x6bd4;&#x5982;&#x5f53;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x6709;&#x591a;&#x4e2a;&#x53c2;&#x6570;&#x65f6;&#xff1a",{"_index":1605,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.6&#x8282;&#xff09",{"_index":93,"title":{},"body":{"2.类型/2.类型.html#2-类型":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#xff08;2.6&#xff09",{"_index":2108,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#xff0c;&#x8fde;&#x540c",{"_index":858,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x51fd;&#x6570;&#x7c7b;&#x578b;&#xff1a;&#x4e00;&#x4e2a;&#x7531;&#x4e00;&#x4e9b;&#x53c2;&#x6570;&#x548c;&#x4e00;&#x4e2a;&#x8fd4;&#x56de;&#x503c;&#x7ec4;&#x6210;&#x7684;&#x6df7;&#x5408;&#x7c7b;&#x578b",{"_index":84,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x51fd;&#x6570;&#x8c03;&#x7528",{"_index":1932,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x51fd;&#x6570;&#x8fd4;&#x56de",{"_index":1938,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x51fd;&#x6570;&#x8fd4;&#x56de;&#x503c;&#x7684;&#x7c7b;&#x578b;&#x76f8;&#x540c;&#xff0c;&#x5373;&#xff0c;&#x4e00;&#x4e2a",{"_index":881,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x51fd;&#x6570;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x51fa;&#x73b0;&#x5728;&#x7ed3;&#x5c3e;&#x7684;&#x53e6;&#x4e00;&#x4e2a",{"_index":868,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x51fd;&#x6570;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x53ef;&#x80fd;&#x6d89;&#x53ca",{"_index":1855,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x51fd;&#x6570;&#xff0c;&#x5b83;&#x4eec;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x7f16;&#x8bd1;&#x3002;&#x4e0d;&#x8fc7;&#x4e5f;&#x6709;&#x65f6;&#x5019;&#x53ea;&#x6709;&#x6700;&#x5173;&#x952e;&#x7684;&#x90e8;&#x5206;&#x88ab;&#x5c55;&#x793a;&#x51fa;&#x6765;&#x3002;&#x6e90;&#x4ee3;&#x7801;&#x770b;&#x8d77;&#x6765;&#x5c31;&#x50cf;&#x8fd9;&#x6837;&#xff1a",{"_index":24,"title":{},"body":{"index.html#关于本文档":{}}}],["x5206;&#x522b;&#x4f5c;&#x4e3a;&#x7b2c;&#x4e00;&#x4e2a;&#x548c;&#x7b2c;&#x4e8c;&#x4e2a;&#x7c7b;&#x578b;&#x3002",{"_index":1149,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5206;&#x652f;&#x4e2d",{"_index":1830,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x5206;&#x914d;&#xff0c;&#x5e76;&#x4e14;&#x53ef;&#x4ee5;&#x5206;&#x914d;&#x5230",{"_index":1061,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5206;&#x9694;&#x7684;&#x952e;&#x503c;&#x5bf9;&#x5217;&#x8868",{"_index":770,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x5206;&#x9694;&#xff0c;&#x800c;&#x4e0d;&#x662f;&#x9017;&#x53f7",{"_index":867,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x5219;&#x4e0d;&#x5de5;&#x4f5c;&#x3002;&#x5982;&#x679c;&#x8fd9;&#x5e94;&#x8be5;&#x540c;&#x65f6;&#x5141;&#x8bb8;&#xff0c;&#x53ef;&#x4ee5;&#x6dfb;&#x52a0",{"_index":1144,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5219;&#x4f5c;&#x4e3a",{"_index":300,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x5219;&#x662f",{"_index":302,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x521b;&#x5efa;&#x4e00;&#x4e2a;&#x79c1;&#x6709;&#x7c7b;&#xff0c;&#x5373;&#x5df2;&#x77e5;&#x7684;&#x5b9e;&#x73b0;&#x7c7b;&#xff0c;&#x5b83;&#x5c06;&#x6240;&#x6709;&#x7684;&#x62bd;&#x8c61;&#x6210;&#x5458;&#x51fd;&#x6570;&#x4f5c;&#x4e3a;&#x63a5;&#x53d7;&#x4e00;&#x4e2a;&#x9644;&#x52a0;&#x7684;&#x7c7b;&#x578b;&#x4e3a;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7684;&#x9996;&#x53c2;&#x6570;&#x7684;&#x9759;&#x6001;&#x51fd;&#x6570;&#x3002;&#x867d;&#x7136;&#x6280;&#x672f;&#x4e0a;&#x4e0a;&#x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x5b9e;&#x73b0;&#x7ec6;&#x8282;&#xff0c;&#x4f46;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x4e8",{"_index":1448,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5230",{"_index":1063,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5230;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#xff0c;&#x5b83;&#x83b7;&#x53d6;&#x8d44;&#x683c;&#x4f5c;&#x4e3a;&#x4ece;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5230;&#x5b83;&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x7684;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#x51fd;&#x6570;&#x3002;&#x8fd9;&#x4e9b;&#x51fd;&#x6570;&#x901a;&#x5e38;&#x662f;&#x6210;&#x5458;&#x51fd;&#x6570;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x88ab;&#x58f0;&#x660e;&#x4e3a;&#x9759;&#x6001",{"_index":1074,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5230;&#x4e00;&#x4e2a;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x3002;&#x4e3a;&#x4e86;&#x5b9e;&#x73b0;&#x5b83;&#xff0c;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x5fc5;&#x987b;&#x88ab;&#x5305;&#x88c5;&#x4e3a",{"_index":576,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5230;&#x4e00;&#x4e2a;&#x7c7b;&#x578b",{"_index":1086,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5230;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x51fd;&#x6570;&#xff0c;&#x8fd9;&#x4e2a;&#x51fd;&#x6570;&#x83b7;&#x5f97;&#x8d44;&#x683c;&#x4f5c;&#x4e3a;&#x4ece;&#x5b83;&#x7684;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x5230;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#x51fd;&#x6570;&#x3002;&#x8fd9;&#x4e9b;&#x51fd;&#x6570;&#x5fc5;&#x987b;&#x8fd4;&#x56de;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x503c;&#x3002;&#x5b83;&#x4eec;&#x8fd8;&#x5fc5;&#x987b;&#x88ab;&#x58f0;&#x660e;&#x4e3a;&#x9759;&#x6001;&#x7684",{"_index":1072,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5230;&#x539f;&#x59cb;&#x7684;&#x6570;&#x7ec4;&#xff0c;&#x7c7b;&#x578b;&#x4e3a",{"_index":1741,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x5230;&#x6211;&#x4eec;&#x901a;&#x5e38;&#x4f7f;&#x7528",{"_index":1473,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x529f;&#x80fd;&#x90fd;&#x662f;&#x6700;&#x521d;&#x88ab;&#x4f7f;&#x7528",{"_index":1258,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x52a0;&#x6cd5",{"_index":187,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x52a8;&#x6001;&#x503c;&#x53ef;&#x4ee5;&#x88ab;&#x8d4b;&#x503c;&#x7ed9;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#xff1b;&#x800c;&#x4efb;&#x4f55;&#x503c;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5230;&#x52a8;&#x6001;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x6709;&#x4e00;&#x4e9b;&#x7f3a;&#x70b9;&#xff1a",{"_index":930,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x52a8;&#x6001;&#x76ee;&#x6807;&#x7684;&#x7c7b;&#x578b;&#x4f7f;&#x7528;&#x66f4;&#x4e3a;&#x5bbd;&#x677e;&#xff0c;&#x5e76;&#x5141;&#x8bb8;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x4f7f;&#x7528",{"_index":563,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x52a8;&#x6001;&#x7c7b;&#x578b",{"_index":213,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x52a8;&#x6001;&#x7c7b;&#x578b;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff08;&#x7b2c;2.2&#x8282;&#xff09",{"_index":743,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x52a8;&#x6001;&#x7c7b;&#x578b;&#xff1a;&#x4e00;&#x4e2a;&#x4e07;&#x80fd;&#x7c7b;&#x578b;&#xff0c;&#x53ef;&#x4ee5;&#x548c;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x517c;&#x5bb9",{"_index":85,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x5305;&#x540d",{"_index":2341,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x5305;&#x56f4;&#x5728;&#x82b1;&#x62ec;&#x53f7",{"_index":505,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x5339;&#x914d;&#x6a21;&#x5f0f;&#x5728",{"_index":1284,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x5339;&#x914d;&#xff08;&#x7b2c;6.4&#x8282;&#xff09",{"_index":1285,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x533f;&#x540d;&#x7ed3;&#x6784;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x7ec4;&#x7ec7;&#x6570;&#x636e;&#xff0c;&#x800c;&#x4e0d;&#x7528;&#x663e;&#x5f0f;&#x5730;&#x521b;&#x5efa;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x4e0b;&#x9762;&#x7684;&#x793a;&#x4f8b;&#x521b;&#x5efa;&#x4e86;&#x4e00;&#x4e2a;&#x7ed3;&#x6784;&#xff0c;&#x5305;&#x542b;&#x4e24;&#x4e2a;&#x5b57;&#x6bb5",{"_index":762,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x533f;&#x540d;&#x7ed3;&#x6784;&#x7684;&#x5b57;&#x6bb5;&#x50cf;&#x7c7b;&#x4e00;&#x6837;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x70b9;&#x53f7;&#x64cd;&#x4f5c;&#x7b26",{"_index":780,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x533f;&#x540d;&#x7ed3;&#x6784;&#xff08;&#x7b2c;2.5&#x8282",{"_index":1464,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x533f;&#x540d;&#x7ed3;&#x6784;&#xff08;&#x7b2c;2.5&#x8282;&#xff09",{"_index":967,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x534f;&#x53d8",{"_index":1755,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x5355;&#x5f62;&#x7c7b;&#x578b;&#xff1a;&#x4e00;&#x4e2a",{"_index":87,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x5355;&#x5f62;&#xff08;&#x7b2c;2.9&#x8282;&#xff09",{"_index":859,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5355;&#x5f62;&#xff08;&#x7b2c;2.9&#x8282;&#xff09;&#x3002;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x7ed1;&#x5b9a;&#x5230;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#xff0c;&#x4f46;&#x662f;&#x4e00;&#x6b21;&#x53ea;&#x6709;&#x4e00;&#x4e2a;&#x3002;&#x53ef;&#x4ee5;&#x662f;&#x663e;&#x5f0f;&#x5730;&#x89e6;&#x53d1;&#x7ed1;&#x5b9a;&#xff0c;&#x901a;&#x8fc7;&#x8c03;&#x7528;&#x6784;&#x9020;&#x51fd;&#x6570;&#x5e76;&#x663e;&#x5f0f;&#x5730;&#x63d0;&#x4f9b;&#x7c7b;&#x578b;&#xff08",{"_index":1589,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x5355;&#x5f62;&#xff08;&#x7b2c;2.9&#x8282;&#xff09;&#x7684;&#x7c7b;&#x578b;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x884c;&#x4e3a;&#x5728;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6&#x8282;&#xff09;&#x4e2d;&#x8be6;&#x8ff0;&#x3002",{"_index":1837,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{}}}],["x5355;&#x5f62;&#xff08;&#x7b2c;2.9&#x8282;&#xff09;&#xff0c;&#x4e00;&#x4e2a;&#x8fd8;&#x4e0d;&#x77e5;&#x9053;&#x5176;&#x7c7b;&#x578b;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x4e0b;&#x4e00;&#x884c",{"_index":2115,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x5355;&#x5f62;&#xff08;monomorph",{"_index":1912,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x5373",{"_index":227,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x53c2;&#x6570;&#x548c",{"_index":1609,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x53c2;&#x6570;&#x90fd;&#x662f;&#x7c7b;&#x578b",{"_index":1610,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x53cd;&#x4e4b;&#x4e5f;&#x4e00;&#x6837;&#xff1a;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x58f0;&#x660e;&#x5176;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x4e3a",{"_index":1862,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x53cd;&#x5c04;&#xff08;&#x7b2c;10.7&#x8282;&#xff09",{"_index":955,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x53cd;&#x5c04;&#xff08;10.7&#xff09",{"_index":630,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x53cd;&#x5c04;api",{"_index":518,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x53d8;&#x91cf",{"_index":2127,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x53d8;&#x91cf;&#x5b57;&#x6bb5",{"_index":654,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x53e6;&#x4e00;&#x79cd;&#x7684;&#x7c7b;&#x5b57;&#x6bb5;&#x8f6c;&#x6362;&#x6709;&#x76f8;&#x540c;&#x7684;&#x8bed;&#x4e49;&#xff0c;&#x4f46;&#x662f;&#x5b9a;&#x4e49;&#x5b8c;&#x5168;&#x4e0d;&#x540c;&#xff1a",{"_index":1070,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x53e6;&#x5916;&#x4e00;&#x4e2a;&#x7ed3;&#x6784;&#x65f6",{"_index":1781,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x53e6;&#x5916;&#xff0c",{"_index":128,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["x53e6;&#x5916;&#xff0c;&#x672c;&#x6587;&#x6863;&#x4e3b;&#x8981;&#x57fa;&#x4e8",{"_index":14,"title":{},"body":{"index.html#关于本文档":{}}}],["x53ea;&#x6709;&#x4e00;&#x4e2a",{"_index":1752,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x53ea;&#x8bfb",{"_index":724,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x53ef;&#x4ee5;&#x4ea4;&#x66ff;&#x4f7f;&#x7528;&#x3002;&#x5728",{"_index":336,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x53ef;&#x4ee5;&#x6539;&#x5199;&#x4e3a;&#xff1a",{"_index":737,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x53ef;&#x4ee5;&#x662f;&#x4ece;&#x6216;&#x8005;&#x5230",{"_index":1059,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x53ef;&#x4ee5;&#x7ed9;&#x4efb;&#x4f55;&#x5176;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x547d;&#x540d;&#xff1a",{"_index":1471,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x53ef;&#x4ee5;&#x88ab;&#x5199;&#x5165;&#xff0c;&#x5982;&#x901a;&#x8fc7;&#x5b83;&#x4eec;&#x7684",{"_index":1737,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x53ef;&#x4ee5;&#x88ab;&#x770b;&#x4f5c;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x7684;&#x901a;&#x7528;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x3002;&#x7136;&#x800c;&#xff0c;&#x8fd9;&#x4e2a;&#x5173;&#x7cfb;&#x4e0d;&#x4f1a;&#x53cd;&#x5e94;&#x5728;&#x751f;&#x6210;&#x7684;&#x4ee3;&#x7801;&#x4e2d;&#x3002",{"_index":537,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{}}}],["x53ef;&#x4ee5;&#x8ba4;&#x4e3a;&#x662f",{"_index":2339,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x53ef;&#x4ee5;&#x8d4b;&#x503c;&#x5230",{"_index":108,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":970,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x53ef;&#x7528;&#x7684;&#x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09",{"_index":2178,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x53ef;&#x7a7a",{"_index":332,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x53ef;&#x9009;&#x53c2;&#x6570;&#x901a;&#x8fc7;&#x5728;&#x53c2;&#x6570;&#x6807;&#x8bc6;&#x7b26;&#x524d;&#x9762;&#x524d;&#x7f6e;&#x4e00;&#x4e2a;&#x95ee;&#x53f7",{"_index":835,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x53ef;&#x9009;&#x53c2;&#x6570;&#xff08;&#x7b2c;2.6.1&#x8282;&#xff09",{"_index":805,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x53ef;&#x9009;&#x5b57;&#x6bb5",{"_index":1481,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x53f3;&#x4f4d;&#x79fb",{"_index":205,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x540c;&#x6837;&#xff0c;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x4e0d;&#x80fd;&#x88ab;&#x8ddf",{"_index":579,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x540d;&#x4e3a",{"_index":1513,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x540e;&#x9762;&#x662f;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7684;&#x51fd;&#x6570;&#x5b57;&#x6bb5;&#x53eb;&#x505a",{"_index":510,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x548c",{"_index":129,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x548c;&#x7ed3;&#x6784;&#x770b;&#x8d77;&#x6765;&#x90a3;&#x4e48;&#x8fde;&#x8d2f;&#x7684;&#x539f;&#x56e0;&#xff1a",{"_index":1475,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x548c;&#x8bb8;&#x591a;&#x9762;&#x5411;&#x5bf9;&#x8c61;&#x8bed;&#x8a00;&#x7c7b;&#x4f3c;&#xff0c;&#x7c7b;&#x662f;&#x5927;&#x591a;&#x6570",{"_index":496,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x548c;myvalue_int",{"_index":1673,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x5706;&#x62ec;&#x53f7",{"_index":1420,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5728",{"_index":156,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5728;&#x4e00;&#x4e2a;&#x4e0d;&#x4f7f;&#x7528;&#x9ed8;&#x8ba4;&#x503c;&#x53ef;&#x80fd;&#x6709;&#x65f6;&#x66f4;&#x53ef;&#x884c;&#x7684;&#x65b9;&#x6848;&#x7684;&#x6027;&#x80fd;&#x5173;&#x952e;&#x4ee3;&#x7801;&#x4e2d;&#xff0c;&#x8fd9;&#x5e94;&#x8be5;&#x88ab;&#x8003;&#x8651;&#x3002",{"_index":814,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x5728;&#x4e00;&#x4e2a;&#x7c7b;&#x7684;&#x5b9a;&#x4e49;&#x4e2d;&#x4f7f;&#x7528;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x65f6;&#xff0c;&#x9664;&#x975e;&#x52a0;&#x5165;&#x4e86;&#x7ea6;&#x675f;&#xff08;&#x7b2c;3.2.1&#x8282;&#xff09;&#x5426;&#x5219;&#x8fd9;&#x4e9b;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x90fd;&#x6ca1;&#x6709;&#x6307;&#x5b9a;&#x7279;&#x5b9a;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x56e0;&#x6b64;&#x7f16;&#x8bd1;&#x5668;&#x5fc5;&#x987b;&#x5047;&#x5b9a;&#x8fd9;&#x4e9b;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x4e3a;&#x4efb;&#x610f;&#x7c7b;&#x578b;&#x4f7f;&#x7528;&#x3002;&#x56e0;&#x6b64;&#xff0c;&#x4e0d;&#x80fd;&#x8bbf;&#x95ee;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x7684;&#x5b57;&#x6bb5;&#x6216;&#x8005",{"_index":1592,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x5728;&#x4e00;&#x4e2a;&#x7ed9;&#x5b9a;&#x6a21;&#x5757;&#xff0c;&#x7c7b;&#x578b;&#x4ece;&#x5934;&#x81f3;&#x5c3e;&#x68c0;&#x67e5",{"_index":2215,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5728;&#x4e00;&#x4e9b;&#x5176;&#x5b83;&#x7684;&#x7f16;&#x7a0b;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;argu",{"_index":335,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x5728;&#x4e00;&#x5f00;&#x59cb;&#x88ab;&#x521d;&#x59cb;&#x5316;&#x4e3a;&#x4e00;&#x4e2a;&#x7a7a;&#x7684",{"_index":2128,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x5728;&#x4e0a;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x7b2c;&#x4e00;&#x4e2a",{"_index":2113,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x5728;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x65b9;&#x6cd5",{"_index":1077,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5728;&#x5b50;&#x7c7b;&#x4e2d;&#x5b9a;&#x4e49;&#x5b83;&#x4eec;&#x81ea;&#x5df1;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x5e76;&#x4e0d;&#x662f;&#x5fc5;&#x987b;&#x7684;&#xff0c;&#x4f46;&#x662f;&#x5982;&#x679c;&#x5b9a;&#x4e49;&#x4e86;&#xff0c;&#x5219;&#x8c03;&#x7528",{"_index":310,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x5728;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5230;&#x6765;&#x4e4b;&#x524d;&#xff0c;&#x6240;&#x6709;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x90fd;&#x5b9e;&#x73b0;&#x4e3a;&#x5916;&#x90e8;&#x7c7b;&#x6216;&#x8005;&#x679a;&#x4e3e;&#x3002;&#x867d;&#x7136;&#x8fd9;&#x5f88;&#x597d;&#x7684;&#x8003;&#x8651;&#x4e86;&#x67d0;&#x4e9b;&#x65b9;&#x9762;&#xff0c;&#x5982",{"_index":1450,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5728;&#x6784;&#x5efa;&#x6cdb;&#x578b;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x7b2c;3.3.1&#x8282;&#xff09;&#x88ab;&#x5f15;&#x5165;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x6211;&#x4eec;&#x770b;&#x5230;&#x4e86;&#x53e6;&#x4e00;&#x4e2a;&#x81ea;&#x4e0a;&#x800c;&#x4e0b;&#x63a8;&#x65ad;&#x7684;&#x6709;&#x8da3;&#x7528;&#x6cd5",{"_index":2025,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x5728;&#x68c0;&#x7d22;&#x901a;&#x8fc7;&#x5206;&#x914d",{"_index":445,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x5728;&#x7c7b;&#x8bb0;&#x6cd5;&#xff08;class",{"_index":674,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x5728;&#x7f16;&#x7a0b;&#x8bed;&#x8a00;&#x4e2d;&#x6709;&#x4e00;&#x4e2a;&#x5355;&#x72ec;&#x3001;&#x6574;&#x6d01;&#x7684;&#x4e3a;&#x7a7a;&#x6027;&#x5b9a;&#x4e49;&#x975e;&#x5e38;&#x5e38;&#x89c1;&#x3002;&#x7136;&#x800c;&#xff0c;hax",{"_index":552,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5728;&#x8ba8;&#x8bba",{"_index":1463,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x5728;&#x8f93;&#x51fa;&#x4e2d;&#x5b8c;&#x5168;&#x6d88;&#x5931;&#x4e86;&#xff0c;&#x5269;&#x4e0b;&#x7684;&#x53ea;&#x662f;&#x4e00;&#x4e2a;&#x5b83;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7684;&#x503c;&#xff0c;int&#x3002;&#x56e0;&#x4e3a",{"_index":1439,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5728;&#x8fd9;&#x4e00;&#x70b9;&#x4e0a;&#xff0c;&#x770b;&#x5230;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x5b57;&#x6bb5;&#x7684;&#x8c03;&#x7528;&#x88ab;&#x63d2;&#x5165;&#x5230;&#x8f93;&#x5165;&#x5185;&#x5bb9;&#x5e94;&#x8be5;&#x4e0d;&#x4f1a;&#x592a;&#x8ba9;&#x4eba;&#x5403;&#x60ca;&#xff1a",{"_index":1194,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x5728;&#x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x6211;&#x4eec;&#x5b9e;&#x9645;&#x4e0a;&#x5bfc;&#x5165;&#x4e86;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#xff0c;&#x800c;&#x4e0d;&#x53ea;&#x662f;&#x6a21;&#x5757;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x6240;&#x6709;&#x5728;&#x88ab;&#x5bfc;&#x5165;&#x7684;&#x6a21;&#x5757;&#x4e2d;&#x5b9a;&#x4e49;&#x7684;&#x7c7b;&#x578b;&#x90fd;&#x662f;&#x53ef;&#x7528;&#x7684;&#x3002",{"_index":2274,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5728;&#x8fd9;&#x4e2a;&#x7279;&#x6b8a;&#x7684;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x5728",{"_index":1922,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x5728;&#x8fd9;&#x6bb5;&#x4ee3;&#x7801;&#x4e2d;&#x53d8;&#x91cf",{"_index":471,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x5728;&#x9488;&#x5bf9;&#x65b9;&#x6cd5;&#x7684;&#x65f6;&#x5019;&#x4f7f;&#x7528;&#xff0c;&#x800c",{"_index":338,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x5728;&#x9759;&#x6001;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x8f93;&#x51fa",{"_index":597,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5728;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":584,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5730;&#x5740",{"_index":13,"title":{},"body":{"index.html#关于本文档":{}}}],["x57fa;&#x672c;&#x7c7b;&#x578b;&#x5305;&#x62ec",{"_index":262,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x58f0;&#x660e",{"_index":1066,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x58f0;&#x660e;&#x4e86;&#x4e00;&#x4e2a",{"_index":651,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x58f0;&#x660e;&#x7684;&#x53d8;&#x91cf;&#x5f88;&#x76f8;&#x4f3c;&#xff0c;&#x4f46;&#x662f;&#x6709;&#x51e0;&#x4e2a;&#x4f18;&#x70b9;&#xff1a",{"_index":1282,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x58f0;&#x660e;&#x7684;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#xff08;&#x7b2c;5.10&#x8282;&#xff09;&#xff08;&#x5305;&#x62ec;&#x51fd;&#x6570;&#x53c2;&#x6570;&#xff09",{"_index":2176,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x58f0;&#x660e;&#xff09;&#x3002",{"_index":1069,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x590d;&#x5408;&#x7c7b;&#x578b;&#x662f;&#x6307;&#x62e5;&#x6709;&#x5b50;&#x7c7b;&#x578b;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x5305;&#x62ec;&#x4f7f;&#x7528",{"_index":91,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x591a;&#x4e2a;&#x7ed3;&#x6784;&#x53ef;&#x4ee5;&#x88ab;&#x540c;&#x65f6;&#x6269;&#x5c55;&#xff1a",{"_index":733,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x5927;&#x4e8e",{"_index":197,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x5927;&#x4e8e;&#x64cd;&#x4f5c;&#x7b26",{"_index":721,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x5927;&#x4e8e;&#x7b49;&#x4e8",{"_index":198,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x5927;&#x591a;&#x6570;&#x65f6;&#x5019;&#xff0c;&#x7c7b;&#x578b;&#x81ea;&#x5df1;&#x88ab;&#x63a8;&#x65ad;&#xff0c;&#x7136;&#x540e;&#x53ef;&#x4ee5;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x4e00;&#x4e2a;&#x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x7136;&#x800c;&#x5728;&#x4e00;&#x4e9b;&#x5730;&#x65b9;&#xff0c;&#x4e00;&#x4e2a;&#x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#x53ef;&#x80fd;&#x88ab;&#x7528;&#x6765;&#x5f71;&#x54cd;&#x63a8;&#x65ad;&#x3002;&#x7136;&#x540e;&#x6211;&#x4eec;&#x8ba8;&#x8bba;&#x81ea;&#x4e0a;&#x800c;&#x4e0b;&#x7684;&#x63a8;&#x65ad;&#x3002",{"_index":2012,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x5927;&#x62ec;&#x53f7",{"_index":1422,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5931;&#x8d25",{"_index":2206,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x4e0b;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x4f5c;&#x4e3a;&#x672c;&#x8282;&#x5269;&#x4f59;&#x90e8;&#x5206;&#x7684;&#x57fa;&#x7840;&#xff1a",{"_index":501,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x5982;&#x4e0b;&#x7684;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x5c55;&#x793a;&#x76f4;&#x63a5;&#x8f6c;&#x6362;&#x7684;&#x4e00;&#x4e2a;&#x4f8b;&#x5b50;&#xff1a",{"_index":1057,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5982;&#x4e0b;&#x7684;&#x8d4b;&#x503c;&#x662f;&#x5141;&#x8bb8;&#x7684;&#xff1a",{"_index":1806,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x5982;&#x524d;&#x6240;&#x8ff0;&#xff0c;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x662f;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x65f6;&#x529f;&#x80fd;&#xff0c;&#x6240;&#x4ee5;&#x770b;&#x770b;&#x4e0a;&#x9762;&#x793a;&#x4f8b;&#x5b9e;&#x9645;&#x751f;&#x6210;&#x7684;&#x5185;&#x5bb9;&#x4f1a;&#x5f88;&#x6709;&#x8da3;&#x3002;&#x4e00;&#x4e2a;&#x5408;&#x9002;&#x7684;&#x76ee;&#x6807;&#x662f",{"_index":1435,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5982;&#x679c",{"_index":247,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a",{"_index":591,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x6709;&#x5176;&#x5b83;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x6216;&#x8005;&#x8fd4;&#x56de;&#x503c;&#xff0c;&#x5219;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x62ec;&#x53f7;&#x5bf9;&#x5b83;&#x4eec;&#x8fdb;&#x884c;&#x6b63;&#x786e;&#x7684;&#x5206;&#x7ec4;&#x3002;&#x4f8b;&#x5982;&#xff0c",{"_index":883,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x547d;&#x540d;&#x4e3a",{"_index":2189,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#x547d;&#x540d;&#x4e3a;i&#x58f0;&#x660e;&#x5728;&#x4e00;&#x4e2a;&#x5bfc;&#x5165;&#x7684;&#x679a;&#x4e3e;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":2196,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x540d;&#x4e3a",{"_index":2208,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x540d;&#x4e3a;i&#x5728;&#x9876;&#x5c42;&#x53ef;&#x7528;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":2212,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x6216;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x5728;&#x4e00;&#x4e2a;&#x5bfc;&#x5165;&#x5b83;&#x7684;&#x6a21;&#x5757;&#x4e2d;&#x7ecf;&#x5e38;&#x4f7f;&#x7528;&#xff0c;&#x53ef;&#x4ee5;&#x4e3a;&#x5b83;&#x5f15;&#x5165;&#x522b;&#x540d;&#x4e3a;&#x4e00;&#x4e2a;&#x7b80;&#x77ed;&#x7684;&#x540d;&#x5b57;&#x3002;&#x8fd9;&#x4e5f;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x901a;&#x8fc7;&#x7ed9;&#x5b9a;&#x4e00;&#x4e2a;&#x552f;&#x4e00;&#x7684;&#x6807;&#x8bc6;&#x7b26;&#x6765;&#x6d88;&#x9664;&#x547d;&#x540d;&#x51b2;&#x7a81;&#x3002",{"_index":2302,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x8def;&#x5f84;&#x5728;&#x4e00;&#x4e2a",{"_index":2266,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x6269;&#x5c55;&#x5e26;&#x6709;&#x7b2c;&#x4e00;&#x4e2a;&#x5f53;&#x524d;&#x7c7b;&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x53ef;&#x7528;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":2194,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x65b9;&#x6cd5",{"_index":2197,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x4e00;&#x4e2a;enum&#x88ab;&#x5bfc;&#x5165;&#xff08;&#x76f4;&#x63a5;&#x6216;&#x4f5c;&#x4e3a;&#x6a21;&#x5757;&#x7684;&#x4e00;&#x90e8;&#x5206;&#x88ab;&#x5bfc;&#x5165;&#xff09;&#xff0c;&#x6240;&#x6709;&#x5b83;&#x7684;enum&#x6784;&#x9020;&#x51fd;&#x6570;&#xff08;&#x7b2c;2.4.1&#x8282;&#xff09;&#x540c;&#x6837;&#x4e5f;&#x88ab;&#x5bfc;&#x5165;&#xff08;&#x8fd9;&#x5c31;&#x662f;&#x4e3a;&#x4ec0;&#x4e48;&#x5728;&#x4e0a;&#x9762;&#x4f8b;&#x5b50;&#x4e2d;&#x5141;&#x8bb8",{"_index":2284,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5982;&#x679c;&#x4e0a;&#x9762;&#x6ce8;&#x91ca;&#x6389;&#x7684;&#x884c;&#x6ca1;&#x6709;&#x88ab;&#x6ce8;&#x91ca;&#xff0c;&#x7a0b;&#x5e8f;&#x4e0d;&#x4f1a;&#x901a;&#x8fc7;&#x7f16;&#x8bd1;&#xff0c;&#x56e0;&#x4e3a",{"_index":484,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x5982;&#x679c;&#x53ea;&#x6709;&#x4e00;&#x7ec4;&#x6709;&#x9650;&#x7684;&#x503c;&#x88ab;&#x5141;&#x8bb8;&#x4f7f;&#x7528;&#xff0c;&#x90a3;&#x4e48;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x662f;&#x4e00;&#x4e2a;&#x4e0d;&#x9519;&#x7684;&#x9009;&#x62e9;&#x3002;&#x4e2a;&#x4f53;&#x7684",{"_index":442,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x5982;&#x679c;&#x5b57;&#x6bb5;&#x662f;&#x901a;&#x8fc7",{"_index":934,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5982;&#x679c;&#x5f53;&#x524d;&#x7684;&#x5305;&#x5305;&#x542b;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x540d;&#x4e3a",{"_index":2210,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x5f53;&#x524d;&#x7684;&#x5b57;&#x6bb5;&#x662f;&#x9759;&#x6001;&#x7684;&#xff0c;&#x8df3;&#x5230;6",{"_index":2191,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x5f53;&#x524d;&#x7684;&#x7c7b;&#x6216;&#x8005;&#x4efb;&#x4f55;&#x5b83;&#x7684;&#x7236;&#x7c7b;&#x6709;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#x547d;&#x540d;&#x4e3a",{"_index":2192,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x5f53;&#x524d;&#x7684;&#x7c7b;&#x6709;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x547d;&#x540d;&#x4e3a",{"_index":2195,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x60f3;&#x8981;&#x5b9a;&#x4e49;&#x4e00;&#x4e2a",{"_index":646,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x5982;&#x679c;&#x6a21;&#x5757;&#x548c;&#x7c7b;&#x578b;&#x540d;&#x662f;&#x76f8;&#x540c;&#x7684;&#xff0c;&#x91cd;&#x590d;&#x7684;&#x90e8;&#x5206;&#x53ef;&#x4ee5;&#x88ab;&#x7701;&#x7565;&#xff0c;&#x4f7f;&#x7528",{"_index":2345,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x5982;&#x679c;&#x7c7b;&#x578b;&#x540d;&#x4e3a",{"_index":2200,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;&#x8868;&#x8fbe;&#x5f0f;&#x4e0d;&#x662f",{"_index":2202,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;i",{"_index":2186,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;i&#x548c;&#x8fd9;&#x4e2a;&#x76f8;&#x7b49;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x8fd9;&#x4e2a;&#x5e38;&#x91cf;&#x5e76;&#x505c;&#x6b62",{"_index":2204,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5982;&#x679c;i&#x901a;&#x8fc7;&#x4e00;&#x4e2a;&#x5c0f;&#x5199;&#x5b57;&#x6bcd;&#x5f00;&#x59cb;&#xff0c;&#x8df3;&#x5230;11",{"_index":2199,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5b50;&#x7c7b;&#x5206;&#x914d;&#x5230;&#x7236;&#x7c7b",{"_index":1807,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x5b57;&#x6bb5;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x50cf;&#x7c7b;&#x4e00;&#x6837;&#x5b9e;&#x4f8b;&#x5316;&#x548c;&#x4f7f;&#x7528;&#xff1a",{"_index":1434,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5b57;&#x6bb5;&#x548c",{"_index":1431,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5b57;&#x6bb5;&#x662f;&#x4e0d;&#x53ef;&#x7528;&#x7684;&#x3002",{"_index":1251,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5b57;&#x6bb5;&#x7684;&#x533f;&#x540d;&#x7ed3;&#x6784;&#x3002;&#x7531;&#x4e8e;&#x5b83;&#x6ca1;&#x6709;&#x5b57;&#x6bb5",{"_index":791,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x5b57;&#x6bb5;&#x7684;&#x987a;&#x5e8f;&#x662f;&#x672a;&#x88ab;&#x5b9a;&#x4e49;&#x7684;&#x3002;&#x5728",{"_index":1199,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x4e0a;&#x88ab;&#x63a8;&#x65ad;&#x4e3a;&#x4e00;&#x4e2a",{"_index":966,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5b57;&#x6bb5;&#xff0c;&#x4f7f;&#x5f97;&#x5c0f;&#x5199;&#x7684",{"_index":1203,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x5b66;&#x4e60;&#x4e86;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x73b0;&#x5728;&#x770b;&#x770b;&#x5b83;&#x4eec;&#x4e4b;&#x95f4;&#x5982;&#x4f55;&#x4ea4;&#x4e92;&#x3002;&#x6211;&#x4eec;&#x4ece;&#x5f15;&#x5165",{"_index":48,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x5b83;&#x4eec;&#x6ca1;&#x6709;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x3002",{"_index":1300,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5b83;&#x4eec;&#x88ab;&#x5141;&#x8bb8;&#x6ca1;&#x6709;&#x8868;&#x8fbe;&#x5f0f;&#x5f62;&#x5f0f;&#x7684",{"_index":1303,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5b83;&#x4eec;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x53ef;&#x7a7a;&#x7684;&#xff0c;&#x9664;&#x975e;&#x5e26;&#x6709",{"_index":1301,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5b83;&#x7531;&#x4e24;&#x4e2a",{"_index":507,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x5b9a;&#x4e49",{"_index":29,"title":{},"body":{"index.html#关于本文档":{},"2.类型/2.类型.html#2-类型":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5b9a;&#x4e49;&#x4e00;&#x4e2a;&#x5141;&#x8bb8;&#x5230",{"_index":1095,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5b9a;&#x4e49;&#x4e86;&#x4e00;&#x4e2a;&#x5141;&#x8bb8;&#x5230",{"_index":1091,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5b9a;&#x4e49;&#x540d;&#x79f0",{"_index":30,"title":{},"body":{"index.html#关于本文档":{}}}],["x5b9a;&#x4e49;&#x63cf;&#x8ff0",{"_index":31,"title":{},"body":{"index.html#关于本文档":{}}}],["x5b9a;&#x4e49;&#xff1a",{"_index":583,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5b9a;&#x4e49;&#xff1a;$typ",{"_index":2111,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x4e00;&#x81f4;&#x6027",{"_index":1906,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x534f;&#x53d8",{"_index":1756,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x6297;&#x53d8;&#x6027",{"_index":1758,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x6a21;&#x5757",{"_index":2335,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x79c1;&#x6709;&#x7c7b;&#x578b",{"_index":2073,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x7c7b;&#x578b;&#x8def;&#x5f84",{"_index":2350,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316",{"_index":1774,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x5b9a;&#x4e49;&#xff1a;&#x9884;&#x671f;&#x7c7b;&#x578b",{"_index":2015,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x5b9e;&#x4f8b;&#x5316",{"_index":1600,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x5b9e;&#x73b0",{"_index":906,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x5b9e;&#x73b0;&#x7684;&#x3002;&#x867d;&#x7136;&#x8fd9;&#x53ef;&#x4ee5;&#x5728;&#x975e;&#x5b8f;&#x4ee3;&#x7801;&#x5f88;&#x597d;&#x7684;&#x8fd0;&#x884c;&#xff0c;&#x4f46;&#x662f;&#x5982;&#x679c;&#x8fd9;&#x4e9b;&#x529f;&#x80fd;&#x4ece;&#x5b8f;&#x5185;&#x90e8;&#x8fd0;&#x884c;&#x5b83;&#x4f1a;&#x5f15;&#x8d77;&#x95ee;&#x9898;&#x3002;&#x8fd9;&#x4e2a;&#x5b9e;&#x73b0;&#x540e;&#x6765;&#x88ab;&#x79fb;&#x5230;&#x7f16;&#x8bd1;&#x5668;&#x4e2d;&#x3002",{"_index":1260,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5b9e;&#x73b0;&#xff08;&#x7b2c;2.3.3&#x8282;&#xff09",{"_index":899,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x5b9e;&#x9645;&#x4e0a;&#x5c31;&#x662f;&#x7ed3;&#x6784;&#x7c7b;&#x578b;&#x3002",{"_index":1470,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x5bf9;&#x4e8e;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x662f;&#x6709;&#x6548;&#x7684;&#x503c;&#xff0c;&#x5219;&#x8ba4;&#x4e3a;&#x7c7b;&#x578b;&#x662f;&#x53ef;&#x7a7a;&#x7684;&#x3002",{"_index":551,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5bf9;&#x4e8e;&#x5bfc;&#x5165;&#xff0c;&#x5982;&#x679c;&#x540d;&#x5b57;&#x76f8;&#x540c;&#x5219;&#x4e3a;&#x5339;&#x914d",{"_index":2216,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5bf9;&#x4e8e;&#x7b2c;10&#x6b65;&#xff0c;&#x4e5f;&#x9700;&#x8981;&#x5b9a;&#x4e49;&#x7c7b;&#x578b;&#x7684;&#x89e3;&#x6790;&#x987a;&#x5e8f;&#xff1a",{"_index":2207,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5bf9;&#x4e8e;&#x8fd9;&#x4e2a;&#x7b97;&#x6cd5;&#x7684;&#x7b2c;&#x4e00;&#x6b65;&#xff0c;&#x548c;&#x4e4b;&#x524d;&#x7684;&#x7b2c;5&#x90e8;&#x7b2c;7&#x6b65;&#xff0c;&#x5bfc;&#x5165;&#x51b3;&#x8bae;&#x7684;&#x987a;&#x5e8f;&#x5f88;&#x91cd;&#x8981;&#xff1a",{"_index":2213,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5bf9;&#x4e8e;&#x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09;&#xff0c;&#x5982;&#x679c;&#x540d;&#x5b57;&#x76f8;&#x540c;&#x5e76;&#x4e14;&#x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x7edf;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09;&#x5219;&#x4e3a;&#x5339;&#x914d;&#x3002;&#x5728;&#x4e00;&#x4e2a;&#x7ed9;&#x5b9a;&#x7c7b;&#x578b;&#x4e2d;&#x88ab;&#x7528;&#x4f5c;&#x9759;&#x6001;&#x6269;&#x5c55;&#x7684;&#x5b57;&#x6bb5;&#x4ece;&#x5934;&#x81f3;&#x5c3e;&#x8fdb;&#x884c;&#x68c0;&#x67e5;&#x3002",{"_index":2217,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5bf9;&#x8c61;&#x58f0;&#x660e",{"_index":1949,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x5bf9;&#x8c61;&#x8bb0;&#x6cd5",{"_index":623,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x5bfc;&#x5165;&#x6765;&#x7f29;&#x77ed;&#x5b83;&#x3002;&#x8fd9;&#x53ef;&#x4ee5;&#x4f7f;&#x6211;&#x4eec;&#x7701;&#x7565;&#x5305;&#x540d;&#x6765;&#x4f7f;&#x7528;&#x7c7b;&#x578b;&#xff1a",{"_index":2268,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5bfc;&#x5165;&#x7684;&#x6a21;&#x5757;&#x548c;&#x9759;&#x6001;&#x6269;&#x5c55;&#x4ece;&#x5e95;&#x90e8;&#x5230;&#x5934;&#x90e8;&#x68c0;&#x67e5;&#xff0c;&#x7b2c;&#x4e00;&#x4e2a;&#x5339;&#x914d;&#x7684;&#x88ab;&#x91c7;&#x7528",{"_index":2214,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5bfc;&#x5165;&#xff08;&#x7b2c;3.7.2&#x8282;&#xff09;&#x7684;&#x6a21;&#x5757;&#xff0c;&#x7c7b;&#x578b;&#x548c;&#x9759;&#x6001;&#x5b57;&#x6bb5",{"_index":2177,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5c06;&#x4e00;&#x4e2a",{"_index":2116,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x5c0f;&#x4e8e",{"_index":195,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x5c0f;&#x4e8e;&#x64cd;&#x4f5c;&#x7b26;&#x6ca1;&#x6709;&#x5b9e;&#x73b0",{"_index":1160,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5c0f;&#x4e8e;&#x7b49;&#x4e8",{"_index":196,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x5c1d;&#x8bd5;&#x5728",{"_index":939,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5c3d;&#x7ba1",{"_index":962,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5c3d;&#x7ba1;&#x8fd9;&#x6837;&#x7684;&#x7c7b;&#x578b;&#x5316;&#x975e;&#x5e38;&#x65b9;&#x4fbf;&#xff0c;&#x4f46;&#x662f;&#x5927;&#x91cf;&#x5730;&#x4f7f;&#x7528;&#x53ef;&#x80fd;&#x5f71;&#x54cd;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x6027;&#x80fd;&#xff0c;&#x5728;&#x6027;&#x80fd;&#x5f71;&#x54cd;&#xff08;&#x7b2c;2.5.4&#x8282;&#xff09;&#x90e8;&#x5206;&#x6709;&#x4ecb;&#x7ecd;&#x3002",{"_index":1792,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x5c55;&#x793a;&#x5982;&#x4f55;&#x63d0;&#x53d6;&#x6784;&#x9020;&#x51fd;&#x6570;&#x4e2d;&#x7684;&#x53c2;&#x6570;&#x503c;&#xff1a;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x4f5c;&#x4e3a;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x4f7f;&#x7528;&#x5728",{"_index":454,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x5c5e;&#x6027",{"_index":725,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x5c5e;&#x6027;&#x4ee5;&#x53ca",{"_index":1523,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x5c5e;&#x6027;&#xff08;&#x7b2c;4.2&#x8282;&#xff09",{"_index":1433,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x5de5;&#x4f5c;&#xff0c",{"_index":1143,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5de5;&#x4f5c;&#xff0c;&#x800c;&#x4e0d;&#x662f;&#x4e3a",{"_index":1146,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x5de6;&#x4f4d;&#x79fb",{"_index":204,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x5df2;&#x7ecf;&#x53d8;&#x6210",{"_index":1672,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x5e26;&#x6709;&#x53c2;&#x6570;&#x7684;&#x679a;&#x4e3e;&#x53ef;&#x4ee5;&#x901a;&#x8fc7",{"_index":210,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x5e38;&#x91cf;&#x5e76;&#x505c;&#x6b62",{"_index":2188,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5e76;&#x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x6587;&#x672c;&#x7684;&#x66ff;&#x6362;&#xff0c;&#x800c;&#x662f;&#x5b9e;&#x9645;&#x4e0a;&#x4e00;&#x4e2a;&#x771f;&#x5b9e;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x5b83;&#x751a;&#x81f3;&#x53ef;&#x4ee5;&#x6709",{"_index":1477,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x5e76;&#x4f20;&#x9012;&#x4e00;&#x4e2a;&#x7a7a;&#x6570;&#x7ec4;&#xff0c;&#x4ee5;&#x53ca;&#x7b2c;8&#x884c;&#x4f20;&#x9012",{"_index":1521,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x5e76;&#x5177;&#x6709;&#x4e00;&#x4e2a",{"_index":1517,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x5e76;&#x672a;&#x62a5;&#x9519;&#xff0c;&#x800c;&#x4f5c;&#x4e3a;&#x7c7b;&#x5b57;&#x6bb5;&#x8fdb;&#x884c;&#x5b9a;&#x4e49;&#x5219;&#x4e0d;&#x80fd;&#x7f16;&#x8bd1;&#xff0c;&#x63d0;&#x793a",{"_index":165,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x5e76;&#x8bbf;&#x95ee;&#x5b83;&#x7684",{"_index":1249,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5e94;&#x8be5;&#x5c3d;&#x91cf;&#x5c11;&#x7684;&#x4f7f;&#x7528",{"_index":953,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x5e94;&#x8be5;&#x662f",{"_index":483,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x5f00;&#x59cb;&#xff0c;&#x5141;&#x8bb8;&#x5728;&#x7c7b;&#x8bb0;&#x6cd5;&#x7684;&#x7ed3;&#x6784;&#x58f0;&#x660e;&#x4e2d;&#x4f7f;&#x7528;&#x95ee;&#x53f7",{"_index":678,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x5f02;&#x6216",{"_index":203,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x5f15;&#x5165;&#x81ea;&#x5b9a;&#x4e49;&#x6838;&#x5fc3;&#x7c7b;&#x578b;&#x62bd;&#x8c61;&#x5728;&#x7528;&#x6237;&#x4ee3;&#x7801;&#x4e2d;&#x662f;&#x5f88;&#x6709;&#x5fc5;&#x8981;&#x7684;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x9700;&#x8981",{"_index":1296,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x5f15;&#x7528;&#x94fe;&#x63a5;&#x3002;&#x5728;&#x4e00;&#x4e9b;&#x60c5;&#x51b5;&#x4e0b;&#xff0c;&#x4e00;&#x4e2a;&#x8f83;&#x4e3a;&#x9760;&#x524d;&#x7684;&#x7ae0;&#x8282;&#x4f1a;&#x4e3a;&#x4e86;&#x4fbf;&#x4e8e;&#x89e3;&#x91ca;&#x76f8;&#x5173;&#x4e3b;&#x9898;&#x800c;&#x4f7f;&#x7528;&#x4e00;&#x4e9b;&#x540e;&#x7eed;&#x7ae0;&#x8282;&#x624d;&#x8be6;&#x7ec6;&#x5c55;&#x5f00;&#x7684;&#x5185;&#x5bb9;&#xff0c;&#x8fd9;&#x4e9b;&#x5185;&#x5bb9;&#x90fd;&#x4f1a;&#x9644;&#x4e0a;&#x76f8;&#x5e94;&#x7684;&#x8df3;&#x8f6c;&#x94fe;&#x63a5;&#xff0c;&#x63d0;&#x524d;&#x9605;&#x8bfb;&#x8fd9;&#x4e9b;&#x4e3b;&#x9898;&#x901a;&#x5e38;&#x6765;&#x8bf4;&#x95ee;&#x9898;&#x4e0d;&#x5927;&#x3002",{"_index":21,"title":{},"body":{"index.html#关于本文档":{}}}],["x5f53;&#x4f7f;&#x7528;&#x8fd9;&#x79cd;&#x7c7b;&#x578b;&#x7684;&#x8f6c;&#x6362;&#xff0c;&#x8f6c;&#x6362;&#x51fd;&#x6570;&#x7684;&#x8c03;&#x7528;&#x88ab;&#x63d2;&#x5165;&#x5728;&#x9700;&#x8981;&#x7684;&#x5730;&#x65b9;&#x3002;&#x5f53;&#x67e5;&#x770b",{"_index":1081,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5f53;&#x4f7f;&#x7528;&#x901a;&#x914d;&#x7b26;&#x5bfc;&#x5165;&#x4e00;&#x4e2a;&#x5305;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x5e76;&#x4e0d;&#x4f1a;&#x7acb;&#x5373;&#x5904;&#x7406;&#x5305;&#x4e2d;&#x7684;&#x6240;&#x6709;&#x6a21;&#x5757;&#x3002;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x8fd9;&#x4e9b;&#x6a21;&#x5757;&#x9664;&#x975e;&#x88ab;&#x660e;&#x786e;&#x4f7f;&#x7528;&#x5426;&#x5219;&#x4e0d;&#x4f1a;&#x88ab;&#x4f5c;&#x4e3a;&#x8f93;&#x51fa;&#x7684;&#x4e00;&#x90e8;&#x5206;&#x751f;&#x6210;&#x3002",{"_index":2300,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x5f53;&#x5206;&#x914d;&#x4e00;&#x4e2a;&#x7c7b;&#x578b",{"_index":1085,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x5f53;&#x524d;&#x5b57;&#x6bb5;&#x7684;&#x79cd;&#x7c7b;&#xff08;static&#x6216;&#x8005;&#x6210;&#x5458;&#xff09",{"_index":2179,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5f53;&#x524d;&#x7c7b;&#x53ca;&#x5176;&#x7236;&#x7c7b;&#x58f0;&#x660e;&#x7684;&#x6210;&#x5458;&#x5b57;&#x6bb5",{"_index":2180,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5f53;&#x524d;&#x7c7b;&#x58f0;&#x660e;&#x7684;&#x9759;&#x6001;&#x5b57;&#x6bb5",{"_index":2181,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x5f53;&#x5305;&#x88c5;&#x4e00;&#x4e2a;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#xff0c;&#x6709;&#x65f6;&#x5019;&#x9700;&#x8981;&#x4fdd;&#x6301;&#x90e8;&#x5206;&#x5b83;&#x7684;&#x529f;&#x80fd;&#x3002;&#x56e0;&#x4e3a;&#x624b;&#x5de5;&#x7f16;&#x5199;&#x8f6c;&#x53d1;&#x51fd;&#x6570;&#x975e;&#x5e38;&#x7e41;&#x7410;&#xff0c;hax",{"_index":1241,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x5f53;&#x5728;&#x52a8;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4f7f;&#x7528",{"_index":567,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5f53;&#x5b9a;&#x4e49;&#x7c7b;&#x4e4b;&#x95f4;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x884c;&#x4e3a;&#x65f6;&#x9700;&#x8981;&#x7279;&#x522b;&#x6ce8;&#x610f;&#xff0c;&#x4e00;&#x81f4;&#x6027;&#x662f;&#x5b9a;&#x5411;&#x68c0;&#x67e5;&#x7684;&#xff1a;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x8d4b;&#x503c;&#x4e00;&#x4e2a;&#x7279;&#x4f8b;&#x5316;&#x7684;&#x7c7b;&#x578b;&#xff08;&#x4f8b;&#x5982;&#x4e00;&#x4e2a;&#x5b50;&#x7c7b;&#xff09;&#x5230;&#x4e00;&#x4e2a;&#x901a;&#x7528;&#x7c7b;&#x578b;&#xff08;&#x4f8b;&#x5982;&#x4e00;&#x4e2a;&#x7236;&#x7c7b;&#xff09;&#xff0c;&#x4f46;&#x662f;&#x53cd;&#x8fc7;&#x6765;&#x662f;&#x4e0d;&#x5141;&#x8bb8;&#x7684;&#x3002",{"_index":1804,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x5f53;&#x6211;&#x4eec;&#x5c1d;&#x8bd5;&#x5206;&#x914d;&#x4e00;&#x4e2a",{"_index":1915,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x5f53;&#x7f16;&#x8bd1;&#x5230;&#x4e00;&#x4e2a",{"_index":851,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x5f53;&#x8003;&#x8651;&#x4e3a;&#x7a7a;&#x6027;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x4e5f;&#x5fc5;&#x987b;&#x88ab;&#x89e3;&#x91ca;&#x3002;&#x7279;&#x522b;&#x5730;&#xff0c;&#x5728;&#x4e0d;&#x80fd;&#x4e3a;&#x7a7a;&#x7684;&#x539f;&#x751f;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x548c;&#x53ef;&#x80fd;&#x4e3a;&#x7a7a;&#x7684",{"_index":326,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x5f62;&#x5f0f;&#x7684;&#x58f0;&#x660e;&#x4e0b;&#xff0c;&#x5219;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":675,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x5f62;&#x5f0f;&#x8c03;&#x7528;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x7ed9;&#x51fa;&#x7684;&#x9519;&#x8bef;&#x4fe1;&#x606f;&#x4e0d;&#x662f;&#x5f88;&#x6709;&#x7528;&#x3002;&#x8fd9;&#x91cc;&#xff0c;&#x6709;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x89e3;&#x91ca;&#xff1a;&#x4e0a;&#x9762;&#x7684;&#x4ee3;&#x7801;&#x4f1a;&#x628a",{"_index":1618,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x5f88;&#x591a;&#x7c7b;&#x578b;&#x5b89;&#x5168;&#x662f;&#x901a;&#x8fc7;&#x68c0;&#x67e5;&#x524d;&#x9762;&#x7684;&#x7c7b;&#x578b;&#x7ec4;&#x7684;&#x4e24;&#x4e2a;&#x6307;&#x5b9a;&#x7c7b;&#x578b;&#x662f;&#x5426;&#x517c;&#x5bb9;&#x6765;&#x5b9e;&#x73b0;&#x7684;&#x3002;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x5c1d;&#x8bd5;&#x5bf9;&#x5b83;&#x4eec;&#x6267;&#x884c;&#x5982;&#x5728",{"_index":54,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x5f97;&#x51fa;&#x4e00;&#x4e2a;&#x7ed3;&#x8bba;&#xff0c;hax",{"_index":574,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x5fc5;&#x987b;&#x7279;&#x522b;&#x6ce8;&#x610f;&#xff0c;&#x5b57;&#x6bb5;&#x540d;&#x6216;&#x8005;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x540d;&#x548c;&#x5305;&#x540d;&#x7684;&#x51b2;&#x7a81;&#xff1a;&#x56e0;&#x4e3a;&#x5b83;&#x4eec;&#x4f18;&#x5148;&#x7ea7;&#x9ad8;&#x4e8e;&#x5305;&#xff0c;&#x5982;&#x679c;&#x6709;&#x4e00;&#x4e2a;&#x540d;&#x4e3a;haxe&#x7684;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#xff0c;&#x5b83;&#x4eec;&#x4f1a;&#x4f1a;&#x963b;&#x6321;&#x6574;&#x4e2a;haxe&#x5305;&#x7684;&#x4f7f;&#x7528;&#x3002",{"_index":2287,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6027;&#x80fd;&#x5173;&#x952e;&#x578b;(perform",{"_index":1665,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x610f;&#x5473;&#x7740;&#x7ed3;&#x6784;&#x53ef;&#x4ee5;&#x88ab;&#x5d4c;&#x5957;&#x548c;&#x6df7;&#x5408;&#xff0c;&#x5982;&#xff1a",{"_index":776,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x6210;&#x4e3a;&#x4e00;&#x4e2a",{"_index":1588,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x6211;&#x4eec;&#x4f1a;&#x4f7f;&#x7528;&#x5f88;&#x591a",{"_index":22,"title":{},"body":{"index.html#关于本文档":{}}}],["x6211;&#x4eec;&#x4f1a;&#x5728",{"_index":74,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x6211;&#x4eec;&#x53ef;&#x4ee5;&#x5b89;&#x5168;&#x7684;&#x5206;&#x914d",{"_index":1749,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x6211;&#x4eec;&#x53ef;&#x4ee5;&#x770b;&#x5230;&#xff0c;&#x5728;&#x7b2c;7&#x884c;&#x8c03;&#x7528",{"_index":1520,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x6211;&#x4eec;&#x53ef;&#x4ee5;&#x786e;&#x5b9a",{"_index":1670,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x6211;&#x4eec;&#x5728",{"_index":46,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x6211;&#x4eec;&#x58f0;&#x660",{"_index":1058,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x6211;&#x4eec;&#x5c06;&#x8fdb;&#x884c;&#x5b66;&#x4e60;&#x7684;&#x5185;&#x5bb9",{"_index":1443,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x6211;&#x4eec;&#x5e38;&#x5e38;&#x88ab;&#x95ee;&#x53ca;&#xff0c;&#x4e3a;&#x4ec0;&#x4e48;&#x4e00;&#x4e2a;&#x4f7f;&#x7528;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x7684;&#x65b9;&#x6cd5;&#x4e0d;&#x80fd;&#x88ab;&#x4ee5",{"_index":1617,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x6211;&#x4eec;&#x63cf;&#x8ff0;&#x89e3;&#x6790;&#x987a;&#x5e8f;&#x7684;&#x7b97;&#x6cd5;&#xff0c;&#x53d6;&#x51b3;&#x4e8e;&#x4ee5;&#x4e0b;&#x7684;&#x72b6;&#x6001;&#xff1a",{"_index":2175,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x6216;&#x662f",{"_index":19,"title":{},"body":{"index.html#关于本文档":{}}}],["x6216;&#x8005",{"_index":593,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x6216;&#x8005;&#x5176;&#x4ed6;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x3002;&#x4f46;&#x662f;&#x8fd9;&#x4e2a;&#x65b9;&#x5411;&#x4e0a;&#x7684;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x5728;&#x51fd;&#x6570;&#x7c7b;&#x578b;&#x7684;&#x8d4b;&#x503c;&#x64cd;&#x4f5c;&#x4e0a;&#x662f;&#x88ab;&#x5141;&#x8bb8;&#x7684;&#xff1a",{"_index":1864,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x6240;&#x64c5;&#x957f;&#x7684;&#x4e8b;&#x60c5;&#x3002;&#x7ed9;&#x533f;&#x540d;&#x7ed3;&#x6784;&#x7c7b;&#x578b;&#x547d;&#x540d;&#x751a;&#x81f3;&#x53ef;&#x4ee5;&#x8ba4;&#x4e3a;&#x662f;&#x5b83;&#x4eec;&#x7684;&#x4e3b;&#x8981;&#x7528;&#x9014;&#x3002;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;&#x8fd9;&#x79cd;&#x65b9;&#x5f0f;&#x7684;&#x4f7f;&#x7528;&#x662f;&#x5982;&#x6b64;&#x7684;&#x5e38;&#x89c1;&#x4ee5;&#x81f3;&#x4e8e;&#x8bb8;&#x591a",{"_index":1468,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x6240;&#x6709;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x90fd;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a;&#x540d;&#x4e3a",{"_index":474,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x6240;&#x6709;&#x7684;&#x7c7b;&#x578b;&#x4ee5;&#x6a21;&#x5757;&#x5f62;&#x5f0f;&#x7ec4;&#x7ec7;&#xff0c;&#x53ef;&#x4ee5;&#x88ab;&#x901a;&#x8fc7;&#x8def;&#x5f84;&#x627e;&#x5230;&#x3002",{"_index":57,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x6240;&#x6709;&#x7684;haxe&#x4ee3;&#x7801;&#x7ec4;&#x7ec7;&#x5728;&#x6a21;&#x5757;&#x4e2d;&#xff0c;&#x4f7f;&#x7528;&#x8def;&#x5f84;&#x5b9a;&#x4f4d;&#x3002;&#x672c;&#x8d28;&#x4e0a;&#x8bb2;&#xff0c;&#x6bcf;&#x4e2a;.hx",{"_index":2336,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x624b;&#x518c;&#x7684;&#x4e00;&#x4e2a;&#x8bfb;&#x8005;&#x56f0;&#x60d1;&#x4e8e;&#x4e0a;&#x9762;&#x793a;&#x4f8b;&#x4e2d",{"_index":488,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x6269;&#x5c55;&#x88ab;&#x7528;&#x4e8e;&#x8868;&#x793a;&#x8be5;&#x7ed3;&#x6784;&#x5177;&#x6709;&#x67d0;&#x4e2a;&#x7ed9;&#x5b9a;&#x7c7b;&#x578b;&#x7684;&#x6240;&#x6709;&#x5b57;&#x6bb5;&#x5916;&#xff0c;&#x8fd8;&#x5177;&#x6709;&#x4e00;&#x4e9b;&#x989d;&#x5916;&#x7684;&#x5b57;&#x6bb5;&#xff1a",{"_index":720,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x628a",{"_index":1918,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b",{"_index":1218,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x662f;&#x7528;&#x6765;&#x4ee3;&#x8868;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x901a;&#x5e38;&#x662f;&#x4e00;&#x4e2a;&#x5177;&#x4f53;&#x7684;&#xff08;&#x5373;&#x975e;&#x62bd;&#x8c61;&#x7684;&#xff09;&#x7c7b;&#x578b;&#xff0c;&#x4f46;&#x662f;&#x4e5f;&#x53ef;&#x4ee5;&#x662f;&#x53e6;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x3002",{"_index":1429,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#x901a;&#x8fc7;&#x6dfb;&#x52a0",{"_index":1129,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff08;&#x7b2c;2.8&#x8282;&#xff09",{"_index":270,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff0c;&#x5728",{"_index":1279,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff1a;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x65f6;&#x7c7b;&#x578b;&#xff0c;&#x5728;&#x8fd0;&#x884c;&#x65f6;&#x88ab;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#x8868;&#x793a",{"_index":86,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x62bd;&#x8c61;&#x7c7b;&#x5c01;&#x88c5;&#x4e86",{"_index":1245,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x63a5;&#x53d7;&#x4e00;&#x4e2a",{"_index":1425,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x63a5;&#x53d7;&#x7b2c;&#x4e00;&#x4e2a",{"_index":871,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x63a5;&#x53e3;&#x5230;&#x57fa;&#x7840;&#x63a5;&#x53e3",{"_index":1809,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x63a5;&#x53e3;&#x53ef;&#x4ee5;&#x6269;&#x5c55;&#x591a;&#x4e2a;&#x5176;&#x5b83;&#x7684;&#x63a5;&#x53e3;&#xff0c;&#x4f7f;&#x7528",{"_index":396,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x63a5;&#x53e3;&#x7684;&#x201c;i",{"_index":390,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x63a5;&#x53e3;&#x7684;&#x5b9e;&#x4f8b;&#x3002;&#x867d;&#x7136;&#x4e00;&#x4e2a;&#x7c7b;&#x53ea;&#x80fd;&#x6709;&#x4e00;&#x4e2a;&#x7236;&#x7c7b;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x591a;&#x4e2a",{"_index":393,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x63a5;&#x53e3;&#xff0c;&#x5b83;&#x4e0d;&#x50cf",{"_index":384,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x63cf;&#x8ff0;&#x4e86;&#x4e00;&#x4e2a;&#x989c;&#x8272;&#xff0c;&#x53ef;&#x80fd;&#x662f;&#x7ea2;&#x8272;&#xff0c;&#x7eff;&#x8272;&#xff0c;&#x84dd;&#x8272;&#x6216;&#x8005;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7684",{"_index":525,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x63d0;&#x4f9b;&#x4e86;&#x5f3a;&#x5927;&#x7684;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#xff08;&#x7b80;&#x5199;&#xff1a;enum&#xff09;&#xff0c;&#x5b83;&#x5b9e;&#x9645;&#x4e0a;&#x662f;&#x4e00;&#x4e2a;&#x4ee3;&#x6570;&#x6570;&#x636e;&#x7c7b;&#x578b;&#xff08;adt&#xff09;&#x3002;&#x867d;&#x7136;&#x5b83;&#x4eec;&#x4e0d;&#x80fd;&#x6709;&#x4efb;&#x4f55;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x4f46;&#x7528;&#x6765;&#x63cf;&#x8ff0;&#x6570;&#x636e;&#x7ed3;&#x6784;&#x662f;&#x975e;&#x5e38;&#x5b9e;&#x7528;&#x7684;&#xff1a",{"_index":523,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x64ad;&#x653e;&#x5668;&#x8fd0;&#x884c;&#x7f16;&#x8bd1;&#x540e;&#x7684;&#x7a0b;&#x5e8f;&#xff0c;&#x4f1a;&#x4ea7;&#x751f;&#x4e00;&#x4e2a;&#x9519;&#x8bef",{"_index":940,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x64cd;&#x4f5c",{"_index":180,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x64cd;&#x4f5c;&#x6570;1",{"_index":181,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x64cd;&#x4f5c;&#x6570;2",{"_index":182,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x64cd;&#x4f5c;&#x65f6;&#x88ab;&#x89e6;&#x53d1;&#xff0c;&#x524d;&#x6587;&#x4e2d;&#x7684",{"_index":1924,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x64cd;&#x4f5c;&#x7b26;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5",{"_index":1952,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x6570;&#x503c;&#x7c7b;&#x578b;&#x4e2d;&#x6ca1;&#x6709;&#x627e;&#x5230;&#xff0c;&#x800c;&#x4e14;&#x6ca1;&#x6709;&#x9ed8;&#x8ba4;&#x503c;&#x3002;&#x4e0d;&#x4f7f;&#x7528",{"_index":942,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x6570;&#x7ec4;&#x3002;&#x6b64;&#x65f6;&#x6211;&#x4eec;&#x9664;&#x4e86;&#x77e5;&#x9053;&#x53d8;&#x91cf",{"_index":2129,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x6570;&#x7ec4;&#x4e3a;&#x4e00;&#x4e2a;&#x6df7;&#x5408;&#x7c7b;&#x578b;&#xff0c;&#x5982",{"_index":950,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x6570;&#x7ec4;&#x58f0;&#x660",{"_index":1828,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95e",{"_index":1201,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x5931;&#x8d25;&#x3002;&#x4e3a;&#x4e86;&#x907f;&#x514d;&#x8fd9;&#x4e2a;&#x95ee;&#x9898;&#xff0c;&#x53d8;&#x91cf",{"_index":969,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x63cf;&#x8ff0;&#x4e86;&#x7279;&#x5b9a;&#x7684;&#x8bed;&#x6cd5;&#xff0c;&#x4f20;&#x7edf;&#x4e0a;&#x7528;&#x4e8e;&#x8bbf;&#x95ee;&#x6570;&#x7ec4;&#x4e2d;&#x7684;&#x67d0;&#x4e2a;&#x504f;&#x79fb;&#x91cf;&#x7684;&#x503c;&#x3002;&#x901a;&#x5e38;&#x53ea;&#x5141;&#x8bb8;&#x5e26;&#x6709",{"_index":1184,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x89e3;&#x6790;&#x7684;&#x987a;&#x5e8f",{"_index":1195,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x6570;&#x7ec4;&#x8bbf;&#x95ee;&#xff08;&#x7b2c;2.8.3&#x8282;&#xff09",{"_index":1304,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x6587;&#x4ef6;&#x4e2d;&#x4f1a;&#x591a;&#x6b21;&#x7528;&#x5230;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":2267,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6587;&#x4ef6;&#x4e2d;&#x53ef;&#x4ee5;&#x5305;&#x542b;&#x591a;&#x4e2a;&#x7c7b;&#x578b;&#x58f0;&#x660e;&#xff0c;&#x8fd9;&#x4e9b;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x5728;&#x8be5;&#x6a21;&#x5757;&#x4e2d;&#x4e0d;&#x53d7;&#x9650;&#x5236;&#x5730;&#x88ab;&#x8c03;&#x7528;&#xff0c;&#x4f46;&#x4ece;&#x5176;&#x5b83;&#x6a21;&#x5757;&#x4e2d;&#x4f7f;&#x7528;&#x65f6;&#x9700;&#x901a;&#x8fc7",{"_index":2061,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6587;&#x4ef6;&#x8868;&#x793a;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#xff0c;&#x5176;&#x4e2d;&#x53ef;&#x80fd;&#x5305;&#x542b;&#x591a;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x662f;&#x79c1;&#x6709;&#x7684;&#xff0c;&#x8fd9;&#x79cd;&#x60c5;&#x51b5;&#x4e0b;&#x53ea;&#x6709;&#x5728;&#x5b83;&#x6240;&#x5904;&#x7684;&#x6a21;&#x5757;&#x5185;&#x624d;&#x80fd;&#x88ab;&#x8bbf;&#x95ee;&#x5230;&#x5b83;&#x3002",{"_index":2337,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x6587;&#x6863;&#x4e2d;&#x7684;&#x4e00;&#x4e9b;&#x5730;&#x65b9;&#x8fd8;&#x6709;&#x4e00;&#x4e9b;&#x82b1;&#x7d6e;&#x6846;&#x3002;&#x8fd9;&#x4e9b;&#x5305;&#x62ec;&#x975e;&#x6b63;&#x5f0f;&#x7684;&#x4fe1;&#x606f;&#xff0c;&#x5982;&#x4e3a;&#x4ec0;&#x4e48;&#x5728",{"_index":32,"title":{},"body":{"index.html#关于本文档":{}}}],["x65b9;&#x5f0f;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#xff0c;&#x91cd;&#x8f7d;&#x4e4b;&#x540e;&#x7684;&#x65b9;&#x6cd5;&#x7684;&#x8c03;&#x7528;&#x88ab;&#x63d2;&#x5165;&#x5230;&#x9700;&#x8981;&#x7684;&#x5730;&#x65b9;&#x3002",{"_index":1140,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x65b9;&#x6cd5",{"_index":1508,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x65b9;&#x6cd5;&#x3002;&#x5ffd;&#x7565;&#x53d8;&#x5f02;&#x9519;&#x8bef;&#x975e;&#x5e38;&#x5bb9;&#x6613;&#x4ea7;&#x751f;&#x95ee;&#x9898;&#xff1a",{"_index":1738,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x65b9;&#x6cd5;&#x3002;&#x6ca1;&#x6709;&#x4e3a",{"_index":1753,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x65b9;&#x6cd5;&#x3002;&#x6ce8;&#x91ca;&#x884c;&#x8868;&#x660",{"_index":1250,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x65b9;&#x6cd5;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4f20;&#x9012;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x4f5c;&#x4e3a;&#x53c2;&#x6570;&#xff0c;&#x5982;&#x7b2c;9&#x884c;&#x5219;&#x4f1a;&#x5bfc;&#x81f4;&#x7ea6;&#x675f;&#x5931;&#x8d25;&#xff0c;&#x56e0;&#x4e3a;&#x5b57;&#x7b26;&#x4e32;&#x4e0d;&#x517c;&#x5bb9",{"_index":1524,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x65b9;&#x6cd5;&#x5141;&#x8bb8;&#x8fd9;&#x6837;&#x4f7f;&#x7528;&#xff1a",{"_index":1193,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x65b9;&#x6cd5;&#x5b9e;&#x4f8b;&#x5316",{"_index":1248,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x65b9;&#x6cd5;&#x63a5;&#x53d7;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#xff0c;&#x5b83;&#x662f;&#x4e00;&#x4e2a",{"_index":1190,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x65b9;&#x6cd5;&#x63a5;&#x53d7;&#x4e24;&#x4e2a;&#x53c2;&#x6570;&#xff0c;&#x5b83;&#x662f;&#x4e00;&#x4e2a",{"_index":1191,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x65b9;&#x6cd5;&#x7528;&#x4e8e;&#x68c0;&#x67e5;&#x4e00;&#x4e2a",{"_index":1785,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x65b9;&#x6cd5;&#x88ab;&#x8c03;&#x7528;&#xff0c;&#x5e76;&#x4ee5;&#x8fd9;&#x4e2a;&#x5b57;&#x6bb5;&#x7684;&#x540d;&#x5b57;&#x4f5c;&#x4e3a;&#x53c2;&#x6570;&#xff1a",{"_index":912,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x65b9;&#x6cd5;&#xff08;&#x7b2c;4.3&#x8282;&#xff09",{"_index":313,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x65b9;&#x6cd5;&#xff0c;&#x6ca1;&#x6709;&#x5176;&#x5b83;&#x4fee;&#x6539;&#x7684;&#x624b;&#x6bb5;&#xff0c;&#x8d4b;&#x503c;&#x5219;&#x53d8;&#x5f97;&#x5b89;&#x5168;&#xff0c;&#x56e0;&#x4e3a;&#x6ca1;&#x6709;&#x77db;&#x76fe;&#x7684;&#x7c7b;&#x578b;&#x88ab;&#x6dfb;&#x52a0;&#x5230;&#x5b83;&#x3002;&#x5728;haxe&#x4e2d;&#xff0c;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316;&#xff08;&#x7b2c;3.5.2&#x8282;&#xff09;&#x76f8;&#x5e94;&#x7684;&#x9650;&#x5236;&#x7c7b;&#x578b;&#x6765;&#x5b9e;&#x73b0;&#x8fd9;&#x4e2a;&#x3002",{"_index":1747,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x65b9;&#x6cd5;&#xff0c;hax",{"_index":1789,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x65e0;&#x53c2;&#x6570;&#x7684;&#x679a;&#x4e3e;&#x603b;&#x662f;&#x8868;&#x793a;&#x540c;&#x6837;&#x7684;&#x503c;&#xff0c;&#x6240;&#x4ee5",{"_index":209,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x65e0;&#x7528;&#x4ee3;&#x7801;&#x6d88;&#x9664;&#xff08;&#x7b2c;8.2&#x8282;&#xff09",{"_index":936,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x65e0;&#x7b26;&#x53f7;&#x53f3;&#x4f4d;&#x79fb",{"_index":206,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x65f6;&#x4e0d;&#x4f1a;&#x5bf9;&#x6027;&#x80fd;&#x4ea7;&#x751f;&#x5f71;&#x54cd;&#x3002;&#x7136;&#x800c;&#xff0c;&#x5bf9;&#x4e8",{"_index":744,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x65f6;&#x4e0d;&#x9700;&#x8981;&#x62c5;&#x5fc3;&#xff1b;&#x7136;&#x800c;&#xff0c;&#x9759;&#x6001;&#x76ee;&#x6807;&#x4e2d;&#x53ef;&#x80fd;&#x9700;&#x8981;&#x4e00;&#x4e9b;&#x601d;&#x8003;&#x3002;&#x9996;&#x5148;&#xff0c;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x88ab;&#x521d;&#x59cb;&#x5316;&#x4e3a;&#x5b83;&#x4eec;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#x3002",{"_index":568,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x65f6;&#x53d8;&#x5f62;&#xff08;morph&#xff09;&#x4e3a;&#x53e6;&#x5916;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x6709;&#x5173;&#x8fd9;&#x4e00;&#x7c7b;&#x578b;&#x7684;&#x8fdb;&#x4e00;&#x6b65;&#x7ec6;&#x8282;&#x5c06;&#x5728",{"_index":1321,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["x65f6;&#x5df2;&#x7ecf;&#x770b;&#x8fc7;&#x4e00;&#x4e2a;&#x7b80;&#x8981;&#x7684;&#x4f8b;&#x5b50;&#x4e86;&#x3002;&#x901a;&#x5e38;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x5c1d;&#x8bd5;&#x628a;&#x7b2c;&#x4e00;&#x4e2a;&#x5b9e;&#x9645;&#x53c2;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x7edf;&#x4e00;&#x4e3a;&#x7b2c;&#x4e00;&#x4e2a;&#x5f62;&#x5f0f;&#x53c2;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x3001;&#x628a;&#x7b2c;&#x4e8c;&#x4e2a;&#x5b9e;&#x9645;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x7edf;&#x4e00;&#x4e3a;&#x7b2c;&#x4e8c;&#x4e2a;&#x5f62;&#x5f0f;&#x53c2;&#x6570;&#x7684;&#x7c7b;&#x578b;&#x2026;&#x4ee5;&#x6b64;&#x7c7b;&#x63a8;&#x3002",{"_index":1935,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x65f6;&#xff0c;&#x5176;&#x7c7b;&#x578b;&#x5c06;&#x5728;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x8fc7;&#x7a0b;&#x4e2d;&#x4ea7;&#x751f;&#x7578;&#x53d8;&#xff08;mutate&#xff09",{"_index":1913,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x65f6;&#xff0c;hax",{"_index":648,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x662f",{"_index":265,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x662f;&#x4e00;&#x4e2a;&#x5141;&#x8bb8;&#x7684;&#x503c;&#x3002",{"_index":590,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x662f;&#x4e00;&#x4e2a;&#x53ef;&#x4ee5;&#x50cf;&#x51fd;&#x6570;&#x4e00;&#x6837;&#x8c03;&#x7528;&#x7684;&#x7f16;&#x8bd1;&#x65f6;&#x673a;&#x5236;&#xff0c;&#x5b83;&#x63a5;&#x53d7;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x6267;&#x884c;&#x53c2;&#x6570;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x5e76;&#x8f93;&#x51fa;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":2112,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x662f;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#xff0c;&#x90a3;&#x4e48;&#x5b83;&#x5fc5;&#x987b;&#x901a;&#x8fc7;&#x5982;&#x4e0b;&#x5f62;&#x5f0f;&#x8fdb;&#x884c;&#x58f0;&#x660e;&#xff1a",{"_index":795,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x662f;&#x4e00;&#x4e2a;&#x5b58;&#x5728;&#x7684;&#x5b57;&#x6bb5",{"_index":903,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x662f;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#x5916;&#x5e76;&#x4e0d;&#x77e5;&#x9053;&#x5176;&#x6570;&#x7ec4;&#x5143;&#x7d20;&#x7684;&#x5177;&#x4f53;&#x7c7b;&#x578b;&#x3002;&#x6b64;&#x65f6",{"_index":2130,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x662f;&#x4e00;&#x4e2a;&#x7279;&#x522b;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x7edf;&#x4e00;&#x6240;&#x6709;&#x7684;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x3002;&#x5b83;&#x88ab",{"_index":477,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x662f;&#x4e00;&#x4e2a;&#x7279;&#x6b8a;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x5141;&#x8bb8;&#x4f7f;&#x7528;&#x548c;&#x4e0d;&#x4f7f;&#x7528;&#x4e00;&#x4e2a",{"_index":825,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x662f;&#x53ef;&#x4ee5;&#x88ab;&#x8ba4;&#x4e3a",{"_index":77,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x662f;&#x53ef;&#x7528;&#x7684;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":2201,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x662f;&#x5426;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5230",{"_index":878,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x662f;&#x5426;&#x53ef;&#x4ee5;&#x88ab;&#x8d4b;&#x503c;&#x7ed9",{"_index":1910,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x662f;&#x5f3a;&#x5236;&#x6027;&#x7684;&#x3002;&#x8fd9;&#x4e0d;&#x50cf;&#x5176;&#x5b83;&#x4e00;&#x4e9b;&#x9762;&#x5411;&#x5bf9;&#x8c61;&#x8bed;&#x8a00;&#xff0c;&#x8fd9;&#x4e2a;&#x8c03;&#x7528;&#x53ef;&#x4ee5;&#x51fa;&#x73b0;&#x5728;&#x6784;&#x9020;&#x51fd;&#x6570;&#x4ee3;&#x7801;&#x4e2d;&#x7684;&#x4efb;&#x4f55;&#x5730;&#x65b9;&#xff0c;&#x800c;&#x4e0d;&#x662f;&#x5fc5;&#x987b;&#x4f5c;&#x4e3a;&#x7b2c;&#x4e00;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x3002",{"_index":311,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x662f;&#x6240;&#x6709;&#x7c7b;&#x7684;&#x57fa;&#x7840;&#x7c7b;&#x578b;&#x3002;&#x7136;&#x800c;&#xff0c;&#x8fd9;&#x4e2a;&#x5173;&#x7cfb;&#x5e76;&#x4e0d;&#x4f1a;&#x53cd;&#x6620;&#x5728;&#x751f;&#x6210;&#x7684;&#x4ee3;&#x7801;&#x4e2d;&#x3002;&#x5f53;&#x4e00;&#x4e2a",{"_index":516,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x662f;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x540d;&#x79f0;&#xff0c;&#x53ef;&#x4ee5;&#x662f;&#x4efb;&#x4f55;&#x7b26;&#x5408;&#x7c7b;&#x578b;&#x6807;&#x8bc6;&#x7b26;&#x89c4;&#x5219;&#x7684;&#x5b57;&#x7b26",{"_index":1419,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x662f;&#x6307",{"_index":339,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x662f;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x7684;&#x540d;&#x79f0;&#xff0c;&#x53ef;&#x4ee5;&#x662f;&#x4efb;&#x4f55;&#x7b26;&#x5408;&#x7c7b;&#x578b;&#x6807;&#x8bc6;&#x7b26;&#x89c4;&#x5219;&#x7684;&#x5b57;&#x7b26",{"_index":528,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x662f;&#x6ca1;&#x6709;&#x95ee;&#x9898;&#x7684;&#x3002;&#x56e0;&#x4e3a;&#x6570;&#x7ec4;&#x5177;&#x6709",{"_index":1522,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x662f;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x7279;&#x6b8a;&#x60c5;&#x51b5;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x5b9e;&#x9645;&#x4e0a;&#x4e0d;&#x662f;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x5b83;&#x7528;&#x6765;&#x8868;&#x8fbe;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x7684;&#x7f3a;&#x5931;&#xff0c;&#x591a;&#x6570;&#x5e94;&#x7528;&#x4e8e;&#x51fd;&#x6570;&#x53c2;&#x6570;&#x548c;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x3002;&#x6211;&#x4eec;&#x5728;&#x5f00;&#x59cb;&#x7684",{"_index":152,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x662f;&#x7c7b;&#x7684;&#x540d;&#x79f0;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x4efb;&#x4f55;&#x7b26;&#x5408;&#x7c7b;&#x578b;&#x6807;&#x8bc6;&#x7b26;&#x89c4;&#x5219;&#x7684;&#x5b57;&#x7b26",{"_index":504,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x662f;&#x7ed9;&#x4e00;&#x4e2a;&#x590d;&#x6742;&#x7c7b;&#x578b;&#x4e00;&#x4e2a;&#x540d;&#x5b57;&#xff08;&#x6216;&#x522b;&#x540d;&#xff09;&#x7684;&#x673a;&#x5236;&#x3002;&#x9664;&#x6b64;&#x4e4b;&#x5916;&#xff0c;&#x5f53;&#x6211;&#x4eec;&#x4f7f;&#x7528;&#x5e26",{"_index":51,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x662f;&#x8c03;&#x7528;&#x7236;&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff0c;&#x672c;&#x4f8b;&#x4e2d;&#x5373",{"_index":309,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x662f;/&#x542b;&#x6709",{"_index":1836,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x662f;haxe.macro.expr&#x6a21;&#x5757;&#x4e2d;&#x4e00;&#x4e2a",{"_index":2275,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x662f;true&#xff0c;false&#xff0c;this&#xff0c;super&#x6216;&#x8005;null&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5339;&#x914d;&#x7684",{"_index":2187,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x663e;&#x5f0f;&#x7684;&#x58f0;&#x660e;&#x4e3a",{"_index":971,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b",{"_index":2026,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x58f0;&#x660e;&#x5728",{"_index":72,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x663e;&#x7136;&#xff0c;&#x4e00;&#x4e2a",{"_index":1733,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x66b4;&#x9732;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x7684;&#x64cd;&#x4f5c",{"_index":1152,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x66ff;&#x4ee3",{"_index":2308,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6700;&#x5e95;&#x90e8;&#x7684;&#x5bfc;&#x5165;&#x6307;&#x4ee4;&#x5177;&#x6709;&#x6700;&#x9ad8;&#x7684;&#x4f18;&#x5148;&#x7ea7;&#xff08;&#x8be6;&#x89c1",{"_index":2279,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6709;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x7684;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#xff0c;&#x4f46;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x5b9e;&#x9645;&#x4e0a;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":928,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x6709;&#x4e00;&#x4e2a;&#x989d;&#x5916;&#x7684;&#x8bb0;&#x6cd5;&#x53ef;&#x4ee5;&#x88ab;&#x7528;&#x4e8e;&#x6269;&#x5c55;&#xff0c;&#x901a;&#x8fc7;&#x4ee5",{"_index":734,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x6709;&#x4e24;&#x4e2a;&#x53ef;&#x9009;&#x53c2;&#x6570;&#xff1a;int",{"_index":838,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x6709;&#x4e24;&#x79cd;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x65b9;&#x6cd5;&#xff1a",{"_index":1189,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x6709;&#x6548",{"_index":482,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x6709;&#x6548;&#x7684;&#xff0c;present",{"_index":902,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x6709;&#x6548;&#xff0c;&#x5206;&#x914d;&#x7684;&#x503c;&#x662f;&#x4e00;&#x4e2a",{"_index":904,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x672c;&#x6587;&#x6863;&#x5e76;&#x975e;&#x521d;&#x5b66;&#x8005;&#x6559;&#x7a0b;&#xff0c;&#x5e76;&#x4e0d;&#x4f1a;&#x6559;&#x4f60;&#x5982;&#x4f55;&#x7f16;&#x7a0b;&#x3002;&#x5c3d;&#x7ba1;&#x5982;&#x6b64;&#xff0c;&#x6bcf;&#x4e00;&#x4e3b;&#x9898;&#x90fd;&#x88ab;&#x7c97;&#x7cd9;&#x5730;&#x8bbe;&#x8ba1;&#x4e3a;&#x987a;&#x5e8f;&#x9605;&#x8bfb;&#xff0c;&#x5176;&#x4e2d;&#x4f1a;&#x7a7f;&#x63d2;&#x4e00;&#x4e9b;&#x5982",{"_index":17,"title":{},"body":{"index.html#关于本文档":{}}}],["x672c;&#x6587;&#x6863;&#x7531",{"_index":11,"title":{},"body":{"index.html#关于本文档":{}}}],["x6765;&#x4f7f;&#x7528",{"_index":629,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x6765;&#x58f0;&#x660e;&#xff1a",{"_index":836,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x6765;&#x5904;&#x7406;&#x5b83;&#x3002;&#x7136;&#x800c;&#xff0c;&#x63a8;&#x65ad;&#x7684;&#x7c7b;&#x578b;&#x53ef;&#x80fd;&#x548c",{"_index":490,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x6765;&#x8bf4;&#xff0c;&#x5fc5;&#x987b;&#x6267;&#x884c;&#x4e00;&#x4e2a;&#x52a8;&#x6001;&#x7684;&#x67e5;&#x627e;&#xff0c;&#x8fd9;&#x901a;&#x5e38;&#x4f1a;&#x6162;&#x4e8e;&#x5bf9;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x7684;&#x8bbf;&#x95ee;&#x3002",{"_index":746,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x6765;&#x8fdb;&#x884c;&#x663e;&#x5f0f;&#x7684;&#x58f0;&#x660e;&#x3002;&#x5982;&#x679c;&#x8fd9;&#x6837;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x88ab;&#x63d0;&#x4f9b;&#xff0c",{"_index":826,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x6784;&#x5efa;&#x5b8f;&#xff08;&#x7b2c;9.5&#x8282;&#xff09",{"_index":1259,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x6784;&#x9020;&#x51fd;&#x6570",{"_index":1424,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x6784;&#x9020;&#x51fd;&#x6570;&#x548c;&#x53c2;&#x6570;&#x6765;&#x521d;&#x59cb;&#x5316;&#x3002",{"_index":473,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x6784;&#x9020;&#x51fd;&#x6570;&#xff08;&#x7b2c;2.4.1&#x8282;&#xff09",{"_index":443,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x679a;&#x4e3",{"_index":348,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#xff08;&#x7b2c;2.4&#x8282",{"_index":349,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#xff1a;hax",{"_index":81,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x679a;&#x4e3e;&#x7684;&#x76f8;&#x7b49;&#x6027",{"_index":207,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x679a;&#x4e3e;&#x7c7b;&#x578b;&#x4e2d;&#x7684;&#x4e00;&#x4e2a;&#x503c",{"_index":82,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x67d0;&#x4e9b;&#x4f18;&#x5316;&#xff0c;&#x7279;&#x522b;&#x662f;&#x7f16;&#x8bd1;&#x4e3a;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x65f6;&#xff0c;&#x5c06;&#x4e0d;&#x80fd;&#x518d;&#x88ab;&#x4f7f;&#x7528;&#x3002",{"_index":932,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x6807;&#x51c6;&#x5e93;&#x4e2d",{"_index":1783,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684",{"_index":1479,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684;&#x8bb8;&#x591a;&#x7c7b;&#x578b;&#x90fd;&#x6ee1;&#x8db3;&#x8fd9;&#x4e00;&#x8981;&#x6c42;&#x3002",{"_index":1790,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x6807;&#x51c6;&#x5e93;&#x4f7f;&#x7528;&#xff0c;&#x6765;&#x63d0;&#x4f9b;&#x5bf9;&#x6240;&#x6709;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x7684;&#x67d0;&#x4e9b;&#x64cd;&#x4f5c;&#xff0c;&#x53ef;&#x4ee5;&#x7528;&#x5728;&#x7528;&#x6237;&#x4ee3;&#x7801;&#x4e2d;&#x4e00;&#x4e2a",{"_index":478,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x6807;&#x51c6;&#x5e93;&#x5b9a;&#x4e49;&#x4e86;&#x4e00;&#x7ec4;&#x57fa;&#x7840;&#x7c7b;&#x578b;&#x4f5c;&#x4e3a;&#x6838;&#x5fc3;&#x7c7b;&#x578b;&#x62bd;&#x8c61;&#x3002;&#x5b83;&#x4eec;&#x901a;&#x8fc7",{"_index":1293,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x6807;&#x51c6;&#x5e93;&#xff08;&#x7b2c;10&#x7ae0;&#xff09",{"_index":1186,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x6807;&#x8bb0;&#x4e00;&#x4e2a;&#x7ed3;&#x6784;&#x7c7b;&#x578b;&#x4e2d;&#x7684;&#x5b57;&#x6bb5;&#x4e3a;&#x53ef;&#x9009;&#xff0c;&#x4f7f;&#x7528",{"_index":1482,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x6807;&#x8bc6;&#x7b26;&#xff08;&#x7b2c;5&#x7ae0;&#xff09",{"_index":626,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x6807;&#x8bc6;&#x7b26;&#xff0c;&#x53ef;&#x4ee5;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x8f93;&#x51fa;&#x5b83;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x6765;&#x4f7f;&#x5b83;&#x4eec;&#x8868;&#x73b0;&#x51fa;&#x6765;&#xff1a",{"_index":863,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x6839;&#x636e",{"_index":449,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x6a21;&#x5757;&#x4e2d;&#x7684;&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b",{"_index":2066,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6a21;&#x5757;&#x53ef;&#x4ee5;&#x88ab;&#x8bbf;&#x95ee;&#xff0c;&#x4f46;&#x662f;&#x5b83",{"_index":2295,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6a21;&#x5757;&#x540d",{"_index":2342,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x6a21;&#x5757;&#x548c;&#x5b83;&#x6240;&#x5305;&#x542b;&#x7684;&#x540c;&#x540d;&#x7c7b;&#x578b;&#x4e4b;&#x95f4;&#x7684;&#x533a;&#x522b;&#x5728;&#x8bbe;&#x8ba1;&#x4e0a;&#x662f;&#x6a21;&#x7cca;&#x7684;&#x3002;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;&#x5b9a;&#x4f4d",{"_index":2338,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x6a21;&#x5757;&#x548c;&#x8def;&#x5f84;&#xff08;&#x7b2c;3.7&#x8282;&#xff09",{"_index":58,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x58f0;&#x660e;&#x4e3a;&#x79c1;&#x6709;&#x7684;&#xff08;private&#xff09;&#xff1a",{"_index":2072,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x662f;&#x4e00;&#x4e2a;&#x6a21;&#x5757;&#x4e2d;&#x4e0e;&#x6a21;&#x5757;&#x4e0d;&#x540c;&#x540d;&#x7684;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x4f7f;&#x5f97;&#x4e00;&#x4e2a",{"_index":2060,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x7684;&#x5173;&#x7cfb;&#x4e0d;&#x4f1a;&#x53cd;&#x6620;&#x4e8e;&#x8fd0;&#x884c;&#x65f6;&#xff1b;&#x4e00;&#x4e2a;&#x4fee;&#x9970;&#x4e3a",{"_index":2068,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x7684;&#x58f0;&#x660e;&#x53ef;&#x80fd;&#x770b;&#x8d77;&#x6765;&#x5982;&#x4e0b;&#x6240;&#x793a;&#xff1a",{"_index":2067,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6a21;&#x5757;&#x7684;&#x5b50;&#x7c7b;&#x578b",{"_index":2297,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6a21;&#x5f0f;&#x5339;&#x914d;&#xff08;&#x7b2c;6.4&#x8282;&#xff09",{"_index":459,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x6a21;&#x8fd0;&#x7b97",{"_index":191,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x6b64;&#x5904;&#x8bbf;&#x95ee;&#x4e86",{"_index":2065,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x6b64;&#x5916;&#xff0c;&#x4e5f;&#x53ef;&#x4ee5;&#x5bfc;&#x5165;&#x7c7b;&#x7684;&#x9759;&#x6001;&#x5b57;&#x6bb5;&#x5e76;&#x4e0d;&#x53d7;&#x9650;&#x5236;&#x7684;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x3002",{"_index":2286,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x6b64;&#x65f6",{"_index":1872,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x6bcf;&#x4e2a;&#x5b57;&#x6bb5;&#x5fc5;&#x987b;&#x6709;&#x4e00;&#x4e2a;&#x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b",{"_index":383,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x6bcf;&#x5f53;&#x4e00;&#x4e2a;&#x4e0d;&#x540c;&#x4e8",{"_index":2123,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x6bcf;&#x5f53;&#x4e00;&#x4e2a;array&#x7684;&#x5b9e;&#x4f8b;&#x88ab;&#x521b;&#x5efa;&#xff0c;&#x5b83;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":1587,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x6bd4;&#x8f83;&#x8fd0;&#x7b97;&#x7b26",{"_index":192,"title":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}},"body":{}}],["x6bd4;&#x8f83;&#xff0c;&#x9664;&#x975e;&#x5305;&#x88c5;&#x5b83;&#xff1a",{"_index":580,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x6ca1;&#x6709",{"_index":1746,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x6ca1;&#x6709;&#x5b57;&#x6bb5",{"_index":788,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x6ca1;&#x6709;&#x8868;&#x8fbe;&#x5f0f;&#x7684",{"_index":1306,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x6ca1;&#x6709;&#x88ab;&#x63d0;&#x53ca;&#xff0c;haxe&#x7f16;&#x8bd1;&#x5668;&#x4e5f;&#x80fd;&#x63a8;&#x65ad;&#x5b83;&#x4e3a",{"_index":1825,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x6ce8;&#x610f",{"_index":1599,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x6ce8;&#x610f;&#xff0c;&#x5e76;&#x6ca1;&#x6709;&#x4f7f;&#x7528;&#x51fd;&#x6570;&#x4f53",{"_index":1157,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x6ce8;&#xff1a;&#x5728;&#x5b9e;&#x9645;&#x7f16;&#x5199;&#x6d4b;&#x8bd5;&#x4ee3;&#x7801;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x5c1d;&#x8bd5;&#x5728;&#x7c7b;&#x7684",{"_index":163,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x6df7;&#x5408;&#x7c7b;&#x578b",{"_index":90,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x6e90;&#x4ee3;&#x7801;&#x6765;&#x4fdd;&#x6301;&#x7406;&#x8bba;&#x4e0e;&#x5b9e;&#x8df5;&#x4e4b;&#x95f4;&#x7684;&#x6865;&#x63a5;&#x3002;&#x8fd9;&#x4e9b;&#x4ee3;&#x7801;&#x793a;&#x4f8b;&#x901a;&#x5e38;&#x662f;&#x5b8c;&#x6574;&#x7684;&#x7a0b;&#x5e8f;&#xff0c;&#x5e76;&#x5e26;&#x6709;&#x4e00;&#x4e2a",{"_index":23,"title":{},"body":{"index.html#关于本文档":{}}}],["x6f5c;&#x5728;&#x7c7b;&#x578b",{"_index":1427,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x7136;&#x540e;&#x4e0b;&#x9762;&#x770b;&#x5230;&#x7684",{"_index":1192,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7248;&#x672c;&#x4e2d;&#x5df2;&#x7ecf;&#x4fee;&#x590d;&#x6240;&#x4ee5;&#x73b0;&#x5728;&#x603b;&#x662f;&#x4ece;&#x4e0a;&#x5230;&#x4e0b;&#x8fdb;&#x884c;&#x68c0;&#x67e5;&#x5b57;&#x6bb5;&#xff1a",{"_index":1200,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7248;&#x672c;&#x4e2d;&#x7684;&#x67d0;&#x4e9b;&#x5b9e;&#x9645;&#x529f;&#x80fd;&#x7684;&#x6539;&#x53d8;&#x7b49;&#x3002;&#x8fd9;&#x7c7b;&#x4fe1;&#x606f;&#x901a;&#x5e38;&#x4e0d;&#x662f;&#x5f88;&#x91cd;&#x8981;&#xff0c;&#x4f60;&#x53ef;&#x4ee5;&#x9009;&#x62e9;&#x8df3;&#x8fc7;&#xff0c;&#x56e0;&#x4e3a;&#x5b83;&#x4eec;&#x53ea;&#x662f;&#x4e3a;&#x4e86;&#x4f20;&#x8fbe;&#x4e00;&#x4e9b;&#x82b1;&#x7d6e;&#x3002;&#x82b1;&#x7d6e;&#x770b;&#x8d77;&#x6765;&#x50cf;&#x8fd9;&#x6837;&#xff1a",{"_index":34,"title":{},"body":{"index.html#关于本文档":{}}}],["x7248;&#x672c;&#x4e4b;&#x524d;&#x7684;&#x4e00;&#x4e2a",{"_index":1197,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7248;&#x672c;&#x66fe;&#x7ecf;&#x63a8;&#x65ad",{"_index":949,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7279;&#x5b9a;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x4e4b;&#x95f4;&#xff0c;&#x80af;&#x5b9a;&#x6709;&#x4e00;&#x4e2a;&#x533a;&#x522b;&#x3002;&#x533a;&#x522b;&#x662f;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x95ee;&#x53f7;&#x6807;&#x8bb0;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x6765;&#x5b9e;&#x73b0;&#xff1a",{"_index":327,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["x751f;&#x6210;&#xff0c;&#x76ee;&#x524d;&#x8fd8;&#x5728;&#x5efa;&#x8bbe;&#x4e2d;&#xff0c;&#x56ff;&#x4e8e;&#x4e2a;&#x4eba;&#x65f6;&#x95f4;&#x7cbe;&#x529b;&#x6709;&#x9650;&#xff0c;&#x6709;&#x5174;&#x8da3;&#x53c2;&#x4e0e;&#x52a0;&#x5feb;&#x672c;&#x6587;&#x6863;&#x5efa;&#x8bbe;&#x7684;&#x670b;&#x53cb;&#x53ef;&#x4ee5;&#x8054;&#x7cfb;&#x6211;&#xff0c;&#x5de6;&#x4fa7;&#x8fb9;&#x680f;&#x4e0a;&#x6709;&#x672c;&#x6587;&#x6863",{"_index":12,"title":{},"body":{"index.html#关于本文档":{}}}],["x7528;&#x4e8e;&#x63cf;&#x8ff0;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x7684;&#x7f3a;&#x7701;&#xff0c;&#x56e0;&#x6b64;&#x5b83;&#x4e0d;&#x80fd;&#x88ab;&#x5206;&#x914d;&#x5230;&#x5176;&#x4ed6;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x4e0a;&#xff0c;&#x5373;&#x4f7f;&#x662f",{"_index":1858,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7528;&#x6237;&#x751a;&#x81f3;&#x8ba4;&#x4e3a",{"_index":1469,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7528;&#x6237;&#x9690;&#x85cf;&#x7684;&#x5f88;&#x597d;&#x7684;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#xff0c;&#x5c3d;&#x7ba1;&#x5b83;&#x4eec;&#x65e0;&#x5904;&#x4e0d;&#x5728;&#x3002;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x4f7f;&#x7528",{"_index":861,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7528;&#x66f4;&#x5c11;&#x7684;&#x8bed;&#x53e5;&#x5b9a;&#x4e49;&#x5b57;&#x6bb5;&#x3002",{"_index":1288,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x7528;&#x6765;&#x5206;&#x9694;&#x7684;&#x952e;&#x548c;&#x503c;&#xff0c;&#x952e;&#x540d;&#x5fc5;&#x987b;&#x662f;&#x4e00;&#x4e2a;&#x6709;&#x6548;&#x7684",{"_index":772,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7531;&#x4e8e;&#x5176;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x672c;&#x8eab;&#x6027;&#x8d28;&#xff0c;&#x9700;&#x8981;&#x5728;&#x8fd9;&#x4e2a;&#x95ee;&#x9898;&#x4e2d;&#x627e;&#x5230;&#x4e00;&#x4e2a;&#x59a5;&#x534f;&#xff1a;&#x56e0;&#x6b64;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#x7684;&#x4e00;&#x4e9b;&#x88ab;&#x5141;&#x8bb8;&#x4f7f;&#x7528",{"_index":553,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x7531;&#x4e8e;&#x7f16;&#x8bd1;&#x5668;&#x63d0;&#x5347;&#x62bd;&#x8c61;&#x6210;&#x5458;&#x51fd;&#x6570;&#x4e3a;&#x9759;&#x6001;&#x51fd;&#x6570;&#xff0c;&#x53ef;&#x4ee5;&#x624b;&#x52a8;&#x5b9a;&#x4e49;&#x9759;&#x6001;&#x51fd;&#x6570;&#x5e76;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x5230;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x3002;&#x8fd9;&#x91cc;&#x7684;&#x8bed;&#x6cd5;&#x548c;&#x90a3;&#x4e9b;&#x7b2c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x51b3;&#x5b9a;&#x51fd;&#x6570;&#x88ab;&#x5b9a;&#x4e49;&#x4e3a;&#x4ec0;&#x4e48;&#x7c7b;&#x578b;&#x7684",{"_index":1215,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7531;&#x4e8e;hax",{"_index":1196,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7684",{"_index":729,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7684;&#x4e00;&#x4e2a;&#x201c;&#x5b50;&#x7c7b;&#x201d;&#xff0c;&#x4f46;&#x8fd9;&#x4e5f;&#x5728;&#x522b;&#x5904;&#x5f15;&#x8d77;&#x95ee;&#x9898;&#x3002;&#x4f8b;&#x5982;&#xff0c;&#x901a;&#x8fc7",{"_index":1451,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x7684;&#x4ee3;&#x7801;&#x5f97;&#x5230;&#x6027;&#x80fd;&#x63d0;&#x5347;&#xff0c;&#x4f46;&#x4ee3;&#x4ef7;&#x662f;&#x5176;&#x751f;&#x6210;&#x7684;&#x4f53;&#x91cf;&#x53d8;&#x5927;&#xff1a",{"_index":1666,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x7684;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x548c",{"_index":92,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7684;&#x4efb;&#x610f;&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x6765;&#x8c03;&#x7528",{"_index":1788,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x7684;&#x503c;&#x3002",{"_index":228,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x503c;&#x4e3a",{"_index":786,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7684;&#x503c;&#x4e4b;&#x540e;&#xff0c;&#x4e00;&#x4e2a",{"_index":447,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x7684;&#x503c;&#x662f;&#x65e0;&#x5173;&#x7d27;&#x8981;&#x7684;&#x3002;&#x5728;&#x5982;&#x4e0b;&#x60c5;&#x51b5;&#x8fd9;&#x5f88;&#x91cd;&#x8981;&#xff1a",{"_index":246,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x503c;&#xff0c;&#x5373",{"_index":783,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7684;&#x5219;&#x4f7f;&#x7528;&#x67d0;&#x4e9b;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x4f7f;&#x4e24;&#x79cd;&#x7c7b;&#x578b;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x533a;&#x522b;&#x662f;&#x5fc5;&#x8981;&#x7684;&#xff1a",{"_index":556,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x7684;&#x533a;&#x522b;&#x3002;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;&#x8fd9;&#x91cc;&#x4f7f;&#x7528;&#x4e00;&#x4e2a;&#x5177;&#x4f53;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x662f;&#x6ca1;&#x6709;&#x610f;&#x4e49;&#x7684;&#xff0c;&#x53ea;&#x662f;&#x7528;&#x4e8e;&#x6f14;&#x793a;&#x76ee;&#x7684;&#x3002;&#x901a;&#x5e38;&#x6211;&#x4eec;&#x4f1a;&#x5728;&#x8fd9;&#x91cc;&#x7701;&#x7565;&#x7c7b;&#x578b;&#xff0c;&#x8ba9",{"_index":489,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x7684;&#x53ea;&#x8bfb;&#x5c5e;&#x6027;&#xff08;&#x7b2c;4.2&#x8282;&#xff09;&#x3002;&#x7ea6;&#x675f;&#x6307;&#x660e;&#x4e00;&#x4e2a;&#x517c;&#x5bb9;&#x7684;&#x7c7b;&#x578b;&#x6ee1;&#x8db3;&#xff1a",{"_index":1514,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x7684;&#x5404;&#x4e2a",{"_index":1829,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x7684;&#x5730;&#x65b9;&#x3002;&#x867d;&#x7136;&#x8fd9;&#x53ea;&#x4e0d;&#x8fc7;&#x8282;&#x7701;&#x4e86;&#x51e0;&#x6b21;&#x6572;&#x952e;&#x76d8;&#x7684;&#x6b21;&#x6570;&#xff0c;&#x4f46;&#x5728;&#x7528;&#x4e8e;&#x66f4;&#x590d;&#x6742;&#x3001;&#x6df7;&#x5408;&#x7684;&#x7c7b;&#x578b;&#x65f6;&#x4f1a;&#x4ea7;&#x751f;&#x5f88;&#x5927;&#x7684;&#x5dee;&#x5f02;&#x3002;&#x518d;&#x4e00;&#x6b21;&#xff0c;&#x8fd9;&#x6b63;&#x662f;&#x4e3a;&#x4ec0;&#x4e48",{"_index":1474,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7684;&#x58f0;&#x660e;&#x548c",{"_index":864,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7684;&#x5b50;&#x7c7b;&#x3002;&#x4e00;&#x4e2a;&#x7c7b;&#x53ef;&#x4ee5;&#x6709;&#x8bb8;&#x591a;&#x5b50;&#x7c7b;&#xff0c;&#x4f46;&#x662f;&#x53ea;&#x6709;&#x4e00;&#x4e2a;&#x7236;&#x7c7b;&#x3002;&#x672f;&#x8bed;&#x201c;&#x4e00;&#x4e2a",{"_index":303,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7684;&#x5b9a;&#x4e49;&#x5728;&#x6b64;&#x4f8b;&#x4e2d;&#x5f88;&#x76f4;&#x89c2;&#xff0c;&#x4f46;&#x8fd9;&#x53ea;&#x662f;&#x4f1a;&#x6267;&#x884c;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x7684;&#x5176;&#x4e2d;&#x4e00;&#x4f8b;&#xff1a",{"_index":1926,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7684;&#x5b9e;&#x4f8b;&#x540c;&#x65f6;&#x4e5f;&#x662f",{"_index":392,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x7684;&#x5c5e;&#x6027",{"_index":1519,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x7684;&#x5f00;&#x53d1;&#x4e2d;&#x505a;&#x51fa;&#x67d0;&#x4e9b;&#x51b3;&#x5b9a;&#xff0c;&#x6216;&#x8005;&#x8fc7;&#x53bb;&#x7684",{"_index":33,"title":{},"body":{"index.html#关于本文档":{}}}],["x7684;&#x5f62;&#x5f0f;&#x6bd4;&#x8f83;&#xff08;&#x662f",{"_index":211,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x7684;&#x5f62;&#x5f0f;&#x8fdb;&#x884c;&#x8bbf;&#x95ee",{"_index":2062,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x7684;&#x60c5;&#x51b5;&#x3002",{"_index":480,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x7684;&#x6267;&#x884c;&#x7ed3;&#x679c;&#x4e3a",{"_index":243,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x6269;&#x5c55;&#x3002;&#x7136;&#x540e;&#x8865;&#x5145;&#x989d;&#x5916;&#x7684;&#x7c7b;&#x5b57;&#x6bb5;&#xff0c;&#x6b64;&#x4f8b;&#x4e2d;&#xff0c;&#x9700;&#x8981;&#x4e00;&#x4e2a",{"_index":723,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x7684;&#x6548;&#x679c;&#x3002",{"_index":2283,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x7684;&#x65b9;&#x6cd5",{"_index":1219,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7684;&#x65f6;&#x5019;&#x4e0d;&#x4f1a;&#x6267;&#x884c",{"_index":244,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x65f6;&#x5019;&#x6211;&#x4eec;&#x7b80;&#x8981;&#x7684;&#x4ecb;&#x7ecd;&#x4e86;&#x5982;&#x4f55;&#x901a;&#x8fc7;&#x5173;&#x952e;&#x5b57",{"_index":1465,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7684;&#x65f6;&#x5019;&#x624d;&#x7ee7;&#x7eed;&#x6267;&#x884c",{"_index":241,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x65f6;&#x5019;&#x8bbf;&#x95ee",{"_index":249,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x65f6;&#x5019;&#xff0c;dynam",{"_index":958,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x63a5;&#x53d7;&#x4e24;&#x4e2a;&#x53c2;&#x6570",{"_index":354,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x662f;&#x5185;&#x8054;&#x7684",{"_index":1440,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x7684;&#x68c0;&#x67e5;&#x5219;&#x4f1a;&#x9632;&#x6b62;&#x5b83;&#x3002",{"_index":251,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b;&#x4f1a;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x5176;&#x6240;&#x5728;&#x7684;&#x5305;&#xff08;package&#xff09;&#x7684;&#x4e00;&#x4e2a;&#x6210;&#x5458;&#xff0c;&#x6bd4;&#x5982;&#x5728;&#x4e0a;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x4e2d;&#xff0c;&#x6a21;&#x5757;&#x5b50;&#x7c7b;&#x578b",{"_index":2069,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x7684;&#x7236;&#x7c7b;&#x201d;&#x901a;&#x5e38;&#x6307;&#x5b83;&#x7684;&#x76f4;&#x63a5;&#x7236;&#x7c7b;&#x3001;&#x7236;&#x7c7b;&#x7684;&#x7236;&#x7c7b;&#x7b49;&#x3002",{"_index":304,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7684;&#x7236;&#x7c7b;&#xff0c;&#x800c",{"_index":301,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7684;&#x7279;&#x5b9a;&#x7c7b;&#x578b",{"_index":475,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x7684;&#x7528;&#x6cd5;&#xff09;&#x3002",{"_index":2285,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x7684;&#x7b80;&#x5316;&#xff09;&#x3002",{"_index":212,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x7684;&#x7b80;&#x77ed;&#x5199;&#x6cd5;&#x3002;&#x540e;&#x8005;&#x7531;&#x56db;&#x90e8;&#x5206;&#x6784;&#x6210;&#xff1a",{"_index":2340,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x7684;&#x7c7b;&#x578b",{"_index":1942,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7684;&#x7c7b;&#x578b;&#x3002",{"_index":657,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}}}],["x7684;&#x7c7b;&#x578b;&#x4e3a",{"_index":158,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7684;&#x7c7b;&#x578b;&#x4f9d;&#x7136;&#x662f",{"_index":1873,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":1509,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x7684;&#x7c7b;&#x578b;&#x5e76;&#x6ca1;&#x6709;&#x7ed1;&#x5b9a;&#x5230;&#x52a8;&#x6001;&#x7c7b;&#x578b;&#xff0c;&#x4ecd;&#x7136;&#x4fdd;&#x6301;&#x4e86;&#x4e00;&#x4e2a;&#x5355;&#x5f62;&#x3002;&#x7136;&#x540e;&#x5b83;&#x5728",{"_index":965,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7684;&#x7c7b;&#x578b;&#x5fc5;&#x7136;&#x4e3a",{"_index":2131,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7684;&#x7c7b;&#x578b;&#x65f6;&#x5b83;&#x4e5f;&#x4f1a;&#x6d3e;&#x4e0a;&#x7528;&#x573a;&#x3002",{"_index":53,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x7684;&#x7c7b;&#x578b;&#x662f",{"_index":1225,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7684;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x77e5;&#x9053;&#x4e03;&#x4e2a;&#x7c7b;&#x578b;&#x7ec4;&#xff1a",{"_index":79,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7684;&#x7c7b;&#x578b;&#x88ab;&#x6539;&#x53d8;&#x4e3a",{"_index":2121,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7684;&#x7c7b;&#x578b;&#x8bed;&#x6cd5;&#x5f62;&#x5f0f;&#x3002",{"_index":1309,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x7684;&#x7c7b;&#x578b;&#x901a;&#x8fc7",{"_index":793,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7684;&#x7c7b;&#x578b;&#x90fd;&#x4f1a;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x51fd;&#x6570;&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x3002;&#x5982;&#x679c;&#x51fd;&#x6570;&#x6ca1;&#x6709;&#x663e;&#x5f0f;&#x5730;&#x58f0;&#x660e;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#xff0c;&#x5219;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x4f1a;&#x88ab;&#x63a8;&#x65ad;&#x4e3a",{"_index":1941,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7684;&#x7c7b;&#x578b;&#xff1a;&#x5b83;&#x662f;&#x4e00;&#x4e2a;&#x5305;&#x542b;&#x4e86;&#x4e24;&#x4e2a",{"_index":790,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7684;&#x7c7b;&#xff08;&#x5e26;&#x6216;&#x8005;&#x4e0d;&#x5e26;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#xff09;&#x4e5f;&#x53ef;&#x4ee5;&#x5229;&#x7528;&#x4e00;&#x4e2a;&#x7279;&#x522b;&#x7684;&#x65b9;&#x6cd5;&#x540d;&#x5b57;&#x53eb;&#x505a",{"_index":908,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x7684;&#x7ec6;&#x8282;&#x90e8;&#x5206;&#x5728;&#x540e;&#x9762;&#x8fdb;&#x884c;&#x8bb2;&#x89e3;&#x3002",{"_index":500,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x7684;&#x7ed3;&#x679c;&#x4e3a",{"_index":240,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7684;&#x8bed;&#x6cd5;&#x4e0d;&#x4f1a;&#x5141;&#x8bb8;&#x5bf9;&#x8be5;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x7684;&#x8868;&#x8fbe;&#x5f0f;&#xff0c;&#x5e76;&#x4e14;&#x5fc5;&#x987b;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":628,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x7684;&#x8bf4;&#x660e;&#x7a0d;&#x6709;&#x63d0;&#x53ca;&#xff0c;&#x73b0;&#x5728;&#x8ba9;&#x6211;&#x4eec;&#x6765;&#x6b63;&#x5f0f;&#x5730;&#x4ecb;&#x7ecd;&#x5b83;&#xff1a",{"_index":2109,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7684;&#x8c03;&#x7528;&#xff0c;&#x8fd9;&#x4e24;&#x4e2a;&#x53c2;&#x6570;&#x5fc5;&#x987b;&#x662f;&#x76f8;&#x540c;&#x7c7b;&#x578b;&#x3002;&#x7f16;&#x8bd1;&#x5668;&#x627f;&#x8ba4;&#x7b2c;&#x4e00;&#x4e2a;&#x8c03;&#x7528;&#xff08;&#x4e24;&#x79cd;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x90fd;&#x662f",{"_index":1612,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x7684;&#x8f6c;&#x6362;&#x5206;&#x522b;&#x662f;&#x5141;&#x8bb8;&#x7684;&#xff0c;&#x800c;&#x4e00;&#x4e2a;&#x4f20;&#x9012;&#x7684;&#x4ec",{"_index":1101,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7684;&#x8f6c;&#x6362;&#x5219;&#x4e0d;&#x5141;&#x8bb8;&#x3002;&#x8fd9;&#x662f;&#x4e3a;&#x4e86;&#x907f;&#x514d;&#x4e0d;&#x660e;&#x786e;&#x7684;&#x8f6c;&#x6362;&#x8def;&#x5f84;&#xff0c;&#x5e76;&#x4fdd;&#x6301;&#x4e00;&#x4e2a;&#x7b80;&#x5355;&#x7684;&#x9009;&#x62e9;&#x89c4;&#x5219;&#x3002",{"_index":1102,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7684;&#x8f6c;&#x6362;&#x548c;&#x4ece",{"_index":1100,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7684;&#x8f93;&#x51fa;&#x5219;&#x5f88;&#x660e;&#x663e;&#xff1a",{"_index":1280,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x7684;&#x8fd4;&#x56de;&#x503c;&#x5206;&#x914d;&#x7ed9",{"_index":446,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x662f",{"_index":963,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x662f;&#x65e0;&#x5173;&#x7684;&#xff0c;&#x9274;&#x4e8e;&#x5b83;&#x4e0d;&#x80fd;&#x88ab;&#x5206;&#x914d;&#x7ed9;&#x4efb;&#x4f55",{"_index":1868,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7684;&#x901a;&#x7528;&#x7c7b;&#x578b",{"_index":1826,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x7684;&#xff0c;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x4e00;&#x4e2a;&#x6bd4;&#x8f83;&#x5178;&#x578b;&#x7684;&#x5904;&#x7406;&#xff09;&#x3002;&#x5728;&#x4e00;&#x4e9b;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x53ef;&#x80fd;&#x4ecd;&#x7136;&#x4f20;&#x9012",{"_index":812,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x76ee;&#x6807;&#x5e73;&#x53f0;&#x7684;&#x8f93;&#x51fa;&#x7528;&#x4f5c;&#x89e3;&#x91ca;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x5728;&#x672c;&#x6587;&#x6863;&#x4e2d;&#x6211;&#x4eec;&#x5b9a;&#x4e49;&#x4e86;&#x4e00;&#x7ec4;&#x672f;&#x8bed;&#x3002;&#x4e3b;&#x8981;&#x7528;&#x4e8e;&#x5f15;&#x5165;&#x4e00;&#x4e2a;&#x65b0;&#x7684;&#x7c7b;&#x578b;&#x6216;&#x662f;&#x4e00;&#x4e2a",{"_index":27,"title":{},"body":{"index.html#关于本文档":{}}}],["x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#x3002",{"_index":566,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#x662f;&#x6b63;&#x786e;&#x7684;&#x3002",{"_index":561,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x76ee;&#x6807;&#x8bed;&#x8a00;&#x539f;&#x751f;&#x7684;&#x3002",{"_index":1295,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x76ee;&#x6807;&#x8bed;&#x8a00;&#x53ef;&#x4ee5;&#x7406;&#x89e3;&#x5b83;&#x7684;&#x610f;&#x601d;&#x3002;&#x7136;&#x800c;&#xff0c;&#x5bf9;&#x4e8e;&#x5b8f;&#x7684;&#x4f5c;&#x8005;&#x548c;&#x65b0;&#x7684",{"_index":1297,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x76ee;&#x6807;&#x8bed;&#x8a00;&#x53ef;&#x80fd;&#x662f;&#x5f88;&#x6709;&#x8da3;&#x7684;&#x7528;&#x4f8b;&#x3002",{"_index":1298,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x76f4;&#x63a5;&#x8f6c;&#x6362;&#xff1a",{"_index":1052,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x76f8;&#x7b49",{"_index":193,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{}}}],["x770b;&#x4e91;&#x4e0a;&#x524d;&#x4eba;&#x7ffb;&#x8bd1;&#x8fc7;&#x7684;&#x4e00;&#x4efd",{"_index":15,"title":{},"body":{"index.html#关于本文档":{}}}],["x786e;&#x4fdd;&#x53ef;&#x9009;&#x7684;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x662f;&#x53ef;&#x7a7a;&#x7684;&#x3002;&#x524d;&#x4e09;&#x4e2a;&#x8c03;&#x7528;&#x975e;&#x5e38;&#x76f4;&#x89c2;&#xff0c;&#x7b2c;&#x56db;&#x4e2a;&#x53ef;&#x80fd;&#x662f;&#x4e00;&#x4e2a;&#x60ca;&#x559c;&#xff1a;&#x5982;&#x679c;&#x63d0;&#x4f9b;&#x7684;&#x503c;&#x53ef;&#x4ee5;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a;&#x4e4b;&#x540e;&#x7684;&#x53c2;&#x6570;&#xff0c;&#x786e;&#x5b9e;&#x5141;&#x8bb8;&#x8df3;&#x8fc7;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x3002",{"_index":854,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x793a;&#x4f8b;&#x4e2d;&#x7684",{"_index":1141,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x7a0b;&#x5e8f;&#x4e2d;&#x4e3b;&#x8981;&#x7684;&#x6570;&#x636e;&#x7ed3;&#x6784;&#x3002;&#x6bcf;&#x4e2a",{"_index":497,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x7a77;&#x5c3d;&#x6027;&#xff08;&#x7b2c;6.4.10&#x8282;&#xff09",{"_index":1287,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x7ae0;&#x8282;&#x8fdb;&#x4e00;&#x6b65;&#x63a2;&#x7d22;&#x3002",{"_index":460,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x7b26;&#x53f7;&#x4e4b;&#x540",{"_index":869,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7b26;&#x53f7;&#x5206;&#x683c;&#x6bcf;&#x4e00;&#x4e2a;&#x6b32;&#x6269;&#x5c55;&#x7684;&#x7ed3;&#x6784;&#x6765;&#x8868;&#x793a;&#x3002",{"_index":735,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x7b2c;&#x4e00;&#x6b21;&#x8c03;&#x7528;&#x4e0d;&#x5e26;&#x4efb;&#x4f55;&#x53c2;&#x6570",{"_index":841,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7b2c;&#x4e09;&#x6b21;&#x8c03;&#x7528;&#x5e26;&#x4e86;&#x4e24;&#x4e2a;&#x53c2;&#x6570",{"_index":843,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7b2c;&#x4e8c;&#x6b21;&#x8c03;&#x7528;&#x5e26;&#x6709;&#x4e00;&#x4e2a;&#x5355;&#x72ec;&#x7684;&#x53c2;&#x6570",{"_index":842,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7b2c;&#x56db;&#x6b21;&#x8c03;&#x7528;&#x53ea;&#x6709;&#x5355;&#x72ec;&#x7684;&#x53c2;&#x6570",{"_index":844,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7b97;&#x672f;&#x8fd0;&#x7b97;&#x7b26",{"_index":178,"title":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}},"body":{}}],["x7c7b;&#x3002",{"_index":308,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7c7b;&#x4f3c;&#x4e8e;&#x7c7b;&#x548c;&#x5b83;&#x4eec;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff0c;&#x679a;&#x4e3e;&#x901a;&#x8fc7;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x7684;&#x4e00;&#x4e2a;&#x6784;&#x9020;&#x51fd;&#x6570;&#x63d0;&#x4f9b;&#x4e86;&#x4e00;&#x79cd;&#x5b9e;&#x4f8b;&#x5316;&#x65b9;&#x5f0f;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4e0e;&#x7c7b;&#x4e0d;&#x540c;&#xff0c;&#x679a;&#x4e3e;&#x63d0;&#x4f9b;&#x4e86;&#x591a;&#x4e2a;&#x53ef;&#x4ee5;&#x7b80;&#x5355;&#x7684;&#x901a;&#x8fc7;&#x5b83;&#x4eec;&#x7684;&#x540d;&#x5b57;&#x4f7f;&#x7528;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff1a",{"_index":470,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{}}}],["x7c7b;&#x4f3c;&#x4e8e;&#x901a;&#x8fc7",{"_index":1138,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x7c7b;&#x4f3c;&#x7684;&#xff0c;&#x6dfb;&#x52a0",{"_index":1073,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7c7b;&#x4f3c;&#xff0c;&#xff1a",{"_index":1217,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7c7b;&#x5206;&#x914d;&#x5230;&#x5176;&#x6240;&#x5b9e;&#x73b0;&#x7684;&#x63a5;&#x53e3",{"_index":1808,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x7c7b;&#x53ef;&#x4ee5",{"_index":898,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x7c7b;&#x53ef;&#x4ee5;&#x7528;&#x6765;&#x786e;&#x4fdd;&#x6b63;&#x786e;&#x7684;&#x6ea2;&#x51fa;&#x884c;&#x4e3a;&#xff0c;&#x4e0e;&#x5e73;&#x53f0;&#x65e0;&#x5173;&#xff0c;&#x800c;&#x989d;&#x5916;&#x7684;&#x8ba1;&#x7b97;&#x6210;&#x672c;&#x53d6;&#x51b3;&#x4e8e;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002",{"_index":130,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["x7c7b;&#x53ef;&#x4ee5;&#x7ee7;&#x627f;&#x81ea;&#x5176;&#x5b83;&#x7684;&#x7c7b;&#xff0c;&#x5728",{"_index":292,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7c7b;&#x578b",{"_index":150,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x7c7b;&#x578b;&#x3002",{"_index":882,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#x3002;&#x8fd9;&#x5728;&#x7b2c;9&#x548c;10&#x884c;&#x5c55;&#x793a;&#xff0c;&#x7b2c;&#x4e00;&#x4e2a;&#x5206;&#x914d",{"_index":1062,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7c7b;&#x578b;&#x4e14;&#x540d;&#x4e3a",{"_index":1518,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x7c7b;&#x578b;&#x4e5f;&#x4e0d;&#x884c",{"_index":1859,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#x4e86",{"_index":2122,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7c7b;&#x578b;&#x4ee5;&#x4e00;&#x79cd;&#x7279;&#x6b8a;&#x7684;&#x65b9;&#x5f0f;&#x8fd0;&#x884c;&#x3002;&#x5355;&#x5f62;&#x6ca1;&#x6709;&#x7ed1;&#x5b9a;&#x5230",{"_index":959,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x4f7f;&#x7528;&#xff0c",{"_index":935,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x503c;&#x3002;&#x5982;&#x679c;&#x8c03;&#x7528;&#x8fd9;&#x4e2a;&#x51fd;&#x6570;&#xff0c;&#x4f8b;&#x5982",{"_index":874,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x5143;&#x7d20;&#x4e4b;&#x540e;&#x624d;&#x77e5;&#x9053;&#x5176;&#x7c7b;&#x578b;&#x4e3a",{"_index":2133,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7c7b;&#x578b;&#x5173;&#x95ed;&#x3002;&#x4e00;&#x4e2a",{"_index":929,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x5230;&#x4e00;&#x4e2a",{"_index":112,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":2344,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570;&#x3002;&#x8c03;&#x7528;&#x7684;&#x7c7b;&#x578b;&#x7136;&#x540e;&#x5c31;&#x4f1a;&#x548c",{"_index":880,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x591a;&#x79cd;&#x7c7b;&#x578b;&#x88ab;&#x7ea6;&#x675f;&#xff1a",{"_index":1506,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570;&#xff08;&#x7b2c;3.2&#x8282;&#xff09",{"_index":52,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{},"2.类型/2.类型.html#2-类型":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7c7b;&#x578b;&#x53c2;&#x6570;&#xff0c;&#x7136;&#x540e;&#x68c0;&#x67e5",{"_index":879,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x53d8;&#x91cf",{"_index":1068,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7c7b;&#x578b;&#x53d8;&#x91cf;&#x5b57;&#x6bb5",{"_index":508,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x7c7b;&#x578b;&#x53d8;&#x91cf;&#x65f6;&#xff0c;&#x4f1a;&#x5bfc;&#x81f4;&#x7f16;&#x8bd1;&#x5668;&#x5c1d;&#x8bd5",{"_index":1917,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7c7b;&#x578b;&#x53ef;&#x80fd;&#x4f1a;&#x4e22;&#x5931;&#x7cbe;&#x5ea6;&#xff0c;&#x662f;&#x4e0d;&#x88ab;&#x9690;&#x5f0f;&#x7684;&#x5141;&#x8bb8;&#x7684;&#x3002",{"_index":113,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;&#x53ef;&#x80fd;&#x5f15;&#x53d1;&#x8fd0;&#x884c;&#x65f6;&#x9519;&#x8bef;&#x7684;&#x4f8b;&#x5b50;&#x975e;&#x5e38;&#x5bb9;&#x6613;&#x51fa;&#x73b0;&#x3002;&#x601d;&#x8003;&#x4e0b;&#x9762;&#x7684;&#x4e24;&#x884c;&#x4ee3;&#x7801;&#x5230;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x7f16;&#x8bd1;&#xff1a",{"_index":938,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x540d;stringmap",{"_index":2343,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x7c7b;&#x578b;&#x5728",{"_index":973,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x5c5e;&#x6027",{"_index":730,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x7c7b;&#x578b;&#x5de5;&#x5177;&#x53ef;&#x4ee5;&#x786e;&#x4fdd;&#x96c6;&#x5408;&#x7684;&#x6240;&#x6709;&#x503c;&#x4f1a;&#x88ab;&#x6b63;&#x786e;&#x5206;&#x914d;&#x7c7b;&#x578b;&#x3002",{"_index":1283,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x7c7b;&#x578b;&#x5e94;&#x7528;&#x8fd9;&#x79cd;&#x65b9;&#x5f0f;&#xff0c;&#x5176;&#x4e2d;&#x4e0b;&#x9762;&#x4e24;&#x4e2a;&#x65b9;&#x6cd5;&#x53ef;&#x4ee5;&#x88ab;&#x53d1;&#x73b0;&#xff1a",{"_index":1188,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7c7b;&#x578b;&#x6240;&#x5c55;&#x793a;&#x7684;&#xff1a",{"_index":1480,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7c7b;&#x578b;&#x63a8;&#x65ad",{"_index":946,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x63a8;&#x65ad;&#x5728;&#x4f7f;&#x7528;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x7684;&#x65f6;&#x5019;&#x8282;&#x7701;&#x4e86;&#x5927;&#x91cf;&#x624b;&#x52a8;&#x7c7b;&#x578b;&#x5316;&#xff0c;&#x4f46;&#x662f;&#x6709;&#x65f6;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x4ecd;&#x7136;&#x9700;&#x8981;&#x4e00;&#x4e9b;&#x5e2e;&#x52a9;&#x3002;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;&#x5b83;&#x751a;&#x81f3;&#x4e0d;&#x5c1d;&#x8bd5;&#x63a8;&#x65ad;&#x53d8;&#x91cf;&#xff08;&#x7b2c;4.1&#x8282;&#xff09;&#x6216;&#x8005;&#x5c5e;&#x6027;&#xff08;&#x7b2c;4.2&#x8282;&#xff09;&#x5b57;&#x6bb5;&#xff0c;&#x9664;&#x975e;&#x5b83;&#x6709;&#x4e00;&#x4e2a;&#x76f4;&#x63a5;&#x7684;&#x521d;&#x59cb;&#x5316;&#x3002",{"_index":1984,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["x7c7b;&#x578b;&#x63a8;&#x65ad;&#x7684;&#x6548;&#x679c;&#x5c06;&#x4f1a;&#x9891;&#x7e41;&#x51fa;&#x73b0;&#x4e8e;&#x6574;&#x4e2a;&#x6587;&#x6863;&#x4e2d;&#x3002;&#x4e00;&#x4e2a;&#x4f8b;&#x5b50;&#x53ef;&#x4ee5;&#x5c55;&#x793a;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff1a",{"_index":2105,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6&#x8282;&#xff09",{"_index":75,"title":{},"body":{"2.类型/2.类型.html#2-类型":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;3.6&#xff09;&#x4e2d;&#x8fdb;&#x884c;&#x89e3;&#x91ca;&#x3002",{"_index":1322,"title":{},"body":{"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{}}}],["x7c7b;&#x578b;&#x6765;&#x5141;&#x8bb8",{"_index":587,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x7c7b;&#x578b;&#x68c0;&#x67e5;&#x5668;&#x68c0;&#x67e5",{"_index":877,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x7684",{"_index":653,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x7c7b;&#x578b;&#x7684;&#x503c;&#x7ecf;&#x5e38;&#x51fa;&#x73b0;&#x5728;&#x6761;&#x4ef6;&#x4e2d;&#xff0c;&#x4f8b;&#x5982",{"_index":229,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x503c;&#x7ed9;&#x4e00;&#x4e2a",{"_index":1916,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7c7b;&#x578b;&#x7684;&#x503c;&#xff1a",{"_index":231,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x51fa;&#x73b0;&#x5728;&#x901a;&#x5f80",{"_index":976,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570",{"_index":1426,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#x3002;&#x7136;&#x800c;&#xff0c;&#x4f7f;&#x7528;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x4e5f;&#x53ef;&#x4ee5;&#x5b9a;&#x4e49;&#x81ea;&#x5df1;&#x7684;&#x6570;&#x7ec4;&#x8bbf;&#x95ee;&#x65b9;&#x6cd5;&#x3002",{"_index":1185,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#xff0c;&#x5206;&#x522b;&#x662f",{"_index":533,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#xff0c;&#x5e76;&#x8fd4;&#x56de;&#x4e00;&#x4e2a",{"_index":873,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x53c2;&#x6570;&#xff0c;&#x7b2c;&#x4e8c;&#x4e2a",{"_index":872,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x53d8;&#x91cf",{"_index":1064,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#x7684;&#x53ef;&#x8bbf;&#x95ee;&#x6027;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x8bbf;&#x95ee;&#x63a7;&#x5236;&#xff08;&#x7b2c;6.10&#x8282;&#xff09;&#x8fdb;&#x884c;&#x66f4;&#x7cbe;&#x786e;&#x5730;&#x63a7;&#x5236;&#x3002",{"_index":2077,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x5730;&#x65b9;&#xff08;&#x786e;&#x5207;&#x7684;&#x8bf4;&#xff0c;int",{"_index":107,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x548c;&#x53d8;&#x91cf;&#xff0c;&#x5982;&#x679c;&#x5c1d;&#x8bd5;&#x8fd9;&#x6837;&#x58f0;&#x660e;&#xff0c;&#x5b83;&#x4f1a;&#x53d1;&#x51fa;&#x62b1;&#x6028;&#xff1a",{"_index":161,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x7c7b;&#x578b;&#x7684;&#x5b57;&#x9762;&#x503c;&#x8d4b;&#x503c;&#x5230;&#x53d8;&#x91cf",{"_index":2117,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7c7b;&#x578b;&#x7684;&#x65f6;&#x5019;&#xff0c;&#x51fd;&#x6570",{"_index":1134,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x7c7b;&#x578b;&#x7684;&#x70b9;&#x8def;&#x5f84;&#x7531;&#x5305;&#xff0c;&#x6a21;&#x5757;&#x540d;&#x548c;&#x7c7b;&#x578b;&#x540d;&#x7ec4;&#x6210;&#x3002;&#x5b83;&#x7684;&#x901a;&#x5e38;&#x683c;&#x5f0f;&#x662f",{"_index":2351,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x7c7b;&#x578b;&#x7684;&#xff0c;&#x4f46;&#x6211;&#x4eec;&#x53ef;&#x4ee5;&#x628a;&#x5b83;&#x5206;&#x914d;&#x7ed9",{"_index":1866,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x63d0;&#x4f9b;&#x4e00;&#x4e2a;&#x548c;&#x6240;&#x6709;&#x7684;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x7edf;&#x4e00;&#x7684;&#x7c7b;&#x578b;&#xff1a",{"_index":534,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x7684;&#x6301;&#x7eed;&#x6539;&#x8fdb;&#xff0c;dynam",{"_index":975,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#x7cfb;&#x7edf;&#x7684;&#x6838;&#x5fc3;&#xff0c;&#x5176;&#x4e3a;haxe&#x7a0b;&#x5e8f;&#x6781;&#x5927;&#x5730;&#x63d0;&#x5347;&#x4e86;&#x5065;&#x58ee;&#x6027;&#xff08;&#x6216;&#x79f0;&#x9c81;&#x68d2;&#x6027;&#xff09;&#x3002;&#x5b83;&#x63cf;&#x8ff0;&#x4e86;&#x67d0;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x4e0e;&#x53e6;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x662f;&#x5426;&#x517c;&#x5bb9;&#x7684;&#x8fc7;&#x7a0b;&#x3002",{"_index":1905,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7c7b;&#x578b;&#x7ed9;&#x51fa;&#x4e00;&#x4e2a;&#x660e;&#x786e;&#x7684;&#x5b9a;&#x4e49;&#x3002;&#x7531;&#x4e8",{"_index":1857,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#x7edf;&#x4e00",{"_index":110,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;&#x8868;&#x793a;&#x4e00;&#x4e2a;&#x975",{"_index":226,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["x7c7b;&#x578b;&#x8def;&#x5f84",{"_index":2349,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x7c7b;&#x578b;&#x8f6c;&#x6362;&#xff08;&#x7b2c;5.23&#xff09;&#x4e3a;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#x3002;&#x4e5f;&#x4e0d;&#x53ef;&#x80fd;&#x4e3a;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x521b;&#x5efa;&#x65b0;&#x7684;&#x5b9e;&#x4f8b;&#xff0c;&#x9664;&#x975e;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x662f;&#x6cdb;&#x578b;&#xff08;&#x7b2c;3.3&#x8282;&#xff09;&#x5e76;&#x4e14;&#x88ab;&#x76f8;&#x5e94;&#x7684;&#x7ea6;&#x675f;&#x3002",{"_index":1593,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x7c7b;&#x578b;&#x9996;&#x53c2;&#x6570;&#x3002;&#x8fd9;&#x4f7f;&#x5b83;&#x5728;&#x7b2c;14&#x884c;&#x53ef;&#x4ee5;&#x7528;&#x5728;&#x53d8;&#x91cf",{"_index":1221,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x7c7b;&#x578b;&#xff08;&#x7b2c;2&#x7ae0;&#xff09",{"_index":47,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{}}}],["x7c7b;&#x578b;&#xff08;&#x7b2c;2.1.5&#xff09;&#xff0c;&#x56e0;&#x6b64;&#x9700;&#x8981;&#x5bf9;&#x4f55;&#x79cd;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x88ab;&#x7edf;&#x4e00;&#x4e3a",{"_index":1856,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x7c7b;&#x578b;&#xff0c",{"_index":1956,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7c7b;&#x578b;&#xff0c;&#x4e4b;&#x540e;&#x53ef;&#x80fd;&#x4f1a;&#x6210;&#x4e3a;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b",{"_index":88,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x548c;&#x63d0;&#x4f9b;&#x4efb;&#x610f;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x7684",{"_index":900,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x7c7b;&#x578b;&#xff0c;&#x56e0;&#x4e3a;&#x5f88;&#x591a;&#x60c5;&#x51b5;&#x4e0b;&#x90fd;&#x6709;&#x66f4;&#x597d;&#x7684;&#x9009;&#x62e9;&#xff0c;&#x4f46;&#x662f;&#x6709;&#x65f6;&#x5019;&#x5b9e;&#x9645;&#x4f1a;&#x7528;&#x5230;&#x5b83;&#x3002;hax",{"_index":954,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x5982;&#x679c;&#x5230;&#x8fbe;&#x6d6e;&#x70b9;&#x6570;&#x9650;&#x5236;&#xff08;252&#xff09;&#x5219;&#x4f1a;&#x53d1;&#x751f;&#x7cbe;&#x5ea6;&#x7684;&#x635f;&#x5931;&#x3002",{"_index":127,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["x7c7b;&#x578b;&#xff0c;&#x5b83;&#x5305;&#x542b;&#x4e86;&#x4e24;&#x4e2a",{"_index":652,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x7c7b;&#x578b;&#xff0c;&#x5c40;&#x90e8;&#x53d8;&#x91cf",{"_index":964,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x610f;&#x601d;&#x662f;&#x5b83;&#x53ef;&#x4ee5;&#x88ab;&#x7528",{"_index":1060,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7c7b;&#x578b;&#xff0c;&#x6216;&#x8005;&#x4f7f;&#x7528",{"_index":109,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;&#xff0c;&#x6240;&#x4ee5;&#x7528;&#x6237;&#x5fc5;&#x987b;&#x660e;&#x786e;&#x5b83;&#x3002;&#x4e4b;&#x524d;&#x7684",{"_index":948,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x7b2c;&#x4e8c;&#x4e2a;&#x53c2;&#x6570;&#x662f;&#x51fd;&#x6570",{"_index":885,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x800c;&#x4e14;&#x6709;&#x65f6;&#x5019;&#x5b83;&#x662f;&#x5728;&#x5904;&#x7406;&#x7f16;&#x8bd1;&#x65f6;&#x672a;&#x77e5;&#x7684;&#x81ea;&#x5b9a;&#x4e49;&#x6570;&#x636e;&#x7ed3;&#x6784;&#x6700;&#x597d;&#x9009;&#x62e9;&#x3002;&#x5f53;&#x88ab;&#x7528;&#x4e00;&#x4e2a",{"_index":957,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7c7b;&#x578b;&#xff0c;&#x8fd4;&#x56de",{"_index":886,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x7c7b;&#x578b;&#xff1a",{"_index":101,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x7c7b;&#x578b;a",{"_index":1907,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7c7b;&#x5b57;&#x6bb5;&#xff08;&#x7b2c;2.8.1&#xff09",{"_index":1139,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x7c7b;&#x5b57;&#x6bb5;&#xff08;&#x7b2c;4&#x7ae0;&#xff09",{"_index":499,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x7c7b;&#x5b57;&#x6bb5;&#xff1a",{"_index":1054,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7c7b;&#x5b9e;&#x4f8b;&#xff08;&#x7b2c;2.3&#x8282;&#xff09",{"_index":357,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x7c7b;&#x5b9e;&#x4f8b;&#xff1a;&#x4e00;&#x4e2a;&#x6307;&#x5b9a;&#x7c7b;&#x6216;&#x8005;&#x63a5;&#x53e3;&#x5bf9;&#x8c61",{"_index":80,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7c7b;&#x5f88;&#x76f8;&#x4f3c;&#xff0c;&#x4f7f;&#x7528;&#x4e86;&#x4e24;&#x4e2a;&#x65b0;&#x7684;&#x90e8;&#x5206;&#xff1a",{"_index":306,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7c7b;&#x6709;&#x4e00;&#x4e2a;&#x5230",{"_index":389,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x7c7b;&#x7684;&#x4e00;&#x4e2a;&#x5b9e;&#x4f8b;&#x3002",{"_index":78,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7c7b;&#x7684;&#x4e00;&#x90e8;&#x5206;&#xff1a",{"_index":1784,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x3002",{"_index":299,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x540c;&#x65f6;&#x4e5f;&#x662f",{"_index":298,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x901a;&#x8fc7;&#x8c03;&#x7528;&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff08;&#x4e00;&#x4e2a;&#x901a;&#x5e38;&#x79f0;&#x4e3a;&#x5b9e;&#x4f8b;&#x5316;&#x7684;&#x8fc7;&#x7a0b;&#xff09;&#x521b;&#x5efa;&#x3002;&#x7c7b;&#x5b9e;&#x4f8b;&#x7684;&#x53e6;&#x4e00;&#x4e2a;&#x79f0;&#x547c;&#x53eb;&#x505a;&#x5bf9;&#x8c61;&#x3002;&#x7136;&#x800c;&#xff0c;&#x6211;&#x4eec;&#x66f4;&#x503e;&#x5411;&#x4e8e;&#x4f7f;&#x7528;&#x672f;&#x8bed;&#x201c;&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x201d;&#x6765;&#x5f3a;&#x8c03",{"_index":346,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#xff0c;&#x5b83;&#x88ab;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a;&#x53d8;&#x91cf",{"_index":352,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x7c7b;&#x90fd;&#x6709;&#x4e00;&#x4e2a;&#x786e;&#x5b9a;&#x7684;&#x540d;&#x5b57;&#xff0c;&#x4e00;&#x4e2a;&#x9690;&#x542b;&#x7684;&#x8def;&#x5f84;&#x548c;&#x96f6;&#x6216;&#x8005;&#x591a;&#x4e2a;&#x7c7b;&#x5b57;&#x6bb5;&#x3002;&#x8fd9;&#x91cc;&#x6211;&#x4eec;&#x5c06;&#x5173;&#x6ce8;&#x7c7b;&#x7684;&#x4e00;&#x822c;&#x7ed3;&#x6784;&#x548c;&#x5b83;&#x4eec;&#x7684;&#x5173;&#x7cfb;&#xff0c;&#x800c",{"_index":498,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x7c7b;&#xff08;&#x7b2c;2.3&#x8282;&#xff09",{"_index":268,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["x7c7b;/&#x7c7b;&#x5b9e;&#x4f8b;&#x548c",{"_index":347,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x7ec4;&#x6210",{"_index":509,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x7ecf;&#x8fc7;&#x8bbe;&#x8ba1;&#xff0c;&#x9690;&#x5f0f;&#x8f6c;&#x6362;&#x4e0d;&#x88ab;&#x4f20;&#x9012;&#xff0c;&#x5c31;&#x50cf;&#x4e0b;&#x9762;&#x7684;&#x4f8b;&#x5b50;&#x5c55;&#x793a;&#x7684;&#xff1a",{"_index":1098,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x7ed3;&#x6784;&#x5728;&#x4e4b;&#x524d;&#x4e3a;&#x4e86;&#x4fbf;&#x4e8",{"_index":2107,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316;&#x5b9a;&#x4e49;&#x4e86;&#x5177;&#x6709;&#x76f8;&#x540c;&#x7ed3;&#x6784;&#x7684;&#x7c7b;&#x578b;&#x4e4b;&#x95f4;&#x7684;&#x4e00;&#x79cd;&#x9690;&#x5f0f;&#x5173;&#x7cfb;&#x3002",{"_index":1775,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316;&#xff08;&#x7b2c;3.5.2&#x8282;&#xff09",{"_index":385,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x7ed3;&#x6784;&#x5b50;&#x7c7b;&#x578b;&#x5316;&#xff08;&#x7b2c;3.5.2&#xff09",{"_index":741,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x7ed3;&#x6784;&#x7684;&#x5b57;&#x6bb5;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x4fee;&#x9970;&#x4e3a",{"_index":655,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}}}],["x7ed3;&#x6784;&#x7c7b;&#x578b",{"_index":647,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}}}],["x7ed3;&#x6784;&#x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x53ef;&#x4ee5;&#x88ab;&#x4fee;&#x9970;&#x4e3a;&#x53ef;&#x9009;&#x7684;&#x3002;&#x5728;&#x6807;&#x51c6;&#x5f62;&#x5f0f;&#x7684;&#x58f0;&#x660e;&#x4e0b;&#xff0c;&#x901a;&#x8fc7;&#x4f4d;&#x4e8e;&#x5b57;&#x6bb5;&#x540d;&#x79f0;&#x524d;&#x653e;&#x7f6e;&#x4e00;&#x4e2a;&#x95ee;&#x53f7",{"_index":672,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x7ed3;&#x6784;&#x7c7b;&#x578b;&#x7684;&#x7c7b;&#x8bb0;&#x6cd5",{"_index":645,"title":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{}},"body":{}}],["x7ed3;&#x6784;&#x7c7b;&#x578b;&#xff1a;&#x4e00;&#x4e2a;&#x533f;&#x540d;&#x7ed3;&#x6784;&#xff0c;&#x5373;&#xff0c;&#x4e00;&#x4e2a;&#x88ab;&#x547d;&#x540d;&#x7684;&#x5b57;&#x6bb5;&#x96c6;&#x5408",{"_index":83,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7ed9;&#x5b9a;&#x4e00;&#x4e2a;&#x540d;&#x5b57;&#x6765;&#x7f29;&#x77ed;&#x4e00;&#x4e2a;&#x590d;&#x6742;&#x7684",{"_index":1466,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x7ed9;&#x5b9a;&#x4e00;&#x4e2a;&#x6807;&#x8bc6;&#x7b26",{"_index":2184,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x7ed9;&#x5b9a;&#x4e00;&#x7ec4;&#x591a;&#x79cd;&#x7c7b;&#x578b;&#xff0c;&#x8fd9;&#x7ec4;&#x7c7b;&#x578b;&#x4e2d;&#x7684;&#x6240;&#x6709;&#x7c7b;&#x578b;&#x4f1a;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x4e00;&#x4e2a;&#x901a;&#x7528;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#xff1a",{"_index":1824,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x7edf;&#x4e00;&#x4e3a",{"_index":1780,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x7edf;&#x4e00;&#xff08;&#x7b2c;3.5&#x8282;&#xff09",{"_index":55,"title":{},"body":{"3.类型系统/3.类型系统.html#3-类型系统":{},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7edf;&#x4e00;&#xff0c;&#x4f7f;&#x5f97;&#x4e0d;&#x53ef;&#x80fd;&#x9650;&#x5236;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53ea;&#x63a5;&#x53d7;&#x771f;&#x6b63;&#x7684;&#x5bf9;&#x8c61;&#x3002",{"_index":1453,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x7f16;&#x8bd1;&#x5668;&#x4e0d;&#x5141;&#x8bb8;&#x5728;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e0a;&#x5206;&#x914d",{"_index":575,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x7f16;&#x8bd1;&#x5668;&#x4e0d;&#x5b9e;&#x65bd;&#x4efb;&#x4f55;&#x6ea2;&#x51fa;&#x884c;&#x4e3a;&#x3002;&#x6ea2;&#x51fa;&#x68c0;&#x67e5;&#x7684;&#x4efb;&#x52a1;&#x843d;&#x5230;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x3002;&#x8fd9;&#x91cc;&#x662f;&#x4e00;&#x4e9b;&#x6ea2;&#x51fa;&#x884c;&#x4e3a;&#x7684;&#x5e73;&#x53f0;&#x7279;&#x5b9a;&#x63d0;&#x793a;&#xff1a",{"_index":123,"title":{},"body":{"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{}}}],["x7f16;&#x8bd1;&#x5668;&#x4ecd;&#x7136;&#x4fdd;&#x8bc1;&#x5b57;&#x6bb5;&#x5b9e;&#x9645;&#x4e0a;&#x5b58;&#x5728;&#x4e8e;&#x6f5c;&#x5728;&#x7c7b;&#x578b;&#x3002",{"_index":1256,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x7f16;&#x8bd1;&#x5668;&#x4ece;&#x4e0d;&#x63a8;&#x65ad;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x4e3a",{"_index":947,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7f16;&#x8bd1;&#x5668;&#x4f7f;&#x7528;&#x5b83;&#x4eec;&#x7684;&#x503c;&#x66ff;&#x6362;&#x6240;&#x6709;&#x7684;&#x5b57;&#x6bb5;&#x8bbf;&#x95ee;&#x5230",{"_index":1278,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x7f16;&#x8bd1;&#x5668;&#x5229;&#x7528;&#x4e30;&#x5bcc;&#x7684;&#x7c7b;&#x578b;&#x7cfb;&#x7edf;&#xff0c;&#x53ef;&#x4ee5;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#x68c0;&#x6d4b;&#x7a0b;&#x5e8f;&#x4e2d;&#x7c7b;&#x578b;&#x76f8;&#x5173;&#x7684;&#x9519;&#x8bef;&#x3002;&#x7c7b;&#x578b;&#x9519;&#x8bef;&#x662f;&#x5bf9;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7c7b;&#x578b;&#x6267;&#x884c;&#x4e86;&#x4e00;&#x4e2a;&#x65e0;&#x6548;&#x64cd;&#x4f5c;&#x5982;&#xff0c;&#x9664;&#x4ee5;&#x4e00;&#x4e2a;&#x5b57;&#x7b26;&#x4e32;&#x3001;&#x5c1d;&#x8bd5;&#x8bbf;&#x95ee;&#x4e00;&#x4e2a;&#x6574;&#x6570;&#x7684;&#x5b57;&#x6bb5;&#xff0c;&#x6216;&#x8005;&#x8c03;&#x7528;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x800c;&#x6ca1;&#x6709;&#x4f20;&#x9012;&#x8db3;&#x591f;&#xff08;&#x6216;&#x592a;&#x591a;&#xff09;&#x7684;&#x53c2;&#x6570;&#x3002;&#x5728;&#x4e00;&#x4e9b;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;&#x8fd9;&#x4e9b;&#x989d;&#x5916;&#x7684;&#x5b89;&#x5168;&#x9700;&#x8981;&#x6d88;&#x8017;&#x5f88;&#x591a;&#x7cbe;&#x529b;&#xff0c;&#x56e0;&#x4e3a;&#x7a0b;&#x5e8f;&#x5458;&#x88ab;&#x8981;&#x6c42;&#x660e;&#x786e;&#x5730;&#x5206;&#x914d;&#x7c7b;&#x578b;&#x5230;&#x8bed;&#x6cd5;&#x7ed3;&#x6784;&#xff1a",{"_index":71,"title":{},"body":{"2.类型/2.类型.html#2-类型":{}}}],["x7f16;&#x8bd1;&#x5668;&#x5c06;&#x4e0d;&#x4f1a;&#x518d;&#x5728;&#x63a5;&#x53d7;&#x6307;&#x5b9a;&#x7c7b;&#x578b;&#x7684;&#x8d4b;&#x503c;&#x3001;&#x51fd;&#x6570;&#x8c03;&#x7528;&#x548c;&#x5176;&#x5b83;&#x6784;&#x9020;&#x4e2d;&#x8fdb;&#x884c;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#x3002",{"_index":931,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["x7f16;&#x8bd1;&#x5668;&#x68c0;&#x67e5;&#x662f;&#x5426;&#x5b9e;&#x73b0;&#x4e86;&#x5047;&#x8bbe;&#x3002;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x5b83;&#x786e;&#x4fdd;&#x7c7b;&#x5b9e;&#x9645;&#x4e0a;&#x5b9e;&#x73b0;&#x4e86;&#x63a5;&#x53e3;&#x5fc5;&#x987b;&#x7684;&#x6240;&#x6709;&#x5b57;&#x6bb5;&#x3002;&#x4e00;&#x4e2a;&#x5b57;&#x6bb5;&#xff0c;&#x5982;&#x679c;&#x7c7b;&#x6216;&#x8005;&#x4efb;&#x4f55;&#x5b83;&#x7684;&#x7236;&#x7c7b;&#x63d0;&#x4f9b;&#x4e86;&#x4e00;&#x4e2a;&#x5b9e;&#x73b0;&#xff0c;&#x90a3;&#x4e48;&#x5b83;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x5b9e;&#x73b0;&#x4e86;&#x3002;&#x63a5;&#x53e3;&#x5b57;&#x6bb5;&#x4e0d;&#x9650;&#x4e8e;&#x65b9;&#x6cd5;&#x3002;&#x4e5f;&#x53ef;&#x4ee5;&#x662f;&#x53d8;&#x91cf;&#x6216;&#x8005;&#x5c5e;&#x6027;&#xff1a",{"_index":395,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x7f16;&#x8bd1;&#x5668;&#x901a;&#x8fc7;&#x63a8;&#x65ad;&#x5b83;&#x4eec;&#x7684;&#x7c7b;&#x578b;&#x4e3a",{"_index":853,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x800c",{"_index":531,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x800c;&#x4e0d;&#x5e26;&#x4efb;&#x4f55;&#x53c2;&#x6570;&#xff0c;&#x6765;&#x8f6c;&#x53d1;&#x6240;&#x6709;&#x5b57;&#x6bb5;&#x3002;&#x5f53;&#x7136",{"_index":1255,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x800c;&#x4e14;&#x53f3;&#x4fa7;&#x503c;&#x662f",{"_index":1133,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x800c;&#x8868;&#x8fbe;&#x5f0f",{"_index":1957,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x81f3;&#x5c11;&#x6d89;&#x53ca;&#x4e00;&#x4e2a;&#x52a8;&#x6001;&#x7c7b;&#x578b;&#x503c;&#x7684;&#x6bd4;&#x8f83;&#x672a;&#x88ab;&#x6307;&#x5b9a;&#xff0c;&#x89c6;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x800c;&#x5b9a;&#x3002",{"_index":214,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x82b1;&#x7d6e",{"_index":35,"title":{},"body":{"index.html#关于本文档":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x82b1;&#x7d6e;&#x5185;&#x5bb9",{"_index":37,"title":{},"body":{"index.html#关于本文档":{}}}],["x83b7;&#x53d6;&#x952e",{"_index":782,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x867d;&#x7136",{"_index":927,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{}}}],["x867d;&#x7136;&#x4ece",{"_index":1099,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x867d;&#x7136;&#x5141;&#x8bb8;&#x4efb;&#x610f;&#x7684;&#x5b57;&#x7b26;&#x4e32;&#x5b57;&#x9762;&#x503c;&#xff0c;&#x4f46;&#x5982;&#x5fc5;&#x987b;&#x662f;&#x6709;&#x6548;&#x7684",{"_index":625,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x867d;&#x7136;&#x53d8;&#x5f02;&#x4e5f;&#x5728;&#x5176;&#x5b83;&#x5730;&#x65b9;&#x610f;&#x4e49;&#x91cd;&#x5927;&#xff0c;&#x4f46;&#x662f;&#x5b83;&#x7279;&#x522b;&#x7ecf;&#x5e38;&#x548c;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x4e00;&#x8d77;&#x51fa;&#x73b0;&#xff0c;&#x5e76;&#x50cf;&#x4e00;&#x4e2a;&#x60ca;&#x559c;&#x3002;&#x6b64;&#x5916;&#xff0c;&#x975e;&#x5e38;&#x5bb9;&#x6613;&#x89e6;&#x53d1;&#x53d8;&#x5f02;&#x9519;&#x8bef;&#xff1a",{"_index":1732,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x867d;&#x7136;&#x6bcf;&#x4e2a",{"_index":105,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x8865;&#x5145;&#x53e6;&#x4e00;&#x4f8b;&#x5b50;&#xff1a",{"_index":736,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x8865;&#x5145;&#xff1a",{"_index":1870,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x8868;&#x793a;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#xff0c;&#x7b2c;&#x4e00;&#x4e2a;&#x53c2;&#x6570;&#x4e3a",{"_index":884,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x8868;&#x793a;&#x4e00;&#x4e2a;&#x53cc;&#x7cbe;&#x5ea6",{"_index":102,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{}}}],["x8868;&#x793a;&#x4e00;&#x4e2a;&#x6574;&#x6570",{"_index":104,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x8868;&#x793a;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x7684;&#x7f3a;&#x5931;&#x3002;&#x5b83;&#x7528;&#x6765;&#x8868;&#x8fbe;&#x4e00;&#x4e9b;&#x4e1c;&#x897f;&#xff08;&#x901a;&#x5e38;&#x662f;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#xff09;&#x6ca1;&#x6709;&#x503c;&#x3002",{"_index":151,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["x8868;&#x793a;&#x5141;&#x8bb8;&#x7684;&#x53d8;&#x578b;&#xff0c;&#x5e76;&#x4f7f;&#x7f16;&#x8bd1;&#x5668;&#x68c0;&#x67e5;&#x662f;&#x5426;&#x6240;&#x6709;&#x53ef;&#x80fd;&#x7684;&#x503c;&#x90fd;&#x88ab;&#x9075;&#x5b88;&#x7684;&#x3002;&#x53ef;&#x4ee5;&#x5728;&#x8fd9;&#x91cc;&#x770b;&#x5230;&#xff1a",{"_index":444,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x8868;&#x793a;&#x6211;&#x4eec;&#x58f0;&#x660e;&#x4e00;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b",{"_index":1418,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x8868;&#x793a;&#x6211;&#x4eec;&#x5b9a;&#x4e49;&#x4e00;&#x4e2a;&#x7c7b",{"_index":503,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x8868;&#x793a;&#x6211;&#x4eec;&#x8981;&#x58f0;&#x660e;&#x4e00;&#x4e2a;&#x679a;&#x4e3",{"_index":527,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x8868;&#x793a;&#x8fd9;&#x4e2a;&#x7c7b;&#x7ee7;&#x627f;&#x81ea",{"_index":307,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x8868;&#x8fbe;&#x5f0f",{"_index":774,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x4e3b;&#x4f53;&#x4e2d;&#xff0c;&#x5c31;&#x50cf;&#x4f7f;&#x7528;&#x4e86;&#x4e00;&#x4e2a",{"_index":455,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7cbe;&#x786e;&#x610f;&#x601d;&#x3002;&#x73b0;&#x5728;&#xff0c;&#x53ea;&#x8981;&#x628a;&#x5b83;&#x5f53;&#x4f5c;&#x8c03;&#x7528;&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570;&#x5e76;&#x8fd4;&#x56de;&#x9002;&#x5f53;&#x7684;&#x5bf9;&#x8c61;&#x3002",{"_index":361,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x8868;&#x8fbe;&#x5f0f;&#x90fd;&#x4f1a;&#x4ee5;&#x8be5;&#x7c7b;&#x578b;&#x8fdb;&#x884c;&#x63a8;&#x65ad;&#x3002",{"_index":1945,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x8868;&#x8fbe;&#x5f0f;&#xff08;&#x7b2c;5.10&#x8282;&#xff09",{"_index":456,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x8868;&#x8fbe;&#x5f0f;&#xff0c",{"_index":1940,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x88ab;&#x4f7f;&#x7528;&#xff0c;&#x53ef;&#x4ee5;&#x5728;&#x8c03;&#x7528;&#x65f6;&#x7701;&#x7565;&#x67d0;&#x4e2a;&#x53c2;&#x6570;&#x3002;hax",{"_index":809,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x88ab;&#x505a;&#x51fa;&#xff0c;&#x800c;&#x4e14;&#x88ab;&#x8ba8;&#x8bba;&#x7684;&#x5b57;&#x6bb5;&#x4e0d;&#x5b58;&#x5728;&#xff0c",{"_index":911,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x88ab;&#x5206;&#x914d;&#x7ed9",{"_index":1929,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x88ab;&#x544a;&#x77e5;&#x9700;&#x8981;&#x88ab;&#x5bfc;&#x5165;&#x5230;&#x5f53;&#x524d;&#x7684;&#x6587;&#x4ef6",{"_index":2273,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x88ab;&#x5b9a;&#x4e49;&#x4e3a;&#x63a5;&#x53d7;&#x4e00;&#x4e2a",{"_index":1220,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x88ab;&#x5bfc;&#x5165;&#xff08;&#x76f4;&#x63a5;&#x6216;&#x8005;&#x4f5c;&#x4e3a;&#x6a21;&#x5757;&#x7684;&#x90e8;&#x5206;&#x5bfc;&#x5165;&#xff09;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":2209,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x88ab;&#x5f97;&#x77e5;&#xff0c;&#x8fd9;&#x4f7f;&#x5f97;&#x6211;&#x4eec;&#x4e0d;&#x9700;&#x8981;&#x4e3a;&#x5c40;&#x90e8;&#x53d8;&#x91cf;&#x4f7f;&#x7528;&#x663e;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x58f0;&#x660e;&#x3002;&#x4f46;&#x662f;&#xff0c;&#x5982;&#x679c",{"_index":794,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x88ab;&#x6267;&#x884c;&#x7684;&#x60c5;&#x51b5;&#x3002",{"_index":582,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x88ab;&#x663e;&#x5f0f;&#x5bfc;&#x5165;&#xff0c;&#x89e3;&#x6790;&#x5230;&#x5b83;&#x5e76;&#x505c;&#x6b62",{"_index":2198,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x88ab;&#x7528;&#x4e8e;&#x8868;&#x793a;&#x521b;&#x5efa;&#x4e00;&#x4e2a",{"_index":722,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["x88ab;&#x7ea6;&#x675f;&#x4e3a",{"_index":1510,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{}}}],["x88ab;&#x89e3;&#x6790;&#x5230",{"_index":1202,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x88ab;&#x8bbf;&#x95e",{"_index":2298,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x88ab;&#x8d4b;&#x503c;&#x4e3a",{"_index":807,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x88ab;&#x8fd4;&#x56de;&#x3002;&#x7ed3;&#x679c;&#x53ef;&#x80fd;&#x548c",{"_index":1204,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x88ab;haxe.template&#x5728;&#x8fd9;&#x91cc;&#x4f7f;&#x7528;&#x7684;&#xff0c;&#x6765;&#x786e;&#x5b9a;make&#x7684;&#x8fd4;&#x56de;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x662f;&#x56e0;&#x4e3a;&#x65b9;&#x6cd5;&#x8c03;&#x7528;&#x4e3a",{"_index":2028,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x89c4;&#x5219",{"_index":775,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x89e3;&#x6790;&#x987a;&#x5e8f;&#x4e00;&#x88ab;&#x5f15;&#x5165;&#x5c31;&#x6d89;&#x53ca;&#x5230;&#x4e0d;&#x53d7;&#x9650;&#x5236;&#x7684;&#x6807;&#x8bc6;&#x7b26",{"_index":2170,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x89e3;&#x6790;&#x987a;&#x5e8f;&#xff08;&#x7b2c;3.7.3&#x8282;&#xff09;&#xff09;&#x3002",{"_index":2280,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x89e6;&#x53d1;&#x7ed1;&#x5b9a",{"_index":1598,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x8bbe;&#x7f6",{"_index":784,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8bbf;&#x95ee;&#x4fee;&#x9970;&#x7b26;&#x88ab;&#x58f0;&#x660e;&#x4e3a;&#x79c1;&#x6709;&#x3002;&#x8fd9;&#x4f1a;&#x5bfc;&#x81f4;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x53ea;&#x80fd;&#x4ece;&#x5b9a;&#x4e49;&#x5b83;&#x7684;&#x8fd9;&#x4e2a;&#x6a21;&#x5757;&#x5185;&#x90e8;&#x76f4;&#x63a5;&#x8fdb;&#x884c;&#x8bbf;&#x95ee;&#x3002;&#x79c1;&#x6709;&#x7c7b;&#x578b;&#x4e0d;&#x50cf;&#x516c;&#x5f00;&#x7c7b;&#x578b;&#xff0c;&#x4e0d;&#x4f1a;&#x6210;&#x4e3a;&#x5b83;&#x4eec;&#x6240;&#x5728;&#x7684;&#x5305;&#x7684;&#x6210;&#x5458;&#x3002",{"_index":2075,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{}}}],["x8bbf;&#x95ee;&#xff0c;&#x5982;&#x4e0b;&#xff1a",{"_index":781,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8bed;&#x4e49;&#x88ab;&#x9650;&#x5236;&#x4e3a;&#x6240;&#x6709;&#x7684;&#x5b57;&#x6bb5;&#x517c;&#x5bb9;&#x8be5;&#x53c2;&#x6570;&#x7c7b;&#x578b;&#xff1a",{"_index":829,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x8bed;&#x53e5;&#x4e2d;&#xff0c;hax",{"_index":876,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x8bed;&#x53e5;&#x7684;&#x8f93;&#x51fa;&#x6709;&#x975e;&#x5e38;&#x5f3a;&#x7684;&#x76f8;&#x4f3c;&#xff0c;&#x4f46;&#x4e5f;&#x6709;&#x5fae;&#x5999;&#x7684;&#x533a;&#x522b;&#xff1a",{"_index":865,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["x8bed;&#x53e5;&#x7684;&#x9ad8;&#x7ea7;&#x4fe1;&#x606f;&#x5c06;&#x5728",{"_index":458,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x8bed;&#x53e5;&#xff08;&#x7b2c;5.17&#x8282;&#xff09",{"_index":448,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["x8bed;&#x6cd5;&#x548c;&#x7c7b;&#x7684;&#x76f8;&#x4f3c;&#xff0c;&#x4f46;&#x6709;&#x4ee5;&#x4e0b;&#x4f8b;&#x5916;&#xff1a",{"_index":378,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x8bfb;&#x8bbf;&#x95ee;&#xff08;&#x7b2c;4.2&#x8282;&#xff09",{"_index":910,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x8c03;&#x7528;&#x4e2d",{"_index":1603,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x8d4b;&#x503c",{"_index":1923,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x8d77;&#xff0c;&#x5c31;&#x4e0d;&#x80fd;&#x5728;&#x8bed;&#x6cd5;&#x4e2d;&#x8868;&#x8fbe;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#xff0c;&#x800c;&#x4e14;&#x4e5f;&#x6ca1;&#x6709;&#x5fc5;&#x8981;&#x8fd9;&#x4e48;&#x505a;&#x3002",{"_index":493,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["x8def;&#x5f84;&#x53ef;&#x4ee5;&#x88ab;&#x8fdb;&#x4e00;&#x6b65;&#x7b80;&#x5316;&#x901a;&#x8fc7",{"_index":2347,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["x8f6c;&#x6362;&#xff0c;&#x53bb;&#x5230;6",{"_index":1092,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x8f93;&#x51fa",{"_index":596,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x8f93;&#x51fa;&#x5185;&#x5bb9;&#x663e;&#x793a;&#xff0c;&#x51fd;&#x6570;&#x8c03;&#x7528;&#x4e2d;&#x88ab;&#x7701;&#x7565;&#x7684;&#x53ef;&#x9009;&#x53c2;&#x6570;&#x7684;&#x503c;&#x4e3a",{"_index":846,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x8f93;&#x51fa;&#x6765;&#x770b;&#x4e00;&#x4e0b;&#x4ee3;&#x7801;&#x5982;&#x4f55;&#x751f;&#x6210;&#xff1a",{"_index":1253,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x8f93;&#x51fa;&#x7684;&#x65f6;&#x5019;&#x4f1a;&#x5f88;&#x660e;&#x663e;&#xff1a",{"_index":1082,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x8fd0;&#x7b97;&#x7b26",{"_index":179,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x8fd0;&#x7b97;&#x7b26;&#x7684;&#x8fd0;&#x7b97;&#x7b26;&#x3002;&#x7528;&#x6cd5;&#x5728;&#x7b2c;17&#x884c;&#x663e;&#x793a;&#xff0c;&#x7f16;&#x8bd1;&#x5230",{"_index":1136,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x8fd0;&#x7b97;&#x7b26;&#x91cd;&#x8f7d;&#x5b57;&#x6bb5;&#xff08;&#x7b2c;2.8.2&#x8282;&#xff09",{"_index":1307,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{}}}],["x8fd4;&#x56de",{"_index":1876,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x8fd4;&#x56de;&#x503c",{"_index":183,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{}}}],["x8fd8;&#x53ef;&#x4ee5;&#x4e3a;&#x533f;&#x540d;&#x7ed3;&#x6784;&#x4f7f;&#x7528",{"_index":622,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["x8fd8;&#x53ef;&#x4ee5;&#x7701;&#x7565",{"_index":1153,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x8fd8;&#x6709;&#x4e00;&#x4e2a;&#x666e;&#x901a;&#x7684;&#x51fd;&#x6570",{"_index":512,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x8fd9;&#x4e2a;&#x4f8b;&#x5b50;&#x4e2d;&#x7684",{"_index":1244,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["x8fd9;&#x4e2a;&#x5173;&#x7cfb;&#x901a;&#x5e38;&#x88ab;&#x79f0;&#x4e3a",{"_index":295,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x8fd9;&#x4e2a;&#x6587;&#x6863;&#x592a;&#x65e7;&#x4e86",{"_index":831,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["x8fd9;&#x4e2a;&#x793a;&#x4f8b;&#x548c;&#x524d;&#x9762",{"_index":804,"title":{},"body":{"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{}}}],["x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x517c;&#x5bb9;&#x6240;&#x6709;&#x7684;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x3002;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#xff0c",{"_index":536,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{}}}],["x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x517c;&#x5bb9;&#x6240;&#x6709;&#x7c7b;&#x578b;&#xff0c;&#x4e5f;&#x5c31;&#x662f;&#x8bf4;&#xff0c;&#x6240;&#x6709;&#x7c7b;&#xff08;&#x800c;&#x4e0d;&#x662f;&#x5b83;&#x4eec;&#x7684;&#x5b9e;&#x4f8b;&#xff09;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x7ed9;&#x5b83;&#x3002;&#x5728;&#x7f16;&#x8bd1;&#x65f6;&#xff0c",{"_index":515,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x8fd9;&#x4e2a;&#x8bed;&#x6cd5;&#x8ba9;&#x4eba;&#x8054;&#x60f3;&#x5230;&#x7c7b;&#xff0c;&#x8bed;&#x4e49;&#x4e0a;&#x5b83;&#x4eec;&#x4e8b;&#x5b9e;&#x7684;&#x786e;&#x975e;&#x5e38;&#x76f8;&#x4f3c;&#x3002;&#x5b9e;&#x9645;&#x4e0a;&#xff0c;&#x6bcf;&#x4e2a;&#x5728;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x201c;&#x4f53;&#x201d;&#x4e2d;&#x7684;&#xff08;&#x5373;&#x6240;&#x6709;&#x82b1;&#x62ec;&#x53f7;&#x4e4b;&#x540e;&#x7684;&#x4e00;&#x5207;&#xff09;&#x90fd;&#x88ab;&#x89e3;&#x6790;&#x4e3a;&#x7c7b;&#x5b57;&#x6bb5;&#x3002;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x53ef;&#x4ee5;&#x6709",{"_index":1430,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x8fd9;&#x4e2a;&#x9650;&#x5236;&#x5ef6;&#x4f38;&#x5230;&#x6240;&#x6709",{"_index":581,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x8fd9;&#x4e5f;&#x662f;&#x4e00;&#x4e2a;&#x533f;&#x540d;&#x7ed3;&#x6784",{"_index":779,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8fd9;&#x4f1a;&#x5f15;&#x8d77;&#x4e00;&#x4e2a",{"_index":1161,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x8fd9;&#x4f1a;&#x751f;&#x6210;&#x4e00;&#x4e2a",{"_index":351,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["x8fd9;&#x4f7f;&#x6211;&#x4eec;&#x80fd;&#x4f7f;&#x7528",{"_index":1472,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["x8fd9;&#x53ef;&#x4ee5;&#x88ab;&#x8fdb;&#x4e00;&#x6b65;&#x4f18;&#x5316;&#xff0c;&#x901a;&#x8fc7",{"_index":1083,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["x8fd9;&#x548c;&#x8bbf;&#x95ee",{"_index":1281,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x533f;&#x540d;&#x7ed3;&#x6784",{"_index":778,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8fd9;&#x662f;&#x4e00;&#x4e2a;&#x6570;&#x7ec4",{"_index":777,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x8fd9;&#x7ec4;&#x89c4;&#x5219;&#x662f;&#x53ef;&#x4f20;&#x9012;&#x7684;&#xff0c;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x4e00;&#x4e2a;&#x5b50;&#x7c7b;&#x4e5f;&#x53ef;&#x4ee5;&#x88ab;&#x5206;&#x914d;&#x5230;&#x5176;&#x57fa;&#x7c7b;&#x7684;&#x57fa;&#x7c7b;&#x3001;&#x5176;&#x57fa;&#x7c7b;&#x6240;&#x5b9e;&#x73b0;&#x7684;&#x63a5;&#x53e3;&#x3001;&#x5b9e;&#x73b0;&#x7684;&#x63a5;&#x53e3;&#x7684;&#x57fa;&#x7840;&#x63a5;&#x53e3;&#x7b49;&#xff0c;&#x4ee5;&#x6b64;&#x7c7b;&#x63a8;&#x3002",{"_index":1810,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{}}}],["x8fd9;&#x91cc;&#x6211;&#x4eec;&#x4f7f;&#x7528",{"_index":1739,"title":{},"body":{"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{}}}],["x8fd9;&#x91cc;&#x6211;&#x4eec;&#x5bfc;&#x5165;string.fromcharcode&#x4e3a",{"_index":2303,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x8fd9;&#x91cc;&#x6709;&#x4e2a;&#x7279;&#x6b8a;&#x7684",{"_index":2106,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x8fd9;&#x91cc;&#xff0c",{"_index":387,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x8fd9;&#x91cc;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x77e5;&#x9053;&#x5f53;&#x7c7b;&#x578b;&#x5316",{"_index":2020,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x8fdb;&#x884c;&#x4fee;&#x7f2e;&#x4e0e;&#x8865;&#x5145",{"_index":16,"title":{},"body":{"index.html#关于本文档":{}}}],["x8fdb;&#x884c;&#x4fee;&#x9970;&#x3002",{"_index":673,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{}}}],["x9009;&#x62e9;&#x51fd;&#x6570;&#x662f;&#x88ab;&#x53d1;&#x73b0;&#x7684;&#xff0c;&#x800c;&#x4e0d;&#x662f;&#x771f;&#x7684;&#x8bbe;&#x8ba1;&#x4e86;&#x5b83;&#x7684;&#x7528;&#x6cd5;&#x3002;&#x5728;&#x7b2c;&#x4e00;&#x6b21;&#x63d0;&#x5230;&#x8fd9;&#x4e2a;&#x60f3;&#x6cd5;&#x540e;&#xff0c;&#x53ea;&#x9700;&#x8981;&#x7f16;&#x8bd1;&#x5668;&#x4e2d;&#x7684;&#x4e00;&#x70b9;&#x8c03;&#x6574;&#x5c31;&#x53ef;&#x4ee5;&#x4f7f;&#x5b83;&#x4eec;&#x5de5;&#x4f5c;&#x3002;&#x5b83;&#x4eec;&#x7684;&#x8fd9;&#x4e9b;&#x53d1;&#x73b0;&#x8fd8;&#x5f15;&#x5165;&#x4e86;&#x591a;&#x7c7b;&#x578b;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#xff0c;&#x6bd4;&#x5982",{"_index":1227,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x9009;&#x62e9;&#x51fd;&#x6570;&#xff08;&#x7b2c;2.8.4&#x8282;&#xff09",{"_index":1076,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x9012;&#x51cf",{"_index":186,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x9012;&#x589e",{"_index":184,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x901a;&#x5e38;&#xff0c;haxe&#x7f16;&#x8bd1;&#x5668;&#x53ea;&#x751f;&#x6210;&#x4e00;&#x4e2a;&#x5355;&#x72ec;&#x7684;&#x7c7b;&#x6216;&#x8005;&#x51fd;&#x6570;&#xff0c;&#x5373;&#x4f7f;&#x5b83;&#x6709;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x3002;&#x751f;&#x6210;&#x7684;&#x4ee3;&#x7801;&#x4e4b;&#x540e;&#x53ef;&#x80fd;&#x5fc5;&#x987b;&#x6267;&#x884c;&#x4e00;&#x4e9b;&#x7c7b;&#x578b;&#x68c0;&#x67e5;&#x53ef;&#x80fd;&#x4f1a;&#x5f71;&#x54cd;&#x4e00;&#x4e9b;&#x6027;&#x80fd;&#x3002;&#x8fd9;&#x53d1;&#x751f;&#x5728;&#x4e00;&#x4e2a;&#x81ea;&#x7136;&#x62bd;&#x8c61;&#x6982;&#x5ff5;&#x4e2d;&#xff0c;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x7684;&#x4ee3;&#x7801;&#x751f;&#x6210;&#x5668;&#x5fc5;&#x987b;&#x5047;&#x8bbe;&#x4e00;&#x4e2a;&#x7c7b;&#x578b;&#x53c2;&#x6570;&#x53ef;&#x4ee5;&#x662f;&#x4efb;&#x4f55;&#x7c7b;&#x578b;&#x3002",{"_index":1661,"title":{},"body":{"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["x901a;&#x7528;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#xff08;&#x7b2c;3.5.5&#x8282;&#xff09;&#x4e86;&#x89e3;&#x66f4;&#x591a;&#x7ec6;&#x8282;&#x3002",{"_index":1947,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x901a;&#x8fc7;&#x5b83;&#x7684",{"_index":1187,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x901a;&#x8fc7;&#x6269;&#x5c55;&#x3001",{"_index":740,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x901a;&#x8fc7;&#x6dfb;&#x52a0",{"_index":1071,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{}}}],["x901a;&#x8fc7;&#x9ed8;&#x8ba4;&#x7684",{"_index":1131,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x901a;&#x914d;&#x7b26;&#x5bfc;&#x5165",{"_index":2289,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x9075;&#x5faa;&#x4e00;&#x81f4;&#x6027;&#x68c0;&#x67e5;&#x7684;&#x89c4;&#x5219;&#xff0c;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#x53ef;&#x4ee5;&#x5728;&#x590d;&#x5408;&#x7c7b;&#x578b;&#x4e2d;&#x89e6;&#x53d1;&#xff1a",{"_index":2126,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{}}}],["x90fd;&#x53ef;&#x4ee5;&#x7528;&#x4e8e;&#x4e00;&#x4e2a;&#x63a5;&#x53d7",{"_index":106,"title":{},"body":{"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{}}}],["x90fd;&#x7edf;&#x4e00;&#x4e3a",{"_index":1955,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x90fd;&#x89e3;&#x6790;&#x4e3a;&#x4e8c;&#x5143;&#x64cd;&#x4f5c;&#x7b26;&#xff0c;&#x7ed3;&#x679c;&#x4f1a;&#x89e3;&#x6790;&#x4e3a",{"_index":1619,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["x91cd;&#x5199;&#x65b9;&#x6cd5;&#xff08;&#x7b2c;4.3.1&#x8282;&#xff09",{"_index":316,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["x91cd;&#x8981;&#x7684;&#x662f;&#x533a;&#x5206;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#x548c;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff0c;&#x5982;&#x8fd9;&#x4e2a;&#x793a;&#x4f8b;&#x5c55;&#x793a;&#x7684;&#xff1a",{"_index":481,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x91cd;&#x8f7d;&#x4e00;&#x5143;&#x8fd0;&#x7b97;&#x7b26;&#x662f;&#x76f8;&#x4f3c;&#x7684;&#xff1a",{"_index":1150,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["x9519;&#x8bef;&#x4fe1;&#x606f;&#x8868;&#x660e;&#x7f16;&#x8bd1;&#x5668;&#x4e86;&#x89e3",{"_index":789,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x9519;&#x8bef;&#xff0c;int&#x5e94;&#x8be5;&#x662f",{"_index":905,"title":{},"body":{"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{}}}],["x952e",{"_index":785,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["x95ed;&#x5408;&#x7684;&#x82b1;&#x62ec;&#x53f7;&#x4e2d;&#x95f4;&#x662f;&#x679a;&#x4e3e;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":529,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x9664;&#x6cd5",{"_index":190,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{}}}],["x968f;&#x540e;&#x7684",{"_index":1944,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["x968f;&#x7740;haxe.ds.stringmap&#x88ab;&#x5bfc;&#x5165;&#x4e4b;&#x540e;&#xff0c;&#x7f16;&#x8bd1;&#x5668;&#x5c31;&#x53ef;&#x4ee5;&#x901a;&#x8fc7;&#x8fd9;&#x4e2a;&#x5305;&#x89e3;&#x6790",{"_index":2270,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x9690;&#x5f0f;&#x7684;&#x8f6c;&#x6362;&#xff08;&#x7b2c;2.8.1&#x8282;&#xff09",{"_index":1207,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["x9694;&#x5f00;&#x3002;&#x6211;&#x4eec;&#x51b3;&#x5b9a;&#x9075;&#x5faa",{"_index":402,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x9700;&#x8981;&#x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x5b9e;&#x4f8b;&#x800c;&#x4e0d;&#x662f;&#x67d0;&#x4e2a;&#x7279;&#x5b9a;&#x7684;&#x7c7b;&#x578b;&#x7684",{"_index":479,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["x9700;&#x8981;&#x4e09;&#x4e2a",{"_index":532,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["x9700;&#x8981;&#x591a;&#x4e2a",{"_index":400,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["x9700;&#x8981;&#x7684;&#x4e00;&#x4e2a;&#x503c;&#x662f;&#x4e00;&#x4e2a;&#x7c7b;&#x800c;&#x975e;&#x67d0;&#x4e2a;&#x7279;&#x5b9a;&#x7684;&#x7c7b;&#x578b;&#x65f6;&#xff0c;&#x53ef;&#x4ee5;&#x4f7f;&#x7528;&#x8fd9;&#x4e2a;&#x7c7b;&#x578b;&#x3002;&#x8fd9;&#x5e94;&#x7528;&#x5230",{"_index":517,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09",{"_index":1216,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["x9759;&#x6001;&#x6269;&#x5c55;&#xff08;&#x7b2c;6.3&#x8282;&#xff09;&#x5173;&#x952e;&#x5b57",{"_index":2281,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["x9759;&#x6001;&#x76ee;&#x6807;&#x5728",{"_index":558,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x9759;&#x6001;&#x76ee;&#x6807;&#x5e73;&#x53f0;&#x62a5;&#x9519",{"_index":577,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#xff0c;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x7684;&#x9ed8;&#x8ba4;&#x503c;&#x5982;&#x4e0b;&#xff1a",{"_index":570,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["x9759;&#x6001;&#x7c7b;&#x578b;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#xff08;&#x7b2c;2.2&#x8282;&#xff09",{"_index":745,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{}}}],["x9759;&#x6001;&#x8bed;&#x8a00;&#x76ee;&#x6807;&#xff08;&#x7b2c;2.2&#x8282;&#xff09",{"_index":852,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["x975e",{"_index":1869,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["x975e;&#x7269;&#x7406;&#xff08;&#x7b2c;4.2.3&#x8282;&#xff09",{"_index":1432,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#x5728;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x5728;&#x5b83;&#x88ab;&#x7c7b;&#x578b;&#x5316;&#x4e4b;&#x524d;&#x5df2;&#x77e5;&#x7684;&#x65f6;&#x5019;&#x51fa;&#x73b0;&#xff0c;&#x4f8b;&#x5982;&#xff0c;&#x56e0;&#x4e3a;&#x8868;&#x8fbe;&#x5f0f;&#x88ab;&#x770b;&#x4f5c;&#x4e00;&#x4e2a;&#x51fd;&#x6570;&#x8c03;&#x7528;&#x3002;&#x5b83;&#x4eec;&#x53ef;&#x4ee5;&#x5f71;&#x54cd;&#x8fd9;&#x4e2a;&#x8868;&#x8fbe;&#x5f0f;&#x7684;&#x7c7b;&#x578b;&#x5316;&#xff0c;&#x901a;&#x8fc7;&#x6240;&#x8c13;&#x7684;&#x81ea;&#x4e0a;&#x800c;&#x4e0b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6.1&#x8282;&#xff09;&#x3002",{"_index":2016,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x9884;&#x671f;&#x7684;&#x7c7b;&#x578b;&#xff08;&#x7b2c;3.6.1&#x8282;&#xff09",{"_index":2182,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["x9884;&#x671f;&#x7c7b;&#x578b",{"_index":2014,"title":{},"body":{"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{}}}],["x:void",{"_index":143,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html":{},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["xfb01;eld",{"_index":1585,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["xfb01;le",{"_index":2063,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{}}}],["xfb01;le,it",{"_index":2269,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["xfb01;nd",{"_index":1948,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{}}}],["xfb01;rst",{"_index":1937,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["xff08;&#x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x6784;&#x9020;&#x51fd;&#x6570;&#xff09;&#x4e0d;&#x80fd;&#x88ab;&#x8d4b;&#x503c;&#x5230;&#x4e00;&#x4e2a",{"_index":485,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["xff08;&#x4e00;&#x4e2a;&#x679a;&#x4e3e;&#x7c7b;&#x578b;&#xff09;&#x7c7b;&#x578b;&#x7684;&#x53d8;&#x91cf;&#x3002;&#x8fd9;&#x4e2a;&#x5173;&#x7cfb;&#x5c31;&#x50cf;&#x7c7b;&#x548c;&#x7c7b;&#x7684;&#x5b9e;&#x4f8b;&#x3002",{"_index":486,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["xff08;&#x53ef;&#x8fed;&#x4ee3;&#x7684;&#xff09;&#x662f;&#x542b;&#x5426;&#x6709;&#x5143;&#x7d20;&#x3002;&#x4e3a;&#x4e86;&#x8fbe;&#x5230;&#x8fd9;&#x4e2a;&#x76ee;&#x7684;&#xff0c;&#x6211;&#x4eec;&#x9664;&#x4e86;&#x77e5;&#x9053;&#x53c2;&#x6570;&#x662f;&#x4e00;&#x4e2a",{"_index":1786,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{}}}],["xff08;&#x548c;&#xff09",{"_index":232,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff08;&#x5728",{"_index":1441,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff08;&#x5bf9;&#x6bd4;&#x5728",{"_index":356,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["xff08;&#x6216;&#xff09",{"_index":233,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff08;&#x7b2c;10.7&#x8282;&#xff09",{"_index":519,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["xff08;&#x901a;&#x8fc7;&#x4f7f;&#x7528",{"_index":1065,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["xff08;&#x975e;&#xff09",{"_index":234,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff08;ab&#xff09;&#x64cd;&#x4f5c;&#x7b26",{"_index":1156,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["xff09",{"_index":1444,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["xff09;&#x4e4b;&#x95f4;&#x7684;&#x7c7b;&#x6bd4;&#x3002",{"_index":350,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["xff09;&#x4f1a;&#x663e;&#x793a;&#x5982;&#x4e0b",{"_index":1437,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff09;&#x548c;&#x7b2c;&#x4e8c;&#x4e2a;&#x8c03;&#x7528;&#xff08;&#x4e24;&#x4e2a;&#x53c2;&#x6570;&#x90fd;&#x662f",{"_index":1613,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["xff09;&#x7c7b;&#x578b;&#x7684;&#x58f0;&#x660e;&#x3002;&#x8fd9;&#x6b63;&#x662f",{"_index":1467,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["xff09;&#xff0c;&#x4f46;&#x662f;&#x4e0d;&#x80fd;&#x7528;&#x5728;&#x53d8;&#x91cf",{"_index":1223,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["xff09;&#xff0c;&#x4f46;&#x662f;&#x7b2c;&#x4e09;&#x4e2a;&#x8c03;&#x7528;&#x5f15;&#x53d1;&#x4e86;&#x4e00;&#x4e2a;&#x7f16;&#x8bd1;&#x5668;&#x9519;&#x8bef;&#x3002",{"_index":1614,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["xff09;&#xff0c;&#x6216;&#x8005;&#x9690;&#x5f0f;&#x5730;&#x89e6;&#x53d1;&#xff0c;&#x901a;&#x8fc7;&#x7c7b;&#x578b;&#x63a8;&#x65ad;&#xff08;&#x7b2c;3.6&#x8282;&#xff09;&#xff0c;&#x4f8b;&#x5982;&#x5f53;&#x6211;&#x4eec;&#x8c03;&#x7528",{"_index":1590,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["xff09;&#xff0c;&#x7136;&#x540e;&#x8fd9;&#x4e2a;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x5206;&#x914d;&#x56d",{"_index":1067,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["xff0c",{"_index":451,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{}}}],["xff0c;&#x4e00;&#x4e2a;&#x7279;&#x5b9a;&#x7684",{"_index":862,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["xff0c;&#x4e3a;&#x952e;&#x4f7f;&#x7528;&#x4f7f;&#x7528;&#x5b57;&#x7b26;&#x4e32;&#x5b57;&#x9762;&#x503c;&#xff1a",{"_index":624,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["xff0c;&#x4f7f;&#x540e;&#x9762;&#x7684",{"_index":968,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["xff0c;&#x5176;&#x521a;&#x597d;&#x6ee1;&#x8db3;&#x8fd9;&#x4e24;&#x70b9;&#x8981;&#x6c42;&#x3002",{"_index":732,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{}}}],["xff0c;&#x5176;&#x5b83;&#x4e0d;&#x652f;&#x6301",{"_index":555,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff0c;&#x5176;&#x5b83;&#x9759;&#x6001;&#x76ee;&#x6807;&#x8bed;&#x8a00;&#x4e2d;&#x4e3a",{"_index":573,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff0c;&#x56e0;&#x4e3a;&#x8fd9;&#x65f6",{"_index":245,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff0c;&#x56e0;&#x6b64;&#x8c03;&#x7528;&#x8868;&#x8fbe;&#x5f0f",{"_index":1874,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["xff0c;&#x5b57;&#x6bb5;&#x624d;&#x4f1a;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x7c7b;&#x578b;&#x7684;&#x4e00;&#x90e8;&#x5206;&#x3002;&#x5426;&#x5219;&#xff0c;hax",{"_index":627,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{}}}],["xff0c;&#x5b83;&#x4eec;&#x662f;&#x6ca1;&#x6709;&#x4ef7;&#x503c;&#x7684;&#xff0c;&#x4f46;&#x662f;&#x8ddf",{"_index":452,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{}}}],["xff0c;&#x5b83;&#x4fbf;&#x4e0d;&#x80fd;&#x8fd4;&#x56d",{"_index":1861,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["xff0c;&#x5b83;&#x63cf;&#x8ff0;&#x548c;&#x7c7b;&#x4e4b;&#x95f4;&#x4e00;&#x4e2a;&#x9759;&#x6001;&#x7684;&#x5173;&#x7cfb;&#x3002;&#x4e00;&#x4e2a;&#x6307;&#x5b9a;&#x7684;&#x7c7b;&#xff0c;&#x5982;&#x679c;&#x88ab;&#x663e;&#x5f0f;&#x5730;&#x9648;&#x8ff0;&#x5982;&#x4e0b;&#xff0c;&#x5219;&#x53ea;&#x88ab;&#x8ba4;&#x4e3a;&#x662f;&#x517c;&#x5bb9;&#x4e00;&#x4e2a;&#x63a5;&#x53e3;&#xff1a",{"_index":386,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["xff0c;&#x5b83;&#x662f;&#x7c7b;&#x7684;&#x6784;&#x9020;&#x51fd;&#x6570",{"_index":511,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["xff0c;&#x5b83;&#x7684;&#x5185;&#x8054;&#x8868;&#x8fbe;&#x5f0f;&#x5206;&#x914d;&#x4e00;&#x4e2a;&#x503c;&#x5230;&#x8fd9;&#x91cc;&#x3002;&#x5f53;&#x4ee5;&#x7c7b;&#x8fdb;&#x884c;&#x601d;&#x8003;&#x7684;&#x8bdd;&#xff0c;&#x8fd9;&#x53ef;&#x80fd;&#x662f;&#x4ee4;&#x4eba;&#x60ca;&#x8bb6;&#x7684;&#x3002;&#x7136;&#x800c;&#xff0c;&#x8fd9;&#x6070;&#x5de7;&#x662f;&#x6211;&#x4eec;&#x5e0c;&#x671b;&#x5728;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x4e0a;&#x4e0b;&#x6587;&#x4e2d;&#x8868;&#x8fbe;&#x7684;&#x3002;&#x62bd;&#x8c61;&#x7c7b;&#x578b;&#x7684;&#x4efb;&#x4f55;&#x5185;&#x8054;&#x6210;&#x5458;&#x65b9;&#x6cd5;&#x90fd;&#x53ef;&#x4ee5;&#x5206;&#x914d;&#x5230;&#x8fd9;&#x91cc;&#xff0c;&#x4ece;&#x800c;&#x4fee;&#x6539",{"_index":1445,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff0c;&#x5c31;&#x50cf",{"_index":1478,"title":{},"body":{"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{}}}],["xff0c;&#x5c5e;&#x6027",{"_index":941,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["xff0c;&#x5e76;&#x4e14;&#x53ea;&#x6709;&#x5728",{"_index":239,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff0c;&#x5e76;&#x5206;&#x522b;&#x521d;&#x59cb;&#x5316;&#x5b83;&#x4eec;&#x7684;&#x503c;&#x4e3a",{"_index":763,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["xff0c;&#x5e76;&#x548c;&#x7f16;&#x8bd1;&#x5668;&#x7684;&#x5185;&#x90e8;&#x8fd0;&#x7b97;&#x7b26;&#x5904;&#x7406;&#x7ed1;&#x5728;&#x4e00;&#x8d77",{"_index":271,"title":{},"body":{"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{}}}],["xff0c;&#x5e76;&#x5c06;&#x5176;&#x653e;&#x5728;&#x7b2c;&#x4e8c;&#x4e2a",{"_index":875,"title":{},"body":{"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{}}}],["xff0c;&#x5e76;&#x6253;&#x5370;&#x51fa;&#x5b83;&#x7684;&#x8fd4;&#x56de;&#x503c;&#xff1a",{"_index":840,"title":{},"body":{"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{}}}],["xff0c;&#x5e76;&#x88ab;&#x5206;&#x914d;&#x5230;&#x4e00;&#x4e2a;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#xff0c;&#x9ed8;&#x8ba4;&#x503c;&#x5c06;&#x88ab;&#x4f7f;&#x7528;&#xff1a",{"_index":595,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff0c;&#x5f53;&#x5de6;&#x9762;&#x7684;&#x503c;&#x7c7b;&#x578b;&#x662f",{"_index":1132,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["xff0c;&#x63a5;&#x53d7",{"_index":1148,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["xff0c;&#x7136;&#x540e;&#x4f5c;&#x4e3a;&#x4e00;&#x4e2a",{"_index":1075,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["xff0c;&#x7136;&#x540e;&#x518d;&#x6267;&#x884c",{"_index":238,"title":{},"body":{"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{}}}],["xff0c;&#x7136;&#x540e;&#x5206;&#x522b;&#x5206;&#x914d;&#x5b83;&#x4eec;&#x5230;&#x5b9e;&#x4f8b;&#x53d8;&#x91cf",{"_index":355,"title":{},"body":{"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{}}}],["xff0c;&#x7b97;&#x6cd5;&#x89c4;&#x5219;&#x5982;&#x4e0b;&#xff1a",{"_index":2185,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{}}}],["xff0c;&#x800c;&#x65b9;&#x6cd5",{"_index":1079,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{}}}],["xff0c;&#x8868;&#x793a;&#x6ca1;&#x6709;&#x53c2;&#x6570;&#x548c;&#x8fd4;&#x56de;&#x3002;hax",{"_index":159,"title":{},"body":{"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{}}}],["xff0c;&#x8bbf;&#x95ee;&#x5931;&#x8d25;&#x3002",{"_index":792,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["xff0c;&#x8fd9;&#x610f;&#x5473;&#x7740;&#x8fd9;&#x4e9b;&#x5b57;&#x6bb5;&#x53ea;&#x80fd;&#x88ab;&#x8d4b;&#x503c;&#x4e00;&#x6b21;&#x3002;&#x540c;&#x65f6;&#x8fd9;&#x7c7b;&#x7ed3;&#x6784;&#x53ea;&#x80fd;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x5bf9;&#x5e94;&#x5b57;&#x6bb5;&#x540c;&#x6837;&#x4fee;&#x9970;&#x4e3a",{"_index":656,"title":{},"body":{"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{}}}],["xff0c;&#x90a3;&#x4e48;&#x5b83;&#x4fbf;&#x4e0d;&#x80fd;&#x8fd4;&#x56d",{"_index":1863,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{}}}],["xff0c;&#x91cd;&#x8f7d;&#x65b9;&#x6cd5;&#x53ef;&#x4ee5;&#x88ab;&#x8bbe;&#x7f6e;&#x4e3a",{"_index":1147,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{}}}],["xff0c;&#x9700;&#x8981;&#x663e;&#x5f0f;&#x7684",{"_index":314,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{}}}],["xff0c;haxe&#x5141;&#x8bb8;&#x4f7f;&#x7528;&#x66f4;&#x81ea;&#x7136;&#x7684",{"_index":2307,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["xff1a",{"_index":208,"title":{},"body":{"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff1a;&#x4e0d;&#x8bba;&#x51fd;&#x6570;&#x4f55;&#x65f6;&#x51fa;&#x73b0",{"_index":1939,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x52a8;&#x6001;&#x76ee;&#x6807",{"_index":562,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff1a;&#x53ef;&#x7a7a",{"_index":549,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff1a;&#x57fa;&#x672c;&#x7c7b;&#x578b;&#x548c;&#x62bd;&#x8c61;&#x7c7b;&#x578b",{"_index":1449,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff1a;&#x5982;&#x679c",{"_index":1928,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x5982;&#x679c;&#x4e00;&#x4e2a;&#x5bf9;&#x8c61;&#x88ab;&#x5206;&#x914d;&#x4e86;&#x4e00;&#x4e2a;&#x4e0e;&#x58f0;&#x660e;&#x65f6;&#x6240;&#x4e0d;&#x540c;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x90a3;&#x4e48;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x628a;&#x6240;&#x6709;&#x7ed9;&#x5b9a;&#x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x7684;&#x7c7b;&#x578b;&#x7edf;&#x4e00;&#x4e3a;&#x671f;&#x671b;&#x7c7b;&#x578b;&#x7684;&#x5b57;&#x6bb5;&#x7684;&#x7c7b;&#x578b;&#x3002",{"_index":1950,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x5b9e;&#x73b0;&#x4e3a;&#x5b8f",{"_index":1257,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{}}}],["xff1a;&#x5b9e;&#x73b0;&#x7684;&#x8bed;&#x6cd5",{"_index":398,"title":{},"body":{"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{}}}],["xff1a;&#x610f;&#x5916;&#x7684;&#x529f;&#x80fd",{"_index":1226,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{}}}],["xff1a;&#x6211;&#x4eec;&#x5728;&#x4ecb;&#x7ecd",{"_index":1933,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x67d0;&#x4e00;&#x64cd;&#x4f5c;&#x7b26;&#x4f1a;&#x671f;&#x671b;&#x4f5c;&#x7528;&#x4e8e;&#x67d0;&#x4e00;&#x79cd;&#x7c7b;&#x578b;&#x4e0a;&#xff0c;&#x5f53;&#x64cd;&#x4f5c;&#x7b26;&#x4f5c;&#x7528;&#x4e8e;&#x67d0;&#x4e00;&#x7c7b;&#x578b;&#x65f6;&#x8be5;&#x7c7b;&#x578b;&#x4f1a;&#x88ab;&#x7edf;&#x4e00;&#x4e3a;&#x64cd;&#x4f5c;&#x7b26;&#x671f;&#x671b;&#x7684;&#x7c7b;&#x578b;&#xff0c;&#x6bd4;&#x5982;&#xff0c;&#x8868;&#x8fbe;&#x5f0f",{"_index":1953,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x6807;&#x51c6;&#x5e93;&#x4e2d;&#x7684",{"_index":972,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["xff1a;&#x6f5c;&#x5728;&#x7c7b;&#x578b",{"_index":1428,"title":{},"body":{"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{}}}],["xff1a;&#x7f16;&#x8bd1;&#x5668;&#x4f1a;&#x5c1d;&#x8bd5;&#x5728;&#x4e00;&#x4e2a;&#x6570;&#x7ec4;&#x58f0;&#x660e;&#x7684;&#x6240;&#x6709;&#x7ed9;&#x5b9a;&#x7684;&#x7c7b;&#x578b;&#x4e2d;&#x5bfb;&#x627e;&#x4e00;&#x4e2a;&#x6700;&#x5c0f;&#x5316;&#x7c7b;&#x578b;&#x3002;&#x8bf7;&#x53c2;&#x9605",{"_index":1946,"title":{},"body":{"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{}}}],["xff1a;&#x8868;&#x8fbe;&#x5f0f;&#x8bed;&#x6cd5;&#x4e2d;&#x7684;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":1616,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{}}}],["xff1a;&#x9759;&#x6001;&#x76ee;&#x6807",{"_index":557,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff1a;&#x9ed8;&#x8ba4;&#x503c",{"_index":569,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xff1a;argu",{"_index":334,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["xff1a;class",{"_index":514,"title":{},"body":{"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{}}}],["xff1a;enum",{"_index":535,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{}}}],["xff1a;enum&#x7684;&#x5177;&#x4f53;&#x7c7b;&#x578b;&#x53c2;&#x6570",{"_index":487,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{}}}],["xff1a;enumvalu",{"_index":476,"title":{},"body":{"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{}}}],["xff1a;hax",{"_index":944,"title":{},"body":{"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{}}}],["xff1a;haxe&#x5141;&#x8bb8;&#x4f7f;&#x7528",{"_index":2290,"title":{},"body":{"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{}}}],["xff1b",{"_index":571,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{}}}],["xff1b;&#x4e8b;&#x5b9e;&#x4e0a;&#xff0c;&#x5bf9;&#x4efb;&#x4f55;&#x4e1c;&#x897f;&#x9ed8;&#x8ba4;&#x90fd;&#x662f",{"_index":554,"title":{},"body":{"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{}}}],["xml.attribut",{"_index":818,"title":{},"body":{"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{}}}],["y",{"_index":286,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{},"2.类型/2.3.类实例/2.3.3.接口.html":{},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{},"2.类型/2.3.类实例/2.3.类实例.html":{},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["y&#x662f;&#x4e00;&#x4e2a",{"_index":330,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}],["yield",{"_index":1581,"title":{},"body":{"3.类型系统/3.2.类型参数/3.2.类型参数.html":{},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{},"3.类型系统/3.3.泛型/3.3.泛型.html":{},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{}}}],["z",{"_index":280,"title":{},"body":{"2.类型/2.3.类实例/2.3.2.继承.html":{},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{}}}],["z&#x540c;&#x6837;&#x662f",{"_index":333,"title":{},"body":{"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{}}}]],"pipeline":["stemmer"]},"store":{"index.html":{"title":"关于本文档","path":"\\index.html","body":"关于本文档 本文档由 Hexo + Doc 生成，目前还在建设中，囿于个人时间精力有限，有兴趣参与加快本文档建设的朋友可以联系我，左侧边栏上有本文档 repo 地址 另外，本文档主要基于 看云上前人翻译过的一份 进行修缮与补充 本文档并非初学者教程，并不会教你如何编程。尽管如此，每一主题都被粗糙地设计为顺序阅读，其中会穿插一些如 “先前看过的” 或是 “尚未了解的” 引用链接。在一些情况下，一个较为靠前的章节会为了便于解释相关主题而使用一些后续章节才详细展开的内容，这些内容都会附上相应的跳转链接，提前阅读这些主题通常来说问题不大。 我们会使用很多 Haxe 源代码来保持理论与实践之间的桥接。这些代码示例通常是完整的程序，并带有一个 main 函数，它们都可以被编译。不过也有时候只有最关键的部分被展示出来。源代码看起来就像这样： 1 Haxe code here 偶尔我们会演示 Haxe 代码是如何被生成的，对于这些内容，通常会以 JavaScript 目标平台的输出用作解释。此外，在本文档中我们定义了一组术语。主要用于引入一个新的类型或是一个 Haxe 专用术语。我们不会定义每个新引入的概念，譬如什么是类，以避免弄乱文本。定义看起来像这样： 定义 : 定义名称 定义描述 文档中的一些地方还有一些花絮框。这些包括非正式的信息，如为什么在 Haxe 的开发中做出某些决定，或者过去的 Haxe 版本中的某些实际功能的改变等。这类信息通常不是很重要，你可以选择跳过，因为它们只是为了传达一些花絮。花絮看起来像这样： 花絮: 关于花絮 花絮内容"},"index.html#关于本文档":{"title":"&#x5173;&#x4E8E;&#x672C;&#x6587;&#x6863;","path":"\\index.html#关于本文档","body":"&#x672C;&#x6587;&#x6863;&#x7531; Hexo + Doc &#x751F;&#x6210;&#xFF0C;&#x76EE;&#x524D;&#x8FD8;&#x5728;&#x5EFA;&#x8BBE;&#x4E2D;&#xFF0C;&#x56FF;&#x4E8E;&#x4E2A;&#x4EBA;&#x65F6;&#x95F4;&#x7CBE;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x6709;&#x5174;&#x8DA3;&#x53C2;&#x4E0E;&#x52A0;&#x5FEB;&#x672C;&#x6587;&#x6863;&#x5EFA;&#x8BBE;&#x7684;&#x670B;&#x53CB;&#x53EF;&#x4EE5;&#x8054;&#x7CFB;&#x6211;&#xFF0C;&#x5DE6;&#x4FA7;&#x8FB9;&#x680F;&#x4E0A;&#x6709;&#x672C;&#x6587;&#x6863; repo &#x5730;&#x5740; &#x53E6;&#x5916;&#xFF0C;&#x672C;&#x6587;&#x6863;&#x4E3B;&#x8981;&#x57FA;&#x4E8E; &#x770B;&#x4E91;&#x4E0A;&#x524D;&#x4EBA;&#x7FFB;&#x8BD1;&#x8FC7;&#x7684;&#x4E00;&#x4EFD; &#x8FDB;&#x884C;&#x4FEE;&#x7F2E;&#x4E0E;&#x8865;&#x5145; &#x672C;&#x6587;&#x6863;&#x5E76;&#x975E;&#x521D;&#x5B66;&#x8005;&#x6559;&#x7A0B;&#xFF0C;&#x5E76;&#x4E0D;&#x4F1A;&#x6559;&#x4F60;&#x5982;&#x4F55;&#x7F16;&#x7A0B;&#x3002;&#x5C3D;&#x7BA1;&#x5982;&#x6B64;&#xFF0C;&#x6BCF;&#x4E00;&#x4E3B;&#x9898;&#x90FD;&#x88AB;&#x7C97;&#x7CD9;&#x5730;&#x8BBE;&#x8BA1;&#x4E3A;&#x987A;&#x5E8F;&#x9605;&#x8BFB;&#xFF0C;&#x5176;&#x4E2D;&#x4F1A;&#x7A7F;&#x63D2;&#x4E00;&#x4E9B;&#x5982; &#x201C;&#x5148;&#x524D;&#x770B;&#x8FC7;&#x7684;&#x201D; &#x6216;&#x662F; &#x201C;&#x5C1A;&#x672A;&#x4E86;&#x89E3;&#x7684;&#x201D; &#x5F15;&#x7528;&#x94FE;&#x63A5;&#x3002;&#x5728;&#x4E00;&#x4E9B;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x4E00;&#x4E2A;&#x8F83;&#x4E3A;&#x9760;&#x524D;&#x7684;&#x7AE0;&#x8282;&#x4F1A;&#x4E3A;&#x4E86;&#x4FBF;&#x4E8E;&#x89E3;&#x91CA;&#x76F8;&#x5173;&#x4E3B;&#x9898;&#x800C;&#x4F7F;&#x7528;&#x4E00;&#x4E9B;&#x540E;&#x7EED;&#x7AE0;&#x8282;&#x624D;&#x8BE6;&#x7EC6;&#x5C55;&#x5F00;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x8FD9;&#x4E9B;&#x5185;&#x5BB9;&#x90FD;&#x4F1A;&#x9644;&#x4E0A;&#x76F8;&#x5E94;&#x7684;&#x8DF3;&#x8F6C;&#x94FE;&#x63A5;&#xFF0C;&#x63D0;&#x524D;&#x9605;&#x8BFB;&#x8FD9;&#x4E9B;&#x4E3B;&#x9898;&#x901A;&#x5E38;&#x6765;&#x8BF4;&#x95EE;&#x9898;&#x4E0D;&#x5927;&#x3002; &#x6211;&#x4EEC;&#x4F1A;&#x4F7F;&#x7528;&#x5F88;&#x591A; Haxe &#x6E90;&#x4EE3;&#x7801;&#x6765;&#x4FDD;&#x6301;&#x7406;&#x8BBA;&#x4E0E;&#x5B9E;&#x8DF5;&#x4E4B;&#x95F4;&#x7684;&#x6865;&#x63A5;&#x3002;&#x8FD9;&#x4E9B;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x901A;&#x5E38;&#x662F;&#x5B8C;&#x6574;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x5E76;&#x5E26;&#x6709;&#x4E00;&#x4E2A; main &#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x4EEC;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x7F16;&#x8BD1;&#x3002;&#x4E0D;&#x8FC7;&#x4E5F;&#x6709;&#x65F6;&#x5019;&#x53EA;&#x6709;&#x6700;&#x5173;&#x952E;&#x7684;&#x90E8;&#x5206;&#x88AB;&#x5C55;&#x793A;&#x51FA;&#x6765;&#x3002;&#x6E90;&#x4EE3;&#x7801;&#x770B;&#x8D77;&#x6765;&#x5C31;&#x50CF;&#x8FD9;&#x6837;&#xFF1A; 1 Haxe code here &#x5076;&#x5C14;&#x6211;&#x4EEC;&#x4F1A;&#x6F14;&#x793A; Haxe &#x4EE3;&#x7801;&#x662F;&#x5982;&#x4F55;&#x88AB;&#x751F;&#x6210;&#x7684;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E9B;&#x5185;&#x5BB9;&#xFF0C;&#x901A;&#x5E38;&#x4F1A;&#x4EE5; JavaScript &#x76EE;&#x6807;&#x5E73;&#x53F0;&#x7684;&#x8F93;&#x51FA;&#x7528;&#x4F5C;&#x89E3;&#x91CA;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x5728;&#x672C;&#x6587;&#x6863;&#x4E2D;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x7EC4;&#x672F;&#x8BED;&#x3002;&#x4E3B;&#x8981;&#x7528;&#x4E8E;&#x5F15;&#x5165;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7C7B;&#x578B;&#x6216;&#x662F;&#x4E00;&#x4E2A; Haxe &#x4E13;&#x7528;&#x672F;&#x8BED;&#x3002;&#x6211;&#x4EEC;&#x4E0D;&#x4F1A;&#x5B9A;&#x4E49;&#x6BCF;&#x4E2A;&#x65B0;&#x5F15;&#x5165;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x8B6C;&#x5982;&#x4EC0;&#x4E48;&#x662F;&#x7C7B;&#xFF0C;&#x4EE5;&#x907F;&#x514D;&#x5F04;&#x4E71;&#x6587;&#x672C;&#x3002;&#x5B9A;&#x4E49;&#x770B;&#x8D77;&#x6765;&#x50CF;&#x8FD9;&#x6837;&#xFF1A; &#x5B9A;&#x4E49; : &#x5B9A;&#x4E49;&#x540D;&#x79F0; &#x5B9A;&#x4E49;&#x63CF;&#x8FF0; &#x6587;&#x6863;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x5730;&#x65B9;&#x8FD8;&#x6709;&#x4E00;&#x4E9B;&#x82B1;&#x7D6E;&#x6846;&#x3002;&#x8FD9;&#x4E9B;&#x5305;&#x62EC;&#x975E;&#x6B63;&#x5F0F;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5982;&#x4E3A;&#x4EC0;&#x4E48;&#x5728; Haxe &#x7684;&#x5F00;&#x53D1;&#x4E2D;&#x505A;&#x51FA;&#x67D0;&#x4E9B;&#x51B3;&#x5B9A;&#xFF0C;&#x6216;&#x8005;&#x8FC7;&#x53BB;&#x7684; Haxe &#x7248;&#x672C;&#x4E2D;&#x7684;&#x67D0;&#x4E9B;&#x5B9E;&#x9645;&#x529F;&#x80FD;&#x7684;&#x6539;&#x53D8;&#x7B49;&#x3002;&#x8FD9;&#x7C7B;&#x4FE1;&#x606F;&#x901A;&#x5E38;&#x4E0D;&#x662F;&#x5F88;&#x91CD;&#x8981;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x8DF3;&#x8FC7;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x4F20;&#x8FBE;&#x4E00;&#x4E9B;&#x82B1;&#x7D6E;&#x3002;&#x82B1;&#x7D6E;&#x770B;&#x8D77;&#x6765;&#x50CF;&#x8FD9;&#x6837;&#xFF1A; &#x82B1;&#x7D6E;: &#x5173;&#x4E8E;&#x82B1;&#x7D6E; &#x82B1;&#x7D6E;&#x5185;&#x5BB9;"},"3.类型系统/3.类型系统.html":{"title":"","path":"\\3.类型系统\\3.类型系统.html","body":"3.类型系统 我们在 类型（第2章） 学习了不同的类型，现在看看它们之间如何交互。我们从引入 typedef（第3.1节） 作为一个简单的开始， typedef 是给一个复杂类型一个名字（或别名）的机制。除此之外，当我们使用带 类型参数（第3.2节） 的类型时它也会派上用场。 很多类型安全是通过检查前面的类型组的两个指定类型是否兼容来实现的。就是说，编译器尝试对它们执行如在 统一（第3.5节） 中描述的统一。 所有的类型以模块形式组织，可以被通过路径找到。 模块和路径（第3.7节） 中会详细解释相关的机制。"},"3.类型系统/3.类型系统.html#3-类型系统":{"title":"3.&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;","path":"\\3.类型系统\\3.类型系统.html#3-类型系统","body":"&#x6211;&#x4EEC;&#x5728; &#x7C7B;&#x578B;&#xFF08;&#x7B2C;2&#x7AE0;&#xFF09; &#x5B66;&#x4E60;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x73B0;&#x5728;&#x770B;&#x770B;&#x5B83;&#x4EEC;&#x4E4B;&#x95F4;&#x5982;&#x4F55;&#x4EA4;&#x4E92;&#x3002;&#x6211;&#x4EEC;&#x4ECE;&#x5F15;&#x5165; typedef&#xFF08;&#x7B2C;3.1&#x8282;&#xFF09; &#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x5F00;&#x59CB;&#xFF0C; typedef &#x662F;&#x7ED9;&#x4E00;&#x4E2A;&#x590D;&#x6742;&#x7C7B;&#x578B;&#x4E00;&#x4E2A;&#x540D;&#x5B57;&#xFF08;&#x6216;&#x522B;&#x540D;&#xFF09;&#x7684;&#x673A;&#x5236;&#x3002;&#x9664;&#x6B64;&#x4E4B;&#x5916;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x5E26; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09; &#x7684;&#x7C7B;&#x578B;&#x65F6;&#x5B83;&#x4E5F;&#x4F1A;&#x6D3E;&#x4E0A;&#x7528;&#x573A;&#x3002; &#x5F88;&#x591A;&#x7C7B;&#x578B;&#x5B89;&#x5168;&#x662F;&#x901A;&#x8FC7;&#x68C0;&#x67E5;&#x524D;&#x9762;&#x7684;&#x7C7B;&#x578B;&#x7EC4;&#x7684;&#x4E24;&#x4E2A;&#x6307;&#x5B9A;&#x7C7B;&#x578B;&#x662F;&#x5426;&#x517C;&#x5BB9;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#x3002;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x5C1D;&#x8BD5;&#x5BF9;&#x5B83;&#x4EEC;&#x6267;&#x884C;&#x5982;&#x5728; &#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09; &#x4E2D;&#x63CF;&#x8FF0;&#x7684;&#x7EDF;&#x4E00;&#x3002; &#x6240;&#x6709;&#x7684;&#x7C7B;&#x578B;&#x4EE5;&#x6A21;&#x5757;&#x5F62;&#x5F0F;&#x7EC4;&#x7EC7;&#xFF0C;&#x53EF;&#x4EE5;&#x88AB;&#x901A;&#x8FC7;&#x8DEF;&#x5F84;&#x627E;&#x5230;&#x3002; &#x6A21;&#x5757;&#x548C;&#x8DEF;&#x5F84;&#xFF08;&#x7B2C;3.7&#x8282;&#xFF09; &#x4E2D;&#x4F1A;&#x8BE6;&#x7EC6;&#x89E3;&#x91CA;&#x76F8;&#x5173;&#x7684;&#x673A;&#x5236;&#x3002;"},"2.类型/2.类型.html":{"title":"","path":"\\2.类型\\2.类型.html","body":"2.类型 Haxe 编译器利用丰富的类型系统，可以在编译时检测程序中类型相关的错误。类型错误是对一个特定类型执行了一个无效操作如，除以一个字符串、尝试访问一个整数的字段，或者调用一个函数而没有传递足够（或太多）的参数。在一些语言中，这些额外的安全需要消耗很多精力，因为程序员被要求明确地分配类型到语法结构： 1 2 var myButton:MySpecialButton = new MySpecialButton(); // As3 MySpecialButton* myButton = new MySpecialButton(); // C++ 显式的类型声明在 Haxe 中并不是必须的，因为编译器可以推断类型： 1 var myButton = new MySpecialButton (); // Haxe 我们会在 类型推断（第3.6节） 中探索它的细节。现在，足以确定上面代码中的变量 myButton 是可以被认为 MySpecialButton 类的一个实例。 Haxe 的类型系统知道七个类型组： 类实例：一个指定类或者接口对象 枚举实例：Haxe 枚举类型中的一个值 结构类型：一个匿名结构，即，一个被命名的字段集合 函数类型：一个由一些参数和一个返回值组成的混合类型 动态类型：一个万能类型，可以和任何类型兼容 抽象类型：一个编译时类型，在运行时被一个不同的类型表示 单形类型：一个 unknown 类型，之后可能会成为不同的类型 下一章中，我们将描述这些类型组中的每个类型，以及它们之间如何联系。 定义: 混合类型 复合类型是指拥有子类型的类型。这包括使用 类型参数（第3.2节） 的任何类型和 函数类型（第2.6节） 。"},"2.类型/2.类型.html#2-类型":{"title":"2.&#x7C7B;&#x578B;","path":"\\2.类型\\2.类型.html#2-类型","body":"Haxe &#x7F16;&#x8BD1;&#x5668;&#x5229;&#x7528;&#x4E30;&#x5BCC;&#x7684;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x68C0;&#x6D4B;&#x7A0B;&#x5E8F;&#x4E2D;&#x7C7B;&#x578B;&#x76F8;&#x5173;&#x7684;&#x9519;&#x8BEF;&#x3002;&#x7C7B;&#x578B;&#x9519;&#x8BEF;&#x662F;&#x5BF9;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#x6267;&#x884C;&#x4E86;&#x4E00;&#x4E2A;&#x65E0;&#x6548;&#x64CD;&#x4F5C;&#x5982;&#xFF0C;&#x9664;&#x4EE5;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x3001;&#x5C1D;&#x8BD5;&#x8BBF;&#x95EE;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#x7684;&#x5B57;&#x6BB5;&#xFF0C;&#x6216;&#x8005;&#x8C03;&#x7528;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x800C;&#x6CA1;&#x6709;&#x4F20;&#x9012;&#x8DB3;&#x591F;&#xFF08;&#x6216;&#x592A;&#x591A;&#xFF09;&#x7684;&#x53C2;&#x6570;&#x3002;&#x5728;&#x4E00;&#x4E9B;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x8FD9;&#x4E9B;&#x989D;&#x5916;&#x7684;&#x5B89;&#x5168;&#x9700;&#x8981;&#x6D88;&#x8017;&#x5F88;&#x591A;&#x7CBE;&#x529B;&#xFF0C;&#x56E0;&#x4E3A;&#x7A0B;&#x5E8F;&#x5458;&#x88AB;&#x8981;&#x6C42;&#x660E;&#x786E;&#x5730;&#x5206;&#x914D;&#x7C7B;&#x578B;&#x5230;&#x8BED;&#x6CD5;&#x7ED3;&#x6784;&#xFF1A; 1 2 var myButton:MySpecialButton = new MySpecialButton(); // As3 MySpecialButton* myButton = new MySpecialButton(); // C++ &#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x58F0;&#x660E;&#x5728; Haxe &#x4E2D;&#x5E76;&#x4E0D;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x7F16;&#x8BD1;&#x5668;&#x53EF;&#x4EE5;&#x63A8;&#x65AD;&#x7C7B;&#x578B;&#xFF1A; 1 var myButton = new MySpecialButton (); // Haxe &#x6211;&#x4EEC;&#x4F1A;&#x5728; &#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09; &#x4E2D;&#x63A2;&#x7D22;&#x5B83;&#x7684;&#x7EC6;&#x8282;&#x3002;&#x73B0;&#x5728;&#xFF0C;&#x8DB3;&#x4EE5;&#x786E;&#x5B9A;&#x4E0A;&#x9762;&#x4EE3;&#x7801;&#x4E2D;&#x7684;&#x53D8;&#x91CF; myButton &#x662F;&#x53EF;&#x4EE5;&#x88AB;&#x8BA4;&#x4E3A; MySpecialButton &#x7C7B;&#x7684;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;&#x3002; Haxe &#x7684;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x77E5;&#x9053;&#x4E03;&#x4E2A;&#x7C7B;&#x578B;&#x7EC4;&#xFF1A; &#x7C7B;&#x5B9E;&#x4F8B;&#xFF1A;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7C7B;&#x6216;&#x8005;&#x63A5;&#x53E3;&#x5BF9;&#x8C61; &#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#xFF1A;Haxe &#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x503C; &#x7ED3;&#x6784;&#x7C7B;&#x578B;&#xFF1A;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF0C;&#x5373;&#xFF0C;&#x4E00;&#x4E2A;&#x88AB;&#x547D;&#x540D;&#x7684;&#x5B57;&#x6BB5;&#x96C6;&#x5408; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF1A;&#x4E00;&#x4E2A;&#x7531;&#x4E00;&#x4E9B;&#x53C2;&#x6570;&#x548C;&#x4E00;&#x4E2A;&#x8FD4;&#x56DE;&#x503C;&#x7EC4;&#x6210;&#x7684;&#x6DF7;&#x5408;&#x7C7B;&#x578B; &#x52A8;&#x6001;&#x7C7B;&#x578B;&#xFF1A;&#x4E00;&#x4E2A;&#x4E07;&#x80FD;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x548C;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x517C;&#x5BB9; &#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF1A;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x65F6;&#x7C7B;&#x578B;&#xFF0C;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x88AB;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#x8868;&#x793A; &#x5355;&#x5F62;&#x7C7B;&#x578B;&#xFF1A;&#x4E00;&#x4E2A; unknown &#x7C7B;&#x578B;&#xFF0C;&#x4E4B;&#x540E;&#x53EF;&#x80FD;&#x4F1A;&#x6210;&#x4E3A;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B; &#x4E0B;&#x4E00;&#x7AE0;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x63CF;&#x8FF0;&#x8FD9;&#x4E9B;&#x7C7B;&#x578B;&#x7EC4;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x4EE5;&#x53CA;&#x5B83;&#x4EEC;&#x4E4B;&#x95F4;&#x5982;&#x4F55;&#x8054;&#x7CFB;&#x3002; &#x5B9A;&#x4E49;: &#x6DF7;&#x5408;&#x7C7B;&#x578B; &#x590D;&#x5408;&#x7C7B;&#x578B;&#x662F;&#x6307;&#x62E5;&#x6709;&#x5B50;&#x7C7B;&#x578B;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x5305;&#x62EC;&#x4F7F;&#x7528; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09; &#x7684;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x548C; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.6&#x8282;&#xFF09; &#x3002;"},"2.类型/2.1.基本类型/2.1.1.数值类型.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.1.数值类型.html","body":"2.1.1.数值类型 Float 类型： Float 表示一个双精度 IEEE 64 位浮点数 Int 类型： Int 表示一个整数 虽然每个 Int 都可以用于一个接受 Float 类型的地方（确切的说，Int 可以赋值到 Float 类型，或者使用 Float 类型统一 Int），而反过来则不行：分配一个 Float 类型到一个 Int 类型可能会丢失精度，是不被隐式的允许的。"},"2.类型/2.1.基本类型/2.1.1.数值类型.html#2-1-1-数值类型":{"title":"2.1.1.&#x6570;&#x503C;&#x7C7B;&#x578B;","path":"\\2.类型\\2.1.基本类型\\2.1.1.数值类型.html#2-1-1-数值类型","body":""},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Float":{"title":"Float","path":"\\2.类型\\2.1.基本类型\\2.1.1.数值类型.html#Float","body":"&#x7C7B;&#x578B;&#xFF1A; Float &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x53CC;&#x7CBE;&#x5EA6; IEEE 64 &#x4F4D;&#x6D6E;&#x70B9;&#x6570;"},"2.类型/2.1.基本类型/2.1.1.数值类型.html#Int":{"title":"Int","path":"\\2.类型\\2.1.基本类型\\2.1.1.数值类型.html#Int","body":"&#x7C7B;&#x578B;&#xFF1A; Int &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x6574;&#x6570; &#x867D;&#x7136;&#x6BCF;&#x4E2A; Int &#x90FD;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x4E00;&#x4E2A;&#x63A5;&#x53D7; Float &#x7C7B;&#x578B;&#x7684;&#x5730;&#x65B9;&#xFF08;&#x786E;&#x5207;&#x7684;&#x8BF4;&#xFF0C;Int &#x53EF;&#x4EE5;&#x8D4B;&#x503C;&#x5230; Float &#x7C7B;&#x578B;&#xFF0C;&#x6216;&#x8005;&#x4F7F;&#x7528; Float &#x7C7B;&#x578B;&#x7EDF;&#x4E00; Int&#xFF09;&#xFF0C;&#x800C;&#x53CD;&#x8FC7;&#x6765;&#x5219;&#x4E0D;&#x884C;&#xFF1A;&#x5206;&#x914D;&#x4E00;&#x4E2A; Float &#x7C7B;&#x578B;&#x5230;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x4F1A;&#x4E22;&#x5931;&#x7CBE;&#x5EA6;&#xFF0C;&#x662F;&#x4E0D;&#x88AB;&#x9690;&#x5F0F;&#x7684;&#x5141;&#x8BB8;&#x7684;&#x3002;"},"2.类型/2.1.基本类型/2.1.2.溢出.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.2.溢出.html","body":"2.1.2.溢出 出于性能原因，Haxe 编译器不实施任何溢出行为。溢出检查的任务落到目标平台。这里是一些溢出行为的平台特定提示： C++，Java，C#，Neko，Flash：32位带符号整数有通常的溢出惯例。 PHP，JS，Flash 8：没有原生的 Int 类型，如果到达浮点数限制（252）则会发生精度的损失。 另外， haxe.Int32 和 haxe.Int64 类可以用来确保正确的溢出行为，与平台无关，而额外的计算成本取决于目标平台。"},"2.类型/2.1.基本类型/2.1.2.溢出.html#2-1-2-溢出":{"title":"2.1.2.&#x6EA2;&#x51FA;","path":"\\2.类型\\2.1.基本类型\\2.1.2.溢出.html#2-1-2-溢出","body":"&#x51FA;&#x4E8E;&#x6027;&#x80FD;&#x539F;&#x56E0;&#xFF0C;Haxe &#x7F16;&#x8BD1;&#x5668;&#x4E0D;&#x5B9E;&#x65BD;&#x4EFB;&#x4F55;&#x6EA2;&#x51FA;&#x884C;&#x4E3A;&#x3002;&#x6EA2;&#x51FA;&#x68C0;&#x67E5;&#x7684;&#x4EFB;&#x52A1;&#x843D;&#x5230;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002;&#x8FD9;&#x91CC;&#x662F;&#x4E00;&#x4E9B;&#x6EA2;&#x51FA;&#x884C;&#x4E3A;&#x7684;&#x5E73;&#x53F0;&#x7279;&#x5B9A;&#x63D0;&#x793A;&#xFF1A; C++&#xFF0C;Java&#xFF0C;C#&#xFF0C;Neko&#xFF0C;Flash&#xFF1A;32&#x4F4D;&#x5E26;&#x7B26;&#x53F7;&#x6574;&#x6570;&#x6709;&#x901A;&#x5E38;&#x7684;&#x6EA2;&#x51FA;&#x60EF;&#x4F8B;&#x3002; PHP&#xFF0C;JS&#xFF0C;Flash 8&#xFF1A;&#x6CA1;&#x6709;&#x539F;&#x751F;&#x7684; Int &#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x5230;&#x8FBE;&#x6D6E;&#x70B9;&#x6570;&#x9650;&#x5236;&#xFF08;252&#xFF09;&#x5219;&#x4F1A;&#x53D1;&#x751F;&#x7CBE;&#x5EA6;&#x7684;&#x635F;&#x5931;&#x3002; &#x53E6;&#x5916;&#xFF0C; haxe.Int32 &#x548C; haxe.Int64 &#x7C7B;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x786E;&#x4FDD;&#x6B63;&#x786E;&#x7684;&#x6EA2;&#x51FA;&#x884C;&#x4E3A;&#xFF0C;&#x4E0E;&#x5E73;&#x53F0;&#x65E0;&#x5173;&#xFF0C;&#x800C;&#x989D;&#x5916;&#x7684;&#x8BA1;&#x7B97;&#x6210;&#x672C;&#x53D6;&#x51B3;&#x4E8E;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x3002;"},"2.类型/2.1.基本类型/2.1.5.Void类型.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.5.Void类型.html","body":"2.1.5.Void类型 类型 : Void Void 表示一个类型的缺失。它用来表达一些东西（通常是一个函数）没有值。 Void 是类型系统中的一个特殊情况，因为它实际上不是一个类型。它用来表达一个类型的缺失，多数应用于函数参数和返回类型。我们在开始的 “Hello World” 例子中已经见到过 Void 。 1 2 3 4 5 class Main  static public function main (): Void  trace ( \"Hello World\" );   在 函数类型（第2.6节） 中将会探索函数类型的详细信息，这里快速预览一下：例子中函数 main 的类型为 Void-Void ，表示没有参数和返回。Haxe 不允许 Void 类型的字段和变量，如果尝试这样声明，它会发出抱怨： 1 2 // Void类型的参数和变量是不被允许的 var x: Void ; 注：在实际编写测试代码的时候，尝试在类的 main 函数内定义 var x:Void; 并未报错，而作为类字段进行定义则不能编译，提示 “Fields of type Void are not allowed”。【环境：Haxe 3.3.0-rc.1】"},"2.类型/2.1.基本类型/2.1.5.Void类型.html#2-1-5-Void类型":{"title":"2.1.5.Void&#x7C7B;&#x578B;","path":"\\2.类型\\2.1.基本类型\\2.1.5.Void类型.html#2-1-5-Void类型","body":"&#x7C7B;&#x578B; : Void Void &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x7684;&#x7F3A;&#x5931;&#x3002;&#x5B83;&#x7528;&#x6765;&#x8868;&#x8FBE;&#x4E00;&#x4E9B;&#x4E1C;&#x897F;&#xFF08;&#x901A;&#x5E38;&#x662F;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF09;&#x6CA1;&#x6709;&#x503C;&#x3002; Void &#x662F;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x5B9E;&#x9645;&#x4E0A;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x5B83;&#x7528;&#x6765;&#x8868;&#x8FBE;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x7684;&#x7F3A;&#x5931;&#xFF0C;&#x591A;&#x6570;&#x5E94;&#x7528;&#x4E8E;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x3002;&#x6211;&#x4EEC;&#x5728;&#x5F00;&#x59CB;&#x7684; &#x201C;Hello World&#x201D; &#x4F8B;&#x5B50;&#x4E2D;&#x5DF2;&#x7ECF;&#x89C1;&#x5230;&#x8FC7; Void &#x3002; 1 2 3 4 5 class Main { static public function main (): Void { trace ( Hello World ); } } &#x5728; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.6&#x8282;&#xFF09; &#x4E2D;&#x5C06;&#x4F1A;&#x63A2;&#x7D22;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x7684;&#x8BE6;&#x7EC6;&#x4FE1;&#x606F;&#xFF0C;&#x8FD9;&#x91CC;&#x5FEB;&#x901F;&#x9884;&#x89C8;&#x4E00;&#x4E0B;&#xFF1A;&#x4F8B;&#x5B50;&#x4E2D;&#x51FD;&#x6570; main &#x7684;&#x7C7B;&#x578B;&#x4E3A; Void-Void &#xFF0C;&#x8868;&#x793A;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x3002;Haxe &#x4E0D;&#x5141;&#x8BB8; Void &#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x548C;&#x53D8;&#x91CF;&#xFF0C;&#x5982;&#x679C;&#x5C1D;&#x8BD5;&#x8FD9;&#x6837;&#x58F0;&#x660E;&#xFF0C;&#x5B83;&#x4F1A;&#x53D1;&#x51FA;&#x62B1;&#x6028;&#xFF1A; 1 2 // Void&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x548C;&#x53D8;&#x91CF;&#x662F;&#x4E0D;&#x88AB;&#x5141;&#x8BB8;&#x7684; var x: Void ; &#x6CE8;&#xFF1A;&#x5728;&#x5B9E;&#x9645;&#x7F16;&#x5199;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C1D;&#x8BD5;&#x5728;&#x7C7B;&#x7684; main &#x51FD;&#x6570;&#x5185;&#x5B9A;&#x4E49; var x:Void; &#x5E76;&#x672A;&#x62A5;&#x9519;&#xFF0C;&#x800C;&#x4F5C;&#x4E3A;&#x7C7B;&#x5B57;&#x6BB5;&#x8FDB;&#x884C;&#x5B9A;&#x4E49;&#x5219;&#x4E0D;&#x80FD;&#x7F16;&#x8BD1;&#xFF0C;&#x63D0;&#x793A; &#x201C;Fields of type Void are not allowed&#x201D;&#x3002;&#x3010;&#x73AF;&#x5883;&#xFF1A;Haxe 3.3.0-rc.1&#x3011;"},"2.类型/2.1.基本类型/2.1.3.数值运算符.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.3.数值运算符.html","body":"2.1.3.数值运算符 下面是Haxe中数值运算符的列表，根据优先级分组： 算术运算符 运算符 操作 操作数1 操作数2 返回值 ++ 递增 Int N/A Int Float N/A Float – 递减 Int N/A Int Float N/A Float + 加法 Float Float Float Float Int Float Int Float Float Int Int Int - 减法 Float Float Float Float Int Float Int Float Float Int Int Int * 乘法 Float Float Float Float Int Float Int Float Float Int Int Int / 除法 Float Float Float Float Int Float Int Float Float Int Int Float % 模运算 Float Float Float Float Int Float Int Float Float Int Int Int 比较运算符 运算符 操作 操作数1 操作数2 返回值 == 相等 Float/Int Float/Int Bool != 不等 Float/Int Float/Int Bool  小于 Float/Int Float/Int Bool = 小于等于 Float/Int Float/Int Bool  大于 Float/Int Float/Int Bool = 大于等于 Float/Int Float/Int Bool 位运算 运算符 操作 操作数1 操作数2 返回值 ~ 位非 Int N/A Int &amp; 位与 Int Int Int \\ 位或 Int Int Int ^ 异或 Int Int Int  左位移 Int Int Int  右位移 Int Int Int  无符号右位移 Int Int Int 枚举的相等性 ： 无参数的枚举总是表示同样的值，所以 == 。 带有参数的枚举可以通过 a.equals(b) 的形式比较（是 Type.enumEquals() 的简化）。 动态类型 ： 至少涉及一个动态类型值的比较未被指定，视目标平台而定。"},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#2-1-3-数值运算符":{"title":"2.1.3.&#x6570;&#x503C;&#x8FD0;&#x7B97;&#x7B26;","path":"\\2.类型\\2.1.基本类型\\2.1.3.数值运算符.html#2-1-3-数值运算符","body":"&#x4E0B;&#x9762;&#x662F;Haxe&#x4E2D;&#x6570;&#x503C;&#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x5217;&#x8868;&#xFF0C;&#x6839;&#x636E;&#x4F18;&#x5148;&#x7EA7;&#x5206;&#x7EC4;&#xFF1A;"},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#算术运算符":{"title":"&#x7B97;&#x672F;&#x8FD0;&#x7B97;&#x7B26;","path":"\\2.类型\\2.1.基本类型\\2.1.3.数值运算符.html#算术运算符","body":"&#x8FD0;&#x7B97;&#x7B26; &#x64CD;&#x4F5C; &#x64CD;&#x4F5C;&#x6570;1 &#x64CD;&#x4F5C;&#x6570;2 &#x8FD4;&#x56DE;&#x503C; ++ &#x9012;&#x589E; Int N/A Int Float N/A Float &#x2013; &#x9012;&#x51CF; Int N/A Int Float N/A Float + &#x52A0;&#x6CD5; Float Float Float Float Int Float Int Float Float Int Int Int - &#x51CF;&#x6CD5; Float Float Float Float Int Float Int Float Float Int Int Int * &#x4E58;&#x6CD5; Float Float Float Float Int Float Int Float Float Int Int Int / &#x9664;&#x6CD5; Float Float Float Float Int Float Int Float Float Int Int Float % &#x6A21;&#x8FD0;&#x7B97; Float Float Float Float Int Float Int Float Float Int Int Int"},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#比较运算符":{"title":"&#x6BD4;&#x8F83;&#x8FD0;&#x7B97;&#x7B26;","path":"\\2.类型\\2.1.基本类型\\2.1.3.数值运算符.html#比较运算符","body":"&#x8FD0;&#x7B97;&#x7B26; &#x64CD;&#x4F5C; &#x64CD;&#x4F5C;&#x6570;1 &#x64CD;&#x4F5C;&#x6570;2 &#x8FD4;&#x56DE;&#x503C; == &#x76F8;&#x7B49; Float/Int Float/Int Bool != &#x4E0D;&#x7B49; Float/Int Float/Int Bool  &#x5C0F;&#x4E8E; Float/Int Float/Int Bool = &#x5C0F;&#x4E8E;&#x7B49;&#x4E8E; Float/Int Float/Int Bool  &#x5927;&#x4E8E; Float/Int Float/Int Bool = &#x5927;&#x4E8E;&#x7B49;&#x4E8E; Float/Int Float/Int Bool"},"2.类型/2.1.基本类型/2.1.3.数值运算符.html#位运算":{"title":"&#x4F4D;&#x8FD0;&#x7B97;","path":"\\2.类型\\2.1.基本类型\\2.1.3.数值运算符.html#位运算","body":"&#x8FD0;&#x7B97;&#x7B26; &#x64CD;&#x4F5C; &#x64CD;&#x4F5C;&#x6570;1 &#x64CD;&#x4F5C;&#x6570;2 &#x8FD4;&#x56DE;&#x503C; ~ &#x4F4D;&#x975E; Int N/A Int &amp; &#x4F4D;&#x4E0E; Int Int Int \\ &#x4F4D;&#x6216; Int Int Int ^ &#x5F02;&#x6216; Int Int Int  &#x5DE6;&#x4F4D;&#x79FB; Int Int Int  &#x53F3;&#x4F4D;&#x79FB; Int Int Int  &#x65E0;&#x7B26;&#x53F7;&#x53F3;&#x4F4D;&#x79FB; Int Int Int &#x679A;&#x4E3E;&#x7684;&#x76F8;&#x7B49;&#x6027; &#xFF1A; &#x65E0;&#x53C2;&#x6570;&#x7684;&#x679A;&#x4E3E;&#x603B;&#x662F;&#x8868;&#x793A;&#x540C;&#x6837;&#x7684;&#x503C;&#xFF0C;&#x6240;&#x4EE5; == &#x3002; &#x5E26;&#x6709;&#x53C2;&#x6570;&#x7684;&#x679A;&#x4E3E;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; a.equals(b) &#x7684;&#x5F62;&#x5F0F;&#x6BD4;&#x8F83;&#xFF08;&#x662F; Type.enumEquals() &#x7684;&#x7B80;&#x5316;&#xFF09;&#x3002; &#x52A8;&#x6001;&#x7C7B;&#x578B; &#xFF1A; &#x81F3;&#x5C11;&#x6D89;&#x53CA;&#x4E00;&#x4E2A;&#x52A8;&#x6001;&#x7C7B;&#x578B;&#x503C;&#x7684;&#x6BD4;&#x8F83;&#x672A;&#x88AB;&#x6307;&#x5B9A;&#xFF0C;&#x89C6;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x800C;&#x5B9A;&#x3002;"},"2.类型/2.1.基本类型/2.1.4.Bool类型.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.4.Bool类型.html","body":"2.1.4.Bool类型 类型 : Bool 类型表示一个非 true 即 false 的值。 Bool 类型的值经常出现在条件中，例如 if(5.16) 和 while(5.14) 。下面的运算符接受并返回 Bool 类型的值： &amp;&amp; （和） || （或） ! （非） Haxe 保证混合的布尔表达式在运行时从左到右被评估，并且只进行需要的评估。 例如，表达式 A &amp;&amp; B 会首先执行 A ，然后再执行 B ，并且只有在 A 的结果为 true 的时候才继续执行 B 。同样，表达式 A || B 在 A 的执行结果为 true 的时候不会执行 B ，因为这时 B 的值是无关紧要的。在如下情况这很重要： 1 if (object != null &amp;&amp; object.field == 1 )   如果 object 为 null 的时候访问 object.field 会导致一个运行时错误，但是对 object != null 的检查则会防止它。"},"2.类型/2.1.基本类型/2.1.4.Bool类型.html#2-1-4-Bool类型":{"title":"2.1.4.Bool&#x7C7B;&#x578B;","path":"\\2.类型\\2.1.基本类型\\2.1.4.Bool类型.html#2-1-4-Bool类型","body":"&#x7C7B;&#x578B; : Bool &#x7C7B;&#x578B;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x975E; true &#x5373; false &#x7684;&#x503C;&#x3002; Bool &#x7C7B;&#x578B;&#x7684;&#x503C;&#x7ECF;&#x5E38;&#x51FA;&#x73B0;&#x5728;&#x6761;&#x4EF6;&#x4E2D;&#xFF0C;&#x4F8B;&#x5982; if(5.16) &#x548C; while(5.14) &#x3002;&#x4E0B;&#x9762;&#x7684;&#x8FD0;&#x7B97;&#x7B26;&#x63A5;&#x53D7;&#x5E76;&#x8FD4;&#x56DE; Bool &#x7C7B;&#x578B;&#x7684;&#x503C;&#xFF1A; &amp;&amp; &#xFF08;&#x548C;&#xFF09; || &#xFF08;&#x6216;&#xFF09; ! &#xFF08;&#x975E;&#xFF09; Haxe &#x4FDD;&#x8BC1;&#x6DF7;&#x5408;&#x7684;&#x5E03;&#x5C14;&#x8868;&#x8FBE;&#x5F0F;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x88AB;&#x8BC4;&#x4F30;&#xFF0C;&#x5E76;&#x4E14;&#x53EA;&#x8FDB;&#x884C;&#x9700;&#x8981;&#x7684;&#x8BC4;&#x4F30;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F; A &amp;&amp; B &#x4F1A;&#x9996;&#x5148;&#x6267;&#x884C; A &#xFF0C;&#x7136;&#x540E;&#x518D;&#x6267;&#x884C; B &#xFF0C;&#x5E76;&#x4E14;&#x53EA;&#x6709;&#x5728; A &#x7684;&#x7ED3;&#x679C;&#x4E3A; true &#x7684;&#x65F6;&#x5019;&#x624D;&#x7EE7;&#x7EED;&#x6267;&#x884C; B &#x3002;&#x540C;&#x6837;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F; A || B &#x5728; A &#x7684;&#x6267;&#x884C;&#x7ED3;&#x679C;&#x4E3A; true &#x7684;&#x65F6;&#x5019;&#x4E0D;&#x4F1A;&#x6267;&#x884C; B &#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x65F6; B &#x7684;&#x503C;&#x662F;&#x65E0;&#x5173;&#x7D27;&#x8981;&#x7684;&#x3002;&#x5728;&#x5982;&#x4E0B;&#x60C5;&#x51B5;&#x8FD9;&#x5F88;&#x91CD;&#x8981;&#xFF1A; 1 if (object != null &amp;&amp; object.field == 1 ) { } &#x5982;&#x679C; object &#x4E3A; null &#x7684;&#x65F6;&#x5019;&#x8BBF;&#x95EE; object.field &#x4F1A;&#x5BFC;&#x81F4;&#x4E00;&#x4E2A;&#x8FD0;&#x884C;&#x65F6;&#x9519;&#x8BEF;&#xFF0C;&#x4F46;&#x662F;&#x5BF9; object != null &#x7684;&#x68C0;&#x67E5;&#x5219;&#x4F1A;&#x9632;&#x6B62;&#x5B83;&#x3002;"},"2.类型/2.1.基本类型/2.1.基本类型.html":{"title":"","path":"\\2.类型\\2.1.基本类型\\2.1.基本类型.html","body":"2.1.基本类型 基本类型包括 Bool，Float 和 Int。它们在语句中可以简单的通过值识别： true 和 false 是 Bool 值 1 , 0 , -1 和 0xFF0000 是 Int 值 1.0 , 0.0 , -1.0 , 1e10 是 Float 值 在 Haxe 中，基本类型并不是 类（第2.3节） 。它们被实现为 抽象类型（第2.8节） ，并和编译器的内部运算符处理绑在一起 —— 像下一节描述的那样处理。"},"2.类型/2.1.基本类型/2.1.基本类型.html#2-1-基本类型":{"title":"2.1.&#x57FA;&#x672C;&#x7C7B;&#x578B;","path":"\\2.类型\\2.1.基本类型\\2.1.基本类型.html#2-1-基本类型","body":"&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x5305;&#x62EC; Bool&#xFF0C;Float &#x548C; Int&#x3002;&#x5B83;&#x4EEC;&#x5728;&#x8BED;&#x53E5;&#x4E2D;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7684;&#x901A;&#x8FC7;&#x503C;&#x8BC6;&#x522B;&#xFF1A; true &#x548C; false &#x662F; Bool &#x503C; 1 , 0 , -1 &#x548C; 0xFF0000 &#x662F; Int &#x503C; 1.0 , 0.0 , -1.0 , 1e10 &#x662F; Float &#x503C; &#x5728; Haxe &#x4E2D;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x5E76;&#x4E0D;&#x662F; &#x7C7B;&#xFF08;&#x7B2C;2.3&#x8282;&#xFF09; &#x3002;&#x5B83;&#x4EEC;&#x88AB;&#x5B9E;&#x73B0;&#x4E3A; &#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.8&#x8282;&#xFF09; &#xFF0C;&#x5E76;&#x548C;&#x7F16;&#x8BD1;&#x5668;&#x7684;&#x5185;&#x90E8;&#x8FD0;&#x7B97;&#x7B26;&#x5904;&#x7406;&#x7ED1;&#x5728;&#x4E00;&#x8D77; &#x2014;&#x2014; &#x50CF;&#x4E0B;&#x4E00;&#x8282;&#x63CF;&#x8FF0;&#x7684;&#x90A3;&#x6837;&#x5904;&#x7406;&#x3002;"},"2.类型/2.3.类实例/2.3.2.继承.html":{"title":"","path":"\\2.类型\\2.3.类实例\\2.3.2.继承.html","body":"2.3.2.继承 类可以继承自其它的类，在 Haxe 中通过 extends 关键字指示： 1 2 3 4 5 6 7 class Point3 extends Point  var z : Int ; public function new (x,y,z)  super (x,y); this .z = z;   这个关系通常被称为 “is-a”（subsumption，包含架构，指的是类的父子继承关系）：任何 Point3 类的实例同时也是 Point 类的实例。 Point 则作为 Point3 的父类，而 Point3 则是 Point 的子类。一个类可以有许多子类，但是只有一个父类。术语“一个 class X 的父类”通常指它的直接父类、父类的父类等。 上面的代码和原来的 Point 类很相似，使用了两个新的部分： extends Point 表示这个类继承自 Point 类。 super(x, y) 是调用父类的构造函数，本例中即 Point.new 。 在子类中定义它们自己的构造函数并不是必须的，但是如果定义了，则调用 super() 是强制性的。这不像其它一些面向对象语言，这个调用可以出现在构造函数代码中的任何地方，而不是必须作为第一个表达式。 一个类可以重写它父类的 方法（第4.3节） ，需要显式的 override 关键字。效果和限制将在 重写方法（第4.3.1节） 中详细介绍。"},"2.类型/2.3.类实例/2.3.2.继承.html#2-3-2-继承":{"title":"2.3.2.&#x7EE7;&#x627F;","path":"\\2.类型\\2.3.类实例\\2.3.2.继承.html#2-3-2-继承","body":"&#x7C7B;&#x53EF;&#x4EE5;&#x7EE7;&#x627F;&#x81EA;&#x5176;&#x5B83;&#x7684;&#x7C7B;&#xFF0C;&#x5728; Haxe &#x4E2D;&#x901A;&#x8FC7; extends &#x5173;&#x952E;&#x5B57;&#x6307;&#x793A;&#xFF1A; 1 2 3 4 5 6 7 class Point3 extends Point { var z : Int ; public function new (x,y,z) { super (x,y); this .z = z; } } &#x8FD9;&#x4E2A;&#x5173;&#x7CFB;&#x901A;&#x5E38;&#x88AB;&#x79F0;&#x4E3A; &#x201C;is-a&#x201D;&#xFF08;subsumption&#xFF0C;&#x5305;&#x542B;&#x67B6;&#x6784;&#xFF0C;&#x6307;&#x7684;&#x662F;&#x7C7B;&#x7684;&#x7236;&#x5B50;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#xFF09;&#xFF1A;&#x4EFB;&#x4F55; Point3 &#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x540C;&#x65F6;&#x4E5F;&#x662F; Point &#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x3002; Point &#x5219;&#x4F5C;&#x4E3A; Point3 &#x7684;&#x7236;&#x7C7B;&#xFF0C;&#x800C; Point3 &#x5219;&#x662F; Point &#x7684;&#x5B50;&#x7C7B;&#x3002;&#x4E00;&#x4E2A;&#x7C7B;&#x53EF;&#x4EE5;&#x6709;&#x8BB8;&#x591A;&#x5B50;&#x7C7B;&#xFF0C;&#x4F46;&#x662F;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7236;&#x7C7B;&#x3002;&#x672F;&#x8BED;&#x201C;&#x4E00;&#x4E2A; class X &#x7684;&#x7236;&#x7C7B;&#x201D;&#x901A;&#x5E38;&#x6307;&#x5B83;&#x7684;&#x76F4;&#x63A5;&#x7236;&#x7C7B;&#x3001;&#x7236;&#x7C7B;&#x7684;&#x7236;&#x7C7B;&#x7B49;&#x3002; &#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x548C;&#x539F;&#x6765;&#x7684; Point &#x7C7B;&#x5F88;&#x76F8;&#x4F3C;&#xFF0C;&#x4F7F;&#x7528;&#x4E86;&#x4E24;&#x4E2A;&#x65B0;&#x7684;&#x90E8;&#x5206;&#xFF1A; extends Point &#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x7C7B;&#x7EE7;&#x627F;&#x81EA; Point &#x7C7B;&#x3002; super(x, y) &#x662F;&#x8C03;&#x7528;&#x7236;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x672C;&#x4F8B;&#x4E2D;&#x5373; Point.new &#x3002; &#x5728;&#x5B50;&#x7C7B;&#x4E2D;&#x5B9A;&#x4E49;&#x5B83;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x5E76;&#x4E0D;&#x662F;&#x5FC5;&#x987B;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x5B9A;&#x4E49;&#x4E86;&#xFF0C;&#x5219;&#x8C03;&#x7528; super() &#x662F;&#x5F3A;&#x5236;&#x6027;&#x7684;&#x3002;&#x8FD9;&#x4E0D;&#x50CF;&#x5176;&#x5B83;&#x4E00;&#x4E9B;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x8BED;&#x8A00;&#xFF0C;&#x8FD9;&#x4E2A;&#x8C03;&#x7528;&#x53EF;&#x4EE5;&#x51FA;&#x73B0;&#x5728;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4EE3;&#x7801;&#x4E2D;&#x7684;&#x4EFB;&#x4F55;&#x5730;&#x65B9;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5FC5;&#x987B;&#x4F5C;&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x3002; &#x4E00;&#x4E2A;&#x7C7B;&#x53EF;&#x4EE5;&#x91CD;&#x5199;&#x5B83;&#x7236;&#x7C7B;&#x7684; &#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3&#x8282;&#xFF09; &#xFF0C;&#x9700;&#x8981;&#x663E;&#x5F0F;&#x7684; override &#x5173;&#x952E;&#x5B57;&#x3002;&#x6548;&#x679C;&#x548C;&#x9650;&#x5236;&#x5C06;&#x5728; &#x91CD;&#x5199;&#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3.1&#x8282;&#xFF09; &#x4E2D;&#x8BE6;&#x7EC6;&#x4ECB;&#x7ECD;&#x3002;"},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html":{"title":"","path":"\\2.类型\\2.2.为空性\\2.2.1.可选参数和为空性.html","body":"2.2.1.可选参数和为空性 当考虑为空性的时候，可选参数也必须被解释。特别地，在不能为空的原生可选参数和可能为空的 Haxe 特定可选参数之间，肯定有一个区别。区别是通过使用问号标记可选参数来实现： 1 2 3 4 5 6 7 8 // x是一个原生 Int（不能为空） function foo (x : Int = 0 )  // y是一个 NullT类型 (可空) function bar ( ?y : Int )  // z同样是 NullT function opt ( ?z : Int = -1 )  花絮 ：Argument 和 Parameter 在一些其它的编程语言中，argument 和 parameter 可以交替使用。在 Haxe 中，argument 在针对方法的时候使用，而 parameter 是指 类型参数（第3.2节） 。"},"2.类型/2.2.为空性/2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性":{"title":"2.2.1.&#x53EF;&#x9009;&#x53C2;&#x6570;&#x548C;&#x4E3A;&#x7A7A;&#x6027;","path":"\\2.类型\\2.2.为空性\\2.2.1.可选参数和为空性.html#2-2-1-可选参数和为空性","body":"&#x5F53;&#x8003;&#x8651;&#x4E3A;&#x7A7A;&#x6027;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x4E5F;&#x5FC5;&#x987B;&#x88AB;&#x89E3;&#x91CA;&#x3002;&#x7279;&#x522B;&#x5730;&#xFF0C;&#x5728;&#x4E0D;&#x80FD;&#x4E3A;&#x7A7A;&#x7684;&#x539F;&#x751F;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x548C;&#x53EF;&#x80FD;&#x4E3A;&#x7A7A;&#x7684; Haxe &#x7279;&#x5B9A;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x4E4B;&#x95F4;&#xFF0C;&#x80AF;&#x5B9A;&#x6709;&#x4E00;&#x4E2A;&#x533A;&#x522B;&#x3002;&#x533A;&#x522B;&#x662F;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x95EE;&#x53F7;&#x6807;&#x8BB0;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x6765;&#x5B9E;&#x73B0;&#xFF1A; 1 2 3 4 5 6 7 8 // x&#x662F;&#x4E00;&#x4E2A;&#x539F;&#x751F; Int&#xFF08;&#x4E0D;&#x80FD;&#x4E3A;&#x7A7A;&#xFF09; function foo (x : Int = 0 ) {} // y&#x662F;&#x4E00;&#x4E2A; NullT&#x7C7B;&#x578B; (&#x53EF;&#x7A7A;) function bar ( ?y : Int ) {} // z&#x540C;&#x6837;&#x662F; NullT function opt ( ?z : Int = -1 ) {} &#x82B1;&#x7D6E; &#xFF1A;Argument &#x548C; Parameter &#x5728;&#x4E00;&#x4E9B;&#x5176;&#x5B83;&#x7684;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;argument &#x548C; parameter &#x53EF;&#x4EE5;&#x4EA4;&#x66FF;&#x4F7F;&#x7528;&#x3002;&#x5728; Haxe &#x4E2D;&#xFF0C;argument &#x5728;&#x9488;&#x5BF9;&#x65B9;&#x6CD5;&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;&#xFF0C;&#x800C; parameter &#x662F;&#x6307; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09; &#x3002;"},"2.类型/2.3.类实例/2.3.1.类的构造函数.html":{"title":"","path":"\\2.类型\\2.3.类实例\\2.3.1.类的构造函数.html","body":"2.3.1.类的构造函数 类的实例通过调用类的构造函数（一个通常称为实例化的过程）创建。类实例的另一个称呼叫做对象。然而，我们更倾向于使用术语“类的实例”来强调 类/类实例和 枚举/ 枚举实例（第2.4节 ）之间的类比。 1 var p = new Point ( -1 , 65 ); 这会生成一个 Point 类的实例，它被分配到一个变量 p 上。 Point 的构造函数接受两个参数 -1 和 65 ，然后分别分配它们到实例变量 x 和 y （对比在 类实例（第2.3节） 中它的定义）。我们将在 new（第5.12节） 中重新审视 new 表达式的精确意思。现在，只要把它当作调用类的构造函数并返回适当的对象。"},"2.类型/2.3.类实例/2.3.1.类的构造函数.html#2-3-1-类的构造函数":{"title":"2.3.1.&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;","path":"\\2.类型\\2.3.类实例\\2.3.1.类的构造函数.html#2-3-1-类的构造函数","body":"&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x901A;&#x8FC7;&#x8C03;&#x7528;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF08;&#x4E00;&#x4E2A;&#x901A;&#x5E38;&#x79F0;&#x4E3A;&#x5B9E;&#x4F8B;&#x5316;&#x7684;&#x8FC7;&#x7A0B;&#xFF09;&#x521B;&#x5EFA;&#x3002;&#x7C7B;&#x5B9E;&#x4F8B;&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x79F0;&#x547C;&#x53EB;&#x505A;&#x5BF9;&#x8C61;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x6211;&#x4EEC;&#x66F4;&#x503E;&#x5411;&#x4E8E;&#x4F7F;&#x7528;&#x672F;&#x8BED;&#x201C;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x201D;&#x6765;&#x5F3A;&#x8C03; &#x7C7B;/&#x7C7B;&#x5B9E;&#x4F8B;&#x548C; &#x679A;&#x4E3E;/ &#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#xFF08;&#x7B2C;2.4&#x8282; &#xFF09;&#x4E4B;&#x95F4;&#x7684;&#x7C7B;&#x6BD4;&#x3002; 1 var p = new Point ( -1 , 65 ); &#x8FD9;&#x4F1A;&#x751F;&#x6210;&#x4E00;&#x4E2A; Point &#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x5B83;&#x88AB;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A;&#x53D8;&#x91CF; p &#x4E0A;&#x3002; Point &#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x63A5;&#x53D7;&#x4E24;&#x4E2A;&#x53C2;&#x6570; -1 &#x548C; 65 &#xFF0C;&#x7136;&#x540E;&#x5206;&#x522B;&#x5206;&#x914D;&#x5B83;&#x4EEC;&#x5230;&#x5B9E;&#x4F8B;&#x53D8;&#x91CF; x &#x548C; y &#xFF08;&#x5BF9;&#x6BD4;&#x5728; &#x7C7B;&#x5B9E;&#x4F8B;&#xFF08;&#x7B2C;2.3&#x8282;&#xFF09; &#x4E2D;&#x5B83;&#x7684;&#x5B9A;&#x4E49;&#xFF09;&#x3002;&#x6211;&#x4EEC;&#x5C06;&#x5728; new&#xFF08;&#x7B2C;5.12&#x8282;&#xFF09; &#x4E2D;&#x91CD;&#x65B0;&#x5BA1;&#x89C6; new &#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7CBE;&#x786E;&#x610F;&#x601D;&#x3002;&#x73B0;&#x5728;&#xFF0C;&#x53EA;&#x8981;&#x628A;&#x5B83;&#x5F53;&#x4F5C;&#x8C03;&#x7528;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x5E76;&#x8FD4;&#x56DE;&#x9002;&#x5F53;&#x7684;&#x5BF9;&#x8C61;&#x3002;"},"2.类型/2.3.类实例/2.3.3.接口.html":{"title":"","path":"\\2.类型\\2.3.类实例\\2.3.3.接口.html","body":"2.3.3.接口 一个接口可以被理解为类的签名，因为它描述了类的公共字段。接口不提供实现，而是纯粹的结构上的信息： 1 2 3 interface Printable  public function toString (): String ;  语法和类的相似，但有以下例外： 使用 interface 关键字而不是 class 关键字 函数不需要任何表达式 每个字段必须有一个显式的类型 接口，它不像 结构子类型化（第3.5.2节） ，它描述和类之间一个静态的关系。一个指定的类，如果被显式地陈述如下，则只被认为是兼容一个接口： 1 class Point implements Printable   这里， implements 关键字表示 Point 类有一个到 Printable 接口的“is-a”关系，即每个 Point 的实例同时也是 Printable 接口的实例。虽然一个类只能有一个父类，但是它可以通过使用多个 implements 关键字实现多个接口： 1 2 class Point implements Printable implements Serializable 编译器检查是否实现了假设。也就是说，它确保类实际上实现了接口必须的所有字段。一个字段，如果类或者任何它的父类提供了一个实现，那么它被认为是实现了。接口字段不限于方法。也可以是变量或者属性： 1 2 3 4 5 6 7 8 9 10 interface Placeable  public var x: Float ; public var y: Float ;  class Main implements Placeable  public var x: Float ; public var y: Float ; static public function main ()    接口可以扩展多个其它的接口，使用 extends 关键字： 1 interface Debuggable extends Printable extends Serializable 花絮 ：实现的语法 Haxe 3.0 之前 需要多个 implements 关键字，使用逗号 , 隔开。我们决定遵循 Java 事实上的标准，免除了逗号。这个是 Haxe 2 和 Haxe 3 之间的一个致命变更。"},"2.类型/2.3.类实例/2.3.3.接口.html#2-3-3-接口":{"title":"2.3.3.&#x63A5;&#x53E3;","path":"\\2.类型\\2.3.类实例\\2.3.3.接口.html#2-3-3-接口","body":"&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#x53EF;&#x4EE5;&#x88AB;&#x7406;&#x89E3;&#x4E3A;&#x7C7B;&#x7684;&#x7B7E;&#x540D;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x63CF;&#x8FF0;&#x4E86;&#x7C7B;&#x7684;&#x516C;&#x5171;&#x5B57;&#x6BB5;&#x3002;&#x63A5;&#x53E3;&#x4E0D;&#x63D0;&#x4F9B;&#x5B9E;&#x73B0;&#xFF0C;&#x800C;&#x662F;&#x7EAF;&#x7CB9;&#x7684;&#x7ED3;&#x6784;&#x4E0A;&#x7684;&#x4FE1;&#x606F;&#xFF1A; 1 2 3 interface Printable { public function toString (): String ; } &#x8BED;&#x6CD5;&#x548C;&#x7C7B;&#x7684;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x6709;&#x4EE5;&#x4E0B;&#x4F8B;&#x5916;&#xFF1A; &#x4F7F;&#x7528; interface &#x5173;&#x952E;&#x5B57;&#x800C;&#x4E0D;&#x662F; class &#x5173;&#x952E;&#x5B57; &#x51FD;&#x6570;&#x4E0D;&#x9700;&#x8981;&#x4EFB;&#x4F55;&#x8868;&#x8FBE;&#x5F0F; &#x6BCF;&#x4E2A;&#x5B57;&#x6BB5;&#x5FC5;&#x987B;&#x6709;&#x4E00;&#x4E2A;&#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B; &#x63A5;&#x53E3;&#xFF0C;&#x5B83;&#x4E0D;&#x50CF; &#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316;&#xFF08;&#x7B2C;3.5.2&#x8282;&#xFF09; &#xFF0C;&#x5B83;&#x63CF;&#x8FF0;&#x548C;&#x7C7B;&#x4E4B;&#x95F4;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x7684;&#x5173;&#x7CFB;&#x3002;&#x4E00;&#x4E2A;&#x6307;&#x5B9A;&#x7684;&#x7C7B;&#xFF0C;&#x5982;&#x679C;&#x88AB;&#x663E;&#x5F0F;&#x5730;&#x9648;&#x8FF0;&#x5982;&#x4E0B;&#xFF0C;&#x5219;&#x53EA;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x517C;&#x5BB9;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#xFF1A; 1 class Point implements Printable { } &#x8FD9;&#x91CC;&#xFF0C; implements &#x5173;&#x952E;&#x5B57;&#x8868;&#x793A; Point &#x7C7B;&#x6709;&#x4E00;&#x4E2A;&#x5230; Printable &#x63A5;&#x53E3;&#x7684;&#x201C;is-a&#x201D;&#x5173;&#x7CFB;&#xFF0C;&#x5373;&#x6BCF;&#x4E2A; Point &#x7684;&#x5B9E;&#x4F8B;&#x540C;&#x65F6;&#x4E5F;&#x662F; Printable &#x63A5;&#x53E3;&#x7684;&#x5B9E;&#x4F8B;&#x3002;&#x867D;&#x7136;&#x4E00;&#x4E2A;&#x7C7B;&#x53EA;&#x80FD;&#x6709;&#x4E00;&#x4E2A;&#x7236;&#x7C7B;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x591A;&#x4E2A; implements &#x5173;&#x952E;&#x5B57;&#x5B9E;&#x73B0;&#x591A;&#x4E2A;&#x63A5;&#x53E3;&#xFF1A; 1 2 class Point implements Printable implements Serializable &#x7F16;&#x8BD1;&#x5668;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x5B9E;&#x73B0;&#x4E86;&#x5047;&#x8BBE;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5B83;&#x786E;&#x4FDD;&#x7C7B;&#x5B9E;&#x9645;&#x4E0A;&#x5B9E;&#x73B0;&#x4E86;&#x63A5;&#x53E3;&#x5FC5;&#x987B;&#x7684;&#x6240;&#x6709;&#x5B57;&#x6BB5;&#x3002;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF0C;&#x5982;&#x679C;&#x7C7B;&#x6216;&#x8005;&#x4EFB;&#x4F55;&#x5B83;&#x7684;&#x7236;&#x7C7B;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x5B9E;&#x73B0;&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x5B9E;&#x73B0;&#x4E86;&#x3002;&#x63A5;&#x53E3;&#x5B57;&#x6BB5;&#x4E0D;&#x9650;&#x4E8E;&#x65B9;&#x6CD5;&#x3002;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x53D8;&#x91CF;&#x6216;&#x8005;&#x5C5E;&#x6027;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 interface Placeable { public var x: Float ; public var y: Float ; } class Main implements Placeable { public var x: Float ; public var y: Float ; static public function main () { } } &#x63A5;&#x53E3;&#x53EF;&#x4EE5;&#x6269;&#x5C55;&#x591A;&#x4E2A;&#x5176;&#x5B83;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x4F7F;&#x7528; extends &#x5173;&#x952E;&#x5B57;&#xFF1A; 1 interface Debuggable extends Printable extends Serializable &#x82B1;&#x7D6E; &#xFF1A;&#x5B9E;&#x73B0;&#x7684;&#x8BED;&#x6CD5; Haxe 3.0 &#x4E4B;&#x524D; &#x9700;&#x8981;&#x591A;&#x4E2A; implements &#x5173;&#x952E;&#x5B57;&#xFF0C;&#x4F7F;&#x7528;&#x9017;&#x53F7; , &#x9694;&#x5F00;&#x3002;&#x6211;&#x4EEC;&#x51B3;&#x5B9A;&#x9075;&#x5FAA; Java &#x4E8B;&#x5B9E;&#x4E0A;&#x7684;&#x6807;&#x51C6;&#xFF0C;&#x514D;&#x9664;&#x4E86;&#x9017;&#x53F7;&#x3002;&#x8FD9;&#x4E2A;&#x662F; Haxe 2 &#x548C; Haxe 3 &#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x4E2A;&#x81F4;&#x547D;&#x53D8;&#x66F4;&#x3002;"},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html":{"title":"","path":"\\2.类型\\2.4.枚举实例\\2.4.2.使用枚举.html","body":"2.4.2.使用枚举 如果只有一组有限的值被允许使用，那么枚举类型是一个不错的选择。个体的 构造函数（第2.4.1节） 表示允许的变型，并使编译器检查是否所有可能的值都被遵守的。可以在这里看到： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 enum Color  Red; Green; Blue; Rgb(r: Int , g: Int , b: Int );  class Main  public static function main () var color = getColor(); switch (color) case Red: trace ( \"color was red\" ); case Green: trace ( \"color was green\" ); case Blue: trace ( \"color was blue\" ); case Rgb(r,g,b): trace ( \"color had a red value of \" + r);   static function getColor (): Color  return Rgb( 255 , 0 , 255 );   在检索通过分配 getColor() 的返回值分配给 color 的值之后，一个 switch 语句（第5.17节） 根据 color 值进行分支。前三个情况是 Red ， Green 和 Blue ，它们是没有价值的，但是跟 Color 中没有参数的构造函数一致。最后的 Rgb(r,g,b) 展示如何提取构造函数中的参数值：它们可以作为局部变量使用在 case 表达式主体中，就像使用了一个 var 表达式（第5.10节） 一样。关于使用 switch 语句的高级信息将在 模式匹配（第6.4节） 章节进一步探索。"},"2.类型/2.4.枚举实例/2.4.2.使用枚举.html#2-4-2-使用枚举":{"title":"2.4.2.&#x4F7F;&#x7528;&#x679A;&#x4E3E;","path":"\\2.类型\\2.4.枚举实例\\2.4.2.使用枚举.html#2-4-2-使用枚举","body":"&#x5982;&#x679C;&#x53EA;&#x6709;&#x4E00;&#x7EC4;&#x6709;&#x9650;&#x7684;&#x503C;&#x88AB;&#x5141;&#x8BB8;&#x4F7F;&#x7528;&#xFF0C;&#x90A3;&#x4E48;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x9519;&#x7684;&#x9009;&#x62E9;&#x3002;&#x4E2A;&#x4F53;&#x7684; &#x6784;&#x9020;&#x51FD;&#x6570;&#xFF08;&#x7B2C;2.4.1&#x8282;&#xFF09; &#x8868;&#x793A;&#x5141;&#x8BB8;&#x7684;&#x53D8;&#x578B;&#xFF0C;&#x5E76;&#x4F7F;&#x7F16;&#x8BD1;&#x5668;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x503C;&#x90FD;&#x88AB;&#x9075;&#x5B88;&#x7684;&#x3002;&#x53EF;&#x4EE5;&#x5728;&#x8FD9;&#x91CC;&#x770B;&#x5230;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 enum Color { Red; Green; Blue; Rgb(r: Int , g: Int , b: Int ); } class Main { public static function main (){ var color = getColor(); switch (color){ case Red: trace ( color was red ); case Green: trace ( color was green ); case Blue: trace ( color was blue ); case Rgb(r,g,b): trace ( color had a red value of  + r); } } static function getColor (): Color { return Rgb( 255 , 0 , 255 ); } } &#x5728;&#x68C0;&#x7D22;&#x901A;&#x8FC7;&#x5206;&#x914D; getColor() &#x7684;&#x8FD4;&#x56DE;&#x503C;&#x5206;&#x914D;&#x7ED9; color &#x7684;&#x503C;&#x4E4B;&#x540E;&#xFF0C;&#x4E00;&#x4E2A; switch &#x8BED;&#x53E5;&#xFF08;&#x7B2C;5.17&#x8282;&#xFF09; &#x6839;&#x636E; color &#x503C;&#x8FDB;&#x884C;&#x5206;&#x652F;&#x3002;&#x524D;&#x4E09;&#x4E2A;&#x60C5;&#x51B5;&#x662F; Red &#xFF0C; Green &#x548C; Blue &#xFF0C;&#x5B83;&#x4EEC;&#x662F;&#x6CA1;&#x6709;&#x4EF7;&#x503C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x8DDF; Color &#x4E2D;&#x6CA1;&#x6709;&#x53C2;&#x6570;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E00;&#x81F4;&#x3002;&#x6700;&#x540E;&#x7684; Rgb(r,g,b) &#x5C55;&#x793A;&#x5982;&#x4F55;&#x63D0;&#x53D6;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4E2D;&#x7684;&#x53C2;&#x6570;&#x503C;&#xFF1A;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x4F7F;&#x7528;&#x5728; case &#x8868;&#x8FBE;&#x5F0F;&#x4E3B;&#x4F53;&#x4E2D;&#xFF0C;&#x5C31;&#x50CF;&#x4F7F;&#x7528;&#x4E86;&#x4E00;&#x4E2A; var &#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5.10&#x8282;&#xFF09; &#x4E00;&#x6837;&#x3002;&#x5173;&#x4E8E;&#x4F7F;&#x7528; switch &#x8BED;&#x53E5;&#x7684;&#x9AD8;&#x7EA7;&#x4FE1;&#x606F;&#x5C06;&#x5728; &#x6A21;&#x5F0F;&#x5339;&#x914D;&#xFF08;&#x7B2C;6.4&#x8282;&#xFF09; &#x7AE0;&#x8282;&#x8FDB;&#x4E00;&#x6B65;&#x63A2;&#x7D22;&#x3002;"},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html":{"title":"","path":"\\2.类型\\2.4.枚举实例\\2.4.1.Enum构造函数.html","body":"2.4.1.Enum构造函数 类似于类和它们的构造函数，枚举通过使用它们的一个构造函数提供了一种实例化方式。然而，与类不同，枚举提供了多个可以简单的通过它们的名字使用的构造函数： 1 2 3 var a = Red; var b = Green; var c = Rgb( 255 , 255 , 0 ) 在这段代码中变量 a ， b 和 c 的类型为 Color 。变量 c 使用 Rgb 构造函数和参数来初始化。 所有枚举实例都可以被分配到一个名为 EnumValue 的特定类型 。 EnumValue 类型 ：EnumValue EnumValue 是一个特别的类型，统一所有的枚举实例。它被 Haxe 标准库使用，来提供对所有枚举实例的某些操作，可以用在用户代码中一个 需要一个枚举实例而不是某个特定的类型的 API 的情况。 重要的是区分枚举类型和枚举构造函数，如这个示例展示的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 enum Color  Red; Green; Blue; Rgb(r: Int ,g: Int ,b: Int );  class Main  public static function main () var ec: EnumValue = Red; //有效 var en: Enum Color = Color; //有效 // error, Color 应该是 EnumColor // var x :EnumColor = Red;   如果上面注释掉的行没有被注释，程序不会通过编译，因为 Red （一个枚举构造函数）不能被赋值到一个 Enum （一个枚举类型）类型的变量。这个关系就像类和类的实例。 Enum 花絮 ：Enum的具体类型参数 手册的一个读者困惑于上面示例中 Color 和 Enum 的区别。事实上，这里使用一个具体类型参数是没有意义的，只是用于演示目的。通常我们会在这里省略类型，让 类型推断（第3.6节） 来处理它。然而，推断的类型可能和 Enum 不同。编译器推断出一个将枚举的构造函数 作为“字段”的伪类型。自 Haxe3.2.0 起，就不能在语法中表达这个类型，而且也没有必要这么做。"},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#2-4-1-Enum构造函数":{"title":"2.4.1.Enum&#x6784;&#x9020;&#x51FD;&#x6570;","path":"\\2.类型\\2.4.枚举实例\\2.4.1.Enum构造函数.html#2-4-1-Enum构造函数","body":"&#x7C7B;&#x4F3C;&#x4E8E;&#x7C7B;&#x548C;&#x5B83;&#x4EEC;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x679A;&#x4E3E;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x7684;&#x4E00;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x5B9E;&#x4F8B;&#x5316;&#x65B9;&#x5F0F;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4E0E;&#x7C7B;&#x4E0D;&#x540C;&#xFF0C;&#x679A;&#x4E3E;&#x63D0;&#x4F9B;&#x4E86;&#x591A;&#x4E2A;&#x53EF;&#x4EE5;&#x7B80;&#x5355;&#x7684;&#x901A;&#x8FC7;&#x5B83;&#x4EEC;&#x7684;&#x540D;&#x5B57;&#x4F7F;&#x7528;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF1A; 1 2 3 var a = Red; var b = Green; var c = Rgb( 255 , 255 , 0 ) &#x5728;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x4E2D;&#x53D8;&#x91CF; a &#xFF0C; b &#x548C; c &#x7684;&#x7C7B;&#x578B;&#x4E3A; Color &#x3002;&#x53D8;&#x91CF; c &#x4F7F;&#x7528; Rgb &#x6784;&#x9020;&#x51FD;&#x6570;&#x548C;&#x53C2;&#x6570;&#x6765;&#x521D;&#x59CB;&#x5316;&#x3002; &#x6240;&#x6709;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A;&#x540D;&#x4E3A; EnumValue &#x7684;&#x7279;&#x5B9A;&#x7C7B;&#x578B; &#x3002;"},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#EnumValue":{"title":"EnumValue","path":"\\2.类型\\2.4.枚举实例\\2.4.1.Enum构造函数.html#EnumValue","body":"&#x7C7B;&#x578B; &#xFF1A;EnumValue EnumValue &#x662F;&#x4E00;&#x4E2A;&#x7279;&#x522B;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x7EDF;&#x4E00;&#x6240;&#x6709;&#x7684;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x3002;&#x5B83;&#x88AB; Haxe &#x6807;&#x51C6;&#x5E93;&#x4F7F;&#x7528;&#xFF0C;&#x6765;&#x63D0;&#x4F9B;&#x5BF9;&#x6240;&#x6709;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x7684;&#x67D0;&#x4E9B;&#x64CD;&#x4F5C;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x5728;&#x7528;&#x6237;&#x4EE3;&#x7801;&#x4E2D;&#x4E00;&#x4E2A; &#x9700;&#x8981;&#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;&#x800C;&#x4E0D;&#x662F;&#x67D0;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#x7684; API &#x7684;&#x60C5;&#x51B5;&#x3002; &#x91CD;&#x8981;&#x7684;&#x662F;&#x533A;&#x5206;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x548C;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x8FD9;&#x4E2A;&#x793A;&#x4F8B;&#x5C55;&#x793A;&#x7684;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 enum Color { Red; Green; Blue; Rgb(r: Int ,g: Int ,b: Int ); } class Main { public static function main (){ var ec: EnumValue = Red; //&#x6709;&#x6548; var en: Enum Color = Color; //&#x6709;&#x6548; // error, Color &#x5E94;&#x8BE5;&#x662F; EnumColor // var x :EnumColor = Red; } } &#x5982;&#x679C;&#x4E0A;&#x9762;&#x6CE8;&#x91CA;&#x6389;&#x7684;&#x884C;&#x6CA1;&#x6709;&#x88AB;&#x6CE8;&#x91CA;&#xFF0C;&#x7A0B;&#x5E8F;&#x4E0D;&#x4F1A;&#x901A;&#x8FC7;&#x7F16;&#x8BD1;&#xFF0C;&#x56E0;&#x4E3A; Red &#xFF08;&#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF09;&#x4E0D;&#x80FD;&#x88AB;&#x8D4B;&#x503C;&#x5230;&#x4E00;&#x4E2A; Enum &#xFF08;&#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#xFF09;&#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF;&#x3002;&#x8FD9;&#x4E2A;&#x5173;&#x7CFB;&#x5C31;&#x50CF;&#x7C7B;&#x548C;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x3002;"},"2.类型/2.4.枚举实例/2.4.1.Enum构造函数.html#Enum":{"title":"Enum","path":"\\2.类型\\2.4.枚举实例\\2.4.1.Enum构造函数.html#Enum","body":"&#x82B1;&#x7D6E; &#xFF1A;Enum&#x7684;&#x5177;&#x4F53;&#x7C7B;&#x578B;&#x53C2;&#x6570; &#x624B;&#x518C;&#x7684;&#x4E00;&#x4E2A;&#x8BFB;&#x8005;&#x56F0;&#x60D1;&#x4E8E;&#x4E0A;&#x9762;&#x793A;&#x4F8B;&#x4E2D; Color &#x548C; Enum &#x7684;&#x533A;&#x522B;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x662F;&#x6CA1;&#x6709;&#x610F;&#x4E49;&#x7684;&#xFF0C;&#x53EA;&#x662F;&#x7528;&#x4E8E;&#x6F14;&#x793A;&#x76EE;&#x7684;&#x3002;&#x901A;&#x5E38;&#x6211;&#x4EEC;&#x4F1A;&#x5728;&#x8FD9;&#x91CC;&#x7701;&#x7565;&#x7C7B;&#x578B;&#xFF0C;&#x8BA9; &#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09; &#x6765;&#x5904;&#x7406;&#x5B83;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x63A8;&#x65AD;&#x7684;&#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x548C; Enum &#x4E0D;&#x540C;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x63A8;&#x65AD;&#x51FA;&#x4E00;&#x4E2A;&#x5C06;&#x679A;&#x4E3E;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570; &#x4F5C;&#x4E3A;&#x201C;&#x5B57;&#x6BB5;&#x201D;&#x7684;&#x4F2A;&#x7C7B;&#x578B;&#x3002;&#x81EA; Haxe3.2.0 &#x8D77;&#xFF0C;&#x5C31;&#x4E0D;&#x80FD;&#x5728;&#x8BED;&#x6CD5;&#x4E2D;&#x8868;&#x8FBE;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x800C;&#x4E14;&#x4E5F;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x8FD9;&#x4E48;&#x505A;&#x3002;"},"2.类型/2.3.类实例/2.3.类实例.html":{"title":"","path":"\\2.类型\\2.3.类实例\\2.3.类实例.html","body":"2.3.类实例 和许多面向对象语言类似，类是大多数 Haxe 程序中主要的数据结构。每个 Haxe 类都有一个确定的名字，一个隐含的路径和零或者多个类字段。这里我们将关注类的一般结构和它们的关系，而 类字段（第4章） 的细节部分在后面进行讲解。 如下代码示例作为本节剩余部分的基础： 1 2 3 4 5 6 7 8 9 10 11 class Point  var x : Int ; var y : Int ; public function new (x,y)  this .x = x; this .y = y;  public function toString ()  return \"Point(\" +x+ \",\" +y+ \")\" ;   从语义上讲，这个类表示二维空间内的一个点，但是这里它是什么并不重要。我们来描述一下这个结构： 关键字 class 表示我们定义一个类 Point 是类的名称，可以使用任何符合类型标识符规则的字符 包围在花括号 {} 中间的是类的字段 它由两个 Int 类型变量字段 x 和 y 组成 后面是一个特定的函数字段叫做 new ，它是类的构造函数 还有一个普通的函数 toString 在 Haxe 中有一个特殊类型，可以兼容所有的类： 类型 ：Class 这个类型可以兼容所有类型，也就是说，所有类（而不是它们的实例）可以被分配给它。在编译时， Class 是所有类的基础类型。然而，这个关系并不会反映在生成的代码中。当一个 API 需要的一个值是一个类而非某个特定的类型时，可以使用这个类型。这应用到 Haxe 反射API （第10.7节） 中的一些方法。"},"2.类型/2.3.类实例/2.3.类实例.html#2-3-类实例":{"title":"2.3.&#x7C7B;&#x5B9E;&#x4F8B;","path":"\\2.类型\\2.3.类实例\\2.3.类实例.html#2-3-类实例","body":"&#x548C;&#x8BB8;&#x591A;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x8BED;&#x8A00;&#x7C7B;&#x4F3C;&#xFF0C;&#x7C7B;&#x662F;&#x5927;&#x591A;&#x6570; Haxe &#x7A0B;&#x5E8F;&#x4E2D;&#x4E3B;&#x8981;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x3002;&#x6BCF;&#x4E2A; Haxe &#x7C7B;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x786E;&#x5B9A;&#x7684;&#x540D;&#x5B57;&#xFF0C;&#x4E00;&#x4E2A;&#x9690;&#x542B;&#x7684;&#x8DEF;&#x5F84;&#x548C;&#x96F6;&#x6216;&#x8005;&#x591A;&#x4E2A;&#x7C7B;&#x5B57;&#x6BB5;&#x3002;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x5C06;&#x5173;&#x6CE8;&#x7C7B;&#x7684;&#x4E00;&#x822C;&#x7ED3;&#x6784;&#x548C;&#x5B83;&#x4EEC;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x800C; &#x7C7B;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;4&#x7AE0;&#xFF09; &#x7684;&#x7EC6;&#x8282;&#x90E8;&#x5206;&#x5728;&#x540E;&#x9762;&#x8FDB;&#x884C;&#x8BB2;&#x89E3;&#x3002; &#x5982;&#x4E0B;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x4F5C;&#x4E3A;&#x672C;&#x8282;&#x5269;&#x4F59;&#x90E8;&#x5206;&#x7684;&#x57FA;&#x7840;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 class Point { var x : Int ; var y : Int ; public function new (x,y) { this .x = x; this .y = y; } public function toString () { return Point( +x+ , +y+ ) ; } } &#x4ECE;&#x8BED;&#x4E49;&#x4E0A;&#x8BB2;&#xFF0C;&#x8FD9;&#x4E2A;&#x7C7B;&#x8868;&#x793A;&#x4E8C;&#x7EF4;&#x7A7A;&#x95F4;&#x5185;&#x7684;&#x4E00;&#x4E2A;&#x70B9;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x5B83;&#x662F;&#x4EC0;&#x4E48;&#x5E76;&#x4E0D;&#x91CD;&#x8981;&#x3002;&#x6211;&#x4EEC;&#x6765;&#x63CF;&#x8FF0;&#x4E00;&#x4E0B;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#xFF1A; &#x5173;&#x952E;&#x5B57; class &#x8868;&#x793A;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x7C7B; Point &#x662F;&#x7C7B;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4EFB;&#x4F55;&#x7B26;&#x5408;&#x7C7B;&#x578B;&#x6807;&#x8BC6;&#x7B26;&#x89C4;&#x5219;&#x7684;&#x5B57;&#x7B26; &#x5305;&#x56F4;&#x5728;&#x82B1;&#x62EC;&#x53F7; {} &#x4E2D;&#x95F4;&#x7684;&#x662F;&#x7C7B;&#x7684;&#x5B57;&#x6BB5; &#x5B83;&#x7531;&#x4E24;&#x4E2A; Int &#x7C7B;&#x578B;&#x53D8;&#x91CF;&#x5B57;&#x6BB5; x &#x548C; y &#x7EC4;&#x6210; &#x540E;&#x9762;&#x662F;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x51FD;&#x6570;&#x5B57;&#x6BB5;&#x53EB;&#x505A; new &#xFF0C;&#x5B83;&#x662F;&#x7C7B;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570; &#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x666E;&#x901A;&#x7684;&#x51FD;&#x6570; toString &#x5728; Haxe &#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7C7B;&#x578B;&#xFF0C;&#x53EF;&#x4EE5;&#x517C;&#x5BB9;&#x6240;&#x6709;&#x7684;&#x7C7B;&#xFF1A; &#x7C7B;&#x578B; &#xFF1A;Class &#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x517C;&#x5BB9;&#x6240;&#x6709;&#x7C7B;&#x578B;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6240;&#x6709;&#x7C7B;&#xFF08;&#x800C;&#x4E0D;&#x662F;&#x5B83;&#x4EEC;&#x7684;&#x5B9E;&#x4F8B;&#xFF09;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x7ED9;&#x5B83;&#x3002;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#xFF0C; Class &#x662F;&#x6240;&#x6709;&#x7C7B;&#x7684;&#x57FA;&#x7840;&#x7C7B;&#x578B;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x4E2A;&#x5173;&#x7CFB;&#x5E76;&#x4E0D;&#x4F1A;&#x53CD;&#x6620;&#x5728;&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#x3002;&#x5F53;&#x4E00;&#x4E2A; API &#x9700;&#x8981;&#x7684;&#x4E00;&#x4E2A;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x7C7B;&#x800C;&#x975E;&#x67D0;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x5E94;&#x7528;&#x5230; Haxe &#x53CD;&#x5C04;API &#xFF08;&#x7B2C;10.7&#x8282;&#xFF09; &#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x65B9;&#x6CD5;&#x3002;"},"2.类型/2.4.枚举实例/2.4.枚举实例.html":{"title":"","path":"\\2.类型\\2.4.枚举实例\\2.4.枚举实例.html","body":"2.4.枚举实例 Haxe 提供了强大的枚举类型（简写：enum），它实际上是一个代数数据类型（ADT）。虽然它们不能有任何表达式，但用来描述数据结构是非常实用的： 1 2 3 4 5 6 enum Color  Red; Green; Blue; Rgb(r: Int , g: Int , b: Int );  从语义上看，这个 enum 描述了一个颜色，可能是红色，绿色，蓝色或者一个特定的 RGB 值。它的语法构成如下： 关键字 enum 表示我们要声明一个枚举 Color 是枚举类型的名称，可以是任何符合类型标识符规则的字符 闭合的花括号中间是枚举的构造函数 Red ， Green 和 Blue 不需要参数 而 Rgb 需要三个 Int 类型的参数，分别是 r ， g 和 b Haxe 类型系统提供一个和所有的枚举类型统一的类型： Enum 类型 ：Enum 这个类型可以兼容所有的枚举类型。在编译时， Enum 可以被看作枚举类型的通用基本类型。然而，这个关系不会反应在生成的代码中。"},"2.类型/2.4.枚举实例/2.4.枚举实例.html#2-4-枚举实例":{"title":"2.4.&#x679A;&#x4E3E;&#x5B9E;&#x4F8B;","path":"\\2.类型\\2.4.枚举实例\\2.4.枚举实例.html#2-4-枚举实例","body":"Haxe &#x63D0;&#x4F9B;&#x4E86;&#x5F3A;&#x5927;&#x7684;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#xFF08;&#x7B80;&#x5199;&#xFF1A;enum&#xFF09;&#xFF0C;&#x5B83;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E00;&#x4E2A;&#x4EE3;&#x6570;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF08;ADT&#xFF09;&#x3002;&#x867D;&#x7136;&#x5B83;&#x4EEC;&#x4E0D;&#x80FD;&#x6709;&#x4EFB;&#x4F55;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x4F46;&#x7528;&#x6765;&#x63CF;&#x8FF0;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x662F;&#x975E;&#x5E38;&#x5B9E;&#x7528;&#x7684;&#xFF1A; 1 2 3 4 5 6 enum Color { Red; Green; Blue; Rgb(r: Int , g: Int , b: Int ); } &#x4ECE;&#x8BED;&#x4E49;&#x4E0A;&#x770B;&#xFF0C;&#x8FD9;&#x4E2A; enum &#x63CF;&#x8FF0;&#x4E86;&#x4E00;&#x4E2A;&#x989C;&#x8272;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x7EA2;&#x8272;&#xFF0C;&#x7EFF;&#x8272;&#xFF0C;&#x84DD;&#x8272;&#x6216;&#x8005;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684; RGB &#x503C;&#x3002;&#x5B83;&#x7684;&#x8BED;&#x6CD5;&#x6784;&#x6210;&#x5982;&#x4E0B;&#xFF1A; &#x5173;&#x952E;&#x5B57; enum &#x8868;&#x793A;&#x6211;&#x4EEC;&#x8981;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x679A;&#x4E3E; Color &#x662F;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55;&#x7B26;&#x5408;&#x7C7B;&#x578B;&#x6807;&#x8BC6;&#x7B26;&#x89C4;&#x5219;&#x7684;&#x5B57;&#x7B26; &#x95ED;&#x5408;&#x7684;&#x82B1;&#x62EC;&#x53F7;&#x4E2D;&#x95F4;&#x662F;&#x679A;&#x4E3E;&#x7684;&#x6784;&#x9020;&#x51FD;&#x6570; Red &#xFF0C; Green &#x548C; Blue &#x4E0D;&#x9700;&#x8981;&#x53C2;&#x6570; &#x800C; Rgb &#x9700;&#x8981;&#x4E09;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5206;&#x522B;&#x662F; r &#xFF0C; g &#x548C; b Haxe &#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x548C;&#x6240;&#x6709;&#x7684;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x7684;&#x7C7B;&#x578B;&#xFF1A;"},"2.类型/2.4.枚举实例/2.4.枚举实例.html#Enum":{"title":"Enum","path":"\\2.类型\\2.4.枚举实例\\2.4.枚举实例.html#Enum","body":"&#x7C7B;&#x578B; &#xFF1A;Enum &#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x517C;&#x5BB9;&#x6240;&#x6709;&#x7684;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x3002;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#xFF0C; Enum &#x53EF;&#x4EE5;&#x88AB;&#x770B;&#x4F5C;&#x679A;&#x4E3E;&#x7C7B;&#x578B;&#x7684;&#x901A;&#x7528;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x4E2A;&#x5173;&#x7CFB;&#x4E0D;&#x4F1A;&#x53CD;&#x5E94;&#x5728;&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#x3002;"},"2.类型/2.2.为空性/2.2.为空性.html":{"title":"","path":"\\2.类型\\2.2.为空性\\2.2.为空性.html","body":"2.2.为空性 定义 ：可空 在 Haxe 中如果 null 对于一个类型是有效的值，则认为类型是可空的。 在编程语言中有一个单独、整洁的为空性定义非常常见。然而，Haxe 由于其目标语言的本身性质，需要在这个问题中找到一个妥协：因此目标语言中的一些被允许使用 null ；事实上，对任何东西默认都是 null ，其它不支持 null 的则使用某些类型。这使两种类型目标语言的区别是必要的： 定义 ：静态目标 静态目标在 null 不是一个有效的基本类型的值时，使用它们自己的类型系统。这在 Flash，C++，Java 和 C# 目标语言中是正确的。 定义 ：动态目标 动态目标的类型使用更为宽松，并允许基本类型使用 null 值。这应用于 JavaScript，PHP，Neko 和 Flash 6-8 目标语言中。 当在动态目标语言使用 null 时不需要担心；然而，静态目标中可能需要一些思考。首先，基本类型被初始化为它们的默认值。 定义 ：默认值 静态目标语言中，基本类型的默认值如下： Int —— 0 ； Float —— Flash 中为 NaN ，其它静态目标语言中为 0.0 ； Bool —— false 。 得出一个结论，Haxe 编译器不允许在静态目标语言上分配 null 到一个基本类型。为了实现它，基本类型必须被包装为 Null 。 1 2 3 4 // 静态目标平台报错 var a: Int = null ; // 允许的 var b: Null  Int  = null ; 同样，基本类型不能被跟 null 比较，除非包装它： 1 2 3 4 5 6 7 var a : Int = 0 ; // 静态目标平台报错 if ( a == null )  ...  var b : Null  Int  = 0 ; if ( b != null )  ...  // 允许的 这个限制延伸到所有 统一（第3.5节） 被执行的情况。 定义： NullT 在静态目标语言中，可以使用 NullInt 、 NullFloat 、和 NullBool 类型来允许 null 作为一个值。在动态目标语言，这样做没有影响。 NullT 也可以被用于其它类型用以表示 null 是一个允许的值。 如果一个 null 值被隐藏在 Null 或者 Dynamic 中 ，并被分配到一个基本类型，默认值将被使用： 1 2 3 4 var n : Null  Int  = null ; var a : Int = n; trace (n); // 输出 null trace (a); // 在静态目标平台输出 0"},"2.类型/2.2.为空性/2.2.为空性.html#2-2-为空性":{"title":"2.2.&#x4E3A;&#x7A7A;&#x6027;","path":"\\2.类型\\2.2.为空性\\2.2.为空性.html#2-2-为空性","body":"&#x5B9A;&#x4E49; &#xFF1A;&#x53EF;&#x7A7A; &#x5728; Haxe &#x4E2D;&#x5982;&#x679C; null &#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x662F;&#x6709;&#x6548;&#x7684;&#x503C;&#xFF0C;&#x5219;&#x8BA4;&#x4E3A;&#x7C7B;&#x578B;&#x662F;&#x53EF;&#x7A7A;&#x7684;&#x3002; &#x5728;&#x7F16;&#x7A0B;&#x8BED;&#x8A00;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x3001;&#x6574;&#x6D01;&#x7684;&#x4E3A;&#x7A7A;&#x6027;&#x5B9A;&#x4E49;&#x975E;&#x5E38;&#x5E38;&#x89C1;&#x3002;&#x7136;&#x800C;&#xFF0C;Haxe &#x7531;&#x4E8E;&#x5176;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x672C;&#x8EAB;&#x6027;&#x8D28;&#xFF0C;&#x9700;&#x8981;&#x5728;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x4E2D;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x59A5;&#x534F;&#xFF1A;&#x56E0;&#x6B64;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#x7684;&#x4E00;&#x4E9B;&#x88AB;&#x5141;&#x8BB8;&#x4F7F;&#x7528; null &#xFF1B;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x5BF9;&#x4EFB;&#x4F55;&#x4E1C;&#x897F;&#x9ED8;&#x8BA4;&#x90FD;&#x662F; null &#xFF0C;&#x5176;&#x5B83;&#x4E0D;&#x652F;&#x6301; null &#x7684;&#x5219;&#x4F7F;&#x7528;&#x67D0;&#x4E9B;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x4F7F;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x533A;&#x522B;&#x662F;&#x5FC5;&#x8981;&#x7684;&#xFF1A; &#x5B9A;&#x4E49; &#xFF1A;&#x9759;&#x6001;&#x76EE;&#x6807; &#x9759;&#x6001;&#x76EE;&#x6807;&#x5728; null &#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x6548;&#x7684;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x7684;&#x503C;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x81EA;&#x5DF1;&#x7684;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x3002;&#x8FD9;&#x5728; Flash&#xFF0C;C++&#xFF0C;Java &#x548C; C# &#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#x662F;&#x6B63;&#x786E;&#x7684;&#x3002; &#x5B9A;&#x4E49; &#xFF1A;&#x52A8;&#x6001;&#x76EE;&#x6807; &#x52A8;&#x6001;&#x76EE;&#x6807;&#x7684;&#x7C7B;&#x578B;&#x4F7F;&#x7528;&#x66F4;&#x4E3A;&#x5BBD;&#x677E;&#xFF0C;&#x5E76;&#x5141;&#x8BB8;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x4F7F;&#x7528; null &#x503C;&#x3002;&#x8FD9;&#x5E94;&#x7528;&#x4E8E; JavaScript&#xFF0C;PHP&#xFF0C;Neko &#x548C; Flash 6-8 &#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#x3002; &#x5F53;&#x5728;&#x52A8;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4F7F;&#x7528; null &#x65F6;&#x4E0D;&#x9700;&#x8981;&#x62C5;&#x5FC3;&#xFF1B;&#x7136;&#x800C;&#xFF0C;&#x9759;&#x6001;&#x76EE;&#x6807;&#x4E2D;&#x53EF;&#x80FD;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x601D;&#x8003;&#x3002;&#x9996;&#x5148;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x5B83;&#x4EEC;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x3002; &#x5B9A;&#x4E49; &#xFF1A;&#x9ED8;&#x8BA4;&#x503C; &#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x5982;&#x4E0B;&#xFF1A; Int &#x2014;&#x2014; 0 &#xFF1B; Float &#x2014;&#x2014; Flash &#x4E2D;&#x4E3A; NaN &#xFF0C;&#x5176;&#x5B83;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#x4E3A; 0.0 &#xFF1B; Bool &#x2014;&#x2014; false &#x3002; &#x5F97;&#x51FA;&#x4E00;&#x4E2A;&#x7ED3;&#x8BBA;&#xFF0C;Haxe &#x7F16;&#x8BD1;&#x5668;&#x4E0D;&#x5141;&#x8BB8;&#x5728;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E0A;&#x5206;&#x914D; null &#x5230;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x3002;&#x4E3A;&#x4E86;&#x5B9E;&#x73B0;&#x5B83;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x88AB;&#x5305;&#x88C5;&#x4E3A; Null &#x3002; 1 2 3 4 // &#x9759;&#x6001;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x62A5;&#x9519; var a: Int = null ; // &#x5141;&#x8BB8;&#x7684; var b: Null  Int  = null ; &#x540C;&#x6837;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x4E0D;&#x80FD;&#x88AB;&#x8DDF; null &#x6BD4;&#x8F83;&#xFF0C;&#x9664;&#x975E;&#x5305;&#x88C5;&#x5B83;&#xFF1A; 1 2 3 4 5 6 7 var a : Int = 0 ; // &#x9759;&#x6001;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x62A5;&#x9519; if ( a == null ) { ... } var b : Null  Int  = 0 ; if ( b != null ) { ... } // &#x5141;&#x8BB8;&#x7684; &#x8FD9;&#x4E2A;&#x9650;&#x5236;&#x5EF6;&#x4F38;&#x5230;&#x6240;&#x6709; &#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09; &#x88AB;&#x6267;&#x884C;&#x7684;&#x60C5;&#x51B5;&#x3002; &#x5B9A;&#x4E49;&#xFF1A; NullT &#x5728;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; NullInt &#x3001; NullFloat &#x3001;&#x548C; NullBool &#x7C7B;&#x578B;&#x6765;&#x5141;&#x8BB8; null &#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x503C;&#x3002;&#x5728;&#x52A8;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF0C;&#x8FD9;&#x6837;&#x505A;&#x6CA1;&#x6709;&#x5F71;&#x54CD;&#x3002; NullT &#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x4E8E;&#x5176;&#x5B83;&#x7C7B;&#x578B;&#x7528;&#x4EE5;&#x8868;&#x793A; null &#x662F;&#x4E00;&#x4E2A;&#x5141;&#x8BB8;&#x7684;&#x503C;&#x3002; &#x5982;&#x679C;&#x4E00;&#x4E2A; null &#x503C;&#x88AB;&#x9690;&#x85CF;&#x5728; Null &#x6216;&#x8005; Dynamic &#x4E2D; &#xFF0C;&#x5E76;&#x88AB;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x5C06;&#x88AB;&#x4F7F;&#x7528;&#xFF1A; 1 2 3 4 var n : Null  Int  = null ; var a : Int = n; trace (n); // &#x8F93;&#x51FA; null trace (a); // &#x5728;&#x9759;&#x6001;&#x76EE;&#x6807;&#x5E73;&#x53F0;&#x8F93;&#x51FA; 0"},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.1.结构值的JSON形式.html","body":"2.5.1.结构值的JSON形式 还可以为匿名结构使用 JavaScript 对象记法 ，为键使用使用字符串字面值： 1 var point =  \"x\" : 1 , \"y\" : -5 ; 虽然允许任意的字符串字面值，但如必须是有效的 Haxe 标识符（第5章） ，字段才会被认为是类型的一部分。否则，Haxe 的语法不会允许对该字段访问的表达式，并且必须通过使用 Reflect.field 和 Reflect.setField 来使用 反射（10.7） 。 It is also possible to use JavaScript Object Notation for structures by using string literals for the keys: 1 var point =  \"x\" : 1 , \"y\" : -5 ; While any string literal is allowed, the field is only considered part of the type if it is a valid Haxe identifier . Otherwise, Haxe syntax does not allow expressing access to such a field, and reflection has to be employed through the use of Reflect.field and Reflect.setField instead."},"2.类型/2.5.匿名结构/2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式":{"title":"2.5.1.&#x7ED3;&#x6784;&#x503C;&#x7684;JSON&#x5F62;&#x5F0F;","path":"\\2.类型\\2.5.匿名结构\\2.5.1.结构值的JSON形式.html#2-5-1-结构值的JSON形式","body":"&#x8FD8;&#x53EF;&#x4EE5;&#x4E3A;&#x533F;&#x540D;&#x7ED3;&#x6784;&#x4F7F;&#x7528; JavaScript &#x5BF9;&#x8C61;&#x8BB0;&#x6CD5; &#xFF0C;&#x4E3A;&#x952E;&#x4F7F;&#x7528;&#x4F7F;&#x7528;&#x5B57;&#x7B26;&#x4E32;&#x5B57;&#x9762;&#x503C;&#xFF1A; 1 var point = { x : 1 , y : -5 }; &#x867D;&#x7136;&#x5141;&#x8BB8;&#x4EFB;&#x610F;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5B57;&#x9762;&#x503C;&#xFF0C;&#x4F46;&#x5982;&#x5FC5;&#x987B;&#x662F;&#x6709;&#x6548;&#x7684; Haxe &#x6807;&#x8BC6;&#x7B26;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09; &#xFF0C;&#x5B57;&#x6BB5;&#x624D;&#x4F1A;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x7C7B;&#x578B;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x3002;&#x5426;&#x5219;&#xFF0C;Haxe &#x7684;&#x8BED;&#x6CD5;&#x4E0D;&#x4F1A;&#x5141;&#x8BB8;&#x5BF9;&#x8BE5;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x5E76;&#x4E14;&#x5FC5;&#x987B;&#x901A;&#x8FC7;&#x4F7F;&#x7528; Reflect.field &#x548C; Reflect.setField &#x6765;&#x4F7F;&#x7528; &#x53CD;&#x5C04;&#xFF08;10.7&#xFF09; &#x3002; It is also possible to use JavaScript Object Notation for structures by using string literals for the keys: 1 var point = { x : 1 , y : -5 }; While any string literal is allowed, the field is only considered part of the type if it is a valid Haxe identifier . Otherwise, Haxe syntax does not allow expressing access to such a field, and reflection has to be employed through the use of Reflect.field and Reflect.setField instead."},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.2.结构类型的类记法.html","body":"2.5.2. 结构类型的类记法 如果想要定义一个 结构类型 时，Haxe 允许使用在 类字段（第4章） 中所使用的语法来定义结构类型。下面的 typedef（第3.1节） 声明了一个 Point 类型，它包含了两个 Int 类型的 变量字段 x 和 y ： 1 2 3 4 typedef Point =  var x : Int ; var y : Int ;  2.4.2Class Notation for Structure Types When defining a structure type, Haxe allows the use of the same syntax described in Class Fields . The following typedef declares a Point type with variable fields x and y of type Int : 1 2 3 4 typedef Point =  var x : Int ; var y : Int ;  since Haxe 4.0.0 The fields of a structure may also be declared with final , which only allows them to be assigned once. Such a structure will only unify with other types if the corresponding fields are also final . 结构的字段也可以被修饰为 final ，这意味着这些字段只能被赋值一次。同时这类结构只能被统一为对应字段同样修饰为 final 的类型。"},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法":{"title":"2.5.2. &#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x7684;&#x7C7B;&#x8BB0;&#x6CD5;","path":"\\2.类型\\2.5.匿名结构\\2.5.2.结构类型的类记法.html#2-5-2-结构类型的类记法","body":"&#x5982;&#x679C;&#x60F3;&#x8981;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A; &#x7ED3;&#x6784;&#x7C7B;&#x578B; &#x65F6;&#xFF0C;Haxe &#x5141;&#x8BB8;&#x4F7F;&#x7528;&#x5728; &#x7C7B;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;4&#x7AE0;&#xFF09; &#x4E2D;&#x6240;&#x4F7F;&#x7528;&#x7684;&#x8BED;&#x6CD5;&#x6765;&#x5B9A;&#x4E49;&#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x3002;&#x4E0B;&#x9762;&#x7684; typedef&#xFF08;&#x7B2C;3.1&#x8282;&#xFF09; &#x58F0;&#x660E;&#x4E86;&#x4E00;&#x4E2A; Point &#x7C7B;&#x578B;&#xFF0C;&#x5B83;&#x5305;&#x542B;&#x4E86;&#x4E24;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684; &#x53D8;&#x91CF;&#x5B57;&#x6BB5; x &#x548C; y &#xFF1A; 1 2 3 4 typedef Point = { var x : Int ; var y : Int ; } 2.4.2Class Notation for Structure Types When defining a structure type, Haxe allows the use of the same syntax described in Class Fields . The following typedef declares a Point type with variable fields x and y of type Int : 1 2 3 4 typedef Point = { var x : Int ; var y : Int ; } since Haxe 4.0.0 The fields of a structure may also be declared with final , which only allows them to be assigned once. Such a structure will only unify with other types if the corresponding fields are also final . &#x7ED3;&#x6784;&#x7684;&#x5B57;&#x6BB5;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x4FEE;&#x9970;&#x4E3A; final &#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x8FD9;&#x4E9B;&#x5B57;&#x6BB5;&#x53EA;&#x80FD;&#x88AB;&#x8D4B;&#x503C;&#x4E00;&#x6B21;&#x3002;&#x540C;&#x65F6;&#x8FD9;&#x7C7B;&#x7ED3;&#x6784;&#x53EA;&#x80FD;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x5BF9;&#x5E94;&#x5B57;&#x6BB5;&#x540C;&#x6837;&#x4FEE;&#x9970;&#x4E3A; final &#x7684;&#x7C7B;&#x578B;&#x3002;"},"2.类型/2.5.匿名结构/2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types":{"title":"2.4.2Class Notation for Structure Types","path":"\\2.类型\\2.5.匿名结构\\2.5.2.结构类型的类记法.html#2-4-2Class-Notation-for-Structure-Types","body":"When defining a structure type, Haxe allows the use of the same syntax described in Class Fields . The following typedef declares a Point type with variable fields x and y of type Int : 1 2 3 4 typedef Point = { var x : Int ; var y : Int ; } since Haxe 4.0.0 The fields of a structure may also be declared with final , which only allows them to be assigned once. Such a structure will only unify with other types if the corresponding fields are also final . &#x7ED3;&#x6784;&#x7684;&#x5B57;&#x6BB5;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x4FEE;&#x9970;&#x4E3A; final &#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x8FD9;&#x4E9B;&#x5B57;&#x6BB5;&#x53EA;&#x80FD;&#x88AB;&#x8D4B;&#x503C;&#x4E00;&#x6B21;&#x3002;&#x540C;&#x65F6;&#x8FD9;&#x7C7B;&#x7ED3;&#x6784;&#x53EA;&#x80FD;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x5BF9;&#x5E94;&#x5B57;&#x6BB5;&#x540C;&#x6837;&#x4FEE;&#x9970;&#x4E3A; final &#x7684;&#x7C7B;&#x578B;&#x3002;"},"2.类型/2.5.匿名结构/2.5.3.可选字段.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.3.可选字段.html","body":"2.5.3 Optional Fields 结构类型的字段可以被修饰为可选的。在标准形式的声明下，通过位于字段名称前放置一个问号 ? 进行修饰。 Fields of a structure type can be made optional. In the standard notation, this is achieved by prefixing the field name with a question mark ? : 1 2 3 4 5 typedef User =  age : Int , name : String , ?phoneNumber : String  在类记法（Class Notation) 形式的声明下，则可以使用 @:optional 元数据来修饰可选字段 In class notation, the @:optional metadata can be used instead: 1 2 3 4 5 typedef User =  var age : Int ; var name : String ; @:optional var phoneNumber : String;  从 Haxe 4.0 开始，允许在类记法的结构声明中使用问号 ? 修饰可选字段： 1 2 3 4 5 typedef User =  var age : Int ; var name : String ; var ?phoneNumber : String ; "},"2.类型/2.5.匿名结构/2.5.3.可选字段.html#2-5-3-Optional-Fields":{"title":"2.5.3 Optional Fields","path":"\\2.类型\\2.5.匿名结构\\2.5.3.可选字段.html#2-5-3-Optional-Fields","body":"&#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x53EF;&#x4EE5;&#x88AB;&#x4FEE;&#x9970;&#x4E3A;&#x53EF;&#x9009;&#x7684;&#x3002;&#x5728;&#x6807;&#x51C6;&#x5F62;&#x5F0F;&#x7684;&#x58F0;&#x660E;&#x4E0B;&#xFF0C;&#x901A;&#x8FC7;&#x4F4D;&#x4E8E;&#x5B57;&#x6BB5;&#x540D;&#x79F0;&#x524D;&#x653E;&#x7F6E;&#x4E00;&#x4E2A;&#x95EE;&#x53F7; ? &#x8FDB;&#x884C;&#x4FEE;&#x9970;&#x3002; Fields of a structure type can be made optional. In the standard notation, this is achieved by prefixing the field name with a question mark ? : 1 2 3 4 5 typedef User = { age : Int , name : String , ?phoneNumber : String } &#x5728;&#x7C7B;&#x8BB0;&#x6CD5;&#xFF08;Class Notation) &#x5F62;&#x5F0F;&#x7684;&#x58F0;&#x660E;&#x4E0B;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; @:optional &#x5143;&#x6570;&#x636E;&#x6765;&#x4FEE;&#x9970;&#x53EF;&#x9009;&#x5B57;&#x6BB5; In class notation, the @:optional metadata can be used instead: 1 2 3 4 5 typedef User = { var age : Int ; var name : String ; @:optional var phoneNumber : String; } &#x4ECE; Haxe 4.0 &#x5F00;&#x59CB;&#xFF0C;&#x5141;&#x8BB8;&#x5728;&#x7C7B;&#x8BB0;&#x6CD5;&#x7684;&#x7ED3;&#x6784;&#x58F0;&#x660E;&#x4E2D;&#x4F7F;&#x7528;&#x95EE;&#x53F7; ? &#x4FEE;&#x9970;&#x53EF;&#x9009;&#x5B57;&#x6BB5;&#xFF1A; 1 2 3 4 5 typedef User = { var age : Int ; var name : String ; var ?phoneNumber : String ; }"},"2.类型/2.5.匿名结构/2.5.5.扩展.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.5.扩展.html","body":"2.5.5.扩展 扩展被用于表示该结构具有某个给定类型的所有字段外，还具有一些额外的字段： Extensions are used to express that a structure has all the fields of a given type as well as some additional fields of its own: 1 2 3 4 5 6 7 8 9 10 11 12 typedef IterableWithLengthT =   IterableT, // read only property var length( default , null ): Int ;  class Main  static public function main ()  var array = [ 1 , 2 , 3 ]; var t: IterableWithLength  Int  = array;   大于操作符  被用于表示创建一个 IterableT 的扩展。然后补充额外的类字段，此例中，需要一个 Int 类型的 只读 属性 length 。 The greater-than operator  denotes that an extension of IterableT is being created, with the additional class fields following. In this case, a read-only property length of type Int is required. 为了能与 IterableWithLengthT 兼容，一个类必须能够与 IterableT 兼容的同时提供一个 只读 的 Int 类型属性 length 。以上例子中赋值了一个 Array ，其刚好满足这两点要求。 In order to be compatible with IterableWithLengthT , a type must be compatible with IterableT and provide a read-only length property of type Int . The previous example assigns an Array , which happens to fulfill these requirements. since Haxe 3.1.0 多个结构可以被同时扩展： Multiple structures can be extended at once: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 typedef WithLength =  var length( default , null ): Int ;  typedef IterableWithLengthAndPushT =   IterableT,  WithLength, function push (a: T ): Int ;  class Main  static public function main ()  var array = [ 1 , 2 , 3 ]; var t: IterableWithLengthAndPush  Int  = array;   since Haxe 4.0.0 有一个额外的记法可以被用于扩展，通过以 &amp; 符号分格每一个欲扩展的结构来表示。 An alternative notation for extension can be used, denoted by separating each extended structure with an &amp; symbol. 1 2 3 4 5 6 7 8 9 10 11 12 typedef Point2D =  var x: Int ; var y: Int ;  typedef Point3D = Point2D &amp; z: Int ; class Main  static public function main ()  var point: Point3D = x: 5 , y: 3 , z: 1 ;   补充另一例子： 1 2 3 4 5 6 7 8 9 10 11 typedef IterableWithLengthAndPushT =   IterableT,  WithLength, function push (a: T ): Int ;  //可以改写为： typedef IterableWithLengthAndPushT = IterableT &amp; WithLength &amp;  function push (a: T ): Int ; "},"2.类型/2.5.匿名结构/2.5.5.扩展.html#2-5-5-扩展":{"title":"2.5.5.&#x6269;&#x5C55;","path":"\\2.类型\\2.5.匿名结构\\2.5.5.扩展.html#2-5-5-扩展","body":"&#x6269;&#x5C55;&#x88AB;&#x7528;&#x4E8E;&#x8868;&#x793A;&#x8BE5;&#x7ED3;&#x6784;&#x5177;&#x6709;&#x67D0;&#x4E2A;&#x7ED9;&#x5B9A;&#x7C7B;&#x578B;&#x7684;&#x6240;&#x6709;&#x5B57;&#x6BB5;&#x5916;&#xFF0C;&#x8FD8;&#x5177;&#x6709;&#x4E00;&#x4E9B;&#x989D;&#x5916;&#x7684;&#x5B57;&#x6BB5;&#xFF1A; Extensions are used to express that a structure has all the fields of a given type as well as some additional fields of its own: 1 2 3 4 5 6 7 8 9 10 11 12 typedef IterableWithLengthT = {  IterableT, // read only property var length( default , null ): Int ; } class Main { static public function main () { var array = [ 1 , 2 , 3 ]; var t: IterableWithLength  Int  = array; } } &#x5927;&#x4E8E;&#x64CD;&#x4F5C;&#x7B26;  &#x88AB;&#x7528;&#x4E8E;&#x8868;&#x793A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A; IterableT &#x7684;&#x6269;&#x5C55;&#x3002;&#x7136;&#x540E;&#x8865;&#x5145;&#x989D;&#x5916;&#x7684;&#x7C7B;&#x5B57;&#x6BB5;&#xFF0C;&#x6B64;&#x4F8B;&#x4E2D;&#xFF0C;&#x9700;&#x8981;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684; &#x53EA;&#x8BFB; &#x5C5E;&#x6027; length &#x3002; The greater-than operator  denotes that an extension of IterableT is being created, with the additional class fields following. In this case, a read-only property length of type Int is required. &#x4E3A;&#x4E86;&#x80FD;&#x4E0E; IterableWithLengthT &#x517C;&#x5BB9;&#xFF0C;&#x4E00;&#x4E2A;&#x7C7B;&#x5FC5;&#x987B;&#x80FD;&#x591F;&#x4E0E; IterableT &#x517C;&#x5BB9;&#x7684;&#x540C;&#x65F6;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A; &#x53EA;&#x8BFB; &#x7684; Int &#x7C7B;&#x578B;&#x5C5E;&#x6027; length &#x3002;&#x4EE5;&#x4E0A;&#x4F8B;&#x5B50;&#x4E2D;&#x8D4B;&#x503C;&#x4E86;&#x4E00;&#x4E2A; Array &#xFF0C;&#x5176;&#x521A;&#x597D;&#x6EE1;&#x8DB3;&#x8FD9;&#x4E24;&#x70B9;&#x8981;&#x6C42;&#x3002; In order to be compatible with IterableWithLengthT , a type must be compatible with IterableT and provide a read-only length property of type Int . The previous example assigns an Array , which happens to fulfill these requirements. since Haxe 3.1.0 &#x591A;&#x4E2A;&#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x88AB;&#x540C;&#x65F6;&#x6269;&#x5C55;&#xFF1A; Multiple structures can be extended at once: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 typedef WithLength = { var length( default , null ): Int ; } typedef IterableWithLengthAndPushT = {  IterableT,  WithLength, function push (a: T ): Int ; } class Main { static public function main () { var array = [ 1 , 2 , 3 ]; var t: IterableWithLengthAndPush  Int  = array; } } since Haxe 4.0.0 &#x6709;&#x4E00;&#x4E2A;&#x989D;&#x5916;&#x7684;&#x8BB0;&#x6CD5;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x4E8E;&#x6269;&#x5C55;&#xFF0C;&#x901A;&#x8FC7;&#x4EE5; &amp; &#x7B26;&#x53F7;&#x5206;&#x683C;&#x6BCF;&#x4E00;&#x4E2A;&#x6B32;&#x6269;&#x5C55;&#x7684;&#x7ED3;&#x6784;&#x6765;&#x8868;&#x793A;&#x3002; An alternative notation for extension can be used, denoted by separating each extended structure with an &amp; symbol. 1 2 3 4 5 6 7 8 9 10 11 12 typedef Point2D = { var x: Int ; var y: Int ; } typedef Point3D = Point2D &amp; {z: Int }; class Main { static public function main () { var point: Point3D = {x: 5 , y: 3 , z: 1 }; } } &#x8865;&#x5145;&#x53E6;&#x4E00;&#x4F8B;&#x5B50;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 typedef IterableWithLengthAndPushT = {  IterableT,  WithLength, function push (a: T ): Int ; } //&#x53EF;&#x4EE5;&#x6539;&#x5199;&#x4E3A;&#xFF1A; typedef IterableWithLengthAndPushT = IterableT &amp; WithLength &amp; { function push (a: T ): Int ; }"},"2.类型/2.5.匿名结构/2.5.4.性能影响.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.4.性能影响.html","body":"2.5.4.性能影响 通过扩展、 结构子类型化（第3.5.2） 使用匿名结构，在编译为 动态类型目标语言（第2.2节） 时不会对性能产生影响。然而，对于 静态类型目标语言（第2.2节） 来说，必须执行一个动态的查找，这通常会慢于对静态字段的访问。"},"2.类型/2.5.匿名结构/2.5.4.性能影响.html#2-5-4-性能影响":{"title":"2.5.4.&#x6027;&#x80FD;&#x5F71;&#x54CD;","path":"\\2.类型\\2.5.匿名结构\\2.5.4.性能影响.html#2-5-4-性能影响","body":"&#x901A;&#x8FC7;&#x6269;&#x5C55;&#x3001; &#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316;&#xFF08;&#x7B2C;3.5.2&#xFF09; &#x4F7F;&#x7528;&#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF0C;&#x5728;&#x7F16;&#x8BD1;&#x4E3A; &#x52A8;&#x6001;&#x7C7B;&#x578B;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09; &#x65F6;&#x4E0D;&#x4F1A;&#x5BF9;&#x6027;&#x80FD;&#x4EA7;&#x751F;&#x5F71;&#x54CD;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x5BF9;&#x4E8E; &#x9759;&#x6001;&#x7C7B;&#x578B;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09; &#x6765;&#x8BF4;&#xFF0C;&#x5FC5;&#x987B;&#x6267;&#x884C;&#x4E00;&#x4E2A;&#x52A8;&#x6001;&#x7684;&#x67E5;&#x627E;&#xFF0C;&#x8FD9;&#x901A;&#x5E38;&#x4F1A;&#x6162;&#x4E8E;&#x5BF9;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x7684;&#x8BBF;&#x95EE;&#x3002;"},"2.类型/2.5.匿名结构/2.5.匿名结构.html":{"title":"","path":"\\2.类型\\2.5.匿名结构\\2.5.匿名结构.html","body":"2.5.匿名结构 匿名结构可以用来组织数据，而不用显式地创建一个类型。下面的示例创建了一个结构，包含两个字段 x 和 name ，并分别初始化它们的值为 12 和 “ foo ”： 1 2 3 4 5 class Main  static public function main ()  var myStructure =  x: 12 , name: \"foo \";   一般语法规则如下： 一个包括在花括号 {} 内的结构 一个使用逗号 , 分隔的键值对列表 冒号 : 用来分隔的键和值，键名必须是一个有效的 标识符（第5章） 值可以是任何 Haxe 表达式 规则 4 意味着结构可以被嵌套和混合，如： 1 2 3 4 5 6 7 8 var user =  name : \"Nicolas \", age : 32, pos : [//这是一个数组  x : 0, y : 0 , //这是一个匿名结构  x : 1, y : -1 //这也是一个匿名结构 ], ; 匿名结构的字段像类一样可以通过点号操作符 . 访问，如下： 1 2 3 4 // 获取键 name 的值，即 \"Nicolas\" user.name; // 设置 键 age 的值为 33 user.age = 33 ; 值得注意的是，使用匿名结构不会破坏类型系统。编译器确保只能访问可用的字段，也就是说，如下的程序不会编译： 1 2 3 4 5 6 7 class Test  static public function main ()  var point =  x: 0 . 0 , y: 12 . 0 ; //  y : Float, x : Float  没有字段 z point.z;   错误信息表明编译器了解 point 的类型：它是一个包含了两个 Float 类型 x 和 y 字段的匿名结构。由于它没有字段 z ，访问失败。 point 的类型通过 类型推断（第3.6节） 被得知，这使得我们不需要为局部变量使用显式的类型声明。但是，如果 point 是一个字段，那么它必须通过如下形式进行声明： 1 2 3 4 5 class Path  var start :  x : Int , y : Int ; var target :  x : Int , y : Int ; var current :  x : Int , y : Int ;  为了避免这种冗余的类型声明形式，尤其是对于更复杂的结构，建议使用一个 typedef（第3.1节） 关键字： 1 2 3 4 5 6 7 typedef Point =  x : Int , y : Int  class Path  var start : Point ; var target : Point ; var current : Point ; "},"2.类型/2.5.匿名结构/2.5.匿名结构.html#2-5-匿名结构":{"title":"2.5.&#x533F;&#x540D;&#x7ED3;&#x6784;","path":"\\2.类型\\2.5.匿名结构\\2.5.匿名结构.html#2-5-匿名结构","body":"&#x533F;&#x540D;&#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x7EC4;&#x7EC7;&#x6570;&#x636E;&#xFF0C;&#x800C;&#x4E0D;&#x7528;&#x663E;&#x5F0F;&#x5730;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x4E0B;&#x9762;&#x7684;&#x793A;&#x4F8B;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#xFF0C;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x5B57;&#x6BB5; x &#x548C; name &#xFF0C;&#x5E76;&#x5206;&#x522B;&#x521D;&#x59CB;&#x5316;&#x5B83;&#x4EEC;&#x7684;&#x503C;&#x4E3A; 12 &#x548C; &#x201C; foo &#x201D;&#xFF1A; 1 2 3 4 5 class Main { static public function main () { var myStructure = { x: 12 , name: foo }; } } &#x4E00;&#x822C;&#x8BED;&#x6CD5;&#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A; &#x4E00;&#x4E2A;&#x5305;&#x62EC;&#x5728;&#x82B1;&#x62EC;&#x53F7; {} &#x5185;&#x7684;&#x7ED3;&#x6784; &#x4E00;&#x4E2A;&#x4F7F;&#x7528;&#x9017;&#x53F7; , &#x5206;&#x9694;&#x7684;&#x952E;&#x503C;&#x5BF9;&#x5217;&#x8868; &#x5192;&#x53F7; : &#x7528;&#x6765;&#x5206;&#x9694;&#x7684;&#x952E;&#x548C;&#x503C;&#xFF0C;&#x952E;&#x540D;&#x5FC5;&#x987B;&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x6548;&#x7684; &#x6807;&#x8BC6;&#x7B26;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09; &#x503C;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55; Haxe &#x8868;&#x8FBE;&#x5F0F; &#x89C4;&#x5219; 4 &#x610F;&#x5473;&#x7740;&#x7ED3;&#x6784;&#x53EF;&#x4EE5;&#x88AB;&#x5D4C;&#x5957;&#x548C;&#x6DF7;&#x5408;&#xFF0C;&#x5982;&#xFF1A; 1 2 3 4 5 6 7 8 var user = { name : Nicolas , age : 32, pos : [//&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x6570;&#x7EC4; { x : 0, y : 0 }, //&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x7ED3;&#x6784; { x : 1, y : -1 }//&#x8FD9;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x533F;&#x540D;&#x7ED3;&#x6784; ], }; &#x533F;&#x540D;&#x7ED3;&#x6784;&#x7684;&#x5B57;&#x6BB5;&#x50CF;&#x7C7B;&#x4E00;&#x6837;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x70B9;&#x53F7;&#x64CD;&#x4F5C;&#x7B26; . &#x8BBF;&#x95EE;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A; 1 2 3 4 // &#x83B7;&#x53D6;&#x952E; name &#x7684;&#x503C;&#xFF0C;&#x5373; Nicolas user.name; // &#x8BBE;&#x7F6E; &#x952E; age &#x7684;&#x503C;&#x4E3A; 33 user.age = 33 ; &#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;&#x4F7F;&#x7528;&#x533F;&#x540D;&#x7ED3;&#x6784;&#x4E0D;&#x4F1A;&#x7834;&#x574F;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x786E;&#x4FDD;&#x53EA;&#x80FD;&#x8BBF;&#x95EE;&#x53EF;&#x7528;&#x7684;&#x5B57;&#x6BB5;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x4E0B;&#x7684;&#x7A0B;&#x5E8F;&#x4E0D;&#x4F1A;&#x7F16;&#x8BD1;&#xFF1A; 1 2 3 4 5 6 7 class Test { static public function main () { var point = { x: 0 . 0 , y: 12 . 0 }; // { y : Float, x : Float } &#x6CA1;&#x6709;&#x5B57;&#x6BB5; z point.z; } } &#x9519;&#x8BEF;&#x4FE1;&#x606F;&#x8868;&#x660E;&#x7F16;&#x8BD1;&#x5668;&#x4E86;&#x89E3; point &#x7684;&#x7C7B;&#x578B;&#xFF1A;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x5305;&#x542B;&#x4E86;&#x4E24;&#x4E2A; Float &#x7C7B;&#x578B; x &#x548C; y &#x5B57;&#x6BB5;&#x7684;&#x533F;&#x540D;&#x7ED3;&#x6784;&#x3002;&#x7531;&#x4E8E;&#x5B83;&#x6CA1;&#x6709;&#x5B57;&#x6BB5; z &#xFF0C;&#x8BBF;&#x95EE;&#x5931;&#x8D25;&#x3002; point &#x7684;&#x7C7B;&#x578B;&#x901A;&#x8FC7; &#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09; &#x88AB;&#x5F97;&#x77E5;&#xFF0C;&#x8FD9;&#x4F7F;&#x5F97;&#x6211;&#x4EEC;&#x4E0D;&#x9700;&#x8981;&#x4E3A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x4F7F;&#x7528;&#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x58F0;&#x660E;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x5982;&#x679C; point &#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x5FC5;&#x987B;&#x901A;&#x8FC7;&#x5982;&#x4E0B;&#x5F62;&#x5F0F;&#x8FDB;&#x884C;&#x58F0;&#x660E;&#xFF1A; 1 2 3 4 5 class Path { var start : { x : Int , y : Int }; var target : { x : Int , y : Int }; var current : { x : Int , y : Int }; } &#x4E3A;&#x4E86;&#x907F;&#x514D;&#x8FD9;&#x79CD;&#x5197;&#x4F59;&#x7684;&#x7C7B;&#x578B;&#x58F0;&#x660E;&#x5F62;&#x5F0F;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5BF9;&#x4E8E;&#x66F4;&#x590D;&#x6742;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;&#x4E00;&#x4E2A; typedef&#xFF08;&#x7B2C;3.1&#x8282;&#xFF09; &#x5173;&#x952E;&#x5B57;&#xFF1A; 1 2 3 4 5 6 7 typedef Point = { x : Int , y : Int } class Path { var start : Point ; var target : Point ; var current : Point ; }"},"2.类型/2.6.函数类型/2.6.2.默认值.html":{"title":"","path":"\\2.类型\\2.6.函数类型\\2.6.2.默认值.html","body":"2.6.2.默认值 Haxe 允许通过分配一个常量值来为参数提供默认值，： 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main  static public function main ()  // ?i : Int - ?s : String - String $type(test); trace (test()); // i: 12, s: bar trace (test( 1 )); // i: 1, s: bar trace (test( 1 , \"foo\" )); // i: 1, s: foo trace (test( \"foo\" )); // i: 12, s: foo  static function test (?i = 12 , s = \"bar\" )  return \"i: \" +i + \", s: \" +s;   这个示例和前面 可选参数（第2.6.1节） 中的非常相似，唯一的区别是函数的参数 i 和 s 被赋值为 12 和 “ bar ”。效果是，默认值取代 null 被使用，可以在调用时省略某个参数。Haxe 中的默认值并不是类型的一部分，而且不能在调用时更改函数的默认值（意指只应用于当次调用，而不会改变函数的默认值定义。除非函数是 内联（第4.4.2节） 的，被认为是一个比较典型的处理）。在一些目标语言中，编译器可能仍然传递 null 作为省略的参数值，生成类似于这样的代码到函数中： 1 2 3 4 5 static function test (i = 12 , s = \"bar\" )  if (i == null ) i = 12 ; if (s == null ) s = \"bar\" ; return \"i: \" +i + \", s: \" +s;  在一个不使用默认值可能有时更可行的方案的性能关键代码中，这应该被考虑。"},"2.类型/2.6.函数类型/2.6.2.默认值.html#2-6-2-默认值":{"title":"2.6.2.&#x9ED8;&#x8BA4;&#x503C;","path":"\\2.类型\\2.6.函数类型\\2.6.2.默认值.html#2-6-2-默认值","body":"Haxe &#x5141;&#x8BB8;&#x901A;&#x8FC7;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x5E38;&#x91CF;&#x503C;&#x6765;&#x4E3A;&#x53C2;&#x6570;&#x63D0;&#x4F9B;&#x9ED8;&#x8BA4;&#x503C;&#xFF0C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main { static public function main () { // ?i : Int - ?s : String - String $type(test); trace (test()); // i: 12, s: bar trace (test( 1 )); // i: 1, s: bar trace (test( 1 , foo )); // i: 1, s: foo trace (test( foo )); // i: 12, s: foo } static function test (?i = 12 , s = bar ) { return i:  +i + , s:  +s; } } &#x8FD9;&#x4E2A;&#x793A;&#x4F8B;&#x548C;&#x524D;&#x9762; &#x53EF;&#x9009;&#x53C2;&#x6570;&#xFF08;&#x7B2C;2.6.1&#x8282;&#xFF09; &#x4E2D;&#x7684;&#x975E;&#x5E38;&#x76F8;&#x4F3C;&#xFF0C;&#x552F;&#x4E00;&#x7684;&#x533A;&#x522B;&#x662F;&#x51FD;&#x6570;&#x7684;&#x53C2;&#x6570; i &#x548C; s &#x88AB;&#x8D4B;&#x503C;&#x4E3A; 12 &#x548C; &#x201C; bar &#x201D;&#x3002;&#x6548;&#x679C;&#x662F;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x53D6;&#x4EE3; null &#x88AB;&#x4F7F;&#x7528;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x8C03;&#x7528;&#x65F6;&#x7701;&#x7565;&#x67D0;&#x4E2A;&#x53C2;&#x6570;&#x3002;Haxe &#x4E2D;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x5E76;&#x4E0D;&#x662F;&#x7C7B;&#x578B;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x800C;&#x4E14;&#x4E0D;&#x80FD;&#x5728;&#x8C03;&#x7528;&#x65F6;&#x66F4;&#x6539;&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#xFF08;&#x610F;&#x6307;&#x53EA;&#x5E94;&#x7528;&#x4E8E;&#x5F53;&#x6B21;&#x8C03;&#x7528;&#xFF0C;&#x800C;&#x4E0D;&#x4F1A;&#x6539;&#x53D8;&#x51FD;&#x6570;&#x7684;&#x9ED8;&#x8BA4;&#x503C;&#x5B9A;&#x4E49;&#x3002;&#x9664;&#x975E;&#x51FD;&#x6570;&#x662F; &#x5185;&#x8054;&#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09; &#x7684;&#xFF0C;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x4E00;&#x4E2A;&#x6BD4;&#x8F83;&#x5178;&#x578B;&#x7684;&#x5904;&#x7406;&#xFF09;&#x3002;&#x5728;&#x4E00;&#x4E9B;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x4E2D;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x53EF;&#x80FD;&#x4ECD;&#x7136;&#x4F20;&#x9012; null &#x4F5C;&#x4E3A;&#x7701;&#x7565;&#x7684;&#x53C2;&#x6570;&#x503C;&#xFF0C;&#x751F;&#x6210;&#x7C7B;&#x4F3C;&#x4E8E;&#x8FD9;&#x6837;&#x7684;&#x4EE3;&#x7801;&#x5230;&#x51FD;&#x6570;&#x4E2D;&#xFF1A; 1 2 3 4 5 static function test (i = 12 , s = bar ) { if (i == null ) i = 12 ; if (s == null ) s = bar ; return i:  +i + , s:  +s; } &#x5728;&#x4E00;&#x4E2A;&#x4E0D;&#x4F7F;&#x7528;&#x9ED8;&#x8BA4;&#x503C;&#x53EF;&#x80FD;&#x6709;&#x65F6;&#x66F4;&#x53EF;&#x884C;&#x7684;&#x65B9;&#x6848;&#x7684;&#x6027;&#x80FD;&#x5173;&#x952E;&#x4EE3;&#x7801;&#x4E2D;&#xFF0C;&#x8FD9;&#x5E94;&#x8BE5;&#x88AB;&#x8003;&#x8651;&#x3002;"},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html":{"title":"","path":"\\2.类型\\2.7.动态类型\\2.7.1.Dynamic使用类型参数.html","body":"2.7.1.Dynamic使用类型参数 Dynamic 是一个特殊的类型，因为它允许使用和不使用一个 类型参数（第3.2节） 来进行显式的声明。如果这样一个类型参数被提供， Dynamic（第2.7节） 中描述的 语义被限制为所有的字段兼容该参数类型： 1 2 3 4 5 6 7 var att : Dynamic  String  = xml.attributes; // 有效, 值为一个 String 类型 att.name = \"Nicolas\" ; // dito (这个文档太旧了) att.age = \"26\" ; // error,值不是 String 类型 att.income = 0 ;"},"2.类型/2.7.动态类型/2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数":{"title":"2.7.1.Dynamic&#x4F7F;&#x7528;&#x7C7B;&#x578B;&#x53C2;&#x6570;","path":"\\2.类型\\2.7.动态类型\\2.7.1.Dynamic使用类型参数.html#2-7-1-Dynamic使用类型参数","body":"Dynamic &#x662F;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x5141;&#x8BB8;&#x4F7F;&#x7528;&#x548C;&#x4E0D;&#x4F7F;&#x7528;&#x4E00;&#x4E2A; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09; &#x6765;&#x8FDB;&#x884C;&#x663E;&#x5F0F;&#x7684;&#x58F0;&#x660E;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x88AB;&#x63D0;&#x4F9B;&#xFF0C; Dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09; &#x4E2D;&#x63CF;&#x8FF0;&#x7684; &#x8BED;&#x4E49;&#x88AB;&#x9650;&#x5236;&#x4E3A;&#x6240;&#x6709;&#x7684;&#x5B57;&#x6BB5;&#x517C;&#x5BB9;&#x8BE5;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#xFF1A; 1 2 3 4 5 6 7 var att : Dynamic  String  = xml.attributes; // &#x6709;&#x6548;, &#x503C;&#x4E3A;&#x4E00;&#x4E2A; String &#x7C7B;&#x578B; att.name = Nicolas ; // dito (&#x8FD9;&#x4E2A;&#x6587;&#x6863;&#x592A;&#x65E7;&#x4E86;) att.age = 26 ; // error,&#x503C;&#x4E0D;&#x662F; String &#x7C7B;&#x578B; att.income = 0 ;"},"2.类型/2.6.函数类型/2.6.1.可选参数.html":{"title":"","path":"\\2.类型\\2.6.函数类型\\2.6.1.可选参数.html","body":"2.6.1.可选参数 可选参数通过在参数标识符前面前置一个问号 ? 来声明： 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main  static public function main ()  // ?i : Int - ?s : String - String $type(test); trace (test()); // i: null, s: null trace (test( 1 )); // i: 1, s: null trace (test( 1 , \"foo\" )); // i: 1, s: foo trace (test( \"foo\" )); // i: null, s: foo  static function test (?i: Int , ?s: String )  return \"i: \" +i + \", s: \" +s;   函数 test 有两个可选参数：Int 类型的 i 和 String 类型的 s 。这在第3行的函数类型输出直接反映出来。这个例子程序调用了4次 test ，并打印出它的返回值： 第一次调用不带任何参数 第二次调用带有一个单独的参数 1 第三次调用带了两个参数 1 和 “ foo “ 第四次调用只有单独的参数 “ foo ” 输出内容显示，函数调用中被省略的可选参数的值为 null 。这意味着这些参数的类型必须认可 null 作为值，这是在 为空性（第2.2节） 中讨论的问题。 当编译到一个 静态语言目标（第2.2节） 时，Haxe 编译器通过推断它们的类型为 Null 确保可选的基本类型的参数是可空的。前三个调用非常直观，第四个可能是一个惊喜：如果提供的值可以分配到一个之后的参数，确实允许跳过可选参数。"},"2.类型/2.6.函数类型/2.6.1.可选参数.html#2-6-1-可选参数":{"title":"2.6.1.&#x53EF;&#x9009;&#x53C2;&#x6570;","path":"\\2.类型\\2.6.函数类型\\2.6.1.可选参数.html#2-6-1-可选参数","body":"&#x53EF;&#x9009;&#x53C2;&#x6570;&#x901A;&#x8FC7;&#x5728;&#x53C2;&#x6570;&#x6807;&#x8BC6;&#x7B26;&#x524D;&#x9762;&#x524D;&#x7F6E;&#x4E00;&#x4E2A;&#x95EE;&#x53F7; ? &#x6765;&#x58F0;&#x660E;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 class Main { static public function main () { // ?i : Int - ?s : String - String $type(test); trace (test()); // i: null, s: null trace (test( 1 )); // i: 1, s: null trace (test( 1 , foo )); // i: 1, s: foo trace (test( foo )); // i: null, s: foo } static function test (?i: Int , ?s: String ) { return i:  +i + , s:  +s; } } &#x51FD;&#x6570; test &#x6709;&#x4E24;&#x4E2A;&#x53EF;&#x9009;&#x53C2;&#x6570;&#xFF1A;Int &#x7C7B;&#x578B;&#x7684; i &#x548C; String &#x7C7B;&#x578B;&#x7684; s &#x3002;&#x8FD9;&#x5728;&#x7B2C;3&#x884C;&#x7684;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x8F93;&#x51FA;&#x76F4;&#x63A5;&#x53CD;&#x6620;&#x51FA;&#x6765;&#x3002;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x7A0B;&#x5E8F;&#x8C03;&#x7528;&#x4E86;4&#x6B21; test &#xFF0C;&#x5E76;&#x6253;&#x5370;&#x51FA;&#x5B83;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#xFF1A; &#x7B2C;&#x4E00;&#x6B21;&#x8C03;&#x7528;&#x4E0D;&#x5E26;&#x4EFB;&#x4F55;&#x53C2;&#x6570; &#x7B2C;&#x4E8C;&#x6B21;&#x8C03;&#x7528;&#x5E26;&#x6709;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x53C2;&#x6570; 1 &#x7B2C;&#x4E09;&#x6B21;&#x8C03;&#x7528;&#x5E26;&#x4E86;&#x4E24;&#x4E2A;&#x53C2;&#x6570; 1 &#x548C; &#x201C; foo &#x201C; &#x7B2C;&#x56DB;&#x6B21;&#x8C03;&#x7528;&#x53EA;&#x6709;&#x5355;&#x72EC;&#x7684;&#x53C2;&#x6570; &#x201C; foo &#x201D; &#x8F93;&#x51FA;&#x5185;&#x5BB9;&#x663E;&#x793A;&#xFF0C;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x4E2D;&#x88AB;&#x7701;&#x7565;&#x7684;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x7684;&#x503C;&#x4E3A; null &#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x8FD9;&#x4E9B;&#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x5FC5;&#x987B;&#x8BA4;&#x53EF; null &#x4F5C;&#x4E3A;&#x503C;&#xFF0C;&#x8FD9;&#x662F;&#x5728; &#x4E3A;&#x7A7A;&#x6027;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09; &#x4E2D;&#x8BA8;&#x8BBA;&#x7684;&#x95EE;&#x9898;&#x3002; &#x5F53;&#x7F16;&#x8BD1;&#x5230;&#x4E00;&#x4E2A; &#x9759;&#x6001;&#x8BED;&#x8A00;&#x76EE;&#x6807;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09; &#x65F6;&#xFF0C;Haxe &#x7F16;&#x8BD1;&#x5668;&#x901A;&#x8FC7;&#x63A8;&#x65AD;&#x5B83;&#x4EEC;&#x7684;&#x7C7B;&#x578B;&#x4E3A; Null &#x786E;&#x4FDD;&#x53EF;&#x9009;&#x7684;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x662F;&#x53EF;&#x7A7A;&#x7684;&#x3002;&#x524D;&#x4E09;&#x4E2A;&#x8C03;&#x7528;&#x975E;&#x5E38;&#x76F4;&#x89C2;&#xFF0C;&#x7B2C;&#x56DB;&#x4E2A;&#x53EF;&#x80FD;&#x662F;&#x4E00;&#x4E2A;&#x60CA;&#x559C;&#xFF1A;&#x5982;&#x679C;&#x63D0;&#x4F9B;&#x7684;&#x503C;&#x53EF;&#x4EE5;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A;&#x4E4B;&#x540E;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x786E;&#x5B9E;&#x5141;&#x8BB8;&#x8DF3;&#x8FC7;&#x53EF;&#x9009;&#x53C2;&#x6570;&#x3002;"},"2.类型/2.6.函数类型/2.6.函数类型.html":{"title":"","path":"\\2.类型\\2.6.函数类型\\2.6.函数类型.html","body":"2.6.函数类型 函数类型，连同 单形（第2.9节） 一起，通常是对 Haxe 用户隐藏的很好的一个类型，尽管它们无处不在。我们可以使用 $type ，一个特定的 Haxe 标识符，可以在编译时输出它的表达式的类型，来使它们表现出来： 1 2 3 4 5 6 7 8 9 10 class Main  static public function main ()  // i : Int - s : String - Bool $type(test); $type(test( 1 , \"foo\" )); // Bool  static function test (i: Int , s: String ): Bool  return true ;   函数 test 的声明和 $type 语句的输出有非常强的相似，但也有微妙的区别： 函数参数被特殊的箭头符号 - 分隔，而不是逗号 , 函数返回类型出现在结尾的另一个 - 符号之后 不论哪个记法，很明显，函数 test 接受第一个 Int 类型的参数，第二个 String 类型的参数，并返回一个 Bool 类型值。如果调用这个函数，例如 test(1,foo) ，并将其放在第二个 $type 语句中，Haxe 类型检查器检查 1 是否可以被分配到 Int 类型参数，然后检查 “ foo “ 是否可以被分配到 String 类型参数。调用的类型然后就会和 test 函数返回值的类型相同，即，一个 Bool 类型。 如果一个函数类型有其它函数类型的参数或者返回值，则可以使用括号对它们进行正确的分组。例如， Int-(Int-Void)-Void 表示一个函数，第一个参数为 Int 类型，第二个参数是函数 Int-Void 类型，返回 Void 。"},"2.类型/2.6.函数类型/2.6.函数类型.html#2-6-函数类型":{"title":"2.6.&#x51FD;&#x6570;&#x7C7B;&#x578B;","path":"\\2.类型\\2.6.函数类型\\2.6.函数类型.html#2-6-函数类型","body":"&#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF0C;&#x8FDE;&#x540C; &#x5355;&#x5F62;&#xFF08;&#x7B2C;2.9&#x8282;&#xFF09; &#x4E00;&#x8D77;&#xFF0C;&#x901A;&#x5E38;&#x662F;&#x5BF9; Haxe &#x7528;&#x6237;&#x9690;&#x85CF;&#x7684;&#x5F88;&#x597D;&#x7684;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#xFF0C;&#x5C3D;&#x7BA1;&#x5B83;&#x4EEC;&#x65E0;&#x5904;&#x4E0D;&#x5728;&#x3002;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; $type &#xFF0C;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684; Haxe &#x6807;&#x8BC6;&#x7B26;&#xFF0C;&#x53EF;&#x4EE5;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x8F93;&#x51FA;&#x5B83;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x6765;&#x4F7F;&#x5B83;&#x4EEC;&#x8868;&#x73B0;&#x51FA;&#x6765;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 class Main { static public function main () { // i : Int - s : String - Bool $type(test); $type(test( 1 , foo )); // Bool } static function test (i: Int , s: String ): Bool { return true ; } } &#x51FD;&#x6570; test &#x7684;&#x58F0;&#x660E;&#x548C; $type &#x8BED;&#x53E5;&#x7684;&#x8F93;&#x51FA;&#x6709;&#x975E;&#x5E38;&#x5F3A;&#x7684;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x4E5F;&#x6709;&#x5FAE;&#x5999;&#x7684;&#x533A;&#x522B;&#xFF1A; &#x51FD;&#x6570;&#x53C2;&#x6570;&#x88AB;&#x7279;&#x6B8A;&#x7684;&#x7BAD;&#x5934;&#x7B26;&#x53F7; - &#x5206;&#x9694;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x9017;&#x53F7; , &#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x51FA;&#x73B0;&#x5728;&#x7ED3;&#x5C3E;&#x7684;&#x53E6;&#x4E00;&#x4E2A; - &#x7B26;&#x53F7;&#x4E4B;&#x540E; &#x4E0D;&#x8BBA;&#x54EA;&#x4E2A;&#x8BB0;&#x6CD5;&#xFF0C;&#x5F88;&#x660E;&#x663E;&#xFF0C;&#x51FD;&#x6570; test &#x63A5;&#x53D7;&#x7B2C;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A; String &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A; Bool &#x7C7B;&#x578B;&#x503C;&#x3002;&#x5982;&#x679C;&#x8C03;&#x7528;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x4F8B;&#x5982; test(1,foo) &#xFF0C;&#x5E76;&#x5C06;&#x5176;&#x653E;&#x5728;&#x7B2C;&#x4E8C;&#x4E2A; $type &#x8BED;&#x53E5;&#x4E2D;&#xFF0C;Haxe &#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x5668;&#x68C0;&#x67E5; 1 &#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230; Int &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x68C0;&#x67E5; &#x201C; foo &#x201C; &#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230; String &#x7C7B;&#x578B;&#x53C2;&#x6570;&#x3002;&#x8C03;&#x7528;&#x7684;&#x7C7B;&#x578B;&#x7136;&#x540E;&#x5C31;&#x4F1A;&#x548C; test &#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#x7684;&#x7C7B;&#x578B;&#x76F8;&#x540C;&#xFF0C;&#x5373;&#xFF0C;&#x4E00;&#x4E2A; Bool &#x7C7B;&#x578B;&#x3002; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x6709;&#x5176;&#x5B83;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x6216;&#x8005;&#x8FD4;&#x56DE;&#x503C;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x62EC;&#x53F7;&#x5BF9;&#x5B83;&#x4EEC;&#x8FDB;&#x884C;&#x6B63;&#x786E;&#x7684;&#x5206;&#x7EC4;&#x3002;&#x4F8B;&#x5982;&#xFF0C; Int-(Int-Void)-Void &#x8868;&#x793A;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x4E3A; Int &#x7C7B;&#x578B;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x662F;&#x51FD;&#x6570; Int-Void &#x7C7B;&#x578B;&#xFF0C;&#x8FD4;&#x56DE; Void &#x3002;"},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html":{"title":"","path":"\\2.类型\\2.7.动态类型\\2.7.2.实现Dynamic.html","body":"2.7.2.实现Dynamic 类可以 实现（第2.3.3节） Dynamic 类型，和提供任意字段访问的 Dynamic 。前一种情况，字段可以有任何类型，而后一种，它们被限制兼容参数类型： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class ImplementsDynamic implements Dynamic  String   public var present: Int ; public function new ()   class Main  static public function main ()  var c = new ImplementsDynamic (); // 有效的，present 是一个存在的字段 c.present = 1 ; // 有效，分配的值是一个 String c.stringField = \"foo\" ; // 错误，Int应该是 String //c.intField = 1;   实现 Dynamic 不符合实现其它接口的需求。预期的字段仍然必须被明确实现。实现 Dynamic 的类（带或者不带类型参数）也可以利用一个特别的方法名字叫做 resolve 。如果一个 读访问（第4.2节） 被做出，而且被讨论的字段不存在， resolve 方法被调用，并以这个字段的名字作为参数： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Resolve implements Dynamic  String   public var present: Int ; public function new ()  function resolve (field: String )  return \"Tried to resolve \" +field;   class Main  static public function main ()  var c = new Resolve (); c.present = 2 ; trace (c.present); trace (c.resolveMe);  "},"2.类型/2.7.动态类型/2.7.2.实现Dynamic.html#2-7-2-实现Dynamic":{"title":"2.7.2.&#x5B9E;&#x73B0;Dynamic","path":"\\2.类型\\2.7.动态类型\\2.7.2.实现Dynamic.html#2-7-2-实现Dynamic","body":"&#x7C7B;&#x53EF;&#x4EE5; &#x5B9E;&#x73B0;&#xFF08;&#x7B2C;2.3.3&#x8282;&#xFF09; Dynamic &#x7C7B;&#x578B;&#xFF0C;&#x548C;&#x63D0;&#x4F9B;&#x4EFB;&#x610F;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x7684; Dynamic &#x3002;&#x524D;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x5B57;&#x6BB5;&#x53EF;&#x4EE5;&#x6709;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#xFF0C;&#x800C;&#x540E;&#x4E00;&#x79CD;&#xFF0C;&#x5B83;&#x4EEC;&#x88AB;&#x9650;&#x5236;&#x517C;&#x5BB9;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class ImplementsDynamic implements Dynamic  String  { public var present: Int ; public function new () {} } class Main { static public function main () { var c = new ImplementsDynamic (); // &#x6709;&#x6548;&#x7684;&#xFF0C;present &#x662F;&#x4E00;&#x4E2A;&#x5B58;&#x5728;&#x7684;&#x5B57;&#x6BB5; c.present = 1 ; // &#x6709;&#x6548;&#xFF0C;&#x5206;&#x914D;&#x7684;&#x503C;&#x662F;&#x4E00;&#x4E2A; String c.stringField = foo ; // &#x9519;&#x8BEF;&#xFF0C;Int&#x5E94;&#x8BE5;&#x662F; String //c.intField = 1; } } &#x5B9E;&#x73B0; Dynamic &#x4E0D;&#x7B26;&#x5408;&#x5B9E;&#x73B0;&#x5176;&#x5B83;&#x63A5;&#x53E3;&#x7684;&#x9700;&#x6C42;&#x3002;&#x9884;&#x671F;&#x7684;&#x5B57;&#x6BB5;&#x4ECD;&#x7136;&#x5FC5;&#x987B;&#x88AB;&#x660E;&#x786E;&#x5B9E;&#x73B0;&#x3002;&#x5B9E;&#x73B0; Dynamic &#x7684;&#x7C7B;&#xFF08;&#x5E26;&#x6216;&#x8005;&#x4E0D;&#x5E26;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF09;&#x4E5F;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x4E00;&#x4E2A;&#x7279;&#x522B;&#x7684;&#x65B9;&#x6CD5;&#x540D;&#x5B57;&#x53EB;&#x505A; resolve &#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A; &#x8BFB;&#x8BBF;&#x95EE;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09; &#x88AB;&#x505A;&#x51FA;&#xFF0C;&#x800C;&#x4E14;&#x88AB;&#x8BA8;&#x8BBA;&#x7684;&#x5B57;&#x6BB5;&#x4E0D;&#x5B58;&#x5728;&#xFF0C; resolve &#x65B9;&#x6CD5;&#x88AB;&#x8C03;&#x7528;&#xFF0C;&#x5E76;&#x4EE5;&#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#x7684;&#x540D;&#x5B57;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Resolve implements Dynamic  String  { public var present: Int ; public function new () {} function resolve (field: String ) { return Tried to resolve  +field; } } class Main { static public function main () { var c = new Resolve (); c.present = 2 ; trace (c.present); trace (c.resolveMe); } }"},"2.类型/2.7.动态类型/2.7.动态类型.html":{"title":"","path":"\\2.类型\\2.7.动态类型\\2.7.动态类型.html","body":"2.7.动态类型 虽然 Haxe 有一个静态的类型系统，但这个类型系统实际上可以通过使用 Dynamic 类型关闭。一个 动态值可以被赋值给任何类型；而任何值都可以被分配到动态类型。这有一些缺点： 编译器将不会再在接受指定类型的赋值、函数调用和其它构造中进行类型检查。 某些优化，特别是编译为静态目标语言时，将不能再被使用。 一些常见的错误，例如字段访问中的一个拼写错误，将不能在编译时被发现，可能会引发运行时的错误。 如果字段是通过 Dynamic 类型使用， 无用代码消除（第8.2节） 不能检测使用到的字段 使用 Dynamic 类型可能引发运行时错误的例子非常容易出现。思考下面的两行代码到静态目标语言的编译： 1 2 var d: Dynamic = 1 ; d.foo; 尝试在 Flash 播放器运行编译后的程序，会产生一个错误 ，属性 foo 在 数值类型中没有找到，而且没有默认值。不使用 Dynamic，这会在编译时被侦测到。 花絮 ：Haxe 3之前的 Dynamic 类型推断 Haxe 3 编译器从不推断一个类型为 Dynamic 类型，所以用户必须明确它。之前的 Haxe 版本曾经推断 数组为一个混合类型，如 [1, true, foo] 为 Array 。我们发现这个行为会引发太多的类型问题，因此在 Haxe 3 中移除了它。 应该尽量少的使用 Dynamic 类型，因为很多情况下都有更好的选择，但是有时候实际会用到它。Haxe 反射（第10.7节） API中部分使用了 Dynamic 类型，而且有时候它是在处理编译时未知的自定义数据结构最好选择。当被用一个 单形（第2.9节） 统一（第3.5节） 的时候，Dynamic 类型以一种特殊的方式运行。单形没有绑定到 Dynamic，这可以在如下例子中带来令人惊喜的结果： 1 2 3 4 5 6 7 8 9 10 11 12 class Main  static function main ()  var jsonData = ’[ 1 , 2 , 3 ]’; var json = haxe.Json.parse(jsonData); $type(json); // Unknown0 for (i in 0. ..json.length)  // Array access is not allowed on // + length : Int  trace (json[ 0 ]);    尽管 Json.parse 的返回类型是 Dynamic 类型，局部变量 json 的类型并没有绑定到动态类型，仍然保持了一个单形。然后它在 json.length 字段访问上被推断为一个 匿名结构（第2.5节） ，使后面的 json[0] 数组访问失败。为了避免这个问题，变量 json 可以通过使用 var json:Dynamic 显式的声明为 Dynamic 类型。 花絮 ：标准库中的 Dynamic 类型 Dynamic 类型在 Haxe 3 之前非常频繁的使用在标准库中。随着 Haxe 类型系统的持续改进，Dynamic 类型的出现在通往 Haxe 3的版本被减少。"},"2.类型/2.7.动态类型/2.7.动态类型.html#2-7-动态类型":{"title":"2.7.&#x52A8;&#x6001;&#x7C7B;&#x578B;","path":"\\2.类型\\2.7.动态类型\\2.7.动态类型.html#2-7-动态类型","body":"&#x867D;&#x7136; Haxe &#x6709;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x7684;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#xFF0C;&#x4F46;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x5B9E;&#x9645;&#x4E0A;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528; Dynamic &#x7C7B;&#x578B;&#x5173;&#x95ED;&#x3002;&#x4E00;&#x4E2A; &#x52A8;&#x6001;&#x503C;&#x53EF;&#x4EE5;&#x88AB;&#x8D4B;&#x503C;&#x7ED9;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#xFF1B;&#x800C;&#x4EFB;&#x4F55;&#x503C;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230;&#x52A8;&#x6001;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x6709;&#x4E00;&#x4E9B;&#x7F3A;&#x70B9;&#xFF1A; &#x7F16;&#x8BD1;&#x5668;&#x5C06;&#x4E0D;&#x4F1A;&#x518D;&#x5728;&#x63A5;&#x53D7;&#x6307;&#x5B9A;&#x7C7B;&#x578B;&#x7684;&#x8D4B;&#x503C;&#x3001;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x548C;&#x5176;&#x5B83;&#x6784;&#x9020;&#x4E2D;&#x8FDB;&#x884C;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x3002; &#x67D0;&#x4E9B;&#x4F18;&#x5316;&#xFF0C;&#x7279;&#x522B;&#x662F;&#x7F16;&#x8BD1;&#x4E3A;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x65F6;&#xFF0C;&#x5C06;&#x4E0D;&#x80FD;&#x518D;&#x88AB;&#x4F7F;&#x7528;&#x3002; &#x4E00;&#x4E9B;&#x5E38;&#x89C1;&#x7684;&#x9519;&#x8BEF;&#xFF0C;&#x4F8B;&#x5982;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x62FC;&#x5199;&#x9519;&#x8BEF;&#xFF0C;&#x5C06;&#x4E0D;&#x80FD;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x88AB;&#x53D1;&#x73B0;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x5F15;&#x53D1;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x9519;&#x8BEF;&#x3002; &#x5982;&#x679C;&#x5B57;&#x6BB5;&#x662F;&#x901A;&#x8FC7; Dynamic &#x7C7B;&#x578B;&#x4F7F;&#x7528;&#xFF0C; &#x65E0;&#x7528;&#x4EE3;&#x7801;&#x6D88;&#x9664;&#xFF08;&#x7B2C;8.2&#x8282;&#xFF09; &#x4E0D;&#x80FD;&#x68C0;&#x6D4B;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x5B57;&#x6BB5; &#x4F7F;&#x7528; Dynamic &#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x5F15;&#x53D1;&#x8FD0;&#x884C;&#x65F6;&#x9519;&#x8BEF;&#x7684;&#x4F8B;&#x5B50;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x51FA;&#x73B0;&#x3002;&#x601D;&#x8003;&#x4E0B;&#x9762;&#x7684;&#x4E24;&#x884C;&#x4EE3;&#x7801;&#x5230;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x7F16;&#x8BD1;&#xFF1A; 1 2 var d: Dynamic = 1 ; d.foo; &#x5C1D;&#x8BD5;&#x5728; Flash &#x64AD;&#x653E;&#x5668;&#x8FD0;&#x884C;&#x7F16;&#x8BD1;&#x540E;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x9519;&#x8BEF; &#xFF0C;&#x5C5E;&#x6027; foo &#x5728; &#x6570;&#x503C;&#x7C7B;&#x578B;&#x4E2D;&#x6CA1;&#x6709;&#x627E;&#x5230;&#xFF0C;&#x800C;&#x4E14;&#x6CA1;&#x6709;&#x9ED8;&#x8BA4;&#x503C;&#x3002;&#x4E0D;&#x4F7F;&#x7528; Dynamic&#xFF0C;&#x8FD9;&#x4F1A;&#x5728;&#x7F16;&#x8BD1;&#x65F6;&#x88AB;&#x4FA6;&#x6D4B;&#x5230;&#x3002; &#x82B1;&#x7D6E; &#xFF1A;Haxe 3&#x4E4B;&#x524D;&#x7684; Dynamic &#x7C7B;&#x578B;&#x63A8;&#x65AD; Haxe 3 &#x7F16;&#x8BD1;&#x5668;&#x4ECE;&#x4E0D;&#x63A8;&#x65AD;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x4E3A; Dynamic &#x7C7B;&#x578B;&#xFF0C;&#x6240;&#x4EE5;&#x7528;&#x6237;&#x5FC5;&#x987B;&#x660E;&#x786E;&#x5B83;&#x3002;&#x4E4B;&#x524D;&#x7684; Haxe &#x7248;&#x672C;&#x66FE;&#x7ECF;&#x63A8;&#x65AD; &#x6570;&#x7EC4;&#x4E3A;&#x4E00;&#x4E2A;&#x6DF7;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x5982; [1, true, foo] &#x4E3A; Array &#x3002;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x8FD9;&#x4E2A;&#x884C;&#x4E3A;&#x4F1A;&#x5F15;&#x53D1;&#x592A;&#x591A;&#x7684;&#x7C7B;&#x578B;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x6B64;&#x5728; Haxe 3 &#x4E2D;&#x79FB;&#x9664;&#x4E86;&#x5B83;&#x3002; &#x5E94;&#x8BE5;&#x5C3D;&#x91CF;&#x5C11;&#x7684;&#x4F7F;&#x7528; Dynamic &#x7C7B;&#x578B;&#xFF0C;&#x56E0;&#x4E3A;&#x5F88;&#x591A;&#x60C5;&#x51B5;&#x4E0B;&#x90FD;&#x6709;&#x66F4;&#x597D;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x65F6;&#x5019;&#x5B9E;&#x9645;&#x4F1A;&#x7528;&#x5230;&#x5B83;&#x3002;Haxe &#x53CD;&#x5C04;&#xFF08;&#x7B2C;10.7&#x8282;&#xFF09; API&#x4E2D;&#x90E8;&#x5206;&#x4F7F;&#x7528;&#x4E86; Dynamic &#x7C7B;&#x578B;&#xFF0C;&#x800C;&#x4E14;&#x6709;&#x65F6;&#x5019;&#x5B83;&#x662F;&#x5728;&#x5904;&#x7406;&#x7F16;&#x8BD1;&#x65F6;&#x672A;&#x77E5;&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x6700;&#x597D;&#x9009;&#x62E9;&#x3002;&#x5F53;&#x88AB;&#x7528;&#x4E00;&#x4E2A; &#x5355;&#x5F62;&#xFF08;&#x7B2C;2.9&#x8282;&#xFF09; &#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09; &#x7684;&#x65F6;&#x5019;&#xFF0C;Dynamic &#x7C7B;&#x578B;&#x4EE5;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x65B9;&#x5F0F;&#x8FD0;&#x884C;&#x3002;&#x5355;&#x5F62;&#x6CA1;&#x6709;&#x7ED1;&#x5B9A;&#x5230; Dynamic&#xFF0C;&#x8FD9;&#x53EF;&#x4EE5;&#x5728;&#x5982;&#x4E0B;&#x4F8B;&#x5B50;&#x4E2D;&#x5E26;&#x6765;&#x4EE4;&#x4EBA;&#x60CA;&#x559C;&#x7684;&#x7ED3;&#x679C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 class Main { static function main () { var jsonData = &#x2019;[ 1 , 2 , 3 ]&#x2019;; var json = haxe.Json.parse(jsonData); $type(json); // Unknown0 for (i in 0. ..json.length) { // Array access is not allowed on // {+ length : Int } trace (json[ 0 ]); } } } &#x5C3D;&#x7BA1; Json.parse &#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x662F; Dynamic &#x7C7B;&#x578B;&#xFF0C;&#x5C40;&#x90E8;&#x53D8;&#x91CF; json &#x7684;&#x7C7B;&#x578B;&#x5E76;&#x6CA1;&#x6709;&#x7ED1;&#x5B9A;&#x5230;&#x52A8;&#x6001;&#x7C7B;&#x578B;&#xFF0C;&#x4ECD;&#x7136;&#x4FDD;&#x6301;&#x4E86;&#x4E00;&#x4E2A;&#x5355;&#x5F62;&#x3002;&#x7136;&#x540E;&#x5B83;&#x5728; json.length &#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x4E0A;&#x88AB;&#x63A8;&#x65AD;&#x4E3A;&#x4E00;&#x4E2A; &#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF08;&#x7B2C;2.5&#x8282;&#xFF09; &#xFF0C;&#x4F7F;&#x540E;&#x9762;&#x7684; json[0] &#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x5931;&#x8D25;&#x3002;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x53D8;&#x91CF; json &#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528; var json:Dynamic &#x663E;&#x5F0F;&#x7684;&#x58F0;&#x660E;&#x4E3A; Dynamic &#x7C7B;&#x578B;&#x3002; &#x82B1;&#x7D6E; &#xFF1A;&#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684; Dynamic &#x7C7B;&#x578B; Dynamic &#x7C7B;&#x578B;&#x5728; Haxe 3 &#x4E4B;&#x524D;&#x975E;&#x5E38;&#x9891;&#x7E41;&#x7684;&#x4F7F;&#x7528;&#x5728;&#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x3002;&#x968F;&#x7740; Haxe &#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x7684;&#x6301;&#x7EED;&#x6539;&#x8FDB;&#xFF0C;Dynamic &#x7C7B;&#x578B;&#x7684;&#x51FA;&#x73B0;&#x5728;&#x901A;&#x5F80; Haxe 3&#x7684;&#x7248;&#x672C;&#x88AB;&#x51CF;&#x5C11;&#x3002;"},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.1.隐式类型转换.html","body":"2.8.1.隐式类型转换 与类不同，抽象类型允许定义隐式转换。有两种类型的隐式转换： 直接转换： 允许抽象类型和其它类型之间的直接转换。这通过从或者往抽象类型添加规则来定义，而且只允许用于和抽象类型的潜在类型统一的类型。 类字段： 允许通过调用特别的转换函数进行转换。这些函数通过使用 @:to 和 @:from 元数据定义。这种类型的转换允许用于所有类型。 如下的代码示例展示直接转换的一个例子： 1 2 3 4 5 6 7 8 9 10 11 12 abstract MyAbstract ( Int ) from Int to Int  inline function new (i: Int )  this = i;   class Main  static public function main ()  var a: MyAbstract = 12 ; var b: Int = a;   我们声明 MyAbstract 可以是从或者到 Int 类型，意思是它可以被用 Int 分配，并且可以分配到 Int 类型。这在第9和10行展示，第一个分配 Int 12 到 MyAbstract 类型的变量 a （通过使用 from Int 声明 ），然后这个抽象类型分配回 Int 类型变量 b （通过使用 to Int 声明）。 另一种的类字段转换有相同的语义，但是定义完全不同： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 abstract MyAbstract ( Int )  inline function new (i: Int )  this = i;  @:from static public function fromString (s: String )  return new MyAbstract (Std.parseInt(s));  @:to public function toArray ()  return [ this ];   class Main  static public function main ()  var a: MyAbstract = \"3\" ; var b: Array  Int  = a; trace (b); // [3]   通过添加 @:from 到一个静态函数，这个函数获得资格作为从它的参数类型到抽象类型的隐式转换函数。这些函数必须返回一个抽象类型的值。它们还必须被声明为静态的 ： 类似的，添加 @:to 到一个函数，它获取资格作为从抽象类型到它的返回类型的隐式转换函数。这些函数通常是成员函数，但是它们可以被声明为静态 ，然后作为一个 选择函数（第2.8.4节） 。 在例子中，方法 fromString 允许分配值 “ 3 ” 到 MyAbstract 类型的变量 a ，而方法 toArray 允许分配抽象类型到 Array 类型的变量 b 。 当使用这种类型的转换，转换函数的调用被插入在需要的地方。当查看 JavaScript 输出的时候会很明显： 1 2 var a = _ImplicitCastField.MyAbstract_Impl_.fromString( \"3\" ); var b = _ImplicitCastField.MyAbstract_Impl_.toArray(a); 这可以被进一步优化，通过 内联（第4.4.2节） 两种转换函数，使得输出如下： 1 2 var a = Std.parseInt( \"3\" ); var b = [a]; 当分配一个类型 A 到一个类型 B，并且至少它们中的一个为抽象类型时，选择的规则很简单： 1.如果 A 不是一个抽象类型，去到 3 2.如果 A 定义了一个允许到 B 的 to 转换，去到6 3.如果 B 不是一个抽象类型，去到 5 4.如果 B 定义一个允许到 A 的 from 转换，去到6 5.停止，统一失败 6.停止，统一成功 经过设计，隐式转换不被传递，就像下面的例子展示的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 abstract A ( Int )  public function new () this = 0 ; @:to public function toB() return new B();  abstract B ( Int )  public function new () this = 0 ; @:to public function toC() return new C();  abstract C ( Int )  public function new () this = 0 ;  class Main  static public function main ()  var a = new A (); var b: B = a; // valid, uses A.toB var c: C = b; // valid, uses B.toC var c: C = a; // error, A should be C   虽然从 A 到 B 的转换和从 B 到 C 的转换分别是允许的，而一个传递的从 A 到 C 的转换则不允许。这是为了避免不明确的转换路径，并保持一个简单的选择规则。 Unlike classes, abstracts allow defining implicit casts. There are two kinds of implicit casts: Direct: Allows direct casting of the abstract type to or from another type. This is defined by adding to and from rules to the abstract type and is only allowed for types which unify with the underlying type of the abstract. Class field: Allows casting via calls to special cast functions. These functions are defined using @:to and @:from metadata. This kind of cast is allowed for all types. The following code example shows an example of direct casting: 1 2 3 4 5 6 7 8 9 10 11 12 abstract MyAbstract ( Int ) from Int to Int  inline function new (i: Int )  this = i;   class Main  static public function main ()  var a: MyAbstract = 12 ; var b: Int = a;   We declare MyAbstract as being from Int and to Int , appropriately meaning it can be assigned from Int and assigned to Int . This is shown in lines 9 and 10, where we first assign the Int 12 to variable a of type MyAbstract (this works due to the from Int declaration) and then that abstract back to variable b of type Int (this works due to the to Int declaration). Class field casts have the same semantics, but are defined completely differently: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 abstract MyAbstract ( Int )  inline function new (i: Int )  this = i;  @:from static public function fromString (s: String )  return new MyAbstract (Std.parseInt(s));  @:to public function toArray ()  return [ this ];   class Main  static public function main ()  var a: MyAbstract = \"3\" ; var b: Array  Int  = a; trace (b); // [3]   By adding @:from to a static function, that function qualifies as an implicit cast function from its argument type to the abstract. These functions must return a value of the abstract type. They must also be declared static . Similarly, adding @:to to a function qualifies it as implicit cast function from the abstract to its return type. In the previous example, the method fromString allows the assignment of value 3 to variable a of type MyAbstract while the method toArray allows assigning that abstract to variable b of type ArrayInt . When using this kind of cast, calls to the cast functions are inserted where required. This becomes obvious when looking at the JavaScript output: 1 2 var a = _ImplicitCastField.MyAbstract_Impl_.fromString( \"3\" ); var b = _ImplicitCastField.MyAbstract_Impl_.toArray(a); This can be further optimized by inlining both cast functions, turning the output into the following: 1 2 var a = Std.parseInt( \"3\" ); var b = [a]; The selection algorithm when assigning a type A to a type B where at least one is an abstract is simple: If A is not an abstract, go to 3. If A defines a to -conversion that admits B , go to 6. If B is not an abstract, go to 5. If B defines a from -conversion that admits A , go to 6. Stop, unification fails. Stop, unification succeeds. By design, implicit casts are not transitive , as the following example shows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 abstract A ( Int )  public function new () this = 0 ; @:to public function toB() return new B();  abstract B ( Int )  public function new () this = 0 ; @:to public function toC() return new C();  abstract C ( Int )  public function new () this = 0 ;  class Main  static public function main ()  var a = new A (); var b: B = a; // valid, uses A.toB var c: C = b; // valid, uses B.toC var c: C = a; // error, A should be C   While the individual casts from A to B and from B to C are allowed, a transitive cast from A to C is not. This is to avoid ambiguous cast paths and retain a simple selection algorithm."},"2.类型/2.8.抽象类型/2.8.1.隐式类型转换.html#2-8-1-隐式类型转换":{"title":"2.8.1.&#x9690;&#x5F0F;&#x7C7B;&#x578B;&#x8F6C;&#x6362;","path":"\\2.类型\\2.8.抽象类型\\2.8.1.隐式类型转换.html#2-8-1-隐式类型转换","body":"&#x4E0E;&#x7C7B;&#x4E0D;&#x540C;&#xFF0C;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5141;&#x8BB8;&#x5B9A;&#x4E49;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#x3002;&#x6709;&#x4E24;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#xFF1A; &#x76F4;&#x63A5;&#x8F6C;&#x6362;&#xFF1A; &#x5141;&#x8BB8;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x548C;&#x5176;&#x5B83;&#x7C7B;&#x578B;&#x4E4B;&#x95F4;&#x7684;&#x76F4;&#x63A5;&#x8F6C;&#x6362;&#x3002;&#x8FD9;&#x901A;&#x8FC7;&#x4ECE;&#x6216;&#x8005;&#x5F80;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x6DFB;&#x52A0;&#x89C4;&#x5219;&#x6765;&#x5B9A;&#x4E49;&#xFF0C;&#x800C;&#x4E14;&#x53EA;&#x5141;&#x8BB8;&#x7528;&#x4E8E;&#x548C;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x7684;&#x7C7B;&#x578B;&#x3002; &#x7C7B;&#x5B57;&#x6BB5;&#xFF1A; &#x5141;&#x8BB8;&#x901A;&#x8FC7;&#x8C03;&#x7528;&#x7279;&#x522B;&#x7684;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#x3002;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x901A;&#x8FC7;&#x4F7F;&#x7528; @:to &#x548C; @:from &#x5143;&#x6570;&#x636E;&#x5B9A;&#x4E49;&#x3002;&#x8FD9;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x8F6C;&#x6362;&#x5141;&#x8BB8;&#x7528;&#x4E8E;&#x6240;&#x6709;&#x7C7B;&#x578B;&#x3002; &#x5982;&#x4E0B;&#x7684;&#x4EE3;&#x7801;&#x793A;&#x4F8B;&#x5C55;&#x793A;&#x76F4;&#x63A5;&#x8F6C;&#x6362;&#x7684;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 abstract MyAbstract ( Int ) from Int to Int { inline function new (i: Int ) { this = i; } } class Main { static public function main () { var a: MyAbstract = 12 ; var b: Int = a; } } &#x6211;&#x4EEC;&#x58F0;&#x660E; MyAbstract &#x53EF;&#x4EE5;&#x662F;&#x4ECE;&#x6216;&#x8005;&#x5230; Int &#x7C7B;&#x578B;&#xFF0C;&#x610F;&#x601D;&#x662F;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x7528; Int &#x5206;&#x914D;&#xFF0C;&#x5E76;&#x4E14;&#x53EF;&#x4EE5;&#x5206;&#x914D;&#x5230; Int &#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x5728;&#x7B2C;9&#x548C;10&#x884C;&#x5C55;&#x793A;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x5206;&#x914D; Int 12 &#x5230; MyAbstract &#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF; a &#xFF08;&#x901A;&#x8FC7;&#x4F7F;&#x7528; from Int &#x58F0;&#x660E; &#xFF09;&#xFF0C;&#x7136;&#x540E;&#x8FD9;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5206;&#x914D;&#x56DE; Int &#x7C7B;&#x578B;&#x53D8;&#x91CF; b &#xFF08;&#x901A;&#x8FC7;&#x4F7F;&#x7528; to Int &#x58F0;&#x660E;&#xFF09;&#x3002; &#x53E6;&#x4E00;&#x79CD;&#x7684;&#x7C7B;&#x5B57;&#x6BB5;&#x8F6C;&#x6362;&#x6709;&#x76F8;&#x540C;&#x7684;&#x8BED;&#x4E49;&#xFF0C;&#x4F46;&#x662F;&#x5B9A;&#x4E49;&#x5B8C;&#x5168;&#x4E0D;&#x540C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 abstract MyAbstract ( Int ) { inline function new (i: Int ) { this = i; } @:from static public function fromString (s: String ) { return new MyAbstract (Std.parseInt(s)); } @:to public function toArray () { return [ this ]; } } class Main { static public function main () { var a: MyAbstract = 3 ; var b: Array  Int  = a; trace (b); // [3] } } &#x901A;&#x8FC7;&#x6DFB;&#x52A0; @:from &#x5230;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x51FD;&#x6570;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x83B7;&#x5F97;&#x8D44;&#x683C;&#x4F5C;&#x4E3A;&#x4ECE;&#x5B83;&#x7684;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x5230;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#x3002;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x5FC5;&#x987B;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x503C;&#x3002;&#x5B83;&#x4EEC;&#x8FD8;&#x5FC5;&#x987B;&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x9759;&#x6001;&#x7684; &#xFF1A; &#x7C7B;&#x4F3C;&#x7684;&#xFF0C;&#x6DFB;&#x52A0; @:to &#x5230;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x83B7;&#x53D6;&#x8D44;&#x683C;&#x4F5C;&#x4E3A;&#x4ECE;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5230;&#x5B83;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x7684;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#x3002;&#x8FD9;&#x4E9B;&#x51FD;&#x6570;&#x901A;&#x5E38;&#x662F;&#x6210;&#x5458;&#x51FD;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x9759;&#x6001; &#xFF0C;&#x7136;&#x540E;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A; &#x9009;&#x62E9;&#x51FD;&#x6570;&#xFF08;&#x7B2C;2.8.4&#x8282;&#xFF09; &#x3002; &#x5728;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x65B9;&#x6CD5; fromString &#x5141;&#x8BB8;&#x5206;&#x914D;&#x503C; &#x201C; 3 &#x201D; &#x5230; MyAbstract &#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF; a &#xFF0C;&#x800C;&#x65B9;&#x6CD5; toArray &#x5141;&#x8BB8;&#x5206;&#x914D;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5230; Array &#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF; b &#x3002; &#x5F53;&#x4F7F;&#x7528;&#x8FD9;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x8F6C;&#x6362;&#xFF0C;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#x7684;&#x8C03;&#x7528;&#x88AB;&#x63D2;&#x5165;&#x5728;&#x9700;&#x8981;&#x7684;&#x5730;&#x65B9;&#x3002;&#x5F53;&#x67E5;&#x770B; JavaScript &#x8F93;&#x51FA;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x5F88;&#x660E;&#x663E;&#xFF1A; 1 2 var a = _ImplicitCastField.MyAbstract_Impl_.fromString( 3 ); var b = _ImplicitCastField.MyAbstract_Impl_.toArray(a); &#x8FD9;&#x53EF;&#x4EE5;&#x88AB;&#x8FDB;&#x4E00;&#x6B65;&#x4F18;&#x5316;&#xFF0C;&#x901A;&#x8FC7; &#x5185;&#x8054;&#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09; &#x4E24;&#x79CD;&#x8F6C;&#x6362;&#x51FD;&#x6570;&#xFF0C;&#x4F7F;&#x5F97;&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#xFF1A; 1 2 var a = Std.parseInt( 3 ); var b = [a]; &#x5F53;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x7C7B;&#x578B; A &#x5230;&#x4E00;&#x4E2A;&#x7C7B;&#x578B; B&#xFF0C;&#x5E76;&#x4E14;&#x81F3;&#x5C11;&#x5B83;&#x4EEC;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x4E3A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x65F6;&#xFF0C;&#x9009;&#x62E9;&#x7684;&#x89C4;&#x5219;&#x5F88;&#x7B80;&#x5355;&#xFF1A; 1.&#x5982;&#x679C; A &#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x53BB;&#x5230; 3 2.&#x5982;&#x679C; A &#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x5141;&#x8BB8;&#x5230; B &#x7684; to &#x8F6C;&#x6362;&#xFF0C;&#x53BB;&#x5230;6 3.&#x5982;&#x679C; B &#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x53BB;&#x5230; 5 4.&#x5982;&#x679C; B &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5141;&#x8BB8;&#x5230; A &#x7684; from &#x8F6C;&#x6362;&#xFF0C;&#x53BB;&#x5230;6 5.&#x505C;&#x6B62;&#xFF0C;&#x7EDF;&#x4E00;&#x5931;&#x8D25; 6.&#x505C;&#x6B62;&#xFF0C;&#x7EDF;&#x4E00;&#x6210;&#x529F; &#x7ECF;&#x8FC7;&#x8BBE;&#x8BA1;&#xFF0C;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#x4E0D;&#x88AB;&#x4F20;&#x9012;&#xFF0C;&#x5C31;&#x50CF;&#x4E0B;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x5C55;&#x793A;&#x7684;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 abstract A ( Int ) { public function new () this = 0 ; @:to public function toB() return new B(); } abstract B ( Int ) { public function new () this = 0 ; @:to public function toC() return new C(); } abstract C ( Int ) { public function new () this = 0 ; } class Main { static public function main () { var a = new A (); var b: B = a; // valid, uses A.toB var c: C = b; // valid, uses B.toC var c: C = a; // error, A should be C } } &#x867D;&#x7136;&#x4ECE; A &#x5230; B &#x7684;&#x8F6C;&#x6362;&#x548C;&#x4ECE; B &#x5230; C &#x7684;&#x8F6C;&#x6362;&#x5206;&#x522B;&#x662F;&#x5141;&#x8BB8;&#x7684;&#xFF0C;&#x800C;&#x4E00;&#x4E2A;&#x4F20;&#x9012;&#x7684;&#x4ECE; A &#x5230; C &#x7684;&#x8F6C;&#x6362;&#x5219;&#x4E0D;&#x5141;&#x8BB8;&#x3002;&#x8FD9;&#x662F;&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x4E0D;&#x660E;&#x786E;&#x7684;&#x8F6C;&#x6362;&#x8DEF;&#x5F84;&#xFF0C;&#x5E76;&#x4FDD;&#x6301;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x9009;&#x62E9;&#x89C4;&#x5219;&#x3002; Unlike classes, abstracts allow defining implicit casts. There are two kinds of implicit casts: Direct: Allows direct casting of the abstract type to or from another type. This is defined by adding to and from rules to the abstract type and is only allowed for types which unify with the underlying type of the abstract. Class field: Allows casting via calls to special cast functions. These functions are defined using @:to and @:from metadata. This kind of cast is allowed for all types. The following code example shows an example of direct casting: 1 2 3 4 5 6 7 8 9 10 11 12 abstract MyAbstract ( Int ) from Int to Int { inline function new (i: Int ) { this = i; } } class Main { static public function main () { var a: MyAbstract = 12 ; var b: Int = a; } } We declare MyAbstract as being from Int and to Int , appropriately meaning it can be assigned from Int and assigned to Int . This is shown in lines 9 and 10, where we first assign the Int 12 to variable a of type MyAbstract (this works due to the from Int declaration) and then that abstract back to variable b of type Int (this works due to the to Int declaration). Class field casts have the same semantics, but are defined completely differently: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 abstract MyAbstract ( Int ) { inline function new (i: Int ) { this = i; } @:from static public function fromString (s: String ) { return new MyAbstract (Std.parseInt(s)); } @:to public function toArray () { return [ this ]; } } class Main { static public function main () { var a: MyAbstract = 3 ; var b: Array  Int  = a; trace (b); // [3] } } By adding @:from to a static function, that function qualifies as an implicit cast function from its argument type to the abstract. These functions must return a value of the abstract type. They must also be declared static . Similarly, adding @:to to a function qualifies it as implicit cast function from the abstract to its return type. In the previous example, the method fromString allows the assignment of value 3 to variable a of type MyAbstract while the method toArray allows assigning that abstract to variable b of type ArrayInt . When using this kind of cast, calls to the cast functions are inserted where required. This becomes obvious when looking at the JavaScript output: 1 2 var a = _ImplicitCastField.MyAbstract_Impl_.fromString( 3 ); var b = _ImplicitCastField.MyAbstract_Impl_.toArray(a); This can be further optimized by inlining both cast functions, turning the output into the following: 1 2 var a = Std.parseInt( 3 ); var b = [a]; The selection algorithm when assigning a type A to a type B where at least one is an abstract is simple: If A is not an abstract, go to 3. If A defines a to -conversion that admits B , go to 6. If B is not an abstract, go to 5. If B defines a from -conversion that admits A , go to 6. Stop, unification fails. Stop, unification succeeds. By design, implicit casts are not transitive , as the following example shows: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 abstract A ( Int ) { public function new () this = 0 ; @:to public function toB() return new B(); } abstract B ( Int ) { public function new () this = 0 ; @:to public function toC() return new C(); } abstract C ( Int ) { public function new () this = 0 ; } class Main { static public function main () { var a = new A (); var b: B = a; // valid, uses A.toB var c: C = b; // valid, uses B.toC var c: C = a; // error, A should be C } } While the individual casts from A to B and from B to C are allowed, a transitive cast from A to C is not. This is to avoid ambiguous cast paths and retain a simple selection algorithm."},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.2.运算符重载.html","body":"2.8.2.运算符重载 抽象类型通过添加 @:op 元数据到类字段，允许一元和二元运算符的重载： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 abstract MyAbstract ( String )  public inline function new (s: String )  this = s;  @:op(A * B) public function repeat (rhs: Int ): MyAbstract  var s: StringBuf = new StringBuf (); for (i in 0. ..rhs) s.add( this ); return new MyAbstract (s.toString());   class Main  static public function main ()  var a = new MyAbstract ( \"foo\" ); trace (a * 3 ); // foofoofoo   通过默认的 @:op(A*B) ，当左面的值类型是 MyAbstract 而且右侧值是 Int 类型的时候，函数 repeat 作为乘法 * 运算符的运算符。用法在第17行显示，编译到 JavaScript 之后代码成为这样： 1 console.log(_AbstractOperatorOverload.MyAbstract_Impl_.repeat(a, 3 )); 类似于通过 类字段（第2.8.1） 方式隐式转换，重载之后的方法的调用被插入到需要的地方。 示例中的 repeat 函数是不可交换的：当 MyAbstract * Int 工作， Int * MyAbstract 则不工作。如果这应该同时允许，可以添加 @:commutative 元数据。如果它只可以为 Int * MyAbstract 工作，而不是为 MyAbstract * Int ，重载方法可以被设置为 static ，接受 Int 和 MyAbstract 分别作为第一个和第二个类型。 重载一元运算符是相似的： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 abstract MyAbstract ( String )  public inline function new (s: String )  this = s;  @:op(++A) public function pre() return \"pre\" + this ; @:op(A++) public function post() return this + \"post\" ;  class Main  static public function main ()  var a = new MyAbstract ( \"foo\" ); trace (++a); // prefoo trace (a++); // foopost   二元运算和一元运算符重载都可以返回任何类型。 暴露潜在类型的操作 还可以省略 @:op 函数的方法体，但是只有抽象类型的潜在类型允许涉及的操作，并且结果类型可以被赋值回抽象类型的时候。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 abstract MyAbstractInt ( Int ) from Int to Int  // 下面一行从潜在类型Int暴露 （AB）操作符 // 注意，并没有使用函数体 @:op(A  B) static function gt( a:MyAbstractInt, b:MyAbstractInt ) : Bool;  class Main  static function main ()  var a: MyAbstractInt = 42 ; if (a  0 ) trace (’Works fine,  operation implemented!’); // 小于操作符没有实现 // 这会引起一个 “不能对比MyAbstractInt 和 Int”的错误: if (a  100 )    "},"2.类型/2.8.抽象类型/2.8.2.运算符重载.html#2-8-2-运算符重载":{"title":"2.8.2.&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;","path":"\\2.类型\\2.8.抽象类型\\2.8.2.运算符重载.html#2-8-2-运算符重载","body":"&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x901A;&#x8FC7;&#x6DFB;&#x52A0; @:op &#x5143;&#x6570;&#x636E;&#x5230;&#x7C7B;&#x5B57;&#x6BB5;&#xFF0C;&#x5141;&#x8BB8;&#x4E00;&#x5143;&#x548C;&#x4E8C;&#x5143;&#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x91CD;&#x8F7D;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 abstract MyAbstract ( String ) { public inline function new (s: String ) { this = s; } @:op(A * B) public function repeat (rhs: Int ): MyAbstract { var s: StringBuf = new StringBuf (); for (i in 0. ..rhs) s.add( this ); return new MyAbstract (s.toString()); } } class Main { static public function main () { var a = new MyAbstract ( foo ); trace (a * 3 ); // foofoofoo } } &#x901A;&#x8FC7;&#x9ED8;&#x8BA4;&#x7684; @:op(A*B) &#xFF0C;&#x5F53;&#x5DE6;&#x9762;&#x7684;&#x503C;&#x7C7B;&#x578B;&#x662F; MyAbstract &#x800C;&#x4E14;&#x53F3;&#x4FA7;&#x503C;&#x662F; Int &#x7C7B;&#x578B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x51FD;&#x6570; repeat &#x4F5C;&#x4E3A;&#x4E58;&#x6CD5; * &#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x8FD0;&#x7B97;&#x7B26;&#x3002;&#x7528;&#x6CD5;&#x5728;&#x7B2C;17&#x884C;&#x663E;&#x793A;&#xFF0C;&#x7F16;&#x8BD1;&#x5230; JavaScript &#x4E4B;&#x540E;&#x4EE3;&#x7801;&#x6210;&#x4E3A;&#x8FD9;&#x6837;&#xFF1A; 1 console.log(_AbstractOperatorOverload.MyAbstract_Impl_.repeat(a, 3 )); &#x7C7B;&#x4F3C;&#x4E8E;&#x901A;&#x8FC7; &#x7C7B;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;2.8.1&#xFF09; &#x65B9;&#x5F0F;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#xFF0C;&#x91CD;&#x8F7D;&#x4E4B;&#x540E;&#x7684;&#x65B9;&#x6CD5;&#x7684;&#x8C03;&#x7528;&#x88AB;&#x63D2;&#x5165;&#x5230;&#x9700;&#x8981;&#x7684;&#x5730;&#x65B9;&#x3002; &#x793A;&#x4F8B;&#x4E2D;&#x7684; repeat &#x51FD;&#x6570;&#x662F;&#x4E0D;&#x53EF;&#x4EA4;&#x6362;&#x7684;&#xFF1A;&#x5F53; MyAbstract * Int &#x5DE5;&#x4F5C;&#xFF0C; Int * MyAbstract &#x5219;&#x4E0D;&#x5DE5;&#x4F5C;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x5E94;&#x8BE5;&#x540C;&#x65F6;&#x5141;&#x8BB8;&#xFF0C;&#x53EF;&#x4EE5;&#x6DFB;&#x52A0; @:commutative &#x5143;&#x6570;&#x636E;&#x3002;&#x5982;&#x679C;&#x5B83;&#x53EA;&#x53EF;&#x4EE5;&#x4E3A; Int * MyAbstract &#x5DE5;&#x4F5C;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4E3A; MyAbstract * Int &#xFF0C;&#x91CD;&#x8F7D;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x88AB;&#x8BBE;&#x7F6E;&#x4E3A; static &#xFF0C;&#x63A5;&#x53D7; Int &#x548C; MyAbstract &#x5206;&#x522B;&#x4F5C;&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x548C;&#x7B2C;&#x4E8C;&#x4E2A;&#x7C7B;&#x578B;&#x3002; &#x91CD;&#x8F7D;&#x4E00;&#x5143;&#x8FD0;&#x7B97;&#x7B26;&#x662F;&#x76F8;&#x4F3C;&#x7684;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 abstract MyAbstract ( String ) { public inline function new (s: String ) { this = s; } @:op(++A) public function pre() return pre + this ; @:op(A++) public function post() return this + post ; } class Main { static public function main () { var a = new MyAbstract ( foo ); trace (++a); // prefoo trace (a++); // foopost } } &#x4E8C;&#x5143;&#x8FD0;&#x7B97;&#x548C;&#x4E00;&#x5143;&#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;&#x90FD;&#x53EF;&#x4EE5;&#x8FD4;&#x56DE;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x3002; &#x66B4;&#x9732;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7684;&#x64CD;&#x4F5C; &#x8FD8;&#x53EF;&#x4EE5;&#x7701;&#x7565; @:op &#x51FD;&#x6570;&#x7684;&#x65B9;&#x6CD5;&#x4F53;&#xFF0C;&#x4F46;&#x662F;&#x53EA;&#x6709;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x5141;&#x8BB8;&#x6D89;&#x53CA;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5E76;&#x4E14;&#x7ED3;&#x679C;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x8D4B;&#x503C;&#x56DE;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x65F6;&#x5019;&#x3002; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 abstract MyAbstractInt ( Int ) from Int to Int { // &#x4E0B;&#x9762;&#x4E00;&#x884C;&#x4ECE;&#x6F5C;&#x5728;&#x7C7B;&#x578B;Int&#x66B4;&#x9732; &#xFF08;AB&#xFF09;&#x64CD;&#x4F5C;&#x7B26; // &#x6CE8;&#x610F;&#xFF0C;&#x5E76;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x51FD;&#x6570;&#x4F53; @:op(A  B) static function gt( a:MyAbstractInt, b:MyAbstractInt ) : Bool; } class Main { static function main () { var a: MyAbstractInt = 42 ; if (a  0 ) trace (&#x2019;Works fine,  operation implemented!&#x2019;); // &#x5C0F;&#x4E8E;&#x64CD;&#x4F5C;&#x7B26;&#x6CA1;&#x6709;&#x5B9E;&#x73B0; // &#x8FD9;&#x4F1A;&#x5F15;&#x8D77;&#x4E00;&#x4E2A; &#x201C;&#x4E0D;&#x80FD;&#x5BF9;&#x6BD4;MyAbstractInt &#x548C; Int&#x201D;&#x7684;&#x9519;&#x8BEF;: if (a  100 ) { } } }"},"2.类型/2.8.抽象类型/2.8.3.数组访问.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.3.数组访问.html","body":"2.8.3.数组访问 数组访问描述了特定的语法，传统上用于访问数组中的某个偏移量的值。通常只允许带有 Int 类型的参数。然而，使用抽象类型也可以定义自己的数组访问方法。 Haxe 标准库（第10章） 通过它的 Map 类型应用这种方式，其中下面两个方法可以被发现： 1 2 3 4 5 6 7 8 9 10 @:arrayAccess public inline function get (key: K )  return this . get (key);  @:arrayAccess public inline function arrayWrite (k: K , v: V ): V  this . set (k, v); return v;  有两种数组访问方法： 如果一个 @:arrayAccess 方法接受一个参数，它是一个 getter ； 如果一个 @:arrayAccess 方法接受两个参数，它是一个 setter 。 然后下面看到的 get 和 arrayWrite 方法允许这样使用： 1 2 3 4 5 6 7 class Main  public static function main ()  var map = new Map (); map[ \"foo\" ] = 1 ; trace (map[ \"foo\" ]);   在这一点上，看到数组访问字段的调用被插入到输入内容应该不会太让人吃惊： 1 2 map. set ( \"foo\" , 1 ); console.log(map. get ( \"foo\" )); // 1 数组访问解析的顺序 由于Haxe 3.2 版本之前的一个 bug，检查 :arrayAccess 字段的顺序是未被定义的。在 3.2 版本中已经修复所以现在总是从上到下进行检查字段： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 abstract AString ( String )  public function new (s) this = s; @:arrayAccess function getInt1(k:Int)  return this .charAt(k);  @:arrayAccess function getInt2(k:Int)  return this .charAt(k).toUpperCase();   class Main  static function main ()  var a = new AString ( \"foo\" ); trace (a[ 0 ]); // f   数组访问 a[0] 被解析到 getInt1 字段，使得小写的 f 被返回。结果可能和 Haxe 3.2 之前的版本不同。 先定义的字段有优先级，即使它们需要一个 隐式的转换（第2.8.1节） 。"},"2.类型/2.8.抽象类型/2.8.3.数组访问.html#2-8-3-数组访问":{"title":"2.8.3.&#x6570;&#x7EC4;&#x8BBF;&#x95EE;","path":"\\2.类型\\2.8.抽象类型\\2.8.3.数组访问.html#2-8-3-数组访问","body":"&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x63CF;&#x8FF0;&#x4E86;&#x7279;&#x5B9A;&#x7684;&#x8BED;&#x6CD5;&#xFF0C;&#x4F20;&#x7EDF;&#x4E0A;&#x7528;&#x4E8E;&#x8BBF;&#x95EE;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x67D0;&#x4E2A;&#x504F;&#x79FB;&#x91CF;&#x7684;&#x503C;&#x3002;&#x901A;&#x5E38;&#x53EA;&#x5141;&#x8BB8;&#x5E26;&#x6709; Int &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4F7F;&#x7528;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x4E5F;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x81EA;&#x5DF1;&#x7684;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x65B9;&#x6CD5;&#x3002; Haxe &#x6807;&#x51C6;&#x5E93;&#xFF08;&#x7B2C;10&#x7AE0;&#xFF09; &#x901A;&#x8FC7;&#x5B83;&#x7684; Map &#x7C7B;&#x578B;&#x5E94;&#x7528;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#xFF0C;&#x5176;&#x4E2D;&#x4E0B;&#x9762;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x88AB;&#x53D1;&#x73B0;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 @:arrayAccess public inline function get (key: K ) { return this . get (key); } @:arrayAccess public inline function arrayWrite (k: K , v: V ): V { this . set (k, v); return v; } &#x6709;&#x4E24;&#x79CD;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x65B9;&#x6CD5;&#xFF1A; &#x5982;&#x679C;&#x4E00;&#x4E2A; @:arrayAccess &#x65B9;&#x6CD5;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5B83;&#x662F;&#x4E00;&#x4E2A; getter &#xFF1B; &#x5982;&#x679C;&#x4E00;&#x4E2A; @:arrayAccess &#x65B9;&#x6CD5;&#x63A5;&#x53D7;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5B83;&#x662F;&#x4E00;&#x4E2A; setter &#x3002; &#x7136;&#x540E;&#x4E0B;&#x9762;&#x770B;&#x5230;&#x7684; get &#x548C; arrayWrite &#x65B9;&#x6CD5;&#x5141;&#x8BB8;&#x8FD9;&#x6837;&#x4F7F;&#x7528;&#xFF1A; 1 2 3 4 5 6 7 class Main { public static function main () { var map = new Map (); map[ foo ] = 1 ; trace (map[ foo ]); } } &#x5728;&#x8FD9;&#x4E00;&#x70B9;&#x4E0A;&#xFF0C;&#x770B;&#x5230;&#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x5B57;&#x6BB5;&#x7684;&#x8C03;&#x7528;&#x88AB;&#x63D2;&#x5165;&#x5230;&#x8F93;&#x5165;&#x5185;&#x5BB9;&#x5E94;&#x8BE5;&#x4E0D;&#x4F1A;&#x592A;&#x8BA9;&#x4EBA;&#x5403;&#x60CA;&#xFF1A; 1 2 map. set ( foo , 1 ); console.log(map. get ( foo )); // 1 &#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#x89E3;&#x6790;&#x7684;&#x987A;&#x5E8F; &#x7531;&#x4E8E;Haxe 3.2 &#x7248;&#x672C;&#x4E4B;&#x524D;&#x7684;&#x4E00;&#x4E2A; bug&#xFF0C;&#x68C0;&#x67E5; :arrayAccess &#x5B57;&#x6BB5;&#x7684;&#x987A;&#x5E8F;&#x662F;&#x672A;&#x88AB;&#x5B9A;&#x4E49;&#x7684;&#x3002;&#x5728; 3.2 &#x7248;&#x672C;&#x4E2D;&#x5DF2;&#x7ECF;&#x4FEE;&#x590D;&#x6240;&#x4EE5;&#x73B0;&#x5728;&#x603B;&#x662F;&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#x8FDB;&#x884C;&#x68C0;&#x67E5;&#x5B57;&#x6BB5;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 abstract AString ( String ) { public function new (s) this = s; @:arrayAccess function getInt1(k:Int) { return this .charAt(k); } @:arrayAccess function getInt2(k:Int) { return this .charAt(k).toUpperCase(); } } class Main { static function main () { var a = new AString ( foo ); trace (a[ 0 ]); // f } } &#x6570;&#x7EC4;&#x8BBF;&#x95EE; a[0] &#x88AB;&#x89E3;&#x6790;&#x5230; getInt1 &#x5B57;&#x6BB5;&#xFF0C;&#x4F7F;&#x5F97;&#x5C0F;&#x5199;&#x7684; f &#x88AB;&#x8FD4;&#x56DE;&#x3002;&#x7ED3;&#x679C;&#x53EF;&#x80FD;&#x548C; Haxe 3.2 &#x4E4B;&#x524D;&#x7684;&#x7248;&#x672C;&#x4E0D;&#x540C;&#x3002; &#x5148;&#x5B9A;&#x4E49;&#x7684;&#x5B57;&#x6BB5;&#x6709;&#x4F18;&#x5148;&#x7EA7;&#xFF0C;&#x5373;&#x4F7F;&#x5B83;&#x4EEC;&#x9700;&#x8981;&#x4E00;&#x4E2A; &#x9690;&#x5F0F;&#x7684;&#x8F6C;&#x6362;&#xFF08;&#x7B2C;2.8.1&#x8282;&#xFF09; &#x3002;"},"2.类型/2.8.抽象类型/2.8.4.选择函数.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.4.选择函数.html","body":"2.8.4.选择函数 由于编译器提升抽象成员函数为静态函数，可以手动定义静态函数并使用它们到一个抽象类的实例。这里的语法和那些第一个函数参数类型决定函数被定义为什么类型的 静态扩展（第6.3节） 类似，： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 abstract MyAbstract  T ( T ) from T  public function new (t: T ) this = t; function get () return this ; @:impl static public function getString (v: MyAbstract  String ): String  return v. get ();   class Main  static public function main ()  var a = new MyAbstract ( \"foo\" ); a.getString(); var b = new MyAbstract ( 1 ); // Int should be MyAbstractString b.getString();   抽象类型 MyAbstract 的方法 getString 被定义为接受一个 MyAbstract 类型首参数。这使它在第14行可以用在变量 a 上（因为 a 的类型为 MyAbstract ），但是不能用在变量 b 上， b 的类型是 MyAbstract 。 花絮 ：意外的功能 选择函数是被发现的，而不是真的设计了它的用法。在第一次提到这个想法后，只需要编译器中的一点调整就可以使它们工作。它们的这些发现还引入了多类型抽象类型，比如 Map 。"},"2.类型/2.8.抽象类型/2.8.4.选择函数.html#2-8-4-选择函数":{"title":"2.8.4.&#x9009;&#x62E9;&#x51FD;&#x6570;","path":"\\2.类型\\2.8.抽象类型\\2.8.4.选择函数.html#2-8-4-选择函数","body":"&#x7531;&#x4E8E;&#x7F16;&#x8BD1;&#x5668;&#x63D0;&#x5347;&#x62BD;&#x8C61;&#x6210;&#x5458;&#x51FD;&#x6570;&#x4E3A;&#x9759;&#x6001;&#x51FD;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x624B;&#x52A8;&#x5B9A;&#x4E49;&#x9759;&#x6001;&#x51FD;&#x6570;&#x5E76;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x5230;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x3002;&#x8FD9;&#x91CC;&#x7684;&#x8BED;&#x6CD5;&#x548C;&#x90A3;&#x4E9B;&#x7B2C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x51B3;&#x5B9A;&#x51FD;&#x6570;&#x88AB;&#x5B9A;&#x4E49;&#x4E3A;&#x4EC0;&#x4E48;&#x7C7B;&#x578B;&#x7684; &#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09; &#x7C7B;&#x4F3C;&#xFF0C;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 abstract MyAbstract  T ( T ) from T { public function new (t: T ) this = t; function get () return this ; @:impl static public function getString (v: MyAbstract  String ): String { return v. get (); } } class Main { static public function main () { var a = new MyAbstract ( foo ); a.getString(); var b = new MyAbstract ( 1 ); // Int should be MyAbstractString b.getString(); } } &#x62BD;&#x8C61;&#x7C7B;&#x578B; MyAbstract &#x7684;&#x65B9;&#x6CD5; getString &#x88AB;&#x5B9A;&#x4E49;&#x4E3A;&#x63A5;&#x53D7;&#x4E00;&#x4E2A; MyAbstract &#x7C7B;&#x578B;&#x9996;&#x53C2;&#x6570;&#x3002;&#x8FD9;&#x4F7F;&#x5B83;&#x5728;&#x7B2C;14&#x884C;&#x53EF;&#x4EE5;&#x7528;&#x5728;&#x53D8;&#x91CF; a &#x4E0A;&#xFF08;&#x56E0;&#x4E3A; a &#x7684;&#x7C7B;&#x578B;&#x4E3A; MyAbstract &#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x80FD;&#x7528;&#x5728;&#x53D8;&#x91CF; b &#x4E0A;&#xFF0C; b &#x7684;&#x7C7B;&#x578B;&#x662F; MyAbstract &#x3002; &#x82B1;&#x7D6E; &#xFF1A;&#x610F;&#x5916;&#x7684;&#x529F;&#x80FD; &#x9009;&#x62E9;&#x51FD;&#x6570;&#x662F;&#x88AB;&#x53D1;&#x73B0;&#x7684;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x771F;&#x7684;&#x8BBE;&#x8BA1;&#x4E86;&#x5B83;&#x7684;&#x7528;&#x6CD5;&#x3002;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x63D0;&#x5230;&#x8FD9;&#x4E2A;&#x60F3;&#x6CD5;&#x540E;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x7F16;&#x8BD1;&#x5668;&#x4E2D;&#x7684;&#x4E00;&#x70B9;&#x8C03;&#x6574;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x5B83;&#x4EEC;&#x5DE5;&#x4F5C;&#x3002;&#x5B83;&#x4EEC;&#x7684;&#x8FD9;&#x4E9B;&#x53D1;&#x73B0;&#x8FD8;&#x5F15;&#x5165;&#x4E86;&#x591A;&#x7C7B;&#x578B;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x6BD4;&#x5982; Map &#x3002;"},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.6.转发抽象类型字段.html","body":"2.8.6.转发抽象类型字段 Haxe 3.0版本之后 当包装一个潜在类型，有时候需要保持部分它的功能。因为手工编写转发函数非常繁琐，Haxe 允许添加 :forward 元数据到一个抽象类型： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @:forward(push, pop) abstract MyArray  S ( ArrayS )  public inline function new ()  this = [];   class Main  static public function main ()  var myArray = new MyArray (); myArray.push( 12 ); myArray.pop(); // MyArrayInt has no field length //myArray.length;   这个例子中的 MyArray 抽象类封装了 Array。它的 :forward 元数据有两个参数，对应要被转发到潜在类型的字段名。在这个例子中， main 方法实例化 MyArray 并访问它的 push 和 pop 方法。注释行表明 length 字段是不可用的。 像往常一样我们可以查看 JavaScript 输出来看一下代码如何生成： 1 2 3 4 5 Main.main = function ()  var myArray = []; myArray.push( 12 ); myArray.pop(); ; 也可以使用 :forward 而不带任何参数，来转发所有字段。当然 Haxe 编译器仍然保证字段实际上存在于潜在类型。 花絮 ：实现为宏 :enum 和 :forward 功能都是最初被使用 构建宏（第9.5节） 实现的。虽然这可以在非宏代码很好的运行，但是如果这些功能从宏内部运行它会引起问题。这个实现后来被移到编译器中。"},"2.类型/2.8.抽象类型/2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段":{"title":"2.8.6.&#x8F6C;&#x53D1;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5B57;&#x6BB5;","path":"\\2.类型\\2.8.抽象类型\\2.8.6.转发抽象类型字段.html#2-8-6-转发抽象类型字段","body":"Haxe 3.0&#x7248;&#x672C;&#x4E4B;&#x540E; &#x5F53;&#x5305;&#x88C5;&#x4E00;&#x4E2A;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#xFF0C;&#x6709;&#x65F6;&#x5019;&#x9700;&#x8981;&#x4FDD;&#x6301;&#x90E8;&#x5206;&#x5B83;&#x7684;&#x529F;&#x80FD;&#x3002;&#x56E0;&#x4E3A;&#x624B;&#x5DE5;&#x7F16;&#x5199;&#x8F6C;&#x53D1;&#x51FD;&#x6570;&#x975E;&#x5E38;&#x7E41;&#x7410;&#xFF0C;Haxe &#x5141;&#x8BB8;&#x6DFB;&#x52A0; :forward &#x5143;&#x6570;&#x636E;&#x5230;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @:forward(push, pop) abstract MyArray  S ( ArrayS ) { public inline function new () { this = []; } } class Main { static public function main () { var myArray = new MyArray (); myArray.push( 12 ); myArray.pop(); // MyArrayInt has no field length //myArray.length; } } &#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x4E2D;&#x7684; MyArray &#x62BD;&#x8C61;&#x7C7B;&#x5C01;&#x88C5;&#x4E86; Array&#x3002;&#x5B83;&#x7684; :forward &#x5143;&#x6570;&#x636E;&#x6709;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5BF9;&#x5E94;&#x8981;&#x88AB;&#x8F6C;&#x53D1;&#x5230;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x540D;&#x3002;&#x5728;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C; main &#x65B9;&#x6CD5;&#x5B9E;&#x4F8B;&#x5316; MyArray &#x5E76;&#x8BBF;&#x95EE;&#x5B83;&#x7684; push &#x548C; pop &#x65B9;&#x6CD5;&#x3002;&#x6CE8;&#x91CA;&#x884C;&#x8868;&#x660E; length &#x5B57;&#x6BB5;&#x662F;&#x4E0D;&#x53EF;&#x7528;&#x7684;&#x3002; &#x50CF;&#x5F80;&#x5E38;&#x4E00;&#x6837;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x67E5;&#x770B; JavaScript &#x8F93;&#x51FA;&#x6765;&#x770B;&#x4E00;&#x4E0B;&#x4EE3;&#x7801;&#x5982;&#x4F55;&#x751F;&#x6210;&#xFF1A; 1 2 3 4 5 Main.main = function () { var myArray = []; myArray.push( 12 ); myArray.pop(); }; &#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; :forward &#x800C;&#x4E0D;&#x5E26;&#x4EFB;&#x4F55;&#x53C2;&#x6570;&#xFF0C;&#x6765;&#x8F6C;&#x53D1;&#x6240;&#x6709;&#x5B57;&#x6BB5;&#x3002;&#x5F53;&#x7136; Haxe &#x7F16;&#x8BD1;&#x5668;&#x4ECD;&#x7136;&#x4FDD;&#x8BC1;&#x5B57;&#x6BB5;&#x5B9E;&#x9645;&#x4E0A;&#x5B58;&#x5728;&#x4E8E;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x3002; &#x82B1;&#x7D6E; &#xFF1A;&#x5B9E;&#x73B0;&#x4E3A;&#x5B8F; :enum &#x548C; :forward &#x529F;&#x80FD;&#x90FD;&#x662F;&#x6700;&#x521D;&#x88AB;&#x4F7F;&#x7528; &#x6784;&#x5EFA;&#x5B8F;&#xFF08;&#x7B2C;9.5&#x8282;&#xFF09; &#x5B9E;&#x73B0;&#x7684;&#x3002;&#x867D;&#x7136;&#x8FD9;&#x53EF;&#x4EE5;&#x5728;&#x975E;&#x5B8F;&#x4EE3;&#x7801;&#x5F88;&#x597D;&#x7684;&#x8FD0;&#x884C;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x8FD9;&#x4E9B;&#x529F;&#x80FD;&#x4ECE;&#x5B8F;&#x5185;&#x90E8;&#x8FD0;&#x884C;&#x5B83;&#x4F1A;&#x5F15;&#x8D77;&#x95EE;&#x9898;&#x3002;&#x8FD9;&#x4E2A;&#x5B9E;&#x73B0;&#x540E;&#x6765;&#x88AB;&#x79FB;&#x5230;&#x7F16;&#x8BD1;&#x5668;&#x4E2D;&#x3002;"},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.5.枚举抽象类型.html","body":"2.8.5.枚举抽象类型 Haxe 3.0版本之后 通过添加 :enum 元数据到一个抽象类型的定义，这个抽象类可以被用来定义有限值的集合： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @:enum abstract HttpStatus ( Int )  var NotFound = 404 ; var MethodNotAllowed = 405 ;  class Main  static public function main ()  var status = HttpStatus.NotFound; var msg = printStatus(status);  static function printStatus (status: HttpStatus )  return switch (status)  case NotFound: \"Not found \"; case MethodNotAllowed: \" Method not allowed \";    Haxe 编译器使用它们的值替换所有的字段访问到 HttpStatus 抽象类型，在 JavaScript 的输出则很明显： 1 2 3 4 5 6 7 8 9 10 11 12 Main.main = function ()  var status = 404 ; var msg = Main.printStatus(status); ; Main.printStatus = function (status)  switch (status)  case 404 : return \"Not found \"; case 405: return \" Method not allowed \";  ; 这和访问 内联（第4.4.2节） 声明的变量很相似，但是有几个优点： 类型工具可以确保集合的所有值会被正确分配类型。 匹配模式在 匹配（第6.4节） 一个枚举抽象类型时检查其 穷尽性（第6.4.10节） 。 用更少的语句定义字段。"},"2.类型/2.8.抽象类型/2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型":{"title":"2.8.5.&#x679A;&#x4E3E;&#x62BD;&#x8C61;&#x7C7B;&#x578B;","path":"\\2.类型\\2.8.抽象类型\\2.8.5.枚举抽象类型.html#2-8-5-枚举抽象类型","body":"Haxe 3.0&#x7248;&#x672C;&#x4E4B;&#x540E; &#x901A;&#x8FC7;&#x6DFB;&#x52A0; :enum &#x5143;&#x6570;&#x636E;&#x5230;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x5B9A;&#x4E49;&#xFF0C;&#x8FD9;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x6765;&#x5B9A;&#x4E49;&#x6709;&#x9650;&#x503C;&#x7684;&#x96C6;&#x5408;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 @:enum abstract HttpStatus ( Int ) { var NotFound = 404 ; var MethodNotAllowed = 405 ; } class Main { static public function main () { var status = HttpStatus.NotFound; var msg = printStatus(status); } static function printStatus (status: HttpStatus ) { return switch (status) { case NotFound: Not found ; case MethodNotAllowed:  Method not allowed ; } } } Haxe &#x7F16;&#x8BD1;&#x5668;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x7684;&#x503C;&#x66FF;&#x6362;&#x6240;&#x6709;&#x7684;&#x5B57;&#x6BB5;&#x8BBF;&#x95EE;&#x5230; HttpStatus &#x62BD;&#x8C61;&#x7C7B;&#x578B;&#xFF0C;&#x5728; JavaScript &#x7684;&#x8F93;&#x51FA;&#x5219;&#x5F88;&#x660E;&#x663E;&#xFF1A; 1 2 3 4 5 6 7 8 9 10 11 12 Main.main = function () { var status = 404 ; var msg = Main.printStatus(status); }; Main.printStatus = function (status) { switch (status) { case 404 : return Not found ; case 405: return  Method not allowed ; } }; &#x8FD9;&#x548C;&#x8BBF;&#x95EE; &#x5185;&#x8054;&#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09; &#x58F0;&#x660E;&#x7684;&#x53D8;&#x91CF;&#x5F88;&#x76F8;&#x4F3C;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x51E0;&#x4E2A;&#x4F18;&#x70B9;&#xFF1A; &#x7C7B;&#x578B;&#x5DE5;&#x5177;&#x53EF;&#x4EE5;&#x786E;&#x4FDD;&#x96C6;&#x5408;&#x7684;&#x6240;&#x6709;&#x503C;&#x4F1A;&#x88AB;&#x6B63;&#x786E;&#x5206;&#x914D;&#x7C7B;&#x578B;&#x3002; &#x5339;&#x914D;&#x6A21;&#x5F0F;&#x5728; &#x5339;&#x914D;&#xFF08;&#x7B2C;6.4&#x8282;&#xFF09; &#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x65F6;&#x68C0;&#x67E5;&#x5176; &#x7A77;&#x5C3D;&#x6027;&#xFF08;&#x7B2C;6.4.10&#x8282;&#xFF09; &#x3002; &#x7528;&#x66F4;&#x5C11;&#x7684;&#x8BED;&#x53E5;&#x5B9A;&#x4E49;&#x5B57;&#x6BB5;&#x3002;"},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.7.核心类型抽象.html","body":"2.8.7.核心类型抽象 Haxe 标准库定义了一组基础类型作为核心类型抽象。它们通过 :coreType 元数据识别，而且缺失一个潜在类型的声明。这些抽象类型仍然可以被理解为表示不同的类型。不过，这个类型是 Haxe 目标语言原生的。 引入自定义核心类型抽象在用户代码中是很有必要的，因为它需要 Haxe 目标语言可以理解它的意思。然而，对于宏的作者和新的 Haxe 目标语言可能是很有趣的用例。 与难懂的抽象类型的相比，核心类型抽象有下面的属性： 它们没有潜在类型。 它们被认为是可空的，除非带有 :notNull 元数据的注解。 它们被允许没有表达式形式的 数组访问（第2.8.3节） 函数声明。 没有表达式的 运算符重载字段（第2.8.2节） 不会被强制追随 Haxe 的类型语法形式。"},"2.类型/2.8.抽象类型/2.8.7.核心类型抽象.html#2-8-7-核心类型抽象":{"title":"2.8.7.&#x6838;&#x5FC3;&#x7C7B;&#x578B;&#x62BD;&#x8C61;","path":"\\2.类型\\2.8.抽象类型\\2.8.7.核心类型抽象.html#2-8-7-核心类型抽象","body":"Haxe &#x6807;&#x51C6;&#x5E93;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x7EC4;&#x57FA;&#x7840;&#x7C7B;&#x578B;&#x4F5C;&#x4E3A;&#x6838;&#x5FC3;&#x7C7B;&#x578B;&#x62BD;&#x8C61;&#x3002;&#x5B83;&#x4EEC;&#x901A;&#x8FC7; :coreType &#x5143;&#x6570;&#x636E;&#x8BC6;&#x522B;&#xFF0C;&#x800C;&#x4E14;&#x7F3A;&#x5931;&#x4E00;&#x4E2A;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7684;&#x58F0;&#x660E;&#x3002;&#x8FD9;&#x4E9B;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x88AB;&#x7406;&#x89E3;&#x4E3A;&#x8868;&#x793A;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x4E0D;&#x8FC7;&#xFF0C;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x662F; Haxe &#x76EE;&#x6807;&#x8BED;&#x8A00;&#x539F;&#x751F;&#x7684;&#x3002; &#x5F15;&#x5165;&#x81EA;&#x5B9A;&#x4E49;&#x6838;&#x5FC3;&#x7C7B;&#x578B;&#x62BD;&#x8C61;&#x5728;&#x7528;&#x6237;&#x4EE3;&#x7801;&#x4E2D;&#x662F;&#x5F88;&#x6709;&#x5FC5;&#x8981;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x9700;&#x8981; Haxe &#x76EE;&#x6807;&#x8BED;&#x8A00;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x5B83;&#x7684;&#x610F;&#x601D;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x5BF9;&#x4E8E;&#x5B8F;&#x7684;&#x4F5C;&#x8005;&#x548C;&#x65B0;&#x7684; Haxe &#x76EE;&#x6807;&#x8BED;&#x8A00;&#x53EF;&#x80FD;&#x662F;&#x5F88;&#x6709;&#x8DA3;&#x7684;&#x7528;&#x4F8B;&#x3002; &#x4E0E;&#x96BE;&#x61C2;&#x7684;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x76F8;&#x6BD4;&#xFF0C;&#x6838;&#x5FC3;&#x7C7B;&#x578B;&#x62BD;&#x8C61;&#x6709;&#x4E0B;&#x9762;&#x7684;&#x5C5E;&#x6027;&#xFF1A; &#x5B83;&#x4EEC;&#x6CA1;&#x6709;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x3002; &#x5B83;&#x4EEC;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x53EF;&#x7A7A;&#x7684;&#xFF0C;&#x9664;&#x975E;&#x5E26;&#x6709; :notNull &#x5143;&#x6570;&#x636E;&#x7684;&#x6CE8;&#x89E3;&#x3002; &#x5B83;&#x4EEC;&#x88AB;&#x5141;&#x8BB8;&#x6CA1;&#x6709;&#x8868;&#x8FBE;&#x5F0F;&#x5F62;&#x5F0F;&#x7684; &#x6570;&#x7EC4;&#x8BBF;&#x95EE;&#xFF08;&#x7B2C;2.8.3&#x8282;&#xFF09; &#x51FD;&#x6570;&#x58F0;&#x660E;&#x3002; &#x6CA1;&#x6709;&#x8868;&#x8FBE;&#x5F0F;&#x7684; &#x8FD0;&#x7B97;&#x7B26;&#x91CD;&#x8F7D;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;2.8.2&#x8282;&#xFF09; &#x4E0D;&#x4F1A;&#x88AB;&#x5F3A;&#x5236;&#x8FFD;&#x968F; Haxe &#x7684;&#x7C7B;&#x578B;&#x8BED;&#x6CD5;&#x5F62;&#x5F0F;&#x3002;"},"2.类型/2.9.单形/2.9.单形.html":{"title":"","path":"\\2.类型\\2.9.单形\\2.9.单形.html","body":"2.9.单形 一个单形（Monomorph）会在 一致性检查（3.5） 时变形（morph）为另外一个类型。有关这一类型的进一步细节将在 类型推断（3.6）中进行解释。 A monomorph is a type which may, through unification(3.5), morph into a different type later. Further details about this type are explained in the section on type inference(3.6)"},"2.类型/2.9.单形/2.9.单形.html#2-9-单形":{"title":"2.9.&#x5355;&#x5F62;","path":"\\2.类型\\2.9.单形\\2.9.单形.html#2-9-单形","body":"&#x4E00;&#x4E2A;&#x5355;&#x5F62;&#xFF08;Monomorph&#xFF09;&#x4F1A;&#x5728; &#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#xFF08;3.5&#xFF09; &#x65F6;&#x53D8;&#x5F62;&#xFF08;morph&#xFF09;&#x4E3A;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x6709;&#x5173;&#x8FD9;&#x4E00;&#x7C7B;&#x578B;&#x7684;&#x8FDB;&#x4E00;&#x6B65;&#x7EC6;&#x8282;&#x5C06;&#x5728; &#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;3.6&#xFF09;&#x4E2D;&#x8FDB;&#x884C;&#x89E3;&#x91CA;&#x3002; A monomorph is a type which may, through unification(3.5), morph into a different type later. Further details about this type are explained in the section on type inference(3.6)"},"2.类型/2.8.抽象类型/2.8.抽象类型.html":{"title":"","path":"\\2.类型\\2.8.抽象类型\\2.8.抽象类型.html","body":"2.8.抽象类型 一个抽象类型在运行时实际上是一个不同的类型。它是一个编译时功能，在固有类型之上定义来修改或者增强它们的行为的类型： 1 2 3 4 5 abstract AbstractInt ( Int )  inline public function new (i: Int )  this = i;   从这个例子我们可以得出以下几点 ： 关键字 abstract 表示我们声明一个抽象类型 AbstractInt 是抽象类型的名称，可以是任何符合类型标识符规则的字符 圆括号 () 中的是潜在的类型 Int 大括号 {} 中的是字段 构造函数 new 接受一个 Int 类型的参数 i 潜在类型 定义 ：潜在类型 抽象类型的潜在类型是用来代表抽象类型在运行时的类型。通常是一个具体的（即非抽象的）类型，但是也可以是另一个抽象类型。 这个语法让人联想到类，语义上它们事实的确非常相似。实际上，每个在抽象类型“体”中的（即所有花括号之后的一切）都被解析为类字段。抽象类型可以有 方法（第4.3节） 字段和 非物理（第4.2.3节） 属性（第4.2节） 字段。此外，抽象类型可以被像类一样实例化和使用： 1 2 3 4 5 6 class Main  static public function main ()  var a = new AbstractInt ( 12 ); trace (a); //12   如前所述，抽象类型是一个编译时功能，所以看看上面示例实际生成的内容会很有趣。一个合适的目标是 JavaScript，它往往可以生成简洁干净的代码。编译上面的代码（使用 haxe -main MyAbstract -js myabstract.js ）会显示如下 JavaScript 代码： 1 2 var a = 12 ; console.log(a); 抽象类型 Abstract 在输出中完全消失了，剩下的只是一个它潜在类型的值，Int。因为 Abstract 的构造函数是内联的 （在 内联部分（第4.4.2节） 我们将进行学习的内容 ） ，它的内联表达式分配一个值到这里。当以类进行思考的话，这可能是令人惊讶的。然而，这恰巧是我们希望在抽象类型的上下文中表达的。抽象类型的任何内联成员方法都可以分配到这里，从而修改 “内部的值”。在这点上，一个好的问题是 “如果一个成员函数没有被内联声明将发生什么”，因为代码显然必须放到某个地方。Haxe 创建一个私有类，即已知的实现类，它将所有的抽象成员函数作为接受一个附加的类型为潜在类型的首参数的静态函数。虽然技术上上这是一个实现细节，但它可以被用于 选择函数（第2.8.4节） 。 花絮 ：基本类型和抽象类型 在抽象类型到来之前，所有基本类型都实现为外部类或者枚举。虽然这很好的考虑了某些方面，如 Int 是 Float 的一个“子类”，但这也在别处引起问题。例如，通过 Float 作为一个外部类，它会和空的结构 {} 统一，使得不可能限制一个类型只接受真正的对象。 An abstract type is a type which is actually a different type at run-time. It is a compile-time feature which defines types “over” concrete types in order to modify or augment their behavior: 1 2 3 4 5 abstract AbstractInt ( Int )  inline public function new (i: Int )  this = i;   We can derive the following from this example: The keyword abstract denotes that we are declaring an abstract type. AbstractInt is the name of the abstract type and could be anything conforming to the rules for type identifiers. The underlying type Int is enclosed in parentheses () . The fields are enclosed in curly braces {} , which are a constructor function new accepting one argument i of type Int . Define: Underlying Type The underlying type of an abstract is the type which is used to represent said abstract at runtime. It is usually a concrete (i.e. non-abstract) type but could be another abstract type as well. The syntax is reminiscent of classes and the semantics are indeed similar. In fact, everything in the “body” of an abstract (everything after the opening curly brace) is parsed as class fields. Abstracts may have method fields and non- physical property fields. Furthermore, abstracts can be instantiated and used just like classes: 1 2 3 4 5 6 class Main  static public function main ()  var a = new AbstractInt ( 12 ); trace (a); // 12   As mentioned before, abstracts are a compile-time feature, so it is interesting to see what the above actually generates. A suitable target for this is JavaScript, which tends to generate concise and clean code. Compiling the above using haxe --main MyAbstract --js myabstract.js shows this JavaScript code: 1 2 var a = 12 ; console.log(a); The abstract type Abstract completely disappeared from the output and all that is left is a value of its underlying type, Int . This is because the constructor of Abstract is inlined - something we shall learn about later in the section Inline - and its inlined expression assigns a value to this . This might be surprising when thinking in terms of classes. However, it is precisely what we want to express in the context of abstracts. Any inlined member method of an abstract can assign to this and thus modify the “internal value”. One problem may be apparent - what happens if a member function is not declared inline? The code obviously must be placed somewhere! Haxe handles this by creating a private class, known as the implementation class , which contains all the abstract member functions as static functions accepting an additional first argument this of the underlying type. Trivia: Basic Types and abstracts Before the advent of abstract types, all basic types were implemented as extern classes or enums. While this nicely took care of some aspects such as Int being a “child class” of Float , it caused issues elsewhere. For instance, with Float being an extern class, it would unify with the empty structure {} , making it impossible to constrain a type to accept only real objects."},"2.类型/2.8.抽象类型/2.8.抽象类型.html#2-8-抽象类型":{"title":"2.8.&#x62BD;&#x8C61;&#x7C7B;&#x578B;","path":"\\2.类型\\2.8.抽象类型\\2.8.抽象类型.html#2-8-抽象类型","body":"&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x65F6;&#x529F;&#x80FD;&#xFF0C;&#x5728;&#x56FA;&#x6709;&#x7C7B;&#x578B;&#x4E4B;&#x4E0A;&#x5B9A;&#x4E49;&#x6765;&#x4FEE;&#x6539;&#x6216;&#x8005;&#x589E;&#x5F3A;&#x5B83;&#x4EEC;&#x7684;&#x884C;&#x4E3A;&#x7684;&#x7C7B;&#x578B;&#xFF1A; 1 2 3 4 5 abstract AbstractInt ( Int ) { inline public function new (i: Int ) { this = i; } } &#x4ECE;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x4EE5;&#x4E0B;&#x51E0;&#x70B9; &#xFF1A; &#x5173;&#x952E;&#x5B57; abstract &#x8868;&#x793A;&#x6211;&#x4EEC;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B; AbstractInt &#x662F;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x540D;&#x79F0;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55;&#x7B26;&#x5408;&#x7C7B;&#x578B;&#x6807;&#x8BC6;&#x7B26;&#x89C4;&#x5219;&#x7684;&#x5B57;&#x7B26; &#x5706;&#x62EC;&#x53F7; () &#x4E2D;&#x7684;&#x662F;&#x6F5C;&#x5728;&#x7684;&#x7C7B;&#x578B; Int &#x5927;&#x62EC;&#x53F7; {} &#x4E2D;&#x7684;&#x662F;&#x5B57;&#x6BB5; &#x6784;&#x9020;&#x51FD;&#x6570; new &#x63A5;&#x53D7;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570; i &#x6F5C;&#x5728;&#x7C7B;&#x578B; &#x5B9A;&#x4E49; &#xFF1A;&#x6F5C;&#x5728;&#x7C7B;&#x578B; &#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x662F;&#x7528;&#x6765;&#x4EE3;&#x8868;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5728;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x901A;&#x5E38;&#x662F;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x7684;&#xFF08;&#x5373;&#x975E;&#x62BD;&#x8C61;&#x7684;&#xFF09;&#x7C7B;&#x578B;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x53E6;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x3002; &#x8FD9;&#x4E2A;&#x8BED;&#x6CD5;&#x8BA9;&#x4EBA;&#x8054;&#x60F3;&#x5230;&#x7C7B;&#xFF0C;&#x8BED;&#x4E49;&#x4E0A;&#x5B83;&#x4EEC;&#x4E8B;&#x5B9E;&#x7684;&#x786E;&#x975E;&#x5E38;&#x76F8;&#x4F3C;&#x3002;&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x6BCF;&#x4E2A;&#x5728;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x201C;&#x4F53;&#x201D;&#x4E2D;&#x7684;&#xFF08;&#x5373;&#x6240;&#x6709;&#x82B1;&#x62EC;&#x53F7;&#x4E4B;&#x540E;&#x7684;&#x4E00;&#x5207;&#xFF09;&#x90FD;&#x88AB;&#x89E3;&#x6790;&#x4E3A;&#x7C7B;&#x5B57;&#x6BB5;&#x3002;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x6709; &#x65B9;&#x6CD5;&#xFF08;&#x7B2C;4.3&#x8282;&#xFF09; &#x5B57;&#x6BB5;&#x548C; &#x975E;&#x7269;&#x7406;&#xFF08;&#x7B2C;4.2.3&#x8282;&#xFF09; &#x5C5E;&#x6027;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09; &#x5B57;&#x6BB5;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x50CF;&#x7C7B;&#x4E00;&#x6837;&#x5B9E;&#x4F8B;&#x5316;&#x548C;&#x4F7F;&#x7528;&#xFF1A; 1 2 3 4 5 6 class Main { static public function main () { var a = new AbstractInt ( 12 ); trace (a); //12 } } &#x5982;&#x524D;&#x6240;&#x8FF0;&#xFF0C;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x662F;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x65F6;&#x529F;&#x80FD;&#xFF0C;&#x6240;&#x4EE5;&#x770B;&#x770B;&#x4E0A;&#x9762;&#x793A;&#x4F8B;&#x5B9E;&#x9645;&#x751F;&#x6210;&#x7684;&#x5185;&#x5BB9;&#x4F1A;&#x5F88;&#x6709;&#x8DA3;&#x3002;&#x4E00;&#x4E2A;&#x5408;&#x9002;&#x7684;&#x76EE;&#x6807;&#x662F; JavaScript&#xFF0C;&#x5B83;&#x5F80;&#x5F80;&#x53EF;&#x4EE5;&#x751F;&#x6210;&#x7B80;&#x6D01;&#x5E72;&#x51C0;&#x7684;&#x4EE3;&#x7801;&#x3002;&#x7F16;&#x8BD1;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#xFF08;&#x4F7F;&#x7528; haxe -main MyAbstract -js myabstract.js &#xFF09;&#x4F1A;&#x663E;&#x793A;&#x5982;&#x4E0B; JavaScript &#x4EE3;&#x7801;&#xFF1A; 1 2 var a = 12 ; console.log(a); &#x62BD;&#x8C61;&#x7C7B;&#x578B; Abstract &#x5728;&#x8F93;&#x51FA;&#x4E2D;&#x5B8C;&#x5168;&#x6D88;&#x5931;&#x4E86;&#xFF0C;&#x5269;&#x4E0B;&#x7684;&#x53EA;&#x662F;&#x4E00;&#x4E2A;&#x5B83;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7684;&#x503C;&#xFF0C;Int&#x3002;&#x56E0;&#x4E3A; Abstract &#x7684;&#x6784;&#x9020;&#x51FD;&#x6570;&#x662F;&#x5185;&#x8054;&#x7684; &#xFF08;&#x5728; &#x5185;&#x8054;&#x90E8;&#x5206;&#xFF08;&#x7B2C;4.4.2&#x8282;&#xFF09; &#x6211;&#x4EEC;&#x5C06;&#x8FDB;&#x884C;&#x5B66;&#x4E60;&#x7684;&#x5185;&#x5BB9; &#xFF09; &#xFF0C;&#x5B83;&#x7684;&#x5185;&#x8054;&#x8868;&#x8FBE;&#x5F0F;&#x5206;&#x914D;&#x4E00;&#x4E2A;&#x503C;&#x5230;&#x8FD9;&#x91CC;&#x3002;&#x5F53;&#x4EE5;&#x7C7B;&#x8FDB;&#x884C;&#x601D;&#x8003;&#x7684;&#x8BDD;&#xFF0C;&#x8FD9;&#x53EF;&#x80FD;&#x662F;&#x4EE4;&#x4EBA;&#x60CA;&#x8BB6;&#x7684;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x8FD9;&#x6070;&#x5DE7;&#x662F;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x5728;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x8868;&#x8FBE;&#x7684;&#x3002;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x7684;&#x4EFB;&#x4F55;&#x5185;&#x8054;&#x6210;&#x5458;&#x65B9;&#x6CD5;&#x90FD;&#x53EF;&#x4EE5;&#x5206;&#x914D;&#x5230;&#x8FD9;&#x91CC;&#xFF0C;&#x4ECE;&#x800C;&#x4FEE;&#x6539; &#x201C;&#x5185;&#x90E8;&#x7684;&#x503C;&#x201D;&#x3002;&#x5728;&#x8FD9;&#x70B9;&#x4E0A;&#xFF0C;&#x4E00;&#x4E2A;&#x597D;&#x7684;&#x95EE;&#x9898;&#x662F; &#x201C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#x51FD;&#x6570;&#x6CA1;&#x6709;&#x88AB;&#x5185;&#x8054;&#x58F0;&#x660E;&#x5C06;&#x53D1;&#x751F;&#x4EC0;&#x4E48;&#x201D;&#xFF0C;&#x56E0;&#x4E3A;&#x4EE3;&#x7801;&#x663E;&#x7136;&#x5FC5;&#x987B;&#x653E;&#x5230;&#x67D0;&#x4E2A;&#x5730;&#x65B9;&#x3002;Haxe &#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x79C1;&#x6709;&#x7C7B;&#xFF0C;&#x5373;&#x5DF2;&#x77E5;&#x7684;&#x5B9E;&#x73B0;&#x7C7B;&#xFF0C;&#x5B83;&#x5C06;&#x6240;&#x6709;&#x7684;&#x62BD;&#x8C61;&#x6210;&#x5458;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x9644;&#x52A0;&#x7684;&#x7C7B;&#x578B;&#x4E3A;&#x6F5C;&#x5728;&#x7C7B;&#x578B;&#x7684;&#x9996;&#x53C2;&#x6570;&#x7684;&#x9759;&#x6001;&#x51FD;&#x6570;&#x3002;&#x867D;&#x7136;&#x6280;&#x672F;&#x4E0A;&#x4E0A;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5B9E;&#x73B0;&#x7EC6;&#x8282;&#xFF0C;&#x4F46;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x7528;&#x4E8E; &#x9009;&#x62E9;&#x51FD;&#x6570;&#xFF08;&#x7B2C;2.8.4&#x8282;&#xFF09; &#x3002; &#x82B1;&#x7D6E; &#xFF1A;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x548C;&#x62BD;&#x8C61;&#x7C7B;&#x578B; &#x5728;&#x62BD;&#x8C61;&#x7C7B;&#x578B;&#x5230;&#x6765;&#x4E4B;&#x524D;&#xFF0C;&#x6240;&#x6709;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x90FD;&#x5B9E;&#x73B0;&#x4E3A;&#x5916;&#x90E8;&#x7C7B;&#x6216;&#x8005;&#x679A;&#x4E3E;&#x3002;&#x867D;&#x7136;&#x8FD9;&#x5F88;&#x597D;&#x7684;&#x8003;&#x8651;&#x4E86;&#x67D0;&#x4E9B;&#x65B9;&#x9762;&#xFF0C;&#x5982; Int &#x662F; Float &#x7684;&#x4E00;&#x4E2A;&#x201C;&#x5B50;&#x7C7B;&#x201D;&#xFF0C;&#x4F46;&#x8FD9;&#x4E5F;&#x5728;&#x522B;&#x5904;&#x5F15;&#x8D77;&#x95EE;&#x9898;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x901A;&#x8FC7; Float &#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5916;&#x90E8;&#x7C7B;&#xFF0C;&#x5B83;&#x4F1A;&#x548C;&#x7A7A;&#x7684;&#x7ED3;&#x6784; {} &#x7EDF;&#x4E00;&#xFF0C;&#x4F7F;&#x5F97;&#x4E0D;&#x53EF;&#x80FD;&#x9650;&#x5236;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53EA;&#x63A5;&#x53D7;&#x771F;&#x6B63;&#x7684;&#x5BF9;&#x8C61;&#x3002; An abstract type is a type which is actually a different type at run-time. It is a compile-time feature which defines types &#x201C;over&#x201D; concrete types in order to modify or augment their behavior: 1 2 3 4 5 abstract AbstractInt ( Int ) { inline public function new (i: Int ) { this = i; } } We can derive the following from this example: The keyword abstract denotes that we are declaring an abstract type. AbstractInt is the name of the abstract type and could be anything conforming to the rules for type identifiers. The underlying type Int is enclosed in parentheses () . The fields are enclosed in curly braces {} , which are a constructor function new accepting one argument i of type Int . Define: Underlying Type The underlying type of an abstract is the type which is used to represent said abstract at runtime. It is usually a concrete (i.e. non-abstract) type but could be another abstract type as well. The syntax is reminiscent of classes and the semantics are indeed similar. In fact, everything in the &#x201C;body&#x201D; of an abstract (everything after the opening curly brace) is parsed as class fields. Abstracts may have method fields and non- physical property fields. Furthermore, abstracts can be instantiated and used just like classes: 1 2 3 4 5 6 class Main { static public function main () { var a = new AbstractInt ( 12 ); trace (a); // 12 } } As mentioned before, abstracts are a compile-time feature, so it is interesting to see what the above actually generates. A suitable target for this is JavaScript, which tends to generate concise and clean code. Compiling the above using haxe --main MyAbstract --js myabstract.js shows this JavaScript code: 1 2 var a = 12 ; console.log(a); The abstract type Abstract completely disappeared from the output and all that is left is a value of its underlying type, Int . This is because the constructor of Abstract is inlined - something we shall learn about later in the section Inline - and its inlined expression assigns a value to this . This might be surprising when thinking in terms of classes. However, it is precisely what we want to express in the context of abstracts. Any inlined member method of an abstract can assign to this and thus modify the &#x201C;internal value&#x201D;. One problem may be apparent - what happens if a member function is not declared inline? The code obviously must be placed somewhere! Haxe handles this by creating a private class, known as the implementation class , which contains all the abstract member functions as static functions accepting an additional first argument this of the underlying type. Trivia: Basic Types and abstracts Before the advent of abstract types, all basic types were implemented as extern classes or enums. While this nicely took care of some aspects such as Int being a &#x201C;child class&#x201D; of Float , it caused issues elsewhere. For instance, with Float being an extern class, it would unify with the empty structure {} , making it impossible to constrain a type to accept only real objects."},"3.类型系统/3.1.Typedef/3.1.Typedef.html":{"title":"","path":"\\3.类型系统\\3.1.Typedef\\3.1.Typedef.html","body":"3.1.Typedef 在讨论 匿名结构（第2.5节 ） 的时候我们简要的介绍了如何通过关键字 typedef 给定一个名字来缩短一个复杂的 匿名结构（第2.5节 ）类型的声明。这正是 typedef 所擅长的事情。给匿名结构类型命名甚至可以认为是它们的主要用途。事实上，这种方式的使用是如此的常见以至于许多 Haxe 用户甚至认为 typedef 实际上就是结构类型。 typedef 可以给任何其它的类型命名： 1 typedef IA = Array  Int ; 这使我们能使用 IA 到我们通常使用 ArrayInt 的地方。虽然这只不过节省了几次敲键盘的次数，但在用于更复杂、混合的类型时会产生很大的差异。再一次，这正是为什么 typedef 和结构看起来那么连贯的原因： 1 2 3 4 typedef User =  var age : Int ; var name : String ;  一个 typedef 并不是一个文本的替换，而是实际上一个真实的类型。它甚至可以有 类型参数（第3.2节） ，就像 Haxe 标准库中的 Iterable 类型所展示的： 1 2 3 typedef IterableT =  function iterator () : Iterator T;  可选字段 标记一个结构类型中的字段为可选，使用 @:optional 元数据。 1 2 3 4 5 typedef User =  var age : Int ; var name : String ; @:optional var phoneNumber : String; "},"3.类型系统/3.1.Typedef/3.1.Typedef.html#3-1-Typedef":{"title":"3.1.Typedef","path":"\\3.类型系统\\3.1.Typedef\\3.1.Typedef.html#3-1-Typedef","body":"&#x5728;&#x8BA8;&#x8BBA; &#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF08;&#x7B2C;2.5&#x8282; &#xFF09; &#x7684;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x7B80;&#x8981;&#x7684;&#x4ECB;&#x7ECD;&#x4E86;&#x5982;&#x4F55;&#x901A;&#x8FC7;&#x5173;&#x952E;&#x5B57; typedef &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x540D;&#x5B57;&#x6765;&#x7F29;&#x77ED;&#x4E00;&#x4E2A;&#x590D;&#x6742;&#x7684; &#x533F;&#x540D;&#x7ED3;&#x6784;&#xFF08;&#x7B2C;2.5&#x8282; &#xFF09;&#x7C7B;&#x578B;&#x7684;&#x58F0;&#x660E;&#x3002;&#x8FD9;&#x6B63;&#x662F; typedef &#x6240;&#x64C5;&#x957F;&#x7684;&#x4E8B;&#x60C5;&#x3002;&#x7ED9;&#x533F;&#x540D;&#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x547D;&#x540D;&#x751A;&#x81F3;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;&#x5B83;&#x4EEC;&#x7684;&#x4E3B;&#x8981;&#x7528;&#x9014;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x7684;&#x4F7F;&#x7528;&#x662F;&#x5982;&#x6B64;&#x7684;&#x5E38;&#x89C1;&#x4EE5;&#x81F3;&#x4E8E;&#x8BB8;&#x591A; Haxe &#x7528;&#x6237;&#x751A;&#x81F3;&#x8BA4;&#x4E3A; typedef &#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x662F;&#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x3002; typedef &#x53EF;&#x4EE5;&#x7ED9;&#x4EFB;&#x4F55;&#x5176;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x547D;&#x540D;&#xFF1A; 1 typedef IA = Array  Int ; &#x8FD9;&#x4F7F;&#x6211;&#x4EEC;&#x80FD;&#x4F7F;&#x7528; IA &#x5230;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x4F7F;&#x7528; ArrayInt &#x7684;&#x5730;&#x65B9;&#x3002;&#x867D;&#x7136;&#x8FD9;&#x53EA;&#x4E0D;&#x8FC7;&#x8282;&#x7701;&#x4E86;&#x51E0;&#x6B21;&#x6572;&#x952E;&#x76D8;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x4F46;&#x5728;&#x7528;&#x4E8E;&#x66F4;&#x590D;&#x6742;&#x3001;&#x6DF7;&#x5408;&#x7684;&#x7C7B;&#x578B;&#x65F6;&#x4F1A;&#x4EA7;&#x751F;&#x5F88;&#x5927;&#x7684;&#x5DEE;&#x5F02;&#x3002;&#x518D;&#x4E00;&#x6B21;&#xFF0C;&#x8FD9;&#x6B63;&#x662F;&#x4E3A;&#x4EC0;&#x4E48; typedef &#x548C;&#x7ED3;&#x6784;&#x770B;&#x8D77;&#x6765;&#x90A3;&#x4E48;&#x8FDE;&#x8D2F;&#x7684;&#x539F;&#x56E0;&#xFF1A; 1 2 3 4 typedef User = { var age : Int ; var name : String ; } &#x4E00;&#x4E2A; typedef &#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x6587;&#x672C;&#x7684;&#x66FF;&#x6362;&#xFF0C;&#x800C;&#x662F;&#x5B9E;&#x9645;&#x4E0A;&#x4E00;&#x4E2A;&#x771F;&#x5B9E;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x5B83;&#x751A;&#x81F3;&#x53EF;&#x4EE5;&#x6709; &#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.2&#x8282;&#xFF09; &#xFF0C;&#x5C31;&#x50CF; Haxe &#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684; Iterable &#x7C7B;&#x578B;&#x6240;&#x5C55;&#x793A;&#x7684;&#xFF1A; 1 2 3 typedef IterableT = { function iterator () : Iterator T; } &#x53EF;&#x9009;&#x5B57;&#x6BB5; &#x6807;&#x8BB0;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x7C7B;&#x578B;&#x4E2D;&#x7684;&#x5B57;&#x6BB5;&#x4E3A;&#x53EF;&#x9009;&#xFF0C;&#x4F7F;&#x7528; @:optional &#x5143;&#x6570;&#x636E;&#x3002; 1 2 3 4 5 typedef User = { var age : Int ; var name : String ; @:optional var phoneNumber : String; }"},"3.类型系统/3.2.类型参数/3.2.1.约束.html":{"title":"","path":"\\3.类型系统\\3.2.类型参数\\3.2.1.约束.html","body":"3.2.1.约束 类型参数可以通过多种类型被约束： Type parameters can be constrained to multiple types: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 typedef Measurable =  public var length( default , null ): Int ;  class Main  static public function main ()  trace (test([])); trace (test([ \"bar\" , \"foo\" ])); // String should be IterableString // test(\"foo\");  # if (haxe_ver = 4) static function testT:IterableString &amp; Measurable(a:T)  # else static function testT:(IterableString, Measurable)(a:T)  # end if (a.length == 0 ) return \"empty\" ; return a.iterator().next();   方法 test 的类型参数 T 被约束为 IterableString 和 Measurable 。后者为方便起见使用了 typedef（第3.1节）关键字定义且需要兼容有一个 Int 类型 名为 length 的只读属性（第4.2节）。约束指明一个兼容的类型满足： The test method contains a type parameter T that is constrained to the types IterableString and Measurable . The latter is defined using a typedef (3.1) for convenience and requires compatible types to have a read-only property (4.2) named length of type Int . The constraints then indicate that a type is compatible if: 与 IterableString 兼容 并具有一个 Int 类型且名为 length 的属性 it is compatible with IterableString and has a length property of type Int . 我们可以看到，在第7行调用 test 并传递一个空数组，以及第8行传递 ArrayString 是没有问题的。因为数组具有 length 属性以及 iterable 方法。然而，传递一个字符串作为参数，如第9行则会导致约束失败，因为字符串不兼容 IterableT 。 In the above example, we can see that invoking test with an empty array on line 7 and an ArrayString on line 8 works fine. This is because Array has both a length property and an iterator method. However, passing a String as argument on line 9 fails the constraint check because String is not compatible with IterableT ."},"3.类型系统/3.2.类型参数/3.2.1.约束.html#3-2-1-约束":{"title":"3.2.1.&#x7EA6;&#x675F;","path":"\\3.类型系统\\3.2.类型参数\\3.2.1.约束.html#3-2-1-约束","body":"&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x591A;&#x79CD;&#x7C7B;&#x578B;&#x88AB;&#x7EA6;&#x675F;&#xFF1A; Type parameters can be constrained to multiple types: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 typedef Measurable = { public var length( default , null ): Int ; } class Main { static public function main () { trace (test([])); trace (test([ bar , foo ])); // String should be IterableString // test(foo); } # if (haxe_ver = 4) static function testT:IterableString &amp; Measurable(a:T) { # else static function testT:(IterableString, Measurable)(a:T) { # end if (a.length == 0 ) return empty ; return a.iterator().next(); } } &#x65B9;&#x6CD5; test &#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570; T &#x88AB;&#x7EA6;&#x675F;&#x4E3A; IterableString &#x548C; Measurable &#x3002;&#x540E;&#x8005;&#x4E3A;&#x65B9;&#x4FBF;&#x8D77;&#x89C1;&#x4F7F;&#x7528;&#x4E86; typedef&#xFF08;&#x7B2C;3.1&#x8282;&#xFF09;&#x5173;&#x952E;&#x5B57;&#x5B9A;&#x4E49;&#x4E14;&#x9700;&#x8981;&#x517C;&#x5BB9;&#x6709;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B; &#x540D;&#x4E3A; length &#x7684;&#x53EA;&#x8BFB;&#x5C5E;&#x6027;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#x3002;&#x7EA6;&#x675F;&#x6307;&#x660E;&#x4E00;&#x4E2A;&#x517C;&#x5BB9;&#x7684;&#x7C7B;&#x578B;&#x6EE1;&#x8DB3;&#xFF1A; The test method contains a type parameter T that is constrained to the types IterableString and Measurable . The latter is defined using a typedef (3.1) for convenience and requires compatible types to have a read-only property (4.2) named length of type Int . The constraints then indicate that a type is compatible if: &#x4E0E; IterableString &#x517C;&#x5BB9; &#x5E76;&#x5177;&#x6709;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x4E14;&#x540D;&#x4E3A; length &#x7684;&#x5C5E;&#x6027; it is compatible with IterableString and has a length property of type Int . &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x5728;&#x7B2C;7&#x884C;&#x8C03;&#x7528; test &#x5E76;&#x4F20;&#x9012;&#x4E00;&#x4E2A;&#x7A7A;&#x6570;&#x7EC4;&#xFF0C;&#x4EE5;&#x53CA;&#x7B2C;8&#x884C;&#x4F20;&#x9012; ArrayString &#x662F;&#x6CA1;&#x6709;&#x95EE;&#x9898;&#x7684;&#x3002;&#x56E0;&#x4E3A;&#x6570;&#x7EC4;&#x5177;&#x6709; length &#x5C5E;&#x6027;&#x4EE5;&#x53CA; iterable &#x65B9;&#x6CD5;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4F20;&#x9012;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x7B2C;9&#x884C;&#x5219;&#x4F1A;&#x5BFC;&#x81F4;&#x7EA6;&#x675F;&#x5931;&#x8D25;&#xFF0C;&#x56E0;&#x4E3A;&#x5B57;&#x7B26;&#x4E32;&#x4E0D;&#x517C;&#x5BB9; IterableT &#x3002; In the above example, we can see that invoking test with an empty array on line 7 and an ArrayString on line 8 works fine. This is because Array has both a length property and an iterator method. However, passing a String as argument on line 9 fails the constraint check because String is not compatible with IterableT ."},"3.类型系统/3.2.类型参数/3.2.类型参数.html":{"title":"","path":"\\3.类型系统\\3.2.类型参数\\3.2.类型参数.html","body":"3.2.类型参数 Haxe允许许多类型的参数化，就像类字段（第4章）和枚举构造函数（第2.4.1节）。类型参数通过闭合的尖括号囊括以逗号分隔的类型参数名来定义。一个简单的例子来自于Haxe标准库，就是 Array： Haxe allows parametrization of a number of types, as well as class ﬁelds (4) and enum constructors (2.4.1). Type parameters are deﬁned by enclosing comma-separated type parameter names in angle brackets . A simple example from the Haxe Standard Library is Array: 1 2 3 class Array  T   function push (x : T ) : Int ;  每当一个Array的实例被创建，它的类型参数 T 成为一个 单形（第2.9节）。也就是说，它可以被绑定到任何类型，但是一次只有一个。可以是显式地触发绑定，通过调用构造函数并显式地提供类型（ new ArrayString() ），或者隐式地触发，通过类型推断（第3.6节），例如当我们调用 arrayInstance.push(foo) 。 Whenever an instance of Array is created, its type parameter T becomes a monomorph (2.9). That is, it can be bound to any type, but only one at a time. This binding can happen explicitly by invoking the constructor with explicit types (new Array()) or implicitly by type inference (3.6), e.g. when invoking arrayInstance.push(“foo”). 在一个类的定义中使用类型参数时，除非加入了约束（第3.2.1节）否则这些类型参数都没有指定特定的类型。因此编译器必须假定这些类型参数可以被分配为任意类型使用。因此，不能访问类型参数的字段或者 类型转换（第5.23）为一个类型参数类型。也不可能为一个类型参数创建新的实例，除非类型参数是泛型（第3.3节）并且被相应的约束。 Inside the deﬁnition of a class with type parameters,these type parameters are an unspeciﬁc type. Unless constraints (3.2.1) are added, the compiler has to assume that the type parameters could be used with any type. As a consequence, it is not possible to access ﬁelds of type parameters or cast (5.23) to a type parameter type. It is also not possible to create a new instance of a type parameter type, unless the type parameter is generic (3.3) and constrained accordingly. 下面的表格展示了允许声明类型参数的地方： The following table shows where type parameters are allowed: 位置 触发绑定 注意 Class 实例化 也可以于成员字段被访问时绑定 Enum 实例化 Enum构造函数 实例化 Function 调用中 允许用于方法和命名的局部 lvalue 函数 Structure 实例化 函数类型参数在函数被调用时触发绑定，这样的类型参数（如果无约束）接受任何类型。但是，每次调用只接受一种类型。比如当一个函数有多个参数时： With function type parameters being bound upon invocation, such a type parameter (if unconstrained) accepts any type. However, only one type per invocation is accepted. This can be utilized if a function has multiple arguments: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Main  static public function main ()  equals( 1 , 1 ); // runtime message: bar should be foo equals( \"foo\" , \"bar\" ); // compiler error: String should be Int equals( 1 , \"foo\" );  static function equalsT(expected:T, actual:T)  if (actual != expected)  trace (’$actual should be $expected’);    equals 函数的 expected 参数和 actual 参数都是类型 T 。这意味着对于每个 equals 的调用，这两个参数必须是相同类型。编译器承认第一个调用（两种参数类型都是 Int ）和第二个调用（两个参数都是 String ），但是第三个调用引发了一个编译器错误。 Both of the equals function’s arguments, expected and actual , have type T . This implies that for each invocation of equals , the two arguments must be of the same type. The compiler permits the first call (both arguments being of Int ) and the second call (both arguments being of String ) but the third attempt causes a compiler error due to a type mismatch. 花絮 ：表达式语法中的类型参数 我们常常被问及，为什么一个使用类型参数的方法不能被以 methodString(x) 形式调用。编译器给出的错误信息不是很有用。这里，有一个简单的解释：上面的代码会把  和  都解析为二元操作符，结果会解析为 (method Sting)  (x) 。 Trivia: Type parameters in expression syntax We often get the question of why a method with type parameters cannot be called as methodString(x) . The error messages the compiler gives are not very helpful. However, there is a simple reason for that: the above code is parsed as if both  and  were binary operators, yielding (method  String)  (x) ."},"3.类型系统/3.2.类型参数/3.2.类型参数.html#3-2-类型参数":{"title":"3.2.&#x7C7B;&#x578B;&#x53C2;&#x6570;","path":"\\3.类型系统\\3.2.类型参数\\3.2.类型参数.html#3-2-类型参数","body":"Haxe&#x5141;&#x8BB8;&#x8BB8;&#x591A;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x5316;&#xFF0C;&#x5C31;&#x50CF;&#x7C7B;&#x5B57;&#x6BB5;&#xFF08;&#x7B2C;4&#x7AE0;&#xFF09;&#x548C;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF08;&#x7B2C;2.4.1&#x8282;&#xFF09;&#x3002;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x901A;&#x8FC7;&#x95ED;&#x5408;&#x7684;&#x5C16;&#x62EC;&#x53F7;&#x56CA;&#x62EC;&#x4EE5;&#x9017;&#x53F7;&#x5206;&#x9694;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x540D;&#x6765;&#x5B9A;&#x4E49;&#x3002;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x4F8B;&#x5B50;&#x6765;&#x81EA;&#x4E8E;Haxe&#x6807;&#x51C6;&#x5E93;&#xFF0C;&#x5C31;&#x662F; Array&#xFF1A; Haxe allows parametrization of a number of types, as well as class &#xFB01;elds (4) and enum constructors (2.4.1). Type parameters are de&#xFB01;ned by enclosing comma-separated type parameter names in angle brackets . A simple example from the Haxe Standard Library is Array: 1 2 3 class Array  T  { function push (x : T ) : Int ; } &#x6BCF;&#x5F53;&#x4E00;&#x4E2A;Array&#x7684;&#x5B9E;&#x4F8B;&#x88AB;&#x521B;&#x5EFA;&#xFF0C;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570; T &#x6210;&#x4E3A;&#x4E00;&#x4E2A; &#x5355;&#x5F62;&#xFF08;&#x7B2C;2.9&#x8282;&#xFF09;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x88AB;&#x7ED1;&#x5B9A;&#x5230;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#xFF0C;&#x4F46;&#x662F;&#x4E00;&#x6B21;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x3002;&#x53EF;&#x4EE5;&#x662F;&#x663E;&#x5F0F;&#x5730;&#x89E6;&#x53D1;&#x7ED1;&#x5B9A;&#xFF0C;&#x901A;&#x8FC7;&#x8C03;&#x7528;&#x6784;&#x9020;&#x51FD;&#x6570;&#x5E76;&#x663E;&#x5F0F;&#x5730;&#x63D0;&#x4F9B;&#x7C7B;&#x578B;&#xFF08; new ArrayString() &#xFF09;&#xFF0C;&#x6216;&#x8005;&#x9690;&#x5F0F;&#x5730;&#x89E6;&#x53D1;&#xFF0C;&#x901A;&#x8FC7;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09;&#xFF0C;&#x4F8B;&#x5982;&#x5F53;&#x6211;&#x4EEC;&#x8C03;&#x7528; arrayInstance.push(foo) &#x3002; Whenever an instance of Array is created, its type parameter T becomes a monomorph (2.9). That is, it can be bound to any type, but only one at a time. This binding can happen explicitly by invoking the constructor with explicit types (new Array()) or implicitly by type inference (3.6), e.g. when invoking arrayInstance.push(&#x201C;foo&#x201D;). &#x5728;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5B9A;&#x4E49;&#x4E2D;&#x4F7F;&#x7528;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x65F6;&#xFF0C;&#x9664;&#x975E;&#x52A0;&#x5165;&#x4E86;&#x7EA6;&#x675F;&#xFF08;&#x7B2C;3.2.1&#x8282;&#xFF09;&#x5426;&#x5219;&#x8FD9;&#x4E9B;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x90FD;&#x6CA1;&#x6709;&#x6307;&#x5B9A;&#x7279;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x56E0;&#x6B64;&#x7F16;&#x8BD1;&#x5668;&#x5FC5;&#x987B;&#x5047;&#x5B9A;&#x8FD9;&#x4E9B;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x4E3A;&#x4EFB;&#x610F;&#x7C7B;&#x578B;&#x4F7F;&#x7528;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x4E0D;&#x80FD;&#x8BBF;&#x95EE;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x7684;&#x5B57;&#x6BB5;&#x6216;&#x8005; &#x7C7B;&#x578B;&#x8F6C;&#x6362;&#xFF08;&#x7B2C;5.23&#xFF09;&#x4E3A;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x3002;&#x4E5F;&#x4E0D;&#x53EF;&#x80FD;&#x4E3A;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x9664;&#x975E;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x662F;&#x6CDB;&#x578B;&#xFF08;&#x7B2C;3.3&#x8282;&#xFF09;&#x5E76;&#x4E14;&#x88AB;&#x76F8;&#x5E94;&#x7684;&#x7EA6;&#x675F;&#x3002; Inside the de&#xFB01;nition of a class with type parameters,these type parameters are an unspeci&#xFB01;c type. Unless constraints (3.2.1) are added, the compiler has to assume that the type parameters could be used with any type. As a consequence, it is not possible to access &#xFB01;elds of type parameters or cast (5.23) to a type parameter type. It is also not possible to create a new instance of a type parameter type, unless the type parameter is generic (3.3) and constrained accordingly. &#x4E0B;&#x9762;&#x7684;&#x8868;&#x683C;&#x5C55;&#x793A;&#x4E86;&#x5141;&#x8BB8;&#x58F0;&#x660E;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x7684;&#x5730;&#x65B9;&#xFF1A; The following table shows where type parameters are allowed: &#x4F4D;&#x7F6E; &#x89E6;&#x53D1;&#x7ED1;&#x5B9A; &#x6CE8;&#x610F; Class &#x5B9E;&#x4F8B;&#x5316; &#x4E5F;&#x53EF;&#x4EE5;&#x4E8E;&#x6210;&#x5458;&#x5B57;&#x6BB5;&#x88AB;&#x8BBF;&#x95EE;&#x65F6;&#x7ED1;&#x5B9A; Enum &#x5B9E;&#x4F8B;&#x5316; Enum&#x6784;&#x9020;&#x51FD;&#x6570; &#x5B9E;&#x4F8B;&#x5316; Function &#x8C03;&#x7528;&#x4E2D; &#x5141;&#x8BB8;&#x7528;&#x4E8E;&#x65B9;&#x6CD5;&#x548C;&#x547D;&#x540D;&#x7684;&#x5C40;&#x90E8; lvalue &#x51FD;&#x6570; Structure &#x5B9E;&#x4F8B;&#x5316; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x5728;&#x51FD;&#x6570;&#x88AB;&#x8C03;&#x7528;&#x65F6;&#x89E6;&#x53D1;&#x7ED1;&#x5B9A;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x5982;&#x679C;&#x65E0;&#x7EA6;&#x675F;&#xFF09;&#x63A5;&#x53D7;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x6BCF;&#x6B21;&#x8C03;&#x7528;&#x53EA;&#x63A5;&#x53D7;&#x4E00;&#x79CD;&#x7C7B;&#x578B;&#x3002;&#x6BD4;&#x5982;&#x5F53;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x6709;&#x591A;&#x4E2A;&#x53C2;&#x6570;&#x65F6;&#xFF1A; With function type parameters being bound upon invocation, such a type parameter (if unconstrained) accepts any type. However, only one type per invocation is accepted. This can be utilized if a function has multiple arguments: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Main { static public function main () { equals( 1 , 1 ); // runtime message: bar should be foo equals( foo , bar ); // compiler error: String should be Int equals( 1 , foo ); } static function equalsT(expected:T, actual:T) { if (actual != expected) { trace (&#x2019;$actual should be $expected&#x2019;); } } } equals &#x51FD;&#x6570;&#x7684; expected &#x53C2;&#x6570;&#x548C; actual &#x53C2;&#x6570;&#x90FD;&#x662F;&#x7C7B;&#x578B; T &#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A; equals &#x7684;&#x8C03;&#x7528;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#x5FC5;&#x987B;&#x662F;&#x76F8;&#x540C;&#x7C7B;&#x578B;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x627F;&#x8BA4;&#x7B2C;&#x4E00;&#x4E2A;&#x8C03;&#x7528;&#xFF08;&#x4E24;&#x79CD;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x90FD;&#x662F; Int &#xFF09;&#x548C;&#x7B2C;&#x4E8C;&#x4E2A;&#x8C03;&#x7528;&#xFF08;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#x90FD;&#x662F; String &#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x7B2C;&#x4E09;&#x4E2A;&#x8C03;&#x7528;&#x5F15;&#x53D1;&#x4E86;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x5668;&#x9519;&#x8BEF;&#x3002; Both of the equals function&#x2019;s arguments, expected and actual , have type T . This implies that for each invocation of equals , the two arguments must be of the same type. The compiler permits the first call (both arguments being of Int ) and the second call (both arguments being of String ) but the third attempt causes a compiler error due to a type mismatch. &#x82B1;&#x7D6E; &#xFF1A;&#x8868;&#x8FBE;&#x5F0F;&#x8BED;&#x6CD5;&#x4E2D;&#x7684;&#x7C7B;&#x578B;&#x53C2;&#x6570; &#x6211;&#x4EEC;&#x5E38;&#x5E38;&#x88AB;&#x95EE;&#x53CA;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x4E00;&#x4E2A;&#x4F7F;&#x7528;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x7684;&#x65B9;&#x6CD5;&#x4E0D;&#x80FD;&#x88AB;&#x4EE5; methodString(x) &#x5F62;&#x5F0F;&#x8C03;&#x7528;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x7ED9;&#x51FA;&#x7684;&#x9519;&#x8BEF;&#x4FE1;&#x606F;&#x4E0D;&#x662F;&#x5F88;&#x6709;&#x7528;&#x3002;&#x8FD9;&#x91CC;&#xFF0C;&#x6709;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x89E3;&#x91CA;&#xFF1A;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x4F1A;&#x628A;  &#x548C;  &#x90FD;&#x89E3;&#x6790;&#x4E3A;&#x4E8C;&#x5143;&#x64CD;&#x4F5C;&#x7B26;&#xFF0C;&#x7ED3;&#x679C;&#x4F1A;&#x89E3;&#x6790;&#x4E3A; (method Sting)  (x) &#x3002; Trivia: Type parameters in expression syntax We often get the question of why a method with type parameters cannot be called as methodString(x) . The error messages the compiler gives are not very helpful. However, there is a simple reason for that: the above code is parsed as if both  and  were binary operators, yielding (method  String)  (x) ."},"3.类型系统/3.3.泛型/3.3.泛型.html":{"title":"","path":"\\3.类型系统\\3.3.泛型\\3.3.泛型.html","body":"3.3.泛型 通常，Haxe编译器只生成一个单独的类或者函数，即使它有类型参数。生成的代码之后可能必须执行一些类型检查可能会影响一些性能。这发生在一个自然抽象概念中，目标语言的代码生成器必须假设一个类型参数可以是任何类型。 Usually, the Haxe Compiler generates only a single class or function even if it has type parameters. This results in a natural abstraction where the code generator for the target language has to assume that a type parameter could be of any type. The generated code then might have to perform some type checks which can be detrimental to performance. 一个类或者函数可以通过使用 :generic 元数据（第6.9节）归类为泛型。这导致编译器每个类型参数和破损的名字的混合，发射一个不同的类/函数。 一个这样的规范可以使得静态目标语言（第2.2节）的部分 性能关键型(performance-critical) 的代码得到性能提升，但代价是其生成的体量变大： A class or function can be made generic by attributing it with the :generic metadata (6.9). This causes the compiler to emit a distinct class/function per type parameter combination with mangled names. A speciﬁcation like this can yield a boost in performance-critical code portions on static targets (2.2) at the cost of a larger output size: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @:generic class MyValue  T   public var value: T ; public function new (value: T )  this .value = value;   class Main  static public function main ()  var a = new MyValue  String ( \"Hello\" ); var b = new MyValue  Int ( 42 );   似乎不常见这里的显式类型 MyValue，因为我们通常让类型推断（第3.6节）处理它。尽管如此，它确实需要在这种情况下被需要。编译器必须了解泛型类的准确类型一经构建。JavaScript输出显示结果： It seems unusual to see the explicit type MyValue here as we usually let type inference (3.6) deal with this. Nonetheless, it is indeed required in this case. The compiler has to know the exact type of a generic class upon construction. The JavaScript output shows the result: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ( function ()  \"use strict\" ; var Test = function ()  ; Test.main = function ()  var a = new MyValue_String ( \"Hello\" ); var b = new MyValue_Int ( 5 ); ; var MyValue_Int = function (value)  this .value = value; ; var MyValue_String = function (value)  this .value = value; ; Test.main(); )(); 我们可以确定 MyValue和MyVlue 已经变成 MyValue_String 和MyValue_Int 。这类似于泛型函数： We can identify that MyValue and MyValue have become MyValue_String and MyValue_Int respectively. This is similar for generic functions: 1 2 3 4 5 6 7 8 class Main  static public function main ()  method( \"foo\" ); method( 1 );  @:generic static function methodT(t:T)    再一次，JavaScript输出使其非常明显： Again, the JavaScript output makes it obvious: 1 2 3 4 5 6 7 8 9 10 11 12 ( function ()  \"use strict\" ; var Main = function ()   Main.method_Int = function (t)   Main.method_String = function (t)   Main.main = function ()  Main.method_String( \"foo\" ); Main.method_Int( 1 );  Main.main(); )();"},"3.类型系统/3.3.泛型/3.3.泛型.html#3-3-泛型":{"title":"3.3.&#x6CDB;&#x578B;","path":"\\3.类型系统\\3.3.泛型\\3.3.泛型.html#3-3-泛型","body":"&#x901A;&#x5E38;&#xFF0C;Haxe&#x7F16;&#x8BD1;&#x5668;&#x53EA;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x7C7B;&#x6216;&#x8005;&#x51FD;&#x6570;&#xFF0C;&#x5373;&#x4F7F;&#x5B83;&#x6709;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x3002;&#x751F;&#x6210;&#x7684;&#x4EE3;&#x7801;&#x4E4B;&#x540E;&#x53EF;&#x80FD;&#x5FC5;&#x987B;&#x6267;&#x884C;&#x4E00;&#x4E9B;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#x53EF;&#x80FD;&#x4F1A;&#x5F71;&#x54CD;&#x4E00;&#x4E9B;&#x6027;&#x80FD;&#x3002;&#x8FD9;&#x53D1;&#x751F;&#x5728;&#x4E00;&#x4E2A;&#x81EA;&#x7136;&#x62BD;&#x8C61;&#x6982;&#x5FF5;&#x4E2D;&#xFF0C;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x4EE3;&#x7801;&#x751F;&#x6210;&#x5668;&#x5FC5;&#x987B;&#x5047;&#x8BBE;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x3002; Usually, the Haxe Compiler generates only a single class or function even if it has type parameters. This results in a natural abstraction where the code generator for the target language has to assume that a type parameter could be of any type. The generated code then might have to perform some type checks which can be detrimental to performance. &#x4E00;&#x4E2A;&#x7C7B;&#x6216;&#x8005;&#x51FD;&#x6570;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F7F;&#x7528; :generic &#x5143;&#x6570;&#x636E;&#xFF08;&#x7B2C;6.9&#x8282;&#xFF09;&#x5F52;&#x7C7B;&#x4E3A;&#x6CDB;&#x578B;&#x3002;&#x8FD9;&#x5BFC;&#x81F4;&#x7F16;&#x8BD1;&#x5668;&#x6BCF;&#x4E2A;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x548C;&#x7834;&#x635F;&#x7684;&#x540D;&#x5B57;&#x7684;&#x6DF7;&#x5408;&#xFF0C;&#x53D1;&#x5C04;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x7C7B;/&#x51FD;&#x6570;&#x3002; &#x4E00;&#x4E2A;&#x8FD9;&#x6837;&#x7684;&#x89C4;&#x8303;&#x53EF;&#x4EE5;&#x4F7F;&#x5F97;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#xFF08;&#x7B2C;2.2&#x8282;&#xFF09;&#x7684;&#x90E8;&#x5206; &#x6027;&#x80FD;&#x5173;&#x952E;&#x578B;(performance-critical) &#x7684;&#x4EE3;&#x7801;&#x5F97;&#x5230;&#x6027;&#x80FD;&#x63D0;&#x5347;&#xFF0C;&#x4F46;&#x4EE3;&#x4EF7;&#x662F;&#x5176;&#x751F;&#x6210;&#x7684;&#x4F53;&#x91CF;&#x53D8;&#x5927;&#xFF1A; A class or function can be made generic by attributing it with the :generic metadata (6.9). This causes the compiler to emit a distinct class/function per type parameter combination with mangled names. A speci&#xFB01;cation like this can yield a boost in performance-critical code portions on static targets (2.2) at the cost of a larger output size: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @:generic class MyValue  T  { public var value: T ; public function new (value: T ) { this .value = value; } } class Main { static public function main () { var a = new MyValue  String ( Hello ); var b = new MyValue  Int ( 42 ); } } &#x4F3C;&#x4E4E;&#x4E0D;&#x5E38;&#x89C1;&#x8FD9;&#x91CC;&#x7684;&#x663E;&#x5F0F;&#x7C7B;&#x578B; MyValue&#xFF0C;&#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x8BA9;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09;&#x5904;&#x7406;&#x5B83;&#x3002;&#x5C3D;&#x7BA1;&#x5982;&#x6B64;&#xFF0C;&#x5B83;&#x786E;&#x5B9E;&#x9700;&#x8981;&#x5728;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x88AB;&#x9700;&#x8981;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x5FC5;&#x987B;&#x4E86;&#x89E3;&#x6CDB;&#x578B;&#x7C7B;&#x7684;&#x51C6;&#x786E;&#x7C7B;&#x578B;&#x4E00;&#x7ECF;&#x6784;&#x5EFA;&#x3002;JavaScript&#x8F93;&#x51FA;&#x663E;&#x793A;&#x7ED3;&#x679C;&#xFF1A; It seems unusual to see the explicit type MyValue here as we usually let type inference (3.6) deal with this. Nonetheless, it is indeed required in this case. The compiler has to know the exact type of a generic class upon construction. The JavaScript output shows the result: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ( function () { use strict ; var Test = function () { }; Test.main = function () { var a = new MyValue_String ( Hello ); var b = new MyValue_Int ( 5 ); }; var MyValue_Int = function (value) { this .value = value; }; var MyValue_String = function (value) { this .value = value; }; Test.main(); })(); &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x786E;&#x5B9A; MyValue&#x548C;MyVlue &#x5DF2;&#x7ECF;&#x53D8;&#x6210; MyValue_String &#x548C;MyValue_Int &#x3002;&#x8FD9;&#x7C7B;&#x4F3C;&#x4E8E;&#x6CDB;&#x578B;&#x51FD;&#x6570;&#xFF1A; We can identify that MyValue and MyValue have become MyValue_String and MyValue_Int respectively. This is similar for generic functions: 1 2 3 4 5 6 7 8 class Main { static public function main () { method( foo ); method( 1 ); } @:generic static function methodT(t:T) { } } &#x518D;&#x4E00;&#x6B21;&#xFF0C;JavaScript&#x8F93;&#x51FA;&#x4F7F;&#x5176;&#x975E;&#x5E38;&#x660E;&#x663E;&#xFF1A; Again, the JavaScript output makes it obvious: 1 2 3 4 5 6 7 8 9 10 11 12 ( function () { use strict ; var Main = function () { } Main.method_Int = function (t) { } Main.method_String = function (t) { } Main.main = function () { Main.method_String( foo ); Main.method_Int( 1 ); } Main.main(); })();"},"3.类型系统/3.4.变异/3.4.变异.html":{"title":"","path":"\\3.类型系统\\3.4.变异\\3.4.变异.html","body":"3.4.变异 虽然变异也在其它地方意义重大，但是它特别经常和类型参数一起出现，并像一个惊喜。此外，非常容易触发变异错误： While variance is also relevant in other places, it occurs particularly often with type parameters and comes as a surprise in this context. Additionally, it is very easy to trigger variance errors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Base  public function new ()    class Child extends Base   class Main  public static function main ()  var children = [ new Child ()]; // ArrayChild should be ArrayBase // Type parameters are invariant // Child should be Base var bases: Array Base = children;   显然，一个 Array 不能被分配到一个 Array，即使 Child可以被分配到Base。原因可能比较意外：因为 array 可以被写入，如通过它们的 push() 方法。忽略变异错误非常容易产生问题： Apparently,an Array cannot be assigned to an Array ,even though Child can be assigned to Base . The reason for this might be somewhat unexpected: It is not allowed because arrays can be written to, e.g. via their push() method. It is easy to generate problems by ignoring variance errors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Base  public function new ()    class Child extends Base   class OtherChild extends Base   class Main  public static function main ()  var children = [ new Child ()]; // subvert type checker var bases: Array Base = cast children; bases.push( new OtherChild ()); for (child in children)  trace (child);    这里我们使用 cast（第5.23节）破坏了类型检查，因此允许了注释行后的赋值。我们保存一个引用 bases 到原始的数组，类型为 Array。这使的推送另一个兼容Base的类型（OtherChild）到了数组。然而，我们原始的引用 children 仍然是 Array类型，当我们在迭代它的一个元素的时候遇到 OtherChild实例就会出现问题。 Here we subvert the type checker by using a cast (5.23), thus allowing the assignment after the commented line. With that we hold a reference bases to the original array, typed as Array . This allows pushing another type compatible with Base (OtherChild) onto that array. However,our original reference children is still of type Array and things go bad when we encounter the OtherChild instance in one of its elements while iterating. 如果 Array 没有 push() 方法，没有其它修改的手段，赋值则变得安全，因为没有矛盾的类型被添加到它。在Haxe中，我们可以使用结构子类型化（第3.5.2节）相应的限制类型来实现这个。 If Array had no push() method and no other means of modiﬁcation,the assignment would be safe because no incompatible type could be added to it. In Haxe, we can achieve this by restricting the type accordingly using structural subtyping (3.5.2): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Base  public function new ()    class Child extends Base   typedef MyArrayT =  public function pop (): T ;  class Main  public static function main ()  var a = [ new Child ()]; var b: MyArray Base = a;   我们可以安全的分配 b 作为 MyArray类型，MyArray 只有一个 pop() 方法。没有为 MyArray定义可以用来添加冲突类型的方法，因此被认为是协变的。 We can safely assign with b being typed as MyArray and MyArray only having a pop() method. There is no method deﬁned on MyArray which could be used to add incompatible types, it is thus said to be covariant. 协变 定义：协变 一种复合类型，如果它的组成类型可以被分配为缺少特定组件，如它们是只读，不允许写时，则被认为是协变的。 [warning] Deﬁnition: Covariance A compound type is considered covariant if its component types can be assigned to less speciﬁc components, i.e. if they are only read, but never written. 定义：抗变性 一个复合类型，如果它的组件类型可以被分配得为缺少通用的组件，如它们只写，但是不读，则被认为是抗变。 [warning] Deﬁnition: Contravariance A compound type is considered contravariant if its component types can be assigned to less generic components, i.e. if they are only written, but never read."},"3.类型系统/3.4.变异/3.4.变异.html#3-4-变异":{"title":"3.4.&#x53D8;&#x5F02;","path":"\\3.类型系统\\3.4.变异\\3.4.变异.html#3-4-变异","body":"&#x867D;&#x7136;&#x53D8;&#x5F02;&#x4E5F;&#x5728;&#x5176;&#x5B83;&#x5730;&#x65B9;&#x610F;&#x4E49;&#x91CD;&#x5927;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x7279;&#x522B;&#x7ECF;&#x5E38;&#x548C;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#x4E00;&#x8D77;&#x51FA;&#x73B0;&#xFF0C;&#x5E76;&#x50CF;&#x4E00;&#x4E2A;&#x60CA;&#x559C;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x89E6;&#x53D1;&#x53D8;&#x5F02;&#x9519;&#x8BEF;&#xFF1A; While variance is also relevant in other places, it occurs particularly often with type parameters and comes as a surprise in this context. Additionally, it is very easy to trigger variance errors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Base { public function new () { } } class Child extends Base { } class Main { public static function main () { var children = [ new Child ()]; // ArrayChild should be ArrayBase // Type parameters are invariant // Child should be Base var bases: Array Base = children; } } &#x663E;&#x7136;&#xFF0C;&#x4E00;&#x4E2A; Array &#x4E0D;&#x80FD;&#x88AB;&#x5206;&#x914D;&#x5230;&#x4E00;&#x4E2A; Array&#xFF0C;&#x5373;&#x4F7F; Child&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230;Base&#x3002;&#x539F;&#x56E0;&#x53EF;&#x80FD;&#x6BD4;&#x8F83;&#x610F;&#x5916;&#xFF1A;&#x56E0;&#x4E3A; array &#x53EF;&#x4EE5;&#x88AB;&#x5199;&#x5165;&#xFF0C;&#x5982;&#x901A;&#x8FC7;&#x5B83;&#x4EEC;&#x7684; push() &#x65B9;&#x6CD5;&#x3002;&#x5FFD;&#x7565;&#x53D8;&#x5F02;&#x9519;&#x8BEF;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x4EA7;&#x751F;&#x95EE;&#x9898;&#xFF1A; Apparently,an Array cannot be assigned to an Array ,even though Child can be assigned to Base . The reason for this might be somewhat unexpected: It is not allowed because arrays can be written to, e.g. via their push() method. It is easy to generate problems by ignoring variance errors: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Base { public function new () { } } class Child extends Base { } class OtherChild extends Base { } class Main { public static function main () { var children = [ new Child ()]; // subvert type checker var bases: Array Base = cast children; bases.push( new OtherChild ()); for (child in children) { trace (child); } } } &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x4F7F;&#x7528; cast&#xFF08;&#x7B2C;5.23&#x8282;&#xFF09;&#x7834;&#x574F;&#x4E86;&#x7C7B;&#x578B;&#x68C0;&#x67E5;&#xFF0C;&#x56E0;&#x6B64;&#x5141;&#x8BB8;&#x4E86;&#x6CE8;&#x91CA;&#x884C;&#x540E;&#x7684;&#x8D4B;&#x503C;&#x3002;&#x6211;&#x4EEC;&#x4FDD;&#x5B58;&#x4E00;&#x4E2A;&#x5F15;&#x7528; bases &#x5230;&#x539F;&#x59CB;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x7C7B;&#x578B;&#x4E3A; Array&#x3002;&#x8FD9;&#x4F7F;&#x7684;&#x63A8;&#x9001;&#x53E6;&#x4E00;&#x4E2A;&#x517C;&#x5BB9;Base&#x7684;&#x7C7B;&#x578B;&#xFF08;OtherChild&#xFF09;&#x5230;&#x4E86;&#x6570;&#x7EC4;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x6211;&#x4EEC;&#x539F;&#x59CB;&#x7684;&#x5F15;&#x7528; children &#x4ECD;&#x7136;&#x662F; Array&#x7C7B;&#x578B;&#xFF0C;&#x5F53;&#x6211;&#x4EEC;&#x5728;&#x8FED;&#x4EE3;&#x5B83;&#x7684;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x65F6;&#x5019;&#x9047;&#x5230; OtherChild&#x5B9E;&#x4F8B;&#x5C31;&#x4F1A;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x3002; Here we subvert the type checker by using a cast (5.23), thus allowing the assignment after the commented line. With that we hold a reference bases to the original array, typed as Array . This allows pushing another type compatible with Base (OtherChild) onto that array. However,our original reference children is still of type Array and things go bad when we encounter the OtherChild instance in one of its elements while iterating. &#x5982;&#x679C; Array &#x6CA1;&#x6709; push() &#x65B9;&#x6CD5;&#xFF0C;&#x6CA1;&#x6709;&#x5176;&#x5B83;&#x4FEE;&#x6539;&#x7684;&#x624B;&#x6BB5;&#xFF0C;&#x8D4B;&#x503C;&#x5219;&#x53D8;&#x5F97;&#x5B89;&#x5168;&#xFF0C;&#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x77DB;&#x76FE;&#x7684;&#x7C7B;&#x578B;&#x88AB;&#x6DFB;&#x52A0;&#x5230;&#x5B83;&#x3002;&#x5728;Haxe&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316;&#xFF08;&#x7B2C;3.5.2&#x8282;&#xFF09;&#x76F8;&#x5E94;&#x7684;&#x9650;&#x5236;&#x7C7B;&#x578B;&#x6765;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x3002; If Array had no push() method and no other means of modi&#xFB01;cation,the assignment would be safe because no incompatible type could be added to it. In Haxe, we can achieve this by restricting the type accordingly using structural subtyping (3.5.2): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Base { public function new () { } } class Child extends Base { } typedef MyArrayT = { public function pop (): T ; } class Main { public static function main () { var a = [ new Child ()]; var b: MyArray Base = a; } } &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5B89;&#x5168;&#x7684;&#x5206;&#x914D; b &#x4F5C;&#x4E3A; MyArray&#x7C7B;&#x578B;&#xFF0C;MyArray &#x53EA;&#x6709;&#x4E00;&#x4E2A; pop() &#x65B9;&#x6CD5;&#x3002;&#x6CA1;&#x6709;&#x4E3A; MyArray&#x5B9A;&#x4E49;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x6DFB;&#x52A0;&#x51B2;&#x7A81;&#x7C7B;&#x578B;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x56E0;&#x6B64;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x534F;&#x53D8;&#x7684;&#x3002; We can safely assign with b being typed as MyArray and MyArray only having a pop() method. There is no method de&#xFB01;ned on MyArray which could be used to add incompatible types, it is thus said to be covariant. &#x534F;&#x53D8; &#x5B9A;&#x4E49;&#xFF1A;&#x534F;&#x53D8; &#x4E00;&#x79CD;&#x590D;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x5B83;&#x7684;&#x7EC4;&#x6210;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x4E3A;&#x7F3A;&#x5C11;&#x7279;&#x5B9A;&#x7EC4;&#x4EF6;&#xFF0C;&#x5982;&#x5B83;&#x4EEC;&#x662F;&#x53EA;&#x8BFB;&#xFF0C;&#x4E0D;&#x5141;&#x8BB8;&#x5199;&#x65F6;&#xFF0C;&#x5219;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x534F;&#x53D8;&#x7684;&#x3002; [warning] De&#xFB01;nition: Covariance A compound type is considered covariant if its component types can be assigned to less speci&#xFB01;c components, i.e. if they are only read, but never written. &#x5B9A;&#x4E49;&#xFF1A;&#x6297;&#x53D8;&#x6027; &#x4E00;&#x4E2A;&#x590D;&#x5408;&#x7C7B;&#x578B;&#xFF0C;&#x5982;&#x679C;&#x5B83;&#x7684;&#x7EC4;&#x4EF6;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5F97;&#x4E3A;&#x7F3A;&#x5C11;&#x901A;&#x7528;&#x7684;&#x7EC4;&#x4EF6;&#xFF0C;&#x5982;&#x5B83;&#x4EEC;&#x53EA;&#x5199;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x8BFB;&#xFF0C;&#x5219;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x6297;&#x53D8;&#x3002; [warning] De&#xFB01;nition: Contravariance A compound type is considered contravariant if its component types can be assigned to less generic components, i.e. if they are only written, but never read."},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.2.结构子类型.html","body":"3.5.2.结构子类型 定义：结构子类型化 结构子类型化定义了具有相同结构的类型之间的一种隐式关系。 [warning] Deﬁnition: Structural Subtyping Structural subtyping deﬁnes an implicit relation between types that have the same structure. Haxe中当以下情况发生时允许结构子类型化： 一个类（第2.3节）统一为 一个结构（第2.5节）时， 一个结构 统一为 另外一个结构时 Structural sub-typing in Haxe is allowed when unifying a class (2.3) with a structure (2.5) and a structure with another structure. 以下的例子是 Haxe 标准库中 Lambda 类的一部分： The following example is part of the Lambda class of the Haxe Standard Library : 1 2 3 public static function emptyT(it : IterableT):Bool  return !it.iterator().hasNext();  empty 方法用于检查一个 Iterable （可迭代的）是含否有元素。为了达到这个目的，我们除了知道参数是一个 Iterable 之外并不需要知道该参数的具体类型。这使得我们可以通过传递一个可被统一为 IterableT 的任意类型的参数来调用 empty 方法，Haxe 标准库中的许多类型都满足这一要求。 The empty-method checks if an Iterable has an element. For this purpose, it is not necessary to know anything about the argument type other than the fact that it is considered an iterable. This allows calling the empty-method with any type that uniﬁes with Iterable which applies to a lot of types in the Haxe Standard Library. 尽管这样的类型化非常方便，但是大量地使用可能影响静态目标语言的性能，在性能影响（第2.5.4节）部分有介绍。 This kind of typing can be very convenient but extensive use may be detrimental to performance on static targets, which is detailed in Impact on Performance (Section 2.5.4)."},"3.类型系统/3.5.一致性检查/3.5.2.结构子类型.html#3-5-2-结构子类型":{"title":"3.5.2.&#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.2.结构子类型.html#3-5-2-结构子类型","body":"&#x5B9A;&#x4E49;&#xFF1A;&#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316; &#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316;&#x5B9A;&#x4E49;&#x4E86;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7ED3;&#x6784;&#x7684;&#x7C7B;&#x578B;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x79CD;&#x9690;&#x5F0F;&#x5173;&#x7CFB;&#x3002; [warning] De&#xFB01;nition: Structural Subtyping Structural subtyping de&#xFB01;nes an implicit relation between types that have the same structure. Haxe&#x4E2D;&#x5F53;&#x4EE5;&#x4E0B;&#x60C5;&#x51B5;&#x53D1;&#x751F;&#x65F6;&#x5141;&#x8BB8;&#x7ED3;&#x6784;&#x5B50;&#x7C7B;&#x578B;&#x5316;&#xFF1A; &#x4E00;&#x4E2A;&#x7C7B;&#xFF08;&#x7B2C;2.3&#x8282;&#xFF09;&#x7EDF;&#x4E00;&#x4E3A; &#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#xFF08;&#x7B2C;2.5&#x8282;&#xFF09;&#x65F6;&#xFF0C; &#x4E00;&#x4E2A;&#x7ED3;&#x6784; &#x7EDF;&#x4E00;&#x4E3A; &#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x65F6; Structural sub-typing in Haxe is allowed when unifying a class (2.3) with a structure (2.5) and a structure with another structure. &#x4EE5;&#x4E0B;&#x7684;&#x4F8B;&#x5B50;&#x662F; Haxe &#x6807;&#x51C6;&#x5E93;&#x4E2D; Lambda &#x7C7B;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF1A; The following example is part of the Lambda class of the Haxe Standard Library : 1 2 3 public static function emptyT(it : IterableT):Bool { return !it.iterator().hasNext(); } empty &#x65B9;&#x6CD5;&#x7528;&#x4E8E;&#x68C0;&#x67E5;&#x4E00;&#x4E2A; Iterable &#xFF08;&#x53EF;&#x8FED;&#x4EE3;&#x7684;&#xFF09;&#x662F;&#x542B;&#x5426;&#x6709;&#x5143;&#x7D20;&#x3002;&#x4E3A;&#x4E86;&#x8FBE;&#x5230;&#x8FD9;&#x4E2A;&#x76EE;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x9664;&#x4E86;&#x77E5;&#x9053;&#x53C2;&#x6570;&#x662F;&#x4E00;&#x4E2A; Iterable &#x4E4B;&#x5916;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x77E5;&#x9053;&#x8BE5;&#x53C2;&#x6570;&#x7684;&#x5177;&#x4F53;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x4F7F;&#x5F97;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F20;&#x9012;&#x4E00;&#x4E2A;&#x53EF;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A; IterableT &#x7684;&#x4EFB;&#x610F;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x6765;&#x8C03;&#x7528; empty &#x65B9;&#x6CD5;&#xFF0C;Haxe &#x6807;&#x51C6;&#x5E93;&#x4E2D;&#x7684;&#x8BB8;&#x591A;&#x7C7B;&#x578B;&#x90FD;&#x6EE1;&#x8DB3;&#x8FD9;&#x4E00;&#x8981;&#x6C42;&#x3002; The empty-method checks if an Iterable has an element. For this purpose, it is not necessary to know anything about the argument type other than the fact that it is considered an iterable. This allows calling the empty-method with any type that uni&#xFB01;es with Iterable which applies to a lot of types in the Haxe Standard Library. &#x5C3D;&#x7BA1;&#x8FD9;&#x6837;&#x7684;&#x7C7B;&#x578B;&#x5316;&#x975E;&#x5E38;&#x65B9;&#x4FBF;&#xFF0C;&#x4F46;&#x662F;&#x5927;&#x91CF;&#x5730;&#x4F7F;&#x7528;&#x53EF;&#x80FD;&#x5F71;&#x54CD;&#x9759;&#x6001;&#x76EE;&#x6807;&#x8BED;&#x8A00;&#x7684;&#x6027;&#x80FD;&#xFF0C;&#x5728;&#x6027;&#x80FD;&#x5F71;&#x54CD;&#xFF08;&#x7B2C;2.5.4&#x8282;&#xFF09;&#x90E8;&#x5206;&#x6709;&#x4ECB;&#x7ECD;&#x3002; This kind of typing can be very convenient but extensive use may be detrimental to performance on static targets, which is detailed in Impact on Performance (Section 2.5.4)."},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.1.类与接口.html","body":"3.5.1.类与接口 当定义类之间的一致性检查行为时需要特别注意，一致性是定向检查的：也就是说我们可以赋值一个特例化的类型（例如一个子类）到一个通用类型（例如一个父类），但是反过来是不允许的。 When deﬁning uniﬁcation behavior between classes,it is important to remember that uniﬁcation is directional: We can assign a more specialized class (e.g. a child class) to a generic class (e.g. a parent class) but the reverse is not valid. 如下的赋值是允许的： 子类分配到父类 类分配到其所实现的接口 接口到基础接口 The following assignments are allowed: child class to parent class class to implementing interface interface to base interface 这组规则是可传递的，这意味着一个子类也可以被分配到其基类的基类、其基类所实现的接口、实现的接口的基础接口等，以此类推。 These rules are transitive, meaning that a child class can also be assigned to the base class of its base class,an interface its base class implements,the base interface of an implementing interface and so on."},"3.类型系统/3.5.一致性检查/3.5.1.类与接口.html#3-5-1-类与接口":{"title":"3.5.1.&#x7C7B;&#x4E0E;&#x63A5;&#x53E3;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.1.类与接口.html#3-5-1-类与接口","body":"&#x5F53;&#x5B9A;&#x4E49;&#x7C7B;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x884C;&#x4E3A;&#x65F6;&#x9700;&#x8981;&#x7279;&#x522B;&#x6CE8;&#x610F;&#xFF0C;&#x4E00;&#x81F4;&#x6027;&#x662F;&#x5B9A;&#x5411;&#x68C0;&#x67E5;&#x7684;&#xFF1A;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8D4B;&#x503C;&#x4E00;&#x4E2A;&#x7279;&#x4F8B;&#x5316;&#x7684;&#x7C7B;&#x578B;&#xFF08;&#x4F8B;&#x5982;&#x4E00;&#x4E2A;&#x5B50;&#x7C7B;&#xFF09;&#x5230;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x7C7B;&#x578B;&#xFF08;&#x4F8B;&#x5982;&#x4E00;&#x4E2A;&#x7236;&#x7C7B;&#xFF09;&#xFF0C;&#x4F46;&#x662F;&#x53CD;&#x8FC7;&#x6765;&#x662F;&#x4E0D;&#x5141;&#x8BB8;&#x7684;&#x3002; When de&#xFB01;ning uni&#xFB01;cation behavior between classes,it is important to remember that uni&#xFB01;cation is directional: We can assign a more specialized class (e.g. a child class) to a generic class (e.g. a parent class) but the reverse is not valid. &#x5982;&#x4E0B;&#x7684;&#x8D4B;&#x503C;&#x662F;&#x5141;&#x8BB8;&#x7684;&#xFF1A; &#x5B50;&#x7C7B;&#x5206;&#x914D;&#x5230;&#x7236;&#x7C7B; &#x7C7B;&#x5206;&#x914D;&#x5230;&#x5176;&#x6240;&#x5B9E;&#x73B0;&#x7684;&#x63A5;&#x53E3; &#x63A5;&#x53E3;&#x5230;&#x57FA;&#x7840;&#x63A5;&#x53E3; The following assignments are allowed: child class to parent class class to implementing interface interface to base interface &#x8FD9;&#x7EC4;&#x89C4;&#x5219;&#x662F;&#x53EF;&#x4F20;&#x9012;&#x7684;&#xFF0C;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x4E00;&#x4E2A;&#x5B50;&#x7C7B;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x5206;&#x914D;&#x5230;&#x5176;&#x57FA;&#x7C7B;&#x7684;&#x57FA;&#x7C7B;&#x3001;&#x5176;&#x57FA;&#x7C7B;&#x6240;&#x5B9E;&#x73B0;&#x7684;&#x63A5;&#x53E3;&#x3001;&#x5B9E;&#x73B0;&#x7684;&#x63A5;&#x53E3;&#x7684;&#x57FA;&#x7840;&#x63A5;&#x53E3;&#x7B49;&#xFF0C;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x3002; These rules are transitive, meaning that a child class can also be assigned to the base class of its base class,an interface its base class implements,the base interface of an implementing interface and so on."},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.5.通用基本类型.html","body":"3.5.5.通用基本类型 给定一组多种类型，这组类型中的所有类型会被统一为一个通用基本类型： Given a set of multiple types,a common base type is a type which all types of the set unify against: 1 2 3 4 5 6 7 8 9 10 11 12 13 class Base  public function new ()    class Child1 extends Base   class Child2 extends Base   class Main  static public function main ()  var a = [ new Child1 (), new Child2 ()]; $type(a); // ArrayBase   虽然 Base 没有被提及，Haxe编译器也能推断它为 Chid1 和 Child2 的通用类型 。Haxe编译器在以下情况下执行此类一致性检查： 数组声明 if / else switch 的各个 case 分支中 Although Base is not mentioned, the Haxe Compiler manages to infer it as the common type of Child1 and Child2. The Haxe Compiler employs this kind of uniﬁcation in the following situations: array declarations if/else cases of a switch"},"3.类型系统/3.5.一致性检查/3.5.5.通用基本类型.html#3-5-5-通用基本类型":{"title":"3.5.5.&#x901A;&#x7528;&#x57FA;&#x672C;&#x7C7B;&#x578B;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.5.通用基本类型.html#3-5-5-通用基本类型","body":"&#x7ED9;&#x5B9A;&#x4E00;&#x7EC4;&#x591A;&#x79CD;&#x7C7B;&#x578B;&#xFF0C;&#x8FD9;&#x7EC4;&#x7C7B;&#x578B;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x7C7B;&#x578B;&#x4F1A;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#xFF1A; Given a set of multiple types,a common base type is a type which all types of the set unify against: 1 2 3 4 5 6 7 8 9 10 11 12 13 class Base { public function new () { } } class Child1 extends Base { } class Child2 extends Base { } class Main { static public function main () { var a = [ new Child1 (), new Child2 ()]; $type(a); // ArrayBase } } &#x867D;&#x7136; Base &#x6CA1;&#x6709;&#x88AB;&#x63D0;&#x53CA;&#xFF0C;Haxe&#x7F16;&#x8BD1;&#x5668;&#x4E5F;&#x80FD;&#x63A8;&#x65AD;&#x5B83;&#x4E3A; Chid1 &#x548C; Child2 &#x7684;&#x901A;&#x7528;&#x7C7B;&#x578B; &#x3002;Haxe&#x7F16;&#x8BD1;&#x5668;&#x5728;&#x4EE5;&#x4E0B;&#x60C5;&#x51B5;&#x4E0B;&#x6267;&#x884C;&#x6B64;&#x7C7B;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#xFF1A; &#x6570;&#x7EC4;&#x58F0;&#x660E; if / else switch &#x7684;&#x5404;&#x4E2A; case &#x5206;&#x652F;&#x4E2D; Although Base is not mentioned, the Haxe Compiler manages to infer it as the common type of Child1 and Child2. The Haxe Compiler employs this kind of uni&#xFB01;cation in the following situations: array declarations if/else cases of a switch"},"3.类型系统/3.5.一致性检查/3.5.3.单形.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.3.单形.html","body":"3.5.3.单形 一个 是/含有 单形（第2.9节）的类型的一致性检查行为在类型推断（第3.6节）中详述。 Uniﬁcation of types having or being a monomorph(2.9) is detailed in Type Inference(Section3.6)."},"3.类型系统/3.5.一致性检查/3.5.3.单形.html#3-5-3-单形":{"title":"3.5.3.&#x5355;&#x5F62;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.3.单形.html#3-5-3-单形","body":"&#x4E00;&#x4E2A; &#x662F;/&#x542B;&#x6709; &#x5355;&#x5F62;&#xFF08;&#x7B2C;2.9&#x8282;&#xFF09;&#x7684;&#x7C7B;&#x578B;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x884C;&#x4E3A;&#x5728;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6&#x8282;&#xFF09;&#x4E2D;&#x8BE6;&#x8FF0;&#x3002; Uni&#xFB01;cation of types having or being a monomorph(2.9) is detailed in Type Inference(Section3.6)."},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.4.函数返回.html","body":"3.5.4.函数返回 函数返回类型的一致性检查可能涉及 Void 类型（第2.1.5），因此需要对何种类型可以被统一为 Void 类型给出一个明确的定义。由于 Void 用于描述一个类型的缺省，因此它不能被分配到其他任何类型上，即使是 Dynamic 类型也不行 。这意味着如果一个函数显式声明其返回类型为 Dynamic ，它便不能返回 Void 。 Uniﬁcation of function return types may involve the Void-type (2.1.5) and requires a clear deﬁnition of what uniﬁes with Void. With Void describing the absence of a type,it is not assignable to any other type, not even Dynamic. This means that if a function is explicitly declared as returning Dynamic, it cannot return Void. 反之也一样：如果一个函数声明其返回类型为 Void ，那么它便不能返回 Dynamic 或者其他任何类型。但是这个方向上的一致性检查在函数类型的赋值操作上是被允许的： The opposite applies as well: If a function declares a return type of Void, it cannot return Dynamic or any other type. However, this direction of uniﬁcation is allowed when assigning function types: 1 var func: Void-Void = function () return \"foo\" ; rvalue 函数显然是 Void-String 类型的，但我们可以把它分配给 Void-Void 类型的变量 func 。这是因为编译器此时可以安全地假定 func 的返回类型是无关的，鉴于它不能被分配给任何 非 Void 类型。 The right-hand function clearly is of type Void-String,yet we can assign it to the variable func of type Void-Void. This is because the compiler can safely assume that the return type is irrelevant, given that it could not be assigned to any non-Void type. 补充： 1 2 var func: Void - Void = function () return 'str' ; $type(func); //此时 func 的类型依然是 Void - Void ，因此调用表达式 func() 会得到 Void 返回"},"3.类型系统/3.5.一致性检查/3.5.4.函数返回.html#3-5-4-函数返回":{"title":"3.5.4.&#x51FD;&#x6570;&#x8FD4;&#x56DE;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.4.函数返回.html#3-5-4-函数返回","body":"&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x53EF;&#x80FD;&#x6D89;&#x53CA; Void &#x7C7B;&#x578B;&#xFF08;&#x7B2C;2.1.5&#xFF09;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5BF9;&#x4F55;&#x79CD;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A; Void &#x7C7B;&#x578B;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x660E;&#x786E;&#x7684;&#x5B9A;&#x4E49;&#x3002;&#x7531;&#x4E8E; Void &#x7528;&#x4E8E;&#x63CF;&#x8FF0;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x7684;&#x7F3A;&#x7701;&#xFF0C;&#x56E0;&#x6B64;&#x5B83;&#x4E0D;&#x80FD;&#x88AB;&#x5206;&#x914D;&#x5230;&#x5176;&#x4ED6;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x4E0A;&#xFF0C;&#x5373;&#x4F7F;&#x662F; Dynamic &#x7C7B;&#x578B;&#x4E5F;&#x4E0D;&#x884C; &#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x663E;&#x5F0F;&#x58F0;&#x660E;&#x5176;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4E3A; Dynamic &#xFF0C;&#x5B83;&#x4FBF;&#x4E0D;&#x80FD;&#x8FD4;&#x56DE; Void &#x3002; Uni&#xFB01;cation of function return types may involve the Void-type (2.1.5) and requires a clear de&#xFB01;nition of what uni&#xFB01;es with Void. With Void describing the absence of a type,it is not assignable to any other type, not even Dynamic. This means that if a function is explicitly declared as returning Dynamic, it cannot return Void. &#x53CD;&#x4E4B;&#x4E5F;&#x4E00;&#x6837;&#xFF1A;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x58F0;&#x660E;&#x5176;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4E3A; Void &#xFF0C;&#x90A3;&#x4E48;&#x5B83;&#x4FBF;&#x4E0D;&#x80FD;&#x8FD4;&#x56DE; Dynamic &#x6216;&#x8005;&#x5176;&#x4ED6;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x65B9;&#x5411;&#x4E0A;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x5728;&#x51FD;&#x6570;&#x7C7B;&#x578B;&#x7684;&#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#x4E0A;&#x662F;&#x88AB;&#x5141;&#x8BB8;&#x7684;&#xFF1A; The opposite applies as well: If a function declares a return type of Void, it cannot return Dynamic or any other type. However, this direction of uni&#xFB01;cation is allowed when assigning function types: 1 var func: Void-Void = function () return foo ; rvalue &#x51FD;&#x6570;&#x663E;&#x7136;&#x662F; Void-String &#x7C7B;&#x578B;&#x7684;&#xFF0C;&#x4F46;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x5B83;&#x5206;&#x914D;&#x7ED9; Void-Void &#x7C7B;&#x578B;&#x7684;&#x53D8;&#x91CF; func &#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x7F16;&#x8BD1;&#x5668;&#x6B64;&#x65F6;&#x53EF;&#x4EE5;&#x5B89;&#x5168;&#x5730;&#x5047;&#x5B9A; func &#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x662F;&#x65E0;&#x5173;&#x7684;&#xFF0C;&#x9274;&#x4E8E;&#x5B83;&#x4E0D;&#x80FD;&#x88AB;&#x5206;&#x914D;&#x7ED9;&#x4EFB;&#x4F55; &#x975E; Void &#x7C7B;&#x578B;&#x3002; The right-hand function clearly is of type Void-String,yet we can assign it to the variable func of type Void-Void. This is because the compiler can safely assume that the return type is irrelevant, given that it could not be assigned to any non-Void type. &#x8865;&#x5145;&#xFF1A; 1 2 var func: Void - Void = function () return &apos;str&apos; ; $type(func); //&#x6B64;&#x65F6; func &#x7684;&#x7C7B;&#x578B;&#x4F9D;&#x7136;&#x662F; Void - Void &#xFF0C;&#x56E0;&#x6B64;&#x8C03;&#x7528;&#x8868;&#x8FBE;&#x5F0F; func() &#x4F1A;&#x5F97;&#x5230; Void &#x8FD4;&#x56DE;"},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html":{"title":"","path":"\\3.类型系统\\3.5.一致性检查\\3.5.一致性检查.html","body":"3.5.一致性检查 一致性检查 是 Haxe 类型系统的核心，其为Haxe程序极大地提升了健壮性（或称鲁棒性）。它描述了某一个类型与另一个类型是否兼容的过程。 Uniﬁcation is the heart of the type system and contributes immensely to the robustness of Haxe programs. It describes the process of checking if a type is compatible to another type. 一致性检查 定义：一致性 类型A 与类型 B 之间的一致性检查是一个定向过程，它会回答一个问题：A 是否可以被赋值给 B。当两者中有一个 是/含有 单形（monomorph) (2.9) 时，其类型将在一致性检查过程中产生畸变（mutate） [warning] Deﬁnition: Uniﬁcation Uniﬁcation between two types A and B is a directional process which answers the question if A can be assigned to B. It may mutate either type if it is or has a monomorph (2.9). 一致性错误非常容易被触发： Uniﬁcation errors are very easy to trigger: 1 2 3 4 5 6 class Main  static public function main ()  // Int should be String var s: String = 1 ;   当我们尝试分配一个 Int 类型的值给一个 String 类型变量时，会导致编译器尝试 把 Int 统一为 String 。当然，这是不允许的并且会使编译器发出一个错误 “Int should be String”。 We try to assign a value of type Int to a variable of type String, which causes the compiler to try and unify Int with String. This is, of course, not allowed and makes the compiler emit the error Int should be String. 在这个特殊的例子中，一致性检查在 赋值 操作时被触发，前文中的 “…是否可以被赋值给…” 的定义在此例中很直观，但这只是会执行一致性检查的其中一例： In this particular case, the uniﬁcation is triggered by an assignment, a context in which the “is assignable to” deﬁnition is intuitive. It is one of several cases where uniﬁcation is performed: 赋值 ：如果 a 被分配给 b，类型 a 会统一为 类型 b 。 Assignment : If a is assigned to b , the type of a is uniﬁed with the type of b . 函数调用 ：我们在介绍 函数类型 时已经看过一个简要的例子了。通常，编译器会尝试把第一个实际参数的类型统一为第一个形式参数的类型、把第二个实际参数类型统一为第二个形式参数的类型…以此类推。 Function call : We have brieﬂy seen this one while introducing thefunction(2.6)type. In general, the compiler tries to unify the ﬁrst given argument type with the ﬁrst expected argument type, the second given argument type with the second expected argument type and so on until all argument types are handled. 函数返回 ：不论函数何时出现 return e 表达式， e 的类型都会被统一为函数的返回类型。如果函数没有显式地声明返回类型，则返回类型会被推断为 e 的类型 且 随后的 return 表达式都会以该类型进行推断。 Function return : Whenever a function hasa return e expression, thetypeof e is uniﬁed with the function return type. If the function has no explicit return type,it is inferred to the type of e and subsequent return expressions are inferred against it. 数组声明 ：编译器会尝试在一个数组声明的所有给定的类型中寻找一个最小化类型。请参阅 通用基本类型（第3.5.5节）了解更多细节。 Array declaration: The compiler tries to ﬁnd a minimal type between all given types in an array declaration. Refer to Common Base Type (Section 3.5.5) for details. 对象声明 ：如果一个对象被分配了一个与声明时所不同的类型，那么编译器会把所有给定类型的字段的类型统一为期望类型的字段的类型。 Object declaration : If an object is declared “against” a given type, the compiler uniﬁes each given ﬁeld type with each expected ﬁeld type. 操作符一致性检查 ：某一操作符会期望作用于某一种类型上，当操作符作用于某一类型时该类型会被统一为操作符期望的类型，比如，表达式 a &amp;&amp; b 会把 a 和 b 都统一为 Bool 类型， 而表达式 a == b 会把 a 统一为 b 。 Operator uniﬁcation : Certain operators expect certain types which the given types are uniﬁed against. For instance, the expression a &amp;&amp; b uniﬁes both a and b with Bool and the expression a == b uniﬁes a with b."},"3.类型系统/3.5.一致性检查/3.5.一致性检查.html#3-5-一致性检查":{"title":"3.5.&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;","path":"\\3.类型系统\\3.5.一致性检查\\3.5.一致性检查.html#3-5-一致性检查","body":"&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5; &#x662F; Haxe &#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x7684;&#x6838;&#x5FC3;&#xFF0C;&#x5176;&#x4E3A;Haxe&#x7A0B;&#x5E8F;&#x6781;&#x5927;&#x5730;&#x63D0;&#x5347;&#x4E86;&#x5065;&#x58EE;&#x6027;&#xFF08;&#x6216;&#x79F0;&#x9C81;&#x68D2;&#x6027;&#xFF09;&#x3002;&#x5B83;&#x63CF;&#x8FF0;&#x4E86;&#x67D0;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x4E0E;&#x53E6;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x662F;&#x5426;&#x517C;&#x5BB9;&#x7684;&#x8FC7;&#x7A0B;&#x3002; Uni&#xFB01;cation is the heart of the type system and contributes immensely to the robustness of Haxe programs. It describes the process of checking if a type is compatible to another type. &#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5; &#x5B9A;&#x4E49;&#xFF1A;&#x4E00;&#x81F4;&#x6027; &#x7C7B;&#x578B;A &#x4E0E;&#x7C7B;&#x578B; B &#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x662F;&#x4E00;&#x4E2A;&#x5B9A;&#x5411;&#x8FC7;&#x7A0B;&#xFF0C;&#x5B83;&#x4F1A;&#x56DE;&#x7B54;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;A &#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB;&#x8D4B;&#x503C;&#x7ED9; B&#x3002;&#x5F53;&#x4E24;&#x8005;&#x4E2D;&#x6709;&#x4E00;&#x4E2A; &#x662F;/&#x542B;&#x6709; &#x5355;&#x5F62;&#xFF08;monomorph) (2.9) &#x65F6;&#xFF0C;&#x5176;&#x7C7B;&#x578B;&#x5C06;&#x5728;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x8FC7;&#x7A0B;&#x4E2D;&#x4EA7;&#x751F;&#x7578;&#x53D8;&#xFF08;mutate&#xFF09; [warning] De&#xFB01;nition: Uni&#xFB01;cation Uni&#xFB01;cation between two types A and B is a directional process which answers the question if A can be assigned to B. It may mutate either type if it is or has a monomorph (2.9). &#x4E00;&#x81F4;&#x6027;&#x9519;&#x8BEF;&#x975E;&#x5E38;&#x5BB9;&#x6613;&#x88AB;&#x89E6;&#x53D1;&#xFF1A; Uni&#xFB01;cation errors are very easy to trigger: 1 2 3 4 5 6 class Main { static public function main () { // Int should be String var s: String = 1 ; } } &#x5F53;&#x6211;&#x4EEC;&#x5C1D;&#x8BD5;&#x5206;&#x914D;&#x4E00;&#x4E2A; Int &#x7C7B;&#x578B;&#x7684;&#x503C;&#x7ED9;&#x4E00;&#x4E2A; String &#x7C7B;&#x578B;&#x53D8;&#x91CF;&#x65F6;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x7F16;&#x8BD1;&#x5668;&#x5C1D;&#x8BD5; &#x628A; Int &#x7EDF;&#x4E00;&#x4E3A; String &#x3002;&#x5F53;&#x7136;&#xFF0C;&#x8FD9;&#x662F;&#x4E0D;&#x5141;&#x8BB8;&#x7684;&#x5E76;&#x4E14;&#x4F1A;&#x4F7F;&#x7F16;&#x8BD1;&#x5668;&#x53D1;&#x51FA;&#x4E00;&#x4E2A;&#x9519;&#x8BEF; &#x201C;Int should be String&#x201D;&#x3002; We try to assign a value of type Int to a variable of type String, which causes the compiler to try and unify Int with String. This is, of course, not allowed and makes the compiler emit the error Int should be String. &#x5728;&#x8FD9;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x5728; &#x8D4B;&#x503C; &#x64CD;&#x4F5C;&#x65F6;&#x88AB;&#x89E6;&#x53D1;&#xFF0C;&#x524D;&#x6587;&#x4E2D;&#x7684; &#x201C;&#x2026;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB;&#x8D4B;&#x503C;&#x7ED9;&#x2026;&#x201D; &#x7684;&#x5B9A;&#x4E49;&#x5728;&#x6B64;&#x4F8B;&#x4E2D;&#x5F88;&#x76F4;&#x89C2;&#xFF0C;&#x4F46;&#x8FD9;&#x53EA;&#x662F;&#x4F1A;&#x6267;&#x884C;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x7684;&#x5176;&#x4E2D;&#x4E00;&#x4F8B;&#xFF1A; In this particular case, the uni&#xFB01;cation is triggered by an assignment, a context in which the &#x201C;is assignable to&#x201D; de&#xFB01;nition is intuitive. It is one of several cases where uni&#xFB01;cation is performed: &#x8D4B;&#x503C; &#xFF1A;&#x5982;&#x679C; a &#x88AB;&#x5206;&#x914D;&#x7ED9; b&#xFF0C;&#x7C7B;&#x578B; a &#x4F1A;&#x7EDF;&#x4E00;&#x4E3A; &#x7C7B;&#x578B; b &#x3002; Assignment : If a is assigned to b , the type of a is uni&#xFB01;ed with the type of b . &#x51FD;&#x6570;&#x8C03;&#x7528; &#xFF1A;&#x6211;&#x4EEC;&#x5728;&#x4ECB;&#x7ECD; &#x51FD;&#x6570;&#x7C7B;&#x578B; &#x65F6;&#x5DF2;&#x7ECF;&#x770B;&#x8FC7;&#x4E00;&#x4E2A;&#x7B80;&#x8981;&#x7684;&#x4F8B;&#x5B50;&#x4E86;&#x3002;&#x901A;&#x5E38;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x5C1D;&#x8BD5;&#x628A;&#x7B2C;&#x4E00;&#x4E2A;&#x5B9E;&#x9645;&#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x5F62;&#x5F0F;&#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x3001;&#x628A;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B9E;&#x9645;&#x53C2;&#x6570;&#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x4E3A;&#x7B2C;&#x4E8C;&#x4E2A;&#x5F62;&#x5F0F;&#x53C2;&#x6570;&#x7684;&#x7C7B;&#x578B;&#x2026;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x3002; Function call : We have brie&#xFB02;y seen this one while introducing thefunction(2.6)type. In general, the compiler tries to unify the &#xFB01;rst given argument type with the &#xFB01;rst expected argument type, the second given argument type with the second expected argument type and so on until all argument types are handled. &#x51FD;&#x6570;&#x8FD4;&#x56DE; &#xFF1A;&#x4E0D;&#x8BBA;&#x51FD;&#x6570;&#x4F55;&#x65F6;&#x51FA;&#x73B0; return e &#x8868;&#x8FBE;&#x5F0F;&#xFF0C; e &#x7684;&#x7C7B;&#x578B;&#x90FD;&#x4F1A;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x51FD;&#x6570;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x3002;&#x5982;&#x679C;&#x51FD;&#x6570;&#x6CA1;&#x6709;&#x663E;&#x5F0F;&#x5730;&#x58F0;&#x660E;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4F1A;&#x88AB;&#x63A8;&#x65AD;&#x4E3A; e &#x7684;&#x7C7B;&#x578B; &#x4E14; &#x968F;&#x540E;&#x7684; return &#x8868;&#x8FBE;&#x5F0F;&#x90FD;&#x4F1A;&#x4EE5;&#x8BE5;&#x7C7B;&#x578B;&#x8FDB;&#x884C;&#x63A8;&#x65AD;&#x3002; Function return : Whenever a function hasa return e expression, thetypeof e is uni&#xFB01;ed with the function return type. If the function has no explicit return type,it is inferred to the type of e and subsequent return expressions are inferred against it. &#x6570;&#x7EC4;&#x58F0;&#x660E; &#xFF1A;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x5C1D;&#x8BD5;&#x5728;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x58F0;&#x660E;&#x7684;&#x6240;&#x6709;&#x7ED9;&#x5B9A;&#x7684;&#x7C7B;&#x578B;&#x4E2D;&#x5BFB;&#x627E;&#x4E00;&#x4E2A;&#x6700;&#x5C0F;&#x5316;&#x7C7B;&#x578B;&#x3002;&#x8BF7;&#x53C2;&#x9605; &#x901A;&#x7528;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.5.5&#x8282;&#xFF09;&#x4E86;&#x89E3;&#x66F4;&#x591A;&#x7EC6;&#x8282;&#x3002; Array declaration: The compiler tries to &#xFB01;nd a minimal type between all given types in an array declaration. Refer to Common Base Type (Section 3.5.5) for details. &#x5BF9;&#x8C61;&#x58F0;&#x660E; &#xFF1A;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x88AB;&#x5206;&#x914D;&#x4E86;&#x4E00;&#x4E2A;&#x4E0E;&#x58F0;&#x660E;&#x65F6;&#x6240;&#x4E0D;&#x540C;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x90A3;&#x4E48;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x628A;&#x6240;&#x6709;&#x7ED9;&#x5B9A;&#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x7684;&#x7C7B;&#x578B;&#x7EDF;&#x4E00;&#x4E3A;&#x671F;&#x671B;&#x7C7B;&#x578B;&#x7684;&#x5B57;&#x6BB5;&#x7684;&#x7C7B;&#x578B;&#x3002; Object declaration : If an object is declared &#x201C;against&#x201D; a given type, the compiler uni&#xFB01;es each given &#xFB01;eld type with each expected &#xFB01;eld type. &#x64CD;&#x4F5C;&#x7B26;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5; &#xFF1A;&#x67D0;&#x4E00;&#x64CD;&#x4F5C;&#x7B26;&#x4F1A;&#x671F;&#x671B;&#x4F5C;&#x7528;&#x4E8E;&#x67D0;&#x4E00;&#x79CD;&#x7C7B;&#x578B;&#x4E0A;&#xFF0C;&#x5F53;&#x64CD;&#x4F5C;&#x7B26;&#x4F5C;&#x7528;&#x4E8E;&#x67D0;&#x4E00;&#x7C7B;&#x578B;&#x65F6;&#x8BE5;&#x7C7B;&#x578B;&#x4F1A;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x64CD;&#x4F5C;&#x7B26;&#x671F;&#x671B;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x6BD4;&#x5982;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F; a &amp;&amp; b &#x4F1A;&#x628A; a &#x548C; b &#x90FD;&#x7EDF;&#x4E00;&#x4E3A; Bool &#x7C7B;&#x578B;&#xFF0C; &#x800C;&#x8868;&#x8FBE;&#x5F0F; a == b &#x4F1A;&#x628A; a &#x7EDF;&#x4E00;&#x4E3A; b &#x3002; Operator uni&#xFB01;cation : Certain operators expect certain types which the given types are uni&#xFB01;ed against. For instance, the expression a &amp;&amp; b uni&#xFB01;es both a and b with Bool and the expression a == b uni&#xFB01;es a with b."},"3.类型系统/3.6.类型推断/3.6.2.局限.html":{"title":"","path":"\\3.类型系统\\3.6.类型推断\\3.6.2.局限.html","body":"3.6.2.局限 类型推断在使用局部变量的时候节省了大量手动类型化，但是有时类型系统仍然需要一些帮助。事实上，它甚至不尝试推断变量（第4.1节）或者属性（第4.2节）字段，除非它有一个直接的初始化。 Type inference saves a lot of manual type hints when working with local variables,but sometimes the type system still needs some help. In fact, it does not even try to infer the type of a variable (4.1) or property (4.2) ﬁeld unless it has a direct initialization. 也有一些情况递归调用，当类型推断有限制的时候。如果一个函数递归调用它自身，它的类型还不（完全）不知道，类型推断可能推断一个错误，太详细的类型。 There are also some cases involving recursion where type inference has limitations. If a function calls itself recursively while its type is not (completely) known yet, type inference may infer a wrong, too specialized type. 一种不同类型的限制涉及代码的可读性。如果类型推断过度使用，可能由于可见类型的缺失而难于理解程序的部分。特别是在方法签名。建议在类型推断和显式类型中找到一个好的平衡。 A different kind of limitation involves the readability of code. If type inference is overused it might be difﬁcult to understand parts of a program due to the lack of visible types. This is particularly true for method signatures. It is recommended to ﬁnd a good balance between type inference and explicit type hints."},"3.类型系统/3.6.类型推断/3.6.2.局限.html#3-6-2-局限":{"title":"3.6.2.&#x5C40;&#x9650;","path":"\\3.类型系统\\3.6.类型推断\\3.6.2.局限.html#3-6-2-局限","body":"&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x5728;&#x4F7F;&#x7528;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x7684;&#x65F6;&#x5019;&#x8282;&#x7701;&#x4E86;&#x5927;&#x91CF;&#x624B;&#x52A8;&#x7C7B;&#x578B;&#x5316;&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x65F6;&#x7C7B;&#x578B;&#x7CFB;&#x7EDF;&#x4ECD;&#x7136;&#x9700;&#x8981;&#x4E00;&#x4E9B;&#x5E2E;&#x52A9;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x5B83;&#x751A;&#x81F3;&#x4E0D;&#x5C1D;&#x8BD5;&#x63A8;&#x65AD;&#x53D8;&#x91CF;&#xFF08;&#x7B2C;4.1&#x8282;&#xFF09;&#x6216;&#x8005;&#x5C5E;&#x6027;&#xFF08;&#x7B2C;4.2&#x8282;&#xFF09;&#x5B57;&#x6BB5;&#xFF0C;&#x9664;&#x975E;&#x5B83;&#x6709;&#x4E00;&#x4E2A;&#x76F4;&#x63A5;&#x7684;&#x521D;&#x59CB;&#x5316;&#x3002; Type inference saves a lot of manual type hints when working with local variables,but sometimes the type system still needs some help. In fact, it does not even try to infer the type of a variable (4.1) or property (4.2) &#xFB01;eld unless it has a direct initialization. &#x4E5F;&#x6709;&#x4E00;&#x4E9B;&#x60C5;&#x51B5;&#x9012;&#x5F52;&#x8C03;&#x7528;&#xFF0C;&#x5F53;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x6709;&#x9650;&#x5236;&#x7684;&#x65F6;&#x5019;&#x3002;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x9012;&#x5F52;&#x8C03;&#x7528;&#x5B83;&#x81EA;&#x8EAB;&#xFF0C;&#x5B83;&#x7684;&#x7C7B;&#x578B;&#x8FD8;&#x4E0D;&#xFF08;&#x5B8C;&#x5168;&#xFF09;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x53EF;&#x80FD;&#x63A8;&#x65AD;&#x4E00;&#x4E2A;&#x9519;&#x8BEF;&#xFF0C;&#x592A;&#x8BE6;&#x7EC6;&#x7684;&#x7C7B;&#x578B;&#x3002; There are also some cases involving recursion where type inference has limitations. If a function calls itself recursively while its type is not (completely) known yet, type inference may infer a wrong, too specialized type. &#x4E00;&#x79CD;&#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x9650;&#x5236;&#x6D89;&#x53CA;&#x4EE3;&#x7801;&#x7684;&#x53EF;&#x8BFB;&#x6027;&#x3002;&#x5982;&#x679C;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x8FC7;&#x5EA6;&#x4F7F;&#x7528;&#xFF0C;&#x53EF;&#x80FD;&#x7531;&#x4E8E;&#x53EF;&#x89C1;&#x7C7B;&#x578B;&#x7684;&#x7F3A;&#x5931;&#x800C;&#x96BE;&#x4E8E;&#x7406;&#x89E3;&#x7A0B;&#x5E8F;&#x7684;&#x90E8;&#x5206;&#x3002;&#x7279;&#x522B;&#x662F;&#x5728;&#x65B9;&#x6CD5;&#x7B7E;&#x540D;&#x3002;&#x5EFA;&#x8BAE;&#x5728;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x548C;&#x663E;&#x5F0F;&#x7C7B;&#x578B;&#x4E2D;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x597D;&#x7684;&#x5E73;&#x8861;&#x3002; A different kind of limitation involves the readability of code. If type inference is overused it might be dif&#xFB01;cult to understand parts of a program due to the lack of visible types. This is particularly true for method signatures. It is recommended to &#xFB01;nd a good balance between type inference and explicit type hints."},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html":{"title":"","path":"\\3.类型系统\\3.6.类型推断\\3.6.1.由上而下推断.html","body":"3.6.1.由上而下推断 大多数时候，类型自己被推断，然后可以被统一为一个预期的类型。然而在一些地方，一个预期的类型可能被用来影响推断。然后我们讨论自上而下的推断。 Most of the time,types are inferred on their own and may then be uniﬁed with an expected type. In a few places,however,an expected type may be used to inﬂuence inference. We then speak of top-down inference. 预期类型 定义：预期类型 预期的类型在表达式的类型在它被类型化之前已知的时候出现，例如，因为表达式被看作一个函数调用。它们可以影响这个表达式的类型化，通过所谓的自上而下推断（第3.6.1节）。 [warning] Deﬁnition: Expected Type Expected types occur when the type of an expression is known before that expression has been typed, e.g. because the expression is argument to a function call. They can inﬂuence typing of that expression through what is called top-down inference (3.6.1). 一个很好的例子是混合类型的数组。如在 Dynamic（第2.7节）中提到的，编译器拒绝[1,”foo”]因为它不能确定元素的类型。使用自上而下的推断，这个问题可以被克服： A good example are arrays of mixed types. As mentioned in Dynamic (Section 2.7), the compiler refuses [1, “foo”] because it cannot determine an element type. Employing top-down inference, this can be overcome: 1 2 3 4 5 class Main  static public function main ()  var a: Array  Dynamic  = [ 1 , \"foo\" ];   这里，编译器知道当类型化 [1,”foo”]，预期的类型是 Array，所以元素类型是 Dynamic 。和通常的合一行为不同，编译器会尝试（并失败）去确定一个通用类型（第3.5.5节），个别的元素不利于类型化会被统一为 Dynamic。 Here,the compiler knows while typing [1, “foo”] that the expected type is Array, so the element type is Dynamic. Instead of the usual uniﬁcation behavior where the compiler would attempt (and fail) to determine a common base type (3.5.5), the individual elements are typed against and uniﬁed with Dynamic. 在构建泛型类型参数（第3.3.1节）被引入的时候，我们看到了另一个自上而下推断的有趣用法 We have seen another interesting use of top-down inference when construction of generic type parameters (3.3.1) was introduced: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 typedef Constructible =  public function new (s: String ): Void ;  class Main  static public function main ()  var s: String = make(); var t: haxe .Template = make();  @:generic static function makeT:Constructible():T  return new T ( \"foo\" );   显式的类型 String是 被haxe.Template在这里使用的，来确定make的返回类型。这是因为方法调用为 make()，所以我们知道返回类型会分配到变量。利用这个信息，可以分别绑定 unknown 类型 T到 String和 haxe.Template 。 The explicit types String and haxe.Template are used here to determine the return type of make. This works because the method is invoked as make(),so we know the return type will be assigned to the variables. Utilizing this information, it is possible to bind the unknown type T to String and haxe.Template respectively.3.6.1.由上而下推断 大多数时候，类型自己被推断，然后可以被统一为一个预期的类型。然而在一些地方，一个预期的类型可能被用来影响推断。然后我们讨论自上而下的推断。 Most of the time,types are inferred on their own and may then be uniﬁed with an expected type. In a few places,however,an expected type may be used to inﬂuence inference. We then speak of top-down inference. 预期类型 定义：预期类型 预期的类型在表达式的类型在它被类型化之前已知的时候出现，例如，因为表达式被看作一个函数调用。它们可以影响这个表达式的类型化，通过所谓的自上而下推断（第3.6.1节）。 [warning] Deﬁnition: Expected Type Expected types occur when the type of an expression is known before that expression has been typed, e.g. because the expression is argument to a function call. They can inﬂuence typing of that expression through what is called top-down inference (3.6.1). 一个很好的例子是混合类型的数组。如在 Dynamic（第2.7节）中提到的，编译器拒绝[1,”foo”]因为它不能确定元素的类型。使用自上而下的推断，这个问题可以被克服： A good example are arrays of mixed types. As mentioned in Dynamic (Section 2.7), the compiler refuses [1, “foo”] because it cannot determine an element type. Employing top-down inference, this can be overcome: 1 2 3 4 5 6  class Main   static public function main ()   var a: Array  Dynamic  = [ 1 , \"foo\" ];      这里，编译器知道当类型化 [1,”foo”]，预期的类型是 Array，所以元素类型是 Dynamic 。和通常的合一行为不同，编译器会尝试（并失败）去确定一个通用类型（第3.5.5节），个别的元素不利于类型化会被统一为 Dynamic。 Here,the compiler knows while typing [1, “foo”] that the expected type is Array, so the element type is Dynamic. Instead of the usual uniﬁcation behavior where the compiler would attempt (and fail) to determine a common base type (3.5.5), the individual elements are typed against and uniﬁed with Dynamic. 在构建泛型类型参数（第3.3.1节）被引入的时候，我们看到了另一个自上而下推断的有趣用法 We have seen another interesting use of top-down inference when construction of generic type parameters (3.3.1) was introduced: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  typedef Constructible =   public function new (s: String ): Void ;     class Main   static public function main ()   var s: String = make();  var t: haxe .Template = make();     @:generic  static function makeT:Constructible():T   return new T ( \"foo\" );      显式的类型 String是 被haxe.Template在这里使用的，来确定make的返回类型。这是因为方法调用为 make()，所以我们知道返回类型会分配到变量。利用这个信息，可以分别绑定 unknown 类型 T到 String和 haxe.Template 。 The explicit types String and haxe.Template are used here to determine the return type of make. This works because the method is invoked as make(),so we know the return type will be assigned to the variables. Utilizing this information, it is possible to bind the unknown type T to String and haxe.Template respectively."},"3.类型系统/3.6.类型推断/3.6.1.由上而下推断.html#3-6-1-由上而下推断":{"title":"3.6.1.&#x7531;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD;","path":"\\3.类型系统\\3.6.类型推断\\3.6.1.由上而下推断.html#3-6-1-由上而下推断","body":"&#x5927;&#x591A;&#x6570;&#x65F6;&#x5019;&#xFF0C;&#x7C7B;&#x578B;&#x81EA;&#x5DF1;&#x88AB;&#x63A8;&#x65AD;&#xFF0C;&#x7136;&#x540E;&#x53EF;&#x4EE5;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x4E00;&#x4E2A;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x7136;&#x800C;&#x5728;&#x4E00;&#x4E9B;&#x5730;&#x65B9;&#xFF0C;&#x4E00;&#x4E2A;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x88AB;&#x7528;&#x6765;&#x5F71;&#x54CD;&#x63A8;&#x65AD;&#x3002;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x8BA8;&#x8BBA;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x7684;&#x63A8;&#x65AD;&#x3002; Most of the time,types are inferred on their own and may then be uni&#xFB01;ed with an expected type. In a few places,however,an expected type may be used to in&#xFB02;uence inference. We then speak of top-down inference. &#x9884;&#x671F;&#x7C7B;&#x578B; &#x5B9A;&#x4E49;&#xFF1A;&#x9884;&#x671F;&#x7C7B;&#x578B; &#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x5728;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5728;&#x5B83;&#x88AB;&#x7C7B;&#x578B;&#x5316;&#x4E4B;&#x524D;&#x5DF2;&#x77E5;&#x7684;&#x65F6;&#x5019;&#x51FA;&#x73B0;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x56E0;&#x4E3A;&#x8868;&#x8FBE;&#x5F0F;&#x88AB;&#x770B;&#x4F5C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x3002;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x5F71;&#x54CD;&#x8FD9;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5316;&#xFF0C;&#x901A;&#x8FC7;&#x6240;&#x8C13;&#x7684;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6.1&#x8282;&#xFF09;&#x3002; [warning] De&#xFB01;nition: Expected Type Expected types occur when the type of an expression is known before that expression has been typed, e.g. because the expression is argument to a function call. They can in&#xFB02;uence typing of that expression through what is called top-down inference (3.6.1). &#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x4F8B;&#x5B50;&#x662F;&#x6DF7;&#x5408;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x7EC4;&#x3002;&#x5982;&#x5728; Dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#x4E2D;&#x63D0;&#x5230;&#x7684;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x62D2;&#x7EDD;[1,&#x201D;foo&#x201D;]&#x56E0;&#x4E3A;&#x5B83;&#x4E0D;&#x80FD;&#x786E;&#x5B9A;&#x5143;&#x7D20;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x4F7F;&#x7528;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x7684;&#x63A8;&#x65AD;&#xFF0C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x88AB;&#x514B;&#x670D;&#xFF1A; A good example are arrays of mixed types. As mentioned in Dynamic (Section 2.7), the compiler refuses [1, &#x201C;foo&#x201D;] because it cannot determine an element type. Employing top-down inference, this can be overcome: 1 2 3 4 5 class Main { static public function main () { var a: Array  Dynamic  = [ 1 , foo ]; } } &#x8FD9;&#x91CC;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x77E5;&#x9053;&#x5F53;&#x7C7B;&#x578B;&#x5316; [1,&#x201D;foo&#x201D;]&#xFF0C;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x662F; Array&#xFF0C;&#x6240;&#x4EE5;&#x5143;&#x7D20;&#x7C7B;&#x578B;&#x662F; Dynamic &#x3002;&#x548C;&#x901A;&#x5E38;&#x7684;&#x5408;&#x4E00;&#x884C;&#x4E3A;&#x4E0D;&#x540C;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x5C1D;&#x8BD5;&#xFF08;&#x5E76;&#x5931;&#x8D25;&#xFF09;&#x53BB;&#x786E;&#x5B9A;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.5.5&#x8282;&#xFF09;&#xFF0C;&#x4E2A;&#x522B;&#x7684;&#x5143;&#x7D20;&#x4E0D;&#x5229;&#x4E8E;&#x7C7B;&#x578B;&#x5316;&#x4F1A;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A; Dynamic&#x3002; Here,the compiler knows while typing [1, &#x201C;foo&#x201D;] that the expected type is Array, so the element type is Dynamic. Instead of the usual uni&#xFB01;cation behavior where the compiler would attempt (and fail) to determine a common base type (3.5.5), the individual elements are typed against and uni&#xFB01;ed with Dynamic. &#x5728;&#x6784;&#x5EFA;&#x6CDB;&#x578B;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.3.1&#x8282;&#xFF09;&#x88AB;&#x5F15;&#x5165;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x4E86;&#x53E6;&#x4E00;&#x4E2A;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD;&#x7684;&#x6709;&#x8DA3;&#x7528;&#x6CD5; We have seen another interesting use of top-down inference when construction of generic type parameters (3.3.1) was introduced: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 typedef Constructible = { public function new (s: String ): Void ; } class Main { static public function main () { var s: String = make(); var t: haxe .Template = make(); } @:generic static function makeT:Constructible():T { return new T ( foo ); } } &#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B; String&#x662F; &#x88AB;haxe.Template&#x5728;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x6765;&#x786E;&#x5B9A;make&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x4E3A; make()&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4F1A;&#x5206;&#x914D;&#x5230;&#x53D8;&#x91CF;&#x3002;&#x5229;&#x7528;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#xFF0C;&#x53EF;&#x4EE5;&#x5206;&#x522B;&#x7ED1;&#x5B9A; unknown &#x7C7B;&#x578B; T&#x5230; String&#x548C; haxe.Template &#x3002; The explicit types String and haxe.Template are used here to determine the return type of make. This works because the method is invoked as make(),so we know the return type will be assigned to the variables. Utilizing this information, it is possible to bind the unknown type T to String and haxe.Template respectively.3.6.1.&#x7531;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD; &#x5927;&#x591A;&#x6570;&#x65F6;&#x5019;&#xFF0C;&#x7C7B;&#x578B;&#x81EA;&#x5DF1;&#x88AB;&#x63A8;&#x65AD;&#xFF0C;&#x7136;&#x540E;&#x53EF;&#x4EE5;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x4E00;&#x4E2A;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x7136;&#x800C;&#x5728;&#x4E00;&#x4E9B;&#x5730;&#x65B9;&#xFF0C;&#x4E00;&#x4E2A;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x53EF;&#x80FD;&#x88AB;&#x7528;&#x6765;&#x5F71;&#x54CD;&#x63A8;&#x65AD;&#x3002;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x8BA8;&#x8BBA;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x7684;&#x63A8;&#x65AD;&#x3002; Most of the time,types are inferred on their own and may then be uni&#xFB01;ed with an expected type. In a few places,however,an expected type may be used to in&#xFB02;uence inference. We then speak of top-down inference. &#x9884;&#x671F;&#x7C7B;&#x578B; &#x5B9A;&#x4E49;&#xFF1A;&#x9884;&#x671F;&#x7C7B;&#x578B; &#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x5728;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5728;&#x5B83;&#x88AB;&#x7C7B;&#x578B;&#x5316;&#x4E4B;&#x524D;&#x5DF2;&#x77E5;&#x7684;&#x65F6;&#x5019;&#x51FA;&#x73B0;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x56E0;&#x4E3A;&#x8868;&#x8FBE;&#x5F0F;&#x88AB;&#x770B;&#x4F5C;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x8C03;&#x7528;&#x3002;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x5F71;&#x54CD;&#x8FD9;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x5316;&#xFF0C;&#x901A;&#x8FC7;&#x6240;&#x8C13;&#x7684;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD;&#xFF08;&#x7B2C;3.6.1&#x8282;&#xFF09;&#x3002; [warning] De&#xFB01;nition: Expected Type Expected types occur when the type of an expression is known before that expression has been typed, e.g. because the expression is argument to a function call. They can in&#xFB02;uence typing of that expression through what is called top-down inference (3.6.1). &#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x4F8B;&#x5B50;&#x662F;&#x6DF7;&#x5408;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x7EC4;&#x3002;&#x5982;&#x5728; Dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#x4E2D;&#x63D0;&#x5230;&#x7684;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x62D2;&#x7EDD;[1,&#x201D;foo&#x201D;]&#x56E0;&#x4E3A;&#x5B83;&#x4E0D;&#x80FD;&#x786E;&#x5B9A;&#x5143;&#x7D20;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x4F7F;&#x7528;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x7684;&#x63A8;&#x65AD;&#xFF0C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x88AB;&#x514B;&#x670D;&#xFF1A; A good example are arrays of mixed types. As mentioned in Dynamic (Section 2.7), the compiler refuses [1, &#x201C;foo&#x201D;] because it cannot determine an element type. Employing top-down inference, this can be overcome: 1 2 3 4 5 6  class Main {  static public function main () {  var a: Array  Dynamic  = [ 1 , foo ];  }  }  &#x8FD9;&#x91CC;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x77E5;&#x9053;&#x5F53;&#x7C7B;&#x578B;&#x5316; [1,&#x201D;foo&#x201D;]&#xFF0C;&#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#x662F; Array&#xFF0C;&#x6240;&#x4EE5;&#x5143;&#x7D20;&#x7C7B;&#x578B;&#x662F; Dynamic &#x3002;&#x548C;&#x901A;&#x5E38;&#x7684;&#x5408;&#x4E00;&#x884C;&#x4E3A;&#x4E0D;&#x540C;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x5C1D;&#x8BD5;&#xFF08;&#x5E76;&#x5931;&#x8D25;&#xFF09;&#x53BB;&#x786E;&#x5B9A;&#x4E00;&#x4E2A;&#x901A;&#x7528;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.5.5&#x8282;&#xFF09;&#xFF0C;&#x4E2A;&#x522B;&#x7684;&#x5143;&#x7D20;&#x4E0D;&#x5229;&#x4E8E;&#x7C7B;&#x578B;&#x5316;&#x4F1A;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A; Dynamic&#x3002; Here,the compiler knows while typing [1, &#x201C;foo&#x201D;] that the expected type is Array, so the element type is Dynamic. Instead of the usual uni&#xFB01;cation behavior where the compiler would attempt (and fail) to determine a common base type (3.5.5), the individual elements are typed against and uni&#xFB01;ed with Dynamic. &#x5728;&#x6784;&#x5EFA;&#x6CDB;&#x578B;&#x7C7B;&#x578B;&#x53C2;&#x6570;&#xFF08;&#x7B2C;3.3.1&#x8282;&#xFF09;&#x88AB;&#x5F15;&#x5165;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x4E86;&#x53E6;&#x4E00;&#x4E2A;&#x81EA;&#x4E0A;&#x800C;&#x4E0B;&#x63A8;&#x65AD;&#x7684;&#x6709;&#x8DA3;&#x7528;&#x6CD5; We have seen another interesting use of top-down inference when construction of generic type parameters (3.3.1) was introduced: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  typedef Constructible = {  public function new (s: String ): Void ;  }   class Main {  static public function main () {  var s: String = make();  var t: haxe .Template = make();  }   @:generic  static function makeT:Constructible():T {  return new T ( foo );  }  }  &#x663E;&#x5F0F;&#x7684;&#x7C7B;&#x578B; String&#x662F; &#x88AB;haxe.Template&#x5728;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x6765;&#x786E;&#x5B9A;make&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x4E3A; make()&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4F1A;&#x5206;&#x914D;&#x5230;&#x53D8;&#x91CF;&#x3002;&#x5229;&#x7528;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F;&#xFF0C;&#x53EF;&#x4EE5;&#x5206;&#x522B;&#x7ED1;&#x5B9A; unknown &#x7C7B;&#x578B; T&#x5230; String&#x548C; haxe.Template &#x3002; The explicit types String and haxe.Template are used here to determine the return type of make. This works because the method is invoked as make(),so we know the return type will be assigned to the variables. Utilizing this information, it is possible to bind the unknown type T to String and haxe.Template respectively."},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html":{"title":"","path":"\\3.类型系统\\3.7.模块和路径\\3.7.1.模块子类型.html","body":"3.7.1.模块子类型 模块子类型是一个模块中与模块不同名的类型。这使得一个 .hx 文件中可以包含多个类型声明，这些类型可以在该模块中不受限制地被调用，但从其它模块中使用时需通过 package.Modoule.Type 的形式进行访问: A module sub-type is a type declared in a module with a different name than that module. This allows a single .hx ﬁle to contain multiple types, which can be accessed unqualiﬁed from within the module, and by using package.Module.Type from other modules: 1 var e: haxe .macro.Expr.ExprDef; 此处访问了 haxe.macro.Expr 模块中的模块子类型 ExprDef 。 模块子类型的声明可能看起来如下所示： 1 2 3 4 5 6 // a/A.hx package a; class A  public function new ()   // sub-type class B  public function new ()   1 2 3 4 5 6 7 8 9 10 11 // Main.hx import a.A; class Main  static function main ()  var subtype1 = new a .A.B(); // these are also valid, but require import a.A or import a.A.B var subtype2 = new B (); var subtype3 = new a .B();   模块子类型的关系不会反映于运行时；一个修饰为 public 的模块子类型会被认为是其所在的包（package）的一个成员，比如在上面的例子中，模块子类型 ExprDef 会被生成为 haxe.macro.ExprDef 。所以当一个包中存在两个模块，且两个模块中定义了同名的模块子类型时可能会产生冲突。通常，Haxe编译器会侦测到这类情况并做出相应报告。 模块子类型也可以被声明为私有的（private）： 1 2 3 4 private class C ... private enum E  ... private typedef T ... private abstract A  ... 定义：私有类型 一个类型可以通过 private 访问修饰符被声明为私有。这会导致这个类型只能从定义它的这个模块内部直接进行访问。私有类型不像公开类型，不会成为它们所在的包的成员。 Deﬁnition: Private type A type can be made private by using the private modiﬁer. As a result,the type can only be directly accessed from within the module (3.7) it is deﬁned in. Private types, unlike public ones, do not become a member of their containing package. 类型的可访问性可以通过访问控制（第6.10节）进行更精确地控制。 The accessibility of types can be controlled more precisely by using access control ."},"3.类型系统/3.7.模块和路径/3.7.1.模块子类型.html#3-7-1-模块子类型":{"title":"3.7.1.&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;","path":"\\3.类型系统\\3.7.模块和路径\\3.7.1.模块子类型.html#3-7-1-模块子类型","body":"&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x662F;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x4E2D;&#x4E0E;&#x6A21;&#x5757;&#x4E0D;&#x540C;&#x540D;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x4F7F;&#x5F97;&#x4E00;&#x4E2A; .hx &#x6587;&#x4EF6;&#x4E2D;&#x53EF;&#x4EE5;&#x5305;&#x542B;&#x591A;&#x4E2A;&#x7C7B;&#x578B;&#x58F0;&#x660E;&#xFF0C;&#x8FD9;&#x4E9B;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x5728;&#x8BE5;&#x6A21;&#x5757;&#x4E2D;&#x4E0D;&#x53D7;&#x9650;&#x5236;&#x5730;&#x88AB;&#x8C03;&#x7528;&#xFF0C;&#x4F46;&#x4ECE;&#x5176;&#x5B83;&#x6A21;&#x5757;&#x4E2D;&#x4F7F;&#x7528;&#x65F6;&#x9700;&#x901A;&#x8FC7; package.Modoule.Type &#x7684;&#x5F62;&#x5F0F;&#x8FDB;&#x884C;&#x8BBF;&#x95EE;: A module sub-type is a type declared in a module with a different name than that module. This allows a single .hx &#xFB01;le to contain multiple types, which can be accessed unquali&#xFB01;ed from within the module, and by using package.Module.Type from other modules: 1 var e: haxe .macro.Expr.ExprDef; &#x6B64;&#x5904;&#x8BBF;&#x95EE;&#x4E86; haxe.macro.Expr &#x6A21;&#x5757;&#x4E2D;&#x7684;&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B; ExprDef &#x3002; &#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x7684;&#x58F0;&#x660E;&#x53EF;&#x80FD;&#x770B;&#x8D77;&#x6765;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A; 1 2 3 4 5 6 // a/A.hx package a; class A { public function new () {} } // sub-type class B { public function new () {} } 1 2 3 4 5 6 7 8 9 10 11 // Main.hx import a.A; class Main { static function main () { var subtype1 = new a .A.B(); // these are also valid, but require import a.A or import a.A.B var subtype2 = new B (); var subtype3 = new a .B(); } } &#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x7684;&#x5173;&#x7CFB;&#x4E0D;&#x4F1A;&#x53CD;&#x6620;&#x4E8E;&#x8FD0;&#x884C;&#x65F6;&#xFF1B;&#x4E00;&#x4E2A;&#x4FEE;&#x9970;&#x4E3A; public &#x7684;&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x4F1A;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x5176;&#x6240;&#x5728;&#x7684;&#x5305;&#xFF08;package&#xFF09;&#x7684;&#x4E00;&#x4E2A;&#x6210;&#x5458;&#xFF0C;&#x6BD4;&#x5982;&#x5728;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B; ExprDef &#x4F1A;&#x88AB;&#x751F;&#x6210;&#x4E3A; haxe.macro.ExprDef &#x3002;&#x6240;&#x4EE5;&#x5F53;&#x4E00;&#x4E2A;&#x5305;&#x4E2D;&#x5B58;&#x5728;&#x4E24;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x4E14;&#x4E24;&#x4E2A;&#x6A21;&#x5757;&#x4E2D;&#x5B9A;&#x4E49;&#x4E86;&#x540C;&#x540D;&#x7684;&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x65F6;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x51B2;&#x7A81;&#x3002;&#x901A;&#x5E38;&#xFF0C;Haxe&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x4FA6;&#x6D4B;&#x5230;&#x8FD9;&#x7C7B;&#x60C5;&#x51B5;&#x5E76;&#x505A;&#x51FA;&#x76F8;&#x5E94;&#x62A5;&#x544A;&#x3002; &#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#x4E5F;&#x53EF;&#x4EE5;&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x79C1;&#x6709;&#x7684;&#xFF08;private&#xFF09;&#xFF1A; 1 2 3 4 private class C {...} private enum E { ...} private typedef T {...} private abstract A { ...} &#x5B9A;&#x4E49;&#xFF1A;&#x79C1;&#x6709;&#x7C7B;&#x578B; &#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x901A;&#x8FC7; private &#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;&#x88AB;&#x58F0;&#x660E;&#x4E3A;&#x79C1;&#x6709;&#x3002;&#x8FD9;&#x4F1A;&#x5BFC;&#x81F4;&#x8FD9;&#x4E2A;&#x7C7B;&#x578B;&#x53EA;&#x80FD;&#x4ECE;&#x5B9A;&#x4E49;&#x5B83;&#x7684;&#x8FD9;&#x4E2A;&#x6A21;&#x5757;&#x5185;&#x90E8;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x8BBF;&#x95EE;&#x3002;&#x79C1;&#x6709;&#x7C7B;&#x578B;&#x4E0D;&#x50CF;&#x516C;&#x5F00;&#x7C7B;&#x578B;&#xFF0C;&#x4E0D;&#x4F1A;&#x6210;&#x4E3A;&#x5B83;&#x4EEC;&#x6240;&#x5728;&#x7684;&#x5305;&#x7684;&#x6210;&#x5458;&#x3002; De&#xFB01;nition: Private type A type can be made private by using the private modi&#xFB01;er. As a result,the type can only be directly accessed from within the module (3.7) it is de&#xFB01;ned in. Private types, unlike public ones, do not become a member of their containing package. &#x7C7B;&#x578B;&#x7684;&#x53EF;&#x8BBF;&#x95EE;&#x6027;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8BBF;&#x95EE;&#x63A7;&#x5236;&#xFF08;&#x7B2C;6.10&#x8282;&#xFF09;&#x8FDB;&#x884C;&#x66F4;&#x7CBE;&#x786E;&#x5730;&#x63A7;&#x5236;&#x3002; The accessibility of types can be controlled more precisely by using access control ."},"3.类型系统/3.6.类型推断/3.6.类型推断.html":{"title":"","path":"\\3.类型系统\\3.6.类型推断\\3.6.类型推断.html","body":"3.6.类型推断 类型推断的效果将会频繁出现于整个文档中。一个例子可以展示类型推断： The effects of type inference have been seen throughout this document and will continue to be important. A simple example shows type inference at work: 1 2 3 4 5 6 7 8 class Main  public static function main ()  var x = null ; $type(x); // Unknown0 x = \"foo\" ; $type(x); // String   这里有个特殊的 $type 结构在之前为了便于 函数类型（2.6） 的说明稍有提及，现在让我们来正式地介绍它： The special construct $type was previously mentioned in order to simplify the explanation of the Function Type (Section 2.6) type, so let us now introduce it ofﬁcially: 定义：$type $type 是一个可以像函数一样调用的编译时机制，它接受一个参数。编译器执行参数的表达式并输出表达式的类型。 [warning] Construct: $type $type is a compile-time mechanism being called like a function,with a single argument. The compiler evaluates the argument expression and then outputs the type of that expression. 在上面的例子中，第一个 $type 输出 Unknow0 。这是一个 单形（第2.9节），一个还不知道其类型的类型。下一行 x = foo 将一个 String 类型的字面值赋值到变量 x 上，于是触发了这个单形与 String 之间的一致性检查 。然后我们可以看到 x 的类型被改变为 String 类型了 。 In the example above, the first $type prints Unknown0 . This is a monomorph , a type that is not yet known. The next line x = foo assigns a String literal to x , which causes the unification of the monomorph with String . We then see that the type of x has changed to String . 每当一个不同于 Dynamic（第2.7节）的类型被统一为一个单形时，这个单形便会变形（morph）为该类型，并且在此之后它就不能再变形为另外的类型了。这一特性正如其名字中的 mono（单一的）所表达的一样。 Whenever a type other than Dynamic is unified with a monomorph, that monomorph morphs into that type, or in simpler terms, becomes that type. Therefore, it cannot morph into a different type afterwards, a property expressed in the mono part of its name. 遵循一致性检查的规则，类型推断可以在复合类型中触发： Following the rules of uniﬁcation, type inference can occur in compound types: 1 2 3 4 5 6 7 8 class Main  public static function main ()  var x = []; $type(x); // ArrayUnknown0 x.push( \"foo\" ); $type(x); // ArrayString   变量 x 在一开始被初始化为一个空的 Array 数组。此时我们除了知道变量 x 是一个数组外并不知道其数组元素的具体类型。此时 x 的类型必然为 ArrayUnknown0 。只有当我们为其推入一个 Sring 类型元素之后才知道其类型为 ArrayString 。 Variable x is first initialized to an empty Array . At this point, we can tell that the type of x is an array, but we do not yet know the type of the array elements. Consequently, the type of x is ArrayUnknown0 . It is only after pushing a String onto the array that we know the type to be ArrayString ."},"3.类型系统/3.6.类型推断/3.6.类型推断.html#3-6-类型推断":{"title":"3.6.&#x7C7B;&#x578B;&#x63A8;&#x65AD;","path":"\\3.类型系统\\3.6.类型推断\\3.6.类型推断.html#3-6-类型推断","body":"&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x7684;&#x6548;&#x679C;&#x5C06;&#x4F1A;&#x9891;&#x7E41;&#x51FA;&#x73B0;&#x4E8E;&#x6574;&#x4E2A;&#x6587;&#x6863;&#x4E2D;&#x3002;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x53EF;&#x4EE5;&#x5C55;&#x793A;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#xFF1A; The effects of type inference have been seen throughout this document and will continue to be important. A simple example shows type inference at work: 1 2 3 4 5 6 7 8 class Main { public static function main () { var x = null ; $type(x); // Unknown0 x = foo ; $type(x); // String } } &#x8FD9;&#x91CC;&#x6709;&#x4E2A;&#x7279;&#x6B8A;&#x7684; $type &#x7ED3;&#x6784;&#x5728;&#x4E4B;&#x524D;&#x4E3A;&#x4E86;&#x4FBF;&#x4E8E; &#x51FD;&#x6570;&#x7C7B;&#x578B;&#xFF08;2.6&#xFF09; &#x7684;&#x8BF4;&#x660E;&#x7A0D;&#x6709;&#x63D0;&#x53CA;&#xFF0C;&#x73B0;&#x5728;&#x8BA9;&#x6211;&#x4EEC;&#x6765;&#x6B63;&#x5F0F;&#x5730;&#x4ECB;&#x7ECD;&#x5B83;&#xFF1A; The special construct $type was previously mentioned in order to simplify the explanation of the Function Type (Section 2.6) type, so let us now introduce it of&#xFB01;cially: &#x5B9A;&#x4E49;&#xFF1A;$type $type &#x662F;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x50CF;&#x51FD;&#x6570;&#x4E00;&#x6837;&#x8C03;&#x7528;&#x7684;&#x7F16;&#x8BD1;&#x65F6;&#x673A;&#x5236;&#xFF0C;&#x5B83;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x3002;&#x7F16;&#x8BD1;&#x5668;&#x6267;&#x884C;&#x53C2;&#x6570;&#x7684;&#x8868;&#x8FBE;&#x5F0F;&#x5E76;&#x8F93;&#x51FA;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x7C7B;&#x578B;&#x3002; [warning] Construct: $type $type is a compile-time mechanism being called like a function,with a single argument. The compiler evaluates the argument expression and then outputs the type of that expression. &#x5728;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A; $type &#x8F93;&#x51FA; Unknow0 &#x3002;&#x8FD9;&#x662F;&#x4E00;&#x4E2A; &#x5355;&#x5F62;&#xFF08;&#x7B2C;2.9&#x8282;&#xFF09;&#xFF0C;&#x4E00;&#x4E2A;&#x8FD8;&#x4E0D;&#x77E5;&#x9053;&#x5176;&#x7C7B;&#x578B;&#x7684;&#x7C7B;&#x578B;&#x3002;&#x4E0B;&#x4E00;&#x884C; x = foo &#x5C06;&#x4E00;&#x4E2A; String &#x7C7B;&#x578B;&#x7684;&#x5B57;&#x9762;&#x503C;&#x8D4B;&#x503C;&#x5230;&#x53D8;&#x91CF; x &#x4E0A;&#xFF0C;&#x4E8E;&#x662F;&#x89E6;&#x53D1;&#x4E86;&#x8FD9;&#x4E2A;&#x5355;&#x5F62;&#x4E0E; String &#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5; &#x3002;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230; x &#x7684;&#x7C7B;&#x578B;&#x88AB;&#x6539;&#x53D8;&#x4E3A; String &#x7C7B;&#x578B;&#x4E86; &#x3002; In the example above, the first $type prints Unknown0 . This is a monomorph , a type that is not yet known. The next line x = foo assigns a String literal to x , which causes the unification of the monomorph with String . We then see that the type of x has changed to String . &#x6BCF;&#x5F53;&#x4E00;&#x4E2A;&#x4E0D;&#x540C;&#x4E8E; Dynamic&#xFF08;&#x7B2C;2.7&#x8282;&#xFF09;&#x7684;&#x7C7B;&#x578B;&#x88AB;&#x7EDF;&#x4E00;&#x4E3A;&#x4E00;&#x4E2A;&#x5355;&#x5F62;&#x65F6;&#xFF0C;&#x8FD9;&#x4E2A;&#x5355;&#x5F62;&#x4FBF;&#x4F1A;&#x53D8;&#x5F62;&#xFF08;morph&#xFF09;&#x4E3A;&#x8BE5;&#x7C7B;&#x578B;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x6B64;&#x4E4B;&#x540E;&#x5B83;&#x5C31;&#x4E0D;&#x80FD;&#x518D;&#x53D8;&#x5F62;&#x4E3A;&#x53E6;&#x5916;&#x7684;&#x7C7B;&#x578B;&#x4E86;&#x3002;&#x8FD9;&#x4E00;&#x7279;&#x6027;&#x6B63;&#x5982;&#x5176;&#x540D;&#x5B57;&#x4E2D;&#x7684; mono&#xFF08;&#x5355;&#x4E00;&#x7684;&#xFF09;&#x6240;&#x8868;&#x8FBE;&#x7684;&#x4E00;&#x6837;&#x3002; Whenever a type other than Dynamic is unified with a monomorph, that monomorph morphs into that type, or in simpler terms, becomes that type. Therefore, it cannot morph into a different type afterwards, a property expressed in the mono part of its name. &#x9075;&#x5FAA;&#x4E00;&#x81F4;&#x6027;&#x68C0;&#x67E5;&#x7684;&#x89C4;&#x5219;&#xFF0C;&#x7C7B;&#x578B;&#x63A8;&#x65AD;&#x53EF;&#x4EE5;&#x5728;&#x590D;&#x5408;&#x7C7B;&#x578B;&#x4E2D;&#x89E6;&#x53D1;&#xFF1A; Following the rules of uni&#xFB01;cation, type inference can occur in compound types: 1 2 3 4 5 6 7 8 class Main { public static function main () { var x = []; $type(x); // ArrayUnknown0 x.push( foo ); $type(x); // ArrayString } } &#x53D8;&#x91CF; x &#x5728;&#x4E00;&#x5F00;&#x59CB;&#x88AB;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x4E00;&#x4E2A;&#x7A7A;&#x7684; Array &#x6570;&#x7EC4;&#x3002;&#x6B64;&#x65F6;&#x6211;&#x4EEC;&#x9664;&#x4E86;&#x77E5;&#x9053;&#x53D8;&#x91CF; x &#x662F;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x5916;&#x5E76;&#x4E0D;&#x77E5;&#x9053;&#x5176;&#x6570;&#x7EC4;&#x5143;&#x7D20;&#x7684;&#x5177;&#x4F53;&#x7C7B;&#x578B;&#x3002;&#x6B64;&#x65F6; x &#x7684;&#x7C7B;&#x578B;&#x5FC5;&#x7136;&#x4E3A; ArrayUnknown0 &#x3002;&#x53EA;&#x6709;&#x5F53;&#x6211;&#x4EEC;&#x4E3A;&#x5176;&#x63A8;&#x5165;&#x4E00;&#x4E2A; Sring &#x7C7B;&#x578B;&#x5143;&#x7D20;&#x4E4B;&#x540E;&#x624D;&#x77E5;&#x9053;&#x5176;&#x7C7B;&#x578B;&#x4E3A; ArrayString &#x3002; Variable x is first initialized to an empty Array . At this point, we can tell that the type of x is an array, but we do not yet know the type of the array elements. Consequently, the type of x is ArrayUnknown0 . It is only after pushing a String onto the array that we know the type to be ArrayString ."},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html":{"title":"","path":"\\3.类型系统\\3.7.模块和路径\\3.7.3.解析顺序.html","body":"3.7.3.解析顺序 解析顺序一被引入就涉及到不受限制的标识符 。如 foo()，foo=1，foo.field等这些是表达式（第5章）。特别是最后一个包括类似 haxe.ds.StringMap的模块路径，haxe是一个绝对的标识符。 Resolution order comes into play as soon as unqualiﬁed identiﬁers are involved. These are expressions(5)intheformoffoo(),foo = 1andfoo.field. The last one in particular includes module paths such as haxe.ds.StringMap, where haxe is an unqualiﬁed identiﬁer. 我们描述解析顺序的算法，取决于以下的状态： We describe the resolution order algorithm here, which depends on the following state: 声明的局部变量（第5.10节）（包括函数参数） 导入（第3.7.2节）的模块，类型和静态字段 可用的静态扩展（第6.3节） 当前字段的种类（static或者成员） 当前类及其父类声明的成员字段 当前类声明的静态字段 预期的类型（第3.6.1节） untyped或者不是untyped的表达式 the declared local variables (5.10) (including function arguments) the imported (3.7.2) modules, types and statics the available static extensions (6.3) the kind (static or member) of the current ﬁeld the declared member ﬁelds on the current class and its parent classes the declared static ﬁelds on the current class the expected type (3.6.1) the expression being untyped or not 给定一个标识符 i ，算法规则如下： Given an identiﬁer i, the algorithm is as follows: 如果i 是true，false，this，super或者null，解析到匹配的 常量并停止 如果一个局部变量命名为 i为可访问的，解析它并停止 如果当前的字段是静态的，跳到6 如果当前的类或者任何它的父类有一个字段命名为 i，解析到它并停止 如果一个静态扩展带有第一个当前类类型的参数可用，解析到它并停止 如果当前的类有一个静态字段命名为 i，解析到它并停止 如果一个枚举构造函数命名为i声明在一个导入的枚举，解析到它并停止 如果一个静态方法 i 被显式导入，解析到它并停止 如果i通过一个小写字母开始，跳到11 如果类型名为 i 是可用的，解析到它并停止 如果表达式不是 untyped模式，跳到14 如果i和这个相等，解析到这个常量并停止 产生一个局部变量命名为 i，解析到它并停止 失败 If i is true, false, this, super or null, resolve to the matching constant and halt. If a local variable named i is accessible, resolve to it and halt. If the current ﬁeld is static, go to 6. If the current class or any of its parent classes has a ﬁeld named i, resolve to it and halt. If a static extension with a ﬁrst argument of the type of the current class is available,resolve to it and halt. If the current class has a static ﬁeld named i, resolve to it and halt. If an enum constructor named i is declared on an imported enum, resolve to it and halt. If a static named i is explicitly imported, resolve to it and halt. If i starts with a lower-case character, go to 11. If a type named i is available, resolve to it and halt. If the expression is not in untyped mode, go to 14 If i equals this , resolve to the this constant and halt. Generate a local variable named i, resolve to it and halt. Fail 对于第10步，也需要定义类型的解析顺序： For step 10, it is also necessary to deﬁne the resolution order of types: 如果一个类型名为 i 被导入（直接或者作为模块的部分导入），解析到它并停止 如果当前的包包含一个模块名为 i和类型名为i，解析到它并停止 如果一个类型名为i在顶层可用，解析到它并停止 失败 If a type named i is imported (directly or as part of a module), resolve to it and halt. If the current package contains a module named i with a type named i, resolve to it and halt. If a type named i is available at top-level, resolve to it and halt. Fail 对于这个算法的第一步，和之前的第5部第7步，导入决议的顺序很重要： For step 1 of this algorithm as well as steps 5 and 7 of the previous one, the order of import resolution is important: 导入的模块和静态扩展从底部到头部检查，第一个匹配的被采用 在一个给定模块，类型从头至尾检查 对于导入，如果名字相同则为匹配 对于静态扩展（第6.3节），如果名字相同并且第一个参数统一（第3.5节）则为匹配。在一个给定类型中被用作静态扩展的字段从头至尾进行检查。 Imported modules and static extensions are checked from bottom to top with the ﬁrst match being picked. Within a given module, types are checked from top to bottom. For imports, a match is made if the name equals. For static extensions (6.3), a match is made if the name equals and the ﬁrst argument uniﬁes (3.5). Within a given type being used as static extension, the ﬁelds are checked from top to bottom."},"3.类型系统/3.7.模块和路径/3.7.3.解析顺序.html#3-7-3-解析顺序":{"title":"3.7.3.&#x89E3;&#x6790;&#x987A;&#x5E8F;","path":"\\3.类型系统\\3.7.模块和路径\\3.7.3.解析顺序.html#3-7-3-解析顺序","body":"&#x89E3;&#x6790;&#x987A;&#x5E8F;&#x4E00;&#x88AB;&#x5F15;&#x5165;&#x5C31;&#x6D89;&#x53CA;&#x5230;&#x4E0D;&#x53D7;&#x9650;&#x5236;&#x7684;&#x6807;&#x8BC6;&#x7B26; &#x3002;&#x5982; foo()&#xFF0C;foo=1&#xFF0C;foo.field&#x7B49;&#x8FD9;&#x4E9B;&#x662F;&#x8868;&#x8FBE;&#x5F0F;&#xFF08;&#x7B2C;5&#x7AE0;&#xFF09;&#x3002;&#x7279;&#x522B;&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5305;&#x62EC;&#x7C7B;&#x4F3C; haxe.ds.StringMap&#x7684;&#x6A21;&#x5757;&#x8DEF;&#x5F84;&#xFF0C;haxe&#x662F;&#x4E00;&#x4E2A;&#x7EDD;&#x5BF9;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#x3002; Resolution order comes into play as soon as unquali&#xFB01;ed identi&#xFB01;ers are involved. These are expressions(5)intheformoffoo(),foo = 1andfoo.field. The last one in particular includes module paths such as haxe.ds.StringMap, where haxe is an unquali&#xFB01;ed identi&#xFB01;er. &#x6211;&#x4EEC;&#x63CF;&#x8FF0;&#x89E3;&#x6790;&#x987A;&#x5E8F;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x53D6;&#x51B3;&#x4E8E;&#x4EE5;&#x4E0B;&#x7684;&#x72B6;&#x6001;&#xFF1A; We describe the resolution order algorithm here, which depends on the following state: &#x58F0;&#x660E;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF08;&#x7B2C;5.10&#x8282;&#xFF09;&#xFF08;&#x5305;&#x62EC;&#x51FD;&#x6570;&#x53C2;&#x6570;&#xFF09; &#x5BFC;&#x5165;&#xFF08;&#x7B2C;3.7.2&#x8282;&#xFF09;&#x7684;&#x6A21;&#x5757;&#xFF0C;&#x7C7B;&#x578B;&#x548C;&#x9759;&#x6001;&#x5B57;&#x6BB5; &#x53EF;&#x7528;&#x7684;&#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09; &#x5F53;&#x524D;&#x5B57;&#x6BB5;&#x7684;&#x79CD;&#x7C7B;&#xFF08;static&#x6216;&#x8005;&#x6210;&#x5458;&#xFF09; &#x5F53;&#x524D;&#x7C7B;&#x53CA;&#x5176;&#x7236;&#x7C7B;&#x58F0;&#x660E;&#x7684;&#x6210;&#x5458;&#x5B57;&#x6BB5; &#x5F53;&#x524D;&#x7C7B;&#x58F0;&#x660E;&#x7684;&#x9759;&#x6001;&#x5B57;&#x6BB5; &#x9884;&#x671F;&#x7684;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.6.1&#x8282;&#xFF09; untyped&#x6216;&#x8005;&#x4E0D;&#x662F;untyped&#x7684;&#x8868;&#x8FBE;&#x5F0F; the declared local variables (5.10) (including function arguments) the imported (3.7.2) modules, types and statics the available static extensions (6.3) the kind (static or member) of the current &#xFB01;eld the declared member &#xFB01;elds on the current class and its parent classes the declared static &#xFB01;elds on the current class the expected type (3.6.1) the expression being untyped or not &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6807;&#x8BC6;&#x7B26; i &#xFF0C;&#x7B97;&#x6CD5;&#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A; Given an identi&#xFB01;er i, the algorithm is as follows: &#x5982;&#x679C;i &#x662F;true&#xFF0C;false&#xFF0C;this&#xFF0C;super&#x6216;&#x8005;null&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5339;&#x914D;&#x7684; &#x5E38;&#x91CF;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x547D;&#x540D;&#x4E3A; i&#x4E3A;&#x53EF;&#x8BBF;&#x95EE;&#x7684;&#xFF0C;&#x89E3;&#x6790;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x5F53;&#x524D;&#x7684;&#x5B57;&#x6BB5;&#x662F;&#x9759;&#x6001;&#x7684;&#xFF0C;&#x8DF3;&#x5230;6 &#x5982;&#x679C;&#x5F53;&#x524D;&#x7684;&#x7C7B;&#x6216;&#x8005;&#x4EFB;&#x4F55;&#x5B83;&#x7684;&#x7236;&#x7C7B;&#x6709;&#x4E00;&#x4E2A;&#x5B57;&#x6BB5;&#x547D;&#x540D;&#x4E3A; i&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x6269;&#x5C55;&#x5E26;&#x6709;&#x7B2C;&#x4E00;&#x4E2A;&#x5F53;&#x524D;&#x7C7B;&#x7C7B;&#x578B;&#x7684;&#x53C2;&#x6570;&#x53EF;&#x7528;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x5F53;&#x524D;&#x7684;&#x7C7B;&#x6709;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x547D;&#x540D;&#x4E3A; i&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x679A;&#x4E3E;&#x6784;&#x9020;&#x51FD;&#x6570;&#x547D;&#x540D;&#x4E3A;i&#x58F0;&#x660E;&#x5728;&#x4E00;&#x4E2A;&#x5BFC;&#x5165;&#x7684;&#x679A;&#x4E3E;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5; i &#x88AB;&#x663E;&#x5F0F;&#x5BFC;&#x5165;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;i&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;&#x5F00;&#x59CB;&#xFF0C;&#x8DF3;&#x5230;11 &#x5982;&#x679C;&#x7C7B;&#x578B;&#x540D;&#x4E3A; i &#x662F;&#x53EF;&#x7528;&#x7684;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x8868;&#x8FBE;&#x5F0F;&#x4E0D;&#x662F; untyped&#x6A21;&#x5F0F;&#xFF0C;&#x8DF3;&#x5230;14 &#x5982;&#x679C;i&#x548C;&#x8FD9;&#x4E2A;&#x76F8;&#x7B49;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x8FD9;&#x4E2A;&#x5E38;&#x91CF;&#x5E76;&#x505C;&#x6B62; &#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x547D;&#x540D;&#x4E3A; i&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5931;&#x8D25; If i is true, false, this, super or null, resolve to the matching constant and halt. If a local variable named i is accessible, resolve to it and halt. If the current &#xFB01;eld is static, go to 6. If the current class or any of its parent classes has a &#xFB01;eld named i, resolve to it and halt. If a static extension with a &#xFB01;rst argument of the type of the current class is available,resolve to it and halt. If the current class has a static &#xFB01;eld named i, resolve to it and halt. If an enum constructor named i is declared on an imported enum, resolve to it and halt. If a static named i is explicitly imported, resolve to it and halt. If i starts with a lower-case character, go to 11. If a type named i is available, resolve to it and halt. If the expression is not in untyped mode, go to 14 If i equals this , resolve to the this constant and halt. Generate a local variable named i, resolve to it and halt. Fail &#x5BF9;&#x4E8E;&#x7B2C;10&#x6B65;&#xFF0C;&#x4E5F;&#x9700;&#x8981;&#x5B9A;&#x4E49;&#x7C7B;&#x578B;&#x7684;&#x89E3;&#x6790;&#x987A;&#x5E8F;&#xFF1A; For step 10, it is also necessary to de&#xFB01;ne the resolution order of types: &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x540D;&#x4E3A; i &#x88AB;&#x5BFC;&#x5165;&#xFF08;&#x76F4;&#x63A5;&#x6216;&#x8005;&#x4F5C;&#x4E3A;&#x6A21;&#x5757;&#x7684;&#x90E8;&#x5206;&#x5BFC;&#x5165;&#xFF09;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x5F53;&#x524D;&#x7684;&#x5305;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x540D;&#x4E3A; i&#x548C;&#x7C7B;&#x578B;&#x540D;&#x4E3A;i&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x540D;&#x4E3A;i&#x5728;&#x9876;&#x5C42;&#x53EF;&#x7528;&#xFF0C;&#x89E3;&#x6790;&#x5230;&#x5B83;&#x5E76;&#x505C;&#x6B62; &#x5931;&#x8D25; If a type named i is imported (directly or as part of a module), resolve to it and halt. If the current package contains a module named i with a type named i, resolve to it and halt. If a type named i is available at top-level, resolve to it and halt. Fail &#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x7B97;&#x6CD5;&#x7684;&#x7B2C;&#x4E00;&#x6B65;&#xFF0C;&#x548C;&#x4E4B;&#x524D;&#x7684;&#x7B2C;5&#x90E8;&#x7B2C;7&#x6B65;&#xFF0C;&#x5BFC;&#x5165;&#x51B3;&#x8BAE;&#x7684;&#x987A;&#x5E8F;&#x5F88;&#x91CD;&#x8981;&#xFF1A; For step 1 of this algorithm as well as steps 5 and 7 of the previous one, the order of import resolution is important: &#x5BFC;&#x5165;&#x7684;&#x6A21;&#x5757;&#x548C;&#x9759;&#x6001;&#x6269;&#x5C55;&#x4ECE;&#x5E95;&#x90E8;&#x5230;&#x5934;&#x90E8;&#x68C0;&#x67E5;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x5339;&#x914D;&#x7684;&#x88AB;&#x91C7;&#x7528; &#x5728;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x6A21;&#x5757;&#xFF0C;&#x7C7B;&#x578B;&#x4ECE;&#x5934;&#x81F3;&#x5C3E;&#x68C0;&#x67E5; &#x5BF9;&#x4E8E;&#x5BFC;&#x5165;&#xFF0C;&#x5982;&#x679C;&#x540D;&#x5B57;&#x76F8;&#x540C;&#x5219;&#x4E3A;&#x5339;&#x914D; &#x5BF9;&#x4E8E;&#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x540D;&#x5B57;&#x76F8;&#x540C;&#x5E76;&#x4E14;&#x7B2C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x7EDF;&#x4E00;&#xFF08;&#x7B2C;3.5&#x8282;&#xFF09;&#x5219;&#x4E3A;&#x5339;&#x914D;&#x3002;&#x5728;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x7C7B;&#x578B;&#x4E2D;&#x88AB;&#x7528;&#x4F5C;&#x9759;&#x6001;&#x6269;&#x5C55;&#x7684;&#x5B57;&#x6BB5;&#x4ECE;&#x5934;&#x81F3;&#x5C3E;&#x8FDB;&#x884C;&#x68C0;&#x67E5;&#x3002; Imported modules and static extensions are checked from bottom to top with the &#xFB01;rst match being picked. Within a given module, types are checked from top to bottom. For imports, a match is made if the name equals. For static extensions (6.3), a match is made if the name equals and the &#xFB01;rst argument uni&#xFB01;es (3.5). Within a given type being used as static extension, the &#xFB01;elds are checked from top to bottom."},"3.类型系统/3.7.模块和路径/3.7.2.Import.html":{"title":"","path":"\\3.类型系统\\3.7.模块和路径\\3.7.2.Import.html","body":"3.7.2.Import 如果一个类型路径在一个 .hx 文件中会多次用到，可以使用 import 导入来缩短它。这可以使我们省略包名来使用类型： If a type path is used multiple times in a .hx ﬁle,it might make sense to use an import to shorten it. This allows omitting the package when using the type: 1 2 3 4 5 6 7 8 import haxe.ds.StringMap; class Main  static public function main ()  // instead of: new haxe.ds.StringMap(); new StringMap ();   随着haxe.ds.StringMap被导入之后，编译器就可以通过这个包解析 main 函数中不合法的标识符 StringMap。模块 StringMap 被告知需要被导入到当前的文件 。 With haxe.ds.StringMap being imported in the ﬁrst line,the compiler is able to resolve the unqualiﬁed identiﬁer StringMap in the main function to this package. The module StringMap is said to be imported into the current ﬁle. 在这个例子中，我们实际上导入了一个模块，而不只是模块中的一个类型。这意味着所有在被导入的模块中定义的类型都是可用的。 In this example, we are actually importing a module, not just a speciﬁc type within that module. This means that all types deﬁned within the imported module are available: 1 2 3 4 5 6 7 import haxe.macro.Expr; class Main  static public function main ()  var e: Binop = OpAdd;   类型 Binop 是haxe.macro.Expr模块中一个 enum（第2.4节）声明，因此在这个模块被导入之后就可以使用了。如果我们只要导入模块中的一个特定类型，例如，import haxe.macro.Expr.ExprDef，程序会编译失败，提示Binop类没有找到。 The type Binop is an enum (2.4) declared in the module haxe.macro.Expr,and thus available after the import of said module. If we were to import only a speciﬁc type of that module, e.g. import haxe.macro.Expr.ExprDef, the program would fail to compile with Class not found : Binop. 关于导入有几个方面需要了解： There are several aspects worth knowing about importing: 最底部的导入指令具有最高的优先级（详见 解析顺序（第3.7.3节））。 静态扩展（第6.3节）关键字 using 具有 import 的效果。 如果一个enum被导入（直接或作为模块的一部分被导入），所有它的enum构造函数（第2.4.1节）同样也被导入（这就是为什么在上面例子中允许 opAdd 的用法）。 The bottommost import takes priority (detailed in Resolution Order (Section 3.7.3)). The static extension (6.3) keyword using implies the effect of import. If an enum is imported (directly or as part of a module import), all its enum constructors (2.4.1) are also imported (this is what allows the OpAdd usage in the above example). 此外，也可以导入类的静态字段并不受限制的使用它们。 Furthermore, it is also possible to import static ﬁelds (4) of a class and use them unqualiﬁed: 1 2 3 4 5 6 7 import Math.random; class Main  static public function main ()  random();   必须特别注意，字段名或者局部变量名和包名的冲突：因为它们优先级高于包，如果有一个名为haxe的局部变量，它们会会阻挡整个haxe包的使用。 Special care has to be taken with ﬁeld names or local variable names that conﬂict with a package name: Since they take priority over packages, a local variable named haxe blocks off usage the entire haxe package. 通配符导入 ：Haxe允许使用 .* 使 import可以导入一个包中所有的模块、模块中的所有类型或者类型中的所有静态字段。通过以下例子重点了解此类导入操作只能覆盖同级的访问（only crosses a single level）： Wildcard import Haxe allows using .* to allow import of all modules in a package, all types in a module or all static ﬁelds in a type. It is important to understand that this kind of import only crosses a single level as we can see in the following example: 1 2 3 4 5 6 7 8 import haxe.macro.*; class Main  static function main ()  var expr: Expr = null ; //var expr:ExprDef = null; // Class not found : ExprDef   使用通配符到haxe.macro的导入，使这个包中的 Expr 模块可以被访问，但是它 不能使 Expr 模块的子类型 ExprDef 被访问 。这个规则当一个模块被导入时也扩展到静态字段。 Using the wildcard import on haxe.macro allows accessing Expr which is a module in this package, but it does not allow accessing ExprDef which is a sub-type of the Expr module. This rule extends to static ﬁelds when a module is imported. 当使用通配符导入一个包，编译器并不会立即处理包中的所有模块。这意味着这些模块除非被明确使用否则不会被作为输出的一部分生成。 When using wildcard imports on a package, the compiler does not eagerly process all modules in that package; modules that have not been used explicitly are not part of the generated output. 使用别名导入 如果一个类型或静态字段在一个导入它的模块中经常使用，可以为它引入别名为一个简短的名字。这也可以用来通过给定一个唯一的标识符来消除命名冲突。 Import with alias If a type or static ﬁeld is used a lot in an importing module it might help to alias it to a shorter name. This can also be used to disambiguate conﬂicting names by giving them a unique identiﬁer. 1 2 3 4 5 6 7 8 9 import String .fromCharCode in f; class Main  static function main ()  var c1 = f( 65 ); var c2 = f( 66 ); trace (c1 + c2); // AB   这里我们导入String.fromCharCode为 f，使我们可以使用 f(65) 和 f(66)。达到和局部变量一样的使用，这个方法是编译时功能，不会有运行时开销。 Here we import String.fromCharCode as f which allows us to use f(65) and f(66). While the same could be achieved with a local variable, this method is compile-time exclusive and guaranteed to have no run-time overhead. 从Haxe3.2.0后 ，Haxe允许使用更自然的 as 替代 in 。 Since Haxe 3.2.0 Haxe also allows the more natural as in place of in."},"3.类型系统/3.7.模块和路径/3.7.2.Import.html#3-7-2-Import":{"title":"3.7.2.Import","path":"\\3.类型系统\\3.7.模块和路径\\3.7.2.Import.html#3-7-2-Import","body":"&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x8DEF;&#x5F84;&#x5728;&#x4E00;&#x4E2A; .hx &#x6587;&#x4EF6;&#x4E2D;&#x4F1A;&#x591A;&#x6B21;&#x7528;&#x5230;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; import &#x5BFC;&#x5165;&#x6765;&#x7F29;&#x77ED;&#x5B83;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x4F7F;&#x6211;&#x4EEC;&#x7701;&#x7565;&#x5305;&#x540D;&#x6765;&#x4F7F;&#x7528;&#x7C7B;&#x578B;&#xFF1A; If a type path is used multiple times in a .hx &#xFB01;le,it might make sense to use an import to shorten it. This allows omitting the package when using the type: 1 2 3 4 5 6 7 8 import haxe.ds.StringMap; class Main { static public function main () { // instead of: new haxe.ds.StringMap(); new StringMap (); } } &#x968F;&#x7740;haxe.ds.StringMap&#x88AB;&#x5BFC;&#x5165;&#x4E4B;&#x540E;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x5C31;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x5305;&#x89E3;&#x6790; main &#x51FD;&#x6570;&#x4E2D;&#x4E0D;&#x5408;&#x6CD5;&#x7684;&#x6807;&#x8BC6;&#x7B26; StringMap&#x3002;&#x6A21;&#x5757; StringMap &#x88AB;&#x544A;&#x77E5;&#x9700;&#x8981;&#x88AB;&#x5BFC;&#x5165;&#x5230;&#x5F53;&#x524D;&#x7684;&#x6587;&#x4EF6; &#x3002; With haxe.ds.StringMap being imported in the &#xFB01;rst line,the compiler is able to resolve the unquali&#xFB01;ed identi&#xFB01;er StringMap in the main function to this package. The module StringMap is said to be imported into the current &#xFB01;le. &#x5728;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x5B9E;&#x9645;&#x4E0A;&#x5BFC;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x800C;&#x4E0D;&#x53EA;&#x662F;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x6240;&#x6709;&#x5728;&#x88AB;&#x5BFC;&#x5165;&#x7684;&#x6A21;&#x5757;&#x4E2D;&#x5B9A;&#x4E49;&#x7684;&#x7C7B;&#x578B;&#x90FD;&#x662F;&#x53EF;&#x7528;&#x7684;&#x3002; In this example, we are actually importing a module, not just a speci&#xFB01;c type within that module. This means that all types de&#xFB01;ned within the imported module are available: 1 2 3 4 5 6 7 import haxe.macro.Expr; class Main { static public function main () { var e: Binop = OpAdd; } } &#x7C7B;&#x578B; Binop &#x662F;haxe.macro.Expr&#x6A21;&#x5757;&#x4E2D;&#x4E00;&#x4E2A; enum&#xFF08;&#x7B2C;2.4&#x8282;&#xFF09;&#x58F0;&#x660E;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x8FD9;&#x4E2A;&#x6A21;&#x5757;&#x88AB;&#x5BFC;&#x5165;&#x4E4B;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E86;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x53EA;&#x8981;&#x5BFC;&#x5165;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;import haxe.macro.Expr.ExprDef&#xFF0C;&#x7A0B;&#x5E8F;&#x4F1A;&#x7F16;&#x8BD1;&#x5931;&#x8D25;&#xFF0C;&#x63D0;&#x793A;Binop&#x7C7B;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x3002; The type Binop is an enum (2.4) declared in the module haxe.macro.Expr,and thus available after the import of said module. If we were to import only a speci&#xFB01;c type of that module, e.g. import haxe.macro.Expr.ExprDef, the program would fail to compile with Class not found : Binop. &#x5173;&#x4E8E;&#x5BFC;&#x5165;&#x6709;&#x51E0;&#x4E2A;&#x65B9;&#x9762;&#x9700;&#x8981;&#x4E86;&#x89E3;&#xFF1A; There are several aspects worth knowing about importing: &#x6700;&#x5E95;&#x90E8;&#x7684;&#x5BFC;&#x5165;&#x6307;&#x4EE4;&#x5177;&#x6709;&#x6700;&#x9AD8;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#xFF08;&#x8BE6;&#x89C1; &#x89E3;&#x6790;&#x987A;&#x5E8F;&#xFF08;&#x7B2C;3.7.3&#x8282;&#xFF09;&#xFF09;&#x3002; &#x9759;&#x6001;&#x6269;&#x5C55;&#xFF08;&#x7B2C;6.3&#x8282;&#xFF09;&#x5173;&#x952E;&#x5B57; using &#x5177;&#x6709; import &#x7684;&#x6548;&#x679C;&#x3002; &#x5982;&#x679C;&#x4E00;&#x4E2A;enum&#x88AB;&#x5BFC;&#x5165;&#xFF08;&#x76F4;&#x63A5;&#x6216;&#x4F5C;&#x4E3A;&#x6A21;&#x5757;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x88AB;&#x5BFC;&#x5165;&#xFF09;&#xFF0C;&#x6240;&#x6709;&#x5B83;&#x7684;enum&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF08;&#x7B2C;2.4.1&#x8282;&#xFF09;&#x540C;&#x6837;&#x4E5F;&#x88AB;&#x5BFC;&#x5165;&#xFF08;&#x8FD9;&#x5C31;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x5728;&#x4E0A;&#x9762;&#x4F8B;&#x5B50;&#x4E2D;&#x5141;&#x8BB8; opAdd &#x7684;&#x7528;&#x6CD5;&#xFF09;&#x3002; The bottommost import takes priority (detailed in Resolution Order (Section 3.7.3)). The static extension (6.3) keyword using implies the effect of import. If an enum is imported (directly or as part of a module import), all its enum constructors (2.4.1) are also imported (this is what allows the OpAdd usage in the above example). &#x6B64;&#x5916;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5BFC;&#x5165;&#x7C7B;&#x7684;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x5E76;&#x4E0D;&#x53D7;&#x9650;&#x5236;&#x7684;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x3002; Furthermore, it is also possible to import static &#xFB01;elds (4) of a class and use them unquali&#xFB01;ed: 1 2 3 4 5 6 7 import Math.random; class Main { static public function main () { random(); } } &#x5FC5;&#x987B;&#x7279;&#x522B;&#x6CE8;&#x610F;&#xFF0C;&#x5B57;&#x6BB5;&#x540D;&#x6216;&#x8005;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x540D;&#x548C;&#x5305;&#x540D;&#x7684;&#x51B2;&#x7A81;&#xFF1A;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x4F18;&#x5148;&#x7EA7;&#x9AD8;&#x4E8E;&#x5305;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x540D;&#x4E3A;haxe&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF0C;&#x5B83;&#x4EEC;&#x4F1A;&#x4F1A;&#x963B;&#x6321;&#x6574;&#x4E2A;haxe&#x5305;&#x7684;&#x4F7F;&#x7528;&#x3002; Special care has to be taken with &#xFB01;eld names or local variable names that con&#xFB02;ict with a package name: Since they take priority over packages, a local variable named haxe blocks off usage the entire haxe package. &#x901A;&#x914D;&#x7B26;&#x5BFC;&#x5165; &#xFF1A;Haxe&#x5141;&#x8BB8;&#x4F7F;&#x7528; .* &#x4F7F; import&#x53EF;&#x4EE5;&#x5BFC;&#x5165;&#x4E00;&#x4E2A;&#x5305;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x6A21;&#x5757;&#x3001;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x7C7B;&#x578B;&#x6216;&#x8005;&#x7C7B;&#x578B;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x3002;&#x901A;&#x8FC7;&#x4EE5;&#x4E0B;&#x4F8B;&#x5B50;&#x91CD;&#x70B9;&#x4E86;&#x89E3;&#x6B64;&#x7C7B;&#x5BFC;&#x5165;&#x64CD;&#x4F5C;&#x53EA;&#x80FD;&#x8986;&#x76D6;&#x540C;&#x7EA7;&#x7684;&#x8BBF;&#x95EE;&#xFF08;only crosses a single level&#xFF09;&#xFF1A; Wildcard import Haxe allows using .* to allow import of all modules in a package, all types in a module or all static &#xFB01;elds in a type. It is important to understand that this kind of import only crosses a single level as we can see in the following example: 1 2 3 4 5 6 7 8 import haxe.macro.*; class Main { static function main () { var expr: Expr = null ; //var expr:ExprDef = null; // Class not found : ExprDef } } &#x4F7F;&#x7528;&#x901A;&#x914D;&#x7B26;&#x5230;haxe.macro&#x7684;&#x5BFC;&#x5165;&#xFF0C;&#x4F7F;&#x8FD9;&#x4E2A;&#x5305;&#x4E2D;&#x7684; Expr &#x6A21;&#x5757;&#x53EF;&#x4EE5;&#x88AB;&#x8BBF;&#x95EE;&#xFF0C;&#x4F46;&#x662F;&#x5B83; &#x4E0D;&#x80FD;&#x4F7F; Expr &#x6A21;&#x5757;&#x7684;&#x5B50;&#x7C7B;&#x578B; ExprDef &#x88AB;&#x8BBF;&#x95EE; &#x3002;&#x8FD9;&#x4E2A;&#x89C4;&#x5219;&#x5F53;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x88AB;&#x5BFC;&#x5165;&#x65F6;&#x4E5F;&#x6269;&#x5C55;&#x5230;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x3002; Using the wildcard import on haxe.macro allows accessing Expr which is a module in this package, but it does not allow accessing ExprDef which is a sub-type of the Expr module. This rule extends to static &#xFB01;elds when a module is imported. &#x5F53;&#x4F7F;&#x7528;&#x901A;&#x914D;&#x7B26;&#x5BFC;&#x5165;&#x4E00;&#x4E2A;&#x5305;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x5E76;&#x4E0D;&#x4F1A;&#x7ACB;&#x5373;&#x5904;&#x7406;&#x5305;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6A21;&#x5757;&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#x8FD9;&#x4E9B;&#x6A21;&#x5757;&#x9664;&#x975E;&#x88AB;&#x660E;&#x786E;&#x4F7F;&#x7528;&#x5426;&#x5219;&#x4E0D;&#x4F1A;&#x88AB;&#x4F5C;&#x4E3A;&#x8F93;&#x51FA;&#x7684;&#x4E00;&#x90E8;&#x5206;&#x751F;&#x6210;&#x3002; When using wildcard imports on a package, the compiler does not eagerly process all modules in that package; modules that have not been used explicitly are not part of the generated output. &#x4F7F;&#x7528;&#x522B;&#x540D;&#x5BFC;&#x5165; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x6216;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#x5728;&#x4E00;&#x4E2A;&#x5BFC;&#x5165;&#x5B83;&#x7684;&#x6A21;&#x5757;&#x4E2D;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#xFF0C;&#x53EF;&#x4EE5;&#x4E3A;&#x5B83;&#x5F15;&#x5165;&#x522B;&#x540D;&#x4E3A;&#x4E00;&#x4E2A;&#x7B80;&#x77ED;&#x7684;&#x540D;&#x5B57;&#x3002;&#x8FD9;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x901A;&#x8FC7;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x552F;&#x4E00;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#x6765;&#x6D88;&#x9664;&#x547D;&#x540D;&#x51B2;&#x7A81;&#x3002; Import with alias If a type or static &#xFB01;eld is used a lot in an importing module it might help to alias it to a shorter name. This can also be used to disambiguate con&#xFB02;icting names by giving them a unique identi&#xFB01;er. 1 2 3 4 5 6 7 8 9 import String .fromCharCode in f; class Main { static function main () { var c1 = f( 65 ); var c2 = f( 66 ); trace (c1 + c2); // AB } } &#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x5BFC;&#x5165;String.fromCharCode&#x4E3A; f&#xFF0C;&#x4F7F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528; f(65) &#x548C; f(66)&#x3002;&#x8FBE;&#x5230;&#x548C;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x4E00;&#x6837;&#x7684;&#x4F7F;&#x7528;&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x7F16;&#x8BD1;&#x65F6;&#x529F;&#x80FD;&#xFF0C;&#x4E0D;&#x4F1A;&#x6709;&#x8FD0;&#x884C;&#x65F6;&#x5F00;&#x9500;&#x3002; Here we import String.fromCharCode as f which allows us to use f(65) and f(66). While the same could be achieved with a local variable, this method is compile-time exclusive and guaranteed to have no run-time overhead. &#x4ECE;Haxe3.2.0&#x540E; &#xFF0C;Haxe&#x5141;&#x8BB8;&#x4F7F;&#x7528;&#x66F4;&#x81EA;&#x7136;&#x7684; as &#x66FF;&#x4EE3; in &#x3002; Since Haxe 3.2.0 Haxe also allows the more natural as in place of in."},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html":{"title":"","path":"\\3.类型系统\\3.7.模块和路径\\3.7.模块和路径.html","body":"3.7.模块和路径 定义：模块 所有的Haxe代码组织在模块中，使用路径定位。本质上讲，每个.hx 文件表示一个模块，其中可能包含多个类型。一个类型可以是私有的，这种情况下只有在它所处的模块内才能被访问到它。 [warning] Deﬁnition: Module All Haxe code is organized in modules, which are addressed using paths. In essence, each .hx ﬁle represents a module which may contain several types. A type may be private, in which case only its containing module can access it. 模块和它所包含的同名类型之间的区别在设计上是模糊的。事实上，定位 haxe.ds.StringMapInt 可以认为是 haxe.ds.StringMap.StringMapInt 的简短写法。后者由四部分构成： The distinction of a module and its containing type of the same name is blurry by design. In fact, addressing haxe.ds.StringMap can be considered shorthand for haxe.ds.StringMap.StringMap. The latter version consists of four parts: 包名 haxe.ds 模块名 StringMap 类型名StringMap 类型参数 Int the package haxe.ds the module name StringMap the type name StringMap the type parameter Int 如果模块和类型名是相同的，重复的部分可以被省略，使用 haxe.ds.StringMapInt 作为速记。然而，了解扩展的记法可以帮助我们理解模块子类型（第3.7.1）如何定位。 If the module and type name are equal,the duplicate can be removed,leading to the haxe.ds.StringMap short version. However, knowing about the extended version helps with understanding how module sub-types (3.7.1) are addressed. 路径可以被进一步简化通过 使用 import（第3.7.2节），通常允许省略路径的包部分。这可能导致不受限的标识符，而理解解析顺序（第3.7.3节）是必要的。 Paths can be shortened further by using an import(3.7.2), which typically allows omitting the package part of a path. This may lead to usage of unqualiﬁed identiﬁers, for which understanding the resolution order (3.7.3) is required. 类型路径 定义：类型路径 类型的点路径由包，模块名和类型名组成。它的通常格式是 pack1.paceN.ModuleName.TypeName 。 [warning] Deﬁnition: Type path The (dot-)path to a type consists of the package, the module name and the type name. Its general form is pack1.pack2.packN.ModuleName.TypeName."},"3.类型系统/3.7.模块和路径/3.7.模块和路径.html#3-7-模块和路径":{"title":"3.7.&#x6A21;&#x5757;&#x548C;&#x8DEF;&#x5F84;","path":"\\3.类型系统\\3.7.模块和路径\\3.7.模块和路径.html#3-7-模块和路径","body":"&#x5B9A;&#x4E49;&#xFF1A;&#x6A21;&#x5757; &#x6240;&#x6709;&#x7684;Haxe&#x4EE3;&#x7801;&#x7EC4;&#x7EC7;&#x5728;&#x6A21;&#x5757;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x8DEF;&#x5F84;&#x5B9A;&#x4F4D;&#x3002;&#x672C;&#x8D28;&#x4E0A;&#x8BB2;&#xFF0C;&#x6BCF;&#x4E2A;.hx &#x6587;&#x4EF6;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#xFF0C;&#x5176;&#x4E2D;&#x53EF;&#x80FD;&#x5305;&#x542B;&#x591A;&#x4E2A;&#x7C7B;&#x578B;&#x3002;&#x4E00;&#x4E2A;&#x7C7B;&#x578B;&#x53EF;&#x4EE5;&#x662F;&#x79C1;&#x6709;&#x7684;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x53EA;&#x6709;&#x5728;&#x5B83;&#x6240;&#x5904;&#x7684;&#x6A21;&#x5757;&#x5185;&#x624D;&#x80FD;&#x88AB;&#x8BBF;&#x95EE;&#x5230;&#x5B83;&#x3002; [warning] De&#xFB01;nition: Module All Haxe code is organized in modules, which are addressed using paths. In essence, each .hx &#xFB01;le represents a module which may contain several types. A type may be private, in which case only its containing module can access it. &#x6A21;&#x5757;&#x548C;&#x5B83;&#x6240;&#x5305;&#x542B;&#x7684;&#x540C;&#x540D;&#x7C7B;&#x578B;&#x4E4B;&#x95F4;&#x7684;&#x533A;&#x522B;&#x5728;&#x8BBE;&#x8BA1;&#x4E0A;&#x662F;&#x6A21;&#x7CCA;&#x7684;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x5B9A;&#x4F4D; haxe.ds.StringMapInt &#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F; haxe.ds.StringMap.StringMapInt &#x7684;&#x7B80;&#x77ED;&#x5199;&#x6CD5;&#x3002;&#x540E;&#x8005;&#x7531;&#x56DB;&#x90E8;&#x5206;&#x6784;&#x6210;&#xFF1A; The distinction of a module and its containing type of the same name is blurry by design. In fact, addressing haxe.ds.StringMap can be considered shorthand for haxe.ds.StringMap.StringMap. The latter version consists of four parts: &#x5305;&#x540D; haxe.ds &#x6A21;&#x5757;&#x540D; StringMap &#x7C7B;&#x578B;&#x540D;StringMap &#x7C7B;&#x578B;&#x53C2;&#x6570; Int the package haxe.ds the module name StringMap the type name StringMap the type parameter Int &#x5982;&#x679C;&#x6A21;&#x5757;&#x548C;&#x7C7B;&#x578B;&#x540D;&#x662F;&#x76F8;&#x540C;&#x7684;&#xFF0C;&#x91CD;&#x590D;&#x7684;&#x90E8;&#x5206;&#x53EF;&#x4EE5;&#x88AB;&#x7701;&#x7565;&#xFF0C;&#x4F7F;&#x7528; haxe.ds.StringMapInt &#x4F5C;&#x4E3A;&#x901F;&#x8BB0;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x4E86;&#x89E3;&#x6269;&#x5C55;&#x7684;&#x8BB0;&#x6CD5;&#x53EF;&#x4EE5;&#x5E2E;&#x52A9;&#x6211;&#x4EEC;&#x7406;&#x89E3;&#x6A21;&#x5757;&#x5B50;&#x7C7B;&#x578B;&#xFF08;&#x7B2C;3.7.1&#xFF09;&#x5982;&#x4F55;&#x5B9A;&#x4F4D;&#x3002; If the module and type name are equal,the duplicate can be removed,leading to the haxe.ds.StringMap short version. However, knowing about the extended version helps with understanding how module sub-types (3.7.1) are addressed. &#x8DEF;&#x5F84;&#x53EF;&#x4EE5;&#x88AB;&#x8FDB;&#x4E00;&#x6B65;&#x7B80;&#x5316;&#x901A;&#x8FC7; &#x4F7F;&#x7528; import&#xFF08;&#x7B2C;3.7.2&#x8282;&#xFF09;&#xFF0C;&#x901A;&#x5E38;&#x5141;&#x8BB8;&#x7701;&#x7565;&#x8DEF;&#x5F84;&#x7684;&#x5305;&#x90E8;&#x5206;&#x3002;&#x8FD9;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x4E0D;&#x53D7;&#x9650;&#x7684;&#x6807;&#x8BC6;&#x7B26;&#xFF0C;&#x800C;&#x7406;&#x89E3;&#x89E3;&#x6790;&#x987A;&#x5E8F;&#xFF08;&#x7B2C;3.7.3&#x8282;&#xFF09;&#x662F;&#x5FC5;&#x8981;&#x7684;&#x3002; Paths can be shortened further by using an import(3.7.2), which typically allows omitting the package part of a path. This may lead to usage of unquali&#xFB01;ed identi&#xFB01;ers, for which understanding the resolution order (3.7.3) is required. &#x7C7B;&#x578B;&#x8DEF;&#x5F84; &#x5B9A;&#x4E49;&#xFF1A;&#x7C7B;&#x578B;&#x8DEF;&#x5F84; &#x7C7B;&#x578B;&#x7684;&#x70B9;&#x8DEF;&#x5F84;&#x7531;&#x5305;&#xFF0C;&#x6A21;&#x5757;&#x540D;&#x548C;&#x7C7B;&#x578B;&#x540D;&#x7EC4;&#x6210;&#x3002;&#x5B83;&#x7684;&#x901A;&#x5E38;&#x683C;&#x5F0F;&#x662F; pack1.paceN.ModuleName.TypeName &#x3002; [warning] De&#xFB01;nition: Type path The (dot-)path to a type consists of the package, the module name and the type name. Its general form is pack1.pack2.packN.ModuleName.TypeName."}}}